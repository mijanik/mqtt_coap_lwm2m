
embenet_node_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bfc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c68  08019d40  08019d40  00029d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9a8  0801d9a8  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9a8  0801d9a8  0002d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9b0  0801d9b0  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9b0  0801d9b0  0002d9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9b4  0801d9b4  0002d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801d9b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004250  20000098  0801da4c  00030098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200042e8  0801da4c  000342e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .comment      00000088  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b78  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c25  00000000  00000000  00046cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0004a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a5  00000000  00000000  0004c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000060e4  00000000  00000000  0004d22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e8d  00000000  00000000  00053311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfaf2  00000000  00000000  0006c19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e08  00000000  00000000  0012bc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00132a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	08019d24 	.word	0x08019d24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	08019d24 	.word	0x08019d24

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_d2iz>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d215      	bcs.n	8000b32 <__aeabi_d2iz+0x36>
 8000b06:	d511      	bpl.n	8000b2c <__aeabi_d2iz+0x30>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d912      	bls.n	8000b38 <__aeabi_d2iz+0x3c>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d105      	bne.n	8000b44 <__aeabi_d2iz+0x48>
 8000b38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	bf08      	it	eq
 8000b3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295
 8000baa:	f000 b9bb 	b.w	8000f24 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f84d 	bl	8000c5c <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f840 	bl	8000c5c <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f82f 	bl	8000c5c <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f821 	bl	8000c5c <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b970 	b.w	8000f24 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	460d      	mov	r5, r1
 8000c64:	4604      	mov	r4, r0
 8000c66:	460f      	mov	r7, r1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d14a      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4694      	mov	ip, r2
 8000c70:	d965      	bls.n	8000d3e <__udivmoddi4+0xe2>
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	b143      	cbz	r3, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c7c:	f1c3 0220 	rsb	r2, r3, #32
 8000c80:	409f      	lsls	r7, r3
 8000c82:	fa20 f202 	lsr.w	r2, r0, r2
 8000c86:	4317      	orrs	r7, r2
 8000c88:	409c      	lsls	r4, r3
 8000c8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8e:	fa1f f58c 	uxth.w	r5, ip
 8000c92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c96:	0c22      	lsrs	r2, r4, #16
 8000c98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ca0:	fb01 f005 	mul.w	r0, r1, r5
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x62>
 8000ca8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cb0:	f080 811b 	bcs.w	8000eea <__udivmoddi4+0x28e>
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	f240 8118 	bls.w	8000eea <__udivmoddi4+0x28e>
 8000cba:	3902      	subs	r1, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a12      	subs	r2, r2, r0
 8000cc0:	b2a4      	uxth	r4, r4
 8000cc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cce:	fb00 f505 	mul.w	r5, r0, r5
 8000cd2:	42a5      	cmp	r5, r4
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x90>
 8000cd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cde:	f080 8106 	bcs.w	8000eee <__udivmoddi4+0x292>
 8000ce2:	42a5      	cmp	r5, r4
 8000ce4:	f240 8103 	bls.w	8000eee <__udivmoddi4+0x292>
 8000ce8:	4464      	add	r4, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cf0:	1b64      	subs	r4, r4, r5
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11e      	cbz	r6, 8000cfe <__udivmoddi4+0xa2>
 8000cf6:	40dc      	lsrs	r4, r3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0xbc>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80ec 	beq.w	8000ee4 <__udivmoddi4+0x288>
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d12:	4608      	mov	r0, r1
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	fab3 f183 	clz	r1, r3
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d149      	bne.n	8000db4 <__udivmoddi4+0x158>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	d302      	bcc.n	8000d2a <__udivmoddi4+0xce>
 8000d24:	4282      	cmp	r2, r0
 8000d26:	f200 80f7 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d2a:	1a84      	subs	r4, r0, r2
 8000d2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d30:	2001      	movs	r0, #1
 8000d32:	4617      	mov	r7, r2
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d0e2      	beq.n	8000cfe <__udivmoddi4+0xa2>
 8000d38:	e9c6 4700 	strd	r4, r7, [r6]
 8000d3c:	e7df      	b.n	8000cfe <__udivmoddi4+0xa2>
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xe6>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f382 	clz	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 808f 	bne.w	8000e6a <__udivmoddi4+0x20e>
 8000d4c:	1a8a      	subs	r2, r1, r2
 8000d4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	2101      	movs	r1, #1
 8000d58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d60:	0c22      	lsrs	r2, r4, #16
 8000d62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d66:	fb0e f005 	mul.w	r0, lr, r5
 8000d6a:	4290      	cmp	r0, r2
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	f200 80ca 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000d7e:	4645      	mov	r5, r8
 8000d80:	1a12      	subs	r2, r2, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d88:	fb07 2210 	mls	r2, r7, r0, r2
 8000d8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d90:	fb0e fe00 	mul.w	lr, lr, r0
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x14e>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x14c>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	f200 80ba 	bhi.w	8000f1c <__udivmoddi4+0x2c0>
 8000da8:	4610      	mov	r0, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000db2:	e79f      	b.n	8000cf4 <__udivmoddi4+0x98>
 8000db4:	f1c1 0720 	rsb	r7, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dca:	40fd      	lsrs	r5, r7
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fa00 f901 	lsl.w	r9, r0, r1
 8000dd2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	fbb5 f8f0 	udiv	r8, r5, r0
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb00 5518 	mls	r5, r0, r8, r5
 8000de4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de8:	fb08 f50e 	mul.w	r5, r8, lr
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	42a5      	cmp	r5, r4
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0a:	4464      	add	r4, ip
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	b29d      	uxth	r5, r3
 8000e10:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e14:	fb00 4413 	mls	r4, r0, r3, r4
 8000e18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e3a:	fba0 8302 	umull	r8, r3, r0, r2
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	429c      	cmp	r4, r3
 8000e44:	46c6      	mov	lr, r8
 8000e46:	461d      	mov	r5, r3
 8000e48:	d355      	bcc.n	8000ef6 <__udivmoddi4+0x29a>
 8000e4a:	d052      	beq.n	8000ef2 <__udivmoddi4+0x296>
 8000e4c:	b156      	cbz	r6, 8000e64 <__udivmoddi4+0x208>
 8000e4e:	ebb9 030e 	subs.w	r3, r9, lr
 8000e52:	eb64 0405 	sbc.w	r4, r4, r5
 8000e56:	fa04 f707 	lsl.w	r7, r4, r7
 8000e5a:	40cb      	lsrs	r3, r1
 8000e5c:	40cc      	lsrs	r4, r1
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	e9c6 7400 	strd	r7, r4, [r6]
 8000e64:	2100      	movs	r1, #0
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	f1c3 0120 	rsb	r1, r3, #32
 8000e6e:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e72:	fa20 f201 	lsr.w	r2, r0, r1
 8000e76:	fa25 f101 	lsr.w	r1, r5, r1
 8000e7a:	409d      	lsls	r5, r3
 8000e7c:	432a      	orrs	r2, r5
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8e:	0c11      	lsrs	r1, r2, #16
 8000e90:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e94:	fb00 f50e 	mul.w	r5, r0, lr
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428d      	cmp	r5, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1b49      	subs	r1, r1, r5
 8000eb4:	b292      	uxth	r2, r2
 8000eb6:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eba:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec2:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec6:	4291      	cmp	r1, r2
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x280>
 8000eca:	eb1c 0202 	adds.w	r2, ip, r2
 8000ece:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed2:	d216      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d914      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed8:	3d02      	subs	r5, #2
 8000eda:	4462      	add	r2, ip
 8000edc:	1a52      	subs	r2, r2, r1
 8000ede:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee2:	e739      	b.n	8000d58 <__udivmoddi4+0xfc>
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e709      	b.n	8000cfe <__udivmoddi4+0xa2>
 8000eea:	4639      	mov	r1, r7
 8000eec:	e6e7      	b.n	8000cbe <__udivmoddi4+0x62>
 8000eee:	4610      	mov	r0, r2
 8000ef0:	e6fc      	b.n	8000cec <__udivmoddi4+0x90>
 8000ef2:	45c1      	cmp	r9, r8
 8000ef4:	d2aa      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000efa:	eb63 050c 	sbc.w	r5, r3, ip
 8000efe:	3801      	subs	r0, #1
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4645      	mov	r5, r8
 8000f04:	e7ea      	b.n	8000edc <__udivmoddi4+0x280>
 8000f06:	4603      	mov	r3, r0
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	46d0      	mov	r8, sl
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3d02      	subs	r5, #2
 8000f14:	4462      	add	r2, ip
 8000f16:	e733      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70b      	b.n	8000d34 <__udivmoddi4+0xd8>
 8000f1c:	4464      	add	r4, ip
 8000f1e:	3802      	subs	r0, #2
 8000f20:	e743      	b.n	8000daa <__udivmoddi4+0x14e>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff ffcc 	bl	8000f28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff ffc9 	bl	8000f28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f7ff ffc6 	bl	8000f28 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000f9c:	2080      	movs	r0, #128	; 0x80
 8000f9e:	f7ff ffc3 	bl	8000f28 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin);
 8000fa2:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000fa6:	482f      	ldr	r0, [pc, #188]	; (8001064 <MX_GPIO_Init+0xf0>)
 8000fa8:	f7ff ffd6 	bl	8000f58 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_15|LL_GPIO_PIN_11|LL_GPIO_PIN_10
 8000fac:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 8000fb0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f003 fe78 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000fc6:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000fca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_GPIO_Init+0xf0>)
 8000fe2:	f003 fe68 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_14|LL_GPIO_PIN_5|LL_GPIO_PIN_8
 8000fe6:	f247 5336 	movw	r3, #30006	; 0x7536
 8000fea:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_1
                          |LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_GPIO_Init+0xf0>)
 8000ffa:	f003 fe5c 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 8000ffe:	f242 0307 	movw	r3, #8199	; 0x2007
 8001002:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <MX_GPIO_Init+0xf4>)
 8001012:	f003 fe50 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8001016:	2303      	movs	r3, #3
 8001018:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f003 fe44 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B3_Pin;
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001036:	2301      	movs	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <MX_GPIO_Init+0xf4>)
 8001040:	f003 fe39 	bl	8004cb6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001044:	2308      	movs	r3, #8
 8001046:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001048:	2303      	movs	r3, #3
 800104a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_GPIO_Init+0xf8>)
 8001056:	f003 fe2e 	bl	8004cb6 <LL_GPIO_Init>

}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48001c00 	.word	0x48001c00

08001070 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <__NVIC_SystemReset+0x24>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001082:	4904      	ldr	r1, [pc, #16]	; (8001094 <__NVIC_SystemReset+0x24>)
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_SystemReset+0x28>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800108a:	f3bf 8f4f 	dsb	sy
}
 800108e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <__NVIC_SystemReset+0x20>
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	05fa0004 	.word	0x05fa0004

0800109c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	58000400 	.word	0x58000400

080010c4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800110e:	d101      	bne.n	8001114 <LL_RCC_HSE_IsReady+0x18>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <LL_RCC_HSE_IsReady+0x1a>
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 0203 	bic.w	r2, r3, #3
 8001130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001190:	f023 020f 	bic.w	r2, r3, #15
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119c:	4313      	orrs	r3, r2
 800119e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001226:	d101      	bne.n	800122c <LL_RCC_PLL_IsReady+0x18>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <LL_RCC_PLL_IsReady+0x1a>
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
	...

08001238 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800124e:	4013      	ands	r3, r2
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	4311      	orrs	r1, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	0212      	lsls	r2, r2, #8
 800125a:	4311      	orrs	r1, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001264:	4313      	orrs	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	1fff808c 	.word	0x1fff808c

08001278 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <LL_FLASH_SetLatency+0x24>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 0207 	bic.w	r2, r3, #7
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <LL_FLASH_SetLatency+0x24>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	58004000 	.word	0x58004000

080012bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <LL_FLASH_GetLatency+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0307 	and.w	r3, r3, #7
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	58004000 	.word	0x58004000

080012d4 <onJoined>:
/**
 * User-defined callback that will be called, when the node joins the network.
 * @param[in] panId Identifier of the Network that node joined
 * @param[in] quickJoinCredentials pointer to the Quick Join Credentials that MAY be stored by the user to facilitate rejoining process.
 */
static void onJoined(EMBENET_PANID panId, const EMBENET_NODE_QuickJoinCredentials *quickJoinCredentials) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	80fb      	strh	r3, [r7, #6]
    printf("Joined network with PANID: 0x%04" PRIx16 "\n", panId);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <onJoined+0x44>)
 80012e6:	f017 fcbb 	bl	8018c60 <iprintf>

    // Start ENMS Service that provides network-wide telemetry information
    EnmsNodeResult enmsStartStatus = ENMS_NODE_Start(&enmsNode);
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <onJoined+0x48>)
 80012ec:	f00a ff64 	bl	800c1b8 <ENMS_NODE_Start>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
    if (ENMS_NODE_RESULT_OK == enmsStartStatus) {
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <onJoined+0x2e>
        printf("ENMS service started\n");
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <onJoined+0x4c>)
 80012fc:	f017 fd16 	bl	8018d2c <puts>
 8001300:	e004      	b.n	800130c <onJoined+0x38>
    } else {
        printf("ENMS service failed to start with status: %d\n", (int)enmsStartStatus);
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <onJoined+0x50>)
 8001308:	f017 fcaa 	bl	8018c60 <iprintf>
#if 1 != IS_ROOT
    // Start exemplary, user-defined custom service
    //custom_service_start();
    //lwm2m_service_start();
    // Start MQTT-SN demo service
    mqttsn_client_service_start();
 800130c:	f000 fbe2 	bl	8001ad4 <mqttsn_client_service_start>
#endif
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	08019d40 	.word	0x08019d40
 800131c:	200000b8 	.word	0x200000b8
 8001320:	08019d64 	.word	0x08019d64
 8001324:	08019d7c 	.word	0x08019d7c

08001328 <onLeft>:

/**
 * @brief User-defined callback, that will be called after the node leaves the network
 */
static void onLeft(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
    printf("Node has left the network\n");
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <onLeft+0x3c>)
 8001330:	f017 fcfc 	bl	8018d2c <puts>
    // Stop ENMS service
    EnmsNodeResult enmsStopStatus = ENMS_NODE_Stop(&enmsNode);
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <onLeft+0x40>)
 8001336:	f00a ffdb 	bl	800c2f0 <ENMS_NODE_Stop>
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
    if (ENMS_NODE_RESULT_OK == enmsStopStatus) {
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <onLeft+0x24>
        printf("ENMS service stopped\n");
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <onLeft+0x44>)
 8001346:	f017 fcf1 	bl	8018d2c <puts>
 800134a:	e004      	b.n	8001356 <onLeft+0x2e>
    } else {
        printf("ENMS service failed to stop with status: %d\n", (int)enmsStopStatus);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <onLeft+0x48>)
 8001352:	f017 fc85 	bl	8018c60 <iprintf>

#if 1 != IS_ROOT
    // Stop exemplary, user-defined custom service
    //custom_service_stop();
    // Stop MQTT-SN demo service
    mqttsn_client_service_stop();
 8001356:	f000 fbd7 	bl	8001b08 <mqttsn_client_service_stop>
#endif

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08019dac 	.word	0x08019dac
 8001368:	200000b8 	.word	0x200000b8
 800136c:	08019dc8 	.word	0x08019dc8
 8001370:	08019de0 	.word	0x08019de0

08001374 <onJoinAttempt>:
/**
 * @brief User-defined callback, that will be called when node tries to join the network
 *
 * NOTE: This callback is included in this demo only for debugging purposes
 */
static void onJoinAttempt(EMBENET_PANID panId, const void *panData, size_t panDataSize) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	81fb      	strh	r3, [r7, #14]
    printf("Node is attempting to join the network with PANID 0x%04" PRIx16 "\n", panId);
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <onJoinAttempt+0x28>)
 8001388:	f017 fc6a 	bl	8018c60 <iprintf>
    printf("Network-wide data (%uB)\n", (unsigned)panDataSize);
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <onJoinAttempt+0x2c>)
 8001390:	f017 fc66 	bl	8018c60 <iprintf>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08019e10 	.word	0x08019e10
 80013a0:	08019e4c 	.word	0x08019e4c

080013a4 <dataOnUregisteredPort>:
/**
 * @brief User-defined callback, that will be called when the node receives UDP datagram on closed port
 *
 * NOTE: This callback is included for purely debugging purposes. It should be Never used as a method of reliable data transfer
 */
static void dataOnUregisteredPort(uint16_t port) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
    printf("Got UDP datagram on unregistered port no: %" PRIu16 "\n", port);
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <dataOnUregisteredPort+0x1c>)
 80013b4:	f017 fc54 	bl	8018c60 <iprintf>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	08019e68 	.word	0x08019e68

080013c4 <onQuickJoinCredentialsObsolete>:
 * @brief User-defined callback, that will be called when provided quick join credentials become obsolete.
 *
 * If the quick join feature is used, user should delete the stored data and store new data, when onJoined callback will be called again.
 * This demo application does not use the quick join feature.
 */
static void onQuickJoinCredentialsObsolete(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    printf("Quick join credentials became obsolete\n");
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <onQuickJoinCredentialsObsolete+0x10>)
 80013ca:	f017 fcaf 	bl	8018d2c <puts>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08019e98 	.word	0x08019e98

080013d8 <main>:

/**
  * @brief  The application entry point.
  */
int main(void)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b092      	sub	sp, #72	; 0x48
 80013dc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80013de:	f001 f899 	bl	8002514 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80013e2:	f000 f887 	bl	80014f4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80013e6:	f7ff fdc5 	bl	8000f74 <MX_GPIO_Init>
    /* USER CODE BEGIN 2 */

    LOGGER_UART_Init();
 80013ea:	f000 ffcb 	bl	8002384 <LOGGER_UART_Init>
    printf("\n"
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <main+0xec>)
 80013f0:	f017 fc9c 	bl	8018d2c <puts>
            "+---------------------------------------------+\n"
            "   embeNET Node demo for nucleo-wl55jc board   \n"
            "+---------------------------------------------+\n");

    // Initialize structure with user-defined event handlers
    EMBENET_NODE_EventHandlers handlers = {
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <main+0xf0>)
 80013f6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	6023      	str	r3, [r4, #0]
        .onQuickJoinCredentialsObsolete = onQuickJoinCredentialsObsolete,
        .onDataOnUnregisteredPort = dataOnUregisteredPort
    };

    // Initialize network stack
    if (EMBENET_RESULT_OK == EMBENET_NODE_Init(&handlers)) {
 8001404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001408:	4618      	mov	r0, r3
 800140a:	f006 fd47 	bl	8007e9c <EMBENET_NODE_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <main+0x44>
        printf("embeNET Node initialized\n");
 8001414:	482d      	ldr	r0, [pc, #180]	; (80014cc <main+0xf4>)
 8001416:	f017 fc89 	bl	8018d2c <puts>
 800141a:	e002      	b.n	8001422 <main+0x4a>
    } else {
        printf("Failed to initialize embeNET Node\n");
 800141c:	482c      	ldr	r0, [pc, #176]	; (80014d0 <main+0xf8>)
 800141e:	f017 fc85 	bl	8018d2c <puts>
    }
    
    // Get hardware ID using 96-bit CPU uid
    uint8_t hardwareId[16] = { 0x00 };
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
    memcpy(hardwareId, (void const*) UID_BASE, 12);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	220c      	movs	r2, #12
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <main+0xfc>)
 800143a:	4618      	mov	r0, r3
 800143c:	f017 fe53 	bl	80190e6 <memcpy>
    // Initialize ENMS service on its default port. You may specify custom Hardware Identifier
    if (ENMS_NODE_RESULT_OK == ENMS_NODE_Init(&enmsNode, ENMS_DEFAULT_PORT, hardwareId, NULL)) {
 8001440:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001444:	2300      	movs	r3, #0
 8001446:	f24f 01b1 	movw	r1, #61617	; 0xf0b1
 800144a:	4823      	ldr	r0, [pc, #140]	; (80014d8 <main+0x100>)
 800144c:	f00a fdb4 	bl	800bfb8 <ENMS_NODE_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d103      	bne.n	800145e <main+0x86>
        printf("ENMS service initialized\n");
 8001456:	4821      	ldr	r0, [pc, #132]	; (80014dc <main+0x104>)
 8001458:	f017 fc68 	bl	8018d2c <puts>
 800145c:	e002      	b.n	8001464 <main+0x8c>
    } else {
        printf("Failed to initialize ENMS service!\n");
 800145e:	4820      	ldr	r0, [pc, #128]	; (80014e0 <main+0x108>)
 8001460:	f017 fc64 	bl	8018d2c <puts>
#if 1 == IS_ROOT
    printf("Acting as root with UID: 0x%x%08x\n", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
    // When the application is built for Root node, start as root instead of joining the network
    EMBENET_NODE_RootStart(NULL, 0);
#else
    printf("Acting as node with UID: 0x%x%08x\n", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
 8001464:	f006 feb1 	bl	80081ca <EMBENET_NODE_GetUID>
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	000a      	movs	r2, r1
 8001472:	2300      	movs	r3, #0
 8001474:	4614      	mov	r4, r2
 8001476:	f006 fea8 	bl	80081ca <EMBENET_NODE_GetUID>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4613      	mov	r3, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4621      	mov	r1, r4
 8001484:	4817      	ldr	r0, [pc, #92]	; (80014e4 <main+0x10c>)
 8001486:	f017 fbeb 	bl	8018c60 <iprintf>

    // Initialize exemplary, user-defined custom service
    //custom_service_init();
    //lwm2m_service_init();
    // Initialize MQTT-SN service
    mqttsn_client_service_init();
 800148a:	f000 fab3 	bl	80019f4 <mqttsn_client_service_init>

    // Additionally tell the ENMS what services are running
//    (void) ENMS_NODE_RegisterService(&enmsNode, "custom", 1);
    (void) ENMS_NODE_RegisterService(&enmsNode, "mqttsn", 1);
 800148e:	2201      	movs	r2, #1
 8001490:	4915      	ldr	r1, [pc, #84]	; (80014e8 <main+0x110>)
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <main+0x100>)
 8001494:	f00a fd1e 	bl	800bed4 <ENMS_NODE_RegisterService>

    // embeNET network configuration:
    // K1 key, used to authenticate the network node should join and
    // PSK - Node's secret key.
    // Note that the psk value should be preferably stored in secure memory, or be preloaded using custom bootloader.
    EMBENET_NODE_Config config = {
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <main+0x114>)
 800149a:	1d3c      	adds	r4, r7, #4
 800149c:	461d      	mov	r5, r3
 800149e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .k1.val = { 0xc0, 0x8b, 0x76, 0x62, 0x77, 0x09, 0x9e, 0x7d, 0x7e, 0x9c, 0x02, 0x22, 0xf1, 0x68, 0xcc, 0x9e },
        .psk.val = {0x46, 0xd7, 0xdc, 0x94, 0xe8, 0xee, 0x74, 0x96, 0xce, 0xaf, 0x54, 0xa3, 0xab, 0x64, 0xcb, 0xeb },
    };

    printf("Trying to join a network...\n");
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <main+0x118>)
 80014ac:	f017 fc3e 	bl	8018d2c <puts>
    // Make the node join the network
    EMBENET_NODE_Join(&config);
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f006 febe 	bl	8008234 <EMBENET_NODE_Join>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        // Periodically call embeNET Node process function
        EMBENET_NODE_Proc();
 80014b8:	f006 fc62 	bl	8007d80 <EMBENET_NODE_Proc>
#if 1 != IS_ROOT
        // When acting as Node, run the MQTT-SN service process
        mqttsn_client_service_proc();
 80014bc:	f000 fb5a 	bl	8001b74 <mqttsn_client_service_proc>
        EMBENET_NODE_Proc();
 80014c0:	e7fa      	b.n	80014b8 <main+0xe0>
 80014c2:	bf00      	nop
 80014c4:	08019ec0 	.word	0x08019ec0
 80014c8:	0801a01c 	.word	0x0801a01c
 80014cc:	08019f54 	.word	0x08019f54
 80014d0:	08019f70 	.word	0x08019f70
 80014d4:	1fff7590 	.word	0x1fff7590
 80014d8:	200000b8 	.word	0x200000b8
 80014dc:	08019f94 	.word	0x08019f94
 80014e0:	08019fb0 	.word	0x08019fb0
 80014e4:	08019fd4 	.word	0x08019fd4
 80014e8:	08019ff8 	.word	0x08019ff8
 80014ec:	0801a030 	.word	0x0801a030
 80014f0:	0801a000 	.word	0x0801a000

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff fecb 	bl	8001294 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80014fe:	bf00      	nop
 8001500:	f7ff fedc 	bl	80012bc <LL_FLASH_GetLatency>
 8001504:	4603      	mov	r3, r0
 8001506:	2b02      	cmp	r3, #2
 8001508:	d1fa      	bne.n	8001500 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800150a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150e:	f7ff fdc5 	bl	800109c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableTcxo();
 8001512:	f7ff fdd7 	bl	80010c4 <LL_RCC_HSE_EnableTcxo>
  LL_RCC_HSE_Enable();
 8001516:	f7ff fde3 	bl	80010e0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800151a:	bf00      	nop
 800151c:	f7ff fdee 	bl	80010fc <LL_RCC_HSE_IsReady>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1fa      	bne.n	800151c <SystemClock_Config+0x28>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_2, 12, LL_RCC_PLLR_DIV_4);
 8001526:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800152a:	220c      	movs	r2, #12
 800152c:	2110      	movs	r1, #16
 800152e:	2003      	movs	r0, #3
 8001530:	f7ff fe82 	bl	8001238 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001534:	f7ff fea0 	bl	8001278 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001538:	f7ff fe5e 	bl	80011f8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800153c:	bf00      	nop
 800153e:	f7ff fe69 	bl	8001214 <LL_RCC_PLL_IsReady>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1fa      	bne.n	800153e <SystemClock_Config+0x4a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001548:	2003      	movs	r0, #3
 800154a:	f7ff fde8 	bl	800111e <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800154e:	bf00      	nop
 8001550:	f7ff fdf8 	bl	8001144 <LL_RCC_GetSysClkSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d1fa      	bne.n	8001550 <SystemClock_Config+0x5c>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fdfd 	bl	800115a <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff fe0d 	bl	8001180 <LL_RCC_SetAHB3Prescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fe20 	bl	80011ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fe30 	bl	80011d2 <LL_RCC_SetAPB2Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <SystemClock_Config+0x98>)
 8001574:	f004 fc44 	bl	8005e00 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001578:	200f      	movs	r0, #15
 800157a:	f000 ffeb 	bl	8002554 <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001584:	f000 f823 	bl	80015ce <Error_Handler>
  }
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	02dc6c00 	.word	0x02dc6c00

08001590 <EXPECT_OnAbortHandler>:
/* USER CODE BEGIN 4 */

/**
 * This hander is called by the embeNET stack when a critical error aborts operation.
 */
__attribute__((noreturn)) void EXPECT_OnAbortHandler(char const *why, char const *file, int line) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
    printf("Program aborted: %s %s:%i\n", why, file, line);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	68f9      	ldr	r1, [r7, #12]
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <EXPECT_OnAbortHandler+0x1c>)
 80015a4:	f017 fb5c 	bl	8018c60 <iprintf>
    while(1) {
 80015a8:	e7fe      	b.n	80015a8 <EXPECT_OnAbortHandler+0x18>
 80015aa:	bf00      	nop
 80015ac:	0801a050 	.word	0x0801a050

080015b0 <_write>:
        ;
    }
    __builtin_unreachable();
}

_ssize_t _write(int file, const void *ptr, size_t len) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
    (void) file; /* Not used, avoid warning */
    LOGGER_UART_Write(ptr, len);
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f000 fee6 	bl	8002390 <LOGGER_UART_Write>
    return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
}
 80015d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
        NVIC_SystemReset();
 80015d6:	f7ff fd4b 	bl	8001070 <__NVIC_SystemReset>
	...

080015dc <onMQTTConnected>:
 * This callback function is called when the MQTT-SN client connects to the gateway.
 *
 * @param[in] client MQTT-SN client descriptor
 *
 */
static void onMQTTConnected(MQTTSNClient* client) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    puts("MQTT-SN: Connected to gateway");
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <onMQTTConnected+0x30>)
 80015e6:	f017 fba1 	bl	8018d2c <puts>
    // Move to another state and reschedule the service task
    serviceState = REGISTER_UPTIME_TOPIC;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <onMQTTConnected+0x34>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
    EMBENET_NODE_TaskSchedule(mqttsnTaskId, EMBENET_NODE_TIME_SOURCE_LOCAL, EMBENET_NODE_GetLocalTime());
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <onMQTTConnected+0x38>)
 80015f2:	681c      	ldr	r4, [r3, #0]
 80015f4:	f006 fb38 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	2100      	movs	r1, #0
 80015fe:	4620      	mov	r0, r4
 8001600:	f006 fd00 	bl	8008004 <EMBENET_NODE_TaskSchedule>
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	0801a078 	.word	0x0801a078
 8001610:	200001f0 	.word	0x200001f0
 8001614:	20000000 	.word	0x20000000

08001618 <onMQTTDisconnected>:
 * It tries to reconnect over and over again.
 *
 * @param[in] client MQTT-SN client descriptor
 *
 */
static void onMQTTDisconnected(MQTTSNClient* client) {
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    puts("MQTT-SN: Client disconnected. Will try to reconnect in 5s.");
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <onMQTTDisconnected+0x88>)
 8001622:	f017 fb83 	bl	8018d2c <puts>
    // Cancel the service task
    EMBENET_NODE_TaskCancel(mqttsnTaskId);
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <onMQTTDisconnected+0x8c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f006 fdb2 	bl	8008194 <EMBENET_NODE_TaskCancel>
    // Re-initialize the client
    MQTTSN_CLIENT_Deinit(&mqttsnClient);
 8001630:	481d      	ldr	r0, [pc, #116]	; (80016a8 <onMQTTDisconnected+0x90>)
 8001632:	f00b f951 	bl	800c8d8 <MQTTSN_CLIENT_Deinit>
    // Use the UID of the node as part of the client ID
    char          clientId[32];
    sprintf(clientId, "Client%x%08x", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
 8001636:	f006 fdc8 	bl	80081ca <EMBENET_NODE_GetUID>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	000a      	movs	r2, r1
 8001644:	2300      	movs	r3, #0
 8001646:	4616      	mov	r6, r2
 8001648:	f006 fdbf 	bl	80081ca <EMBENET_NODE_GetUID>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	f107 0008 	add.w	r0, r7, #8
 8001656:	4632      	mov	r2, r6
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <onMQTTDisconnected+0x94>)
 800165a:	f017 fb6f 	bl	8018d3c <siprintf>
    MQTTSN_CLIENT_Init(&mqttsnClient, clientPortNo, clientId, &mqttEventHandlers);
 800165e:	f240 715d 	movw	r1, #1885	; 0x75d
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <onMQTTDisconnected+0x98>)
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <onMQTTDisconnected+0x90>)
 800166a:	f00b f8d1 	bl	800c810 <MQTTSN_CLIENT_Init>
    // Re-initialize and restart the service task
    serviceState = CONNECTING;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <onMQTTDisconnected+0x9c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
    EMBENET_NODE_TaskSchedule(mqttsnTaskId, EMBENET_NODE_TIME_SOURCE_LOCAL, EMBENET_NODE_GetLocalTime() + 5000);
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <onMQTTDisconnected+0x8c>)
 8001676:	681e      	ldr	r6, [r3, #0]
 8001678:	f006 faf6 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	f241 3188 	movw	r1, #5000	; 0x1388
 8001684:	1854      	adds	r4, r2, r1
 8001686:	f143 0500 	adc.w	r5, r3, #0
 800168a:	4622      	mov	r2, r4
 800168c:	462b      	mov	r3, r5
 800168e:	2100      	movs	r1, #0
 8001690:	4630      	mov	r0, r6
 8001692:	f006 fcb7 	bl	8008004 <EMBENET_NODE_TaskSchedule>
}
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169e:	bf00      	nop
 80016a0:	0801a098 	.word	0x0801a098
 80016a4:	20000000 	.word	0x20000000
 80016a8:	200001f8 	.word	0x200001f8
 80016ac:	0801a0d4 	.word	0x0801a0d4
 80016b0:	0801a4b4 	.word	0x0801a4b4
 80016b4:	200001f0 	.word	0x200001f0

080016b8 <onMQTTTopicRegistered>:
 * @param[in] client MQTT-SN client descriptor
 * @param[in] topicId id of the registered topic
 * @param[in] topicName registered topic (string)
 *
 */
static void onMQTTTopicRegistered(const struct MQTTSNClient* client, MQTTSNTopicId topicId, const char* topicName) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	460b      	mov	r3, r1
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	817b      	strh	r3, [r7, #10]
    printf("MQTT-SN: Topic '%s' registered in gateway with id %d\n", topicName, (int)topicId);
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	461a      	mov	r2, r3
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <onMQTTTopicRegistered+0x4c>)
 80016ce:	f017 fac7 	bl	8018c60 <iprintf>
    // Move to next state
    if (serviceState == REGISTER_UPTIME_TOPIC) {
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <onMQTTTopicRegistered+0x50>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d103      	bne.n	80016e2 <onMQTTTopicRegistered+0x2a>
        serviceState = REGISTER_BUTTON_STATE_TOPIC;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <onMQTTTopicRegistered+0x50>)
 80016dc:	2202      	movs	r2, #2
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e002      	b.n	80016e8 <onMQTTTopicRegistered+0x30>
    } else {
        serviceState = SUBSCRIBE_TO_TOPIC;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <onMQTTTopicRegistered+0x50>)
 80016e4:	2203      	movs	r2, #3
 80016e6:	701a      	strb	r2, [r3, #0]
    }
    // Reschedule immediately
    EMBENET_NODE_TaskSchedule(mqttsnTaskId, EMBENET_NODE_TIME_SOURCE_LOCAL, EMBENET_NODE_GetLocalTime());
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <onMQTTTopicRegistered+0x54>)
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	f006 fabc 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	2100      	movs	r1, #0
 80016f6:	4620      	mov	r0, r4
 80016f8:	f006 fc84 	bl	8008004 <EMBENET_NODE_TaskSchedule>
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	0801a0e4 	.word	0x0801a0e4
 8001708:	200001f0 	.word	0x200001f0
 800170c:	20000000 	.word	0x20000000

08001710 <onLedcontrolUpdate>:
 * @param[in] client MQTT-SN client descriptor
 * @param[in] data message data
 * @param[in] dataSize message data size
 *
 */
static void onLedcontrolUpdate(struct MQTTSNClient* client, MQTTSNTopicId topicId, const void* data, size_t dataSize) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
    char* msg = (char*)data;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	617b      	str	r3, [r7, #20]

    printf("MQTT-SN: Got message on control topic: %s\n", msg);
 8001724:	6979      	ldr	r1, [r7, #20]
 8001726:	483b      	ldr	r0, [pc, #236]	; (8001814 <onLedcontrolUpdate+0x104>)
 8001728:	f017 fa9a 	bl	8018c60 <iprintf>

    if (0 == strncmp(msg, "led1on", 6)) {
 800172c:	2206      	movs	r2, #6
 800172e:	493a      	ldr	r1, [pc, #232]	; (8001818 <onLedcontrolUpdate+0x108>)
 8001730:	6978      	ldr	r0, [r7, #20]
 8001732:	f017 fc2d 	bl	8018f90 <strncmp>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <onLedcontrolUpdate+0x40>
        puts("MQTT-SN: Led 1 on");
 800173c:	4837      	ldr	r0, [pc, #220]	; (800181c <onLedcontrolUpdate+0x10c>)
 800173e:	f017 faf5 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001748:	4835      	ldr	r0, [pc, #212]	; (8001820 <onLedcontrolUpdate+0x110>)
 800174a:	f002 fbe2 	bl	8003f12 <HAL_GPIO_WritePin>
        puts("MQTT-SN: Led 3 off");
        HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
    } else {
        puts("MQTT-SN: Unknown command, ignoring");
    }
}
 800174e:	e05c      	b.n	800180a <onLedcontrolUpdate+0xfa>
    } else if (0 == strncmp(msg, "led1off", 7)) {
 8001750:	2207      	movs	r2, #7
 8001752:	4934      	ldr	r1, [pc, #208]	; (8001824 <onLedcontrolUpdate+0x114>)
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f017 fc1b 	bl	8018f90 <strncmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <onLedcontrolUpdate+0x64>
        puts("MQTT-SN: Led 1 off");
 8001760:	4831      	ldr	r0, [pc, #196]	; (8001828 <onLedcontrolUpdate+0x118>)
 8001762:	f017 fae3 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176c:	482c      	ldr	r0, [pc, #176]	; (8001820 <onLedcontrolUpdate+0x110>)
 800176e:	f002 fbd0 	bl	8003f12 <HAL_GPIO_WritePin>
}
 8001772:	e04a      	b.n	800180a <onLedcontrolUpdate+0xfa>
    } else if (0 == strncmp(msg, "led2on", 6)) {
 8001774:	2206      	movs	r2, #6
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <onLedcontrolUpdate+0x11c>)
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	f017 fc09 	bl	8018f90 <strncmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <onLedcontrolUpdate+0x88>
        puts("MQTT-SN: Led 2 on");
 8001784:	482a      	ldr	r0, [pc, #168]	; (8001830 <onLedcontrolUpdate+0x120>)
 8001786:	f017 fad1 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001790:	4823      	ldr	r0, [pc, #140]	; (8001820 <onLedcontrolUpdate+0x110>)
 8001792:	f002 fbbe 	bl	8003f12 <HAL_GPIO_WritePin>
}
 8001796:	e038      	b.n	800180a <onLedcontrolUpdate+0xfa>
    } else if (0 == strncmp(msg, "led2off", 7)) {
 8001798:	2207      	movs	r2, #7
 800179a:	4926      	ldr	r1, [pc, #152]	; (8001834 <onLedcontrolUpdate+0x124>)
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f017 fbf7 	bl	8018f90 <strncmp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <onLedcontrolUpdate+0xac>
        puts("MQTT-SN: Led 2 off");
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <onLedcontrolUpdate+0x128>)
 80017aa:	f017 fabf 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <onLedcontrolUpdate+0x110>)
 80017b6:	f002 fbac 	bl	8003f12 <HAL_GPIO_WritePin>
}
 80017ba:	e026      	b.n	800180a <onLedcontrolUpdate+0xfa>
    } else if (0 == strncmp(msg, "led3on", 6)) {
 80017bc:	2206      	movs	r2, #6
 80017be:	491f      	ldr	r1, [pc, #124]	; (800183c <onLedcontrolUpdate+0x12c>)
 80017c0:	6978      	ldr	r0, [r7, #20]
 80017c2:	f017 fbe5 	bl	8018f90 <strncmp>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <onLedcontrolUpdate+0xd0>
        puts("MQTT-SN: Led 3 on");
 80017cc:	481c      	ldr	r0, [pc, #112]	; (8001840 <onLedcontrolUpdate+0x130>)
 80017ce:	f017 faad 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d8:	4811      	ldr	r0, [pc, #68]	; (8001820 <onLedcontrolUpdate+0x110>)
 80017da:	f002 fb9a 	bl	8003f12 <HAL_GPIO_WritePin>
}
 80017de:	e014      	b.n	800180a <onLedcontrolUpdate+0xfa>
    } else if (0 == strncmp(msg, "led3off", 7)) {
 80017e0:	2207      	movs	r2, #7
 80017e2:	4918      	ldr	r1, [pc, #96]	; (8001844 <onLedcontrolUpdate+0x134>)
 80017e4:	6978      	ldr	r0, [r7, #20]
 80017e6:	f017 fbd3 	bl	8018f90 <strncmp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <onLedcontrolUpdate+0xf4>
        puts("MQTT-SN: Led 3 off");
 80017f0:	4815      	ldr	r0, [pc, #84]	; (8001848 <onLedcontrolUpdate+0x138>)
 80017f2:	f017 fa9b 	bl	8018d2c <puts>
        HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <onLedcontrolUpdate+0x110>)
 80017fe:	f002 fb88 	bl	8003f12 <HAL_GPIO_WritePin>
}
 8001802:	e002      	b.n	800180a <onLedcontrolUpdate+0xfa>
        puts("MQTT-SN: Unknown command, ignoring");
 8001804:	4811      	ldr	r0, [pc, #68]	; (800184c <onLedcontrolUpdate+0x13c>)
 8001806:	f017 fa91 	bl	8018d2c <puts>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0801a11c 	.word	0x0801a11c
 8001818:	0801a148 	.word	0x0801a148
 800181c:	0801a150 	.word	0x0801a150
 8001820:	48000400 	.word	0x48000400
 8001824:	0801a164 	.word	0x0801a164
 8001828:	0801a16c 	.word	0x0801a16c
 800182c:	0801a180 	.word	0x0801a180
 8001830:	0801a188 	.word	0x0801a188
 8001834:	0801a19c 	.word	0x0801a19c
 8001838:	0801a1a4 	.word	0x0801a1a4
 800183c:	0801a1b8 	.word	0x0801a1b8
 8001840:	0801a1c0 	.word	0x0801a1c0
 8001844:	0801a1d4 	.word	0x0801a1d4
 8001848:	0801a1dc 	.word	0x0801a1dc
 800184c:	0801a1f0 	.word	0x0801a1f0

08001850 <mqttsnServiceTask>:
 * @param[in] taskId id of the embeNET Node task
 * @param[in] timeSource clock over which the task was scheduled
 * @param[in] t time at which the task was scheduled to run
 * @param[in] context user defined context
 */
static void mqttsnServiceTask(EMBENET_TaskId taskId, EMBENET_NODE_TimeSource timeSource, uint64_t t, void *context) {
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b0a2      	sub	sp, #136	; 0x88
 8001856:	af04      	add	r7, sp, #16
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	e9c7 2300 	strd	r2, r3, [r7]
 800185e:	460b      	mov	r3, r1
 8001860:	72fb      	strb	r3, [r7, #11]
    switch (serviceState) {
 8001862:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <mqttsnServiceTask+0x168>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b04      	cmp	r3, #4
 8001868:	f200 809c 	bhi.w	80019a4 <mqttsnServiceTask+0x154>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <mqttsnServiceTask+0x24>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001889 	.word	0x08001889
 8001878:	080018d5 	.word	0x080018d5
 800187c:	080018e7 	.word	0x080018e7
 8001880:	080018f9 	.word	0x080018f9
 8001884:	0800193b 	.word	0x0800193b
        case CONNECTING:
            puts("MQTT-SN: Connecting to gateway");
 8001888:	484c      	ldr	r0, [pc, #304]	; (80019bc <mqttsnServiceTask+0x16c>)
 800188a:	f017 fa4f 	bl	8018d2c <puts>
            // Get border router address. We assume that the MQTT-SN gateway runs on the border router IP.
            EMBENET_IPV6 addr;
            EMBENET_NODE_GetBorderRouterAddress(&addr);
 800188e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001892:	4618      	mov	r0, r3
 8001894:	f006 fc92 	bl	80081bc <EMBENET_NODE_GetBorderRouterAddress>
            // Perform a clean connect - you can tweak the timings here
            MQTTSN_CLIENT_CleanConnect(&mqttsnClient, &addr, gatewayPortNo, 30, 10, NULL, NULL);
 8001898:	f240 725d 	movw	r2, #1885	; 0x75d
 800189c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80018a0:	2300      	movs	r3, #0
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	230a      	movs	r3, #10
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	231e      	movs	r3, #30
 80018ae:	4844      	ldr	r0, [pc, #272]	; (80019c0 <mqttsnServiceTask+0x170>)
 80018b0:	f00b f8ec 	bl	800ca8c <MQTTSN_CLIENT_CleanConnect>
            // Reschedule the task to try again after 10s if failed to connect
            EMBENET_NODE_TaskSchedule(mqttsnTaskId, timeSource, t + 10000);
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <mqttsnServiceTask+0x174>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80018c0:	eb12 0a01 	adds.w	sl, r2, r1
 80018c4:	f143 0b00 	adc.w	fp, r3, #0
 80018c8:	7af9      	ldrb	r1, [r7, #11]
 80018ca:	4652      	mov	r2, sl
 80018cc:	465b      	mov	r3, fp
 80018ce:	f006 fb99 	bl	8008004 <EMBENET_NODE_TaskSchedule>
            break;
 80018d2:	e06b      	b.n	80019ac <mqttsnServiceTask+0x15c>
        case REGISTER_UPTIME_TOPIC:
            puts("MQTT-SN: Registering uptime topic");
 80018d4:	483c      	ldr	r0, [pc, #240]	; (80019c8 <mqttsnServiceTask+0x178>)
 80018d6:	f017 fa29 	bl	8018d2c <puts>
            MQTTSN_CLIENT_RegisterTopic(&mqttsnClient, uptimeTopic, onMQTTTopicRegistered);
 80018da:	4a3c      	ldr	r2, [pc, #240]	; (80019cc <mqttsnServiceTask+0x17c>)
 80018dc:	493c      	ldr	r1, [pc, #240]	; (80019d0 <mqttsnServiceTask+0x180>)
 80018de:	4838      	ldr	r0, [pc, #224]	; (80019c0 <mqttsnServiceTask+0x170>)
 80018e0:	f00b f8e6 	bl	800cab0 <MQTTSN_CLIENT_RegisterTopic>
            break;
 80018e4:	e062      	b.n	80019ac <mqttsnServiceTask+0x15c>
        case REGISTER_BUTTON_STATE_TOPIC:
            puts("MQTT-SN: Registering button state topic");
 80018e6:	483b      	ldr	r0, [pc, #236]	; (80019d4 <mqttsnServiceTask+0x184>)
 80018e8:	f017 fa20 	bl	8018d2c <puts>
            MQTTSN_CLIENT_RegisterTopic(&mqttsnClient, buttonTopic, onMQTTTopicRegistered);
 80018ec:	4a37      	ldr	r2, [pc, #220]	; (80019cc <mqttsnServiceTask+0x17c>)
 80018ee:	493a      	ldr	r1, [pc, #232]	; (80019d8 <mqttsnServiceTask+0x188>)
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <mqttsnServiceTask+0x170>)
 80018f2:	f00b f8dd 	bl	800cab0 <MQTTSN_CLIENT_RegisterTopic>
            break;
 80018f6:	e059      	b.n	80019ac <mqttsnServiceTask+0x15c>
        case SUBSCRIBE_TO_TOPIC:
            printf("MQTT-SN: Subscribing to topic: '%s'\n", ledControlTopic);
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <mqttsnServiceTask+0x18c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4838      	ldr	r0, [pc, #224]	; (80019e0 <mqttsnServiceTask+0x190>)
 8001900:	f017 f9ae 	bl	8018c60 <iprintf>
            MQTTSN_CLIENT_Subscribe(&mqttsnClient, ledControlTopic, NULL, onLedcontrolUpdate);
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <mqttsnServiceTask+0x18c>)
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <mqttsnServiceTask+0x194>)
 800190a:	2200      	movs	r2, #0
 800190c:	482c      	ldr	r0, [pc, #176]	; (80019c0 <mqttsnServiceTask+0x170>)
 800190e:	f00b fa07 	bl	800cd20 <MQTTSN_CLIENT_Subscribe>
            // Move to normal state of operation
            serviceState = RUNNING;
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <mqttsnServiceTask+0x168>)
 8001914:	2204      	movs	r2, #4
 8001916:	701a      	strb	r2, [r3, #0]
            // Reschedule the task
            EMBENET_NODE_TaskSchedule(mqttsnTaskId, timeSource, EMBENET_NODE_GetLocalTime() + 1000);
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <mqttsnServiceTask+0x174>)
 800191a:	681c      	ldr	r4, [r3, #0]
 800191c:	f006 f9a4 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 8001928:	f143 0900 	adc.w	r9, r3, #0
 800192c:	7af9      	ldrb	r1, [r7, #11]
 800192e:	4642      	mov	r2, r8
 8001930:	464b      	mov	r3, r9
 8001932:	4620      	mov	r0, r4
 8001934:	f006 fb66 	bl	8008004 <EMBENET_NODE_TaskSchedule>
            break;
 8001938:	e038      	b.n	80019ac <mqttsnServiceTask+0x15c>
        case RUNNING: {
            // Get current local time
            uint64_t uptime = EMBENET_NODE_GetLocalTime();
 800193a:	f006 f995 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800193e:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
            // Construct a simple JSON
            char uptimeStr[80];
            sprintf(uptimeStr, "{\"uptime\":%u}", (unsigned)(uptime / 1000U));
 8001942:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f7ff f96d 	bl	8000c2c <__aeabi_uldivmod>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4923      	ldr	r1, [pc, #140]	; (80019e8 <mqttsnServiceTask+0x198>)
 800195c:	4618      	mov	r0, r3
 800195e:	f017 f9ed 	bl	8018d3c <siprintf>
            // Publish the message
            printf("MQTT-SN: Publishing on topic '%s' message: %s\n", uptimeTopic, uptimeStr);
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	461a      	mov	r2, r3
 8001968:	4919      	ldr	r1, [pc, #100]	; (80019d0 <mqttsnServiceTask+0x180>)
 800196a:	4820      	ldr	r0, [pc, #128]	; (80019ec <mqttsnServiceTask+0x19c>)
 800196c:	f017 f978 	bl	8018c60 <iprintf>
            MQTTSN_CLIENT_PublishMessage(&mqttsnClient, uptimeTopic, uptimeStr, strlen(uptimeStr));
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fc63 	bl	8000240 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	f107 0210 	add.w	r2, r7, #16
 8001980:	4913      	ldr	r1, [pc, #76]	; (80019d0 <mqttsnServiceTask+0x180>)
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <mqttsnServiceTask+0x170>)
 8001984:	f00b f99e 	bl	800ccc4 <MQTTSN_CLIENT_PublishMessage>
            // Reschedule the task
            EMBENET_NODE_TaskSchedule(taskId, timeSource, t + 10000);
 8001988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800198c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001990:	1854      	adds	r4, r2, r1
 8001992:	f143 0500 	adc.w	r5, r3, #0
 8001996:	7af9      	ldrb	r1, [r7, #11]
 8001998:	4622      	mov	r2, r4
 800199a:	462b      	mov	r3, r5
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f006 fb31 	bl	8008004 <EMBENET_NODE_TaskSchedule>
        } break;
 80019a2:	e003      	b.n	80019ac <mqttsnServiceTask+0x15c>
        default:
            puts("MQTT-SN: Unknown service state");
 80019a4:	4812      	ldr	r0, [pc, #72]	; (80019f0 <mqttsnServiceTask+0x1a0>)
 80019a6:	f017 f9c1 	bl	8018d2c <puts>
            break;
 80019aa:	bf00      	nop
    }
}
 80019ac:	bf00      	nop
 80019ae:	3778      	adds	r7, #120	; 0x78
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	200001f0 	.word	0x200001f0
 80019bc:	0801a214 	.word	0x0801a214
 80019c0:	200001f8 	.word	0x200001f8
 80019c4:	20000000 	.word	0x20000000
 80019c8:	0801a234 	.word	0x0801a234
 80019cc:	080016b9 	.word	0x080016b9
 80019d0:	20000768 	.word	0x20000768
 80019d4:	0801a258 	.word	0x0801a258
 80019d8:	20000790 	.word	0x20000790
 80019dc:	20000004 	.word	0x20000004
 80019e0:	0801a280 	.word	0x0801a280
 80019e4:	08001711 	.word	0x08001711
 80019e8:	0801a2a8 	.word	0x0801a2a8
 80019ec:	0801a2b8 	.word	0x0801a2b8
 80019f0:	0801a2e8 	.word	0x0801a2e8

080019f4 <mqttsn_client_service_init>:


void mqttsn_client_service_init(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
    // Prepare clientId - use the UID of the node as part of the client ID
    EMBENET_EUI64 uid = EMBENET_NODE_GetUID();
 80019fa:	f006 fbe6 	bl	80081ca <EMBENET_NODE_GetUID>
 80019fe:	e9c7 0108 	strd	r0, r1, [r7, #32]
    char          clientId[32];
    sprintf(clientId, "Client%x%08x", (unsigned)(uid>>32), (unsigned)(uid));
 8001a02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	000a      	movs	r2, r1
 8001a10:	2300      	movs	r3, #0
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	4638      	mov	r0, r7
 8001a16:	4923      	ldr	r1, [pc, #140]	; (8001aa4 <mqttsn_client_service_init+0xb0>)
 8001a18:	f017 f990 	bl	8018d3c <siprintf>
    // Prepare topics
    sprintf(uptimeTopic, "uptime/%x%08x", (unsigned)(uid>>32), (unsigned)(uid));
 8001a1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	000a      	movs	r2, r1
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	491e      	ldr	r1, [pc, #120]	; (8001aa8 <mqttsn_client_service_init+0xb4>)
 8001a30:	481e      	ldr	r0, [pc, #120]	; (8001aac <mqttsn_client_service_init+0xb8>)
 8001a32:	f017 f983 	bl	8018d3c <siprintf>
    sprintf(buttonTopic, "button/%x%08x", (unsigned)(uid>>32), (unsigned)(uid));
 8001a36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	000a      	movs	r2, r1
 8001a44:	2300      	movs	r3, #0
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	4919      	ldr	r1, [pc, #100]	; (8001ab0 <mqttsn_client_service_init+0xbc>)
 8001a4a:	481a      	ldr	r0, [pc, #104]	; (8001ab4 <mqttsn_client_service_init+0xc0>)
 8001a4c:	f017 f976 	bl	8018d3c <siprintf>
    // Initialize the MQTT-SN client
    if (MQTTSN_CLIENT_RESULT_OK == MQTTSN_CLIENT_Init(&mqttsnClient, clientPortNo, clientId, &mqttEventHandlers)) {
 8001a50:	f240 715d 	movw	r1, #1885	; 0x75d
 8001a54:	463a      	mov	r2, r7
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <mqttsn_client_service_init+0xc4>)
 8001a58:	4818      	ldr	r0, [pc, #96]	; (8001abc <mqttsn_client_service_init+0xc8>)
 8001a5a:	f00a fed9 	bl	800c810 <MQTTSN_CLIENT_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d118      	bne.n	8001a96 <mqttsn_client_service_init+0xa2>
        // Create the service task
        mqttsnTaskId = EMBENET_NODE_TaskCreate(mqttsnServiceTask, &mqttsnClient);
 8001a64:	4915      	ldr	r1, [pc, #84]	; (8001abc <mqttsn_client_service_init+0xc8>)
 8001a66:	4816      	ldr	r0, [pc, #88]	; (8001ac0 <mqttsn_client_service_init+0xcc>)
 8001a68:	f006 f9c4 	bl	8007df4 <EMBENET_NODE_TaskCreate>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <mqttsn_client_service_init+0xd0>)
 8001a70:	6013      	str	r3, [r2, #0]
        if (EMBENET_TASKID_INVALID == mqttsnTaskId) {
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <mqttsn_client_service_init+0xd0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d106      	bne.n	8001a8a <mqttsn_client_service_init+0x96>
            MQTTSN_CLIENT_Deinit(&mqttsnClient);
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <mqttsn_client_service_init+0xc8>)
 8001a7e:	f00a ff2b 	bl	800c8d8 <MQTTSN_CLIENT_Deinit>
            puts("MQTT-SN: Unable to create task. Service aborted.");
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <mqttsn_client_service_init+0xd4>)
 8001a84:	f017 f952 	bl	8018d2c <puts>
            printf("MQTT-SN: Service initialized with clientId: %s\n", clientId);
        }
    } else {
        puts("MQTT-SN: Unable to initialize MQTT-SN client. Service aborted.");
    }
}
 8001a88:	e008      	b.n	8001a9c <mqttsn_client_service_init+0xa8>
            printf("MQTT-SN: Service initialized with clientId: %s\n", clientId);
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480f      	ldr	r0, [pc, #60]	; (8001acc <mqttsn_client_service_init+0xd8>)
 8001a90:	f017 f8e6 	bl	8018c60 <iprintf>
}
 8001a94:	e002      	b.n	8001a9c <mqttsn_client_service_init+0xa8>
        puts("MQTT-SN: Unable to initialize MQTT-SN client. Service aborted.");
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <mqttsn_client_service_init+0xdc>)
 8001a98:	f017 f948 	bl	8018d2c <puts>
}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	0801a0d4 	.word	0x0801a0d4
 8001aa8:	0801a308 	.word	0x0801a308
 8001aac:	20000768 	.word	0x20000768
 8001ab0:	0801a318 	.word	0x0801a318
 8001ab4:	20000790 	.word	0x20000790
 8001ab8:	0801a4b4 	.word	0x0801a4b4
 8001abc:	200001f8 	.word	0x200001f8
 8001ac0:	08001851 	.word	0x08001851
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	0801a328 	.word	0x0801a328
 8001acc:	0801a35c 	.word	0x0801a35c
 8001ad0:	0801a38c 	.word	0x0801a38c

08001ad4 <mqttsn_client_service_start>:


void mqttsn_client_service_start(void) {
 8001ad4:	b598      	push	{r3, r4, r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    puts("MQTT-SN: Starting service");
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <mqttsn_client_service_start+0x28>)
 8001ada:	f017 f927 	bl	8018d2c <puts>
    serviceState = CONNECTING;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <mqttsn_client_service_start+0x2c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
    EMBENET_NODE_TaskSchedule(mqttsnTaskId, EMBENET_NODE_TIME_SOURCE_LOCAL, EMBENET_NODE_GetLocalTime());
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <mqttsn_client_service_start+0x30>)
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	f006 f8be 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	2100      	movs	r1, #0
 8001af2:	4620      	mov	r0, r4
 8001af4:	f006 fa86 	bl	8008004 <EMBENET_NODE_TaskSchedule>
}
 8001af8:	bf00      	nop
 8001afa:	bd98      	pop	{r3, r4, r7, pc}
 8001afc:	0801a3cc 	.word	0x0801a3cc
 8001b00:	200001f0 	.word	0x200001f0
 8001b04:	20000000 	.word	0x20000000

08001b08 <mqttsn_client_service_stop>:


void mqttsn_client_service_stop(void) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
    puts("MQTT-SN: Stopping service");
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <mqttsn_client_service_stop+0x58>)
 8001b10:	f017 f90c 	bl	8018d2c <puts>
    // Cancel the service task
    EMBENET_NODE_TaskCancel(mqttsnTaskId);
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <mqttsn_client_service_stop+0x5c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 fb3b 	bl	8008194 <EMBENET_NODE_TaskCancel>
    // Re-initialize the client
    MQTTSN_CLIENT_Deinit(&mqttsnClient);
 8001b1e:	4812      	ldr	r0, [pc, #72]	; (8001b68 <mqttsn_client_service_stop+0x60>)
 8001b20:	f00a feda 	bl	800c8d8 <MQTTSN_CLIENT_Deinit>
    // Use the UID of the node as part of the client ID
    char          clientId[32];
    sprintf(clientId, "Client%x%08x", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
 8001b24:	f006 fb51 	bl	80081ca <EMBENET_NODE_GetUID>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	000a      	movs	r2, r1
 8001b32:	2300      	movs	r3, #0
 8001b34:	4614      	mov	r4, r2
 8001b36:	f006 fb48 	bl	80081ca <EMBENET_NODE_GetUID>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	4638      	mov	r0, r7
 8001b42:	4622      	mov	r2, r4
 8001b44:	4909      	ldr	r1, [pc, #36]	; (8001b6c <mqttsn_client_service_stop+0x64>)
 8001b46:	f017 f8f9 	bl	8018d3c <siprintf>
    MQTTSN_CLIENT_Init(&mqttsnClient, clientPortNo, clientId, &mqttEventHandlers);
 8001b4a:	f240 715d 	movw	r1, #1885	; 0x75d
 8001b4e:	463a      	mov	r2, r7
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <mqttsn_client_service_stop+0x68>)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <mqttsn_client_service_stop+0x60>)
 8001b54:	f00a fe5c 	bl	800c810 <MQTTSN_CLIENT_Init>
}
 8001b58:	bf00      	nop
 8001b5a:	3724      	adds	r7, #36	; 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	0801a3e8 	.word	0x0801a3e8
 8001b64:	20000000 	.word	0x20000000
 8001b68:	200001f8 	.word	0x200001f8
 8001b6c:	0801a0d4 	.word	0x0801a0d4
 8001b70:	0801a4b4 	.word	0x0801a4b4

08001b74 <mqttsn_client_service_proc>:


void mqttsn_client_service_proc(void) {
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	b094      	sub	sp, #80	; 0x50
 8001b78:	af00      	add	r7, sp, #0
    static uint64_t lastTimestamp;
    // Holds the number of button presses
    static int buttonPressCounter;

    // Check if service is running
    if (serviceState == RUNNING) {
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <mqttsn_client_service_proc+0xb4>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d13f      	bne.n	8001c02 <mqttsn_client_service_proc+0x8e>
        // Check if button is pressed
        if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8001b82:	2101      	movs	r1, #1
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f002 f9ac 	bl	8003ee4 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d137      	bne.n	8001c02 <mqttsn_client_service_proc+0x8e>
            // Check if sufficient time passed from the last time we notified the gateway
            if (lastTimestamp + 1000 < EMBENET_NODE_GetLocalTime()) {
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <mqttsn_client_service_proc+0xb8>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8001b9c:	f143 0500 	adc.w	r5, r3, #0
 8001ba0:	f006 f862 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4294      	cmp	r4, r2
 8001baa:	eb75 0303 	sbcs.w	r3, r5, r3
 8001bae:	d228      	bcs.n	8001c02 <mqttsn_client_service_proc+0x8e>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb6:	481e      	ldr	r0, [pc, #120]	; (8001c30 <mqttsn_client_service_proc+0xbc>)
 8001bb8:	f002 f9ab 	bl	8003f12 <HAL_GPIO_WritePin>

                // Prepare message to be published
                char payloadStr[80];
                sprintf(payloadStr, "{\"button\":%d}", ++buttonPressCounter);
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <mqttsn_client_service_proc+0xc0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <mqttsn_client_service_proc+0xc0>)
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <mqttsn_client_service_proc+0xc0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	463b      	mov	r3, r7
 8001bcc:	491a      	ldr	r1, [pc, #104]	; (8001c38 <mqttsn_client_service_proc+0xc4>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f017 f8b4 	bl	8018d3c <siprintf>
                // Publish message
                printf("MQTT-SN: Publishing on topic '%s' message: %s\n", buttonTopic, payloadStr);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4918      	ldr	r1, [pc, #96]	; (8001c3c <mqttsn_client_service_proc+0xc8>)
 8001bda:	4819      	ldr	r0, [pc, #100]	; (8001c40 <mqttsn_client_service_proc+0xcc>)
 8001bdc:	f017 f840 	bl	8018c60 <iprintf>
                MQTTSN_CLIENT_PublishMessage(&mqttsnClient, buttonTopic, payloadStr, strlen(payloadStr));
 8001be0:	463b      	mov	r3, r7
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fb2c 	bl	8000240 <strlen>
 8001be8:	4603      	mov	r3, r0
 8001bea:	463a      	mov	r2, r7
 8001bec:	4913      	ldr	r1, [pc, #76]	; (8001c3c <mqttsn_client_service_proc+0xc8>)
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <mqttsn_client_service_proc+0xd0>)
 8001bf0:	f00b f868 	bl	800ccc4 <MQTTSN_CLIENT_PublishMessage>
                // Save timestamp
                lastTimestamp = EMBENET_NODE_GetLocalTime();
 8001bf4:	f006 f838 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	490b      	ldr	r1, [pc, #44]	; (8001c2c <mqttsn_client_service_proc+0xb8>)
 8001bfe:	e9c1 2300 	strd	r2, r3, [r1]
            }
        }
    }
    // reset LED
    if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8001c02:	2101      	movs	r1, #1
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 f96c 	bl	8003ee4 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <mqttsn_client_service_proc+0xaa>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <mqttsn_client_service_proc+0xbc>)
 8001c1a:	f002 f97a 	bl	8003f12 <HAL_GPIO_WritePin>
    }
}
 8001c1e:	bf00      	nop
 8001c20:	3750      	adds	r7, #80	; 0x50
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001f0 	.word	0x200001f0
 8001c2c:	200007b8 	.word	0x200007b8
 8001c30:	48000400 	.word	0x48000400
 8001c34:	200007c0 	.word	0x200007c0
 8001c38:	0801a404 	.word	0x0801a404
 8001c3c:	20000790 	.word	0x20000790
 8001c40:	0801a2b8 	.word	0x0801a2b8
 8001c44:	200001f8 	.word	0x200001f8

08001c48 <RingBuffer_Init>:
This module implements a basic, general-purpose ring buffer.
*/

#include "ring_buffer.h"

bool RingBuffer_Init(RingBuffer* ringBuffer, uint8_t* dataBuffer, size_t dataBufferSize) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
    if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <RingBuffer_Init+0x40>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <RingBuffer_Init+0x40>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <RingBuffer_Init+0x40>
        ringBuffer->dataBuffer     = dataBuffer;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	601a      	str	r2, [r3, #0]
        ringBuffer->dataBufferSize = dataBufferSize;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	605a      	str	r2, [r3, #4]
        ringBuffer->count          = 0;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
        ringBuffer->head           = dataBuffer;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
        ringBuffer->tail           = dataBuffer;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	611a      	str	r2, [r3, #16]
        return true;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <RingBuffer_Init+0x42>
    }

    return false;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <RingBuffer_PutChar>:
        return ringBuffer->dataBufferSize - ringBuffer->count;
    }
    return 0;
}

bool RingBuffer_PutChar(RingBuffer* ringBuffer, uint8_t c) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
    if ((ringBuffer) && (ringBuffer->count < ringBuffer->dataBufferSize)) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d022      	beq.n	8001cec <RingBuffer_PutChar+0x58>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d21c      	bcs.n	8001cec <RingBuffer_PutChar+0x58>
        *ringBuffer->head = c;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	701a      	strb	r2, [r3, #0]
        ringBuffer->count++;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
        ringBuffer->head++;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60da      	str	r2, [r3, #12]
        if (ringBuffer->head >= ringBuffer->dataBuffer + ringBuffer->dataBufferSize) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	440b      	add	r3, r1
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d303      	bcc.n	8001ce8 <RingBuffer_PutChar+0x54>
            ringBuffer->head = ringBuffer->dataBuffer;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
        }
        return true;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <RingBuffer_PutChar+0x5a>
    }
    return false;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer* ringBuffer, uint8_t* c) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    if ((ringBuffer) && (c) && (ringBuffer->count)) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d024      	beq.n	8001d52 <RingBuffer_GetChar+0x5a>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d021      	beq.n	8001d52 <RingBuffer_GetChar+0x5a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01d      	beq.n	8001d52 <RingBuffer_GetChar+0x5a>
        *c = *ringBuffer->tail;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	701a      	strb	r2, [r3, #0]
        ringBuffer->count--;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	609a      	str	r2, [r3, #8]
        ringBuffer->tail++;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
        if (ringBuffer->tail >= ringBuffer->dataBuffer + ringBuffer->dataBufferSize) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	440b      	add	r3, r1
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d303      	bcc.n	8001d4e <RingBuffer_GetChar+0x56>
            ringBuffer->tail = ringBuffer->dataBuffer;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]
        }
        return true;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <RingBuffer_GetChar+0x5c>
    }
    return false;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001d70:	224b      	movs	r2, #75	; 0x4b
 8001d72:	4902      	ldr	r1, [pc, #8]	; (8001d7c <NMI_Handler+0x10>)
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <NMI_Handler+0x14>)
 8001d76:	f7ff fc0b 	bl	8001590 <EXPECT_OnAbortHandler>
 8001d7a:	bf00      	nop
 8001d7c:	0801a414 	.word	0x0801a414
 8001d80:	0801a4c0 	.word	0x0801a4c0

08001d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001d88:	2255      	movs	r2, #85	; 0x55
 8001d8a:	4902      	ldr	r1, [pc, #8]	; (8001d94 <HardFault_Handler+0x10>)
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <HardFault_Handler+0x14>)
 8001d8e:	f7ff fbff 	bl	8001590 <EXPECT_OnAbortHandler>
 8001d92:	bf00      	nop
 8001d94:	0801a414 	.word	0x0801a414
 8001d98:	0801a4cc 	.word	0x0801a4cc

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001da0:	2264      	movs	r2, #100	; 0x64
 8001da2:	4902      	ldr	r1, [pc, #8]	; (8001dac <MemManage_Handler+0x10>)
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <MemManage_Handler+0x14>)
 8001da6:	f7ff fbf3 	bl	8001590 <EXPECT_OnAbortHandler>
 8001daa:	bf00      	nop
 8001dac:	0801a414 	.word	0x0801a414
 8001db0:	0801a4e0 	.word	0x0801a4e0

08001db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001db8:	2273      	movs	r2, #115	; 0x73
 8001dba:	4902      	ldr	r1, [pc, #8]	; (8001dc4 <BusFault_Handler+0x10>)
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <BusFault_Handler+0x14>)
 8001dbe:	f7ff fbe7 	bl	8001590 <EXPECT_OnAbortHandler>
 8001dc2:	bf00      	nop
 8001dc4:	0801a414 	.word	0x0801a414
 8001dc8:	0801a4f4 	.word	0x0801a4f4

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001dd0:	2282      	movs	r2, #130	; 0x82
 8001dd2:	4902      	ldr	r1, [pc, #8]	; (8001ddc <UsageFault_Handler+0x10>)
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <UsageFault_Handler+0x14>)
 8001dd6:	f7ff fbdb 	bl	8001590 <EXPECT_OnAbortHandler>
 8001dda:	bf00      	nop
 8001ddc:	0801a414 	.word	0x0801a414
 8001de0:	0801a508 	.word	0x0801a508

08001de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <__NVIC_GetPriorityGrouping>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4906      	ldr	r1, [pc, #24]	; (8001e70 <__NVIC_EnableIRQ+0x34>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_SetLPUARTClockSource>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <LL_AHB2_GRP1_EnableClock>:
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	e853 3f00 	ldrex	r3, [r3]
 8001fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	075b      	lsls	r3, r3, #29
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	61ba      	str	r2, [r7, #24]
 8002002:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002004:	6979      	ldr	r1, [r7, #20]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	e841 2300 	strex	r3, r2, [r1]
 800200c:	613b      	str	r3, [r7, #16]
   return(result);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e4      	bne.n	8001fde <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3308      	adds	r3, #8
 800202e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	e853 3f00 	ldrex	r3, [r3]
 8002036:	60bb      	str	r3, [r7, #8]
   return(result);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	065b      	lsls	r3, r3, #25
 8002042:	4313      	orrs	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3308      	adds	r3, #8
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	61ba      	str	r2, [r7, #24]
 800204e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002050:	6979      	ldr	r1, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	e841 2300 	strex	r3, r2, [r1]
 8002058:	613b      	str	r3, [r7, #16]
   return(result);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e4      	bne.n	800202a <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <LL_LPUART_EnableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_EnableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableOverrunDetect(USART_TypeDef *LPUARTx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_LPUART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_LPUART_IsActiveFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_PE(const USART_TypeDef *LPUARTx)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <LL_LPUART_IsActiveFlag_PE+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_LPUART_IsActiveFlag_PE+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <LL_LPUART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_LPUART_IsActiveFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_FE(const USART_TypeDef *LPUARTx)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d101      	bne.n	80020c6 <LL_LPUART_IsActiveFlag_FE+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_LPUART_IsActiveFlag_FE+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_LPUART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_LPUART_IsActiveFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_NE(const USART_TypeDef *LPUARTx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <LL_LPUART_IsActiveFlag_NE+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_LPUART_IsActiveFlag_NE+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <LL_LPUART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_LPUART_IsActiveFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_ORE(const USART_TypeDef *LPUARTx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b08      	cmp	r3, #8
 8002108:	d101      	bne.n	800210e <LL_LPUART_IsActiveFlag_ORE+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_LPUART_IsActiveFlag_ORE+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d101      	bne.n	8002132 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002152:	d101      	bne.n	8002158 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	621a      	str	r2, [r3, #32]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	621a      	str	r2, [r3, #32]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2204      	movs	r2, #4
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2208      	movs	r2, #8
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <LL_LPUART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_LPUART_EnableIT_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	e853 3f00 	ldrex	r3, [r3]
 80021d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	61ba      	str	r2, [r7, #24]
 80021e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e8:	6979      	ldr	r1, [r7, #20]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	e841 2300 	strex	r3, r2, [r1]
 80021f0:	613b      	str	r3, [r7, #16]
   return(result);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <LL_LPUART_EnableIT_TXE_TXFNF+0x8>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <LL_LPUART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_LPUART_DisableIT_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	60bb      	str	r3, [r7, #8]
   return(result);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	61ba      	str	r2, [r7, #24]
 8002226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	e841 2300 	strex	r3, r2, [r1]
 8002230:	613b      	str	r3, [r7, #16]
   return(result);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e9      	bne.n	800220c <LL_LPUART_DisableIT_TXE_TXFNF+0x8>
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <LL_LPUART_EnableDMADeactOnRxErr>:
  * @rmtoll CR3          DDRE          LL_LPUART_EnableDMADeactOnRxErr
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMADeactOnRxErr(USART_TypeDef *LPUARTx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_DDRE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */
	RingBuffer_Init(&txRingBuffer, txRingBufferSpace, sizeof(txRingBufferSpace));
 8002286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228a:	493a      	ldr	r1, [pc, #232]	; (8002374 <MX_LPUART1_UART_Init+0xf4>)
 800228c:	483a      	ldr	r0, [pc, #232]	; (8002378 <MX_LPUART1_UART_Init+0xf8>)
 800228e:	f7ff fcdb 	bl	8001c48 <RingBuffer_Init>
  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	615a      	str	r2, [r3, #20]
 80022a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fe38 	bl	8001f2c <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff fe62 	bl	8001f86 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fe47 	bl	8001f56 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA3   ------> LPUART1_RX
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_2;
 80022c8:	230c      	movs	r3, #12
 80022ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022cc:	2302      	movs	r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80022dc:	2308      	movs	r3, #8
 80022de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e8:	f002 fce5 	bl	8004cb6 <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 80022f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022f4:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX;
 8002302:	2308      	movs	r3, #8
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 8002312:	f002 fdd9 	bl	8004ec8 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_8_8);
 8002316:	2105      	movs	r1, #5
 8002318:	4818      	ldr	r0, [pc, #96]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 800231a:	f7ff fe5b 	bl	8001fd4 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_8_8);
 800231e:	2105      	movs	r1, #5
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 8002322:	f7ff fe7d 	bl	8002020 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_EnableOverrunDetect(LPUART1);
 8002326:	4815      	ldr	r0, [pc, #84]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 8002328:	f7ff fea0 	bl	800206c <LL_LPUART_EnableOverrunDetect>
  LL_LPUART_EnableDMADeactOnRxErr(LPUART1);
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 800232e:	f7ff ff89 	bl	8002244 <LL_LPUART_EnableDMADeactOnRxErr>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 8002334:	f7ff fe3f 	bl	8001fb6 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while(!(LL_LPUART_IsActiveFlag_TEACK(LPUART1)))
 8002338:	bf00      	nop
 800233a:	4810      	ldr	r0, [pc, #64]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 800233c:	f7ff feff 	bl	800213e <LL_LPUART_IsActiveFlag_TEACK>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f9      	beq.n	800233a <MX_LPUART1_UART_Init+0xba>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

	/* USART1 interrupt Init */
	NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 4, 0));
 8002346:	f7ff fd6b 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 800234a:	4603      	mov	r3, r0
 800234c:	2200      	movs	r2, #0
 800234e:	2104      	movs	r1, #4
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fdb9 	bl	8001ec8 <NVIC_EncodePriority>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	2026      	movs	r0, #38	; 0x26
 800235c:	f7ff fd8a 	bl	8001e74 <__NVIC_SetPriority>
	NVIC_EnableIRQ(LPUART1_IRQn);
 8002360:	2026      	movs	r0, #38	; 0x26
 8002362:	f7ff fd6b 	bl	8001e3c <__NVIC_EnableIRQ>
	uart = LPUART1;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_LPUART1_UART_Init+0x100>)
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <MX_LPUART1_UART_Init+0xfc>)
 800236a:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3738      	adds	r7, #56	; 0x38
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200007d8 	.word	0x200007d8
 8002378:	200007c4 	.word	0x200007c4
 800237c:	40008000 	.word	0x40008000
 8002380:	20000bd8 	.word	0x20000bd8

08002384 <LOGGER_UART_Init>:

}

/* USER CODE BEGIN 1 */

void LOGGER_UART_Init() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
#if 1 == IS_ROOT
	MX_USART1_UART_Init();
#else
	MX_LPUART1_UART_Init();
 8002388:	f7ff ff7a 	bl	8002280 <MX_LPUART1_UART_Init>
#endif
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <LOGGER_UART_Write>:

void LOGGER_UART_Write(const void *ptr, size_t len) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	if (ptr && len) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d026      	beq.n	80023ee <LOGGER_UART_Write+0x5e>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d023      	beq.n	80023ee <LOGGER_UART_Write+0x5e>
		for (size_t l = 0; l < len; ++l) {
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e01c      	b.n	80023e6 <LOGGER_UART_Write+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ac:	f3ef 8310 	mrs	r3, PRIMASK
 80023b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80023b2:	68bb      	ldr	r3, [r7, #8]
			// enter critical section
			uint32_t primaskBit = __get_PRIMASK();
 80023b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b6:	b672      	cpsid	i
}
 80023b8:	bf00      	nop
			__disable_irq();
			// put data to ring buffer
			RingBuffer_PutChar(&txRingBuffer, ((const uint8_t*) ptr)[l]);
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <LOGGER_UART_Write+0x68>)
 80023c6:	f7ff fc65 	bl	8001c94 <RingBuffer_PutChar>
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f383 8810 	msr	PRIMASK, r3
}
 80023d4:	bf00      	nop
			__set_PRIMASK(primaskBit);
			// trigger IRQ-driven transmission
#if 1 == IS_ROOT
			LL_USART_EnableIT_TXE(uart);
#else
			LL_LPUART_EnableIT_TXE(uart);
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <LOGGER_UART_Write+0x6c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fef2 	bl	80021c4 <LL_LPUART_EnableIT_TXE_TXFNF>
		for (size_t l = 0; l < len; ++l) {
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3de      	bcc.n	80023ac <LOGGER_UART_Write+0x1c>
#endif
		}
	}
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200007c4 	.word	0x200007c4
 80023fc:	20000bd8 	.word	0x20000bd8

08002400 <LPUART1_IRQHandler>:
}
#else
/**
 * @brief This function handles LPUART1 Interrupt.
 */
void LPUART1_IRQHandler(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPUART1_IRQn 0 */
	if (LL_LPUART_IsActiveFlag_TXE(uart)) {
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fe85 	bl	800211a <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <LPUART1_IRQHandler+0x42>
		uint8_t c;
		if (true == RingBuffer_GetChar(&txRingBuffer, &c)) {
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	4619      	mov	r1, r3
 800241a:	4828      	ldr	r0, [pc, #160]	; (80024bc <LPUART1_IRQHandler+0xbc>)
 800241c:	f7ff fc6c 	bl	8001cf8 <RingBuffer_GetChar>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <LPUART1_IRQHandler+0x36>
			LL_LPUART_TransmitData8(uart, c);
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff17 	bl	8002262 <LL_LPUART_TransmitData8>

	/* USER CODE END LPUART1_IRQn 0 */
	/* USER CODE BEGIN LPUART1_IRQn 1 */

	/* USER CODE END LPUART1_IRQn 1 */
}
 8002434:	e03c      	b.n	80024b0 <LPUART1_IRQHandler+0xb0>
			LL_LPUART_DisableIT_TXE(uart);
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fee2 	bl	8002204 <LL_LPUART_DisableIT_TXE_TXFNF>
}
 8002440:	e036      	b.n	80024b0 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_PE(uart)) {
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fe1f 	bl	800208a <LL_LPUART_IsActiveFlag_PE>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <LPUART1_IRQHandler+0x5e>
		LL_LPUART_ClearFlag_PE(uart);
 8002452:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fe84 	bl	8002164 <LL_LPUART_ClearFlag_PE>
}
 800245c:	e028      	b.n	80024b0 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_FE(uart)) {
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fe23 	bl	80020ae <LL_LPUART_IsActiveFlag_FE>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <LPUART1_IRQHandler+0x7a>
		LL_LPUART_ClearFlag_FE(uart);
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fe82 	bl	800217c <LL_LPUART_ClearFlag_FE>
}
 8002478:	e01a      	b.n	80024b0 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_NE(uart)) {
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fe27 	bl	80020d2 <LL_LPUART_IsActiveFlag_NE>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <LPUART1_IRQHandler+0x96>
		LL_LPUART_ClearFlag_NE(uart);
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe80 	bl	8002194 <LL_LPUART_ClearFlag_NE>
}
 8002494:	e00c      	b.n	80024b0 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_ORE(uart)) {
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe2b 	bl	80020f6 <LL_LPUART_IsActiveFlag_ORE>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <LPUART1_IRQHandler+0xb0>
		LL_LPUART_ClearFlag_ORE(uart);
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <LPUART1_IRQHandler+0xb8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe7e 	bl	80021ac <LL_LPUART_ClearFlag_ORE>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000bd8 	.word	0x20000bd8
 80024bc:	200007c4 	.word	0x200007c4

080024c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024c4:	f7ff fca6 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <LoopForever+0x6>)
  ldr r1, =_edata
 80024ca:	490d      	ldr	r1, [pc, #52]	; (8002500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <LoopForever+0xe>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024e0:	4c0a      	ldr	r4, [pc, #40]	; (800250c <LoopForever+0x16>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024ee:	f016 fdcb 	bl	8019088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024f2:	f7fe ff71 	bl	80013d8 <main>

080024f6 <LoopForever>:

LoopForever:
    b LoopForever
 80024f6:	e7fe      	b.n	80024f6 <LoopForever>
  ldr   r0, =_estack
 80024f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002504:	0801d9b8 	.word	0x0801d9b8
  ldr r2, =_sbss
 8002508:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800250c:	200042e8 	.word	0x200042e8

08002510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251e:	2003      	movs	r0, #3
 8002520:	f000 f94c 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002524:	f001 fe28 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 8002528:	4603      	mov	r3, r0
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_Init+0x3c>)
 800252c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252e:	200f      	movs	r0, #15
 8002530:	f000 f810 	bl	8002554 <HAL_InitTick>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e001      	b.n	8002544 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002540:	f7ff fc0d 	bl	8001d5e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002544:	79fb      	ldrb	r3, [r7, #7]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_InitTick+0x6c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d024      	beq.n	80025b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002568:	f001 fe06 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_InitTick+0x6c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002578:	fbb3 f3f1 	udiv	r3, r3, r1
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f95c 	bl	800283e <HAL_SYSTICK_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d809      	bhi.n	80025a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002592:	2200      	movs	r2, #0
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	f04f 30ff 	mov.w	r0, #4294967295
 800259a:	f000 f91a 	bl	80027d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_InitTick+0x70>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e004      	b.n	80025b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000010 	.word	0x20000010
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_GetTick+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000bdc 	.word	0x20000bdc

080025dc <__NVIC_SetPriorityGrouping>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	; (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_DisableIRQ>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db12      	blt.n	80026b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	490a      	ldr	r1, [pc, #40]	; (80026bc <__NVIC_DisableIRQ+0x44>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	3320      	adds	r3, #32
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026a4:	f3bf 8f4f 	dsb	sy
}
 80026a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026aa:	f3bf 8f6f 	isb	sy
}
 80026ae:	bf00      	nop
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff90 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff09 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff20 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff92 	bl	8002714 <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff13 	bl	8002640 <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff21 	bl	8002678 <__NVIC_DisableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff96 	bl	8002778 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e02d      	b.n	80028c4 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f003 fbad 	bl	8005fdc <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 800288c:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6851      	ldr	r1, [r2, #4]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6952      	ldr	r2, [r2, #20]
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e020      	b.n	8002920 <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f003 fb83 	bl	8006014 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d17c      	bne.n	8002a3e <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_CRYP_Encrypt+0x32>
 8002956:	2302      	movs	r3, #2
 8002958:	e07a      	b.n	8002a50 <HAL_CRYP_Encrypt+0x128>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002990:	e003      	b.n	800299a <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0218 	bic.w	r2, r2, #24
 80029a8:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_CRYP_Encrypt+0x130>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

    switch (algo)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d023      	beq.n	8002a06 <HAL_CRYP_Encrypt+0xde>
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d826      	bhi.n	8002a14 <HAL_CRYP_Encrypt+0xec>
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d015      	beq.n	80029f8 <HAL_CRYP_Encrypt+0xd0>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b60      	cmp	r3, #96	; 0x60
 80029d0:	d820      	bhi.n	8002a14 <HAL_CRYP_Encrypt+0xec>
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d008      	beq.n	80029ea <HAL_CRYP_Encrypt+0xc2>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d81a      	bhi.n	8002a14 <HAL_CRYP_Encrypt+0xec>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_CRYP_Encrypt+0xc2>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d114      	bne.n	8002a14 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80029ea:	6a39      	ldr	r1, [r7, #32]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8da 	bl	8002ba6 <CRYP_AES_Encrypt>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]
        break;
 80029f6:	e016      	b.n	8002a26 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fbc1 	bl	8003182 <CRYP_AESGCM_Process>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]
        break;
 8002a04:	e00f      	b.n	8002a26 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fd62 	bl	80034d2 <CRYP_AESCCM_Process>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]
        break;
 8002a12:	e008      	b.n	8002a26 <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
        break;
 8002a24:	bf00      	nop
    }

    if (status == HAL_OK)
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d110      	bne.n	8002a4e <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a3c:	e007      	b.n	8002a4e <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0208 	orr.w	r2, r3, #8
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	00010060 	.word	0x00010060

08002a5c <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d17e      	bne.n	8002b76 <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_CRYP_Decrypt+0x32>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e07c      	b.n	8002b88 <HAL_CRYP_Decrypt+0x12c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002ac4:	e003      	b.n	8002ace <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 0218 	bic.w	r2, r3, #24
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0210 	orr.w	r2, r2, #16
 8002ae0:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_CRYP_Decrypt+0x134>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]

    switch (algo)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d023      	beq.n	8002b3e <HAL_CRYP_Decrypt+0xe2>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d826      	bhi.n	8002b4c <HAL_CRYP_Decrypt+0xf0>
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b60      	cmp	r3, #96	; 0x60
 8002b02:	d015      	beq.n	8002b30 <HAL_CRYP_Decrypt+0xd4>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b60      	cmp	r3, #96	; 0x60
 8002b08:	d820      	bhi.n	8002b4c <HAL_CRYP_Decrypt+0xf0>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d008      	beq.n	8002b22 <HAL_CRYP_Decrypt+0xc6>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d81a      	bhi.n	8002b4c <HAL_CRYP_Decrypt+0xf0>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_CRYP_Decrypt+0xc6>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d114      	bne.n	8002b4c <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8002b22:	6a39      	ldr	r1, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8c6 	bl	8002cb6 <CRYP_AES_Decrypt>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]
        break;
 8002b2e:	e016      	b.n	8002b5e <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb25 	bl	8003182 <CRYP_AESGCM_Process>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]
        break;
 8002b3c:	e00f      	b.n	8002b5e <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8002b3e:	6a39      	ldr	r1, [r7, #32]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fcc6 	bl	80034d2 <CRYP_AESCCM_Process>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
        break;
 8002b4a:	e008      	b.n	8002b5e <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
        break;
 8002b5c:	bf00      	nop
    }

    if (status == HAL_OK)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b74:	e007      	b.n	8002b86 <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0208 	orr.w	r2, r3, #8
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00010060 	.word	0x00010060

08002b94 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d003      	beq.n	8002bc4 <CRYP_AES_Encrypt+0x1e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d109      	bne.n	8002bd8 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e002      	b.n	8002bd8 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d122      	bne.n	8002c24 <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa6c 	bl	80030c2 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d022      	beq.n	8002c38 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6852      	ldr	r2, [r2, #4]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d2      	ldr	r2, [r2, #12]
 8002c20:	621a      	str	r2, [r3, #32]
 8002c22:	e009      	b.n	8002c38 <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d105      	bne.n	8002c38 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa45 	bl	80030c2 <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c5a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002c5c:	e00a      	b.n	8002c74 <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f976 	bl	8002f52 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c72:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	89fa      	ldrh	r2, [r7, #14]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <CRYP_AES_Encrypt+0xee>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	89ba      	ldrh	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3e4      	bcc.n	8002c5e <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d003      	beq.n	8002cd4 <CRYP_AES_Decrypt+0x1e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d109      	bne.n	8002ce8 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d102      	bne.n	8002ce2 <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	e002      	b.n	8002ce8 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8086 	bne.w	8002dfc <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d05d      	beq.n	8002db4 <CRYP_AES_Decrypt+0xfe>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d149      	bne.n	8002d96 <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 0218 	bic.w	r2, r3, #24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0208 	orr.w	r2, r2, #8
 8002d14:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f9d0 	bl	80030c2 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 ff4f 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <CRYP_AES_Decrypt+0xba>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0ec      	b.n	8002f4a <CRYP_AES_Decrypt+0x294>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0218 	bic.w	r2, r3, #24
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0210 	orr.w	r2, r2, #16
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e014      	b.n	8002dc0 <CRYP_AES_Decrypt+0x10a>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f990 	bl	80030c2 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0218 	orr.w	r2, r2, #24
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e005      	b.n	8002dc0 <CRYP_AES_Decrypt+0x10a>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f981 	bl	80030c2 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8085 	beq.w	8002ed4 <CRYP_AES_Decrypt+0x21e>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6852      	ldr	r2, [r2, #4]
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68d2      	ldr	r2, [r2, #12]
 8002df8:	621a      	str	r2, [r3, #32]
 8002dfa:	e06b      	b.n	8002ed4 <CRYP_AES_Decrypt+0x21e>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d167      	bne.n	8002ed4 <CRYP_AES_Decrypt+0x21e>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d05d      	beq.n	8002ec8 <CRYP_AES_Decrypt+0x212>
      {
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d149      	bne.n	8002eaa <CRYP_AES_Decrypt+0x1f4>
        {
          /* Set key preparation for decryption operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 0218 	bic.w	r2, r3, #24
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0208 	orr.w	r2, r2, #8
 8002e28:	601a      	str	r2, [r3, #0]
          
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f946 	bl	80030c2 <CRYP_SetKey>
          
          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
          
          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fec5 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <CRYP_AES_Decrypt+0x1ce>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
            
            /* Change state & error code*/
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0210 	orr.w	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e062      	b.n	8002f4a <CRYP_AES_Decrypt+0x294>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e92:	601a      	str	r2, [r3, #0]
          
          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0218 	bic.w	r2, r3, #24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0210 	orr.w	r2, r2, #16
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e014      	b.n	8002ed4 <CRYP_AES_Decrypt+0x21e>
        }
        else /*Mode 4 : decryption & Key preparation*/
        {
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f906 	bl	80030c2 <CRYP_SetKey>
          
          /* Set decryption & Key preparation operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0218 	orr.w	r2, r2, #24
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e005      	b.n	8002ed4 <CRYP_AES_Decrypt+0x21e>
        }
      }
      else  /*Algorithm CTR */
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8f7 	bl	80030c2 <CRYP_SetKey>
      }
    }
  }
 
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ef6:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002ef8:	e00a      	b.n	8002f10 <CRYP_AES_Decrypt+0x25a>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f828 	bl	8002f52 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f06:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f0e:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	89fa      	ldrh	r2, [r7, #14]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d207      	bcs.n	8002f30 <CRYP_AES_Decrypt+0x27a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	89ba      	ldrh	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3e4      	bcc.n	8002efa <CRYP_AES_Decrypt+0x244>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fdf2 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fdb4 	bl	8002b94 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800303a:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e00b      	b.n	800305a <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	3320      	adds	r3, #32
 800304e:	443b      	add	r3, r7
 8003050:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d9f0      	bls.n	8003042 <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003064:	e01a      	b.n	800309c <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003070:	b29b      	uxth	r3, r3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3320      	adds	r3, #32
 800307c:	443b      	add	r3, r7
 800307e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003082:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800308a:	b29b      	uxth	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80030ac:	3303      	adds	r3, #3
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d202      	bcs.n	80030ba <CRYP_AES_ProcessData+0x168>
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9d5      	bls.n	8003066 <CRYP_AES_ProcessData+0x114>
  }
}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d051      	beq.n	8003178 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d034      	beq.n	8003144 <CRYP_SetKey+0x82>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e0:	d149      	bne.n	8003176 <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68d2      	ldr	r2, [r2, #12]
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6912      	ldr	r2, [r2, #16]
 800311c:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6952      	ldr	r2, [r2, #20]
 8003128:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6992      	ldr	r2, [r2, #24]
 8003134:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d2      	ldr	r2, [r2, #28]
 8003140:	611a      	str	r2, [r3, #16]
        break;
 8003142:	e019      	b.n	8003178 <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6852      	ldr	r2, [r2, #4]
 800315a:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6892      	ldr	r2, [r2, #8]
 8003166:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	611a      	str	r2, [r3, #16]

        break;
 8003174:	e000      	b.n	8003178 <CRYP_SetKey+0xb6>
      default:
        break;
 8003176:	bf00      	nop
    }
  }
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08e      	sub	sp, #56	; 0x38
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	b29b      	uxth	r3, r3
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003198:	2301      	movs	r3, #1
 800319a:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d118      	bne.n	80031d6 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10a      	bne.n	80031c2 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80031ba:	441a      	add	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c
 80031c0:	e00f      	b.n	80031e2 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031d4:	e005      	b.n	80031e2 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d16d      	bne.n	80032c4 <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80031fc:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff5c 	bl	80030c2 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68d2      	ldr	r2, [r2, #12]
 8003238:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fcc3 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e128      	b.n	80034ca <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003286:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 face 	bl	800382c <CRYP_GCMCCM_SetHeaderPhase>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e117      	b.n	80034ca <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b2:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032c2:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80032dc:	f7ff f974 	bl	80025c8 <HAL_GetTick>
 80032e0:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80032f4:	e033      	b.n	800335e <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fe2a 	bl	8002f52 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d022      	beq.n	800334c <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7ff f95f 	bl	80025c8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <CRYP_AESGCM_Process+0x19a>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d117      	bne.n	800334c <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0210 	orr.w	r2, r3, #16
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0be      	b.n	80034ca <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800335a:	b29b      	uxth	r3, r3
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800335e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	429a      	cmp	r2, r3
 8003364:	d203      	bcs.n	800336e <CRYP_AESGCM_Process+0x1ec>
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	429a      	cmp	r2, r3
 800336c:	d3c3      	bcc.n	80032f6 <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a4 	beq.w	80034c8 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	b29b      	uxth	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0318 	and.w	r3, r3, #24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	051a      	lsls	r2, r3, #20
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f1c3 0310 	rsb	r3, r3, #16
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	e005      	b.n	80033de <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f1c3 0310 	rsb	r3, r3, #16
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3301      	adds	r3, #1
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80033de:	2300      	movs	r3, #0
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	e014      	b.n	800340e <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	3301      	adds	r3, #1
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	d3e6      	bcc.n	80033e4 <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 8003416:	e006      	b.n	8003426 <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
      index++;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	3301      	adds	r3, #1
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	2b03      	cmp	r3, #3
 800342a:	d9f5      	bls.n	8003418 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fbd2 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fba2 	bl	8002b94 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800345e:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8003460:	2300      	movs	r3, #0
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
 8003464:	e00b      	b.n	800347e <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3338      	adds	r3, #56	; 0x38
 8003472:	443b      	add	r3, r7
 8003474:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	3301      	adds	r3, #1
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	2b03      	cmp	r3, #3
 8003482:	d9f0      	bls.n	8003466 <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 8003484:	2300      	movs	r3, #0
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
 8003488:	e01a      	b.n	80034c0 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003494:	b29b      	uxth	r3, r3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3338      	adds	r3, #56	; 0x38
 80034a0:	443b      	add	r3, r7
 80034a2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80034a6:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	3301      	adds	r3, #1
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
 80034c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3e0      	bcc.n	800348a <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08e      	sub	sp, #56	; 0x38
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80034e8:	2301      	movs	r3, #1
 80034ea:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d118      	bne.n	8003526 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10a      	bne.n	8003512 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003510:	e00f      	b.n	8003532 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c
 8003524:	e005      	b.n	8003532 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d16d      	bne.n	8003614 <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800354c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fdb4 	bl	80030c2 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1a      	ldr	r2, [r3, #32]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68d2      	ldr	r2, [r2, #12]
 8003588:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb1b 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00f      	beq.n	80035c8 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e12d      	b.n	8003824 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d6:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f926 	bl	800382c <CRYP_GCMCCM_SetHeaderPhase>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e11c      	b.n	8003824 <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003602:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003612:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7fe ffcc 	bl	80025c8 <HAL_GetTick>
 8003630:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003640:	b29b      	uxth	r3, r3
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003644:	e033      	b.n	80036ae <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fc82 	bl	8002f52 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d022      	beq.n	800369c <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8003656:	f7fe ffb7 	bl	80025c8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <CRYP_AESCCM_Process+0x19a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d117      	bne.n	800369c <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0c3      	b.n	8003824 <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80036ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d203      	bcs.n	80036be <CRYP_AESCCM_Process+0x1ec>
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d3c3      	bcc.n	8003646 <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a9 	beq.w	8003822 <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0318 	and.w	r3, r3, #24
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d10a      	bne.n	800370c <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	051a      	lsls	r2, r3, #20
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f1c3 0310 	rsb	r3, r3, #16
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	e005      	b.n	800372e <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f1c3 0310 	rsb	r3, r3, #16
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3301      	adds	r3, #1
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 800372e:	2300      	movs	r3, #0
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	e014      	b.n	800375e <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	3301      	adds	r3, #1
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
 800375e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	429a      	cmp	r2, r3
 8003764:	d3e6      	bcc.n	8003734 <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8003766:	e006      	b.n	8003776 <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	3301      	adds	r3, #1
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b03      	cmp	r3, #3
 800377a:	d9f5      	bls.n	8003768 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa2a 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0210 	orr.w	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e03c      	b.n	8003824 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b8:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
 80037be:	e00b      	b.n	80037d8 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	3338      	adds	r3, #56	; 0x38
 80037cc:	443b      	add	r3, r7
 80037ce:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	3301      	adds	r3, #1
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d9f0      	bls.n	80037c0 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80037de:	2300      	movs	r3, #0
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 80037e2:	e01a      	b.n	800381a <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	441a      	add	r2, r3
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3338      	adds	r3, #56	; 0x38
 80037fa:	443b      	add	r3, r7
 80037fc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003800:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003808:	b29b      	uxth	r3, r3
 800380a:	3301      	adds	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	3301      	adds	r3, #1
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 800381a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	429a      	cmp	r2, r3
 8003820:	d3e0      	bcc.n	80037e4 <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b092      	sub	sp, #72	; 0x48
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8003836:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8003838:	f107 040c 	add.w	r4, r7, #12
 800383c:	461d      	mov	r5, r3
 800383e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003846:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800384a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	643b      	str	r3, [r7, #64]	; 0x40
 800385e:	e002      	b.n	8003866 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8003866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8192 	beq.w	8003b92 <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003880:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	2b00      	cmp	r3, #0
 800389a:	d17a      	bne.n	8003992 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 800389c:	2300      	movs	r3, #0
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
 80038a0:	e071      	b.n	8003986 <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003904:	b29b      	uxth	r3, r3
 8003906:	3301      	adds	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003916:	b29b      	uxth	r3, r3
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003928:	b29b      	uxth	r3, r3
 800392a:	3301      	adds	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003932:	6839      	ldr	r1, [r7, #0]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f94f 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e12e      	b.n	8003bce <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800397e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003982:	3304      	adds	r3, #4
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398c:	429a      	cmp	r2, r3
 800398e:	d388      	bcc.n	80038a2 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8003990:	e11c      	b.n	8003bcc <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003992:	2300      	movs	r3, #0
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
 8003996:	e074      	b.n	8003a82 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8d4 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01a      	beq.n	8003a6c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f043 0210 	orr.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0b3      	b.n	8003bce <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 8003a66:	bf00      	nop
 8003a68:	0801a430 	.word	0x0801a430
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a7a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7e:	3304      	adds	r3, #4
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
 8003a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d384      	bcc.n	8003998 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	e014      	b.n	8003abe <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	3301      	adds	r3, #1
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	089b      	lsrs	r3, r3, #2
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3e3      	bcc.n	8003a94 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003ad6:	e006      	b.n	8003ae6 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8003ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d9f5      	bls.n	8003ad8 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 8003aec:	e029      	b.n	8003b42 <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	005a      	lsls	r2, r3, #1
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	3348      	adds	r3, #72	; 0x48
 8003b12:	443b      	add	r3, r7
 8003b14:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b24:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	3301      	adds	r3, #1
 8003b2a:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8003b2c:	e006      	b.n	8003b3c <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8003b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b38:	3301      	adds	r3, #1
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d9f5      	bls.n	8003b2e <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f847 	bl	8003bd8 <CRYP_WaitOnCCFlag>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d017      	beq.n	8003b80 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f043 0210 	orr.w	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e026      	b.n	8003bce <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e01c      	b.n	8003bcc <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0106 	bic.w	r1, r3, #6
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bba:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3748      	adds	r7, #72	; 0x48
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd6:	bf00      	nop

08003bd8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003be2:	f7fe fcf1 	bl	80025c8 <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003be8:	e010      	b.n	8003c0c <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d00c      	beq.n	8003c0c <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fce9 	bl	80025c8 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <CRYP_WaitOnCCFlag+0x30>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0e7      	beq.n	8003bea <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	e140      	b.n	8003eb6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8132 	beq.w	8003eb0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <HAL_GPIO_Init+0x40>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d130      	bne.n	8003cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0201 	and.w	r2, r3, #1
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d017      	beq.n	8003d02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	2203      	movs	r2, #3
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d123      	bne.n	8003d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	220f      	movs	r2, #15
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	6939      	ldr	r1, [r7, #16]
 8003d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0203 	and.w	r2, r3, #3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808c 	beq.w	8003eb0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d98:	4a4e      	ldr	r2, [pc, #312]	; (8003ed4 <HAL_GPIO_Init+0x2b0>)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	3302      	adds	r3, #2
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	2207      	movs	r2, #7
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dc2:	d00d      	beq.n	8003de0 <HAL_GPIO_Init+0x1bc>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a44      	ldr	r2, [pc, #272]	; (8003ed8 <HAL_GPIO_Init+0x2b4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x1b8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a43      	ldr	r2, [pc, #268]	; (8003edc <HAL_GPIO_Init+0x2b8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_GPIO_Init+0x1b4>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e004      	b.n	8003de2 <HAL_GPIO_Init+0x1be>
 8003dd8:	2307      	movs	r3, #7
 8003dda:	e002      	b.n	8003de2 <HAL_GPIO_Init+0x1be>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_GPIO_Init+0x1be>
 8003de0:	2300      	movs	r3, #0
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	f002 0203 	and.w	r2, r2, #3
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	4093      	lsls	r3, r2
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003df2:	4938      	ldr	r1, [pc, #224]	; (8003ed4 <HAL_GPIO_Init+0x2b0>)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3302      	adds	r3, #2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e00:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e24:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e4e:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_GPIO_Init+0x2bc>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f aeb7 	bne.w	8003c34 <HAL_GPIO_Init+0x10>
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	48000400 	.word	0x48000400
 8003edc:	48000800 	.word	0x48000800
 8003ee0:	58000800 	.word	0x58000800

08003ee4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e001      	b.n	8003f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	807b      	strh	r3, [r7, #2]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f22:	787b      	ldrb	r3, [r7, #1]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f28:	887a      	ldrh	r2, [r7, #2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f52:	d101      	bne.n	8003f58 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d101      	bne.n	8003f78 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <LL_RCC_MSI_GetRange>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_GetSysClkSource>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_GetAHBPrescaler>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_PLL_GetN>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <LL_RCC_PLL_GetR>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_RCC_PLL_GetDivider>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004046:	f7ff ffb3 	bl	8003fb0 <LL_RCC_GetSysClkSource>
 800404a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404c:	f7ff ffe8 	bl	8004020 <LL_RCC_PLL_GetMainSource>
 8004050:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x2c>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d139      	bne.n	80040d2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d136      	bne.n	80040d2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004064:	f7ff ff7d 	bl	8003f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d115      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x62>
 800406e:	f7ff ff78 	bl	8003f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_GetSysClockFreq+0x4e>
 8004078:	f7ff ff83 	bl	8003f82 <LL_RCC_MSI_GetRange>
 800407c:	4603      	mov	r3, r0
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	e005      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x5a>
 8004086:	f7ff ff87 	bl	8003f98 <LL_RCC_MSI_GetRangeAfterStandby>
 800408a:	4603      	mov	r3, r0
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a36      	ldr	r2, [pc, #216]	; (800416c <HAL_RCC_GetSysClockFreq+0x134>)
 8004094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004098:	e014      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x8c>
 800409a:	f7ff ff62 	bl	8003f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x7a>
 80040a4:	f7ff ff6d 	bl	8003f82 <LL_RCC_MSI_GetRange>
 80040a8:	4603      	mov	r3, r0
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	e005      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x86>
 80040b2:	f7ff ff71 	bl	8003f98 <LL_RCC_MSI_GetRangeAfterStandby>
 80040b6:	4603      	mov	r3, r0
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	4a2b      	ldr	r2, [pc, #172]	; (800416c <HAL_RCC_GetSysClockFreq+0x134>)
 80040c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d115      	bne.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040d0:	e012      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d102      	bne.n	80040de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_GetSysClockFreq+0x138>)
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e00c      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d109      	bne.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040e4:	f7ff ff2c 	bl	8003f40 <LL_RCC_HSE_IsEnabledDiv2>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_GetSysClockFreq+0x138>)
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e001      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040f6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f8:	f7ff ff5a 	bl	8003fb0 <LL_RCC_GetSysClkSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	d12f      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004102:	f7ff ff8d 	bl	8004020 <LL_RCC_PLL_GetMainSource>
 8004106:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0xde>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d003      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0xe4>
 8004114:	e00d      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_RCC_GetSysClockFreq+0x138>)
 8004118:	60fb      	str	r3, [r7, #12]
        break;
 800411a:	e00d      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800411c:	f7ff ff10 	bl	8003f40 <LL_RCC_HSE_IsEnabledDiv2>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_GetSysClockFreq+0x138>)
 8004128:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800412a:	e005      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCC_GetSysClockFreq+0x13c>)
 800412e:	60fb      	str	r3, [r7, #12]
        break;
 8004130:	e002      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	60fb      	str	r3, [r7, #12]
        break;
 8004136:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004138:	f7ff ff50 	bl	8003fdc <LL_RCC_PLL_GetN>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	fb03 f402 	mul.w	r4, r3, r2
 8004144:	f7ff ff61 	bl	800400a <LL_RCC_PLL_GetDivider>
 8004148:	4603      	mov	r3, r0
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	3301      	adds	r3, #1
 800414e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004152:	f7ff ff4f 	bl	8003ff4 <LL_RCC_PLL_GetR>
 8004156:	4603      	mov	r3, r0
 8004158:	0f5b      	lsrs	r3, r3, #29
 800415a:	3301      	adds	r3, #1
 800415c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004160:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	0801a57c 	.word	0x0801a57c
 8004170:	00f42400 	.word	0x00f42400
 8004174:	01e84800 	.word	0x01e84800

08004178 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004178:	b598      	push	{r3, r4, r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800417c:	f7ff ff5c 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8004180:	4604      	mov	r4, r0
 8004182:	f7ff ff20 	bl	8003fc6 <LL_RCC_GetAHBPrescaler>
 8004186:	4603      	mov	r3, r0
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a03      	ldr	r2, [pc, #12]	; (800419c <HAL_RCC_GetHCLKFreq+0x24>)
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd98      	pop	{r3, r4, r7, pc}
 800419c:	0801a51c 	.word	0x0801a51c

080041a0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	58000400 	.word	0x58000400

080041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80041d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	58000400 	.word	0x58000400

080041e8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80041ec:	4b05      	ldr	r3, [pc, #20]	; (8004204 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80041f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr
 8004204:	58000400 	.word	0x58000400

08004208 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800420e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004212:	619a      	str	r2, [r3, #24]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	58000400 	.word	0x58000400

08004220 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d101      	bne.n	8004234 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	58000400 	.word	0x58000400

08004244 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d101      	bne.n	8004258 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58000400 	.word	0x58000400

08004268 <LL_RCC_RF_DisableReset>:
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004278:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800427c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <LL_RCC_IsRFUnderReset>:
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800428c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d101      	bne.n	80042a2 <LL_RCC_IsRFUnderReset+0x1a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_RCC_IsRFUnderReset+0x1c>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80042b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042ba:	4905      	ldr	r1, [pc, #20]	; (80042d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	58000800 	.word	0x58000800

080042d4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
    return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	e052      	b.n	8004390 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	799b      	ldrb	r3, [r3, #6]
 80042f2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80042f4:	7bbb      	ldrb	r3, [r7, #14]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SUBGHZ_Init+0x2c>
 80042fa:	7bbb      	ldrb	r3, [r7, #14]
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d109      	bne.n	8004314 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f848 	bl	800439c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800430c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004310:	f7ff ffcc 	bl	80042ac <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d126      	bne.n	8004368 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004320:	f7ff ffa2 	bl	8004268 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <HAL_SUBGHZ_Init+0xc4>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	0cdb      	lsrs	r3, r3, #19
 8004332:	2264      	movs	r2, #100	; 0x64
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	609a      	str	r2, [r3, #8]
        break;
 800434a:	e007      	b.n	800435c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3b01      	subs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004352:	f7ff ff99 	bl	8004288 <LL_RCC_IsRFUnderReset>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800435c:	f7ff ff34 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004360:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004364:	f7ff ff1c 	bl	80041a0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004368:	f7ff ff4e 	bl	8004208 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa38 	bl	80047ec <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	719a      	strb	r2, [r3, #6]

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000008 	.word	0x20000008

0800439c <HAL_SUBGHZ_MspInit>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef *hsubghz)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
            the HAL_SUBGHZ_MspInit should be implemented in the user file
   */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsubghz);
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	461a      	mov	r2, r3
 80043ba:	460b      	mov	r3, r1
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	4613      	mov	r3, r2
 80043c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	799b      	ldrb	r3, [r3, #6]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d14a      	bne.n	8004462 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	795b      	ldrb	r3, [r3, #5]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e045      	b.n	8004464 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2202      	movs	r2, #2
 80043e2:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 facf 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043ea:	f7ff fefd 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80043ee:	210d      	movs	r1, #13
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa1b 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043f6:	897b      	ldrh	r3, [r7, #10]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	4619      	mov	r1, r3
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa13 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fa0d 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	82bb      	strh	r3, [r7, #20]
 8004416:	e00a      	b.n	800442e <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004418:	8abb      	ldrh	r3, [r7, #20]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fa02 	bl	800482c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004428:	8abb      	ldrh	r3, [r7, #20]
 800442a:	3301      	adds	r3, #1
 800442c:	82bb      	strh	r3, [r7, #20]
 800442e:	8aba      	ldrh	r2, [r7, #20]
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d3f0      	bcc.n	8004418 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004436:	f7ff fec7 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fac8 	bl	80049d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
 800444c:	e001      	b.n	8004452 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	715a      	strb	r2, [r3, #5]

    return status;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	e000      	b.n	8004464 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
 800447c:	4613      	mov	r3, r2
 800447e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	799b      	ldrb	r3, [r3, #6]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d14a      	bne.n	8004524 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	795b      	ldrb	r3, [r3, #5]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004496:	2302      	movs	r3, #2
 8004498:	e045      	b.n	8004526 <HAL_SUBGHZ_ReadRegisters+0xba>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fa71 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044a6:	f7ff fe9f 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80044aa:	211d      	movs	r1, #29
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f9bd 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f9b5 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f9af 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80044ce:	2100      	movs	r1, #0
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9ab 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	82fb      	strh	r3, [r7, #22]
 80044da:	e009      	b.n	80044f0 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f9fa 	bl	80048d8 <SUBGHZSPI_Receive>
      pData++;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80044ea:	8afb      	ldrh	r3, [r7, #22]
 80044ec:	3301      	adds	r3, #1
 80044ee:	82fb      	strh	r3, [r7, #22]
 80044f0:	8afa      	ldrh	r2, [r7, #22]
 80044f2:	893b      	ldrh	r3, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3f1      	bcc.n	80044dc <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044f8:	f7ff fe66 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fa67 	bl	80049d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e001      	b.n	8004514 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	715a      	strb	r2, [r3, #5]

    return status;
 8004520:	7ffb      	ldrb	r3, [r7, #31]
 8004522:	e000      	b.n	8004526 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	461a      	mov	r2, r3
 800453a:	460b      	mov	r3, r1
 800453c:	72fb      	strb	r3, [r7, #11]
 800453e:	4613      	mov	r3, r2
 8004540:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	799b      	ldrb	r3, [r3, #6]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d14a      	bne.n	80045e2 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004554:	2302      	movs	r3, #2
 8004556:	e045      	b.n	80045e4 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fa12 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004564:	7afb      	ldrb	r3, [r7, #11]
 8004566:	2b84      	cmp	r3, #132	; 0x84
 8004568:	d002      	beq.n	8004570 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b94      	cmp	r3, #148	; 0x94
 800456e:	d103      	bne.n	8004578 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	711a      	strb	r2, [r3, #4]
 8004576:	e002      	b.n	800457e <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800457e:	f7ff fe33 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	4619      	mov	r1, r3
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f950 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	82bb      	strh	r3, [r7, #20]
 8004590:	e00a      	b.n	80045a8 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004592:	8abb      	ldrh	r3, [r7, #20]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f945 	bl	800482c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80045a2:	8abb      	ldrh	r3, [r7, #20]
 80045a4:	3301      	adds	r3, #1
 80045a6:	82bb      	strh	r3, [r7, #20]
 80045a8:	8aba      	ldrh	r2, [r7, #20]
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3f0      	bcc.n	8004592 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045b0:	f7ff fe0a 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	2b84      	cmp	r3, #132	; 0x84
 80045b8:	d002      	beq.n	80045c0 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fa08 	bl	80049d0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
 80045cc:	e001      	b.n	80045d2 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	715a      	strb	r2, [r3, #5]

    return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	e000      	b.n	80045e4 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	461a      	mov	r2, r3
 80045f8:	460b      	mov	r3, r1
 80045fa:	72fb      	strb	r3, [r7, #11]
 80045fc:	4613      	mov	r3, r2
 80045fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	799b      	ldrb	r3, [r3, #6]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d13d      	bne.n	800468a <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	795b      	ldrb	r3, [r3, #5]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004616:	2302      	movs	r3, #2
 8004618:	e038      	b.n	800468c <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f9b1 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004626:	f7ff fddf 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	4619      	mov	r1, r3
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8fc 	bl	800482c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004634:	2100      	movs	r1, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8f8 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	82fb      	strh	r3, [r7, #22]
 8004640:	e009      	b.n	8004656 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f947 	bl	80048d8 <SUBGHZSPI_Receive>
      pData++;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	3301      	adds	r3, #1
 800464e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	3301      	adds	r3, #1
 8004654:	82fb      	strh	r3, [r7, #22]
 8004656:	8afa      	ldrh	r2, [r7, #22]
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d3f1      	bcc.n	8004642 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800465e:	f7ff fdb3 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f9b4 	bl	80049d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e001      	b.n	800467a <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	715a      	strb	r2, [r3, #5]

    return status;
 8004686:	7ffb      	ldrb	r3, [r7, #31]
 8004688:	e000      	b.n	800468c <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	460b      	mov	r3, r1
 80046a2:	72fb      	strb	r3, [r7, #11]
 80046a4:	4613      	mov	r3, r2
 80046a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	799b      	ldrb	r3, [r3, #6]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d13e      	bne.n	8004730 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	795b      	ldrb	r3, [r3, #5]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_SUBGHZ_WriteBuffer+0x2a>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e039      	b.n	8004732 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f95f 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046ca:	f7ff fd8d 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80046ce:	210e      	movs	r1, #14
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80046d6:	7afb      	ldrb	r3, [r7, #11]
 80046d8:	4619      	mov	r1, r3
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8a6 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	82bb      	strh	r3, [r7, #20]
 80046e4:	e00a      	b.n	80046fc <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046e6:	8abb      	ldrh	r3, [r7, #20]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f89b 	bl	800482c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046f6:	8abb      	ldrh	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	82bb      	strh	r3, [r7, #20]
 80046fc:	8aba      	ldrh	r2, [r7, #20]
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d3f0      	bcc.n	80046e6 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004704:	f7ff fd60 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f961 	bl	80049d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
 800471a:	e001      	b.n	8004720 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	715a      	strb	r2, [r3, #5]

    return status;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	e000      	b.n	8004732 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b088      	sub	sp, #32
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	460b      	mov	r3, r1
 8004748:	72fb      	strb	r3, [r7, #11]
 800474a:	4613      	mov	r3, r2
 800474c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	799b      	ldrb	r3, [r3, #6]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d141      	bne.n	80047e0 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	795b      	ldrb	r3, [r3, #5]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004764:	2302      	movs	r3, #2
 8004766:	e03c      	b.n	80047e2 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f90a 	bl	8004988 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004774:	f7ff fd38 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004778:	211e      	movs	r1, #30
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f856 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004780:	7afb      	ldrb	r3, [r7, #11]
 8004782:	4619      	mov	r1, r3
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f851 	bl	800482c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800478a:	2100      	movs	r1, #0
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f84d 	bl	800482c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	82fb      	strh	r3, [r7, #22]
 8004796:	e009      	b.n	80047ac <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f89c 	bl	80048d8 <SUBGHZSPI_Receive>
      pData++;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3301      	adds	r3, #1
 80047a4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80047a6:	8afb      	ldrh	r3, [r7, #22]
 80047a8:	3301      	adds	r3, #1
 80047aa:	82fb      	strh	r3, [r7, #22]
 80047ac:	8afa      	ldrh	r2, [r7, #22]
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3f1      	bcc.n	8004798 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047b4:	f7ff fd08 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f909 	bl	80049d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e001      	b.n	80047d0 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	715a      	strb	r2, [r3, #5]

    return status;
 80047dc:	7ffb      	ldrb	r3, [r7, #31]
 80047de:	e000      	b.n	80047e2 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004808:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 800480c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004810:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <SUBGHZSPI_Init+0x3c>)
 8004818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr
 8004828:	58010000 	.word	0x58010000

0800482c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <SUBGHZSPI_Transmit+0xa0>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	0cdb      	lsrs	r3, r3, #19
 800484a:	2264      	movs	r2, #100	; 0x64
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	609a      	str	r2, [r3, #8]
      break;
 8004862:	e008      	b.n	8004876 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <SUBGHZSPI_Transmit+0xa4>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d1ed      	bne.n	8004852 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <SUBGHZSPI_Transmit+0xa8>)
 8004878:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <SUBGHZSPI_Transmit+0xa0>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	0cdb      	lsrs	r3, r3, #19
 800488e:	2264      	movs	r2, #100	; 0x64
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e008      	b.n	80048ba <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048ae:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <SUBGHZSPI_Transmit+0xa4>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d1ed      	bne.n	8004896 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <SUBGHZSPI_Transmit+0xa4>)
 80048bc:	68db      	ldr	r3, [r3, #12]

  return status;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000008 	.word	0x20000008
 80048d0:	58010000 	.word	0x58010000
 80048d4:	5801000c 	.word	0x5801000c

080048d8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048e6:	4b25      	ldr	r3, [pc, #148]	; (800497c <SUBGHZSPI_Receive+0xa4>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	0cdb      	lsrs	r3, r3, #19
 80048f4:	2264      	movs	r2, #100	; 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	609a      	str	r2, [r3, #8]
      break;
 800490c:	e008      	b.n	8004920 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b01      	subs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <SUBGHZSPI_Receive+0xa8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d1ed      	bne.n	80048fc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <SUBGHZSPI_Receive+0xac>)
 8004922:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	22ff      	movs	r2, #255	; 0xff
 8004928:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <SUBGHZSPI_Receive+0xa4>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	0cdb      	lsrs	r3, r3, #19
 8004938:	2264      	movs	r2, #100	; 0x64
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	609a      	str	r2, [r3, #8]
      break;
 8004950:	e008      	b.n	8004964 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b01      	subs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <SUBGHZSPI_Receive+0xa8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d1ed      	bne.n	8004940 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <SUBGHZSPI_Receive+0xa8>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	701a      	strb	r2, [r3, #0]

  return status;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000008 	.word	0x20000008
 8004980:	58010000 	.word	0x58010000
 8004984:	5801000c 	.word	0x5801000c

08004988 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	791b      	ldrb	r3, [r3, #4]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d111      	bne.n	80049bc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <SUBGHZ_CheckDeviceReady+0x44>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049a8:	f7ff fc1e 	bl	80041e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f9      	bne.n	80049ac <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049b8:	f7ff fc06 	bl	80041c8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f807 	bl	80049d0 <SUBGHZ_WaitOnBusy>
 80049c2:	4603      	mov	r3, r0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000008 	.word	0x20000008

080049d0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <SUBGHZ_WaitOnBusy+0x58>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	0d1b      	lsrs	r3, r3, #20
 80049ea:	2264      	movs	r2, #100	; 0x64
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80049f2:	f7ff fc27 	bl	8004244 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80049f6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d105      	bne.n	8004a0a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	609a      	str	r2, [r3, #8]
      break;
 8004a08:	e009      	b.n	8004a1e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004a10:	f7ff fc06 	bl	8004220 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d0e9      	beq.n	80049f2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000008 	.word	0x20000008

08004a2c <LL_GPIO_SetPinMode>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b08b      	sub	sp, #44	; 0x2c
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	613b      	str	r3, [r7, #16]
  return result;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e003      	b.n	8004a5e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2103      	movs	r1, #3
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	401a      	ands	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	61fb      	str	r3, [r7, #28]
  return result;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e003      	b.n	8004a8c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	fa01 f303 	lsl.w	r3, r1, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	372c      	adds	r7, #44	; 0x2c
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <LL_GPIO_SetPinOutputType>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	605a      	str	r2, [r3, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <LL_GPIO_SetPinSpeed>:
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b08b      	sub	sp, #44	; 0x2c
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	fa93 f3a3 	rbit	r3, r3
 8004aec:	613b      	str	r3, [r7, #16]
  return result;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004af8:	2320      	movs	r3, #32
 8004afa:	e003      	b.n	8004b04 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2103      	movs	r1, #3
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
  return result;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004b26:	2320      	movs	r3, #32
 8004b28:	e003      	b.n	8004b32 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	372c      	adds	r7, #44	; 0x2c
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <LL_GPIO_SetPinPull>:
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b08b      	sub	sp, #44	; 0x2c
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	613b      	str	r3, [r7, #16]
  return result;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	2103      	movs	r1, #3
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	401a      	ands	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	61fb      	str	r3, [r7, #28]
  return result;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004b9e:	2320      	movs	r3, #32
 8004ba0:	e003      	b.n	8004baa <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	372c      	adds	r7, #44	; 0x2c
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <LL_GPIO_SetAFPin_0_7>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b08b      	sub	sp, #44	; 0x2c
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	613b      	str	r3, [r7, #16]
  return result;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004be8:	2320      	movs	r3, #32
 8004bea:	e003      	b.n	8004bf4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	210f      	movs	r1, #15
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	61fb      	str	r3, [r7, #28]
  return result;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004c16:	2320      	movs	r3, #32
 8004c18:	e003      	b.n	8004c22 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	372c      	adds	r7, #44	; 0x2c
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <LL_GPIO_SetAFPin_8_15>:
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b08b      	sub	sp, #44	; 0x2c
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	613b      	str	r3, [r7, #16]
  return result;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004c62:	2320      	movs	r3, #32
 8004c64:	e003      	b.n	8004c6e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	fab3 f383 	clz	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	210f      	movs	r1, #15
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	401a      	ands	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	61fb      	str	r3, [r7, #28]
  return result;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004c92:	2320      	movs	r3, #32
 8004c94:	e003      	b.n	8004c9e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	fab3 f383 	clz	r3, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004cac:	bf00      	nop
 8004cae:	372c      	adds	r7, #44	; 0x2c
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	fa93 f3a3 	rbit	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
  return result;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <LL_GPIO_Init+0x26>
    return 32U;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	e003      	b.n	8004ce4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004ce6:	e04e      	b.n	8004d86 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d040      	beq.n	8004d80 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	461a      	mov	r2, r3
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fe90 	bl	8004a2c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d003      	beq.n	8004d1c <LL_GPIO_Init+0x66>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d10d      	bne.n	8004d38 <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	461a      	mov	r2, r3
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fed4 	bl	8004ad2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff feb6 	bl	8004aa4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff02 	bl	8004b4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d111      	bne.n	8004d72 <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2bff      	cmp	r3, #255	; 0xff
 8004d52:	d807      	bhi.n	8004d64 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	69b9      	ldr	r1, [r7, #24]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff30 	bl	8004bc2 <LL_GPIO_SetAFPin_0_7>
 8004d62:	e006      	b.n	8004d72 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff64 	bl	8004c3a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	461a      	mov	r2, r3
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff fe56 	bl	8004a2c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	3301      	adds	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1a9      	bne.n	8004ce8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004d94:	2301      	movs	r3, #1
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <LL_LPUART_IsEnabled>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <LL_LPUART_IsEnabled+0x18>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_LPUART_IsEnabled+0x1a>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <LL_LPUART_SetPrescaler>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	f023 030f 	bic.w	r3, r3, #15
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr

08004de8 <LL_LPUART_SetStopBitsLength>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <LL_LPUART_SetHWFlowCtrl>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <LL_LPUART_SetBaudRate>:
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b088      	sub	sp, #32
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	61f8      	str	r0, [r7, #28]
 8004e3a:	61b9      	str	r1, [r7, #24]
 8004e3c:	617a      	str	r2, [r7, #20]
 8004e3e:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d039      	beq.n	8004eba <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	60fa      	str	r2, [r7, #12]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <LL_LPUART_SetBaudRate+0x94>)
 8004e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e6a:	f7fb fedf 	bl	8000c2c <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	020b      	lsls	r3, r1, #8
 8004e80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e84:	0202      	lsls	r2, r0, #8
 8004e86:	6939      	ldr	r1, [r7, #16]
 8004e88:	0849      	lsrs	r1, r1, #1
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	4605      	mov	r5, r0
 8004e90:	eb12 0804 	adds.w	r8, r2, r4
 8004e94:	eb43 0905 	adc.w	r9, r3, r5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	4693      	mov	fp, r2
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	465b      	mov	r3, fp
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	f7fb fec0 	bl	8000c2c <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	60da      	str	r2, [r3, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec4:	0801a5bc 	.word	0x0801a5bc

08004ec8 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ff61 	bl	8004d9e <LL_LPUART_IsEnabled>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d136      	bne.n	8004f50 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <LL_LPUART_Init+0x94>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	6891      	ldr	r1, [r2, #8]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	6912      	ldr	r2, [r2, #16]
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	6952      	ldr	r2, [r2, #20]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff6e 	bl	8004de8 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff7a 	bl	8004e0c <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8004f18:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f1c:	f000 f930 	bl	8005180 <LL_RCC_GetLPUARTClockFreq>
 8004f20:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ff76 	bl	8004e30 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ff39 	bl	8004dc2 <LL_LPUART_SetPrescaler>
  }

  return (status);
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	efffe9f3 	.word	0xefffe9f3

08004f60 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d101      	bne.n	8004f78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_HSI_IsReady>:
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d101      	bne.n	8004f9a <LL_RCC_HSI_IsReady+0x18>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <LL_RCC_HSI_IsReady+0x1a>
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_LSE_IsReady>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d101      	bne.n	8004fbc <LL_RCC_LSE_IsReady+0x18>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <LL_RCC_LSE_IsReady+0x1a>
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d101      	bne.n	8004fdc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_MSI_GetRange>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <LL_RCC_GetSysClkSource>:
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <LL_RCC_GetAHBPrescaler>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <LL_C2_RCC_GetAHBPrescaler>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800504c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <LL_RCC_GetAHB3Prescaler>:
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <LL_RCC_GetAPB1Prescaler>:
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <LL_RCC_GetAPB2Prescaler>:
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <LL_RCC_GetLPUARTClockSource>:
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4013      	ands	r3, r2
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <LL_RCC_PLL_GetN>:
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <LL_RCC_PLL_GetR>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <LL_RCC_PLL_GetDivider>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80050ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <LL_RCC_PLL_GetMainSource>:
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
}
 800510e:	4618      	mov	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800511e:	f000 f871 	bl	8005204 <RCC_GetSystemClockFreq>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

  /* HCLK1 clock frequency */
  RCC_Clocks->HCLK1_Frequency   = RCC_GetHCLK1ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f911 	bl	8005354 <RCC_GetHCLK1ClockFreq>
 8005132:	4602      	mov	r2, r0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	605a      	str	r2, [r3, #4]

#if defined(DUAL_CORE)
  /* HCLK2 clock frequency */
  RCC_Clocks->HCLK2_Frequency   = RCC_GetHCLK2ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f91f 	bl	8005380 <RCC_GetHCLK2ClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

  /* HCLK3 clock frequency */
  RCC_Clocks->HCLK3_Frequency   = RCC_GetHCLK3ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f92d 	bl	80053ac <RCC_GetHCLK3ClockFreq>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK1_Frequency);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f93b 	bl	80053d8 <RCC_GetPCLK1ClockFreq>
 8005162:	4602      	mov	r2, r0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	611a      	str	r2, [r3, #16]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK1_Frequency);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f947 	bl	8005400 <RCC_GetPCLK2ClockFreq>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	615a      	str	r2, [r3, #20]
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ff86 	bl	800509e <LL_RCC_GetLPUARTClockSource>
 8005192:	4603      	mov	r3, r0
 8005194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005198:	d015      	beq.n	80051c6 <LL_RCC_GetLPUARTClockFreq+0x46>
 800519a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800519e:	d81b      	bhi.n	80051d8 <LL_RCC_GetLPUARTClockFreq+0x58>
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d003      	beq.n	80051ae <LL_RCC_GetLPUARTClockFreq+0x2e>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d004      	beq.n	80051b6 <LL_RCC_GetLPUARTClockFreq+0x36>
 80051ac:	e014      	b.n	80051d8 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80051ae:	f000 f829 	bl	8005204 <RCC_GetSystemClockFreq>
 80051b2:	60f8      	str	r0, [r7, #12]
      break;
 80051b4:	e01f      	b.n	80051f6 <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80051b6:	f7ff fee4 	bl	8004f82 <LL_RCC_HSI_IsReady>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d117      	bne.n	80051f0 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <LL_RCC_GetLPUARTClockFreq+0x80>)
 80051c2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80051c4:	e014      	b.n	80051f0 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80051c6:	f7ff feed 	bl	8004fa4 <LL_RCC_LSE_IsReady>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d111      	bne.n	80051f4 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 80051d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80051d6:	e00d      	b.n	80051f4 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 80051d8:	f000 f814 	bl	8005204 <RCC_GetSystemClockFreq>
 80051dc:	4603      	mov	r3, r0
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f8b8 	bl	8005354 <RCC_GetHCLK1ClockFreq>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f8f6 	bl	80053d8 <RCC_GetPCLK1ClockFreq>
 80051ec:	60f8      	str	r0, [r7, #12]
      break;
 80051ee:	e002      	b.n	80051f6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80051f4:	bf00      	nop
  }

  return lpuart_frequency;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	00f42400 	.word	0x00f42400

08005204 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800520a:	f7ff ff03 	bl	8005014 <LL_RCC_GetSysClkSource>
 800520e:	4603      	mov	r3, r0
 8005210:	2b0c      	cmp	r3, #12
 8005212:	d861      	bhi.n	80052d8 <RCC_GetSystemClockFreq+0xd4>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <RCC_GetSystemClockFreq+0x18>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005251 	.word	0x08005251
 8005220:	080052d9 	.word	0x080052d9
 8005224:	080052d9 	.word	0x080052d9
 8005228:	080052d9 	.word	0x080052d9
 800522c:	080052b5 	.word	0x080052b5
 8005230:	080052d9 	.word	0x080052d9
 8005234:	080052d9 	.word	0x080052d9
 8005238:	080052d9 	.word	0x080052d9
 800523c:	080052bb 	.word	0x080052bb
 8005240:	080052d9 	.word	0x080052d9
 8005244:	080052d9 	.word	0x080052d9
 8005248:	080052d9 	.word	0x080052d9
 800524c:	080052d1 	.word	0x080052d1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005250:	f7ff feb9 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d115      	bne.n	8005286 <RCC_GetSystemClockFreq+0x82>
 800525a:	f7ff feb4 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800525e:	4603      	mov	r3, r0
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <RCC_GetSystemClockFreq+0x6e>
 8005264:	f7ff febf 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 8005268:	4603      	mov	r3, r0
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	e005      	b.n	800527e <RCC_GetSystemClockFreq+0x7a>
 8005272:	f7ff fec3 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 8005276:	4603      	mov	r3, r0
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	4a32      	ldr	r2, [pc, #200]	; (8005348 <RCC_GetSystemClockFreq+0x144>)
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	e014      	b.n	80052b0 <RCC_GetSystemClockFreq+0xac>
 8005286:	f7ff fe9e 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800528a:	4603      	mov	r3, r0
 800528c:	2b01      	cmp	r3, #1
 800528e:	d106      	bne.n	800529e <RCC_GetSystemClockFreq+0x9a>
 8005290:	f7ff fea9 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 8005294:	4603      	mov	r3, r0
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	e005      	b.n	80052aa <RCC_GetSystemClockFreq+0xa6>
 800529e:	f7ff fead 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 80052a2:	4603      	mov	r3, r0
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	4a27      	ldr	r2, [pc, #156]	; (8005348 <RCC_GetSystemClockFreq+0x144>)
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80052b2:	e043      	b.n	800533c <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <RCC_GetSystemClockFreq+0x148>)
 80052b6:	607b      	str	r3, [r7, #4]
      break;
 80052b8:	e040      	b.n	800533c <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052ba:	f7ff fe51 	bl	8004f60 <LL_RCC_HSE_IsEnabledDiv2>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d102      	bne.n	80052ca <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <RCC_GetSystemClockFreq+0x148>)
 80052c6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 80052c8:	e038      	b.n	800533c <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 80052ca:	4b21      	ldr	r3, [pc, #132]	; (8005350 <RCC_GetSystemClockFreq+0x14c>)
 80052cc:	607b      	str	r3, [r7, #4]
      break;
 80052ce:	e035      	b.n	800533c <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80052d0:	f000 f8aa 	bl	8005428 <RCC_PLL_GetFreqDomain_SYS>
 80052d4:	6078      	str	r0, [r7, #4]
      break;
 80052d6:	e031      	b.n	800533c <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80052d8:	f7ff fe75 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d115      	bne.n	800530e <RCC_GetSystemClockFreq+0x10a>
 80052e2:	f7ff fe70 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <RCC_GetSystemClockFreq+0xf6>
 80052ec:	f7ff fe7b 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 80052f0:	4603      	mov	r3, r0
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	e005      	b.n	8005306 <RCC_GetSystemClockFreq+0x102>
 80052fa:	f7ff fe7f 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 80052fe:	4603      	mov	r3, r0
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <RCC_GetSystemClockFreq+0x144>)
 8005308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530c:	e014      	b.n	8005338 <RCC_GetSystemClockFreq+0x134>
 800530e:	f7ff fe5a 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <RCC_GetSystemClockFreq+0x122>
 8005318:	f7ff fe65 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 800531c:	4603      	mov	r3, r0
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	e005      	b.n	8005332 <RCC_GetSystemClockFreq+0x12e>
 8005326:	f7ff fe69 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 800532a:	4603      	mov	r3, r0
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <RCC_GetSystemClockFreq+0x144>)
 8005334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005338:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800533a:	bf00      	nop
  }

  return frequency;
 800533c:	687b      	ldr	r3, [r7, #4]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	0801a57c 	.word	0x0801a57c
 800534c:	00f42400 	.word	0x00f42400
 8005350:	01e84800 	.word	0x01e84800

08005354 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800535c:	f7ff fe65 	bl	800502a <LL_RCC_GetAHBPrescaler>
 8005360:	4603      	mov	r3, r0
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	4a04      	ldr	r2, [pc, #16]	; (800537c <RCC_GetHCLK1ClockFreq+0x28>)
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	0801a51c 	.word	0x0801a51c

08005380 <RCC_GetHCLK2ClockFreq>:
  * @brief  Return HCLK2 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK2ClockFreq(uint32_t SYSCLK_Frequency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, LL_C2_RCC_GetAHBPrescaler());
 8005388:	f7ff fe5a 	bl	8005040 <LL_C2_RCC_GetAHBPrescaler>
 800538c:	4603      	mov	r3, r0
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <RCC_GetHCLK2ClockFreq+0x28>)
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	0801a51c 	.word	0x0801a51c

080053ac <RCC_GetHCLK3ClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK3 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK3ClockFreq(uint32_t SYSCLK_Frequency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, LL_RCC_GetAHB3Prescaler());
 80053b4:	f7ff fe50 	bl	8005058 <LL_RCC_GetAHB3Prescaler>
 80053b8:	4603      	mov	r3, r0
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <RCC_GetHCLK3ClockFreq+0x28>)
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	0801a51c 	.word	0x0801a51c

080053d8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80053e0:	f7ff fe47 	bl	8005072 <LL_RCC_GetAPB1Prescaler>
 80053e4:	4603      	mov	r3, r0
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	4a04      	ldr	r2, [pc, #16]	; (80053fc <RCC_GetPCLK1ClockFreq+0x24>)
 80053ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	0801a55c 	.word	0x0801a55c

08005400 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005408:	f7ff fe3e 	bl	8005088 <LL_RCC_GetAPB2Prescaler>
 800540c:	4603      	mov	r3, r0
 800540e:	0adb      	lsrs	r3, r3, #11
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <RCC_GetPCLK2ClockFreq+0x24>)
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	0801a55c 	.word	0x0801a55c

08005428 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800542e:	f7ff fe67 	bl	8005100 <LL_RCC_PLL_GetMainSource>
 8005432:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d03e      	beq.n	80054b8 <RCC_PLL_GetFreqDomain_SYS+0x90>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d846      	bhi.n	80054ce <RCC_PLL_GetFreqDomain_SYS+0xa6>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d003      	beq.n	800544e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d032      	beq.n	80054b2 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 800544c:	e03f      	b.n	80054ce <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800544e:	f7ff fdba 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8005458:	f7ff fdb5 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800545c:	4603      	mov	r3, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	d106      	bne.n	8005470 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8005462:	f7ff fdc0 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 8005466:	4603      	mov	r3, r0
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	e005      	b.n	800547c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005470:	f7ff fdc4 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 8005474:	4603      	mov	r3, r0
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	4a39      	ldr	r2, [pc, #228]	; (8005564 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	e014      	b.n	80054ae <RCC_PLL_GetFreqDomain_SYS+0x86>
 8005484:	f7ff fd9f 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d106      	bne.n	800549c <RCC_PLL_GetFreqDomain_SYS+0x74>
 800548e:	f7ff fdaa 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 8005492:	4603      	mov	r3, r0
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	e005      	b.n	80054a8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800549c:	f7ff fdae 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 80054a0:	4603      	mov	r3, r0
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	4a2e      	ldr	r2, [pc, #184]	; (8005564 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80054aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ae:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80054b0:	e03f      	b.n	8005532 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 80054b4:	607b      	str	r3, [r7, #4]
      break;
 80054b6:	e03c      	b.n	8005532 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80054b8:	f7ff fd52 	bl	8004f60 <LL_RCC_HSE_IsEnabledDiv2>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d102      	bne.n	80054c8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 80054c4:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80054c6:	e034      	b.n	8005532 <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <RCC_PLL_GetFreqDomain_SYS+0x144>)
 80054ca:	607b      	str	r3, [r7, #4]
      break;
 80054cc:	e031      	b.n	8005532 <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80054ce:	f7ff fd7a 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d115      	bne.n	8005504 <RCC_PLL_GetFreqDomain_SYS+0xdc>
 80054d8:	f7ff fd75 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d106      	bne.n	80054f0 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80054e2:	f7ff fd80 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 80054e6:	4603      	mov	r3, r0
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	e005      	b.n	80054fc <RCC_PLL_GetFreqDomain_SYS+0xd4>
 80054f0:	f7ff fd84 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 80054f4:	4603      	mov	r3, r0
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	4a19      	ldr	r2, [pc, #100]	; (8005564 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80054fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005502:	e014      	b.n	800552e <RCC_PLL_GetFreqDomain_SYS+0x106>
 8005504:	f7ff fd5f 	bl	8004fc6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d106      	bne.n	800551c <RCC_PLL_GetFreqDomain_SYS+0xf4>
 800550e:	f7ff fd6a 	bl	8004fe6 <LL_RCC_MSI_GetRange>
 8005512:	4603      	mov	r3, r0
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	e005      	b.n	8005528 <RCC_PLL_GetFreqDomain_SYS+0x100>
 800551c:	f7ff fd6e 	bl	8004ffc <LL_RCC_MSI_GetRangeAfterStandby>
 8005520:	4603      	mov	r3, r0
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	4a0e      	ldr	r2, [pc, #56]	; (8005564 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 800552a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552e:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005530:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005532:	f7ff fdc3 	bl	80050bc <LL_RCC_PLL_GetN>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	fb03 f402 	mul.w	r4, r3, r2
 800553e:	f7ff fdd4 	bl	80050ea <LL_RCC_PLL_GetDivider>
 8005542:	4603      	mov	r3, r0
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	3301      	adds	r3, #1
 8005548:	fbb4 f4f3 	udiv	r4, r4, r3
 800554c:	f7ff fdc2 	bl	80050d4 <LL_RCC_PLL_GetR>
 8005550:	4603      	mov	r3, r0
 8005552:	0f5b      	lsrs	r3, r3, #29
 8005554:	3301      	adds	r3, #1
 8005556:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}
 8005562:	bf00      	nop
 8005564:	0801a57c 	.word	0x0801a57c
 8005568:	00f42400 	.word	0x00f42400
 800556c:	01e84800 	.word	0x01e84800

08005570 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4313      	orrs	r3, r2
 8005586:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a8:	4013      	ands	r3, r2
 80055aa:	638b      	str	r3, [r1, #56]	; 0x38
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80055e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ee:	4013      	ands	r3, r2
 80055f0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	635a      	str	r2, [r3, #52]	; 0x34
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr

0800567e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr

080056d6 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f043 0201 	orr.w	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	615a      	str	r2, [r3, #20]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
	...

08005710 <LL_TIM_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: invalid TIMx instance
  */
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  ErrorStatus result = SUCCESS;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <LL_TIM_DeInit+0x80>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d108      	bne.n	8005736 <LL_TIM_DeInit+0x26>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 8005724:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005728:	f7ff ff45 	bl	80055b6 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 800572c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005730:	f7ff ff52 	bl	80055d8 <LL_APB2_GRP1_ReleaseReset>
 8005734:	e026      	b.n	8005784 <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d106      	bne.n	800574c <LL_TIM_DeInit+0x3c>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
 800573e:	2001      	movs	r0, #1
 8005740:	f7ff ff16 	bl	8005570 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
 8005744:	2001      	movs	r0, #1
 8005746:	f7ff ff24 	bl	8005592 <LL_APB1_GRP1_ReleaseReset>
 800574a:	e01b      	b.n	8005784 <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM16)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a11      	ldr	r2, [pc, #68]	; (8005794 <LL_TIM_DeInit+0x84>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <LL_TIM_DeInit+0x56>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM16);
 8005754:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005758:	f7ff ff2d 	bl	80055b6 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM16);
 800575c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005760:	f7ff ff3a 	bl	80055d8 <LL_APB2_GRP1_ReleaseReset>
 8005764:	e00e      	b.n	8005784 <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM17)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <LL_TIM_DeInit+0x88>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <LL_TIM_DeInit+0x70>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM17);
 800576e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005772:	f7ff ff20 	bl	80055b6 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM17);
 8005776:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800577a:	f7ff ff2d 	bl	80055d8 <LL_APB2_GRP1_ReleaseReset>
 800577e:	e001      	b.n	8005784 <LL_TIM_DeInit+0x74>
  }
  else
  {
    result = ERROR;
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a27      	ldr	r2, [pc, #156]	; (800584c <LL_TIM_Init+0xb0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <LL_TIM_Init+0x20>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d106      	bne.n	80057ca <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1f      	ldr	r2, [pc, #124]	; (800584c <LL_TIM_Init+0xb0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <LL_TIM_Init+0x4e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d8:	d007      	beq.n	80057ea <LL_TIM_Init+0x4e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <LL_TIM_Init+0xb4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <LL_TIM_Init+0x4e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <LL_TIM_Init+0xb8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d106      	bne.n	80057f8 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff06 	bl	8005616 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fef3 	bl	80055fc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a0c      	ldr	r2, [pc, #48]	; (800584c <LL_TIM_Init+0xb0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <LL_TIM_Init+0x92>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a0b      	ldr	r2, [pc, #44]	; (8005850 <LL_TIM_Init+0xb4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <LL_TIM_Init+0x92>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <LL_TIM_Init+0xb8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d105      	bne.n	800583a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fefb 	bl	8005630 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff58 	bl	80056f0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005840:	2301      	movs	r3, #1
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005864:	2300      	movs	r3, #0
 8005866:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800586e:	d045      	beq.n	80058fc <LL_TIM_OC_Init+0xa4>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d848      	bhi.n	800590a <LL_TIM_OC_Init+0xb2>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587e:	d036      	beq.n	80058ee <LL_TIM_OC_Init+0x96>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d840      	bhi.n	800590a <LL_TIM_OC_Init+0xb2>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d027      	beq.n	80058e0 <LL_TIM_OC_Init+0x88>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d838      	bhi.n	800590a <LL_TIM_OC_Init+0xb2>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589e:	d018      	beq.n	80058d2 <LL_TIM_OC_Init+0x7a>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a6:	d830      	bhi.n	800590a <LL_TIM_OC_Init+0xb2>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d003      	beq.n	80058b6 <LL_TIM_OC_Init+0x5e>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d007      	beq.n	80058c4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80058b4:	e029      	b.n	800590a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f82d 	bl	8005918 <OC1Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	75fb      	strb	r3, [r7, #23]
      break;
 80058c2:	e023      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f89a 	bl	8005a00 <OC2Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	e01c      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f90b 	bl	8005af0 <OC3Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]
      break;
 80058de:	e015      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f97c 	bl	8005be0 <OC4Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]
      break;
 80058ec:	e00e      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f9d5 	bl	8005ca0 <OC5Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]
      break;
 80058fa:	e007      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fa26 	bl	8005d50 <OC6Config>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	e000      	b.n	800590c <LL_TIM_OC_Init+0xb4>
      break;
 800590a:	bf00      	nop
  }

  return result;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 0202 	bic.w	r2, r3, #2
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <OC1Config+0xdc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <OC1Config+0x76>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <OC1Config+0xe0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <OC1Config+0x76>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <OC1Config+0xe4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d11e      	bne.n	80059cc <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0208 	bic.w	r2, r3, #8
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0204 	bic.w	r2, r3, #4
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fe33 	bl	800564a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80059ea:	2301      	movs	r3, #1
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0210 	bic.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	0212      	lsls	r2, r2, #8
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0220 	bic.w	r2, r3, #32
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0210 	bic.w	r2, r3, #16
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1f      	ldr	r2, [pc, #124]	; (8005ae4 <OC2Config+0xe4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <OC2Config+0x7c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <OC2Config+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <OC2Config+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <OC2Config+0xec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d11f      	bne.n	8005abc <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	019b      	lsls	r3, r3, #6
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	019b      	lsls	r3, r3, #6
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fdc8 	bl	8005664 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005ada:	2301      	movs	r3, #1
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800

08005af0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <OC3Config+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <OC3Config+0x7a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <OC3Config+0xe8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <OC3Config+0x7a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <OC3Config+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d11f      	bne.n	8005baa <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	015b      	lsls	r3, r3, #5
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fd5e 	bl	800567e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005bc8:	2301      	movs	r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	0212      	lsls	r2, r2, #8
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	031b      	lsls	r3, r3, #12
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	031b      	lsls	r3, r3, #12
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <OC4Config+0xb4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <OC4Config+0x7c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <OC4Config+0xb8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <OC4Config+0x7c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <OC4Config+0xbc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d107      	bne.n	8005c6c <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	019b      	lsls	r3, r3, #6
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fd0a 	bl	8005698 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800

08005ca0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <OC5Config+0xa4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <OC5Config+0x6c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <OC5Config+0xa8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <OC5Config+0x6c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <OC5Config+0xac>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d109      	bne.n	8005d20 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fcc0 	bl	80056b2 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005d38:	2301      	movs	r3, #1
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d70:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	0212      	lsls	r2, r2, #8
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	051b      	lsls	r3, r3, #20
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	051b      	lsls	r3, r3, #20
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <OC6Config+0xa4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <OC6Config+0x6e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <OC6Config+0xa8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <OC6Config+0x6e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <OC6Config+0xac>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d109      	bne.n	8005dd2 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fc79 	bl	80056d6 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005dea:	2301      	movs	r3, #1
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005e08:	4a03      	ldr	r2, [pc, #12]	; (8005e18 <LL_SetSystemCoreClock+0x18>)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	20000008 	.word	0x20000008

08005e1c <LL_AHB2_GRP1_EnableClock>:
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <EMBENET_NODE_BSP_RBI_Init>:
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
    }
}

/// @brief Initialize RF Switch
void EMBENET_NODE_BSP_RBI_Init(void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_structure = {0};
 8005e52:	1d3b      	adds	r3, r7, #4
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	611a      	str	r2, [r3, #16]

    /* Enable the Radio Switch Clock */
    RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8005e60:	2004      	movs	r0, #4
 8005e62:	f7ff ffdb 	bl	8005e1c <LL_AHB2_GRP1_EnableClock>
    RF_SW_CTRL2_GPIO_CLK_ENABLE();
 8005e66:	2004      	movs	r0, #4
 8005e68:	f7ff ffd8 	bl	8005e1c <LL_AHB2_GRP1_EnableClock>

    /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005e70:	2301      	movs	r3, #1
 8005e72:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	480b      	ldr	r0, [pc, #44]	; (8005eb0 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005e82:	f7fd fecf 	bl	8003c24 <HAL_GPIO_Init>

    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8005e86:	2320      	movs	r3, #32
 8005e88:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4808      	ldr	r0, [pc, #32]	; (8005eb0 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005e90:	f7fd fec8 	bl	8003c24 <HAL_GPIO_Init>

    gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8005e94:	2308      	movs	r3, #8
 8005e96:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4804      	ldr	r0, [pc, #16]	; (8005eb0 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005e9e:	f7fd fec1 	bl	8003c24 <HAL_GPIO_Init>

    EMBENET_NODE_BSP_ConfigRFSwitch(EMBENET_NODE_BSP_RF_SWITCH_OFF);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f000 f80e 	bl	8005ec4 <EMBENET_NODE_BSP_ConfigRFSwitch>
}
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	48000800 	.word	0x48000800

08005eb4 <EMBENET_NODE_BSP_GetTxOffset>:
    HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL3_PIN);
}


/// @brief Return TX offset for given RF Path
int8_t EMBENET_NODE_BSP_GetTxOffset(void) {
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
    return 0;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
	...

08005ec4 <EMBENET_NODE_BSP_ConfigRFSwitch>:


void EMBENET_NODE_BSP_ConfigRFSwitch(EMBENET_NODE_BSP_RfSwitch pos) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
    switch (pos) {
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d84b      	bhi.n	8005f6c <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <EMBENET_NODE_BSP_ConfigRFSwitch+0x18>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f4d 	.word	0x08005f4d
        case EMBENET_NODE_BSP_RF_SWITCH_OFF:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8005eec:	2200      	movs	r2, #0
 8005eee:	2108      	movs	r1, #8
 8005ef0:	4820      	ldr	r0, [pc, #128]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005ef2:	f7fe f80e 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2110      	movs	r1, #16
 8005efa:	481e      	ldr	r0, [pc, #120]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005efc:	f7fe f809 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8005f00:	2200      	movs	r2, #0
 8005f02:	2120      	movs	r1, #32
 8005f04:	481b      	ldr	r0, [pc, #108]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f06:	f7fe f804 	bl	8003f12 <HAL_GPIO_WritePin>
            break;
 8005f0a:	e02f      	b.n	8005f6c <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_RX:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	2108      	movs	r1, #8
 8005f10:	4818      	ldr	r0, [pc, #96]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f12:	f7fd fffe 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8005f16:	2201      	movs	r2, #1
 8005f18:	2110      	movs	r1, #16
 8005f1a:	4816      	ldr	r0, [pc, #88]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f1c:	f7fd fff9 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8005f20:	2200      	movs	r2, #0
 8005f22:	2120      	movs	r1, #32
 8005f24:	4813      	ldr	r0, [pc, #76]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f26:	f7fd fff4 	bl	8003f12 <HAL_GPIO_WritePin>
            break;
 8005f2a:	e01f      	b.n	8005f6c <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_TX_LP:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	2108      	movs	r1, #8
 8005f30:	4810      	ldr	r0, [pc, #64]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f32:	f7fd ffee 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8005f36:	2201      	movs	r2, #1
 8005f38:	2110      	movs	r1, #16
 8005f3a:	480e      	ldr	r0, [pc, #56]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f3c:	f7fd ffe9 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8005f40:	2201      	movs	r2, #1
 8005f42:	2120      	movs	r1, #32
 8005f44:	480b      	ldr	r0, [pc, #44]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f46:	f7fd ffe4 	bl	8003f12 <HAL_GPIO_WritePin>
            break;
 8005f4a:	e00f      	b.n	8005f6c <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_TX_HP:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2108      	movs	r1, #8
 8005f50:	4808      	ldr	r0, [pc, #32]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f52:	f7fd ffde 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2110      	movs	r1, #16
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f5c:	f7fd ffd9 	bl	8003f12 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8005f60:	2201      	movs	r2, #1
 8005f62:	2120      	movs	r1, #32
 8005f64:	4803      	ldr	r0, [pc, #12]	; (8005f74 <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005f66:	f7fd ffd4 	bl	8003f12 <HAL_GPIO_WritePin>
            break;
 8005f6a:	bf00      	nop
    }
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	48000800 	.word	0x48000800

08005f78 <EMBENET_NODE_BSP_GetTxConfig>:


EMBENET_NODE_BSP_TxConfig EMBENET_NODE_BSP_GetTxConfig(void) {
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
    return EMBENET_NODE_BSP_TX_CONFIG_LP_HP;
 8005f7c:	2302      	movs	r3, #2
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <LL_AHB3_GRP1_EnableClock>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005faa:	68fb      	ldr	r3, [r7, #12]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <LL_AHB3_GRP1_DisableClock>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8005fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fcc:	4013      	ands	r3, r2
 8005fce:	650b      	str	r3, [r1, #80]	; 0x50
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_CRYP_MspInit>:
 * @brief CRYP MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcryp: CRYP handle pointer
 * @retval None
 */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    if (hcryp->Instance == AES) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <HAL_CRYP_MspInit+0x34>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10b      	bne.n	8006006 <HAL_CRYP_MspInit+0x2a>
        /* USER CODE BEGIN AES_MspInit 0 */

        /* USER CODE END AES_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_AES_CLK_ENABLE();
 8005fee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005ff2:	f7ff ffc8 	bl	8005f86 <LL_AHB3_GRP1_EnableClock>
        /* AES interrupt Init */
        HAL_NVIC_SetPriority(AES_IRQn, 0, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	2033      	movs	r0, #51	; 0x33
 8005ffc:	f7fc fbe9 	bl	80027d2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(AES_IRQn);
 8006000:	2033      	movs	r0, #51	; 0x33
 8006002:	f7fc fc00 	bl	8002806 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN AES_MspInit 1 */
        /* USER CODE END AES_MspInit 1 */
    }
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	58001800 	.word	0x58001800

08006014 <HAL_CRYP_MspDeInit>:
 * @brief CRYP MSP De-Initialization
 * This function freeze the hardware resources used in this example
 * @param hcryp: CRYP handle pointer
 * @retval None
 */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
    if (hcryp->Instance == AES) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a06      	ldr	r2, [pc, #24]	; (800603c <HAL_CRYP_MspDeInit+0x28>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d106      	bne.n	8006034 <HAL_CRYP_MspDeInit+0x20>
        /* USER CODE BEGIN AES_MspDeInit 0 */

        /* USER CODE END AES_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_AES_CLK_DISABLE();
 8006026:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800602a:	f7ff ffc4 	bl	8005fb6 <LL_AHB3_GRP1_DisableClock>

        /* AES interrupt DeInit */
        HAL_NVIC_DisableIRQ(AES_IRQn);
 800602e:	2033      	movs	r0, #51	; 0x33
 8006030:	f7fc fbf7 	bl	8002822 <HAL_NVIC_DisableIRQ>
        /* USER CODE BEGIN AES_MspDeInit 1 */
        /* Disable CRYP Interrupt */
        /* USER CODE END AES_MspDeInit 1 */
    }
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	58001800 	.word	0x58001800

08006040 <EMBENET_AES128_Init>:

void EMBENET_AES128_Init(void) {
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
    hcryp.Instance             = AES;
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <EMBENET_AES128_Init+0x50>)
 8006048:	601a      	str	r2, [r3, #0]
    hcryp.Init.DataType        = CRYP_DATATYPE_8B;
 800604a:	4b10      	ldr	r3, [pc, #64]	; (800608c <EMBENET_AES128_Init+0x4c>)
 800604c:	2204      	movs	r2, #4
 800604e:	605a      	str	r2, [r3, #4]
    hcryp.Init.KeySize         = CRYP_KEYSIZE_128B;
 8006050:	4b0e      	ldr	r3, [pc, #56]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006052:	2200      	movs	r2, #0
 8006054:	609a      	str	r2, [r3, #8]
    hcryp.Init.pKey            = aesKey;
 8006056:	4b0d      	ldr	r3, [pc, #52]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006058:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <EMBENET_AES128_Init+0x54>)
 800605a:	60da      	str	r2, [r3, #12]
    hcryp.Init.pInitVect       = NULL;
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <EMBENET_AES128_Init+0x4c>)
 800605e:	2200      	movs	r2, #0
 8006060:	611a      	str	r2, [r3, #16]
    hcryp.Init.Algorithm       = CRYP_AES_ECB;
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006064:	2200      	movs	r2, #0
 8006066:	615a      	str	r2, [r3, #20]
    hcryp.Init.DataWidthUnit   = CRYP_DATAWIDTHUNIT_BYTE;
 8006068:	4b08      	ldr	r3, [pc, #32]	; (800608c <EMBENET_AES128_Init+0x4c>)
 800606a:	2201      	movs	r2, #1
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006070:	2201      	movs	r2, #1
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006076:	2200      	movs	r2, #0
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c

    HAL_CRYP_DeInit(&hcryp);
 800607a:	4804      	ldr	r0, [pc, #16]	; (800608c <EMBENET_AES128_Init+0x4c>)
 800607c:	f7fc fc26 	bl	80028cc <HAL_CRYP_DeInit>
    HAL_CRYP_Init(&hcryp);
 8006080:	4802      	ldr	r0, [pc, #8]	; (800608c <EMBENET_AES128_Init+0x4c>)
 8006082:	f7fc fbe8 	bl	8002856 <HAL_CRYP_Init>
}
 8006086:	bf00      	nop
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000be0 	.word	0x20000be0
 8006090:	58001800 	.word	0x58001800
 8006094:	20000cec 	.word	0x20000cec

08006098 <EMBENET_AES128_SetKey>:

void EMBENET_AES128_Deinit(void) {
    HAL_CRYP_DeInit(&hcryp);
}

void EMBENET_AES128_SetKey(uint8_t const key[16U]) {
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
    // HAL obtains key in native endianess (as 4 4B words)
    aesKey[0] = ((uint32_t)key[0] << 24) + ((uint32_t)key[1] << 16) + ((uint32_t)key[2] << 8) + ((uint32_t)key[3]);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	061a      	lsls	r2, r3, #24
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3301      	adds	r3, #1
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	441a      	add	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3302      	adds	r3, #2
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	4413      	add	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	3203      	adds	r2, #3
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	4a21      	ldr	r2, [pc, #132]	; (8006148 <EMBENET_AES128_SetKey+0xb0>)
 80060c4:	6013      	str	r3, [r2, #0]
    aesKey[1] = ((uint32_t)key[4] << 24) + ((uint32_t)key[5] << 16) + ((uint32_t)key[6] << 8) + ((uint32_t)key[7]);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	061a      	lsls	r2, r3, #24
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3305      	adds	r3, #5
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	441a      	add	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3306      	adds	r3, #6
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	4413      	add	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	3207      	adds	r2, #7
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	4413      	add	r3, r2
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <EMBENET_AES128_SetKey+0xb0>)
 80060ec:	6053      	str	r3, [r2, #4]
    aesKey[2] = ((uint32_t)key[8] << 24) + ((uint32_t)key[9] << 16) + ((uint32_t)key[10] << 8) + ((uint32_t)key[11]);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3308      	adds	r3, #8
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	061a      	lsls	r2, r3, #24
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3309      	adds	r3, #9
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	441a      	add	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	330a      	adds	r3, #10
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	4413      	add	r3, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	320b      	adds	r2, #11
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	4413      	add	r3, r2
 8006112:	4a0d      	ldr	r2, [pc, #52]	; (8006148 <EMBENET_AES128_SetKey+0xb0>)
 8006114:	6093      	str	r3, [r2, #8]
    aesKey[3] = ((uint32_t)key[12] << 24) + ((uint32_t)key[13] << 16) + ((uint32_t)key[14] << 8) + ((uint32_t)key[15]);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	330c      	adds	r3, #12
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	061a      	lsls	r2, r3, #24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	330d      	adds	r3, #13
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	330e      	adds	r3, #14
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	4413      	add	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	320f      	adds	r2, #15
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	4413      	add	r3, r2
 800613a:	4a03      	ldr	r2, [pc, #12]	; (8006148 <EMBENET_AES128_SetKey+0xb0>)
 800613c:	60d3      	str	r3, [r2, #12]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	20000cec 	.word	0x20000cec

0800614c <EMBENET_AES128_Encrypt>:

void EMBENET_AES128_Encrypt(uint8_t data[16U]) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	; 0x30
 8006150:	af02      	add	r7, sp, #8
 8006152:	6078      	str	r0, [r7, #4]
    uint32_t in[4];
    memcpy(in, data, 16);
 8006154:	f107 0318 	add.w	r3, r7, #24
 8006158:	2210      	movs	r2, #16
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4618      	mov	r0, r3
 800615e:	f012 ffc2 	bl	80190e6 <memcpy>
    uint32_t out[4];
    HAL_CRYP_Encrypt(&hcryp, in, (uint16_t)16, out, 10000);
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	f107 0118 	add.w	r1, r7, #24
 800616a:	f242 7210 	movw	r2, #10000	; 0x2710
 800616e:	9200      	str	r2, [sp, #0]
 8006170:	2210      	movs	r2, #16
 8006172:	4807      	ldr	r0, [pc, #28]	; (8006190 <EMBENET_AES128_Encrypt+0x44>)
 8006174:	f7fc fbd8 	bl	8002928 <HAL_CRYP_Encrypt>
    memcpy(data, out, 16);
 8006178:	f107 0308 	add.w	r3, r7, #8
 800617c:	2210      	movs	r2, #16
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f012 ffb0 	bl	80190e6 <memcpy>
}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	; 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000be0 	.word	0x20000be0

08006194 <EMBENET_AES128_Decrypt>:

void EMBENET_AES128_Decrypt(uint8_t data[16U]) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af02      	add	r7, sp, #8
 800619a:	6078      	str	r0, [r7, #4]
    uint32_t in[4];
    memcpy(in, data, 16);
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	2210      	movs	r2, #16
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f012 ff9e 	bl	80190e6 <memcpy>
    uint32_t out[4];
    HAL_CRYP_Decrypt(&hcryp, in, (uint16_t)16, out, 10000);
 80061aa:	f107 0308 	add.w	r3, r7, #8
 80061ae:	f107 0118 	add.w	r1, r7, #24
 80061b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80061b6:	9200      	str	r2, [sp, #0]
 80061b8:	2210      	movs	r2, #16
 80061ba:	4807      	ldr	r0, [pc, #28]	; (80061d8 <EMBENET_AES128_Decrypt+0x44>)
 80061bc:	f7fc fc4e 	bl	8002a5c <HAL_CRYP_Decrypt>
    memcpy(data, out, 16);
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	2210      	movs	r2, #16
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f012 ff8c 	bl	80190e6 <memcpy>
}
 80061ce:	bf00      	nop
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000be0 	.word	0x20000be0

080061dc <EMBENET_CRITICAL_SECTION_Enter>:
#pragma GCC diagnostic pop

static volatile int      irqNestCounter;
static volatile uint32_t previousIrqState;

void EMBENET_CRITICAL_SECTION_Enter(void) {
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e2:	f3ef 8310 	mrs	r3, PRIMASK
 80061e6:	603b      	str	r3, [r7, #0]
  return(result);
 80061e8:	683b      	ldr	r3, [r7, #0]
    uint32_t irqState = __get_PRIMASK();
 80061ea:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80061ec:	b672      	cpsid	i
}
 80061ee:	bf00      	nop
    __disable_irq();
    if (0 == irqNestCounter) {
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <EMBENET_CRITICAL_SECTION_Enter+0x22>
        previousIrqState = irqState;
 80061f8:	4a07      	ldr	r2, [pc, #28]	; (8006218 <EMBENET_CRITICAL_SECTION_Enter+0x3c>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6013      	str	r3, [r2, #0]
    }
    ++irqNestCounter;
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a03      	ldr	r2, [pc, #12]	; (8006214 <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 8006206:	6013      	str	r3, [r2, #0]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000cfc 	.word	0x20000cfc
 8006218:	20000d00 	.word	0x20000d00

0800621c <EMBENET_CRITICAL_SECTION_Exit>:


void EMBENET_CRITICAL_SECTION_Exit(void) {
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
    --irqNestCounter;
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8006228:	6013      	str	r3, [r2, #0]
    if (irqNestCounter < 0) {
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da02      	bge.n	8006238 <EMBENET_CRITICAL_SECTION_Exit+0x1c>
        irqNestCounter = 0;
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
    }
    if (0 == irqNestCounter && 0 == previousIrqState) {
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <EMBENET_CRITICAL_SECTION_Exit+0x30>
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <EMBENET_CRITICAL_SECTION_Exit+0x3c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <EMBENET_CRITICAL_SECTION_Exit+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 8006248:	b662      	cpsie	i
}
 800624a:	bf00      	nop
        __enable_irq();
    }
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr
 8006254:	20000cfc 	.word	0x20000cfc
 8006258:	20000d00 	.word	0x20000d00

0800625c <EMBENET_EUI64_Get>:
#pragma GCC diagnostic pop

#include <string.h>


uint64_t EMBENET_EUI64_Get(void) {
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <EMBENET_EUI64_Get+0x20>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
    uint64_t native;
    memcpy(&native, (uint8_t*)UID64_BASE, sizeof(native));
 8006268:	e9c7 2300 	strd	r2, r3, [r7]
    return native;
 800626c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	1fff7580 	.word	0x1fff7580

08006280 <__NVIC_GetPriorityGrouping>:
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <__NVIC_GetPriorityGrouping+0x18>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	f003 0307 	and.w	r3, r3, #7
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <__NVIC_EnableIRQ>:
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	db0b      	blt.n	80062c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	f003 021f 	and.w	r2, r3, #31
 80062b4:	4906      	ldr	r1, [pc, #24]	; (80062d0 <__NVIC_EnableIRQ+0x34>)
 80062b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2001      	movs	r0, #1
 80062be:	fa00 f202 	lsl.w	r2, r0, r2
 80062c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	e000e100 	.word	0xe000e100

080062d4 <__NVIC_SetPriority>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	db0a      	blt.n	80062fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	490c      	ldr	r1, [pc, #48]	; (8006320 <__NVIC_SetPriority+0x4c>)
 80062ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f2:	0112      	lsls	r2, r2, #4
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	440b      	add	r3, r1
 80062f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062fc:	e00a      	b.n	8006314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4908      	ldr	r1, [pc, #32]	; (8006324 <__NVIC_SetPriority+0x50>)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	3b04      	subs	r3, #4
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	440b      	add	r3, r1
 8006312:	761a      	strb	r2, [r3, #24]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e100 	.word	0xe000e100
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <NVIC_EncodePriority>:
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	bf28      	it	cs
 8006346:	2304      	movcs	r3, #4
 8006348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3304      	adds	r3, #4
 800634e:	2b06      	cmp	r3, #6
 8006350:	d902      	bls.n	8006358 <NVIC_EncodePriority+0x30>
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3b03      	subs	r3, #3
 8006356:	e000      	b.n	800635a <NVIC_EncodePriority+0x32>
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43da      	mvns	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	401a      	ands	r2, r3
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006370:	f04f 31ff 	mov.w	r1, #4294967295
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	43d9      	mvns	r1, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006380:	4313      	orrs	r3, r2
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	; 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr

0800638c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006398:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800639a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4013      	ands	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	644b      	str	r3, [r1, #68]	; 0x44
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	43db      	mvns	r3, r3
 80063f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f4:	4013      	ands	r3, r2
 80063f6:	644b      	str	r3, [r1, #68]	; 0x44
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr
	...

08006404 <calculateFrequency>:
    RxEndOffset     = (70),
    RxStartOffset   = (1700),
};


static inline uint32_t calculateFrequency(EMBENET_RADIO_Channel channel) {
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
    uint32_t calculatedFrequency = ((uint32_t)channel * (uint32_t)Bandwidth) + (uint32_t)BaseFrequency;
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	4a05      	ldr	r2, [pc, #20]	; (8006428 <calculateFrequency+0x24>)
 8006412:	fb03 f202 	mul.w	r2, r3, r2
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <calculateFrequency+0x28>)
 8006418:	4413      	add	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
    return calculatedFrequency;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	000186a0 	.word	0x000186a0
 800642c:	3371dc60 	.word	0x3371dc60

08006430 <EMBENET_RADIO_Init>:
    {4800, 0x1F},  {5800, 0x17},  {7300, 0x0F},  {9700, 0x1E},   {11700, 0x16},  {14600, 0x0E},  {19500, 0x1D},  {23400, 0x15},  {29300, 0x0D},  {39000, 0x1C},  {46900, 0x14},
    {58600, 0x0C}, {78200, 0x1B}, {93800, 0x13}, {117300, 0x0B}, {156200, 0x1A}, {187200, 0x12}, {234300, 0x0A}, {312000, 0x19}, {373600, 0x11}, {467000, 0x09}, {500000, 0x00}, // Invalid Bandwidth
};


EMBENET_RADIO_Status EMBENET_RADIO_Init(void) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b092      	sub	sp, #72	; 0x48
 8006434:	af00      	add	r7, sp, #0
    embenetRadioDescr = (EMBENET_RADIO_Descriptor){0};
 8006436:	4b45      	ldr	r3, [pc, #276]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006438:	4618      	mov	r0, r3
 800643a:	2324      	movs	r3, #36	; 0x24
 800643c:	461a      	mov	r2, r3
 800643e:	2100      	movs	r1, #0
 8006440:	f012 fd9e 	bl	8018f80 <memset>
    __HAL_RCC_SUBGHZ_CLK_ENABLE();
 8006444:	2001      	movs	r0, #1
 8006446:	f7ff ffa1 	bl	800638c <LL_APB3_GRP1_EnableClock>

    /* Force the SUBGHZ Periheral Clock Reset */
    __HAL_RCC_SUBGHZ_FORCE_RESET();
 800644a:	2001      	movs	r0, #1
 800644c:	f7ff ffb6 	bl	80063bc <LL_APB3_GRP1_ForceReset>

    /* Release the SUBGHZ Periheral Clock Reset */
    __HAL_RCC_SUBGHZ_RELEASE_RESET();
 8006450:	2001      	movs	r0, #1
 8006452:	f7ff ffc4 	bl	80063de <LL_APB3_GRP1_ReleaseReset>

    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_2;
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <EMBENET_RADIO_Init+0x120>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 800645c:	483c      	ldr	r0, [pc, #240]	; (8006550 <EMBENET_RADIO_Init+0x120>)
 800645e:	f7fd ff39 	bl	80042d4 <HAL_SUBGHZ_Init>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d000      	beq.n	800646a <EMBENET_RADIO_Init+0x3a>
        while (1)
 8006468:	e7fe      	b.n	8006468 <EMBENET_RADIO_Init+0x38>
            ;
    }

    SUBGRF_Init(NULL);
 800646a:	2000      	movs	r0, #0
 800646c:	f000 fd18 	bl	8006ea0 <SUBGRF_Init>

    // Enable SUBGHZ Radio NVIC Interrupt (it is enabled inside the radio driver, but redo this again with proper priority setting)
    NVIC_SetPriority(SUBGHZ_Radio_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), INTERRUPT_PRIORITY_RADIO, INTERRUPT_SUBPRIORITY_RADIO));
 8006470:	f7ff ff06 	bl	8006280 <__NVIC_GetPriorityGrouping>
 8006474:	4603      	mov	r3, r0
 8006476:	2200      	movs	r2, #0
 8006478:	2103      	movs	r1, #3
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff54 	bl	8006328 <NVIC_EncodePriority>
 8006480:	4603      	mov	r3, r0
 8006482:	4619      	mov	r1, r3
 8006484:	2032      	movs	r0, #50	; 0x32
 8006486:	f7ff ff25 	bl	80062d4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800648a:	2032      	movs	r0, #50	; 0x32
 800648c:	f7ff ff06 	bl	800629c <__NVIC_EnableIRQ>

    SUBGRF_SetRegulatorMode();
 8006490:	f000 fe62 	bl	8007158 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8006494:	2100      	movs	r1, #0
 8006496:	2000      	movs	r0, #0
 8006498:	f001 f9dc 	bl	8007854 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800649c:	2204      	movs	r2, #4
 800649e:	2100      	movs	r1, #0
 80064a0:	2001      	movs	r0, #1
 80064a2:	f000 fff9 	bl	8007498 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_DONE | IRQ_SYNCWORD_VALID, IRQ_TX_DONE | IRQ_RX_DONE | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80064a6:	2300      	movs	r3, #0
 80064a8:	2200      	movs	r2, #0
 80064aa:	210b      	movs	r1, #11
 80064ac:	200b      	movs	r0, #11
 80064ae:	f000 ff28 	bl	8007302 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 80064b2:	2000      	movs	r0, #0
 80064b4:	f000 fe40 	bl	8007138 <SUBGRF_SetStopRxTimerOnPreambleDetect>

    embenetRadioDescr.packetParams.PacketType = PACKET_TYPE_GFSK;
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	731a      	strb	r2, [r3, #12]

    SUBGRF_SetPacketType(embenetRadioDescr.packetParams.PacketType);
 80064be:	4b23      	ldr	r3, [pc, #140]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 80064c0:	7b1b      	ldrb	r3, [r3, #12]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 ffc2 	bl	800744c <SUBGRF_SetPacketType>

    uint8_t syncWordBuffer[8] = {(uint8_t)(SYNC_WORD >> 8U), (uint8_t)(SYNC_WORD)};
 80064c8:	f644 6390 	movw	r3, #20112	; 0x4e90
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	2300      	movs	r3, #0
 80064d0:	623b      	str	r3, [r7, #32]
    SUBGRF_SetSyncWord(syncWordBuffer);
 80064d2:	f107 031c 	add.w	r3, r7, #28
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fd2e 	bl	8006f38 <SUBGRF_SetSyncWord>


    ModulationParams_t modulationParams;
    modulationParams.PacketType                    = PACKET_TYPE_GFSK;
 80064dc:	2300      	movs	r3, #0
 80064de:	703b      	strb	r3, [r7, #0]
    modulationParams.Params.Gfsk.BitRate           = BITRATE;
 80064e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064e4:	607b      	str	r3, [r7, #4]
    modulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_OFF;
 80064e6:	2300      	movs	r3, #0
 80064e8:	733b      	strb	r3, [r7, #12]
    modulationParams.Params.Gfsk.Bandwidth         = getFskBandwidthRegValue(Bandwidth);
 80064ea:	481a      	ldr	r0, [pc, #104]	; (8006554 <EMBENET_RADIO_Init+0x124>)
 80064ec:	f000 f978 	bl	80067e0 <getFskBandwidthRegValue>
 80064f0:	4603      	mov	r3, r0
 80064f2:	737b      	strb	r3, [r7, #13]
    modulationParams.Params.Gfsk.Fdev              = FREQ_DEVIATION;
 80064f4:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80064f8:	60bb      	str	r3, [r7, #8]
    SUBGRF_SetModulationParams(&modulationParams);
 80064fa:	463b      	mov	r3, r7
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 f831 	bl	8007564 <SUBGRF_SetModulationParams>

    embenetRadioDescr.packetParams.Params.Gfsk.PreambleLength    = PREAMBLE_LENGTH_BITS;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006504:	2240      	movs	r2, #64	; 0x40
 8006506:	81da      	strh	r2, [r3, #14]
    embenetRadioDescr.packetParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_16_BITS;
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 800650a:	2205      	movs	r2, #5
 800650c:	741a      	strb	r2, [r3, #16]
    embenetRadioDescr.packetParams.Params.Gfsk.SyncWordLength    = SYNCWORD_LENGTH_BITS;
 800650e:	4b0f      	ldr	r3, [pc, #60]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006510:	2210      	movs	r2, #16
 8006512:	745a      	strb	r2, [r3, #17]
    embenetRadioDescr.packetParams.Params.Gfsk.AddrComp          = RADIO_ADDRESSCOMP_FILT_OFF;
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006516:	2200      	movs	r2, #0
 8006518:	749a      	strb	r2, [r3, #18]
    embenetRadioDescr.packetParams.Params.Gfsk.HeaderType        = RADIO_PACKET_VARIABLE_LENGTH;
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 800651c:	2201      	movs	r2, #1
 800651e:	74da      	strb	r2, [r3, #19]
    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength     = EMBENET_RADIO_MAX_PSDU_LENGTH;
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006522:	22c0      	movs	r2, #192	; 0xc0
 8006524:	751a      	strb	r2, [r3, #20]
    embenetRadioDescr.packetParams.Params.Gfsk.CrcLength         = RADIO_CRC_2_BYTES_CCIT;
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 8006528:	22f2      	movs	r2, #242	; 0xf2
 800652a:	755a      	strb	r2, [r3, #21]
    embenetRadioDescr.packetParams.Params.Gfsk.DcFree            = RADIO_DC_FREEWHITENING;
 800652c:	4b07      	ldr	r3, [pc, #28]	; (800654c <EMBENET_RADIO_Init+0x11c>)
 800652e:	2201      	movs	r2, #1
 8006530:	759a      	strb	r2, [r3, #22]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 8006532:	4809      	ldr	r0, [pc, #36]	; (8006558 <EMBENET_RADIO_Init+0x128>)
 8006534:	f001 f8f0 	bl	8007718 <SUBGRF_SetPacketParams>

    // Fall-back mode after successfull packet transmission or packet reception
    // 0x20 - Standby mode entry (default)
    // 0x30 - Standby with HSE32 enabled mode entry
    // 0x40 - FS mode entry
    SUBGRF_SetRxTxFallbackMode(0x40);
 8006538:	2040      	movs	r0, #64	; 0x40
 800653a:	f000 fed3 	bl	80072e4 <SUBGRF_SetRxTxFallbackMode>

    EMBENET_RADIO_Idle();
 800653e:	f000 f823 	bl	8006588 <EMBENET_RADIO_Idle>

    return EMBENET_RADIO_STATUS_SUCCESS;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3748      	adds	r7, #72	; 0x48
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000d10 	.word	0x20000d10
 8006550:	20000d04 	.word	0x20000d04
 8006554:	000186a0 	.word	0x000186a0
 8006558:	20000d1c 	.word	0x20000d1c

0800655c <EMBENET_RADIO_SetCallbacks>:

void EMBENET_RADIO_SetCallbacks(EMBENET_RADIO_CaptureCbt onStartFrame, EMBENET_RADIO_CaptureCbt onEndFrame, void* cbtContext) {
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
    embenetRadioDescr.onFrameStart    = onStartFrame;
 8006568:	4a06      	ldr	r2, [pc, #24]	; (8006584 <EMBENET_RADIO_SetCallbacks+0x28>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6013      	str	r3, [r2, #0]
    embenetRadioDescr.onFrameEnd      = onEndFrame;
 800656e:	4a05      	ldr	r2, [pc, #20]	; (8006584 <EMBENET_RADIO_SetCallbacks+0x28>)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6053      	str	r3, [r2, #4]
    embenetRadioDescr.handlersContext = cbtContext;
 8006574:	4a03      	ldr	r2, [pc, #12]	; (8006584 <EMBENET_RADIO_SetCallbacks+0x28>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6093      	str	r3, [r2, #8]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	20000d10 	.word	0x20000d10

08006588 <EMBENET_RADIO_Idle>:
void EMBENET_RADIO_Deinit(void) {
    embenetRadioDescr.onFrameStart = NULL;
    embenetRadioDescr.onFrameEnd   = NULL;
}

EMBENET_RADIO_Status EMBENET_RADIO_Idle(void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
    SUBGRF_SetFs();
 800658c:	f000 fd86 	bl	800709c <SUBGRF_SetFs>

    // SUBGRF_SetStandby(STDBY_RC);
    SUBGRF_SetStandby(STDBY_XOSC);
 8006590:	2001      	movs	r0, #1
 8006592:	f000 fd67 	bl	8007064 <SUBGRF_SetStandby>


    return EMBENET_RADIO_STATUS_SUCCESS;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	bd80      	pop	{r7, pc}

0800659c <EMBENET_RADIO_TxEnable>:

EMBENET_RADIO_Status EMBENET_RADIO_TxEnable(EMBENET_RADIO_Channel channel, EMBENET_RADIO_Power txp, uint8_t const* psdu, size_t psduLen) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60ba      	str	r2, [r7, #8]
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	4603      	mov	r3, r0
 80065a8:	73fb      	strb	r3, [r7, #15]
 80065aa:	460b      	mov	r3, r1
 80065ac:	73bb      	strb	r3, [r7, #14]
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80065ae:	2300      	movs	r3, #0
 80065b0:	2200      	movs	r2, #0
 80065b2:	f240 2101 	movw	r1, #513	; 0x201
 80065b6:	f240 2001 	movw	r0, #513	; 0x201
 80065ba:	f000 fea2 	bl	8007302 <SUBGRF_SetDioIrqParams>
    setPower(txp);
 80065be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f8f0 	bl	80067a8 <setPower>
    SUBGRF_SetRfFrequency(calculateFrequency(channel));
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff1a 	bl	8006404 <calculateFrequency>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fef0 	bl	80073b8 <SUBGRF_SetRfFrequency>

    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength = (uint8_t)psduLen;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b08      	ldr	r3, [pc, #32]	; (8006600 <EMBENET_RADIO_TxEnable+0x64>)
 80065de:	751a      	strb	r2, [r3, #20]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 80065e0:	4808      	ldr	r0, [pc, #32]	; (8006604 <EMBENET_RADIO_TxEnable+0x68>)
 80065e2:	f001 f899 	bl	8007718 <SUBGRF_SetPacketParams>

    // warning suppress with casting
    SUBGRF_WriteBuffer(0x00, (uint8_t*)psdu, (uint8_t)psduLen);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	2000      	movs	r0, #0
 80065f0:	f001 fa16 	bl	8007a20 <SUBGRF_WriteBuffer>
    return EMBENET_RADIO_STATUS_SUCCESS;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000d10 	.word	0x20000d10
 8006604:	20000d1c 	.word	0x20000d1c

08006608 <EMBENET_RADIO_TxNow>:

EMBENET_RADIO_Status EMBENET_RADIO_TxNow(void) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
    EMBENET_TimeUs timestamp = EMBENET_TIMER_ReadCounter() + TxStartOffset;
 800660e:	f000 fc13 	bl	8006e38 <EMBENET_TIMER_ReadCounter>
 8006612:	4603      	mov	r3, r0
 8006614:	33c8      	adds	r3, #200	; 0xc8
 8006616:	607b      	str	r3, [r7, #4]


    SUBGRF_SetTx(0);
 8006618:	2000      	movs	r0, #0
 800661a:	f000 fd4d 	bl	80070b8 <SUBGRF_SetTx>

    if (embenetRadioDescr.onFrameStart) {
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <EMBENET_RADIO_TxNow+0x38>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d006      	beq.n	8006634 <EMBENET_RADIO_TxNow+0x2c>
        embenetRadioDescr.onFrameStart(embenetRadioDescr.handlersContext, timestamp);
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <EMBENET_RADIO_TxNow+0x38>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a05      	ldr	r2, [pc, #20]	; (8006640 <EMBENET_RADIO_TxNow+0x38>)
 800662c:	6892      	ldr	r2, [r2, #8]
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
    }


    return EMBENET_RADIO_STATUS_SUCCESS;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000d10 	.word	0x20000d10

08006644 <EMBENET_RADIO_RxEnable>:

EMBENET_RADIO_Status EMBENET_RADIO_RxEnable(EMBENET_RADIO_Channel channel) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
    embenetRadioDescr.frameReady      = false;
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <EMBENET_RADIO_RxEnable+0x48>)
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2020 	strb.w	r2, [r3, #32]
    embenetRadioDescr.frameCrcIsValid = false;
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <EMBENET_RADIO_RxEnable+0x48>)
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength = (uint8_t)EMBENET_RADIO_MAX_PSDU_LENGTH;
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <EMBENET_RADIO_RxEnable+0x48>)
 8006660:	22c0      	movs	r2, #192	; 0xc0
 8006662:	751a      	strb	r2, [r3, #20]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 8006664:	480a      	ldr	r0, [pc, #40]	; (8006690 <EMBENET_RADIO_RxEnable+0x4c>)
 8006666:	f001 f857 	bl	8007718 <SUBGRF_SetPacketParams>
    SUBGRF_SetSwitch(0, RFSWITCH_RX);
 800666a:	2100      	movs	r1, #0
 800666c:	2000      	movs	r0, #0
 800666e:	f001 fa2b 	bl	8007ac8 <SUBGRF_SetSwitch>
    SUBGRF_SetRfFrequency(calculateFrequency(channel));
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff fec5 	bl	8006404 <calculateFrequency>
 800667a:	4603      	mov	r3, r0
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fe9b 	bl	80073b8 <SUBGRF_SetRfFrequency>
    return EMBENET_RADIO_STATUS_SUCCESS;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000d10 	.word	0x20000d10
 8006690:	20000d1c 	.word	0x20000d1c

08006694 <EMBENET_RADIO_RxNow>:

EMBENET_RADIO_Status EMBENET_RADIO_RxNow(void) {
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
    /* Radio IRQ is set to DIO1 by default */
    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_SYNCWORD_VALID | IRQ_CRC_ERROR, IRQ_RX_DONE | IRQ_SYNCWORD_VALID | IRQ_CRC_ERROR, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8006698:	2300      	movs	r3, #0
 800669a:	2200      	movs	r2, #0
 800669c:	214a      	movs	r1, #74	; 0x4a
 800669e:	204a      	movs	r0, #74	; 0x4a
 80066a0:	f000 fe2f 	bl	8007302 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetRx(0xFFFFFF);
 80066a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80066a8:	f000 fd26 	bl	80070f8 <SUBGRF_SetRx>

    return EMBENET_RADIO_STATUS_SUCCESS;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <EMBENET_RADIO_GetReceivedFrame>:

EMBENET_RADIO_RxInfo EMBENET_RADIO_GetReceivedFrame(uint8_t* buffer, size_t bufferLength) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
    EMBENET_RADIO_RxInfo info = {.crcValid = false, .lqi = 0, .mpduLength = 0, .rssi = INT8_MIN};
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80066cc:	2300      	movs	r3, #0
 80066ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80066d2:	2300      	movs	r3, #0
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (embenetRadioDescr.frameReady) {
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 80066d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d04a      	beq.n	8006776 <EMBENET_RADIO_GetReceivedFrame+0xc2>
        PacketStatus_t radioPktStatus;
        SUBGRF_GetPacketStatus(&radioPktStatus);
 80066e0:	f107 0318 	add.w	r3, r7, #24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f8f9 	bl	80078dc <SUBGRF_GetPacketStatus>
        info.lqi      = radioPktStatus.Params.Gfsk.RxStatus;
 80066ea:	7f3b      	ldrb	r3, [r7, #28]
 80066ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        info.rssi     = radioPktStatus.Params.Gfsk.RssiAvg;
 80066f0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80066f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        info.crcValid = embenetRadioDescr.frameCrcIsValid;
 80066f8:	4b25      	ldr	r3, [pc, #148]	; (8006790 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 80066fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t offset = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]
        uint8_t length = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	75bb      	strb	r3, [r7, #22]
        SUBGRF_GetRxBufferStatus(&length, &offset);
 800670a:	f107 0217 	add.w	r2, r7, #23
 800670e:	f107 0316 	add.w	r3, r7, #22
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f8b5 	bl	8007884 <SUBGRF_GetRxBufferStatus>
        info.mpduLength = length;
 800671a:	7dbb      	ldrb	r3, [r7, #22]
 800671c:	633b      	str	r3, [r7, #48]	; 0x30

        uint8_t bytesCountToCopy = length; // best case, no error
 800671e:	7dbb      	ldrb	r3, [r7, #22]
 8006720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (length > EMBENET_RADIO_MAX_PSDU_LENGTH) {
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	2bc0      	cmp	r3, #192	; 0xc0
 8006728:	d905      	bls.n	8006736 <EMBENET_RADIO_GetReceivedFrame+0x82>
            // frame too long
            info.crcValid    = false;
 800672a:	2300      	movs	r3, #0
 800672c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            bytesCountToCopy = EMBENET_RADIO_MAX_PSDU_LENGTH;
 8006730:	23c0      	movs	r3, #192	; 0xc0
 8006732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (length > bufferLength) {
 8006736:	7dbb      	ldrb	r3, [r7, #22]
 8006738:	461a      	mov	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4293      	cmp	r3, r2
 800673e:	d205      	bcs.n	800674c <EMBENET_RADIO_GetReceivedFrame+0x98>
            // frame wont fit into buffer
            info.crcValid    = false;
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            bytesCountToCopy = (uint8_t)bufferLength; // uint8_t overflow not possible
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (length < EMBENET_RADIO_MIN_PSDU_LENGTH) {
 800674c:	7dbb      	ldrb	r3, [r7, #22]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <EMBENET_RADIO_GetReceivedFrame+0xa4>
            // frame too short
            info.crcValid = false;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        SUBGRF_ReadBuffer(offset, buffer, bytesCountToCopy);
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f001 f973 	bl	8007a4c <SUBGRF_ReadBuffer>
        // no buffering, frame may be obtained only once
        embenetRadioDescr.frameReady      = false;
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2020 	strb.w	r2, [r3, #32]
        embenetRadioDescr.frameCrcIsValid = false;
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    return info;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	461a      	mov	r2, r3
 800677a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800677e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006782:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	3738      	adds	r7, #56	; 0x38
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000d10 	.word	0x20000d10

08006794 <EMBENET_RADIO_GetCapabilities>:
        default: return EMBENET_RADIO_STATUS_GENERAL_ERROR;
    }
    return EMBENET_RADIO_STATUS_SUCCESS;
}

EMBENET_RADIO_Capabilities const* EMBENET_RADIO_GetCapabilities(void) {
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
                                                 .rxDelay         = RxDelay,
                                                 .txRxStartDelay  = RxStartOffset,
                                                 .sensitivity     = Sensitivity,
                                                 .maxOutputPower  = MaxTxp,
                                                 .minOutputPower  = MinTxp};
    return &timings;
 8006798:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <EMBENET_RADIO_GetCapabilities+0x10>)
}
 800679a:	4618      	mov	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000014 	.word	0x20000014

080067a8 <setPower>:


static void setPower(EMBENET_RADIO_Power powerDbm) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect = SUBGRF_SetRfTxPower((int8_t)(powerDbm + EMBENET_NODE_BSP_GetTxOffset()));
 80067b2:	f7ff fb7f 	bl	8005eb4 <EMBENET_NODE_BSP_GetTxOffset>
 80067b6:	4603      	mov	r3, r0
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	4413      	add	r3, r2
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f9a8 	bl	8007b18 <SUBGRF_SetRfTxPower>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch(paSelect, RFSWITCH_TX);
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2101      	movs	r1, #1
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f979 	bl	8007ac8 <SUBGRF_SetSwitch>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <getFskBandwidthRegValue>:

static uint8_t getFskBandwidthRegValue(uint32_t bandwidth) {
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (bandwidth == 0) {
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <getFskBandwidthRegValue+0x12>
        return (0x1FU);
 80067ee:	231f      	movs	r3, #31
 80067f0:	e023      	b.n	800683a <getFskBandwidthRegValue+0x5a>
    }
    uint32_t delta = 1;
 80067f2:	2301      	movs	r3, #1
 80067f4:	60bb      	str	r3, [r7, #8]
    while (delta < 20000) {
 80067f6:	e01a      	b.n	800682e <getFskBandwidthRegValue+0x4e>
        for (i = 0; i < (sizeof(fskBandwidths) / sizeof(FskBandwidth)); i++) {
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e011      	b.n	8006822 <getFskBandwidthRegValue+0x42>
            if (bandwidth - fskBandwidths[i].bandwidth < delta) {
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <getFskBandwidthRegValue+0x64>)
 8006802:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	429a      	cmp	r2, r3
 800680e:	d905      	bls.n	800681c <getFskBandwidthRegValue+0x3c>
                return fskBandwidths[i].RegValue;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	4a0c      	ldr	r2, [pc, #48]	; (8006844 <getFskBandwidthRegValue+0x64>)
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4413      	add	r3, r2
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	e00e      	b.n	800683a <getFskBandwidthRegValue+0x5a>
        for (i = 0; i < (sizeof(fskBandwidths) / sizeof(FskBandwidth)); i++) {
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	3301      	adds	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b15      	cmp	r3, #21
 8006826:	d9ea      	bls.n	80067fe <getFskBandwidthRegValue+0x1e>
            }
        }
        delta++;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
    while (delta < 20000) {
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006834:	4293      	cmp	r3, r2
 8006836:	d9df      	bls.n	80067f8 <getFskBandwidthRegValue+0x18>
    }
    return 0x1FU;
 8006838:	231f      	movs	r3, #31
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	0801a674 	.word	0x0801a674

08006848 <SUBGHZ_Radio_IRQHandler>:


void SUBGHZ_Radio_IRQHandler(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
    EMBENET_TimeUs timestamp = EMBENET_TIMER_ReadCounter();
 800684e:	f000 faf3 	bl	8006e38 <EMBENET_TIMER_ReadCounter>
 8006852:	6078      	str	r0, [r7, #4]

    uint8_t tmpisr[2];
    // Retrieve Interrupts from SUBGHZ Irq Register
    (void)HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8006854:	463a      	mov	r2, r7
 8006856:	2302      	movs	r3, #2
 8006858:	2112      	movs	r1, #18
 800685a:	483d      	ldr	r0, [pc, #244]	; (8006950 <SUBGHZ_Radio_IRQHandler+0x108>)
 800685c:	f7fd fec6 	bl	80045ec <HAL_SUBGHZ_ExecGetCmd>

    uint16_t itsource = (uint16_t)((tmpisr[0] << 8) | tmpisr[1]);
 8006860:	783b      	ldrb	r3, [r7, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	b21a      	sxth	r2, r3
 8006866:	787b      	ldrb	r3, [r7, #1]
 8006868:	b21b      	sxth	r3, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	b21b      	sxth	r3, r3
 800686e:	807b      	strh	r3, [r7, #2]
    (void)HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006870:	463a      	mov	r2, r7
 8006872:	2302      	movs	r3, #2
 8006874:	2102      	movs	r1, #2
 8006876:	4836      	ldr	r0, [pc, #216]	; (8006950 <SUBGHZ_Radio_IRQHandler+0x108>)
 8006878:	f7fd fe59 	bl	800452e <HAL_SUBGHZ_ExecSetCmd>


    // sync word detection has an utmost priority
    if (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID)) {
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00e      	beq.n	80068a4 <SUBGHZ_Radio_IRQHandler+0x5c>
        if (embenetRadioDescr.onFrameStart != NULL) {
 8006886:	4b33      	ldr	r3, [pc, #204]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <SUBGHZ_Radio_IRQHandler+0x5c>
            timestamp = timestamp - (EMBENET_TimeUs)RxStartOffset;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8006894:	607b      	str	r3, [r7, #4]
            embenetRadioDescr.onFrameStart(embenetRadioDescr.handlersContext, timestamp);
 8006896:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 800689c:	6892      	ldr	r2, [r2, #8]
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
        }
    }
    if (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT)) {
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <SUBGHZ_Radio_IRQHandler+0x7c>
        if (embenetRadioDescr.onFrameEnd != NULL) {
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d006      	beq.n	80068c4 <SUBGHZ_Radio_IRQHandler+0x7c>
            embenetRadioDescr.onFrameEnd(embenetRadioDescr.handlersContext, timestamp);
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	4a26      	ldr	r2, [pc, #152]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 80068bc:	6892      	ldr	r2, [r2, #8]
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
        }
    }
    if ((SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR)) || (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT))) {
 80068c4:	887b      	ldrh	r3, [r7, #2]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <SUBGHZ_Radio_IRQHandler+0x90>
 80068ce:	887b      	ldrh	r3, [r7, #2]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d036      	beq.n	8006946 <SUBGHZ_Radio_IRQHandler+0xfe>
        if (false == embenetRadioDescr.frameReady) {
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 80068da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068de:	f083 0301 	eor.w	r3, r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02e      	beq.n	8006946 <SUBGHZ_Radio_IRQHandler+0xfe>
            embenetRadioDescr.frameCrcIsValid = (RESET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR));
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf0c      	ite	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	2300      	movne	r3, #0
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 80068fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            embenetRadioDescr.frameReady      = true;
 80068fe:	4b15      	ldr	r3, [pc, #84]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2020 	strb.w	r2, [r3, #32]

            if (embenetRadioDescr.onFrameEnd != NULL) {
 8006906:	4b13      	ldr	r3, [pc, #76]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <SUBGHZ_Radio_IRQHandler+0xda>
                timestamp = timestamp - (EMBENET_TimeUs)RxEndOffset;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b46      	subs	r3, #70	; 0x46
 8006912:	607b      	str	r3, [r7, #4]
                embenetRadioDescr.onFrameEnd(embenetRadioDescr.handlersContext, timestamp);
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <SUBGHZ_Radio_IRQHandler+0x10c>)
 800691a:	6892      	ldr	r2, [r2, #8]
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4610      	mov	r0, r2
 8006920:	4798      	blx	r3
            }
            // WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2
            // datasheet chapter 15.3 RegRtcControl = @address 0x0902
            SUBGRF_WriteRegister(0x0902, 0x00);
 8006922:	2100      	movs	r1, #0
 8006924:	f640 1002 	movw	r0, #2306	; 0x902
 8006928:	f001 f82a 	bl	8007980 <SUBGRF_WriteRegister>
            // RegEventMask = @address 0x0944
            SUBGRF_WriteRegister(0x0944, SUBGRF_ReadRegister(0x0944) | (1 << 1));
 800692c:	f640 1044 	movw	r0, #2372	; 0x944
 8006930:	f001 f83a 	bl	80079a8 <SUBGRF_ReadRegister>
 8006934:	4603      	mov	r3, r0
 8006936:	f043 0302 	orr.w	r3, r3, #2
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	f640 1044 	movw	r0, #2372	; 0x944
 8006942:	f001 f81d 	bl	8007980 <SUBGRF_WriteRegister>
            // WORKAROUND END
        }
    }
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000d04 	.word	0x20000d04
 8006954:	20000d10 	.word	0x20000d10

08006958 <EMBENET_RANDOM_Get>:
#include "radio_driver.h"

#pragma GCC diagnostic pop


uint32_t EMBENET_RANDOM_Get(void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
    // Get random value from radio transceiver. This function is guaranteed to be invoked AFTER radio initialization
    return SUBGRF_GetRandom(); 
 800695c:	f000 fb3b 	bl	8006fd6 <SUBGRF_GetRandom>
 8006960:	4603      	mov	r3, r0
}
 8006962:	4618      	mov	r0, r3
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <__NVIC_GetPriorityGrouping>:
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <__NVIC_GetPriorityGrouping+0x18>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	f003 0307 	and.w	r3, r3, #7
}
 8006976:	4618      	mov	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000ed00 	.word	0xe000ed00

08006984 <__NVIC_EnableIRQ>:
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800698e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006992:	2b00      	cmp	r3, #0
 8006994:	db0b      	blt.n	80069ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	f003 021f 	and.w	r2, r3, #31
 800699c:	4906      	ldr	r1, [pc, #24]	; (80069b8 <__NVIC_EnableIRQ+0x34>)
 800699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	2001      	movs	r0, #1
 80069a6:	fa00 f202 	lsl.w	r2, r0, r2
 80069aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	e000e100 	.word	0xe000e100

080069bc <__NVIC_ClearPendingIRQ>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db0c      	blt.n	80069e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	f003 021f 	and.w	r2, r3, #31
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <__NVIC_ClearPendingIRQ+0x38>)
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2001      	movs	r0, #1
 80069de:	fa00 f202 	lsl.w	r2, r0, r2
 80069e2:	3360      	adds	r3, #96	; 0x60
 80069e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	e000e100 	.word	0xe000e100

080069f8 <__NVIC_SetPriority>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db0a      	blt.n	8006a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	490c      	ldr	r1, [pc, #48]	; (8006a44 <__NVIC_SetPriority+0x4c>)
 8006a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a16:	0112      	lsls	r2, r2, #4
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a20:	e00a      	b.n	8006a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4908      	ldr	r1, [pc, #32]	; (8006a48 <__NVIC_SetPriority+0x50>)
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	0112      	lsls	r2, r2, #4
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	440b      	add	r3, r1
 8006a36:	761a      	strb	r2, [r3, #24]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	e000e100 	.word	0xe000e100
 8006a48:	e000ed00 	.word	0xe000ed00

08006a4c <NVIC_EncodePriority>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f1c3 0307 	rsb	r3, r3, #7
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf28      	it	cs
 8006a6a:	2304      	movcs	r3, #4
 8006a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3304      	adds	r3, #4
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d902      	bls.n	8006a7c <NVIC_EncodePriority+0x30>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3b03      	subs	r3, #3
 8006a7a:	e000      	b.n	8006a7e <NVIC_EncodePriority+0x32>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43da      	mvns	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	401a      	ands	r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a94:	f04f 31ff 	mov.w	r1, #4294967295
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	43d9      	mvns	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aa4:	4313      	orrs	r3, r2
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <LL_APB1_GRP1_EnableClock>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006acc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <LL_TIM_EnableCounter>:
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f043 0201 	orr.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <LL_TIM_DisableARRPreload>:
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <LL_TIM_GetCounter>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
	...

08006b34 <LL_TIM_OC_DisableFast>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d028      	beq.n	8006b96 <LL_TIM_OC_DisableFast+0x62>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d023      	beq.n	8006b92 <LL_TIM_OC_DisableFast+0x5e>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d01e      	beq.n	8006b8e <LL_TIM_OC_DisableFast+0x5a>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d019      	beq.n	8006b8a <LL_TIM_OC_DisableFast+0x56>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5c:	d013      	beq.n	8006b86 <LL_TIM_OC_DisableFast+0x52>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d00d      	beq.n	8006b82 <LL_TIM_OC_DisableFast+0x4e>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6c:	d007      	beq.n	8006b7e <LL_TIM_OC_DisableFast+0x4a>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b74:	d101      	bne.n	8006b7a <LL_TIM_OC_DisableFast+0x46>
 8006b76:	2307      	movs	r3, #7
 8006b78:	e00e      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	e00c      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b7e:	2306      	movs	r3, #6
 8006b80:	e00a      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b82:	2305      	movs	r3, #5
 8006b84:	e008      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b86:	2304      	movs	r3, #4
 8006b88:	e006      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e004      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e002      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <LL_TIM_OC_DisableFast+0x64>
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <LL_TIM_OC_DisableFast+0x98>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	4907      	ldr	r1, [pc, #28]	; (8006bd0 <LL_TIM_OC_DisableFast+0x9c>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	408b      	lsls	r3, r1
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	401a      	ands	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	0801a724 	.word	0x0801a724
 8006bd0:	0801a730 	.word	0x0801a730

08006bd4 <LL_TIM_OC_SetCompareCH1>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <LL_TIM_SetClockSource>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006c00:	f023 0307 	bic.w	r3, r3, #7
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <LL_TIM_SetTriggerOutput>:
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <LL_TIM_DisableMasterSlaveMode>:
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <LL_TIM_ClearFlag_CC1>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f06f 0202 	mvn.w	r2, #2
 8006c66:	611a      	str	r2, [r3, #16]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr

08006c72 <LL_TIM_IsActiveFlag_CC1>:
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d101      	bne.n	8006c8a <LL_TIM_IsActiveFlag_CC1+0x18>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <LL_TIM_IsActiveFlag_CC1+0x1a>
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <LL_TIM_EnableIT_CC1>:
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f043 0202 	orr.w	r2, r3, #2
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <LL_TIM_DisableIT_CC1>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f023 0202 	bic.w	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <LL_TIM_GenerateEvent_CC1>:
  * @rmtoll EGR          CC1G          LL_TIM_GenerateEvent_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	615a      	str	r2, [r3, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <EMBENET_TIMER_Init>:
};

static EMBENET_TIMER_CompareCallback callback;
static void*                         callbackContext;

void EMBENET_TIMER_Init(EMBENET_TIMER_CompareCallback compareCallback, void* context) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b096      	sub	sp, #88	; 0x58
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    LL_TIM_DeInit(TIM2); // Make sure the timer is deinitialized and reset to default values
 8006cfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006cfe:	f7fe fd07 	bl	8005710 <LL_TIM_DeInit>

    callback        = compareCallback;
 8006d02:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <EMBENET_TIMER_Init+0xdc>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6013      	str	r3, [r2, #0]
    callbackContext = context;
 8006d08:	4a31      	ldr	r2, [pc, #196]	; (8006dd0 <EMBENET_TIMER_Init+0xe0>)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6013      	str	r3, [r2, #0]

    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8006d0e:	2001      	movs	r0, #1
 8006d10:	f7ff fece 	bl	8006ab0 <LL_APB1_GRP1_EnableClock>
    NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), INTERRUPT_PRIORITY_TIMER, INTERRUPT_SUBPRIORITY_TIMER));
 8006d14:	f7ff fe28 	bl	8006968 <__NVIC_GetPriorityGrouping>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	2103      	movs	r1, #3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fe94 	bl	8006a4c <NVIC_EncodePriority>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4619      	mov	r1, r3
 8006d28:	201b      	movs	r0, #27
 8006d2a:	f7ff fe65 	bl	80069f8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8006d2e:	201b      	movs	r0, #27
 8006d30:	f7ff fe28 	bl	8006984 <__NVIC_EnableIRQ>

    LL_RCC_ClocksTypeDef clocks;
    LL_RCC_GetSystemClocksFreq(&clocks);
 8006d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe f9ec 	bl	8005116 <LL_RCC_GetSystemClocksFreq>
    LL_TIM_InitTypeDef TIM_InitStruct = {.CounterMode       = LL_TIM_COUNTERMODE_UP,
                                         .Prescaler         = (uint16_t)(clocks.SYSCLK_Frequency / TICKS_PER_S - 1U),
 8006d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d40:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <EMBENET_TIMER_Init+0xe4>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	0bdb      	lsrs	r3, r3, #15
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29b      	uxth	r3, r3
    LL_TIM_InitTypeDef TIM_InitStruct = {.CounterMode       = LL_TIM_COUNTERMODE_UP,
 8006d4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d50:	2300      	movs	r3, #0
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
 8006d54:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d5e:	2300      	movs	r3, #0
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
                                         .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
                                         .Autoreload        = (0xFFFFFFFFU >> 3U),
                                         .RepetitionCounter = 0};
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8006d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d66:	4619      	mov	r1, r3
 8006d68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006d6c:	f7fe fd16 	bl	800579c <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM2);
 8006d70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006d74:	f7ff fec3 	bl	8006afe <LL_TIM_DisableARRPreload>
    LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006d7e:	f7ff ff36 	bl	8006bee <LL_TIM_SetClockSource>

    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {.OCMode = LL_TIM_OCMODE_FROZEN, .OCState = LL_TIM_OCSTATE_DISABLE, .CompareValue = 0, .OCPolarity = LL_TIM_OCPOLARITY_HIGH};
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	2220      	movs	r2, #32
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f012 f8f8 	bl	8018f80 <memset>
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	461a      	mov	r2, r3
 8006d96:	2101      	movs	r1, #1
 8006d98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006d9c:	f7fe fd5c 	bl	8005858 <LL_TIM_OC_Init>

    LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8006da0:	2101      	movs	r1, #1
 8006da2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006da6:	f7ff fec5 	bl	8006b34 <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8006daa:	2100      	movs	r1, #0
 8006dac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006db0:	f7ff ff31 	bl	8006c16 <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM2);
 8006db4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006db8:	f7ff ff3f 	bl	8006c3a <LL_TIM_DisableMasterSlaveMode>

    LL_TIM_EnableCounter(TIM2);
 8006dbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006dc0:	f7ff fe8e 	bl	8006ae0 <LL_TIM_EnableCounter>
}
 8006dc4:	bf00      	nop
 8006dc6:	3758      	adds	r7, #88	; 0x58
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000d34 	.word	0x20000d34
 8006dd0:	20000d38 	.word	0x20000d38
 8006dd4:	431bde83 	.word	0x431bde83

08006dd8 <EMBENET_TIMER_SetCompare>:
    LL_TIM_DeInit(TIM2);
    LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_TIM2);
}


void EMBENET_TIMER_SetCompare(EMBENET_TimeUs compareValue) {
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    EMBENET_CRITICAL_SECTION_Enter();
 8006de0:	f7ff f9fc 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
    EMBENET_TimeUs currentValue = EMBENET_TIMER_ReadCounter();
 8006de4:	f000 f828 	bl	8006e38 <EMBENET_TIMER_ReadCounter>
 8006de8:	60f8      	str	r0, [r7, #12]
    LL_TIM_EnableIT_CC1(TIM2);
 8006dea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006dee:	f7ff ff52 	bl	8006c96 <LL_TIM_EnableIT_CC1>
    LL_TIM_ClearFlag_CC1(TIM2);
 8006df2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006df6:	f7ff ff2f 	bl	8006c58 <LL_TIM_ClearFlag_CC1>
    NVIC_ClearPendingIRQ(TIM2_IRQn);
 8006dfa:	201b      	movs	r0, #27
 8006dfc:	f7ff fdde 	bl	80069bc <__NVIC_ClearPendingIRQ>
    if ((EMBENET_TimeUs)(compareValue - SET_COMPARE_GUARD_US - currentValue) < (EMBENET_TimeUs)(EMBENET_TIMER_GetMaxCompareDuration())) {
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f1a3 0414 	sub.w	r4, r3, #20
 8006e0a:	f000 f81f 	bl	8006e4c <EMBENET_TIMER_GetMaxCompareDuration>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	429c      	cmp	r4, r3
 8006e12:	d207      	bcs.n	8006e24 <EMBENET_TIMER_SetCompare+0x4c>
        LL_TIM_OC_SetCompareCH1(TIM2, compareValue / US_PER_TICK);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e1e:	f7ff fed9 	bl	8006bd4 <LL_TIM_OC_SetCompareCH1>
 8006e22:	e003      	b.n	8006e2c <EMBENET_TIMER_SetCompare+0x54>
    } else {
        // compareValue is too close to current value and timer will be late, interrupt is triggered immediately
        LL_TIM_GenerateEvent_CC1(TIM2);
 8006e24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e28:	f7ff ff53 	bl	8006cd2 <LL_TIM_GenerateEvent_CC1>
    }
    EMBENET_CRITICAL_SECTION_Exit();
 8006e2c:	f7ff f9f6 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <EMBENET_TIMER_ReadCounter>:


EMBENET_TimeUs EMBENET_TIMER_ReadCounter(void) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
    return (LL_TIM_GetCounter(TIM2) * US_PER_TICK);
 8006e3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e40:	f7ff fe6c 	bl	8006b1c <LL_TIM_GetCounter>
 8006e44:	4603      	mov	r3, r0
 8006e46:	00db      	lsls	r3, r3, #3
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <EMBENET_TIMER_GetMaxCompareDuration>:


EMBENET_TimeUs EMBENET_TIMER_GetMaxCompareDuration(void) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
    return (EMBENET_TimeUs)0x7FFFFFFFU;
 8006e50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_CC1(TIM2)) {
 8006e60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e64:	f7ff ff05 	bl	8006c72 <LL_TIM_IsActiveFlag_CC1>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d011      	beq.n	8006e92 <TIM2_IRQHandler+0x36>
        LL_TIM_ClearFlag_CC1(TIM2);
 8006e6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e72:	f7ff fef1 	bl	8006c58 <LL_TIM_ClearFlag_CC1>
        LL_TIM_DisableIT_CC1(TIM2);
 8006e76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006e7a:	f7ff ff1b 	bl	8006cb4 <LL_TIM_DisableIT_CC1>

        if (callback != NULL) {
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <TIM2_IRQHandler+0x3c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <TIM2_IRQHandler+0x36>
            callback(callbackContext);
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <TIM2_IRQHandler+0x3c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <TIM2_IRQHandler+0x40>)
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
        }
    }
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000d34 	.word	0x20000d34
 8006e9c:	20000d38 	.word	0x20000d38

08006ea0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006eae:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <SUBGRF_Init+0x80>)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006eb4:	2002      	movs	r0, #2
 8006eb6:	f000 fe65 	bl	8007b84 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <SUBGRF_Init+0x84>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f000 f8cf 	bl	8007064 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006ec6:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <SUBGRF_Init+0x88>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <SUBGRF_Init+0x50>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006ece:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <SUBGRF_Init+0x8c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2140      	movs	r1, #64	; 0x40
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fa4e 	bl	8007376 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006eda:	2100      	movs	r1, #0
 8006edc:	f640 1011 	movw	r0, #2321	; 0x911
 8006ee0:	f000 fd4e 	bl	8007980 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006ee4:	237f      	movs	r3, #127	; 0x7f
 8006ee6:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006ee8:	7b38      	ldrb	r0, [r7, #12]
 8006eea:	f000 f94d 	bl	8007188 <SUBGRF_Calibrate>
 8006eee:	e00d      	b.n	8006f0c <SUBGRF_Init+0x6c>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <SUBGRF_Init+0x90>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f640 1011 	movw	r0, #2321	; 0x911
 8006efa:	f000 fd41 	bl	8007980 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <SUBGRF_Init+0x90>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	f640 1012 	movw	r0, #2322	; 0x912
 8006f08:	f000 fd3a 	bl	8007980 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006f0c:	f7fe ff9e 	bl	8005e4c <EMBENET_NODE_BSP_RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <SUBGRF_Init+0x94>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000d48 	.word	0x20000d48
 8006f24:	20000d44 	.word	0x20000d44
 8006f28:	0801a5dd 	.word	0x0801a5dd
 8006f2c:	0801a5d4 	.word	0x0801a5d4
 8006f30:	0801a5dc 	.word	0x0801a5dc
 8006f34:	20000d3c 	.word	0x20000d3c

08006f38 <SUBGRF_SetSyncWord>:
    SUBGRF_SetPayload( payload, size );
    SUBGRF_SetTx( timeout );
}

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006f40:	2208      	movs	r2, #8
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006f48:	f000 fd42 	bl	80079d0 <SUBGRF_WriteRegisters>
    return 0;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006f70:	f000 fa88 	bl	8007484 <SUBGRF_GetPacketType>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d108      	bne.n	8006f8c <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006f7a:	f107 030c 	add.w	r3, r7, #12
 8006f7e:	2202      	movs	r2, #2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006f86:	f000 fd23 	bl	80079d0 <SUBGRF_WriteRegisters>
            break;
 8006f8a:	e000      	b.n	8006f8e <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006f8c:	bf00      	nop
    }
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006fb0:	f000 fa68 	bl	8007484 <SUBGRF_GetPacketType>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d108      	bne.n	8006fcc <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f240 60be 	movw	r0, #1726	; 0x6be
 8006fc6:	f000 fd03 	bl	80079d0 <SUBGRF_WriteRegisters>
            break;
 8006fca:	e000      	b.n	8006fce <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006fcc:	bf00      	nop
    }
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006fe8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006fec:	f000 fcdc 	bl	80079a8 <SUBGRF_ReadRegister>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007002:	f000 fcbd 	bl	8007980 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8007006:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800700a:	f000 fccd 	bl	80079a8 <SUBGRF_ReadRegister>
 800700e:	4603      	mov	r3, r0
 8007010:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007012:	79bb      	ldrb	r3, [r7, #6]
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007020:	f000 fcae 	bl	8007980 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007024:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007028:	f000 f866 	bl	80070f8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800702c:	463b      	mov	r3, r7
 800702e:	2204      	movs	r2, #4
 8007030:	4619      	mov	r1, r3
 8007032:	f640 0019 	movw	r0, #2073	; 0x819
 8007036:	f000 fcdf 	bl	80079f8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800703a:	2000      	movs	r0, #0
 800703c:	f000 f812 	bl	8007064 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	4619      	mov	r1, r3
 8007044:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007048:	f000 fc9a 	bl	8007980 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800704c:	79bb      	ldrb	r3, [r7, #6]
 800704e:	4619      	mov	r1, r3
 8007050:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007054:	f000 fc94 	bl	8007980 <SUBGRF_WriteRegister>

    return number;
 8007058:	683b      	ldr	r3, [r7, #0]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	2201      	movs	r2, #1
 8007072:	4619      	mov	r1, r3
 8007074:	2080      	movs	r0, #128	; 0x80
 8007076:	f000 fcff 	bl	8007a78 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <SUBGRF_SetStandby+0x34>)
 8007082:	2201      	movs	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8007086:	e002      	b.n	800708e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <SUBGRF_SetStandby+0x34>)
 800708a:	2202      	movs	r2, #2
 800708c:	701a      	strb	r2, [r3, #0]
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000d3c 	.word	0x20000d3c

0800709c <SUBGRF_SetFs>:

void SUBGRF_SetFs( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	20c1      	movs	r0, #193	; 0xc1
 80070a6:	f000 fce7 	bl	8007a78 <SUBGRF_WriteCommand>
    OperatingMode = MODE_FS;
 80070aa:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <SUBGRF_SetFs+0x18>)
 80070ac:	2203      	movs	r2, #3
 80070ae:	701a      	strb	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000d3c 	.word	0x20000d3c

080070b8 <SUBGRF_SetTx>:

void SUBGRF_SetTx( uint32_t timeout )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <SUBGRF_SetTx+0x3c>)
 80070c2:	2204      	movs	r2, #4
 80070c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	2203      	movs	r2, #3
 80070e2:	4619      	mov	r1, r3
 80070e4:	2083      	movs	r0, #131	; 0x83
 80070e6:	f000 fcc7 	bl	8007a78 <SUBGRF_WriteCommand>
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000d3c 	.word	0x20000d3c

080070f8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <SUBGRF_SetRx+0x3c>)
 8007102:	2205      	movs	r2, #5
 8007104:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	b2db      	uxtb	r3, r3
 800710c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	b2db      	uxtb	r3, r3
 8007114:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800711c:	f107 030c 	add.w	r3, r7, #12
 8007120:	2203      	movs	r2, #3
 8007122:	4619      	mov	r1, r3
 8007124:	2082      	movs	r0, #130	; 0x82
 8007126:	f000 fca7 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000d3c 	.word	0x20000d3c

08007138 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8007142:	1dfb      	adds	r3, r7, #7
 8007144:	2201      	movs	r2, #1
 8007146:	4619      	mov	r1, r3
 8007148:	209f      	movs	r0, #159	; 0x9f
 800714a:	f000 fc95 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <SUBGRF_SetRegulatorMode+0x2c>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <SUBGRF_SetRegulatorMode+0x14>
    {
        mode = USE_DCDC ;
 8007166:	2301      	movs	r3, #1
 8007168:	71fb      	strb	r3, [r7, #7]
 800716a:	e001      	b.n	8007170 <SUBGRF_SetRegulatorMode+0x18>
    }
    else
    {
        mode = USE_LDO ;
 800716c:	2300      	movs	r3, #0
 800716e:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	2201      	movs	r2, #1
 8007174:	4619      	mov	r1, r3
 8007176:	2096      	movs	r0, #150	; 0x96
 8007178:	f000 fc7e 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	0801a5de 	.word	0x0801a5de

08007188 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007190:	793b      	ldrb	r3, [r7, #4]
 8007192:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	019b      	lsls	r3, r3, #6
 800719a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800719c:	793b      	ldrb	r3, [r7, #4]
 800719e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	4313      	orrs	r3, r2
 80071aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80071ac:	793b      	ldrb	r3, [r7, #4]
 80071ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80071bc:	793b      	ldrb	r3, [r7, #4]
 80071be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80071c6:	b25b      	sxtb	r3, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80071cc:	793b      	ldrb	r3, [r7, #4]
 80071ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80071d6:	b25b      	sxtb	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80071dc:	793b      	ldrb	r3, [r7, #4]
 80071de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80071ec:	793b      	ldrb	r3, [r7, #4]
 80071ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b25b      	sxtb	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80071fc:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80071fe:	f107 030f 	add.w	r3, r7, #15
 8007202:	2201      	movs	r2, #1
 8007204:	4619      	mov	r1, r3
 8007206:	2089      	movs	r0, #137	; 0x89
 8007208:	f000 fc36 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a1b      	ldr	r2, [pc, #108]	; (800728c <SUBGRF_CalibrateImage+0x78>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d904      	bls.n	800722e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007224:	23e1      	movs	r3, #225	; 0xe1
 8007226:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8007228:	23e9      	movs	r3, #233	; 0xe9
 800722a:	737b      	strb	r3, [r7, #13]
 800722c:	e022      	b.n	8007274 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a17      	ldr	r2, [pc, #92]	; (8007290 <SUBGRF_CalibrateImage+0x7c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d904      	bls.n	8007240 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8007236:	23d7      	movs	r3, #215	; 0xd7
 8007238:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800723a:	23db      	movs	r3, #219	; 0xdb
 800723c:	737b      	strb	r3, [r7, #13]
 800723e:	e019      	b.n	8007274 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a14      	ldr	r2, [pc, #80]	; (8007294 <SUBGRF_CalibrateImage+0x80>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d904      	bls.n	8007252 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8007248:	23c1      	movs	r3, #193	; 0xc1
 800724a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800724c:	23c5      	movs	r3, #197	; 0xc5
 800724e:	737b      	strb	r3, [r7, #13]
 8007250:	e010      	b.n	8007274 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a10      	ldr	r2, [pc, #64]	; (8007298 <SUBGRF_CalibrateImage+0x84>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d904      	bls.n	8007264 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800725a:	2375      	movs	r3, #117	; 0x75
 800725c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800725e:	2381      	movs	r3, #129	; 0x81
 8007260:	737b      	strb	r3, [r7, #13]
 8007262:	e007      	b.n	8007274 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0d      	ldr	r2, [pc, #52]	; (800729c <SUBGRF_CalibrateImage+0x88>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d903      	bls.n	8007274 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800726c:	236b      	movs	r3, #107	; 0x6b
 800726e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8007270:	236f      	movs	r3, #111	; 0x6f
 8007272:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007274:	f107 030c 	add.w	r3, r7, #12
 8007278:	2202      	movs	r2, #2
 800727a:	4619      	mov	r1, r3
 800727c:	2098      	movs	r0, #152	; 0x98
 800727e:	f000 fbfb 	bl	8007a78 <SUBGRF_WriteCommand>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	35a4e900 	.word	0x35a4e900
 8007290:	32a9f880 	.word	0x32a9f880
 8007294:	2de54480 	.word	0x2de54480
 8007298:	1b6b0b00 	.word	0x1b6b0b00
 800729c:	1954fc40 	.word	0x1954fc40

080072a0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80072a0:	b590      	push	{r4, r7, lr}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4623      	mov	r3, r4
 80072b0:	71fb      	strb	r3, [r7, #7]
 80072b2:	4603      	mov	r3, r0
 80072b4:	71bb      	strb	r3, [r7, #6]
 80072b6:	460b      	mov	r3, r1
 80072b8:	717b      	strb	r3, [r7, #5]
 80072ba:	4613      	mov	r3, r2
 80072bc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80072c2:	79bb      	ldrb	r3, [r7, #6]
 80072c4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80072c6:	797b      	ldrb	r3, [r7, #5]
 80072c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80072ca:	793b      	ldrb	r3, [r7, #4]
 80072cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	2204      	movs	r2, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	2095      	movs	r0, #149	; 0x95
 80072d8:	f000 fbce 	bl	8007a78 <SUBGRF_WriteCommand>
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd90      	pop	{r4, r7, pc}

080072e4 <SUBGRF_SetRxTxFallbackMode>:

void SUBGRF_SetRxTxFallbackMode( uint8_t fallbackMode )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	2201      	movs	r2, #1
 80072f2:	4619      	mov	r1, r3
 80072f4:	2093      	movs	r0, #147	; 0x93
 80072f6:	f000 fbbf 	bl	8007a78 <SUBGRF_WriteCommand>
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <SUBGRF_SetDioIrqParams>:

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007302:	b590      	push	{r4, r7, lr}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	4604      	mov	r4, r0
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	461a      	mov	r2, r3
 8007310:	4623      	mov	r3, r4
 8007312:	80fb      	strh	r3, [r7, #6]
 8007314:	4603      	mov	r3, r0
 8007316:	80bb      	strh	r3, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	807b      	strh	r3, [r7, #2]
 800731c:	4613      	mov	r3, r2
 800731e:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	b29b      	uxth	r3, r3
 8007326:	b2db      	uxtb	r3, r3
 8007328:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8007330:	88bb      	ldrh	r3, [r7, #4]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	b29b      	uxth	r3, r3
 8007336:	b2db      	uxtb	r3, r3
 8007338:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800733a:	88bb      	ldrh	r3, [r7, #4]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8007340:	887b      	ldrh	r3, [r7, #2]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	b29b      	uxth	r3, r3
 8007346:	b2db      	uxtb	r3, r3
 8007348:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800734a:	887b      	ldrh	r3, [r7, #2]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007350:	883b      	ldrh	r3, [r7, #0]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	b2db      	uxtb	r3, r3
 8007358:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800735a:	883b      	ldrh	r3, [r7, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	2208      	movs	r2, #8
 8007366:	4619      	mov	r1, r3
 8007368:	2008      	movs	r0, #8
 800736a:	f000 fb85 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bd90      	pop	{r4, r7, pc}

08007376 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	4603      	mov	r3, r0
 800737e:	6039      	str	r1, [r7, #0]
 8007380:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	b2db      	uxtb	r3, r3
 800738a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	b2db      	uxtb	r3, r3
 8007392:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	b2db      	uxtb	r3, r3
 800739a:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80073a2:	f107 030c 	add.w	r3, r7, #12
 80073a6:	2204      	movs	r2, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	2097      	movs	r0, #151	; 0x97
 80073ac:	f000 fb64 	bl	8007a78 <SUBGRF_WriteCommand>
}
 80073b0:	bf00      	nop
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80073b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <SUBGRF_SetRfFrequency+0x8c>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f083 0301 	eor.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff ff1d 	bl	8007214 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80073da:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <SUBGRF_SetRfFrequency+0x8c>)
 80073dc:	2201      	movs	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	461c      	mov	r4, r3
 80073e6:	4615      	mov	r5, r2
 80073e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80073ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80073f0:	4b15      	ldr	r3, [pc, #84]	; (8007448 <SUBGRF_SetRfFrequency+0x90>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2200      	movs	r2, #0
 80073f6:	469a      	mov	sl, r3
 80073f8:	4693      	mov	fp, r2
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	4640      	mov	r0, r8
 8007400:	4649      	mov	r1, r9
 8007402:	f7f9 fc13 	bl	8000c2c <__aeabi_uldivmod>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4613      	mov	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	0e1b      	lsrs	r3, r3, #24
 8007412:	b2db      	uxtb	r3, r3
 8007414:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	b2db      	uxtb	r3, r3
 800741c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	b2db      	uxtb	r3, r3
 8007424:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800742c:	f107 0308 	add.w	r3, r7, #8
 8007430:	2204      	movs	r2, #4
 8007432:	4619      	mov	r1, r3
 8007434:	2086      	movs	r0, #134	; 0x86
 8007436:	f000 fb1f 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007444:	20000d44 	.word	0x20000d44
 8007448:	0801a5d8 	.word	0x0801a5d8

0800744c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8007456:	79fa      	ldrb	r2, [r7, #7]
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <SUBGRF_SetPacketType+0x34>)
 800745a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007462:	2100      	movs	r1, #0
 8007464:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007468:	f000 fa8a 	bl	8007980 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800746c:	1dfb      	adds	r3, r7, #7
 800746e:	2201      	movs	r2, #1
 8007470:	4619      	mov	r1, r3
 8007472:	208a      	movs	r0, #138	; 0x8a
 8007474:	f000 fb00 	bl	8007a78 <SUBGRF_WriteCommand>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000d3d 	.word	0x20000d3d

08007484 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
    return PacketType;
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <SUBGRF_GetPacketType+0x10>)
 800748a:	781b      	ldrb	r3, [r3, #0]
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr
 8007494:	20000d3d 	.word	0x20000d3d

08007498 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]
 80074a2:	460b      	mov	r3, r1
 80074a4:	71bb      	strb	r3, [r7, #6]
 80074a6:	4613      	mov	r3, r2
 80074a8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d124      	bne.n	80074fa <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80074b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074b4:	2b0f      	cmp	r3, #15
 80074b6:	d106      	bne.n	80074c6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80074b8:	2301      	movs	r3, #1
 80074ba:	2201      	movs	r2, #1
 80074bc:	2100      	movs	r1, #0
 80074be:	2006      	movs	r0, #6
 80074c0:	f7ff feee 	bl	80072a0 <SUBGRF_SetPaConfig>
 80074c4:	e005      	b.n	80074d2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80074c6:	2301      	movs	r3, #1
 80074c8:	2201      	movs	r2, #1
 80074ca:	2100      	movs	r1, #0
 80074cc:	2004      	movs	r0, #4
 80074ce:	f7ff fee7 	bl	80072a0 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80074d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074d6:	2b0d      	cmp	r3, #13
 80074d8:	dd02      	ble.n	80074e0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80074da:	230e      	movs	r3, #14
 80074dc:	71bb      	strb	r3, [r7, #6]
 80074de:	e006      	b.n	80074ee <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80074e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074e4:	f113 0f11 	cmn.w	r3, #17
 80074e8:	da01      	bge.n	80074ee <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80074ea:	23ef      	movs	r3, #239	; 0xef
 80074ec:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80074ee:	2118      	movs	r1, #24
 80074f0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80074f4:	f000 fa44 	bl	8007980 <SUBGRF_WriteRegister>
 80074f8:	e025      	b.n	8007546 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80074fa:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80074fe:	f000 fa53 	bl	80079a8 <SUBGRF_ReadRegister>
 8007502:	4603      	mov	r3, r0
 8007504:	f043 031e 	orr.w	r3, r3, #30
 8007508:	b2db      	uxtb	r3, r3
 800750a:	4619      	mov	r1, r3
 800750c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007510:	f000 fa36 	bl	8007980 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8007514:	2301      	movs	r3, #1
 8007516:	2200      	movs	r2, #0
 8007518:	2107      	movs	r1, #7
 800751a:	2004      	movs	r0, #4
 800751c:	f7ff fec0 	bl	80072a0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8007520:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007524:	2b16      	cmp	r3, #22
 8007526:	dd02      	ble.n	800752e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8007528:	2316      	movs	r3, #22
 800752a:	71bb      	strb	r3, [r7, #6]
 800752c:	e006      	b.n	800753c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800752e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007532:	f113 0f09 	cmn.w	r3, #9
 8007536:	da01      	bge.n	800753c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8007538:	23f7      	movs	r3, #247	; 0xf7
 800753a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800753c:	2138      	movs	r1, #56	; 0x38
 800753e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007542:	f000 fa1d 	bl	8007980 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8007546:	79bb      	ldrb	r3, [r7, #6]
 8007548:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800754a:	797b      	ldrb	r3, [r7, #5]
 800754c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800754e:	f107 030c 	add.w	r3, r7, #12
 8007552:	2202      	movs	r2, #2
 8007554:	4619      	mov	r1, r3
 8007556:	208e      	movs	r0, #142	; 0x8e
 8007558:	f000 fa8e 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8007564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007572:	4a66      	ldr	r2, [pc, #408]	; (800770c <SUBGRF_SetModulationParams+0x1a8>)
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800757c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	4b62      	ldr	r3, [pc, #392]	; (8007710 <SUBGRF_SetModulationParams+0x1ac>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d004      	beq.n	8007596 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff ff5b 	bl	800744c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b03      	cmp	r3, #3
 800759c:	f200 80af 	bhi.w	80076fe <SUBGRF_SetModulationParams+0x19a>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <SUBGRF_SetModulationParams+0x44>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075b9 	.word	0x080075b9
 80075ac:	08007689 	.word	0x08007689
 80075b0:	08007647 	.word	0x08007647
 80075b4:	080076b7 	.word	0x080076b7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80075b8:	2308      	movs	r3, #8
 80075ba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80075bc:	4b55      	ldr	r3, [pc, #340]	; (8007714 <SUBGRF_SetModulationParams+0x1b0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	0c1b      	lsrs	r3, r3, #16
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	0a1b      	lsrs	r3, r3, #8
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7b1b      	ldrb	r3, [r3, #12]
 80075e6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7b5b      	ldrb	r3, [r3, #13]
 80075ec:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	461c      	mov	r4, r3
 80075f6:	4615      	mov	r5, r2
 80075f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80075fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007600:	4b44      	ldr	r3, [pc, #272]	; (8007714 <SUBGRF_SetModulationParams+0x1b0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2200      	movs	r2, #0
 8007606:	469a      	mov	sl, r3
 8007608:	4693      	mov	fp, r2
 800760a:	4652      	mov	r2, sl
 800760c:	465b      	mov	r3, fp
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f9 fb0b 	bl	8000c2c <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4613      	mov	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	0c1b      	lsrs	r3, r3, #16
 8007622:	b2db      	uxtb	r3, r3
 8007624:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	b2db      	uxtb	r3, r3
 800762c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	b29a      	uxth	r2, r3
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	4619      	mov	r1, r3
 800763e:	208b      	movs	r0, #139	; 0x8b
 8007640:	f000 fa1a 	bl	8007a78 <SUBGRF_WriteCommand>
        break;
 8007644:	e05c      	b.n	8007700 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007646:	2304      	movs	r3, #4
 8007648:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800764a:	4b32      	ldr	r3, [pc, #200]	; (8007714 <SUBGRF_SetModulationParams+0x1b0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	fbb2 f3f3 	udiv	r3, r2, r3
 8007658:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	b2db      	uxtb	r3, r3
 8007660:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b2db      	uxtb	r3, r3
 8007668:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7d1b      	ldrb	r3, [r3, #20]
 8007674:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007676:	7cfb      	ldrb	r3, [r7, #19]
 8007678:	b29a      	uxth	r2, r3
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	4619      	mov	r1, r3
 8007680:	208b      	movs	r0, #139	; 0x8b
 8007682:	f000 f9f9 	bl	8007a78 <SUBGRF_WriteCommand>
        break;
 8007686:	e03b      	b.n	8007700 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_LORA:
        n = 4;
 8007688:	2304      	movs	r3, #4
 800768a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7e1b      	ldrb	r3, [r3, #24]
 8007690:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7e5b      	ldrb	r3, [r3, #25]
 8007696:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7e9b      	ldrb	r3, [r3, #26]
 800769c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7edb      	ldrb	r3, [r3, #27]
 80076a2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076a4:	7cfb      	ldrb	r3, [r7, #19]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	4619      	mov	r1, r3
 80076ae:	208b      	movs	r0, #139	; 0x8b
 80076b0:	f000 f9e2 	bl	8007a78 <SUBGRF_WriteCommand>

        break;
 80076b4:	e024      	b.n	8007700 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_GMSK:
        n = 5;
 80076b6:	2305      	movs	r3, #5
 80076b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80076ba:	4b16      	ldr	r3, [pc, #88]	; (8007714 <SUBGRF_SetModulationParams+0x1b0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80076ec:	7cfb      	ldrb	r3, [r7, #19]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	4619      	mov	r1, r3
 80076f6:	208b      	movs	r0, #139	; 0x8b
 80076f8:	f000 f9be 	bl	8007a78 <SUBGRF_WriteCommand>
        break;
 80076fc:	e000      	b.n	8007700 <SUBGRF_SetModulationParams+0x19c>
    default:
    case PACKET_TYPE_NONE:
      break;
 80076fe:	bf00      	nop
    }
}
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770a:	bf00      	nop
 800770c:	0801a460 	.word	0x0801a460
 8007710:	20000d3d 	.word	0x20000d3d
 8007714:	0801a5d8 	.word	0x0801a5d8

08007718 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007724:	4a48      	ldr	r2, [pc, #288]	; (8007848 <SUBGRF_SetPacketParams+0x130>)
 8007726:	f107 030c 	add.w	r3, r7, #12
 800772a:	ca07      	ldmia	r2, {r0, r1, r2}
 800772c:	c303      	stmia	r3!, {r0, r1}
 800772e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	4b45      	ldr	r3, [pc, #276]	; (800784c <SUBGRF_SetPacketParams+0x134>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d004      	beq.n	8007746 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fe83 	bl	800744c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d878      	bhi.n	8007840 <SUBGRF_SetPacketParams+0x128>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <SUBGRF_SetPacketParams+0x3c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007765 	.word	0x08007765
 8007758:	080077f5 	.word	0x080077f5
 800775c:	080077e9 	.word	0x080077e9
 8007760:	08007765 	.word	0x08007765
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7a5b      	ldrb	r3, [r3, #9]
 8007768:	2bf1      	cmp	r3, #241	; 0xf1
 800776a:	d10a      	bne.n	8007782 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800776c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007770:	f7ff fbf1 	bl	8006f56 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007774:	f248 0005 	movw	r0, #32773	; 0x8005
 8007778:	f7ff fc0d 	bl	8006f96 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800777c:	2302      	movs	r3, #2
 800777e:	75bb      	strb	r3, [r7, #22]
 8007780:	e011      	b.n	80077a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7a5b      	ldrb	r3, [r3, #9]
 8007786:	2bf2      	cmp	r3, #242	; 0xf2
 8007788:	d10a      	bne.n	80077a0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800778a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800778e:	f7ff fbe2 	bl	8006f56 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007792:	f241 0021 	movw	r0, #4129	; 0x1021
 8007796:	f7ff fbfe 	bl	8006f96 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800779a:	2306      	movs	r3, #6
 800779c:	75bb      	strb	r3, [r7, #22]
 800779e:	e002      	b.n	80077a6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	7a5b      	ldrb	r3, [r3, #9]
 80077a4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80077a6:	2309      	movs	r3, #9
 80077a8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	885b      	ldrh	r3, [r3, #2]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	795b      	ldrb	r3, [r3, #5]
 80077c8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	799b      	ldrb	r3, [r3, #6]
 80077ce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	79db      	ldrb	r3, [r3, #7]
 80077d4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	7a1b      	ldrb	r3, [r3, #8]
 80077da:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80077dc:	7dbb      	ldrb	r3, [r7, #22]
 80077de:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7a9b      	ldrb	r3, [r3, #10]
 80077e4:	753b      	strb	r3, [r7, #20]
        break;
 80077e6:	e022      	b.n	800782e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7b1b      	ldrb	r3, [r3, #12]
 80077f0:	733b      	strb	r3, [r7, #12]
        break;
 80077f2:	e01c      	b.n	800782e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80077f4:	2306      	movs	r3, #6
 80077f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	89db      	ldrh	r3, [r3, #14]
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	b29b      	uxth	r3, r3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	89db      	ldrh	r3, [r3, #14]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c1a      	ldrb	r2, [r3, #16]
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <SUBGRF_SetPacketParams+0x138>)
 8007812:	4611      	mov	r1, r2
 8007814:	7019      	strb	r1, [r3, #0]
 8007816:	4613      	mov	r3, r2
 8007818:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c5b      	ldrb	r3, [r3, #17]
 800781e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7c9b      	ldrb	r3, [r3, #18]
 8007824:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7cdb      	ldrb	r3, [r3, #19]
 800782a:	747b      	strb	r3, [r7, #17]
        break;
 800782c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	b29a      	uxth	r2, r3
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	4619      	mov	r1, r3
 8007838:	208c      	movs	r0, #140	; 0x8c
 800783a:	f000 f91d 	bl	8007a78 <SUBGRF_WriteCommand>
 800783e:	e000      	b.n	8007842 <SUBGRF_SetPacketParams+0x12a>
        return;
 8007840:	bf00      	nop
}
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	0801a468 	.word	0x0801a468
 800784c:	20000d3d 	.word	0x20000d3d
 8007850:	20000d3e 	.word	0x20000d3e

08007854 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	460a      	mov	r2, r1
 800785e:	71fb      	strb	r3, [r7, #7]
 8007860:	4613      	mov	r3, r2
 8007862:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007868:	79bb      	ldrb	r3, [r7, #6]
 800786a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800786c:	f107 030c 	add.w	r3, r7, #12
 8007870:	2202      	movs	r2, #2
 8007872:	4619      	mov	r1, r3
 8007874:	208f      	movs	r0, #143	; 0x8f
 8007876:	f000 f8ff 	bl	8007a78 <SUBGRF_WriteCommand>
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	2202      	movs	r2, #2
 8007894:	4619      	mov	r1, r3
 8007896:	2013      	movs	r0, #19
 8007898:	f000 f902 	bl	8007aa0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800789c:	f7ff fdf2 	bl	8007484 <SUBGRF_GetPacketType>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d10d      	bne.n	80078c2 <SUBGRF_GetRxBufferStatus+0x3e>
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <SUBGRF_GetRxBufferStatus+0x54>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d108      	bne.n	80078c2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80078b0:	f240 7002 	movw	r0, #1794	; 0x702
 80078b4:	f000 f878 	bl	80079a8 <SUBGRF_ReadRegister>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	e002      	b.n	80078c8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80078c2:	7b3a      	ldrb	r2, [r7, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80078c8:	7b7a      	ldrb	r2, [r7, #13]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000d3e 	.word	0x20000d3e

080078dc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	2203      	movs	r2, #3
 80078ea:	4619      	mov	r1, r3
 80078ec:	2014      	movs	r0, #20
 80078ee:	f000 f8d7 	bl	8007aa0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80078f2:	f7ff fdc7 	bl	8007484 <SUBGRF_GetPacketType>
 80078f6:	4603      	mov	r3, r0
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <SUBGRF_GetPacketStatus+0x30>
 8007906:	2b01      	cmp	r3, #1
 8007908:	d013      	beq.n	8007932 <SUBGRF_GetPacketStatus+0x56>
 800790a:	e02a      	b.n	8007962 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800790c:	7b3a      	ldrb	r2, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007912:	7b7b      	ldrb	r3, [r7, #13]
 8007914:	425b      	negs	r3, r3
 8007916:	105b      	asrs	r3, r3, #1
 8007918:	b25a      	sxtb	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	425b      	negs	r3, r3
 8007922:	105b      	asrs	r3, r3, #1
 8007924:	b25a      	sxtb	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
            break;
 8007930:	e020      	b.n	8007974 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007932:	7b3b      	ldrb	r3, [r7, #12]
 8007934:	425b      	negs	r3, r3
 8007936:	105b      	asrs	r3, r3, #1
 8007938:	b25a      	sxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800793e:	7b7b      	ldrb	r3, [r7, #13]
 8007940:	b25b      	sxtb	r3, r3
 8007942:	3302      	adds	r3, #2
 8007944:	109b      	asrs	r3, r3, #2
 8007946:	b25a      	sxtb	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	425b      	negs	r3, r3
 8007950:	105b      	asrs	r3, r3, #1
 8007952:	b25a      	sxtb	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007958:	4b08      	ldr	r3, [pc, #32]	; (800797c <SUBGRF_GetPacketStatus+0xa0>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	611a      	str	r2, [r3, #16]
            break;
 8007960:	e008      	b.n	8007974 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007962:	2214      	movs	r2, #20
 8007964:	2100      	movs	r1, #0
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f011 fb0a 	bl	8018f80 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	220f      	movs	r2, #15
 8007970:	701a      	strb	r2, [r3, #0]
            break;
 8007972:	bf00      	nop
    }
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000d40 	.word	0x20000d40

08007980 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	460a      	mov	r2, r1
 800798a:	80fb      	strh	r3, [r7, #6]
 800798c:	4613      	mov	r3, r2
 800798e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007990:	1d7a      	adds	r2, r7, #5
 8007992:	88f9      	ldrh	r1, [r7, #6]
 8007994:	2301      	movs	r3, #1
 8007996:	4803      	ldr	r0, [pc, #12]	; (80079a4 <SUBGRF_WriteRegister+0x24>)
 8007998:	f7fc fd09 	bl	80043ae <HAL_SUBGHZ_WriteRegisters>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000d04 	.word	0x20000d04

080079a8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80079b2:	f107 020f 	add.w	r2, r7, #15
 80079b6:	88f9      	ldrh	r1, [r7, #6]
 80079b8:	2301      	movs	r3, #1
 80079ba:	4804      	ldr	r0, [pc, #16]	; (80079cc <SUBGRF_ReadRegister+0x24>)
 80079bc:	f7fc fd56 	bl	800446c <HAL_SUBGHZ_ReadRegisters>
    return data;
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000d04 	.word	0x20000d04

080079d0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	80fb      	strh	r3, [r7, #6]
 80079dc:	4613      	mov	r3, r2
 80079de:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80079e0:	88bb      	ldrh	r3, [r7, #4]
 80079e2:	88f9      	ldrh	r1, [r7, #6]
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	4803      	ldr	r0, [pc, #12]	; (80079f4 <SUBGRF_WriteRegisters+0x24>)
 80079e8:	f7fc fce1 	bl	80043ae <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000d04 	.word	0x20000d04

080079f8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	6039      	str	r1, [r7, #0]
 8007a02:	80fb      	strh	r3, [r7, #6]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007a08:	88bb      	ldrh	r3, [r7, #4]
 8007a0a:	88f9      	ldrh	r1, [r7, #6]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <SUBGRF_ReadRegisters+0x24>)
 8007a10:	f7fc fd2c 	bl	800446c <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000d04 	.word	0x20000d04

08007a20 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007a30:	79bb      	ldrb	r3, [r7, #6]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	79f9      	ldrb	r1, [r7, #7]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4803      	ldr	r0, [pc, #12]	; (8007a48 <SUBGRF_WriteBuffer+0x28>)
 8007a3a:	f7fc fe2b 	bl	8004694 <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000d04 	.word	0x20000d04

08007a4c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007a5c:	79bb      	ldrb	r3, [r7, #6]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	79f9      	ldrb	r1, [r7, #7]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4803      	ldr	r0, [pc, #12]	; (8007a74 <SUBGRF_ReadBuffer+0x28>)
 8007a66:	f7fc fe68 	bl	800473a <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000d04 	.word	0x20000d04

08007a78 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6039      	str	r1, [r7, #0]
 8007a82:	71fb      	strb	r3, [r7, #7]
 8007a84:	4613      	mov	r3, r2
 8007a86:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007a88:	88bb      	ldrh	r3, [r7, #4]
 8007a8a:	79f9      	ldrb	r1, [r7, #7]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	4803      	ldr	r0, [pc, #12]	; (8007a9c <SUBGRF_WriteCommand+0x24>)
 8007a90:	f7fc fd4d 	bl	800452e <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000d04 	.word	0x20000d04

08007aa0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007ab0:	88bb      	ldrh	r3, [r7, #4]
 8007ab2:	79f9      	ldrb	r1, [r7, #7]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	4803      	ldr	r0, [pc, #12]	; (8007ac4 <SUBGRF_ReadCommand+0x24>)
 8007ab8:	f7fc fd98 	bl	80045ec <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000d04 	.word	0x20000d04

08007ac8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	71fb      	strb	r3, [r7, #7]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007adc:	79bb      	ldrb	r3, [r7, #6]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10d      	bne.n	8007afe <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d104      	bne.n	8007af2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007aec:	2004      	movs	r0, #4
 8007aee:	f000 f849 	bl	8007b84 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d107      	bne.n	8007b08 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007af8:	2303      	movs	r3, #3
 8007afa:	73fb      	strb	r3, [r7, #15]
 8007afc:	e004      	b.n	8007b08 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007afe:	79bb      	ldrb	r3, [r7, #6]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe f9da 	bl	8005ec4 <EMBENET_NODE_BSP_ConfigRFSwitch>
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007b26:	f7fe fa27 	bl	8005f78 <EMBENET_NODE_BSP_GetTxConfig>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	60bb      	str	r3, [r7, #8]

    switch (TxConfig)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d009      	beq.n	8007b48 <SUBGRF_SetRfTxPower+0x30>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	dc16      	bgt.n	8007b68 <SUBGRF_SetRfTxPower+0x50>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <SUBGRF_SetRfTxPower+0x44>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d00d      	beq.n	8007b62 <SUBGRF_SetRfTxPower+0x4a>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8007b46:	e00f      	b.n	8007b68 <SUBGRF_SetRfTxPower+0x50>
            if (power > 15)
 8007b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4c:	2b0f      	cmp	r3, #15
 8007b4e:	dd02      	ble.n	8007b56 <SUBGRF_SetRfTxPower+0x3e>
                paSelect = RFO_HP;
 8007b50:	2302      	movs	r3, #2
 8007b52:	73fb      	strb	r3, [r7, #15]
            break;
 8007b54:	e009      	b.n	8007b6a <SUBGRF_SetRfTxPower+0x52>
                paSelect = RFO_LP;
 8007b56:	2301      	movs	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
            break;
 8007b5a:	e006      	b.n	8007b6a <SUBGRF_SetRfTxPower+0x52>
            paSelect = RFO_LP;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
            break;
 8007b60:	e003      	b.n	8007b6a <SUBGRF_SetRfTxPower+0x52>
            paSelect = RFO_HP;
 8007b62:	2302      	movs	r3, #2
 8007b64:	73fb      	strb	r3, [r7, #15]
            break;
 8007b66:	e000      	b.n	8007b6a <SUBGRF_SetRfTxPower+0x52>
            break;
 8007b68:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007b6a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2202      	movs	r2, #2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fc90 	bl	8007498 <SUBGRF_SetTxParams>

    return paSelect;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <Radio_SMPS_Set+0x40>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d012      	beq.n	8007bbc <Radio_SMPS_Set+0x38>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8007b96:	f640 1023 	movw	r0, #2339	; 0x923
 8007b9a:	f7ff ff05 	bl	80079a8 <SUBGRF_ReadRegister>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	f023 0306 	bic.w	r3, r3, #6
 8007ba8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007baa:	7bfa      	ldrb	r2, [r7, #15]
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	f640 1023 	movw	r0, #2339	; 0x923
 8007bb8:	f7ff fee2 	bl	8007980 <SUBGRF_WriteRegister>
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	0801a5de 	.word	0x0801a5de

08007bc8 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 8007bc8:	3901      	subs	r1, #1
 8007bca:	4402      	add	r2, r0
 8007bcc:	4282      	cmp	r2, r0
 8007bce:	d100      	bne.n	8007bd2 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 8007bd0:	4770      	bx	lr
 8007bd2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007bd6:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8007bda:	e7f7      	b.n	8007bcc <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>

08007bdc <c05e60d8280ba6d1de28a642094ab91f1147ad34>:
 8007bdc:	b513      	push	{r0, r1, r4, lr}
 8007bde:	b920      	cbnz	r0, 8007bea <c05e60d8280ba6d1de28a642094ab91f1147ad34+0xe>
 8007be0:	4907      	ldr	r1, [pc, #28]	; (8007c00 <c05e60d8280ba6d1de28a642094ab91f1147ad34+0x24>)
 8007be2:	4808      	ldr	r0, [pc, #32]	; (8007c04 <c05e60d8280ba6d1de28a642094ab91f1147ad34+0x28>)
 8007be4:	2261      	movs	r2, #97	; 0x61
 8007be6:	f7f9 fcd3 	bl	8001590 <EXPECT_OnAbortHandler>
 8007bea:	6983      	ldr	r3, [r0, #24]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8007bf2:	6884      	ldr	r4, [r0, #8]
 8007bf4:	7b01      	ldrb	r1, [r0, #12]
 8007bf6:	6800      	ldr	r0, [r0, #0]
 8007bf8:	47a0      	blx	r4
 8007bfa:	b002      	add	sp, #8
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	0801a739 	.word	0x0801a739
 8007c04:	0801aac7 	.word	0x0801aac7

08007c08 <EMBENET_UDP_RegisterSocket>:
 8007c08:	b508      	push	{r3, lr}
 8007c0a:	f00f fb8b 	bl	8017324 <76cd6211f2085e3d946bd747f2187c2e80301a64>
 8007c0e:	2805      	cmp	r0, #5
 8007c10:	bf96      	itet	ls
 8007c12:	4b02      	ldrls	r3, [pc, #8]	; (8007c1c <EMBENET_UDP_RegisterSocket+0x14>)
 8007c14:	2001      	movhi	r0, #1
 8007c16:	5c18      	ldrbls	r0, [r3, r0]
 8007c18:	bd08      	pop	{r3, pc}
 8007c1a:	bf00      	nop
 8007c1c:	0801a88a 	.word	0x0801a88a

08007c20 <EMBENET_UDP_UnregisterSocket>:
 8007c20:	b508      	push	{r3, lr}
 8007c22:	f00f fb9d 	bl	8017360 <008a3a43d97272e7b0f59f361a8c8969876e60dd>
 8007c26:	2805      	cmp	r0, #5
 8007c28:	bf96      	itet	ls
 8007c2a:	4b02      	ldrls	r3, [pc, #8]	; (8007c34 <EMBENET_UDP_UnregisterSocket+0x14>)
 8007c2c:	2001      	movhi	r0, #1
 8007c2e:	5c18      	ldrbls	r0, [r3, r0]
 8007c30:	bd08      	pop	{r3, pc}
 8007c32:	bf00      	nop
 8007c34:	0801a88a 	.word	0x0801a88a

08007c38 <EMBENET_UDP_Send>:
 8007c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	4621      	mov	r1, r4
 8007c40:	b15c      	cbz	r4, 8007c5a <EMBENET_UDP_Send+0x22>
 8007c42:	b153      	cbz	r3, 8007c5a <EMBENET_UDP_Send+0x22>
 8007c44:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007c48:	9400      	str	r4, [sp, #0]
 8007c4a:	f00f fb9b 	bl	8017384 <09c9c31144d89e446fc56189171072a9b46992fd>
 8007c4e:	2805      	cmp	r0, #5
 8007c50:	d805      	bhi.n	8007c5e <EMBENET_UDP_Send+0x26>
 8007c52:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <EMBENET_UDP_Send+0x2c>)
 8007c54:	5c18      	ldrb	r0, [r3, r0]
 8007c56:	b003      	add	sp, #12
 8007c58:	bd30      	pop	{r4, r5, pc}
 8007c5a:	2002      	movs	r0, #2
 8007c5c:	e7fb      	b.n	8007c56 <EMBENET_UDP_Send+0x1e>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7f9      	b.n	8007c56 <EMBENET_UDP_Send+0x1e>
 8007c62:	bf00      	nop
 8007c64:	0801a88a 	.word	0x0801a88a

08007c68 <EMBENET_NODE_GetLocalTime>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <EMBENET_NODE_GetLocalTime+0x50>)
 8007c6c:	681c      	ldr	r4, [r3, #0]
 8007c6e:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 8007c72:	f7fe fab3 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8007c76:	f002 fe3b 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8007c7a:	f8d5 3238 	ldr.w	r3, [r5, #568]	; 0x238
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	d909      	bls.n	8007c96 <EMBENET_NODE_GetLocalTime+0x2e>
 8007c82:	f243 2130 	movw	r1, #12848	; 0x3230
 8007c86:	1866      	adds	r6, r4, r1
 8007c88:	5863      	ldr	r3, [r4, r1]
 8007c8a:	6872      	ldr	r2, [r6, #4]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	f142 0200 	adc.w	r2, r2, #0
 8007c92:	5063      	str	r3, [r4, r1]
 8007c94:	6072      	str	r2, [r6, #4]
 8007c96:	f243 2330 	movw	r3, #12848	; 0x3230
 8007c9a:	f8c5 0238 	str.w	r0, [r5, #568]	; 0x238
 8007c9e:	58e5      	ldr	r5, [r4, r3]
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	f7fe fabb 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8007ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007caa:	2300      	movs	r3, #0
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 ffbc 	bl	8000c2c <__aeabi_uldivmod>
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000034 	.word	0x20000034

08007cbc <00aa5e9c55481e7f5f1b699343b2f81ea40b5596>:
 8007cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc2:	b925      	cbnz	r5, 8007cce <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0x12>
 8007cc4:	492a      	ldr	r1, [pc, #168]	; (8007d70 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xb4>)
 8007cc6:	482b      	ldr	r0, [pc, #172]	; (8007d74 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xb8>)
 8007cc8:	2294      	movs	r2, #148	; 0x94
 8007cca:	f7f9 fc61 	bl	8001590 <EXPECT_OnAbortHandler>
 8007cce:	696b      	ldr	r3, [r5, #20]
 8007cd0:	4c29      	ldr	r4, [pc, #164]	; (8007d78 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xbc>)
 8007cd2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8007d7c <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xc0>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	fab3 f383 	clz	r3, r3
 8007cdc:	f500 70c9 	add.w	r0, r0, #402	; 0x192
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	07db      	lsls	r3, r3, #31
 8007ce4:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 8007ce8:	616b      	str	r3, [r5, #20]
 8007cea:	7910      	ldrb	r0, [r2, #4]
 8007cec:	9201      	str	r2, [sp, #4]
 8007cee:	2101      	movs	r1, #1
 8007cf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cf4:	f8cd 9000 	str.w	r9, [sp]
 8007cf8:	f002 fcd0 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8007cfc:	f7ff ffb4 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8007d00:	6824      	ldr	r4, [r4, #0]
 8007d02:	462e      	mov	r6, r5
 8007d04:	f504 5449 	add.w	r4, r4, #12864	; 0x3240
 8007d08:	f505 7ab0 	add.w	sl, r5, #352	; 0x160
 8007d0c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8007d10:	2700      	movs	r7, #0
 8007d12:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 8007d16:	7920      	ldrb	r0, [r4, #4]
 8007d18:	281f      	cmp	r0, #31
 8007d1a:	d020      	beq.n	8007d5e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 8007d1c:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	bf08      	it	eq
 8007d26:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8007d2a:	d018      	beq.n	8007d5e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 8007d2c:	6921      	ldr	r1, [r4, #16]
 8007d2e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8007d32:	696b      	ldr	r3, [r5, #20]
 8007d34:	fba1 2108 	umull	r2, r1, r1, r8
 8007d38:	fb08 110c 	mla	r1, r8, ip, r1
 8007d3c:	eb17 0c03 	adds.w	ip, r7, r3
 8007d40:	ebb2 020c 	subs.w	r2, r2, ip
 8007d44:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8007d48:	eb61 010c 	sbc.w	r1, r1, ip
 8007d4c:	4593      	cmp	fp, r2
 8007d4e:	eb77 0101 	sbcs.w	r1, r7, r1
 8007d52:	d304      	bcc.n	8007d5e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 8007d54:	e9cd 9400 	strd	r9, r4, [sp]
 8007d58:	2101      	movs	r1, #1
 8007d5a:	f002 fc9f 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8007d5e:	3620      	adds	r6, #32
 8007d60:	4556      	cmp	r6, sl
 8007d62:	f104 0420 	add.w	r4, r4, #32
 8007d66:	d1d6      	bne.n	8007d16 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0x5a>
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	bf00      	nop
 8007d70:	0801a739 	.word	0x0801a739
 8007d74:	0801aac7 	.word	0x0801aac7
 8007d78:	20000034 	.word	0x20000034
 8007d7c:	08007bdd 	.word	0x08007bdd

08007d80 <EMBENET_NODE_Proc>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4c1b      	ldr	r4, [pc, #108]	; (8007df0 <EMBENET_NODE_Proc+0x70>)
 8007d84:	f003 fc12 	bl	800b5ac <ef153328aa1040603d831896041b65ee1135a0ee>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007d8e:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
 8007d92:	b363      	cbz	r3, 8007dee <EMBENET_NODE_Proc+0x6e>
 8007d94:	f7ff ff68 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 8007d9e:	3330      	adds	r3, #48	; 0x30
 8007da0:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8007da4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8007da8:	1a80      	subs	r0, r0, r2
 8007daa:	eb61 0103 	sbc.w	r1, r1, r3
 8007dae:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8007db2:	4298      	cmp	r0, r3
 8007db4:	f171 0100 	sbcs.w	r1, r1, #0
 8007db8:	d319      	bcc.n	8007dee <EMBENET_NODE_Proc+0x6e>
 8007dba:	f008 fa49 	bl	8010250 <c37c52d5fcbad41724f29f060633d7770e309943>
 8007dbe:	f00a fbcb 	bl	8012558 <ae19410868335b64a066b6d27dd8944b8c55271b>
 8007dc2:	f009 f861 	bl	8010e88 <53bc4933f2d7947a48dac4db096e7506c8e8667c>
 8007dc6:	f00f f9f2 	bl	80171ae <ac88c013d0ed7f5b742e43c5288111c1f79c1a36>
 8007dca:	f00f f8e5 	bl	8016f98 <7c27c3f80cc08068333c14ac1b724ab469f4969f>
 8007dce:	f00c fecd 	bl	8014b6c <329b6edcbe2eed1a451d1df4c9584a68c1390127>
 8007dd2:	f00d fc6f 	bl	80156b4 <cb5093c001ef61253a4d1da1a0188ff7663f0307>
 8007dd6:	f00d fcd9 	bl	801578c <80b9218102010b739652963fa2fb0c366b6f860e>
 8007dda:	f00e f8ff 	bl	8015fdc <14e0e80443fa04d4f8b6b44eccb243ea385eea36>
 8007dde:	f003 facf 	bl	800b380 <b3455a2b4a7c58716d32ab9ee32d439bee656865>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8007dee:	bd10      	pop	{r4, pc}
 8007df0:	20000034 	.word	0x20000034

08007df4 <EMBENET_NODE_TaskCreate>:
 8007df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007df8:	4688      	mov	r8, r1
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d038      	beq.n	8007e72 <EMBENET_NODE_TaskCreate+0x7e>
 8007e00:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <EMBENET_NODE_TaskCreate+0x98>)
 8007e02:	681e      	ldr	r6, [r3, #0]
 8007e04:	f506 5349 	add.w	r3, r6, #12864	; 0x3240
 8007e08:	2500      	movs	r5, #0
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	016c      	lsls	r4, r5, #5
 8007e0e:	5d1a      	ldrb	r2, [r3, r4]
 8007e10:	2a1f      	cmp	r2, #31
 8007e12:	d131      	bne.n	8007e78 <EMBENET_NODE_TaskCreate+0x84>
 8007e14:	2001      	movs	r0, #1
 8007e16:	f002 fc17 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8007e1a:	f505 73c9 	add.w	r3, r5, #402	; 0x192
 8007e1e:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8007e22:	281f      	cmp	r0, #31
 8007e24:	7118      	strb	r0, [r3, #4]
 8007e26:	d01a      	beq.n	8007e5e <EMBENET_NODE_TaskCreate+0x6a>
 8007e28:	1c6a      	adds	r2, r5, #1
 8007e2a:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 8007e2e:	f243 2328 	movw	r3, #12840	; 0x3228
 8007e32:	f243 2158 	movw	r1, #12888	; 0x3258
 8007e36:	50d7      	str	r7, [r2, r3]
 8007e38:	1933      	adds	r3, r6, r4
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	f843 8001 	str.w	r8, [r3, r1]
 8007e42:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8007e46:	f04f 31ff 	mov.w	r1, #4294967295
 8007e4a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007e4e:	f243 232c 	movw	r3, #12844	; 0x322c
 8007e52:	21ff      	movs	r1, #255	; 0xff
 8007e54:	54d1      	strb	r1, [r2, r3]
 8007e56:	4628      	mov	r0, r5
 8007e58:	b002      	add	sp, #8
 8007e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5e:	2304      	movs	r3, #4
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <EMBENET_NODE_TaskCreate+0x9c>)
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <EMBENET_NODE_TaskCreate+0xa0>)
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	ab02      	add	r3, sp, #8
 8007e6a:	e913 0003 	ldmdb	r3, {r0, r1}
 8007e6e:	f005 fbdd 	bl	800d62c <LOGGER_PrintLine>
 8007e72:	f04f 35ff 	mov.w	r5, #4294967295
 8007e76:	e7ee      	b.n	8007e56 <EMBENET_NODE_TaskCreate+0x62>
 8007e78:	3501      	adds	r5, #1
 8007e7a:	2d0b      	cmp	r5, #11
 8007e7c:	d1c6      	bne.n	8007e0c <EMBENET_NODE_TaskCreate+0x18>
 8007e7e:	2304      	movs	r3, #4
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <EMBENET_NODE_TaskCreate+0xa0>)
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <EMBENET_NODE_TaskCreate+0xa4>)
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	e7ee      	b.n	8007e68 <EMBENET_NODE_TaskCreate+0x74>
 8007e8a:	bf00      	nop
 8007e8c:	20000034 	.word	0x20000034
 8007e90:	0801a7bd 	.word	0x0801a7bd
 8007e94:	0801a798 	.word	0x0801a798
 8007e98:	0801a7f3 	.word	0x0801a7f3

08007e9c <EMBENET_NODE_Init>:
 8007e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8007fc0 <EMBENET_NODE_Init+0x124>
 8007ea8:	9302      	str	r3, [sp, #8]
 8007eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eae:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007fc4 <EMBENET_NODE_Init+0x128>
 8007eb2:	4a45      	ldr	r2, [pc, #276]	; (8007fc8 <EMBENET_NODE_Init+0x12c>)
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007ebc:	f005 fbb6 	bl	800d62c <LOGGER_PrintLine>
 8007ec0:	f8d9 6000 	ldr.w	r6, [r9]
 8007ec4:	b134      	cbz	r4, 8007ed4 <EMBENET_NODE_Init+0x38>
 8007ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ec8:	f506 5548 	add.w	r5, r6, #12800	; 0x3200
 8007ecc:	3510      	adds	r5, #16
 8007ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f506 5349 	add.w	r3, r6, #12864	; 0x3240
 8007eda:	f04f 0c1f 	mov.w	ip, #31
 8007ede:	4615      	mov	r5, r2
 8007ee0:	24ff      	movs	r4, #255	; 0xff
 8007ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	3201      	adds	r2, #1
 8007eee:	2a0b      	cmp	r2, #11
 8007ef0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007ef4:	f883 c004 	strb.w	ip, [r3, #4]
 8007ef8:	609d      	str	r5, [r3, #8]
 8007efa:	731c      	strb	r4, [r3, #12]
 8007efc:	619d      	str	r5, [r3, #24]
 8007efe:	f103 0320 	add.w	r3, r3, #32
 8007f02:	d1f2      	bne.n	8007eea <EMBENET_NODE_Init+0x4e>
 8007f04:	f506 5440 	add.w	r4, r6, #12288	; 0x3000
 8007f08:	f8c4 5238 	str.w	r5, [r4, #568]	; 0x238
 8007f0c:	f002 fb84 	bl	800a618 <bbe099565971cd2d437b6a8e152f225cced7c4ee>
 8007f10:	f7fe fa8e 	bl	8006430 <EMBENET_RADIO_Init>
 8007f14:	f7fe f894 	bl	8006040 <EMBENET_AES128_Init>
 8007f18:	f003 fb3a 	bl	800b590 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505>
 8007f1c:	f000 f9d6 	bl	80082cc <62d16b48e9529b8b29eb67945bd8081213959681>
 8007f20:	f001 fca4 	bl	800986c <8651bfcf35514b04809eb22bd8aa118172b46770>
 8007f24:	f002 fd12 	bl	800a94c <da97346f7fa50b65fe6c97432d29b132cbef037c>
 8007f28:	f006 f948 	bl	800e1bc <36fc8fd3531c1a40f267c168c66ed988dd7f65d6>
 8007f2c:	f002 fd8a 	bl	800aa44 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca>
 8007f30:	f008 f8ca 	bl	80100c8 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79>
 8007f34:	f009 f8dc 	bl	80110f0 <eea52b91d7a1bb91cb2c756cbb75125f1315d891>
 8007f38:	f00a fabc 	bl	80124b4 <fbe24b77062e695b9b69518d2423c2cc606c842f>
 8007f3c:	f000 faee 	bl	800851c <a65a9e0e9d2172731582a842552346b36304a3e3>
 8007f40:	f008 ff66 	bl	8010e10 <d3d7042d854d8905136f03fa99a8893947aafdc7>
 8007f44:	f008 fa22 	bl	801038c <bcbd76277dc83b5a545ee18a3f2075697c040c84>
 8007f48:	f00f f804 	bl	8016f54 <082eefb804d1e0ed7226bf17620f026c0888c274>
 8007f4c:	f00f f922 	bl	8017194 <73cd113f0512e09e8865b1dc11046143bbfb5214>
 8007f50:	f00c fe0a 	bl	8014b68 <294ac47dbf0553b0bc1a0d13a73dce6f2c303667>
 8007f54:	f00d fbac 	bl	80156b0 <1d524c1b514218a64c10ce09ef25ee3b26d5aac8>
 8007f58:	f00d ffb0 	bl	8015ebc <cb684a375f86ba40b2b36632ce4bd2a58554e76c>
 8007f5c:	f00f f9da 	bl	8017314 <9aa1c7f7136549b4c61c7ca6983f673760c5352f>
 8007f60:	f003 f9ec 	bl	800b33c <781f8340fa417dd87327132209f6d0b889d0ff2a>
 8007f64:	f8d9 3000 	ldr.w	r3, [r9]
 8007f68:	4818      	ldr	r0, [pc, #96]	; (8007fcc <EMBENET_NODE_Init+0x130>)
 8007f6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007f6e:	f506 5148 	add.w	r1, r6, #12800	; 0x3200
 8007f72:	f883 53a0 	strb.w	r5, [r3, #928]	; 0x3a0
 8007f76:	3128      	adds	r1, #40	; 0x28
 8007f78:	f7ff ff3c 	bl	8007df4 <EMBENET_NODE_TaskCreate>
 8007f7c:	2205      	movs	r2, #5
 8007f7e:	e9cd 2802 	strd	r2, r8, [sp, #8]
 8007f82:	4603      	mov	r3, r0
 8007f84:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
 8007f88:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <EMBENET_NODE_Init+0x134>)
 8007f8a:	f8c4 523c 	str.w	r5, [r4, #572]	; 0x23c
 8007f8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007f92:	f005 fb4b 	bl	800d62c <LOGGER_PrintLine>
 8007f96:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 8007f9a:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8007f9e:	eb06 1643 	add.w	r6, r6, r3, lsl #5
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <EMBENET_NODE_Init+0x138>)
 8007fa4:	7930      	ldrb	r0, [r6, #4]
 8007fa6:	9601      	str	r6, [sp, #4]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	f002 fb72 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8007fb8:	2000      	movs	r0, #0
 8007fba:	b005      	add	sp, #20
 8007fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc0:	0801a798 	.word	0x0801a798
 8007fc4:	20000034 	.word	0x20000034
 8007fc8:	0801a829 	.word	0x0801a829
 8007fcc:	08007cbd 	.word	0x08007cbd
 8007fd0:	0801a843 	.word	0x0801a843
 8007fd4:	08007bdd 	.word	0x08007bdd

08007fd8 <EMBENET_NODE_TaskDestroy>:
 8007fd8:	280a      	cmp	r0, #10
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	d80f      	bhi.n	8007ffe <EMBENET_NODE_TaskDestroy+0x26>
 8007fde:	4b08      	ldr	r3, [pc, #32]	; (8008000 <EMBENET_NODE_TaskDestroy+0x28>)
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8007fe6:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 8007fea:	f894 0244 	ldrb.w	r0, [r4, #580]	; 0x244
 8007fee:	281f      	cmp	r0, #31
 8007ff0:	d005      	beq.n	8007ffe <EMBENET_NODE_TaskDestroy+0x26>
 8007ff2:	f002 fc63 	bl	800a8bc <45b77a765926e830faa058addab54b36ccfddf75>
 8007ff6:	b110      	cbz	r0, 8007ffe <EMBENET_NODE_TaskDestroy+0x26>
 8007ff8:	231f      	movs	r3, #31
 8007ffa:	f884 3244 	strb.w	r3, [r4, #580]	; 0x244
 8007ffe:	bd10      	pop	{r4, pc}
 8008000:	20000034 	.word	0x20000034

08008004 <EMBENET_NODE_TaskSchedule>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	280a      	cmp	r0, #10
 800800a:	b08d      	sub	sp, #52	; 0x34
 800800c:	4604      	mov	r4, r0
 800800e:	4689      	mov	r9, r1
 8008010:	4615      	mov	r5, r2
 8008012:	4698      	mov	r8, r3
 8008014:	f200 80b2 	bhi.w	800817c <EMBENET_NODE_TaskSchedule+0x178>
 8008018:	2901      	cmp	r1, #1
 800801a:	f200 80af 	bhi.w	800817c <EMBENET_NODE_TaskSchedule+0x178>
 800801e:	4b5a      	ldr	r3, [pc, #360]	; (8008188 <EMBENET_NODE_TaskSchedule+0x184>)
 8008020:	681e      	ldr	r6, [r3, #0]
 8008022:	eb06 1740 	add.w	r7, r6, r0, lsl #5
 8008026:	f507 5b40 	add.w	fp, r7, #12288	; 0x3000
 800802a:	f89b 3244 	ldrb.w	r3, [fp, #580]	; 0x244
 800802e:	2b1f      	cmp	r3, #31
 8008030:	f000 80a4 	beq.w	800817c <EMBENET_NODE_TaskSchedule+0x178>
 8008034:	f100 0a01 	add.w	sl, r0, #1
 8008038:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 800803c:	f243 2328 	movw	r3, #12840	; 0x3228
 8008040:	f85a 3003 	ldr.w	r3, [sl, r3]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 809b 	beq.w	8008180 <EMBENET_NODE_TaskSchedule+0x17c>
 800804a:	2901      	cmp	r1, #1
 800804c:	d154      	bne.n	80080f8 <EMBENET_NODE_TaskSchedule+0xf4>
 800804e:	a909      	add	r1, sp, #36	; 0x24
 8008050:	a80a      	add	r0, sp, #40	; 0x28
 8008052:	f008 f977 	bl	8010344 <423de69afc5c7b88ba71928d815161412a3b9f11>
 8008056:	2800      	cmp	r0, #0
 8008058:	d04a      	beq.n	80080f0 <EMBENET_NODE_TaskSchedule+0xec>
 800805a:	4b4c      	ldr	r3, [pc, #304]	; (800818c <EMBENET_NODE_TaskSchedule+0x188>)
 800805c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008064:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008068:	fbb3 f3f1 	udiv	r3, r3, r1
 800806c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8008070:	fba3 0202 	umull	r0, r2, r3, r2
 8008074:	fb03 2301 	mla	r3, r3, r1, r2
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	9004      	str	r0, [sp, #16]
 800807c:	f002 fc38 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8008080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	1c6b      	adds	r3, r5, #1
 8008086:	9306      	str	r3, [sp, #24]
 8008088:	f148 0300 	adc.w	r3, r8, #0
 800808c:	9307      	str	r3, [sp, #28]
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	eb61 0101 	sbc.w	r1, r1, r1
 8008096:	2300      	movs	r3, #0
 8008098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800809c:	f7f8 fd76 	bl	8000b8c <__aeabi_ldivmod>
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	18c0      	adds	r0, r0, r3
 80080a4:	9b05      	ldr	r3, [sp, #20]
 80080a6:	eb43 0101 	adc.w	r1, r3, r1
 80080aa:	9b06      	ldr	r3, [sp, #24]
 80080ac:	4298      	cmp	r0, r3
 80080ae:	9b07      	ldr	r3, [sp, #28]
 80080b0:	4199      	sbcs	r1, r3
 80080b2:	d267      	bcs.n	8008184 <EMBENET_NODE_TaskSchedule+0x180>
 80080b4:	f243 232c 	movw	r3, #12844	; 0x322c
 80080b8:	f504 74c9 	add.w	r4, r4, #402	; 0x192
 80080bc:	f80a 9003 	strb.w	r9, [sl, r3]
 80080c0:	f243 2350 	movw	r3, #12880	; 0x3250
 80080c4:	18fa      	adds	r2, r7, r3
 80080c6:	50fd      	str	r5, [r7, r3]
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	f8c2 8004 	str.w	r8, [r2, #4]
 80080ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080d2:	1aea      	subs	r2, r5, r3
 80080d4:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 80080d8:	4b2d      	ldr	r3, [pc, #180]	; (8008190 <EMBENET_NODE_TaskSchedule+0x18c>)
 80080da:	f89b 0244 	ldrb.w	r0, [fp, #580]	; 0x244
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	434a      	muls	r2, r1
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	9401      	str	r4, [sp, #4]
 80080e6:	4649      	mov	r1, r9
 80080e8:	f002 fad8 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 80080ec:	2000      	movs	r0, #0
 80080ee:	e000      	b.n	80080f2 <EMBENET_NODE_TaskSchedule+0xee>
 80080f0:	2004      	movs	r0, #4
 80080f2:	b00d      	add	sp, #52	; 0x34
 80080f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f8:	f7ff fdb6 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 80080fc:	4285      	cmp	r5, r0
 80080fe:	eb78 0101 	sbcs.w	r1, r8, r1
 8008102:	d33f      	bcc.n	8008184 <EMBENET_NODE_TaskSchedule+0x180>
 8008104:	f243 232c 	movw	r3, #12844	; 0x322c
 8008108:	f04f 0900 	mov.w	r9, #0
 800810c:	f80a 9003 	strb.w	r9, [sl, r3]
 8008110:	f243 2a50 	movw	sl, #12880	; 0x3250
 8008114:	eb07 020a 	add.w	r2, r7, sl
 8008118:	f847 500a 	str.w	r5, [r7, sl]
 800811c:	f8c2 8004 	str.w	r8, [r2, #4]
 8008120:	9203      	str	r2, [sp, #12]
 8008122:	f7fe f85b 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8008126:	9a03      	ldr	r2, [sp, #12]
 8008128:	6855      	ldr	r5, [r2, #4]
 800812a:	f857 200a 	ldr.w	r2, [r7, sl]
 800812e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008132:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 8008136:	fba2 2100 	umull	r2, r1, r2, r0
 800813a:	fb00 1105 	mla	r1, r0, r5, r1
 800813e:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8008142:	f243 2030 	movw	r0, #12848	; 0x3230
 8008146:	5835      	ldr	r5, [r6, r0]
 8008148:	eb19 0003 	adds.w	r0, r9, r3
 800814c:	1a12      	subs	r2, r2, r0
 800814e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008152:	eb61 0105 	sbc.w	r1, r1, r5
 8008156:	4290      	cmp	r0, r2
 8008158:	eb79 0101 	sbcs.w	r1, r9, r1
 800815c:	d30b      	bcc.n	8008176 <EMBENET_NODE_TaskSchedule+0x172>
 800815e:	f504 74c9 	add.w	r4, r4, #402	; 0x192
 8008162:	490b      	ldr	r1, [pc, #44]	; (8008190 <EMBENET_NODE_TaskSchedule+0x18c>)
 8008164:	f89b 0244 	ldrb.w	r0, [fp, #580]	; 0x244
 8008168:	9100      	str	r1, [sp, #0]
 800816a:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800816e:	9601      	str	r6, [sp, #4]
 8008170:	2101      	movs	r1, #1
 8008172:	f002 fa93 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8008176:	f7fe f851 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800817a:	e7b7      	b.n	80080ec <EMBENET_NODE_TaskSchedule+0xe8>
 800817c:	2002      	movs	r0, #2
 800817e:	e7b8      	b.n	80080f2 <EMBENET_NODE_TaskSchedule+0xee>
 8008180:	2001      	movs	r0, #1
 8008182:	e7b6      	b.n	80080f2 <EMBENET_NODE_TaskSchedule+0xee>
 8008184:	2005      	movs	r0, #5
 8008186:	e7b4      	b.n	80080f2 <EMBENET_NODE_TaskSchedule+0xee>
 8008188:	20000034 	.word	0x20000034
 800818c:	0801a5e0 	.word	0x0801a5e0
 8008190:	08007bdd 	.word	0x08007bdd

08008194 <EMBENET_NODE_TaskCancel>:
 8008194:	280a      	cmp	r0, #10
 8008196:	b508      	push	{r3, lr}
 8008198:	d80c      	bhi.n	80081b4 <EMBENET_NODE_TaskCancel+0x20>
 800819a:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <EMBENET_NODE_TaskCancel+0x24>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f500 70c9 	add.w	r0, r0, #402	; 0x192
 80081a2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80081a6:	7918      	ldrb	r0, [r3, #4]
 80081a8:	281f      	cmp	r0, #31
 80081aa:	d003      	beq.n	80081b4 <EMBENET_NODE_TaskCancel+0x20>
 80081ac:	f002 fb6e 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 80081b0:	2000      	movs	r0, #0
 80081b2:	bd08      	pop	{r3, pc}
 80081b4:	2002      	movs	r0, #2
 80081b6:	e7fc      	b.n	80081b2 <EMBENET_NODE_TaskCancel+0x1e>
 80081b8:	20000034 	.word	0x20000034

080081bc <EMBENET_NODE_GetBorderRouterAddress>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	f00d ff1d 	bl	8015ffc <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 80081c2:	f080 0001 	eor.w	r0, r0, #1
 80081c6:	b2c0      	uxtb	r0, r0
 80081c8:	bd08      	pop	{r3, pc}

080081ca <EMBENET_NODE_GetUID>:
 80081ca:	b507      	push	{r0, r1, r2, lr}
 80081cc:	2002      	movs	r0, #2
 80081ce:	f000 f8d1 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80081d2:	2208      	movs	r2, #8
 80081d4:	1c41      	adds	r1, r0, #1
 80081d6:	4668      	mov	r0, sp
 80081d8:	f7ff fcf6 	bl	8007bc8 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80081dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e0:	b003      	add	sp, #12
 80081e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080081e8 <2b020927d3c6eb407223a1baa3d6ce3597a3f88d>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <2b020927d3c6eb407223a1baa3d6ce3597a3f88d+0x48>)
 80081ec:	681c      	ldr	r4, [r3, #0]
 80081ee:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 80081f2:	f008 f815 	bl	8010220 <f245cef569e100f3b51b8078c1d070e2f387d00a>
 80081f6:	f00a f985 	bl	8012504 <5b77f5d059012f38360090be73e77f682e6af1b1>
 80081fa:	f008 fe1d 	bl	8010e38 <530f39758cfcff95a518bf89df4776da9faf92b4>
 80081fe:	f00e ffd5 	bl	80171ac <6607d1a8e0084dff834e59246aa78b5f6da467d9>
 8008202:	f00e feb3 	bl	8016f6c <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c>
 8008206:	f00c fcb0 	bl	8014b6a <7642e1952f3dfa50bc246e452b3db5bce6f65fea>
 800820a:	f00d fa52 	bl	80156b2 <443e8a131efc1d3c180cec49dabd3d3f1c58eeac>
 800820e:	f00d faaf 	bl	8015770 <df2f78a5f231f323fc241372a3a00cee3087c107>
 8008212:	f00d fec9 	bl	8015fa8 <a60e70bd13e8775612e7fe5ae94a36c965317289>
 8008216:	f003 f8ab 	bl	800b370 <7d1d6e9032260bf29a701dae9a5813b859a1535c>
 800821a:	f8d4 43b0 	ldr.w	r4, [r4, #944]	; 0x3b0
 800821e:	b12c      	cbz	r4, 800822c <2b020927d3c6eb407223a1baa3d6ce3597a3f88d+0x44>
 8008220:	f7ff ffd3 	bl	80081ca <EMBENET_NODE_GetUID>
 8008224:	4623      	mov	r3, r4
 8008226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822a:	4718      	bx	r3
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	20000034 	.word	0x20000034

08008234 <EMBENET_NODE_Join>:
 8008234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008236:	4604      	mov	r4, r0
 8008238:	b320      	cbz	r0, 8008284 <EMBENET_NODE_Join+0x50>
 800823a:	4b13      	ldr	r3, [pc, #76]	; (8008288 <EMBENET_NODE_Join+0x54>)
 800823c:	4a13      	ldr	r2, [pc, #76]	; (800828c <EMBENET_NODE_Join+0x58>)
 800823e:	681d      	ldr	r5, [r3, #0]
 8008240:	2305      	movs	r3, #5
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	4b12      	ldr	r3, [pc, #72]	; (8008290 <EMBENET_NODE_Join+0x5c>)
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	ab02      	add	r3, sp, #8
 800824a:	e913 0003 	ldmdb	r3, {r0, r1}
 800824e:	f005 f9ed 	bl	800d62c <LOGGER_PrintLine>
 8008252:	f505 5347 	add.w	r3, r5, #12736	; 0x31c0
 8008256:	4622      	mov	r2, r4
 8008258:	3306      	adds	r3, #6
 800825a:	f104 0120 	add.w	r1, r4, #32
 800825e:	f852 0b04 	ldr.w	r0, [r2], #4
 8008262:	f843 0b04 	str.w	r0, [r3], #4
 8008266:	428a      	cmp	r2, r1
 8008268:	d1f9      	bne.n	800825e <EMBENET_NODE_Join+0x2a>
 800826a:	4621      	mov	r1, r4
 800826c:	2001      	movs	r0, #1
 800826e:	f005 ffc1 	bl	800e1f4 <bdbe454f364e40446632df307cd018fd5121d6b0>
 8008272:	f104 0010 	add.w	r0, r4, #16
 8008276:	f002 fbf5 	bl	800aa64 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8>
 800827a:	f7ff ffb5 	bl	80081e8 <2b020927d3c6eb407223a1baa3d6ce3597a3f88d>
 800827e:	2000      	movs	r0, #0
 8008280:	b003      	add	sp, #12
 8008282:	bd30      	pop	{r4, r5, pc}
 8008284:	2002      	movs	r0, #2
 8008286:	e7fb      	b.n	8008280 <EMBENET_NODE_Join+0x4c>
 8008288:	20000034 	.word	0x20000034
 800828c:	0801a86c 	.word	0x0801a86c
 8008290:	0801a798 	.word	0x0801a798

08008294 <EMBENET_NODE_GetRandomValue>:
 8008294:	f002 bb98 	b.w	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>

08008298 <EMBENET_NODE_GetVersion>:
 8008298:	b082      	sub	sp, #8
 800829a:	2000      	movs	r0, #0
 800829c:	b002      	add	sp, #8
 800829e:	4770      	bx	lr

080082a0 <EMBENET_NODE_GetGroupCount>:
 80082a0:	f00e beec 	b.w	801707c <84780c9f08e19cea1884da40f03f0c5650f281d0>

080082a4 <EMBENET_NODE_GetGroupByIndex>:
 80082a4:	b507      	push	{r0, r1, r2, lr}
 80082a6:	2300      	movs	r3, #0
 80082a8:	a901      	add	r1, sp, #4
 80082aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80082ae:	f00e fef5 	bl	801709c <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>
 80082b2:	b128      	cbz	r0, 80082c0 <EMBENET_NODE_GetGroupByIndex+0x1c>
 80082b4:	2202      	movs	r2, #2
 80082b6:	a901      	add	r1, sp, #4
 80082b8:	f10d 0006 	add.w	r0, sp, #6
 80082bc:	f7ff fc84 	bl	8007bc8 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80082c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80082c4:	b003      	add	sp, #12
 80082c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080082cc <62d16b48e9529b8b29eb67945bd8081213959681>:
 80082cc:	b530      	push	{r4, r5, lr}
 80082ce:	4b21      	ldr	r3, [pc, #132]	; (8008354 <62d16b48e9529b8b29eb67945bd8081213959681+0x88>)
 80082d0:	681c      	ldr	r4, [r3, #0]
 80082d2:	f604 258c 	addw	r5, r4, #2700	; 0xa8c
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	2245      	movs	r2, #69	; 0x45
 80082da:	2100      	movs	r1, #0
 80082dc:	4628      	mov	r0, r5
 80082de:	f010 fe4f 	bl	8018f80 <memset>
 80082e2:	2304      	movs	r3, #4
 80082e4:	f884 3a8d 	strb.w	r3, [r4, #2701]	; 0xa8d
 80082e8:	23ca      	movs	r3, #202	; 0xca
 80082ea:	f884 3a8e 	strb.w	r3, [r4, #2702]	; 0xa8e
 80082ee:	23fe      	movs	r3, #254	; 0xfe
 80082f0:	f884 3a8f 	strb.w	r3, [r4, #2703]	; 0xa8f
 80082f4:	2305      	movs	r3, #5
 80082f6:	f884 3ac0 	strb.w	r3, [r4, #2752]	; 0xac0
 80082fa:	f001 fa85 	bl	8009808 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 80082fe:	6803      	ldr	r3, [r0, #0]
 8008300:	f8c4 3ac1 	str.w	r3, [r4, #2753]	; 0xac1
 8008304:	6843      	ldr	r3, [r0, #4]
 8008306:	f8c4 3ac5 	str.w	r3, [r4, #2757]	; 0xac5
 800830a:	2302      	movs	r3, #2
 800830c:	f884 3aaf 	strb.w	r3, [r4, #2735]	; 0xaaf
 8008310:	f7fd ffa4 	bl	800625c <EMBENET_EUI64_Get>
 8008314:	aa06      	add	r2, sp, #24
 8008316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800831a:	f604 23b8 	addw	r3, r4, #2744	; 0xab8
 800831e:	f504 612b 	add.w	r1, r4, #2736	; 0xab0
 8008322:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008326:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800832a:	428b      	cmp	r3, r1
 800832c:	d1f9      	bne.n	8008322 <62d16b48e9529b8b29eb67945bd8081213959681+0x56>
 800832e:	4668      	mov	r0, sp
 8008330:	f604 21af 	addw	r1, r4, #2735	; 0xaaf
 8008334:	f001 f932 	bl	800959c <b4e42b26493966bc617e4c89906d69f121a97c96>
 8008338:	466b      	mov	r3, sp
 800833a:	f105 0012 	add.w	r0, r5, #18
 800833e:	aa04      	add	r2, sp, #16
 8008340:	f853 1b04 	ldr.w	r1, [r3], #4
 8008344:	f840 1b04 	str.w	r1, [r0], #4
 8008348:	4293      	cmp	r3, r2
 800834a:	d1f9      	bne.n	8008340 <62d16b48e9529b8b29eb67945bd8081213959681+0x74>
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	7003      	strb	r3, [r0, #0]
 8008350:	b009      	add	sp, #36	; 0x24
 8008352:	bd30      	pop	{r4, r5, pc}
 8008354:	20000034 	.word	0x20000034

08008358 <cb03b4776ba370511f18aa83227a6716bbc89321>:
 8008358:	b510      	push	{r4, lr}
 800835a:	f7fd ff3f 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <cb03b4776ba370511f18aa83227a6716bbc89321+0x18>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f893 4a8c 	ldrb.w	r4, [r3, #2700]	; 0xa8c
 8008366:	f7fd ff59 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800836a:	4620      	mov	r0, r4
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	20000034 	.word	0x20000034

08008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>:
 8008374:	b508      	push	{r3, lr}
 8008376:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x38>)
 8008378:	3801      	subs	r0, #1
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2804      	cmp	r0, #4
 800837e:	d810      	bhi.n	80083a2 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x2e>
 8008380:	e8df f000 	tbb	[pc, r0]
 8008384:	090f0603 	.word	0x090f0603
 8008388:	0c          	.byte	0x0c
 8008389:	00          	.byte	0x00
 800838a:	f603 209e 	addw	r0, r3, #2718	; 0xa9e
 800838e:	bd08      	pop	{r3, pc}
 8008390:	f603 20af 	addw	r0, r3, #2735	; 0xaaf
 8008394:	e7fb      	b.n	800838e <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 8008396:	f603 208d 	addw	r0, r3, #2701	; 0xa8d
 800839a:	e7f8      	b.n	800838e <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 800839c:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 80083a0:	e7f5      	b.n	800838e <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 80083a2:	4903      	ldr	r1, [pc, #12]	; (80083b0 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x3c>)
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x40>)
 80083a6:	2257      	movs	r2, #87	; 0x57
 80083a8:	f7f9 f8f2 	bl	8001590 <EXPECT_OnAbortHandler>
 80083ac:	20000034 	.word	0x20000034
 80083b0:	0801a890 	.word	0x0801a890
 80083b4:	0801a8f2 	.word	0x0801a8f2

080083b8 <00481873317fdef387db1bb310377b408b8e47be>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4b1f      	ldr	r3, [pc, #124]	; (8008438 <00481873317fdef387db1bb310377b408b8e47be+0x80>)
 80083bc:	4604      	mov	r4, r0
 80083be:	681d      	ldr	r5, [r3, #0]
 80083c0:	f7fd ff0c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80083c4:	4623      	mov	r3, r4
 80083c6:	f813 2b10 	ldrb.w	r2, [r3], #16
 80083ca:	3a01      	subs	r2, #1
 80083cc:	2a04      	cmp	r2, #4
 80083ce:	d82d      	bhi.n	800842c <00481873317fdef387db1bb310377b408b8e47be+0x74>
 80083d0:	e8df f002 	tbb	[pc, r2]
 80083d4:	1a2c1103 	.word	0x1a2c1103
 80083d8:	23          	.byte	0x23
 80083d9:	00          	.byte	0x00
 80083da:	f605 259e 	addw	r5, r5, #2718	; 0xa9e
 80083de:	f854 2b04 	ldr.w	r2, [r4], #4
 80083e2:	f845 2b04 	str.w	r2, [r5], #4
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d1f9      	bne.n	80083de <00481873317fdef387db1bb310377b408b8e47be+0x26>
 80083ea:	7823      	ldrb	r3, [r4, #0]
 80083ec:	702b      	strb	r3, [r5, #0]
 80083ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f2:	f7fd bf13 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80083f6:	f605 25af 	addw	r5, r5, #2735	; 0xaaf
 80083fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80083fe:	f845 2b04 	str.w	r2, [r5], #4
 8008402:	429c      	cmp	r4, r3
 8008404:	d1f9      	bne.n	80083fa <00481873317fdef387db1bb310377b408b8e47be+0x42>
 8008406:	e7f0      	b.n	80083ea <00481873317fdef387db1bb310377b408b8e47be+0x32>
 8008408:	f605 258d 	addw	r5, r5, #2701	; 0xa8d
 800840c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008410:	f845 2b04 	str.w	r2, [r5], #4
 8008414:	429c      	cmp	r4, r3
 8008416:	d1f9      	bne.n	800840c <00481873317fdef387db1bb310377b408b8e47be+0x54>
 8008418:	e7e7      	b.n	80083ea <00481873317fdef387db1bb310377b408b8e47be+0x32>
 800841a:	f505 652c 	add.w	r5, r5, #2752	; 0xac0
 800841e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008422:	f845 2b04 	str.w	r2, [r5], #4
 8008426:	429c      	cmp	r4, r3
 8008428:	d1f9      	bne.n	800841e <00481873317fdef387db1bb310377b408b8e47be+0x66>
 800842a:	e7de      	b.n	80083ea <00481873317fdef387db1bb310377b408b8e47be+0x32>
 800842c:	4903      	ldr	r1, [pc, #12]	; (800843c <00481873317fdef387db1bb310377b408b8e47be+0x84>)
 800842e:	4804      	ldr	r0, [pc, #16]	; (8008440 <00481873317fdef387db1bb310377b408b8e47be+0x88>)
 8008430:	2265      	movs	r2, #101	; 0x65
 8008432:	f7f9 f8ad 	bl	8001590 <EXPECT_OnAbortHandler>
 8008436:	bf00      	nop
 8008438:	20000034 	.word	0x20000034
 800843c:	0801a890 	.word	0x0801a890
 8008440:	0801a8f2 	.word	0x0801a8f2

08008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x78>)
 8008448:	b088      	sub	sp, #32
 800844a:	681c      	ldr	r4, [r3, #0]
 800844c:	9001      	str	r0, [sp, #4]
 800844e:	f7fd fec5 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8008452:	9801      	ldr	r0, [sp, #4]
 8008454:	7803      	ldrb	r3, [r0, #0]
 8008456:	3b01      	subs	r3, #1
 8008458:	2b04      	cmp	r3, #4
 800845a:	d82c      	bhi.n	80084b6 <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x72>
 800845c:	e8df f003 	tbb	[pc, r3]
 8008460:	10160d03 	.word	0x10160d03
 8008464:	13          	.byte	0x13
 8008465:	00          	.byte	0x00
 8008466:	f604 219e 	addw	r1, r4, #2718	; 0xa9e
 800846a:	f000 ff2f 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800846e:	4604      	mov	r4, r0
 8008470:	f7fd fed4 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8008474:	4620      	mov	r0, r4
 8008476:	b008      	add	sp, #32
 8008478:	bd10      	pop	{r4, pc}
 800847a:	f604 21af 	addw	r1, r4, #2735	; 0xaaf
 800847e:	e7f4      	b.n	800846a <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 8008480:	f604 218d 	addw	r1, r4, #2701	; 0xa8d
 8008484:	e7f1      	b.n	800846a <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 8008486:	f504 612c 	add.w	r1, r4, #2752	; 0xac0
 800848a:	e7ee      	b.n	800846a <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 800848c:	2303      	movs	r3, #3
 800848e:	f88d 300c 	strb.w	r3, [sp, #12]
 8008492:	f8d4 3ac1 	ldr.w	r3, [r4, #2753]	; 0xac1
 8008496:	f8cd 300d 	str.w	r3, [sp, #13]
 800849a:	f8d4 3ac5 	ldr.w	r3, [r4, #2757]	; 0xac5
 800849e:	f8cd 3011 	str.w	r3, [sp, #17]
 80084a2:	f8d4 3ab0 	ldr.w	r3, [r4, #2736]	; 0xab0
 80084a6:	f8cd 3015 	str.w	r3, [sp, #21]
 80084aa:	f8d4 3ab4 	ldr.w	r3, [r4, #2740]	; 0xab4
 80084ae:	f8cd 3019 	str.w	r3, [sp, #25]
 80084b2:	a903      	add	r1, sp, #12
 80084b4:	e7d9      	b.n	800846a <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 80084b6:	2400      	movs	r4, #0
 80084b8:	e7da      	b.n	8008470 <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x2c>
 80084ba:	bf00      	nop
 80084bc:	20000034 	.word	0x20000034

080084c0 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 80084c0:	3901      	subs	r1, #1
 80084c2:	f100 0308 	add.w	r3, r0, #8
 80084c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084ca:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80084ce:	4283      	cmp	r3, r0
 80084d0:	d1f9      	bne.n	80084c6 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 80084d2:	4770      	bx	lr

080084d4 <80ac95a5fac5ddca81a9142111919316b6f3e38c>:
 80084d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x3c>)
 80084d8:	281d      	cmp	r0, #29
 80084da:	681d      	ldr	r5, [r3, #0]
 80084dc:	d905      	bls.n	80084ea <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x16>
 80084de:	490d      	ldr	r1, [pc, #52]	; (8008514 <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x40>)
 80084e0:	480d      	ldr	r0, [pc, #52]	; (8008518 <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x44>)
 80084e2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80084e6:	f7f9 f853 	bl	8001590 <EXPECT_OnAbortHandler>
 80084ea:	232a      	movs	r3, #42	; 0x2a
 80084ec:	fb03 f400 	mul.w	r4, r3, r0
 80084f0:	f604 310a 	addw	r1, r4, #2826	; 0xb0a
 80084f4:	4429      	add	r1, r5
 80084f6:	4668      	mov	r0, sp
 80084f8:	f7ff ffe2 	bl	80084c0 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80084fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008500:	f00f faa4 	bl	8017a4c <24da9999ddd48c4f3f286257592f6695f75e30ed>
 8008504:	4425      	add	r5, r4
 8008506:	2300      	movs	r3, #0
 8008508:	f885 3b08 	strb.w	r3, [r5, #2824]	; 0xb08
 800850c:	b003      	add	sp, #12
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	20000034 	.word	0x20000034
 8008514:	0801a905 	.word	0x0801a905
 8008518:	0801a967 	.word	0x0801a967

0800851c <a65a9e0e9d2172731582a842552346b36304a3e3>:
 800851c:	b510      	push	{r4, lr}
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <a65a9e0e9d2172731582a842552346b36304a3e3+0x1c>)
 8008520:	681c      	ldr	r4, [r3, #0]
 8008522:	f240 42ee 	movw	r2, #1262	; 0x4ee
 8008526:	2100      	movs	r1, #0
 8008528:	f604 3008 	addw	r0, r4, #2824	; 0xb08
 800852c:	f010 fd28 	bl	8018f80 <memset>
 8008530:	231e      	movs	r3, #30
 8008532:	f884 3ff4 	strb.w	r3, [r4, #4084]	; 0xff4
 8008536:	bd10      	pop	{r4, pc}
 8008538:	20000034 	.word	0x20000034

0800853c <5dd6fb766eeca12f408d546c8d4a40a272e3f785>:
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0x1c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2000      	movs	r0, #0
 8008542:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
 8008546:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 800854a:	b109      	cbz	r1, 8008550 <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0x14>
 800854c:	3001      	adds	r0, #1
 800854e:	b2c0      	uxtb	r0, r0
 8008550:	332a      	adds	r3, #42	; 0x2a
 8008552:	4293      	cmp	r3, r2
 8008554:	d1f7      	bne.n	8008546 <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0xa>
 8008556:	4770      	bx	lr
 8008558:	20000034 	.word	0x20000034

0800855c <NEIGHBORS_GetNeighborInfo>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	b085      	sub	sp, #20
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <NEIGHBORS_GetNeighborInfo+0x8c>)
 8008564:	466d      	mov	r5, sp
 8008566:	4688      	mov	r8, r1
 8008568:	2210      	movs	r2, #16
 800856a:	2100      	movs	r1, #0
 800856c:	4604      	mov	r4, r0
 800856e:	4628      	mov	r0, r5
 8008570:	f8d3 a000 	ldr.w	sl, [r3]
 8008574:	f010 fd04 	bl	8018f80 <memset>
 8008578:	f7ff ffe0 	bl	800853c <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 800857c:	4540      	cmp	r0, r8
 800857e:	d922      	bls.n	80085c6 <NEIGHBORS_GetNeighborInfo+0x6a>
 8008580:	2600      	movs	r6, #0
 8008582:	f60a 370a 	addw	r7, sl, #2826	; 0xb0a
 8008586:	46b1      	mov	r9, r6
 8008588:	f04f 0b02 	mov.w	fp, #2
 800858c:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 8008590:	b1a1      	cbz	r1, 80085bc <NEIGHBORS_GetNeighborInfo+0x60>
 8008592:	45c8      	cmp	r8, r9
 8008594:	d110      	bne.n	80085b8 <NEIGHBORS_GetNeighborInfo+0x5c>
 8008596:	4639      	mov	r1, r7
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff ff91 	bl	80084c0 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 800859e:	7ab9      	ldrb	r1, [r7, #10]
 80085a0:	f88d 1008 	strb.w	r1, [sp, #8]
 80085a4:	f89a 1ff4 	ldrb.w	r1, [sl, #4084]	; 0xff4
 80085a8:	42b1      	cmp	r1, r6
 80085aa:	f04f 0301 	mov.w	r3, #1
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	d110      	bne.n	80085d6 <NEIGHBORS_GetNeighborInfo+0x7a>
 80085b4:	f88d 2009 	strb.w	r2, [sp, #9]
 80085b8:	f109 0901 	add.w	r9, r9, #1
 80085bc:	3601      	adds	r6, #1
 80085be:	2e1e      	cmp	r6, #30
 80085c0:	f107 072a 	add.w	r7, r7, #42	; 0x2a
 80085c4:	d1e2      	bne.n	800858c <NEIGHBORS_GetNeighborInfo+0x30>
 80085c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80085ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80085ce:	4620      	mov	r0, r4
 80085d0:	b005      	add	sp, #20
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80085da:	2900      	cmp	r1, #0
 80085dc:	bf0c      	ite	eq
 80085de:	4659      	moveq	r1, fp
 80085e0:	4619      	movne	r1, r3
 80085e2:	f88d 1009 	strb.w	r1, [sp, #9]
 80085e6:	e7e7      	b.n	80085b8 <NEIGHBORS_GetNeighborInfo+0x5c>
 80085e8:	20000034 	.word	0x20000034

080085ec <8cfb94024ca5b6140fb568011b57a078749e2ff0>:
 80085ec:	b508      	push	{r3, lr}
 80085ee:	4b09      	ldr	r3, [pc, #36]	; (8008614 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x28>)
 80085f0:	281d      	cmp	r0, #29
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	d805      	bhi.n	8008602 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x16>
 80085f6:	222a      	movs	r2, #42	; 0x2a
 80085f8:	fb02 3000 	mla	r0, r2, r0, r3
 80085fc:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8008600:	b923      	cbnz	r3, 800860c <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x20>
 8008602:	4905      	ldr	r1, [pc, #20]	; (8008618 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x2c>)
 8008604:	4805      	ldr	r0, [pc, #20]	; (800861c <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x30>)
 8008606:	2260      	movs	r2, #96	; 0x60
 8008608:	f7f8 ffc2 	bl	8001590 <EXPECT_OnAbortHandler>
 800860c:	f8b0 0b12 	ldrh.w	r0, [r0, #2834]	; 0xb12
 8008610:	bd08      	pop	{r3, pc}
 8008612:	bf00      	nop
 8008614:	20000034 	.word	0x20000034
 8008618:	0801a905 	.word	0x0801a905
 800861c:	0801a975 	.word	0x0801a975

08008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>:
 8008620:	b508      	push	{r3, lr}
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x28>)
 8008624:	281d      	cmp	r0, #29
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	d805      	bhi.n	8008636 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x16>
 800862a:	222a      	movs	r2, #42	; 0x2a
 800862c:	fb02 3000 	mla	r0, r2, r0, r3
 8008630:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8008634:	b923      	cbnz	r3, 8008640 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x20>
 8008636:	4905      	ldr	r1, [pc, #20]	; (800864c <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x2c>)
 8008638:	4805      	ldr	r0, [pc, #20]	; (8008650 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x30>)
 800863a:	2269      	movs	r2, #105	; 0x69
 800863c:	f7f8 ffa8 	bl	8001590 <EXPECT_OnAbortHandler>
 8008640:	f8a0 1b12 	strh.w	r1, [r0, #2834]	; 0xb12
 8008644:	bd08      	pop	{r3, pc}
 8008646:	bf00      	nop
 8008648:	20000034 	.word	0x20000034
 800864c:	0801a905 	.word	0x0801a905
 8008650:	0801a967 	.word	0x0801a967

08008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x34>)
 8008658:	291d      	cmp	r1, #29
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	d805      	bhi.n	800866a <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x16>
 800865e:	242a      	movs	r4, #42	; 0x2a
 8008660:	fb04 3101 	mla	r1, r4, r1, r3
 8008664:	f891 3b08 	ldrb.w	r3, [r1, #2824]	; 0xb08
 8008668:	b923      	cbnz	r3, 8008674 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x20>
 800866a:	4908      	ldr	r1, [pc, #32]	; (800868c <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x38>)
 800866c:	4808      	ldr	r0, [pc, #32]	; (8008690 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x3c>)
 800866e:	2271      	movs	r2, #113	; 0x71
 8008670:	f7f8 ff8e 	bl	8001590 <EXPECT_OnAbortHandler>
 8008674:	f8b1 4b18 	ldrh.w	r4, [r1, #2840]	; 0xb18
 8008678:	f991 3b14 	ldrsb.w	r3, [r1, #2836]	; 0xb14
 800867c:	f8b1 1b16 	ldrh.w	r1, [r1, #2838]	; 0xb16
 8008680:	8001      	strh	r1, [r0, #0]
 8008682:	8044      	strh	r4, [r0, #2]
 8008684:	7103      	strb	r3, [r0, #4]
 8008686:	bd10      	pop	{r4, pc}
 8008688:	20000034 	.word	0x20000034
 800868c:	0801a905 	.word	0x0801a905
 8008690:	0801a986 	.word	0x0801a986

08008694 <5b63cb34daec6664391bfc943c457a7558e21261>:
 8008694:	b507      	push	{r0, r1, r2, lr}
 8008696:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <5b63cb34daec6664391bfc943c457a7558e21261+0x60>)
 8008698:	281d      	cmp	r0, #29
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	d805      	bhi.n	80086aa <5b63cb34daec6664391bfc943c457a7558e21261+0x16>
 800869e:	222a      	movs	r2, #42	; 0x2a
 80086a0:	fb02 3000 	mla	r0, r2, r0, r3
 80086a4:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 80086a8:	b923      	cbnz	r3, 80086b4 <5b63cb34daec6664391bfc943c457a7558e21261+0x20>
 80086aa:	4913      	ldr	r1, [pc, #76]	; (80086f8 <5b63cb34daec6664391bfc943c457a7558e21261+0x64>)
 80086ac:	4813      	ldr	r0, [pc, #76]	; (80086fc <5b63cb34daec6664391bfc943c457a7558e21261+0x68>)
 80086ae:	227e      	movs	r2, #126	; 0x7e
 80086b0:	f7f8 ff6e 	bl	8001590 <EXPECT_OnAbortHandler>
 80086b4:	f8b0 3b18 	ldrh.w	r3, [r0, #2840]	; 0xb18
 80086b8:	f8b0 2b16 	ldrh.w	r2, [r0, #2838]	; 0xb16
 80086bc:	4293      	cmp	r3, r2
 80086be:	d90e      	bls.n	80086de <5b63cb34daec6664391bfc943c457a7558e21261+0x4a>
 80086c0:	2303      	movs	r3, #3
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <5b63cb34daec6664391bfc943c457a7558e21261+0x6c>)
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	ab02      	add	r3, sp, #8
 80086ca:	e913 0003 	ldmdb	r3, {r0, r1}
 80086ce:	4a0d      	ldr	r2, [pc, #52]	; (8008704 <5b63cb34daec6664391bfc943c457a7558e21261+0x70>)
 80086d0:	f004 ffac 	bl	800d62c <LOGGER_PrintLine>
 80086d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80086d8:	b003      	add	sp, #12
 80086da:	f85d fb04 	ldr.w	pc, [sp], #4
 80086de:	2a00      	cmp	r2, #0
 80086e0:	d0f8      	beq.n	80086d4 <5b63cb34daec6664391bfc943c457a7558e21261+0x40>
 80086e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80086e6:	fb01 f003 	mul.w	r0, r1, r3
 80086ea:	fbb0 f0f2 	udiv	r0, r0, r2
 80086ee:	b280      	uxth	r0, r0
 80086f0:	e7f2      	b.n	80086d8 <5b63cb34daec6664391bfc943c457a7558e21261+0x44>
 80086f2:	bf00      	nop
 80086f4:	20000034 	.word	0x20000034
 80086f8:	0801a905 	.word	0x0801a905
 80086fc:	0801a967 	.word	0x0801a967
 8008700:	0801a997 	.word	0x0801a997
 8008704:	0801a9a1 	.word	0x0801a9a1

08008708 <7df3ba357f7f62320ead08135508bf101de27d80>:
 8008708:	b510      	push	{r4, lr}
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <7df3ba357f7f62320ead08135508bf101de27d80+0x30>)
 800870c:	291d      	cmp	r1, #29
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	d805      	bhi.n	800871e <7df3ba357f7f62320ead08135508bf101de27d80+0x16>
 8008712:	242a      	movs	r4, #42	; 0x2a
 8008714:	fb04 3101 	mla	r1, r4, r1, r3
 8008718:	f891 3b08 	ldrb.w	r3, [r1, #2824]	; 0xb08
 800871c:	b923      	cbnz	r3, 8008728 <7df3ba357f7f62320ead08135508bf101de27d80+0x20>
 800871e:	4907      	ldr	r1, [pc, #28]	; (800873c <7df3ba357f7f62320ead08135508bf101de27d80+0x34>)
 8008720:	4807      	ldr	r0, [pc, #28]	; (8008740 <7df3ba357f7f62320ead08135508bf101de27d80+0x38>)
 8008722:	2293      	movs	r2, #147	; 0x93
 8008724:	f7f8 ff34 	bl	8001590 <EXPECT_OnAbortHandler>
 8008728:	f8d1 3b1a 	ldr.w	r3, [r1, #2842]	; 0xb1a
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	f891 3b1e 	ldrb.w	r3, [r1, #2846]	; 0xb1e
 8008732:	7103      	strb	r3, [r0, #4]
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	20000034 	.word	0x20000034
 800873c:	0801a905 	.word	0x0801a905
 8008740:	0801a967 	.word	0x0801a967

08008744 <5004528a8ffa5581bbd161cf1057e8d5d3867843>:
 8008744:	b507      	push	{r0, r1, r2, lr}
 8008746:	a902      	add	r1, sp, #8
 8008748:	e901 000c 	stmdb	r1, {r2, r3}
 800874c:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x3c>)
 800874e:	281d      	cmp	r0, #29
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	d805      	bhi.n	8008760 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x1c>
 8008754:	222a      	movs	r2, #42	; 0x2a
 8008756:	fb02 3000 	mla	r0, r2, r0, r3
 800875a:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800875e:	b923      	cbnz	r3, 800876a <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x26>
 8008760:	4908      	ldr	r1, [pc, #32]	; (8008784 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x40>)
 8008762:	4809      	ldr	r0, [pc, #36]	; (8008788 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x44>)
 8008764:	229c      	movs	r2, #156	; 0x9c
 8008766:	f7f8 ff13 	bl	8001590 <EXPECT_OnAbortHandler>
 800876a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800876e:	9a00      	ldr	r2, [sp, #0]
 8008770:	f8c0 2b1a 	str.w	r2, [r0, #2842]	; 0xb1a
 8008774:	f880 3b1e 	strb.w	r3, [r0, #2846]	; 0xb1e
 8008778:	b003      	add	sp, #12
 800877a:	f85d fb04 	ldr.w	pc, [sp], #4
 800877e:	bf00      	nop
 8008780:	20000034 	.word	0x20000034
 8008784:	0801a905 	.word	0x0801a905
 8008788:	0801a967 	.word	0x0801a967

0800878c <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x3c>)
 8008790:	681c      	ldr	r4, [r3, #0]
 8008792:	f7fd ffff 	bl	8006794 <EMBENET_RADIO_GetCapabilities>
 8008796:	f604 330a 	addw	r3, r4, #2826	; 0xb0a
 800879a:	4601      	mov	r1, r0
 800879c:	f604 74f6 	addw	r4, r4, #4086	; 0xff6
 80087a0:	2000      	movs	r0, #0
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f813 5c02 	ldrb.w	r5, [r3, #-2]
 80087a8:	b155      	cbz	r5, 80087c0 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x34>
 80087aa:	7d5d      	ldrb	r5, [r3, #21]
 80087ac:	4295      	cmp	r5, r2
 80087ae:	d807      	bhi.n	80087c0 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x34>
 80087b0:	f993 700a 	ldrsb.w	r7, [r3, #10]
 80087b4:	f991 601c 	ldrsb.w	r6, [r1, #28]
 80087b8:	42b7      	cmp	r7, r6
 80087ba:	bfa4      	itt	ge
 80087bc:	4618      	movge	r0, r3
 80087be:	462a      	movge	r2, r5
 80087c0:	332a      	adds	r3, #42	; 0x2a
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	d1ee      	bne.n	80087a4 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x18>
 80087c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c8:	20000034 	.word	0x20000034

080087cc <4f011439265b330ba2d9f164eb1f6389866b01df>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <4f011439265b330ba2d9f164eb1f6389866b01df+0x58>)
 80087d0:	281d      	cmp	r0, #29
 80087d2:	681c      	ldr	r4, [r3, #0]
 80087d4:	d805      	bhi.n	80087e2 <4f011439265b330ba2d9f164eb1f6389866b01df+0x16>
 80087d6:	232a      	movs	r3, #42	; 0x2a
 80087d8:	fb03 4300 	mla	r3, r3, r0, r4
 80087dc:	f893 2b08 	ldrb.w	r2, [r3, #2824]	; 0xb08
 80087e0:	b922      	cbnz	r2, 80087ec <4f011439265b330ba2d9f164eb1f6389866b01df+0x20>
 80087e2:	4911      	ldr	r1, [pc, #68]	; (8008828 <4f011439265b330ba2d9f164eb1f6389866b01df+0x5c>)
 80087e4:	4811      	ldr	r0, [pc, #68]	; (800882c <4f011439265b330ba2d9f164eb1f6389866b01df+0x60>)
 80087e6:	22cc      	movs	r2, #204	; 0xcc
 80087e8:	f7f8 fed2 	bl	8001590 <EXPECT_OnAbortHandler>
 80087ec:	f893 2b20 	ldrb.w	r2, [r3, #2848]	; 0xb20
 80087f0:	b192      	cbz	r2, 8008818 <4f011439265b330ba2d9f164eb1f6389866b01df+0x4c>
 80087f2:	680d      	ldr	r5, [r1, #0]
 80087f4:	790a      	ldrb	r2, [r1, #4]
 80087f6:	f8d3 1b21 	ldr.w	r1, [r3, #2849]	; 0xb21
 80087fa:	f893 6b25 	ldrb.w	r6, [r3, #2853]	; 0xb25
 80087fe:	1a6d      	subs	r5, r5, r1
 8008800:	eb62 0206 	sbc.w	r2, r2, r6
 8008804:	4e0a      	ldr	r6, [pc, #40]	; (8008830 <4f011439265b330ba2d9f164eb1f6389866b01df+0x64>)
 8008806:	2100      	movs	r1, #0
 8008808:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 800880c:	42ae      	cmp	r6, r5
 800880e:	eb71 0202 	sbcs.w	r2, r1, r2
 8008812:	bf38      	it	cc
 8008814:	f883 1b20 	strbcc.w	r1, [r3, #2848]	; 0xb20
 8008818:	232a      	movs	r3, #42	; 0x2a
 800881a:	fb03 4400 	mla	r4, r3, r0, r4
 800881e:	f894 0b20 	ldrb.w	r0, [r4, #2848]	; 0xb20
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	20000034 	.word	0x20000034
 8008828:	0801a905 	.word	0x0801a905
 800882c:	0801a975 	.word	0x0801a975
 8008830:	000f4240 	.word	0x000f4240

08008834 <027deecf67887395ef5db16208d3312ee727e45e>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <027deecf67887395ef5db16208d3312ee727e45e+0x40>)
 8008838:	281d      	cmp	r0, #29
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	d805      	bhi.n	800884a <027deecf67887395ef5db16208d3312ee727e45e+0x16>
 800883e:	232a      	movs	r3, #42	; 0x2a
 8008840:	fb03 2300 	mla	r3, r3, r0, r2
 8008844:	f893 4b08 	ldrb.w	r4, [r3, #2824]	; 0xb08
 8008848:	b924      	cbnz	r4, 8008854 <027deecf67887395ef5db16208d3312ee727e45e+0x20>
 800884a:	490b      	ldr	r1, [pc, #44]	; (8008878 <027deecf67887395ef5db16208d3312ee727e45e+0x44>)
 800884c:	480b      	ldr	r0, [pc, #44]	; (800887c <027deecf67887395ef5db16208d3312ee727e45e+0x48>)
 800884e:	22e0      	movs	r2, #224	; 0xe0
 8008850:	f7f8 fe9e 	bl	8001590 <EXPECT_OnAbortHandler>
 8008854:	2401      	movs	r4, #1
 8008856:	f883 4b20 	strb.w	r4, [r3, #2848]	; 0xb20
 800885a:	680c      	ldr	r4, [r1, #0]
 800885c:	f8c3 4b21 	str.w	r4, [r3, #2849]	; 0xb21
 8008860:	7909      	ldrb	r1, [r1, #4]
 8008862:	f883 1b25 	strb.w	r1, [r3, #2853]	; 0xb25
 8008866:	f892 3ff4 	ldrb.w	r3, [r2, #4084]	; 0xff4
 800886a:	1a1b      	subs	r3, r3, r0
 800886c:	4258      	negs	r0, r3
 800886e:	4158      	adcs	r0, r3
 8008870:	bd10      	pop	{r4, pc}
 8008872:	bf00      	nop
 8008874:	20000034 	.word	0x20000034
 8008878:	0801a905 	.word	0x0801a905
 800887c:	0801a975 	.word	0x0801a975

08008880 <0a8a8543f799df9767389ce496f81ab8433a71f4>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x40>)
 8008884:	681c      	ldr	r4, [r3, #0]
 8008886:	4607      	mov	r7, r0
 8008888:	f604 360a 	addw	r6, r4, #2826	; 0xb0a
 800888c:	2500      	movs	r5, #0
 800888e:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 8008892:	b12b      	cbz	r3, 80088a0 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x20>
 8008894:	2208      	movs	r2, #8
 8008896:	4639      	mov	r1, r7
 8008898:	4630      	mov	r0, r6
 800889a:	f010 fb47 	bl	8018f2c <memcmp>
 800889e:	b148      	cbz	r0, 80088b4 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x34>
 80088a0:	3501      	adds	r5, #1
 80088a2:	2d1e      	cmp	r5, #30
 80088a4:	f106 062a 	add.w	r6, r6, #42	; 0x2a
 80088a8:	d1f1      	bne.n	800888e <0a8a8543f799df9767389ce496f81ab8433a71f4+0xe>
 80088aa:	4906      	ldr	r1, [pc, #24]	; (80088c4 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x44>)
 80088ac:	4806      	ldr	r0, [pc, #24]	; (80088c8 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x48>)
 80088ae:	22fd      	movs	r2, #253	; 0xfd
 80088b0:	f7f8 fe6e 	bl	8001590 <EXPECT_OnAbortHandler>
 80088b4:	232a      	movs	r3, #42	; 0x2a
 80088b6:	fb03 4405 	mla	r4, r3, r5, r4
 80088ba:	f894 0b26 	ldrb.w	r0, [r4, #2854]	; 0xb26
 80088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c0:	20000034 	.word	0x20000034
 80088c4:	0801a905 	.word	0x0801a905
 80088c8:	0801a9b2 	.word	0x0801a9b2

080088cc <91ad02464a5553c72b508f812e77f83c74a657ed>:
 80088cc:	281d      	cmp	r0, #29
 80088ce:	b508      	push	{r3, lr}
 80088d0:	d905      	bls.n	80088de <91ad02464a5553c72b508f812e77f83c74a657ed+0x12>
 80088d2:	490a      	ldr	r1, [pc, #40]	; (80088fc <91ad02464a5553c72b508f812e77f83c74a657ed+0x30>)
 80088d4:	480a      	ldr	r0, [pc, #40]	; (8008900 <91ad02464a5553c72b508f812e77f83c74a657ed+0x34>)
 80088d6:	f44f 728a 	mov.w	r2, #276	; 0x114
 80088da:	f7f8 fe59 	bl	8001590 <EXPECT_OnAbortHandler>
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <91ad02464a5553c72b508f812e77f83c74a657ed+0x38>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	222a      	movs	r2, #42	; 0x2a
 80088e4:	fb02 3300 	mla	r3, r2, r0, r3
 80088e8:	f893 0b08 	ldrb.w	r0, [r3, #2824]	; 0xb08
 80088ec:	b128      	cbz	r0, 80088fa <91ad02464a5553c72b508f812e77f83c74a657ed+0x2e>
 80088ee:	f8b3 0b12 	ldrh.w	r0, [r3, #2834]	; 0xb12
 80088f2:	4288      	cmp	r0, r1
 80088f4:	bf34      	ite	cc
 80088f6:	2000      	movcc	r0, #0
 80088f8:	2001      	movcs	r0, #1
 80088fa:	bd08      	pop	{r3, pc}
 80088fc:	0801a905 	.word	0x0801a905
 8008900:	0801a967 	.word	0x0801a967
 8008904:	20000034 	.word	0x20000034

08008908 <8c07271647b7d6eded14e64818e8777967155b78>:
 8008908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	461e      	mov	r6, r3
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <8c07271647b7d6eded14e64818e8777967155b78+0x98>)
 8008910:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008914:	681f      	ldr	r7, [r3, #0]
 8008916:	4683      	mov	fp, r0
 8008918:	460d      	mov	r5, r1
 800891a:	4690      	mov	r8, r2
 800891c:	f607 3a0a 	addw	sl, r7, #2826	; 0xb0a
 8008920:	2400      	movs	r4, #0
 8008922:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8008926:	b3ab      	cbz	r3, 8008994 <8c07271647b7d6eded14e64818e8777967155b78+0x8c>
 8008928:	2208      	movs	r2, #8
 800892a:	4659      	mov	r1, fp
 800892c:	4650      	mov	r0, sl
 800892e:	f010 fafd 	bl	8018f2c <memcmp>
 8008932:	bb78      	cbnz	r0, 8008994 <8c07271647b7d6eded14e64818e8777967155b78+0x8c>
 8008934:	b156      	cbz	r6, 800894c <8c07271647b7d6eded14e64818e8777967155b78+0x44>
 8008936:	202a      	movs	r0, #42	; 0x2a
 8008938:	4360      	muls	r0, r4
 800893a:	f600 301a 	addw	r0, r0, #2842	; 0xb1a
 800893e:	f8d9 2000 	ldr.w	r2, [r9]
 8008942:	503a      	str	r2, [r7, r0]
 8008944:	183b      	adds	r3, r7, r0
 8008946:	f899 2004 	ldrb.w	r2, [r9, #4]
 800894a:	711a      	strb	r2, [r3, #4]
 800894c:	f1b8 0f00 	cmp.w	r8, #0
 8008950:	d01e      	beq.n	8008990 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 8008952:	222a      	movs	r2, #42	; 0x2a
 8008954:	fb02 7204 	mla	r2, r2, r4, r7
 8008958:	f9b2 1b16 	ldrsh.w	r1, [r2, #2838]	; 0xb16
 800895c:	f8b2 3b16 	ldrh.w	r3, [r2, #2838]	; 0xb16
 8008960:	2900      	cmp	r1, #0
 8008962:	da07      	bge.n	8008974 <8c07271647b7d6eded14e64818e8777967155b78+0x6c>
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 800896a:	f8b2 3b18 	ldrh.w	r3, [r2, #2840]	; 0xb18
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 8008974:	222a      	movs	r2, #42	; 0x2a
 8008976:	fb02 7204 	mla	r2, r2, r4, r7
 800897a:	f8b2 3b16 	ldrh.w	r3, [r2, #2838]	; 0xb16
 800897e:	442b      	add	r3, r5
 8008980:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 8008984:	b126      	cbz	r6, 8008990 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 8008986:	f8b2 3b18 	ldrh.w	r3, [r2, #2840]	; 0xb18
 800898a:	3301      	adds	r3, #1
 800898c:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 8008990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	3401      	adds	r4, #1
 8008996:	2c1e      	cmp	r4, #30
 8008998:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
 800899c:	d1c1      	bne.n	8008922 <8c07271647b7d6eded14e64818e8777967155b78+0x1a>
 800899e:	e7f7      	b.n	8008990 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 80089a0:	20000034 	.word	0x20000034

080089a4 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x48>)
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	4607      	mov	r7, r0
 80089ac:	f604 360a 	addw	r6, r4, #2826	; 0xb0a
 80089b0:	2500      	movs	r5, #0
 80089b2:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 80089b6:	b193      	cbz	r3, 80089de <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x3a>
 80089b8:	2208      	movs	r2, #8
 80089ba:	4639      	mov	r1, r7
 80089bc:	4630      	mov	r0, r6
 80089be:	f010 fab5 	bl	8018f2c <memcmp>
 80089c2:	b960      	cbnz	r0, 80089de <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x3a>
 80089c4:	232a      	movs	r3, #42	; 0x2a
 80089c6:	fb03 4305 	mla	r3, r3, r5, r4
 80089ca:	f893 2b26 	ldrb.w	r2, [r3, #2854]	; 0xb26
 80089ce:	3201      	adds	r2, #1
 80089d0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80089d4:	d100      	bne.n	80089d8 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x34>
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2b26 	strb.w	r2, [r3, #2854]	; 0xb26
 80089dc:	e004      	b.n	80089e8 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x44>
 80089de:	3501      	adds	r5, #1
 80089e0:	2d1e      	cmp	r5, #30
 80089e2:	f106 062a 	add.w	r6, r6, #42	; 0x2a
 80089e6:	d1e4      	bne.n	80089b2 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0xe>
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20000034 	.word	0x20000034

080089f0 <cbc0e88a681a951e559d988b61bbaa7895224382>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <cbc0e88a681a951e559d988b61bbaa7895224382+0x38>)
 80089f4:	681e      	ldr	r6, [r3, #0]
 80089f6:	4607      	mov	r7, r0
 80089f8:	f606 350a 	addw	r5, r6, #2826	; 0xb0a
 80089fc:	2400      	movs	r4, #0
 80089fe:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 8008a02:	b15b      	cbz	r3, 8008a1c <cbc0e88a681a951e559d988b61bbaa7895224382+0x2c>
 8008a04:	2208      	movs	r2, #8
 8008a06:	4639      	mov	r1, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f010 fa8f 	bl	8018f2c <memcmp>
 8008a0e:	b928      	cbnz	r0, 8008a1c <cbc0e88a681a951e559d988b61bbaa7895224382+0x2c>
 8008a10:	232a      	movs	r3, #42	; 0x2a
 8008a12:	fb03 6604 	mla	r6, r3, r4, r6
 8008a16:	f886 0b26 	strb.w	r0, [r6, #2854]	; 0xb26
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	3401      	adds	r4, #1
 8008a1e:	2c1e      	cmp	r4, #30
 8008a20:	f105 052a 	add.w	r5, r5, #42	; 0x2a
 8008a24:	d1eb      	bne.n	80089fe <cbc0e88a681a951e559d988b61bbaa7895224382+0xe>
 8008a26:	e7f8      	b.n	8008a1a <cbc0e88a681a951e559d988b61bbaa7895224382+0x2a>
 8008a28:	20000034 	.word	0x20000034

08008a2c <5e760e12acdfba35bd9ad67595126b5a8623f934>:
 8008a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a2e:	466e      	mov	r6, sp
 8008a30:	e886 000c 	stmia.w	r6, {r2, r3}
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <5e760e12acdfba35bd9ad67595126b5a8623f934+0x40>)
 8008a36:	681d      	ldr	r5, [r3, #0]
 8008a38:	4607      	mov	r7, r0
 8008a3a:	f605 340a 	addw	r4, r5, #2826	; 0xb0a
 8008a3e:	f605 75f6 	addw	r5, r5, #4086	; 0xff6
 8008a42:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8008a46:	b163      	cbz	r3, 8008a62 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x36>
 8008a48:	9908      	ldr	r1, [sp, #32]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f010 fa6d 	bl	8018f2c <memcmp>
 8008a52:	b930      	cbnz	r0, 8008a62 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x36>
 8008a54:	6830      	ldr	r0, [r6, #0]
 8008a56:	7933      	ldrb	r3, [r6, #4]
 8008a58:	7767      	strb	r7, [r4, #29]
 8008a5a:	f8c4 001e 	str.w	r0, [r4, #30]
 8008a5e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8008a62:	342a      	adds	r4, #42	; 0x2a
 8008a64:	42ac      	cmp	r4, r5
 8008a66:	d1ec      	bne.n	8008a42 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x16>
 8008a68:	b003      	add	sp, #12
 8008a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a6c:	20000034 	.word	0x20000034

08008a70 <e5d2a5998d8277723156e3d7efef427ee7af0c3f>:
 8008a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	a902      	add	r1, sp, #8
 8008a76:	e901 000c 	stmdb	r1, {r2, r3}
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x74>)
 8008a7c:	f89d a004 	ldrb.w	sl, [sp, #4]
 8008a80:	f8d3 8000 	ldr.w	r8, [r3]
 8008a84:	4607      	mov	r7, r0
 8008a86:	4691      	mov	r9, r2
 8008a88:	f608 340a 	addw	r4, r8, #2826	; 0xb0a
 8008a8c:	2500      	movs	r5, #0
 8008a8e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8008a92:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8008a96:	b1de      	cbz	r6, 8008ad0 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 8008a98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f010 fa45 	bl	8018f2c <memcmp>
 8008aa2:	b9a8      	cbnz	r0, 8008ad0 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 8008aa4:	fb0b 8305 	mla	r3, fp, r5, r8
 8008aa8:	f8d3 2b28 	ldr.w	r2, [r3, #2856]	; 0xb28
 8008aac:	f893 3b2c 	ldrb.w	r3, [r3, #2860]	; 0xb2c
 8008ab0:	ea52 0103 	orrs.w	r1, r2, r3
 8008ab4:	d00c      	beq.n	8008ad0 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 8008ab6:	ebb9 0202 	subs.w	r2, r9, r2
 8008aba:	eb6a 0303 	sbc.w	r3, sl, r3
 8008abe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008ac2:	2a64      	cmp	r2, #100	; 0x64
 8008ac4:	f173 0300 	sbcs.w	r3, r3, #0
 8008ac8:	d202      	bcs.n	8008ad0 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 8008aca:	7f63      	ldrb	r3, [r4, #29]
 8008acc:	42bb      	cmp	r3, r7
 8008ace:	d005      	beq.n	8008adc <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x6c>
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	2d1e      	cmp	r5, #30
 8008ad4:	f104 042a 	add.w	r4, r4, #42	; 0x2a
 8008ad8:	d1db      	bne.n	8008a92 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x22>
 8008ada:	2600      	movs	r6, #0
 8008adc:	4630      	mov	r0, r6
 8008ade:	b003      	add	sp, #12
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	20000034 	.word	0x20000034

08008ae8 <b7be15738b198492e50cb8023d171fca112169af>:
 8008ae8:	281d      	cmp	r0, #29
 8008aea:	b538      	push	{r3, r4, r5, lr}
 8008aec:	4602      	mov	r2, r0
 8008aee:	d905      	bls.n	8008afc <b7be15738b198492e50cb8023d171fca112169af+0x14>
 8008af0:	490b      	ldr	r1, [pc, #44]	; (8008b20 <b7be15738b198492e50cb8023d171fca112169af+0x38>)
 8008af2:	480c      	ldr	r0, [pc, #48]	; (8008b24 <b7be15738b198492e50cb8023d171fca112169af+0x3c>)
 8008af4:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008af8:	f7f8 fd4a 	bl	8001590 <EXPECT_OnAbortHandler>
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <b7be15738b198492e50cb8023d171fca112169af+0x40>)
 8008afe:	681c      	ldr	r4, [r3, #0]
 8008b00:	232a      	movs	r3, #42	; 0x2a
 8008b02:	fb03 4000 	mla	r0, r3, r0, r4
 8008b06:	f890 0b08 	ldrb.w	r0, [r0, #2824]	; 0xb08
 8008b0a:	b140      	cbz	r0, 8008b1e <b7be15738b198492e50cb8023d171fca112169af+0x36>
 8008b0c:	f640 350a 	movw	r5, #2826	; 0xb0a
 8008b10:	fb13 5302 	smlabb	r3, r3, r2, r5
 8008b14:	18e2      	adds	r2, r4, r3
 8008b16:	58e3      	ldr	r3, [r4, r3]
 8008b18:	600b      	str	r3, [r1, #0]
 8008b1a:	6853      	ldr	r3, [r2, #4]
 8008b1c:	604b      	str	r3, [r1, #4]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	0801a905 	.word	0x0801a905
 8008b24:	0801a967 	.word	0x0801a967
 8008b28:	20000034 	.word	0x20000034

08008b2c <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1>:
 8008b2c:	281d      	cmp	r0, #29
 8008b2e:	b508      	push	{r3, lr}
 8008b30:	d905      	bls.n	8008b3e <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x12>
 8008b32:	4907      	ldr	r1, [pc, #28]	; (8008b50 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x24>)
 8008b34:	4807      	ldr	r0, [pc, #28]	; (8008b54 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x28>)
 8008b36:	f240 12b7 	movw	r2, #439	; 0x1b7
 8008b3a:	f7f8 fd29 	bl	8001590 <EXPECT_OnAbortHandler>
 8008b3e:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x2c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	222a      	movs	r2, #42	; 0x2a
 8008b44:	fb02 3300 	mla	r3, r2, r0, r3
 8008b48:	f893 0b08 	ldrb.w	r0, [r3, #2824]	; 0xb08
 8008b4c:	bd08      	pop	{r3, pc}
 8008b4e:	bf00      	nop
 8008b50:	0801a905 	.word	0x0801a905
 8008b54:	0801a975 	.word	0x0801a975
 8008b58:	20000034 	.word	0x20000034

08008b5c <a1f453367df5fb7326959ac01438704c8522c5f4>:
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <a1f453367df5fb7326959ac01438704c8522c5f4+0xc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	221e      	movs	r2, #30
 8008b62:	f883 2ff4 	strb.w	r2, [r3, #4084]	; 0xff4
 8008b66:	4770      	bx	lr
 8008b68:	20000034 	.word	0x20000034

08008b6c <bc730516ff4e3e92f0649500c5c053783837fa16>:
 8008b6c:	b508      	push	{r3, lr}
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <bc730516ff4e3e92f0649500c5c053783837fa16+0x30>)
 8008b70:	281d      	cmp	r0, #29
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	d805      	bhi.n	8008b82 <bc730516ff4e3e92f0649500c5c053783837fa16+0x16>
 8008b76:	232a      	movs	r3, #42	; 0x2a
 8008b78:	fb03 2300 	mla	r3, r3, r0, r2
 8008b7c:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 8008b80:	b929      	cbnz	r1, 8008b8e <bc730516ff4e3e92f0649500c5c053783837fa16+0x22>
 8008b82:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <bc730516ff4e3e92f0649500c5c053783837fa16+0x34>)
 8008b84:	4807      	ldr	r0, [pc, #28]	; (8008ba4 <bc730516ff4e3e92f0649500c5c053783837fa16+0x38>)
 8008b86:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8008b8a:	f7f8 fd01 	bl	8001590 <EXPECT_OnAbortHandler>
 8008b8e:	f882 0ff4 	strb.w	r0, [r2, #4084]	; 0xff4
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2b30 	strb.w	r2, [r3, #2864]	; 0xb30
 8008b98:	bd08      	pop	{r3, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000034 	.word	0x20000034
 8008ba0:	0801a905 	.word	0x0801a905
 8008ba4:	0801a975 	.word	0x0801a975

08008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>:
 8008ba8:	b508      	push	{r3, lr}
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x24>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 8008bb2:	2a1d      	cmp	r2, #29
 8008bb4:	d808      	bhi.n	8008bc8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x20>
 8008bb6:	b100      	cbz	r0, 8008bba <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x12>
 8008bb8:	7002      	strb	r2, [r0, #0]
 8008bba:	b119      	cbz	r1, 8008bc4 <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x1c>
 8008bbc:	f893 0ff4 	ldrb.w	r0, [r3, #4084]	; 0xff4
 8008bc0:	f7ff ff92 	bl	8008ae8 <b7be15738b198492e50cb8023d171fca112169af>
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	bd08      	pop	{r3, pc}
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e7fc      	b.n	8008bc6 <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x1e>
 8008bcc:	20000034 	.word	0x20000034

08008bd0 <0fa1209e048698b86219960838c5b2bdc21151fc>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	ac02      	add	r4, sp, #8
 8008bd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8008bda:	4669      	mov	r1, sp
 8008bdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8008be0:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <0fa1209e048698b86219960838c5b2bdc21151fc+0x64>)
 8008be2:	2100      	movs	r1, #0
 8008be4:	f10d 0017 	add.w	r0, sp, #23
 8008be8:	681c      	ldr	r4, [r3, #0]
 8008bea:	f7ff ffdd 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8008bee:	b1f0      	cbz	r0, 8008c2e <0fa1209e048698b86219960838c5b2bdc21151fc+0x5e>
 8008bf0:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8008bf4:	262a      	movs	r6, #42	; 0x2a
 8008bf6:	fb06 4105 	mla	r1, r6, r5, r4
 8008bfa:	f891 0b08 	ldrb.w	r0, [r1, #2824]	; 0xb08
 8008bfe:	b1b0      	cbz	r0, 8008c2e <0fa1209e048698b86219960838c5b2bdc21151fc+0x5e>
 8008c00:	f8d1 0b1a 	ldr.w	r0, [r1, #2842]	; 0xb1a
 8008c04:	9a00      	ldr	r2, [sp, #0]
 8008c06:	f891 1b1e 	ldrb.w	r1, [r1, #2846]	; 0xb1e
 8008c0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c0e:	1a12      	subs	r2, r2, r0
 8008c10:	9802      	ldr	r0, [sp, #8]
 8008c12:	eb63 0301 	sbc.w	r3, r3, r1
 8008c16:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8008c1a:	4290      	cmp	r0, r2
 8008c1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008c20:	4199      	sbcs	r1, r3
 8008c22:	bf3a      	itte	cc
 8008c24:	fb06 4405 	mlacc	r4, r6, r5, r4
 8008c28:	f604 300a 	addwcc	r0, r4, #2826	; 0xb0a
 8008c2c:	2000      	movcs	r0, #0
 8008c2e:	b006      	add	sp, #24
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	bf00      	nop
 8008c34:	20000034 	.word	0x20000034

08008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>:
 8008c38:	b513      	push	{r0, r1, r4, lr}
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4669      	mov	r1, sp
 8008c3e:	2000      	movs	r0, #0
 8008c40:	f7ff ffb2 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8008c44:	b138      	cbz	r0, 8008c56 <fdce4034d9451f08e0a61574976ed9ce452b5ba4+0x1e>
 8008c46:	2208      	movs	r2, #8
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4668      	mov	r0, sp
 8008c4c:	f010 f96e 	bl	8018f2c <memcmp>
 8008c50:	fab0 f080 	clz	r0, r0
 8008c54:	0940      	lsrs	r0, r0, #5
 8008c56:	b002      	add	sp, #8
 8008c58:	bd10      	pop	{r4, pc}
	...

08008c5c <aee20a6aed232d40647d21a3bace71ea0c450c20>:
 8008c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c60:	b085      	sub	sp, #20
 8008c62:	466b      	mov	r3, sp
 8008c64:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c68:	4b23      	ldr	r3, [pc, #140]	; (8008cf8 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x9c>)
 8008c6a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8008cfc <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa0>
 8008c6e:	681e      	ldr	r6, [r3, #0]
 8008c70:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008d00 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa4>
 8008c74:	4f23      	ldr	r7, [pc, #140]	; (8008d04 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa8>)
 8008c76:	4635      	mov	r5, r6
 8008c78:	2400      	movs	r4, #0
 8008c7a:	f895 3b08 	ldrb.w	r3, [r5, #2824]	; 0xb08
 8008c7e:	b39b      	cbz	r3, 8008ce8 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 8008c80:	212a      	movs	r1, #42	; 0x2a
 8008c82:	fb01 6104 	mla	r1, r1, r4, r6
 8008c86:	9a00      	ldr	r2, [sp, #0]
 8008c88:	f8d1 0b1a 	ldr.w	r0, [r1, #2842]	; 0xb1a
 8008c8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c90:	f891 1b1e 	ldrb.w	r1, [r1, #2846]	; 0xb1e
 8008c94:	1a12      	subs	r2, r2, r0
 8008c96:	eb63 0301 	sbc.w	r3, r3, r1
 8008c9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008c9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8008ca2:	fbb9 f1f1 	udiv	r1, r9, r1
 8008ca6:	4291      	cmp	r1, r2
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	419a      	sbcs	r2, r3
 8008cae:	d21b      	bcs.n	8008ce8 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff fc0f 	bl	80084d4 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 8008cb6:	f896 3ff4 	ldrb.w	r3, [r6, #4084]	; 0xff4
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	d108      	bne.n	8008cd0 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x74>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8008cc4:	ab04      	add	r3, sp, #16
 8008cc6:	e913 0003 	ldmdb	r3, {r0, r1}
 8008cca:	4a0f      	ldr	r2, [pc, #60]	; (8008d08 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xac>)
 8008ccc:	f004 fcae 	bl	800d62c <LOGGER_PrintLine>
 8008cd0:	f895 3b20 	ldrb.w	r3, [r5, #2848]	; 0xb20
 8008cd4:	b143      	cbz	r3, 8008ce8 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 8008cd6:	2305      	movs	r3, #5
 8008cd8:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8008cdc:	ab04      	add	r3, sp, #16
 8008cde:	e913 0003 	ldmdb	r3, {r0, r1}
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <aee20a6aed232d40647d21a3bace71ea0c450c20+0xb0>)
 8008ce4:	f004 fca2 	bl	800d62c <LOGGER_PrintLine>
 8008ce8:	3401      	adds	r4, #1
 8008cea:	2c1e      	cmp	r4, #30
 8008cec:	f105 052a 	add.w	r5, r5, #42	; 0x2a
 8008cf0:	d1c3      	bne.n	8008c7a <aee20a6aed232d40647d21a3bace71ea0c450c20+0x1e>
 8008cf2:	b005      	add	sp, #20
 8008cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf8:	20000034 	.word	0x20000034
 8008cfc:	0801a5e0 	.word	0x0801a5e0
 8008d00:	d693a400 	.word	0xd693a400
 8008d04:	0801a997 	.word	0x0801a997
 8008d08:	0801a9ca 	.word	0x0801a9ca
 8008d0c:	0801a9e3 	.word	0x0801a9e3

08008d10 <NEIGHBORS_SetRxSlotCandidate>:
 8008d10:	b508      	push	{r3, lr}
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <NEIGHBORS_SetRxSlotCandidate+0x28>)
 8008d14:	281d      	cmp	r0, #29
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	d805      	bhi.n	8008d26 <NEIGHBORS_SetRxSlotCandidate+0x16>
 8008d1a:	222a      	movs	r2, #42	; 0x2a
 8008d1c:	fb02 3000 	mla	r0, r2, r0, r3
 8008d20:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8008d24:	b92b      	cbnz	r3, 8008d32 <NEIGHBORS_SetRxSlotCandidate+0x22>
 8008d26:	4905      	ldr	r1, [pc, #20]	; (8008d3c <NEIGHBORS_SetRxSlotCandidate+0x2c>)
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <NEIGHBORS_SetRxSlotCandidate+0x30>)
 8008d2a:	f240 2203 	movw	r2, #515	; 0x203
 8008d2e:	f7f8 fc2f 	bl	8001590 <EXPECT_OnAbortHandler>
 8008d32:	f8a0 1b2e 	strh.w	r1, [r0, #2862]	; 0xb2e
 8008d36:	bd08      	pop	{r3, pc}
 8008d38:	20000034 	.word	0x20000034
 8008d3c:	0801a905 	.word	0x0801a905
 8008d40:	0801a967 	.word	0x0801a967

08008d44 <NEIGHBORS_GetRxSlotCandidate>:
 8008d44:	b508      	push	{r3, lr}
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <NEIGHBORS_GetRxSlotCandidate+0x28>)
 8008d48:	281d      	cmp	r0, #29
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	d805      	bhi.n	8008d5a <NEIGHBORS_GetRxSlotCandidate+0x16>
 8008d4e:	222a      	movs	r2, #42	; 0x2a
 8008d50:	fb02 3000 	mla	r0, r2, r0, r3
 8008d54:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8008d58:	b92b      	cbnz	r3, 8008d66 <NEIGHBORS_GetRxSlotCandidate+0x22>
 8008d5a:	4905      	ldr	r1, [pc, #20]	; (8008d70 <NEIGHBORS_GetRxSlotCandidate+0x2c>)
 8008d5c:	4805      	ldr	r0, [pc, #20]	; (8008d74 <NEIGHBORS_GetRxSlotCandidate+0x30>)
 8008d5e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008d62:	f7f8 fc15 	bl	8001590 <EXPECT_OnAbortHandler>
 8008d66:	f8b0 0b2e 	ldrh.w	r0, [r0, #2862]	; 0xb2e
 8008d6a:	bd08      	pop	{r3, pc}
 8008d6c:	20000034 	.word	0x20000034
 8008d70:	0801a905 	.word	0x0801a905
 8008d74:	0801a967 	.word	0x0801a967

08008d78 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	b085      	sub	sp, #20
 8008d7e:	4605      	mov	r5, r0
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	4b4b      	ldr	r3, [pc, #300]	; (8008eb0 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x138>)
 8008d84:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8008d88:	681c      	ldr	r4, [r3, #0]
 8008d8a:	4689      	mov	r9, r1
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	f604 370a 	addw	r7, r4, #2826	; 0xb0a
 8008d92:	46a2      	mov	sl, r4
 8008d94:	f604 78f6 	addw	r8, r4, #4086	; 0xff6
 8008d98:	f817 3c02 	ldrb.w	r3, [r7, #-2]
 8008d9c:	b133      	cbz	r3, 8008dac <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x34>
 8008d9e:	2208      	movs	r2, #8
 8008da0:	4629      	mov	r1, r5
 8008da2:	4638      	mov	r0, r7
 8008da4:	f010 f8c2 	bl	8018f2c <memcmp>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d07c      	beq.n	8008ea6 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x12e>
 8008dac:	372a      	adds	r7, #42	; 0x2a
 8008dae:	4547      	cmp	r7, r8
 8008db0:	d1f2      	bne.n	8008d98 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x20>
 8008db2:	2200      	movs	r2, #0
 8008db4:	4610      	mov	r0, r2
 8008db6:	4613      	mov	r3, r2
 8008db8:	f04f 081e 	mov.w	r8, #30
 8008dbc:	f89a 1b08 	ldrb.w	r1, [sl, #2824]	; 0xb08
 8008dc0:	b369      	cbz	r1, 8008e1e <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0xa6>
 8008dc2:	212a      	movs	r1, #42	; 0x2a
 8008dc4:	fb01 4e03 	mla	lr, r1, r3, r4
 8008dc8:	f8d6 c000 	ldr.w	ip, [r6]
 8008dcc:	f8de 1b1a 	ldr.w	r1, [lr, #2842]	; 0xb1a
 8008dd0:	7937      	ldrb	r7, [r6, #4]
 8008dd2:	f89e eb1e 	ldrb.w	lr, [lr, #2846]	; 0xb1e
 8008dd6:	ebbc 0101 	subs.w	r1, ip, r1
 8008dda:	eb67 070e 	sbc.w	r7, r7, lr
 8008dde:	f007 07ff 	and.w	r7, r7, #255	; 0xff
 8008de2:	428a      	cmp	r2, r1
 8008de4:	eb70 0c07 	sbcs.w	ip, r0, r7
 8008de8:	d20b      	bcs.n	8008e02 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x8a>
 8008dea:	f89a cb31 	ldrb.w	ip, [sl, #2865]	; 0xb31
 8008dee:	f1bc 0f00 	cmp.w	ip, #0
 8008df2:	d106      	bne.n	8008e02 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x8a>
 8008df4:	f894 cff4 	ldrb.w	ip, [r4, #4084]	; 0xff4
 8008df8:	459c      	cmp	ip, r3
 8008dfa:	bf1e      	ittt	ne
 8008dfc:	460a      	movne	r2, r1
 8008dfe:	4638      	movne	r0, r7
 8008e00:	4698      	movne	r8, r3
 8008e02:	3301      	adds	r3, #1
 8008e04:	2b1e      	cmp	r3, #30
 8008e06:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
 8008e0a:	d1d7      	bne.n	8008dbc <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x44>
 8008e0c:	f1b8 0f1e 	cmp.w	r8, #30
 8008e10:	d101      	bne.n	8008e16 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x9e>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e048      	b.n	8008ea8 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x130>
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7ff fb5c 	bl	80084d4 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 8008e1c:	4643      	mov	r3, r8
 8008e1e:	222a      	movs	r2, #42	; 0x2a
 8008e20:	4353      	muls	r3, r2
 8008e22:	18e2      	adds	r2, r4, r3
 8008e24:	2101      	movs	r1, #1
 8008e26:	f882 1b08 	strb.w	r1, [r2, #2824]	; 0xb08
 8008e2a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8008e2e:	f882 1b09 	strb.w	r1, [r2, #2825]	; 0xb09
 8008e32:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 8008e36:	6829      	ldr	r1, [r5, #0]
 8008e38:	50e1      	str	r1, [r4, r3]
 8008e3a:	18e0      	adds	r0, r4, r3
 8008e3c:	6869      	ldr	r1, [r5, #4]
 8008e3e:	6041      	str	r1, [r0, #4]
 8008e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e44:	f8a2 3b12 	strh.w	r3, [r2, #2834]	; 0xb12
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f882 9b14 	strb.w	r9, [r2, #2836]	; 0xb14
 8008e4e:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 8008e52:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 8008e56:	7931      	ldrb	r1, [r6, #4]
 8008e58:	6830      	ldr	r0, [r6, #0]
 8008e5a:	f882 1b1e 	strb.w	r1, [r2, #2846]	; 0xb1e
 8008e5e:	9901      	ldr	r1, [sp, #4]
 8008e60:	f8c2 0b1a 	str.w	r0, [r2, #2842]	; 0xb1a
 8008e64:	f892 0b2c 	ldrb.w	r0, [r2, #2860]	; 0xb2c
 8008e68:	f882 3b20 	strb.w	r3, [r2, #2848]	; 0xb20
 8008e6c:	4299      	cmp	r1, r3
 8008e6e:	f363 0007 	bfi	r0, r3, #0, #8
 8008e72:	bf08      	it	eq
 8008e74:	f04f 0bff 	moveq.w	fp, #255	; 0xff
 8008e78:	f882 0b2c 	strb.w	r0, [r2, #2860]	; 0xb2c
 8008e7c:	f882 bb1f 	strb.w	fp, [r2, #2847]	; 0xb1f
 8008e80:	f8a2 3b26 	strh.w	r3, [r2, #2854]	; 0xb26
 8008e84:	f8a2 3b28 	strh.w	r3, [r2, #2856]	; 0xb28
 8008e88:	f8a2 3b2a 	strh.w	r3, [r2, #2858]	; 0xb2a
 8008e8c:	f8a2 3b2e 	strh.w	r3, [r2, #2862]	; 0xb2e
 8008e90:	f8a2 3b30 	strh.w	r3, [r2, #2864]	; 0xb30
 8008e94:	4629      	mov	r1, r5
 8008e96:	a802      	add	r0, sp, #8
 8008e98:	f7ff fb12 	bl	80084c0 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8008e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea0:	464a      	mov	r2, r9
 8008ea2:	f00e fdc7 	bl	8017a34 <ed1ec3dc0708953023c494b9efb045669b41a337>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	b005      	add	sp, #20
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000034 	.word	0x20000034

08008eb4 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86>:
 8008eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4a26      	ldr	r2, [pc, #152]	; (8008f54 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0xa0>)
 8008ebc:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8008ec0:	f8d2 a000 	ldr.w	sl, [r2]
 8008ec4:	9000      	str	r0, [sp, #0]
 8008ec6:	461e      	mov	r6, r3
 8008ec8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008ecc:	460f      	mov	r7, r1
 8008ece:	f60a 390a 	addw	r9, sl, #2826	; 0xb0a
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f819 bc02 	ldrb.w	fp, [r9, #-2]
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	d02a      	beq.n	8008f34 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x80>
 8008ede:	9900      	ldr	r1, [sp, #0]
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	4648      	mov	r0, r9
 8008ee6:	f010 f821 	bl	8018f2c <memcmp>
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	bb10      	cbnz	r0, 8008f34 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x80>
 8008eee:	222a      	movs	r2, #42	; 0x2a
 8008ef0:	fb02 a205 	mla	r2, r2, r5, sl
 8008ef4:	f992 1b14 	ldrsb.w	r1, [r2, #2836]	; 0xb14
 8008ef8:	f882 3b09 	strb.w	r3, [r2, #2825]	; 0xb09
 8008efc:	2307      	movs	r3, #7
 8008efe:	fb13 7301 	smlabb	r3, r3, r1, r7
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da00      	bge.n	8008f08 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x54>
 8008f06:	3307      	adds	r3, #7
 8008f08:	10db      	asrs	r3, r3, #3
 8008f0a:	f882 3b14 	strb.w	r3, [r2, #2836]	; 0xb14
 8008f0e:	232a      	movs	r3, #42	; 0x2a
 8008f10:	6821      	ldr	r1, [r4, #0]
 8008f12:	7922      	ldrb	r2, [r4, #4]
 8008f14:	fb03 a305 	mla	r3, r3, r5, sl
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	bf08      	it	eq
 8008f1c:	f04f 08ff 	moveq.w	r8, #255	; 0xff
 8008f20:	4658      	mov	r0, fp
 8008f22:	f8c3 1b1a 	str.w	r1, [r3, #2842]	; 0xb1a
 8008f26:	f883 2b1e 	strb.w	r2, [r3, #2846]	; 0xb1e
 8008f2a:	f883 8b1f 	strb.w	r8, [r3, #2847]	; 0xb1f
 8008f2e:	b003      	add	sp, #12
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	3501      	adds	r5, #1
 8008f36:	2d1e      	cmp	r5, #30
 8008f38:	f109 092a 	add.w	r9, r9, #42	; 0x2a
 8008f3c:	d1ca      	bne.n	8008ed4 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x20>
 8008f3e:	9800      	ldr	r0, [sp, #0]
 8008f40:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
 8008f44:	4622      	mov	r2, r4
 8008f46:	4633      	mov	r3, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	f7ff bf12 	b.w	8008d78 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a>
 8008f54:	20000034 	.word	0x20000034

08008f58 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>:
 8008f58:	281d      	cmp	r0, #29
 8008f5a:	b508      	push	{r3, lr}
 8008f5c:	d905      	bls.n	8008f6a <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x12>
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x2c>)
 8008f60:	4809      	ldr	r0, [pc, #36]	; (8008f88 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x30>)
 8008f62:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8008f66:	f7f8 fb13 	bl	8001590 <EXPECT_OnAbortHandler>
 8008f6a:	4a08      	ldr	r2, [pc, #32]	; (8008f8c <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x34>)
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	212a      	movs	r1, #42	; 0x2a
 8008f70:	fb01 2300 	mla	r3, r1, r0, r2
 8008f74:	f893 3b08 	ldrb.w	r3, [r3, #2824]	; 0xb08
 8008f78:	b11b      	cbz	r3, 8008f82 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x2a>
 8008f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f7e:	f7ff baa9 	b.w	80084d4 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 8008f82:	bd08      	pop	{r3, pc}
 8008f84:	0801a905 	.word	0x0801a905
 8008f88:	0801a967 	.word	0x0801a967
 8008f8c:	20000034 	.word	0x20000034

08008f90 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x28>)
 8008f94:	681d      	ldr	r5, [r3, #0]
 8008f96:	f7ff fde1 	bl	8008b5c <a1f453367df5fb7326959ac01438704c8522c5f4>
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	f605 3508 	addw	r5, r5, #2824	; 0xb08
 8008fa0:	262a      	movs	r6, #42	; 0x2a
 8008fa2:	fb06 f304 	mul.w	r3, r6, r4
 8008fa6:	5ceb      	ldrb	r3, [r5, r3]
 8008fa8:	b113      	cbz	r3, 8008fb0 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x20>
 8008faa:	b2e0      	uxtb	r0, r4
 8008fac:	f7ff ffd4 	bl	8008f58 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>
 8008fb0:	3401      	adds	r4, #1
 8008fb2:	2c1e      	cmp	r4, #30
 8008fb4:	d1f5      	bne.n	8008fa2 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x12>
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	20000034 	.word	0x20000034

08008fbc <52a2c697077f87280125159eda12d46a7578d4b9>:
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <52a2c697077f87280125159eda12d46a7578d4b9+0x3c>)
 8008fc2:	681c      	ldr	r4, [r3, #0]
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	4688      	mov	r8, r1
 8008fc8:	f604 340a 	addw	r4, r4, #2826	; 0xb0a
 8008fcc:	2500      	movs	r5, #0
 8008fce:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8008fd2:	b156      	cbz	r6, 8008fea <52a2c697077f87280125159eda12d46a7578d4b9+0x2e>
 8008fd4:	2208      	movs	r2, #8
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f00f ffa7 	bl	8018f2c <memcmp>
 8008fde:	b920      	cbnz	r0, 8008fea <52a2c697077f87280125159eda12d46a7578d4b9+0x2e>
 8008fe0:	f888 5000 	strb.w	r5, [r8]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fea:	3501      	adds	r5, #1
 8008fec:	2d1e      	cmp	r5, #30
 8008fee:	f104 042a 	add.w	r4, r4, #42	; 0x2a
 8008ff2:	d1ec      	bne.n	8008fce <52a2c697077f87280125159eda12d46a7578d4b9+0x12>
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	e7f5      	b.n	8008fe4 <52a2c697077f87280125159eda12d46a7578d4b9+0x28>
 8008ff8:	20000034 	.word	0x20000034

08008ffc <5cf48605db24e77c7dc4310895ecb68238b276e7>:
 8008ffc:	b508      	push	{r3, lr}
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x28>)
 8009000:	281d      	cmp	r0, #29
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	d805      	bhi.n	8009012 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x16>
 8009006:	222a      	movs	r2, #42	; 0x2a
 8009008:	fb02 3000 	mla	r0, r2, r0, r3
 800900c:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8009010:	b92b      	cbnz	r3, 800901e <5cf48605db24e77c7dc4310895ecb68238b276e7+0x22>
 8009012:	4905      	ldr	r1, [pc, #20]	; (8009028 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x2c>)
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <5cf48605db24e77c7dc4310895ecb68238b276e7+0x30>)
 8009016:	f240 2281 	movw	r2, #641	; 0x281
 800901a:	f7f8 fab9 	bl	8001590 <EXPECT_OnAbortHandler>
 800901e:	f890 0b31 	ldrb.w	r0, [r0, #2865]	; 0xb31
 8009022:	bd08      	pop	{r3, pc}
 8009024:	20000034 	.word	0x20000034
 8009028:	0801a905 	.word	0x0801a905
 800902c:	0801a975 	.word	0x0801a975

08009030 <ca04a83f27bd1933b342c8619a464a402518176b>:
 8009030:	b508      	push	{r3, lr}
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <ca04a83f27bd1933b342c8619a464a402518176b+0x28>)
 8009034:	281d      	cmp	r0, #29
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	d805      	bhi.n	8009046 <ca04a83f27bd1933b342c8619a464a402518176b+0x16>
 800903a:	222a      	movs	r2, #42	; 0x2a
 800903c:	fb02 3000 	mla	r0, r2, r0, r3
 8009040:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 8009044:	b92b      	cbnz	r3, 8009052 <ca04a83f27bd1933b342c8619a464a402518176b+0x22>
 8009046:	4905      	ldr	r1, [pc, #20]	; (800905c <ca04a83f27bd1933b342c8619a464a402518176b+0x2c>)
 8009048:	4805      	ldr	r0, [pc, #20]	; (8009060 <ca04a83f27bd1933b342c8619a464a402518176b+0x30>)
 800904a:	f240 228a 	movw	r2, #650	; 0x28a
 800904e:	f7f8 fa9f 	bl	8001590 <EXPECT_OnAbortHandler>
 8009052:	f880 1b31 	strb.w	r1, [r0, #2865]	; 0xb31
 8009056:	bd08      	pop	{r3, pc}
 8009058:	20000034 	.word	0x20000034
 800905c:	0801a905 	.word	0x0801a905
 8009060:	0801a967 	.word	0x0801a967

08009064 <963d67651eaddeb307ab0b02134cee28199d533d>:
 8009064:	4b07      	ldr	r3, [pc, #28]	; (8009084 <963d67651eaddeb307ab0b02134cee28199d533d+0x20>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2000      	movs	r0, #0
 800906a:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
 800906e:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 8009072:	b119      	cbz	r1, 800907c <963d67651eaddeb307ab0b02134cee28199d533d+0x18>
 8009074:	f893 1b31 	ldrb.w	r1, [r3, #2865]	; 0xb31
 8009078:	b101      	cbz	r1, 800907c <963d67651eaddeb307ab0b02134cee28199d533d+0x18>
 800907a:	3001      	adds	r0, #1
 800907c:	332a      	adds	r3, #42	; 0x2a
 800907e:	4293      	cmp	r3, r2
 8009080:	d1f5      	bne.n	800906e <963d67651eaddeb307ab0b02134cee28199d533d+0xa>
 8009082:	4770      	bx	lr
 8009084:	20000034 	.word	0x20000034

08009088 <a72cb89288ba405a2fc975c124a720574840c109>:
 8009088:	b508      	push	{r3, lr}
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <a72cb89288ba405a2fc975c124a720574840c109+0x28>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 8009092:	2a1d      	cmp	r2, #29
 8009094:	d905      	bls.n	80090a2 <a72cb89288ba405a2fc975c124a720574840c109+0x1a>
 8009096:	4907      	ldr	r1, [pc, #28]	; (80090b4 <a72cb89288ba405a2fc975c124a720574840c109+0x2c>)
 8009098:	4807      	ldr	r0, [pc, #28]	; (80090b8 <a72cb89288ba405a2fc975c124a720574840c109+0x30>)
 800909a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800909e:	f7f8 fa77 	bl	8001590 <EXPECT_OnAbortHandler>
 80090a2:	212a      	movs	r1, #42	; 0x2a
 80090a4:	fb01 3302 	mla	r3, r1, r2, r3
 80090a8:	f893 0b30 	ldrb.w	r0, [r3, #2864]	; 0xb30
 80090ac:	bd08      	pop	{r3, pc}
 80090ae:	bf00      	nop
 80090b0:	20000034 	.word	0x20000034
 80090b4:	0801a905 	.word	0x0801a905
 80090b8:	0801a9fe 	.word	0x0801a9fe

080090bc <201075ddfc12155ac10a81b74045472dd935ece2>:
 80090bc:	b508      	push	{r3, lr}
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <201075ddfc12155ac10a81b74045472dd935ece2+0x28>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 80090c6:	2a1d      	cmp	r2, #29
 80090c8:	d905      	bls.n	80090d6 <201075ddfc12155ac10a81b74045472dd935ece2+0x1a>
 80090ca:	4907      	ldr	r1, [pc, #28]	; (80090e8 <201075ddfc12155ac10a81b74045472dd935ece2+0x2c>)
 80090cc:	4807      	ldr	r0, [pc, #28]	; (80090ec <201075ddfc12155ac10a81b74045472dd935ece2+0x30>)
 80090ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80090d2:	f7f8 fa5d 	bl	8001590 <EXPECT_OnAbortHandler>
 80090d6:	212a      	movs	r1, #42	; 0x2a
 80090d8:	fb01 3302 	mla	r3, r1, r2, r3
 80090dc:	f883 0b30 	strb.w	r0, [r3, #2864]	; 0xb30
 80090e0:	bd08      	pop	{r3, pc}
 80090e2:	bf00      	nop
 80090e4:	20000034 	.word	0x20000034
 80090e8:	0801a905 	.word	0x0801a905
 80090ec:	0801a9fe 	.word	0x0801a9fe

080090f0 <ADDR_GetLength.isra.0>:
 80090f0:	2807      	cmp	r0, #7
 80090f2:	d80f      	bhi.n	8009114 <ADDR_GetLength.isra.0+0x24>
 80090f4:	2301      	movs	r3, #1
 80090f6:	fa03 f000 	lsl.w	r0, r3, r0
 80090fa:	f010 0f92 	tst.w	r0, #146	; 0x92
 80090fe:	d10b      	bne.n	8009118 <ADDR_GetLength.isra.0+0x28>
 8009100:	f010 0f48 	tst.w	r0, #72	; 0x48
 8009104:	d10a      	bne.n	800911c <ADDR_GetLength.isra.0+0x2c>
 8009106:	f010 0f24 	tst.w	r0, #36	; 0x24
 800910a:	bf14      	ite	ne
 800910c:	4618      	movne	r0, r3
 800910e:	2000      	moveq	r0, #0
 8009110:	00c0      	lsls	r0, r0, #3
 8009112:	4770      	bx	lr
 8009114:	2000      	movs	r0, #0
 8009116:	4770      	bx	lr
 8009118:	2002      	movs	r0, #2
 800911a:	4770      	bx	lr
 800911c:	2010      	movs	r0, #16
 800911e:	4770      	bx	lr

08009120 <2de8c5d05f60c15cf061eba17324436038284da6>:
 8009120:	b508      	push	{r3, lr}
 8009122:	4602      	mov	r2, r0
 8009124:	b920      	cbnz	r0, 8009130 <2de8c5d05f60c15cf061eba17324436038284da6+0x10>
 8009126:	4913      	ldr	r1, [pc, #76]	; (8009174 <2de8c5d05f60c15cf061eba17324436038284da6+0x54>)
 8009128:	4813      	ldr	r0, [pc, #76]	; (8009178 <2de8c5d05f60c15cf061eba17324436038284da6+0x58>)
 800912a:	22b2      	movs	r2, #178	; 0xb2
 800912c:	f7f8 fa30 	bl	8001590 <EXPECT_OnAbortHandler>
 8009130:	7800      	ldrb	r0, [r0, #0]
 8009132:	2803      	cmp	r0, #3
 8009134:	d00b      	beq.n	800914e <2de8c5d05f60c15cf061eba17324436038284da6+0x2e>
 8009136:	d804      	bhi.n	8009142 <2de8c5d05f60c15cf061eba17324436038284da6+0x22>
 8009138:	1e43      	subs	r3, r0, #1
 800913a:	2b01      	cmp	r3, #1
 800913c:	d90d      	bls.n	800915a <2de8c5d05f60c15cf061eba17324436038284da6+0x3a>
 800913e:	2000      	movs	r0, #0
 8009140:	e004      	b.n	800914c <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 8009142:	3806      	subs	r0, #6
 8009144:	2801      	cmp	r0, #1
 8009146:	bf8c      	ite	hi
 8009148:	2000      	movhi	r0, #0
 800914a:	2001      	movls	r0, #1
 800914c:	bd08      	pop	{r3, pc}
 800914e:	7850      	ldrb	r0, [r2, #1]
 8009150:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 8009154:	4258      	negs	r0, r3
 8009156:	4158      	adcs	r0, r3
 8009158:	e7f8      	b.n	800914c <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 800915a:	f7ff ffc9 	bl	80090f0 <ADDR_GetLength.isra.0>
 800915e:	4410      	add	r0, r2
 8009160:	4282      	cmp	r2, r0
 8009162:	d101      	bne.n	8009168 <2de8c5d05f60c15cf061eba17324436038284da6+0x48>
 8009164:	2001      	movs	r0, #1
 8009166:	e7f1      	b.n	800914c <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 8009168:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800916c:	2bff      	cmp	r3, #255	; 0xff
 800916e:	d0f7      	beq.n	8009160 <2de8c5d05f60c15cf061eba17324436038284da6+0x40>
 8009170:	e7e5      	b.n	800913e <2de8c5d05f60c15cf061eba17324436038284da6+0x1e>
 8009172:	bf00      	nop
 8009174:	0801aa12 	.word	0x0801aa12
 8009178:	0801aac7 	.word	0x0801aac7

0800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>:
 800917c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800917e:	4603      	mov	r3, r0
 8009180:	b920      	cbnz	r0, 800918c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x10>
 8009182:	4919      	ldr	r1, [pc, #100]	; (80091e8 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x6c>)
 8009184:	4819      	ldr	r0, [pc, #100]	; (80091ec <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x70>)
 8009186:	2294      	movs	r2, #148	; 0x94
 8009188:	f7f8 fa02 	bl	8001590 <EXPECT_OnAbortHandler>
 800918c:	7802      	ldrb	r2, [r0, #0]
 800918e:	2400      	movs	r4, #0
 8009190:	2500      	movs	r5, #0
 8009192:	2a02      	cmp	r2, #2
 8009194:	e9cd 4500 	strd	r4, r5, [sp]
 8009198:	d010      	beq.n	80091bc <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x40>
 800919a:	2a03      	cmp	r2, #3
 800919c:	d018      	beq.n	80091d0 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x54>
 800919e:	2a01      	cmp	r2, #1
 80091a0:	d108      	bne.n	80091b4 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 80091a2:	f7ff ffbd 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80091a6:	b128      	cbz	r0, 80091b4 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ac:	f04f 33ff 	mov.w	r3, #4294967295
 80091b0:	e9cd 2300 	strd	r2, r3, [sp]
 80091b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	aa02      	add	r2, sp, #8
 80091be:	f100 0108 	add.w	r1, r0, #8
 80091c2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80091c6:	f802 0d01 	strb.w	r0, [r2, #-1]!
 80091ca:	428b      	cmp	r3, r1
 80091cc:	d1f9      	bne.n	80091c2 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x46>
 80091ce:	e7f1      	b.n	80091b4 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 80091d0:	f100 0208 	add.w	r2, r0, #8
 80091d4:	a902      	add	r1, sp, #8
 80091d6:	3310      	adds	r3, #16
 80091d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80091dc:	f801 0d01 	strb.w	r0, [r1, #-1]!
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d1f9      	bne.n	80091d8 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x5c>
 80091e4:	e7e6      	b.n	80091b4 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 80091e6:	bf00      	nop
 80091e8:	0801aa12 	.word	0x0801aa12
 80091ec:	0801aac7 	.word	0x0801aac7

080091f0 <271b2dbe31e411eac579adb987eb6de74d66e6b2>:
 80091f0:	7802      	ldrb	r2, [r0, #0]
 80091f2:	2a03      	cmp	r2, #3
 80091f4:	4603      	mov	r3, r0
 80091f6:	d125      	bne.n	8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 80091f8:	7842      	ldrb	r2, [r0, #1]
 80091fa:	2aff      	cmp	r2, #255	; 0xff
 80091fc:	d122      	bne.n	8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 80091fe:	7882      	ldrb	r2, [r0, #2]
 8009200:	2a02      	cmp	r2, #2
 8009202:	d11f      	bne.n	8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 8009204:	78c0      	ldrb	r0, [r0, #3]
 8009206:	b9e8      	cbnz	r0, 8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 8009208:	791a      	ldrb	r2, [r3, #4]
 800920a:	b9f2      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800920c:	7958      	ldrb	r0, [r3, #5]
 800920e:	b9d8      	cbnz	r0, 8009248 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 8009210:	799a      	ldrb	r2, [r3, #6]
 8009212:	b9d2      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 8009214:	79d8      	ldrb	r0, [r3, #7]
 8009216:	b9b8      	cbnz	r0, 8009248 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 8009218:	7a1a      	ldrb	r2, [r3, #8]
 800921a:	b9b2      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800921c:	7a5a      	ldrb	r2, [r3, #9]
 800921e:	b98a      	cbnz	r2, 8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 8009220:	7a98      	ldrb	r0, [r3, #10]
 8009222:	b978      	cbnz	r0, 8009244 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 8009224:	7ada      	ldrb	r2, [r3, #11]
 8009226:	b982      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 8009228:	7b18      	ldrb	r0, [r3, #12]
 800922a:	b968      	cbnz	r0, 8009248 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 800922c:	7b5a      	ldrb	r2, [r3, #13]
 800922e:	b962      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 8009230:	7b98      	ldrb	r0, [r3, #14]
 8009232:	b948      	cbnz	r0, 8009248 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 8009234:	7bda      	ldrb	r2, [r3, #15]
 8009236:	b942      	cbnz	r2, 800924a <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 8009238:	7c18      	ldrb	r0, [r3, #16]
 800923a:	f1a0 031a 	sub.w	r3, r0, #26
 800923e:	4258      	negs	r0, r3
 8009240:	4158      	adcs	r0, r3
 8009242:	4770      	bx	lr
 8009244:	2000      	movs	r0, #0
 8009246:	4770      	bx	lr
 8009248:	4610      	mov	r0, r2
 800924a:	4770      	bx	lr

0800924c <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7>:
 800924c:	7802      	ldrb	r2, [r0, #0]
 800924e:	2a03      	cmp	r2, #3
 8009250:	4603      	mov	r3, r0
 8009252:	d124      	bne.n	800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 8009254:	7842      	ldrb	r2, [r0, #1]
 8009256:	2aff      	cmp	r2, #255	; 0xff
 8009258:	d121      	bne.n	800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800925a:	7882      	ldrb	r2, [r0, #2]
 800925c:	2a02      	cmp	r2, #2
 800925e:	d11e      	bne.n	800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 8009260:	78c0      	ldrb	r0, [r0, #3]
 8009262:	b9e0      	cbnz	r0, 800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 8009264:	791a      	ldrb	r2, [r3, #4]
 8009266:	b9ea      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 8009268:	7958      	ldrb	r0, [r3, #5]
 800926a:	b9d0      	cbnz	r0, 80092a2 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 800926c:	799a      	ldrb	r2, [r3, #6]
 800926e:	b9ca      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 8009270:	79d8      	ldrb	r0, [r3, #7]
 8009272:	b9b0      	cbnz	r0, 80092a2 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 8009274:	7a1a      	ldrb	r2, [r3, #8]
 8009276:	b9aa      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 8009278:	7a5a      	ldrb	r2, [r3, #9]
 800927a:	b982      	cbnz	r2, 800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800927c:	7a98      	ldrb	r0, [r3, #10]
 800927e:	b970      	cbnz	r0, 800929e <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 8009280:	7ada      	ldrb	r2, [r3, #11]
 8009282:	b97a      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 8009284:	7b18      	ldrb	r0, [r3, #12]
 8009286:	b960      	cbnz	r0, 80092a2 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 8009288:	7b5a      	ldrb	r2, [r3, #13]
 800928a:	b95a      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800928c:	7b98      	ldrb	r0, [r3, #14]
 800928e:	b940      	cbnz	r0, 80092a2 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 8009290:	7bda      	ldrb	r2, [r3, #15]
 8009292:	b93a      	cbnz	r2, 80092a4 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 8009294:	7c18      	ldrb	r0, [r3, #16]
 8009296:	1e43      	subs	r3, r0, #1
 8009298:	4258      	negs	r0, r3
 800929a:	4158      	adcs	r0, r3
 800929c:	4770      	bx	lr
 800929e:	2000      	movs	r0, #0
 80092a0:	4770      	bx	lr
 80092a2:	4610      	mov	r0, r2
 80092a4:	4770      	bx	lr
	...

080092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>:
 80092a8:	b508      	push	{r3, lr}
 80092aa:	7803      	ldrb	r3, [r0, #0]
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	d108      	bne.n	80092c2 <4568fced62f20053a59091f5ee26eed63ee62b0d+0x1a>
 80092b0:	4905      	ldr	r1, [pc, #20]	; (80092c8 <4568fced62f20053a59091f5ee26eed63ee62b0d+0x20>)
 80092b2:	2208      	movs	r2, #8
 80092b4:	3001      	adds	r0, #1
 80092b6:	f00f fe39 	bl	8018f2c <memcmp>
 80092ba:	fab0 f080 	clz	r0, r0
 80092be:	0940      	lsrs	r0, r0, #5
 80092c0:	bd08      	pop	{r3, pc}
 80092c2:	2000      	movs	r0, #0
 80092c4:	e7fc      	b.n	80092c0 <4568fced62f20053a59091f5ee26eed63ee62b0d+0x18>
 80092c6:	bf00      	nop
 80092c8:	0801ab3c 	.word	0x0801ab3c

080092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	4604      	mov	r4, r0
 80092d0:	7803      	ldrb	r3, [r0, #0]
 80092d2:	7808      	ldrb	r0, [r1, #0]
 80092d4:	4298      	cmp	r0, r3
 80092d6:	d10a      	bne.n	80092ee <32ee1897f5dd097f851de45186212ed2e150a0c5+0x22>
 80092d8:	f7ff ff0a 	bl	80090f0 <ADDR_GetLength.isra.0>
 80092dc:	3101      	adds	r1, #1
 80092de:	4602      	mov	r2, r0
 80092e0:	1c60      	adds	r0, r4, #1
 80092e2:	f00f fe23 	bl	8018f2c <memcmp>
 80092e6:	fab0 f080 	clz	r0, r0
 80092ea:	0940      	lsrs	r0, r0, #5
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	2000      	movs	r0, #0
 80092f0:	e7fc      	b.n	80092ec <32ee1897f5dd097f851de45186212ed2e150a0c5+0x20>
	...

080092f4 <706a956218859121b399480423d2fbe6bb70cd71>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	7800      	ldrb	r0, [r0, #0]
 80092fa:	f7ff fef9 	bl	80090f0 <ADDR_GetLength.isra.0>
 80092fe:	4606      	mov	r6, r0
 8009300:	481d      	ldr	r0, [pc, #116]	; (8009378 <706a956218859121b399480423d2fbe6bb70cd71+0x84>)
 8009302:	f004 f95b 	bl	800d5bc <LOGGER_Print>
 8009306:	7823      	ldrb	r3, [r4, #0]
 8009308:	2b07      	cmp	r3, #7
 800930a:	d829      	bhi.n	8009360 <706a956218859121b399480423d2fbe6bb70cd71+0x6c>
 800930c:	e8df f003 	tbb	[pc, r3]
 8009310:	1e1c1a04 	.word	0x1e1c1a04
 8009314:	26242220 	.word	0x26242220
 8009318:	4818      	ldr	r0, [pc, #96]	; (800937c <706a956218859121b399480423d2fbe6bb70cd71+0x88>)
 800931a:	f004 f94f 	bl	800d5bc <LOGGER_Print>
 800931e:	4818      	ldr	r0, [pc, #96]	; (8009380 <706a956218859121b399480423d2fbe6bb70cd71+0x8c>)
 8009320:	f004 f94c 	bl	800d5bc <LOGGER_Print>
 8009324:	b326      	cbz	r6, 8009370 <706a956218859121b399480423d2fbe6bb70cd71+0x7c>
 8009326:	4625      	mov	r5, r4
 8009328:	4816      	ldr	r0, [pc, #88]	; (8009384 <706a956218859121b399480423d2fbe6bb70cd71+0x90>)
 800932a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800932e:	f004 f945 	bl	800d5bc <LOGGER_Print>
 8009332:	4434      	add	r4, r6
 8009334:	4e14      	ldr	r6, [pc, #80]	; (8009388 <706a956218859121b399480423d2fbe6bb70cd71+0x94>)
 8009336:	42a5      	cmp	r5, r4
 8009338:	d114      	bne.n	8009364 <706a956218859121b399480423d2fbe6bb70cd71+0x70>
 800933a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800933e:	4813      	ldr	r0, [pc, #76]	; (800938c <706a956218859121b399480423d2fbe6bb70cd71+0x98>)
 8009340:	f004 b93c 	b.w	800d5bc <LOGGER_Print>
 8009344:	4812      	ldr	r0, [pc, #72]	; (8009390 <706a956218859121b399480423d2fbe6bb70cd71+0x9c>)
 8009346:	e7e8      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009348:	4812      	ldr	r0, [pc, #72]	; (8009394 <706a956218859121b399480423d2fbe6bb70cd71+0xa0>)
 800934a:	e7e6      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800934c:	4812      	ldr	r0, [pc, #72]	; (8009398 <706a956218859121b399480423d2fbe6bb70cd71+0xa4>)
 800934e:	e7e4      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009350:	4812      	ldr	r0, [pc, #72]	; (800939c <706a956218859121b399480423d2fbe6bb70cd71+0xa8>)
 8009352:	e7e2      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009354:	4812      	ldr	r0, [pc, #72]	; (80093a0 <706a956218859121b399480423d2fbe6bb70cd71+0xac>)
 8009356:	e7e0      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009358:	4812      	ldr	r0, [pc, #72]	; (80093a4 <706a956218859121b399480423d2fbe6bb70cd71+0xb0>)
 800935a:	e7de      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800935c:	4812      	ldr	r0, [pc, #72]	; (80093a8 <706a956218859121b399480423d2fbe6bb70cd71+0xb4>)
 800935e:	e7dc      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009360:	4812      	ldr	r0, [pc, #72]	; (80093ac <706a956218859121b399480423d2fbe6bb70cd71+0xb8>)
 8009362:	e7da      	b.n	800931a <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 8009364:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009368:	4630      	mov	r0, r6
 800936a:	f004 f927 	bl	800d5bc <LOGGER_Print>
 800936e:	e7e2      	b.n	8009336 <706a956218859121b399480423d2fbe6bb70cd71+0x42>
 8009370:	480e      	ldr	r0, [pc, #56]	; (80093ac <706a956218859121b399480423d2fbe6bb70cd71+0xb8>)
 8009372:	f004 f923 	bl	800d5bc <LOGGER_Print>
 8009376:	e7e0      	b.n	800933a <706a956218859121b399480423d2fbe6bb70cd71+0x46>
 8009378:	0801aa76 	.word	0x0801aa76
 800937c:	0801aa7e 	.word	0x0801aa7e
 8009380:	0801aab5 	.word	0x0801aab5
 8009384:	0801aac0 	.word	0x0801aac0
 8009388:	0801aabf 	.word	0x0801aabf
 800938c:	0801aac5 	.word	0x0801aac5
 8009390:	0801aa83 	.word	0x0801aa83
 8009394:	0801aa87 	.word	0x0801aa87
 8009398:	0801aa8b 	.word	0x0801aa8b
 800939c:	0801aa90 	.word	0x0801aa90
 80093a0:	0801aa96 	.word	0x0801aa96
 80093a4:	0801aa9d 	.word	0x0801aa9d
 80093a8:	0801aaa5 	.word	0x0801aaa5
 80093ac:	0801aaab 	.word	0x0801aaab

080093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4605      	mov	r5, r0
 80093b4:	b088      	sub	sp, #32
 80093b6:	460c      	mov	r4, r1
 80093b8:	b921      	cbnz	r1, 80093c4 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x14>
 80093ba:	4921      	ldr	r1, [pc, #132]	; (8009440 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x90>)
 80093bc:	4821      	ldr	r0, [pc, #132]	; (8009444 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x94>)
 80093be:	2219      	movs	r2, #25
 80093c0:	f7f8 f8e6 	bl	8001590 <EXPECT_OnAbortHandler>
 80093c4:	2211      	movs	r2, #17
 80093c6:	2100      	movs	r1, #0
 80093c8:	a803      	add	r0, sp, #12
 80093ca:	f00f fdd9 	bl	8018f80 <memset>
 80093ce:	7823      	ldrb	r3, [r4, #0]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d125      	bne.n	8009420 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x70>
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7ff fea3 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80093da:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 80093de:	b1b0      	cbz	r0, 800940e <c830e52416e40936b7f282734abfc3137eeaf4dc+0x5e>
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2202      	movs	r2, #2
 80093e4:	f88d 200c 	strb.w	r2, [sp, #12]
 80093e8:	f8ad 3013 	strh.w	r3, [sp, #19]
 80093ec:	462a      	mov	r2, r5
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	ae07      	add	r6, sp, #28
 80093f2:	461c      	mov	r4, r3
 80093f4:	cc03      	ldmia	r4!, {r0, r1}
 80093f6:	42b4      	cmp	r4, r6
 80093f8:	6010      	str	r0, [r2, #0]
 80093fa:	6051      	str	r1, [r2, #4]
 80093fc:	4623      	mov	r3, r4
 80093fe:	f102 0208 	add.w	r2, r2, #8
 8009402:	d1f6      	bne.n	80093f2 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x42>
 8009404:	7823      	ldrb	r3, [r4, #0]
 8009406:	7013      	strb	r3, [r2, #0]
 8009408:	4628      	mov	r0, r5
 800940a:	b008      	add	sp, #32
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	f8d4 2009 	ldr.w	r2, [r4, #9]
 8009412:	f8cd 200d 	str.w	r2, [sp, #13]
 8009416:	f8d4 200d 	ldr.w	r2, [r4, #13]
 800941a:	f8cd 2011 	str.w	r2, [sp, #17]
 800941e:	e7df      	b.n	80093e0 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x30>
 8009420:	2301      	movs	r3, #1
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	4b08      	ldr	r3, [pc, #32]	; (8009448 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x98>)
 8009426:	4a09      	ldr	r2, [pc, #36]	; (800944c <c830e52416e40936b7f282734abfc3137eeaf4dc+0x9c>)
 8009428:	9302      	str	r3, [sp, #8]
 800942a:	4619      	mov	r1, r3
 800942c:	2001      	movs	r0, #1
 800942e:	f004 f8fd 	bl	800d62c <LOGGER_PrintLine>
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff5e 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 8009438:	2300      	movs	r3, #0
 800943a:	461a      	mov	r2, r3
 800943c:	e7d2      	b.n	80093e4 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x34>
 800943e:	bf00      	nop
 8009440:	0801aa12 	.word	0x0801aa12
 8009444:	0801aac7 	.word	0x0801aac7
 8009448:	0801aac8 	.word	0x0801aac8
 800944c:	0801aad0 	.word	0x0801aad0

08009450 <2af6233fa7118fd11caf81b4f86d81e84f105465>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4605      	mov	r5, r0
 8009454:	b088      	sub	sp, #32
 8009456:	460c      	mov	r4, r1
 8009458:	b921      	cbnz	r1, 8009464 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x14>
 800945a:	4921      	ldr	r1, [pc, #132]	; (80094e0 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x90>)
 800945c:	4821      	ldr	r0, [pc, #132]	; (80094e4 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x94>)
 800945e:	222c      	movs	r2, #44	; 0x2c
 8009460:	f7f8 f896 	bl	8001590 <EXPECT_OnAbortHandler>
 8009464:	2211      	movs	r2, #17
 8009466:	2100      	movs	r1, #0
 8009468:	a803      	add	r0, sp, #12
 800946a:	f00f fd89 	bl	8018f80 <memset>
 800946e:	7823      	ldrb	r3, [r4, #0]
 8009470:	2b03      	cmp	r3, #3
 8009472:	d126      	bne.n	80094c2 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x72>
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff fe53 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800947a:	b1d8      	cbz	r0, 80094b4 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x64>
 800947c:	f8d4 3005 	ldr.w	r3, [r4, #5]
 8009480:	f8cd 300d 	str.w	r3, [sp, #13]
 8009484:	f8d4 3009 	ldr.w	r3, [r4, #9]
 8009488:	f8cd 3011 	str.w	r3, [sp, #17]
 800948c:	2305      	movs	r3, #5
 800948e:	f88d 300c 	strb.w	r3, [sp, #12]
 8009492:	462a      	mov	r2, r5
 8009494:	ab03      	add	r3, sp, #12
 8009496:	ae07      	add	r6, sp, #28
 8009498:	461c      	mov	r4, r3
 800949a:	cc03      	ldmia	r4!, {r0, r1}
 800949c:	42b4      	cmp	r4, r6
 800949e:	6010      	str	r0, [r2, #0]
 80094a0:	6051      	str	r1, [r2, #4]
 80094a2:	4623      	mov	r3, r4
 80094a4:	f102 0208 	add.w	r2, r2, #8
 80094a8:	d1f6      	bne.n	8009498 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x48>
 80094aa:	7823      	ldrb	r3, [r4, #0]
 80094ac:	7013      	strb	r3, [r2, #0]
 80094ae:	4628      	mov	r0, r5
 80094b0:	b008      	add	sp, #32
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	f8d4 3001 	ldr.w	r3, [r4, #1]
 80094b8:	f8cd 300d 	str.w	r3, [sp, #13]
 80094bc:	f8d4 3005 	ldr.w	r3, [r4, #5]
 80094c0:	e7e2      	b.n	8009488 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x38>
 80094c2:	2301      	movs	r3, #1
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x98>)
 80094c8:	4a08      	ldr	r2, [pc, #32]	; (80094ec <2af6233fa7118fd11caf81b4f86d81e84f105465+0x9c>)
 80094ca:	9302      	str	r3, [sp, #8]
 80094cc:	4619      	mov	r1, r3
 80094ce:	2001      	movs	r0, #1
 80094d0:	f004 f8ac 	bl	800d62c <LOGGER_PrintLine>
 80094d4:	4620      	mov	r0, r4
 80094d6:	f7ff ff0d 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 80094da:	2300      	movs	r3, #0
 80094dc:	e7d7      	b.n	800948e <2af6233fa7118fd11caf81b4f86d81e84f105465+0x3e>
 80094de:	bf00      	nop
 80094e0:	0801aa12 	.word	0x0801aa12
 80094e4:	0801aac7 	.word	0x0801aac7
 80094e8:	0801aac8 	.word	0x0801aac8
 80094ec:	0801aad0 	.word	0x0801aad0

080094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	4606      	mov	r6, r0
 80094f4:	b088      	sub	sp, #32
 80094f6:	4614      	mov	r4, r2
 80094f8:	460d      	mov	r5, r1
 80094fa:	b921      	cbnz	r1, 8009506 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x16>
 80094fc:	2240      	movs	r2, #64	; 0x40
 80094fe:	4923      	ldr	r1, [pc, #140]	; (800958c <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x9c>)
 8009500:	4823      	ldr	r0, [pc, #140]	; (8009590 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa0>)
 8009502:	f7f8 f845 	bl	8001590 <EXPECT_OnAbortHandler>
 8009506:	b90a      	cbnz	r2, 800950c <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x1c>
 8009508:	2241      	movs	r2, #65	; 0x41
 800950a:	e7f8      	b.n	80094fe <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xe>
 800950c:	2211      	movs	r2, #17
 800950e:	2100      	movs	r1, #0
 8009510:	a803      	add	r0, sp, #12
 8009512:	f00f fd35 	bl	8018f80 <memset>
 8009516:	782b      	ldrb	r3, [r5, #0]
 8009518:	2b05      	cmp	r3, #5
 800951a:	d126      	bne.n	800956a <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x7a>
 800951c:	7823      	ldrb	r3, [r4, #0]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d123      	bne.n	800956a <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x7a>
 8009522:	2303      	movs	r3, #3
 8009524:	f88d 300c 	strb.w	r3, [sp, #12]
 8009528:	f8d5 3001 	ldr.w	r3, [r5, #1]
 800952c:	f8cd 300d 	str.w	r3, [sp, #13]
 8009530:	f8d5 3005 	ldr.w	r3, [r5, #5]
 8009534:	f8cd 3011 	str.w	r3, [sp, #17]
 8009538:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800953c:	f8cd 3015 	str.w	r3, [sp, #21]
 8009540:	f8d4 3005 	ldr.w	r3, [r4, #5]
 8009544:	f8cd 3019 	str.w	r3, [sp, #25]
 8009548:	ab03      	add	r3, sp, #12
 800954a:	4632      	mov	r2, r6
 800954c:	ad07      	add	r5, sp, #28
 800954e:	461c      	mov	r4, r3
 8009550:	cc03      	ldmia	r4!, {r0, r1}
 8009552:	42ac      	cmp	r4, r5
 8009554:	6010      	str	r0, [r2, #0]
 8009556:	6051      	str	r1, [r2, #4]
 8009558:	4623      	mov	r3, r4
 800955a:	f102 0208 	add.w	r2, r2, #8
 800955e:	d1f6      	bne.n	800954e <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x5e>
 8009560:	7823      	ldrb	r3, [r4, #0]
 8009562:	7013      	strb	r3, [r2, #0]
 8009564:	4630      	mov	r0, r6
 8009566:	b008      	add	sp, #32
 8009568:	bd70      	pop	{r4, r5, r6, pc}
 800956a:	2301      	movs	r3, #1
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	4b09      	ldr	r3, [pc, #36]	; (8009594 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa4>)
 8009570:	4a09      	ldr	r2, [pc, #36]	; (8009598 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa8>)
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	4619      	mov	r1, r3
 8009576:	2001      	movs	r0, #1
 8009578:	f004 f858 	bl	800d62c <LOGGER_PrintLine>
 800957c:	4628      	mov	r0, r5
 800957e:	f7ff feb9 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 8009582:	4620      	mov	r0, r4
 8009584:	f7ff feb6 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 8009588:	e7de      	b.n	8009548 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x58>
 800958a:	bf00      	nop
 800958c:	0801aa12 	.word	0x0801aa12
 8009590:	0801aac7 	.word	0x0801aac7
 8009594:	0801aac8 	.word	0x0801aac8
 8009598:	0801aade 	.word	0x0801aade

0800959c <b4e42b26493966bc617e4c89906d69f121a97c96>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4605      	mov	r5, r0
 80095a0:	b088      	sub	sp, #32
 80095a2:	460c      	mov	r4, r1
 80095a4:	b921      	cbnz	r1, 80095b0 <b4e42b26493966bc617e4c89906d69f121a97c96+0x14>
 80095a6:	491b      	ldr	r1, [pc, #108]	; (8009614 <b4e42b26493966bc617e4c89906d69f121a97c96+0x78>)
 80095a8:	481b      	ldr	r0, [pc, #108]	; (8009618 <b4e42b26493966bc617e4c89906d69f121a97c96+0x7c>)
 80095aa:	2252      	movs	r2, #82	; 0x52
 80095ac:	f7f7 fff0 	bl	8001590 <EXPECT_OnAbortHandler>
 80095b0:	2211      	movs	r2, #17
 80095b2:	2100      	movs	r1, #0
 80095b4:	a803      	add	r0, sp, #12
 80095b6:	f00f fce3 	bl	8018f80 <memset>
 80095ba:	7823      	ldrb	r3, [r4, #0]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	f04f 0301 	mov.w	r3, #1
 80095c2:	d118      	bne.n	80095f6 <b4e42b26493966bc617e4c89906d69f121a97c96+0x5a>
 80095c4:	79e1      	ldrb	r1, [r4, #7]
 80095c6:	7a22      	ldrb	r2, [r4, #8]
 80095c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80095cc:	f88d 200e 	strb.w	r2, [sp, #14]
 80095d0:	f88d 100d 	strb.w	r1, [sp, #13]
 80095d4:	ab03      	add	r3, sp, #12
 80095d6:	462a      	mov	r2, r5
 80095d8:	ae07      	add	r6, sp, #28
 80095da:	461c      	mov	r4, r3
 80095dc:	cc03      	ldmia	r4!, {r0, r1}
 80095de:	42b4      	cmp	r4, r6
 80095e0:	6010      	str	r0, [r2, #0]
 80095e2:	6051      	str	r1, [r2, #4]
 80095e4:	4623      	mov	r3, r4
 80095e6:	f102 0208 	add.w	r2, r2, #8
 80095ea:	d1f6      	bne.n	80095da <b4e42b26493966bc617e4c89906d69f121a97c96+0x3e>
 80095ec:	7823      	ldrb	r3, [r4, #0]
 80095ee:	7013      	strb	r3, [r2, #0]
 80095f0:	4628      	mov	r0, r5
 80095f2:	b008      	add	sp, #32
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <b4e42b26493966bc617e4c89906d69f121a97c96+0x80>)
 80095fa:	4a09      	ldr	r2, [pc, #36]	; (8009620 <b4e42b26493966bc617e4c89906d69f121a97c96+0x84>)
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	4619      	mov	r1, r3
 8009602:	f004 f813 	bl	800d62c <LOGGER_PrintLine>
 8009606:	4620      	mov	r0, r4
 8009608:	f7ff fe74 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 800960c:	2200      	movs	r2, #0
 800960e:	4611      	mov	r1, r2
 8009610:	4613      	mov	r3, r2
 8009612:	e7d9      	b.n	80095c8 <b4e42b26493966bc617e4c89906d69f121a97c96+0x2c>
 8009614:	0801aa12 	.word	0x0801aa12
 8009618:	0801aac7 	.word	0x0801aac7
 800961c:	0801aac8 	.word	0x0801aac8
 8009620:	0801aafa 	.word	0x0801aafa

08009624 <9730579196d24a2a06a66ac441c59b7f99b57834>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4605      	mov	r5, r0
 8009628:	b088      	sub	sp, #32
 800962a:	460c      	mov	r4, r1
 800962c:	b921      	cbnz	r1, 8009638 <9730579196d24a2a06a66ac441c59b7f99b57834+0x14>
 800962e:	491c      	ldr	r1, [pc, #112]	; (80096a0 <9730579196d24a2a06a66ac441c59b7f99b57834+0x7c>)
 8009630:	481c      	ldr	r0, [pc, #112]	; (80096a4 <9730579196d24a2a06a66ac441c59b7f99b57834+0x80>)
 8009632:	2262      	movs	r2, #98	; 0x62
 8009634:	f7f7 ffac 	bl	8001590 <EXPECT_OnAbortHandler>
 8009638:	2211      	movs	r2, #17
 800963a:	2100      	movs	r1, #0
 800963c:	a803      	add	r0, sp, #12
 800963e:	f00f fc9f 	bl	8018f80 <memset>
 8009642:	7823      	ldrb	r3, [r4, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d11e      	bne.n	8009686 <9730579196d24a2a06a66ac441c59b7f99b57834+0x62>
 8009648:	2302      	movs	r3, #2
 800964a:	f88d 300c 	strb.w	r3, [sp, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	f8cd 300d 	str.w	r3, [sp, #13]
 8009654:	f8ad 3011 	strh.w	r3, [sp, #17]
 8009658:	7863      	ldrb	r3, [r4, #1]
 800965a:	f88d 3013 	strb.w	r3, [sp, #19]
 800965e:	78a3      	ldrb	r3, [r4, #2]
 8009660:	f88d 3014 	strb.w	r3, [sp, #20]
 8009664:	ab03      	add	r3, sp, #12
 8009666:	462a      	mov	r2, r5
 8009668:	ae07      	add	r6, sp, #28
 800966a:	461c      	mov	r4, r3
 800966c:	cc03      	ldmia	r4!, {r0, r1}
 800966e:	42b4      	cmp	r4, r6
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	6051      	str	r1, [r2, #4]
 8009674:	4623      	mov	r3, r4
 8009676:	f102 0208 	add.w	r2, r2, #8
 800967a:	d1f6      	bne.n	800966a <9730579196d24a2a06a66ac441c59b7f99b57834+0x46>
 800967c:	7823      	ldrb	r3, [r4, #0]
 800967e:	7013      	strb	r3, [r2, #0]
 8009680:	4628      	mov	r0, r5
 8009682:	b008      	add	sp, #32
 8009684:	bd70      	pop	{r4, r5, r6, pc}
 8009686:	2301      	movs	r3, #1
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <9730579196d24a2a06a66ac441c59b7f99b57834+0x84>)
 800968c:	4a07      	ldr	r2, [pc, #28]	; (80096ac <9730579196d24a2a06a66ac441c59b7f99b57834+0x88>)
 800968e:	9302      	str	r3, [sp, #8]
 8009690:	4619      	mov	r1, r3
 8009692:	2001      	movs	r0, #1
 8009694:	f003 ffca 	bl	800d62c <LOGGER_PrintLine>
 8009698:	4620      	mov	r0, r4
 800969a:	f7ff fe2b 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 800969e:	e7e1      	b.n	8009664 <9730579196d24a2a06a66ac441c59b7f99b57834+0x40>
 80096a0:	0801aa12 	.word	0x0801aa12
 80096a4:	0801aac7 	.word	0x0801aac7
 80096a8:	0801aac8 	.word	0x0801aac8
 80096ac:	0801ab07 	.word	0x0801ab07

080096b0 <144ed7de545b4a42832ce04a16bf065a50d4ff30>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4606      	mov	r6, r0
 80096b6:	b089      	sub	sp, #36	; 0x24
 80096b8:	4615      	mov	r5, r2
 80096ba:	460c      	mov	r4, r1
 80096bc:	b921      	cbnz	r1, 80096c8 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x18>
 80096be:	2273      	movs	r2, #115	; 0x73
 80096c0:	4937      	ldr	r1, [pc, #220]	; (80097a0 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf0>)
 80096c2:	4838      	ldr	r0, [pc, #224]	; (80097a4 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf4>)
 80096c4:	f7f7 ff64 	bl	8001590 <EXPECT_OnAbortHandler>
 80096c8:	b90a      	cbnz	r2, 80096ce <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x1e>
 80096ca:	2274      	movs	r2, #116	; 0x74
 80096cc:	e7f8      	b.n	80096c0 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x10>
 80096ce:	2211      	movs	r2, #17
 80096d0:	2100      	movs	r1, #0
 80096d2:	a803      	add	r0, sp, #12
 80096d4:	f00f fc54 	bl	8018f80 <memset>
 80096d8:	7822      	ldrb	r2, [r4, #0]
 80096da:	2a05      	cmp	r2, #5
 80096dc:	d142      	bne.n	8009764 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xb4>
 80096de:	782b      	ldrb	r3, [r5, #0]
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	d001      	beq.n	80096e8 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x38>
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d13d      	bne.n	8009764 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xb4>
 80096e8:	f894 b001 	ldrb.w	fp, [r4, #1]
 80096ec:	f894 a002 	ldrb.w	sl, [r4, #2]
 80096f0:	f894 9003 	ldrb.w	r9, [r4, #3]
 80096f4:	f894 8004 	ldrb.w	r8, [r4, #4]
 80096f8:	f894 e005 	ldrb.w	lr, [r4, #5]
 80096fc:	f894 c006 	ldrb.w	ip, [r4, #6]
 8009700:	79e7      	ldrb	r7, [r4, #7]
 8009702:	7a20      	ldrb	r0, [r4, #8]
 8009704:	7869      	ldrb	r1, [r5, #1]
 8009706:	78ab      	ldrb	r3, [r5, #2]
 8009708:	24ff      	movs	r4, #255	; 0xff
 800970a:	2503      	movs	r5, #3
 800970c:	f88d 500c 	strb.w	r5, [sp, #12]
 8009710:	f88d 400d 	strb.w	r4, [sp, #13]
 8009714:	f88d 301c 	strb.w	r3, [sp, #28]
 8009718:	f88d 200e 	strb.w	r2, [sp, #14]
 800971c:	f88d b011 	strb.w	fp, [sp, #17]
 8009720:	f88d a012 	strb.w	sl, [sp, #18]
 8009724:	f88d 9013 	strb.w	r9, [sp, #19]
 8009728:	f88d 8014 	strb.w	r8, [sp, #20]
 800972c:	f88d e015 	strb.w	lr, [sp, #21]
 8009730:	f88d c016 	strb.w	ip, [sp, #22]
 8009734:	f88d 7017 	strb.w	r7, [sp, #23]
 8009738:	f88d 0018 	strb.w	r0, [sp, #24]
 800973c:	f88d 101b 	strb.w	r1, [sp, #27]
 8009740:	ac03      	add	r4, sp, #12
 8009742:	4633      	mov	r3, r6
 8009744:	ad07      	add	r5, sp, #28
 8009746:	4622      	mov	r2, r4
 8009748:	ca03      	ldmia	r2!, {r0, r1}
 800974a:	42aa      	cmp	r2, r5
 800974c:	6018      	str	r0, [r3, #0]
 800974e:	6059      	str	r1, [r3, #4]
 8009750:	4614      	mov	r4, r2
 8009752:	f103 0308 	add.w	r3, r3, #8
 8009756:	d1f6      	bne.n	8009746 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x96>
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	4630      	mov	r0, r6
 800975e:	b009      	add	sp, #36	; 0x24
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	2301      	movs	r3, #1
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf8>)
 800976a:	4a10      	ldr	r2, [pc, #64]	; (80097ac <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xfc>)
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	4619      	mov	r1, r3
 8009770:	2001      	movs	r0, #1
 8009772:	f003 ff5b 	bl	800d62c <LOGGER_PrintLine>
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff fdbc 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 800977c:	4628      	mov	r0, r5
 800977e:	f7ff fdb9 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 8009782:	2300      	movs	r3, #0
 8009784:	4619      	mov	r1, r3
 8009786:	4618      	mov	r0, r3
 8009788:	461f      	mov	r7, r3
 800978a:	469c      	mov	ip, r3
 800978c:	469e      	mov	lr, r3
 800978e:	4698      	mov	r8, r3
 8009790:	4699      	mov	r9, r3
 8009792:	469a      	mov	sl, r3
 8009794:	469b      	mov	fp, r3
 8009796:	461a      	mov	r2, r3
 8009798:	461c      	mov	r4, r3
 800979a:	461d      	mov	r5, r3
 800979c:	e7b6      	b.n	800970c <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x5c>
 800979e:	bf00      	nop
 80097a0:	0801aa12 	.word	0x0801aa12
 80097a4:	0801aac7 	.word	0x0801aac7
 80097a8:	0801aac8 	.word	0x0801aac8
 80097ac:	0801ab14 	.word	0x0801ab14

080097b0 <f26cfbfa45ddc428fa93a21aa284ea921322a858>:
 80097b0:	b513      	push	{r0, r1, r4, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	b920      	cbnz	r0, 80097c0 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x10>
 80097b6:	4910      	ldr	r1, [pc, #64]	; (80097f8 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x48>)
 80097b8:	4810      	ldr	r0, [pc, #64]	; (80097fc <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x4c>)
 80097ba:	22a6      	movs	r2, #166	; 0xa6
 80097bc:	f7f7 fee8 	bl	8001590 <EXPECT_OnAbortHandler>
 80097c0:	7803      	ldrb	r3, [r0, #0]
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d108      	bne.n	80097d8 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x28>
 80097c6:	f7ff fcab 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80097ca:	b128      	cbz	r0, 80097d8 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x28>
 80097cc:	f8b4 000f 	ldrh.w	r0, [r4, #15]
 80097d0:	ba40      	rev16	r0, r0
 80097d2:	b280      	uxth	r0, r0
 80097d4:	b002      	add	sp, #8
 80097d6:	bd10      	pop	{r4, pc}
 80097d8:	2301      	movs	r3, #1
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	4b08      	ldr	r3, [pc, #32]	; (8009800 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x50>)
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	ab02      	add	r3, sp, #8
 80097e2:	e913 0003 	ldmdb	r3, {r0, r1}
 80097e6:	4a07      	ldr	r2, [pc, #28]	; (8009804 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x54>)
 80097e8:	f003 ff20 	bl	800d62c <LOGGER_PrintLine>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f7ff fd81 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e7ee      	b.n	80097d4 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x24>
 80097f6:	bf00      	nop
 80097f8:	0801aa12 	.word	0x0801aa12
 80097fc:	0801aac7 	.word	0x0801aac7
 8009800:	0801aac8 	.word	0x0801aac8
 8009804:	0801aad0 	.word	0x0801aad0

08009808 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>:
 8009808:	4800      	ldr	r0, [pc, #0]	; (800980c <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb+0x4>)
 800980a:	4770      	bx	lr
 800980c:	0801ab3c 	.word	0x0801ab3c

08009810 <fb597b96e7954383068bf796c46efbfe6f531f14>:
 8009810:	f200 1275 	addw	r2, r0, #373	; 0x175
 8009814:	6042      	str	r2, [r0, #4]
 8009816:	22fa      	movs	r2, #250	; 0xfa
 8009818:	6102      	str	r2, [r0, #16]
 800981a:	2201      	movs	r2, #1
 800981c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8009820:	2205      	movs	r2, #5
 8009822:	2300      	movs	r3, #0
 8009824:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 8009828:	f64f 7280 	movw	r2, #65408	; 0xff80
 800982c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
 8009830:	e9c0 3326 	strd	r3, r3, [r0, #152]	; 0x98
 8009834:	8003      	strh	r3, [r0, #0]
 8009836:	7203      	strb	r3, [r0, #8]
 8009838:	60c3      	str	r3, [r0, #12]
 800983a:	8283      	strh	r3, [r0, #20]
 800983c:	6183      	str	r3, [r0, #24]
 800983e:	8383      	strh	r3, [r0, #28]
 8009840:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8009844:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8009848:	65c3      	str	r3, [r0, #92]	; 0x5c
 800984a:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
 800984e:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
 8009852:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8009856:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800985a:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
 800985e:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
 8009862:	f8a0 20b6 	strh.w	r2, [r0, #182]	; 0xb6
 8009866:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800986a:	4770      	bx	lr

0800986c <8651bfcf35514b04809eb22bd8aa118172b46770>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <8651bfcf35514b04809eb22bd8aa118172b46770+0x34>)
 8009870:	681c      	ldr	r4, [r3, #0]
 8009872:	f604 73f8 	addw	r3, r4, #4088	; 0xff8
 8009876:	2100      	movs	r1, #0
 8009878:	f641 52cc 	movw	r2, #7628	; 0x1dcc
 800987c:	4618      	mov	r0, r3
 800987e:	f00f fb7f 	bl	8018f80 <memset>
 8009882:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8009886:	f500 51ed 	add.w	r1, r0, #7584	; 0x1da0
 800988a:	3110      	adds	r1, #16
 800988c:	f8c4 1db8 	str.w	r1, [r4, #3512]	; 0xdb8
 8009890:	f7ff ffbe 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009894:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 8009898:	4288      	cmp	r0, r1
 800989a:	d1f9      	bne.n	8009890 <8651bfcf35514b04809eb22bd8aa118172b46770+0x24>
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	20000034 	.word	0x20000034

080098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4b0d      	ldr	r3, [pc, #52]	; (80098dc <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x38>)
 80098a8:	681c      	ldr	r4, [r3, #0]
 80098aa:	f604 75f8 	addw	r5, r4, #4088	; 0xff8
 80098ae:	f504 5436 	add.w	r4, r4, #11648	; 0x2d80
 80098b2:	4606      	mov	r6, r0
 80098b4:	3428      	adds	r4, #40	; 0x28
 80098b6:	f7fc fc91 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80098ba:	782b      	ldrb	r3, [r5, #0]
 80098bc:	42b3      	cmp	r3, r6
 80098be:	d105      	bne.n	80098cc <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x28>
 80098c0:	786b      	ldrb	r3, [r5, #1]
 80098c2:	2b31      	cmp	r3, #49	; 0x31
 80098c4:	d002      	beq.n	80098cc <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x28>
 80098c6:	4628      	mov	r0, r5
 80098c8:	f7ff ffa2 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 80098cc:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 80098d0:	f7fc fca4 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80098d4:	42a5      	cmp	r5, r4
 80098d6:	d1ee      	bne.n	80098b6 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x12>
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	bf00      	nop
 80098dc:	20000034 	.word	0x20000034

080098e0 <77b737f3175c59c67851de07d0921a2dae9a70ab>:
 80098e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	4b1d      	ldr	r3, [pc, #116]	; (800995c <77b737f3175c59c67851de07d0921a2dae9a70ab+0x7c>)
 80098e6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009960 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x80>
 80098ea:	681f      	ldr	r7, [r3, #0]
 80098ec:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009964 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x84>
 80098f0:	4606      	mov	r6, r0
 80098f2:	f607 75f8 	addw	r5, r7, #4088	; 0xff8
 80098f6:	2400      	movs	r4, #0
 80098f8:	f44f 78be 	mov.w	r8, #380	; 0x17c
 80098fc:	f7fc fc6e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009900:	786b      	ldrb	r3, [r5, #1]
 8009902:	2b40      	cmp	r3, #64	; 0x40
 8009904:	d120      	bne.n	8009948 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x68>
 8009906:	fb08 7204 	mla	r2, r8, r4, r7
 800990a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 800990e:	3208      	adds	r2, #8
 8009910:	f8d2 0007 	ldr.w	r0, [r2, #7]
 8009914:	6831      	ldr	r1, [r6, #0]
 8009916:	7ad2      	ldrb	r2, [r2, #11]
 8009918:	7933      	ldrb	r3, [r6, #4]
 800991a:	1a09      	subs	r1, r1, r0
 800991c:	eb63 0302 	sbc.w	r3, r3, r2
 8009920:	f640 1225 	movw	r2, #2341	; 0x925
 8009924:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8009928:	4291      	cmp	r1, r2
 800992a:	f173 0300 	sbcs.w	r3, r3, #0
 800992e:	d30b      	bcc.n	8009948 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x68>
 8009930:	4628      	mov	r0, r5
 8009932:	f7ff ff6d 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009936:	2303      	movs	r3, #3
 8009938:	e9cd 3900 	strd	r3, r9, [sp]
 800993c:	ab02      	add	r3, sp, #8
 800993e:	e913 0003 	ldmdb	r3, {r0, r1}
 8009942:	4652      	mov	r2, sl
 8009944:	f003 fe72 	bl	800d62c <LOGGER_PrintLine>
 8009948:	3401      	adds	r4, #1
 800994a:	f7fc fc67 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800994e:	2c14      	cmp	r4, #20
 8009950:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 8009954:	d1d2      	bne.n	80098fc <77b737f3175c59c67851de07d0921a2dae9a70ab+0x1c>
 8009956:	b002      	add	sp, #8
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995c:	20000034 	.word	0x20000034
 8009960:	0801ab44 	.word	0x0801ab44
 8009964:	0801ab4a 	.word	0x0801ab4a

08009968 <5abd2f358b9e462fcede09cdd96a94c4ca379573>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <5abd2f358b9e462fcede09cdd96a94c4ca379573+0x28>)
 800996c:	681c      	ldr	r4, [r3, #0]
 800996e:	f604 75f8 	addw	r5, r4, #4088	; 0xff8
 8009972:	f504 5436 	add.w	r4, r4, #11648	; 0x2d80
 8009976:	3428      	adds	r4, #40	; 0x28
 8009978:	f7fc fc30 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800997c:	4628      	mov	r0, r5
 800997e:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 8009982:	f7ff ff45 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009986:	f7fc fc49 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800998a:	42a5      	cmp	r5, r4
 800998c:	d1f4      	bne.n	8009978 <5abd2f358b9e462fcede09cdd96a94c4ca379573+0x10>
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20000034 	.word	0x20000034

08009994 <e1319048c142912ea91dcc918ab796551ce50481>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <e1319048c142912ea91dcc918ab796551ce50481+0x2c>)
 8009998:	681c      	ldr	r4, [r3, #0]
 800999a:	f504 56ed 	add.w	r6, r4, #7584	; 0x1da0
 800999e:	3610      	adds	r6, #16
 80099a0:	2500      	movs	r5, #0
 80099a2:	f7fc fc1b 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80099a6:	f894 3ff9 	ldrb.w	r3, [r4, #4089]	; 0xff9
 80099aa:	b903      	cbnz	r3, 80099ae <e1319048c142912ea91dcc918ab796551ce50481+0x1a>
 80099ac:	3501      	adds	r5, #1
 80099ae:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 80099b2:	f7fc fc33 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80099b6:	42b4      	cmp	r4, r6
 80099b8:	d1f3      	bne.n	80099a2 <e1319048c142912ea91dcc918ab796551ce50481+0xe>
 80099ba:	4628      	mov	r0, r5
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	bf00      	nop
 80099c0:	20000034 	.word	0x20000034

080099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>:
 80099c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	4e58      	ldr	r6, [pc, #352]	; (8009b2c <331ec243926b1d9fd1d86c735e311ea19678e45f+0x168>)
 80099ca:	b088      	sub	sp, #32
 80099cc:	6834      	ldr	r4, [r6, #0]
 80099ce:	4607      	mov	r7, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f000 80a1 	beq.w	8009b18 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 80099d6:	f7fc fc01 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80099da:	f7ff ffdb 	bl	8009994 <e1319048c142912ea91dcc918ab796551ce50481>
 80099de:	4605      	mov	r5, r0
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d157      	bne.n	8009a94 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xd0>
 80099e4:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80099e8:	f893 2dc1 	ldrb.w	r2, [r3, #3521]	; 0xdc1
 80099ec:	b93a      	cbnz	r2, 80099fe <331ec243926b1d9fd1d86c735e311ea19678e45f+0x3a>
 80099ee:	f8d3 1db8 	ldr.w	r1, [r3, #3512]	; 0xdb8
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2dc1 	strb.w	r2, [r3, #3521]	; 0xdc1
 80099f8:	684a      	ldr	r2, [r1, #4]
 80099fa:	3201      	adds	r2, #1
 80099fc:	604a      	str	r2, [r1, #4]
 80099fe:	f893 3dc0 	ldrb.w	r3, [r3, #3520]	; 0xdc0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d04f      	beq.n	8009aa6 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xe2>
 8009a06:	f7fc fc09 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009a0a:	2f73      	cmp	r7, #115	; 0x73
 8009a0c:	d85b      	bhi.n	8009ac6 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x102>
 8009a0e:	2500      	movs	r5, #0
 8009a10:	f44f 76be 	mov.w	r6, #380	; 0x17c
 8009a14:	f604 78f9 	addw	r8, r4, #4089	; 0xff9
 8009a18:	f7fc fbe0 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009a1c:	fb06 f205 	mul.w	r2, r6, r5
 8009a20:	f818 1002 	ldrb.w	r1, [r8, r2]
 8009a24:	2900      	cmp	r1, #0
 8009a26:	d17a      	bne.n	8009b1e <331ec243926b1d9fd1d86c735e311ea19678e45f+0x15a>
 8009a28:	18a6      	adds	r6, r4, r2
 8009a2a:	f202 1375 	addw	r3, r2, #373	; 0x175
 8009a2e:	f604 74f8 	addw	r4, r4, #4088	; 0xff8
 8009a32:	f8d6 0ffc 	ldr.w	r0, [r6, #4092]	; 0xffc
 8009a36:	4423      	add	r3, r4
 8009a38:	4298      	cmp	r0, r3
 8009a3a:	eb04 0802 	add.w	r8, r4, r2
 8009a3e:	d019      	beq.n	8009a74 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xb0>
 8009a40:	2303      	movs	r3, #3
 8009a42:	9306      	str	r3, [sp, #24]
 8009a44:	32b9      	adds	r2, #185	; 0xb9
 8009a46:	4b3a      	ldr	r3, [pc, #232]	; (8009b30 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x16c>)
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	4414      	add	r4, r2
 8009a4c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 8009a50:	9404      	str	r4, [sp, #16]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	4a37      	ldr	r2, [pc, #220]	; (8009b34 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x170>)
 8009a56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009a5a:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 8009a5e:	e9cd 1300 	strd	r1, r3, [sp]
 8009a62:	a908      	add	r1, sp, #32
 8009a64:	e911 0003 	ldmdb	r1, {r0, r1}
 8009a68:	462b      	mov	r3, r5
 8009a6a:	f003 fddf 	bl	800d62c <LOGGER_PrintLine>
 8009a6e:	4640      	mov	r0, r8
 8009a70:	f7ff fece 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009a74:	f886 7ff8 	strb.w	r7, [r6, #4088]	; 0xff8
 8009a78:	f886 7ff9 	strb.w	r7, [r6, #4089]	; 0xff9
 8009a7c:	f7fc fbce 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009a80:	f7ff ff88 	bl	8009994 <e1319048c142912ea91dcc918ab796551ce50481>
 8009a84:	f1c0 0014 	rsb	r0, r0, #20
 8009a88:	f00d fff8 	bl	8017a7c <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	b008      	add	sp, #32
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a94:	f1c0 0314 	rsb	r3, r0, #20
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d90e      	bls.n	8009aba <331ec243926b1d9fd1d86c735e311ea19678e45f+0xf6>
 8009a9c:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8009aa0:	f893 3dc0 	ldrb.w	r3, [r3, #3520]	; 0xdc0
 8009aa4:	b94b      	cbnz	r3, 8009aba <331ec243926b1d9fd1d86c735e311ea19678e45f+0xf6>
 8009aa6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 8009ab0:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 8009ab4:	6813      	ldr	r3, [r2, #0]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	f7fc fbaf 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009abe:	2f73      	cmp	r7, #115	; 0x73
 8009ac0:	d9a5      	bls.n	8009a0e <331ec243926b1d9fd1d86c735e311ea19678e45f+0x4a>
 8009ac2:	2d06      	cmp	r5, #6
 8009ac4:	d8a3      	bhi.n	8009a0e <331ec243926b1d9fd1d86c735e311ea19678e45f+0x4a>
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	6834      	ldr	r4, [r6, #0]
 8009aca:	4e19      	ldr	r6, [pc, #100]	; (8009b30 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x16c>)
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	9607      	str	r6, [sp, #28]
 8009ad0:	ad06      	add	r5, sp, #24
 8009ad2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ad6:	4a18      	ldr	r2, [pc, #96]	; (8009b38 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x174>)
 8009ad8:	463b      	mov	r3, r7
 8009ada:	f003 fda7 	bl	800d62c <LOGGER_PrintLine>
 8009ade:	f003 fd7f 	bl	800d5e0 <LOGGER_StartSection>
 8009ae2:	b1c8      	cbz	r0, 8009b18 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 8009ae4:	2305      	movs	r3, #5
 8009ae6:	e9cd 3606 	strd	r3, r6, [sp, #24]
 8009aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009aee:	f003 fd7f 	bl	800d5f0 <LOGGER_PrintHeader>
 8009af2:	f504 55ed 	add.w	r5, r4, #7584	; 0x1da0
 8009af6:	4e11      	ldr	r6, [pc, #68]	; (8009b3c <331ec243926b1d9fd1d86c735e311ea19678e45f+0x178>)
 8009af8:	3510      	adds	r5, #16
 8009afa:	f894 2ff8 	ldrb.w	r2, [r4, #4088]	; 0xff8
 8009afe:	f894 1ff9 	ldrb.w	r1, [r4, #4089]	; 0xff9
 8009b02:	4630      	mov	r0, r6
 8009b04:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009b08:	f003 fd58 	bl	800d5bc <LOGGER_Print>
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d1f4      	bne.n	8009afa <331ec243926b1d9fd1d86c735e311ea19678e45f+0x136>
 8009b10:	f003 fd4c 	bl	800d5ac <LOGGER_PrintNL>
 8009b14:	f003 fd6a 	bl	800d5ec <LOGGER_EndSection>
 8009b18:	f04f 0800 	mov.w	r8, #0
 8009b1c:	e7b6      	b.n	8009a8c <331ec243926b1d9fd1d86c735e311ea19678e45f+0xc8>
 8009b1e:	3501      	adds	r5, #1
 8009b20:	f7fc fb7c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009b24:	2d14      	cmp	r5, #20
 8009b26:	f47f af77 	bne.w	8009a18 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x54>
 8009b2a:	e7f5      	b.n	8009b18 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 8009b2c:	20000034 	.word	0x20000034
 8009b30:	0801ab44 	.word	0x0801ab44
 8009b34:	0801aba3 	.word	0x0801aba3
 8009b38:	0801ab5e 	.word	0x0801ab5e
 8009b3c:	0801ab8f 	.word	0x0801ab8f

08009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>:
 8009b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b42:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x70>)
 8009b44:	681e      	ldr	r6, [r3, #0]
 8009b46:	4607      	mov	r7, r0
 8009b48:	f606 75f8 	addw	r5, r6, #4088	; 0xff8
 8009b4c:	2400      	movs	r4, #0
 8009b4e:	f7fc fb45 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009b52:	42bd      	cmp	r5, r7
 8009b54:	d119      	bne.n	8009b8a <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x4a>
 8009b56:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8009b5a:	fb03 6604 	mla	r6, r3, r4, r6
 8009b5e:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 8009b62:	b923      	cbnz	r3, 8009b6e <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x2e>
 8009b64:	4913      	ldr	r1, [pc, #76]	; (8009bb4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x74>)
 8009b66:	4814      	ldr	r0, [pc, #80]	; (8009bb8 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x78>)
 8009b68:	22b5      	movs	r2, #181	; 0xb5
 8009b6a:	f7f7 fd11 	bl	8001590 <EXPECT_OnAbortHandler>
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f7ff fe4e 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009b74:	f7fc fb52 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009b78:	f7ff ff0c 	bl	8009994 <e1319048c142912ea91dcc918ab796551ce50481>
 8009b7c:	f1c0 0014 	rsb	r0, r0, #20
 8009b80:	f00d ff7c 	bl	8017a7c <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>
 8009b84:	2001      	movs	r0, #1
 8009b86:	b003      	add	sp, #12
 8009b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8a:	3401      	adds	r4, #1
 8009b8c:	f7fc fb46 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009b90:	2c14      	cmp	r4, #20
 8009b92:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 8009b96:	d1da      	bne.n	8009b4e <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0xe>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x7c>)
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	ab02      	add	r3, sp, #8
 8009ba2:	e913 0003 	ldmdb	r3, {r0, r1}
 8009ba6:	4a06      	ldr	r2, [pc, #24]	; (8009bc0 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x80>)
 8009ba8:	f003 fd40 	bl	800d62c <LOGGER_PrintLine>
 8009bac:	2000      	movs	r0, #0
 8009bae:	e7ea      	b.n	8009b86 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x46>
 8009bb0:	20000034 	.word	0x20000034
 8009bb4:	0801ac11 	.word	0x0801ac11
 8009bb8:	0801ac73 	.word	0x0801ac73
 8009bbc:	0801ab44 	.word	0x0801ab44
 8009bc0:	0801ac8b 	.word	0x0801ac8b

08009bc4 <4b9793db96fa05ad63a954fae76e17c90da5d34d>:
 8009bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4b42      	ldr	r3, [pc, #264]	; (8009cd4 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x110>)
 8009bca:	681f      	ldr	r7, [r3, #0]
 8009bcc:	f7fc fb06 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009bd0:	f7ff fee0 	bl	8009994 <e1319048c142912ea91dcc918ab796551ce50481>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d15d      	bne.n	8009c96 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xd2>
 8009bda:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009bde:	f893 2dc1 	ldrb.w	r2, [r3, #3521]	; 0xdc1
 8009be2:	2a00      	cmp	r2, #0
 8009be4:	d048      	beq.n	8009c78 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xb4>
 8009be6:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 8009bea:	b93a      	cbnz	r2, 8009bfc <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x38>
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 8009bf2:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	f7fc fb0e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009c00:	2500      	movs	r5, #0
 8009c02:	f607 74f8 	addw	r4, r7, #4088	; 0xff8
 8009c06:	f04f 38ff 	mov.w	r8, #4294967295
 8009c0a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009c0e:	462e      	mov	r6, r5
 8009c10:	f44f 7abe 	mov.w	sl, #380	; 0x17c
 8009c14:	f241 0b48 	movw	fp, #4168	; 0x1048
 8009c18:	f7fc fae0 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009c1c:	7863      	ldrb	r3, [r4, #1]
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	d113      	bne.n	8009c4a <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 8009c22:	7823      	ldrb	r3, [r4, #0]
 8009c24:	2b74      	cmp	r3, #116	; 0x74
 8009c26:	d803      	bhi.n	8009c30 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x6c>
 8009c28:	d10f      	bne.n	8009c4a <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 8009c2a:	7c23      	ldrb	r3, [r4, #16]
 8009c2c:	2b3a      	cmp	r3, #58	; 0x3a
 8009c2e:	d00c      	beq.n	8009c4a <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 8009c30:	fb0a 7305 	mla	r3, sl, r5, r7
 8009c34:	445b      	add	r3, fp
 8009c36:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8009c3a:	7adb      	ldrb	r3, [r3, #11]
 8009c3c:	4542      	cmp	r2, r8
 8009c3e:	eb73 0109 	sbcs.w	r1, r3, r9
 8009c42:	bf3e      	ittt	cc
 8009c44:	4690      	movcc	r8, r2
 8009c46:	4699      	movcc	r9, r3
 8009c48:	4626      	movcc	r6, r4
 8009c4a:	3501      	adds	r5, #1
 8009c4c:	f7fc fae6 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009c50:	2d14      	cmp	r5, #20
 8009c52:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009c56:	d1df      	bne.n	8009c18 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x54>
 8009c58:	2e00      	cmp	r6, #0
 8009c5a:	d037      	beq.n	8009ccc <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x108>
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4b1d      	ldr	r3, [pc, #116]	; (8009cd8 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x114>)
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	ab02      	add	r3, sp, #8
 8009c66:	e913 0003 	ldmdb	r3, {r0, r1}
 8009c6a:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x118>)
 8009c6c:	f003 fcde 	bl	800d62c <LOGGER_PrintLine>
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff ff65 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8009c76:	e023      	b.n	8009cc0 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xfc>
 8009c78:	f8d3 0db8 	ldr.w	r0, [r3, #3512]	; 0xdb8
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	f883 1dc1 	strb.w	r1, [r3, #3521]	; 0xdc1
 8009c82:	6842      	ldr	r2, [r0, #4]
 8009c84:	440a      	add	r2, r1
 8009c86:	6042      	str	r2, [r0, #4]
 8009c88:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d1b5      	bne.n	8009bfc <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x38>
 8009c90:	f883 1dc0 	strb.w	r1, [r3, #3520]	; 0xdc0
 8009c94:	e7ad      	b.n	8009bf2 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x2e>
 8009c96:	f1c0 0314 	rsb	r3, r0, #20
 8009c9a:	2b0f      	cmp	r3, #15
 8009c9c:	d90c      	bls.n	8009cb8 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xf4>
 8009c9e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009ca2:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 8009ca6:	b93a      	cbnz	r2, 8009cb8 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xf4>
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 8009cae:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	f7fc fab0 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009cbc:	2c06      	cmp	r4, #6
 8009cbe:	d99f      	bls.n	8009c00 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x3c>
 8009cc0:	2074      	movs	r0, #116	; 0x74
 8009cc2:	b003      	add	sp, #12
 8009cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	f7ff be7c 	b.w	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8009ccc:	4630      	mov	r0, r6
 8009cce:	b003      	add	sp, #12
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	20000034 	.word	0x20000034
 8009cd8:	0801ab44 	.word	0x0801ab44
 8009cdc:	0801acae 	.word	0x0801acae

08009ce0 <QUEUE_MacNotifySuperframeStart>:
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <QUEUE_MacNotifySuperframeStart+0x48>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8009ce8:	f8d2 1dbc 	ldr.w	r1, [r2, #3516]	; 0xdbc
 8009cec:	3101      	adds	r1, #1
 8009cee:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8009cf2:	d005      	beq.n	8009d00 <QUEUE_MacNotifySuperframeStart+0x20>
 8009cf4:	f8c2 1dbc 	str.w	r1, [r2, #3516]	; 0xdbc
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f8a2 3dc0 	strh.w	r3, [r2, #3520]	; 0xdc0
 8009cfe:	4770      	bx	lr
 8009d00:	2100      	movs	r1, #0
 8009d02:	f8d2 0db8 	ldr.w	r0, [r2, #3512]	; 0xdb8
 8009d06:	f8c2 1dbc 	str.w	r1, [r2, #3516]	; 0xdbc
 8009d0a:	f603 71f8 	addw	r1, r3, #4088	; 0xff8
 8009d0e:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8009d12:	3328      	adds	r3, #40	; 0x28
 8009d14:	4298      	cmp	r0, r3
 8009d16:	bf03      	ittte	eq
 8009d18:	f501 51ed 	addeq.w	r1, r1, #7584	; 0x1da0
 8009d1c:	3118      	addeq	r1, #24
 8009d1e:	f8c2 1db8 	streq.w	r1, [r2, #3512]	; 0xdb8
 8009d22:	f8c2 3db8 	strne.w	r3, [r2, #3512]	; 0xdb8
 8009d26:	e7e7      	b.n	8009cf8 <QUEUE_MacNotifySuperframeStart+0x18>
 8009d28:	20000034 	.word	0x20000034

08009d2c <207e15ee7bccb2eb76dd4c1d27604170dc079160>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x44>)
 8009d30:	681c      	ldr	r4, [r3, #0]
 8009d32:	2500      	movs	r5, #0
 8009d34:	4626      	mov	r6, r4
 8009d36:	f7fc fa51 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009d3a:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 8009d3e:	2b41      	cmp	r3, #65	; 0x41
 8009d40:	d10c      	bne.n	8009d5c <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x30>
 8009d42:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 8009d46:	2b31      	cmp	r3, #49	; 0x31
 8009d48:	d008      	beq.n	8009d5c <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x30>
 8009d4a:	f7fc fa67 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009d4e:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8009d52:	fb03 4005 	mla	r0, r3, r5, r4
 8009d56:	f600 70f8 	addw	r0, r0, #4088	; 0xff8
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	f7fc fa5d 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009d62:	2d14      	cmp	r5, #20
 8009d64:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 8009d68:	d1e5      	bne.n	8009d36 <207e15ee7bccb2eb76dd4c1d27604170dc079160+0xa>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e7f5      	b.n	8009d5a <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x2e>
 8009d6e:	bf00      	nop
 8009d70:	20000034 	.word	0x20000034

08009d74 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x44>)
 8009d78:	681c      	ldr	r4, [r3, #0]
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	4626      	mov	r6, r4
 8009d7e:	f7fc fa2d 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009d82:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 8009d86:	2b41      	cmp	r3, #65	; 0x41
 8009d88:	d10c      	bne.n	8009da4 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x30>
 8009d8a:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 8009d8e:	2b31      	cmp	r3, #49	; 0x31
 8009d90:	d108      	bne.n	8009da4 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x30>
 8009d92:	f7fc fa43 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009d96:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8009d9a:	fb03 4005 	mla	r0, r3, r5, r4
 8009d9e:	f600 70f8 	addw	r0, r0, #4088	; 0xff8
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	3501      	adds	r5, #1
 8009da6:	f7fc fa39 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009daa:	2d14      	cmp	r5, #20
 8009dac:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 8009db0:	d1e5      	bne.n	8009d7e <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0xa>
 8009db2:	2000      	movs	r0, #0
 8009db4:	e7f5      	b.n	8009da2 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x2e>
 8009db6:	bf00      	nop
 8009db8:	20000034 	.word	0x20000034

08009dbc <43f11770a6d1a267a732a77a0ad450aed83746a6>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x4c>)
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 8009dc6:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 8009dca:	4607      	mov	r7, r0
 8009dcc:	3419      	adds	r4, #25
 8009dce:	3529      	adds	r5, #41	; 0x29
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	f7fc fa03 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009dd6:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 8009dda:	2b41      	cmp	r3, #65	; 0x41
 8009ddc:	d10c      	bne.n	8009df8 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 8009dde:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 8009de2:	2b53      	cmp	r3, #83	; 0x53
 8009de4:	d108      	bne.n	8009df8 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 8009de6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009dea:	b92b      	cbnz	r3, 8009df8 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4638      	mov	r0, r7
 8009df0:	f7ff fa6c 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8009df4:	b100      	cbz	r0, 8009df8 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 8009df6:	3601      	adds	r6, #1
 8009df8:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009dfc:	f7fc fa0e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009e00:	42ac      	cmp	r4, r5
 8009e02:	d1e6      	bne.n	8009dd2 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x16>
 8009e04:	4630      	mov	r0, r6
 8009e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e08:	20000034 	.word	0x20000034

08009e0c <794cbfdf72fe426231c38719436bf778a99748c2>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <794cbfdf72fe426231c38719436bf778a99748c2+0x34>)
 8009e10:	681c      	ldr	r4, [r3, #0]
 8009e12:	f504 56ed 	add.w	r6, r4, #7584	; 0x1da0
 8009e16:	3610      	adds	r6, #16
 8009e18:	2500      	movs	r5, #0
 8009e1a:	f7fc f9df 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009e1e:	f894 3ff9 	ldrb.w	r3, [r4, #4089]	; 0xff9
 8009e22:	2b41      	cmp	r3, #65	; 0x41
 8009e24:	d104      	bne.n	8009e30 <794cbfdf72fe426231c38719436bf778a99748c2+0x24>
 8009e26:	f894 3ff8 	ldrb.w	r3, [r4, #4088]	; 0xff8
 8009e2a:	2b53      	cmp	r3, #83	; 0x53
 8009e2c:	bf08      	it	eq
 8009e2e:	3501      	addeq	r5, #1
 8009e30:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009e34:	f7fc f9f2 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009e38:	42b4      	cmp	r4, r6
 8009e3a:	d1ee      	bne.n	8009e1a <794cbfdf72fe426231c38719436bf778a99748c2+0xe>
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
 8009e40:	20000034 	.word	0x20000034

08009e44 <9384e57fa8b386170558ee17f590b88f318c4273>:
 8009e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e46:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <9384e57fa8b386170558ee17f590b88f318c4273+0x64>)
 8009e48:	681d      	ldr	r5, [r3, #0]
 8009e4a:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 8009e4e:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 8009e52:	4606      	mov	r6, r0
 8009e54:	3419      	adds	r4, #25
 8009e56:	3529      	adds	r5, #41	; 0x29
 8009e58:	f7fc f9c0 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009e5c:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 8009e60:	2b53      	cmp	r3, #83	; 0x53
 8009e62:	d119      	bne.n	8009e98 <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 8009e64:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009e68:	b9b3      	cbnz	r3, 8009e98 <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff fa2d 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8009e72:	b188      	cbz	r0, 8009e98 <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 8009e74:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 8009e78:	2b31      	cmp	r3, #49	; 0x31
 8009e7a:	d00d      	beq.n	8009e98 <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 8009e7c:	2305      	movs	r3, #5
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <9384e57fa8b386170558ee17f590b88f318c4273+0x68>)
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	ab02      	add	r3, sp, #8
 8009e86:	e913 0003 	ldmdb	r3, {r0, r1}
 8009e8a:	4a09      	ldr	r2, [pc, #36]	; (8009eb0 <9384e57fa8b386170558ee17f590b88f318c4273+0x6c>)
 8009e8c:	f003 fbce 	bl	800d62c <LOGGER_PrintLine>
 8009e90:	f1a4 0041 	sub.w	r0, r4, #65	; 0x41
 8009e94:	f7ff fcbc 	bl	8009810 <fb597b96e7954383068bf796c46efbfe6f531f14>
 8009e98:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009e9c:	f7fc f9be 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009ea0:	42ac      	cmp	r4, r5
 8009ea2:	d1d9      	bne.n	8009e58 <9384e57fa8b386170558ee17f590b88f318c4273+0x14>
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	20000034 	.word	0x20000034
 8009eac:	0801ab44 	.word	0x0801ab44
 8009eb0:	0801ace1 	.word	0x0801ace1

08009eb4 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	7803      	ldrb	r3, [r0, #0]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	4607      	mov	r7, r0
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	d12e      	bne.n	8009f1e <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6a>
 8009ec0:	780b      	ldrb	r3, [r1, #0]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d12b      	bne.n	8009f1e <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6a>
 8009ec6:	4b16      	ldr	r3, [pc, #88]	; (8009f20 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6c>)
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 8009ece:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 8009ed2:	3419      	adds	r4, #25
 8009ed4:	3529      	adds	r5, #41	; 0x29
 8009ed6:	f7fc f981 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009eda:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 8009ede:	2b40      	cmp	r3, #64	; 0x40
 8009ee0:	d117      	bne.n	8009f12 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 8009ee2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8009ee6:	b9a3      	cbnz	r3, 8009f12 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4638      	mov	r0, r7
 8009eec:	f7ff f9ee 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8009ef0:	b178      	cbz	r0, 8009f12 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 8009ef2:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 8009ef6:	2b6f      	cmp	r3, #111	; 0x6f
 8009ef8:	d90b      	bls.n	8009f12 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 8009efa:	4633      	mov	r3, r6
 8009efc:	4622      	mov	r2, r4
 8009efe:	f106 0110 	add.w	r1, r6, #16
 8009f02:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f06:	f842 0b04 	str.w	r0, [r2], #4
 8009f0a:	428b      	cmp	r3, r1
 8009f0c:	d1f9      	bne.n	8009f02 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x4e>
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 8009f16:	f7fc f981 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009f1a:	42ac      	cmp	r4, r5
 8009f1c:	d1db      	bne.n	8009ed6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x22>
 8009f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f20:	20000034 	.word	0x20000034

08009f24 <d9cd3de8850ba05653155beecb1d40906820436e>:
 8009f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f28:	4b42      	ldr	r3, [pc, #264]	; (800a034 <d9cd3de8850ba05653155beecb1d40906820436e+0x110>)
 8009f2a:	681f      	ldr	r7, [r3, #0]
 8009f2c:	f507 5581 	add.w	r5, r7, #4128	; 0x1020
 8009f30:	3519      	adds	r5, #25
 8009f32:	f507 5937 	add.w	r9, r7, #11712	; 0x2dc0
 8009f36:	4680      	mov	r8, r0
 8009f38:	f109 0929 	add.w	r9, r9, #41	; 0x29
 8009f3c:	462e      	mov	r6, r5
 8009f3e:	2400      	movs	r4, #0
 8009f40:	f7fc f94c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009f44:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d107      	bne.n	8009f5c <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 8009f4c:	7cf3      	ldrb	r3, [r6, #19]
 8009f4e:	b12b      	cbz	r3, 8009f5c <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 8009f50:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 8009f54:	2b90      	cmp	r3, #144	; 0x90
 8009f56:	d15a      	bne.n	800a00e <d9cd3de8850ba05653155beecb1d40906820436e+0xea>
 8009f58:	f1a6 0441 	sub.w	r4, r6, #65	; 0x41
 8009f5c:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 8009f60:	f7fc f95c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009f64:	454e      	cmp	r6, r9
 8009f66:	d1eb      	bne.n	8009f40 <d9cd3de8850ba05653155beecb1d40906820436e+0x1c>
 8009f68:	2c00      	cmp	r4, #0
 8009f6a:	d143      	bne.n	8009ff4 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 8009f6c:	462e      	mov	r6, r5
 8009f6e:	f7fc f935 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009f72:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 8009f76:	2b40      	cmp	r3, #64	; 0x40
 8009f78:	d109      	bne.n	8009f8e <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 8009f7a:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 8009f7e:	2b50      	cmp	r3, #80	; 0x50
 8009f80:	d105      	bne.n	8009f8e <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff f8cc 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8009f88:	b108      	cbz	r0, 8009f8e <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 8009f8a:	f1a6 0441 	sub.w	r4, r6, #65	; 0x41
 8009f8e:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 8009f92:	f7fc f943 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009f96:	454e      	cmp	r6, r9
 8009f98:	d1e9      	bne.n	8009f6e <d9cd3de8850ba05653155beecb1d40906820436e+0x4a>
 8009f9a:	bb5c      	cbnz	r4, 8009ff4 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 8009f9c:	f7fc f91e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009fa0:	f815 3c40 	ldrb.w	r3, [r5, #-64]
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d109      	bne.n	8009fbc <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 8009fa8:	f815 3c41 	ldrb.w	r3, [r5, #-65]
 8009fac:	2b73      	cmp	r3, #115	; 0x73
 8009fae:	d105      	bne.n	8009fbc <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f7ff f8b5 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8009fb6:	b108      	cbz	r0, 8009fbc <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 8009fb8:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 8009fbc:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 8009fc0:	f7fc f92c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009fc4:	454d      	cmp	r5, r9
 8009fc6:	d1e9      	bne.n	8009f9c <d9cd3de8850ba05653155beecb1d40906820436e+0x78>
 8009fc8:	b9a4      	cbnz	r4, 8009ff4 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 8009fca:	f607 75f8 	addw	r5, r7, #4088	; 0xff8
 8009fce:	f507 5736 	add.w	r7, r7, #11648	; 0x2d80
 8009fd2:	3728      	adds	r7, #40	; 0x28
 8009fd4:	f7fc f902 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009fd8:	786b      	ldrb	r3, [r5, #1]
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	d103      	bne.n	8009fe6 <d9cd3de8850ba05653155beecb1d40906820436e+0xc2>
 8009fde:	782b      	ldrb	r3, [r5, #0]
 8009fe0:	2b90      	cmp	r3, #144	; 0x90
 8009fe2:	bf08      	it	eq
 8009fe4:	462c      	moveq	r4, r5
 8009fe6:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 8009fea:	f7fc f917 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8009fee:	42bd      	cmp	r5, r7
 8009ff0:	d1f0      	bne.n	8009fd4 <d9cd3de8850ba05653155beecb1d40906820436e+0xb0>
 8009ff2:	b14c      	cbz	r4, 800a008 <d9cd3de8850ba05653155beecb1d40906820436e+0xe4>
 8009ff4:	f7fc f8f2 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8009ff8:	7863      	ldrb	r3, [r4, #1]
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	bf0c      	ite	eq
 8009ffe:	f884 8001 	strbeq.w	r8, [r4, #1]
 800a002:	2400      	movne	r4, #0
 800a004:	f7fc f90a 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a008:	4620      	mov	r0, r4
 800a00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00e:	2b50      	cmp	r3, #80	; 0x50
 800a010:	d009      	beq.n	800a026 <d9cd3de8850ba05653155beecb1d40906820436e+0x102>
 800a012:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800a016:	2b73      	cmp	r3, #115	; 0x73
 800a018:	d1a0      	bne.n	8009f5c <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff f880 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800a020:	2800      	cmp	r0, #0
 800a022:	d199      	bne.n	8009f58 <d9cd3de8850ba05653155beecb1d40906820436e+0x34>
 800a024:	e79a      	b.n	8009f5c <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff f87a 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d193      	bne.n	8009f58 <d9cd3de8850ba05653155beecb1d40906820436e+0x34>
 800a030:	e7ef      	b.n	800a012 <d9cd3de8850ba05653155beecb1d40906820436e+0xee>
 800a032:	bf00      	nop
 800a034:	20000034 	.word	0x20000034

0800a038 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	7803      	ldrb	r3, [r0, #0]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	4680      	mov	r8, r0
 800a042:	4689      	mov	r9, r1
 800a044:	d003      	beq.n	800a04e <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x16>
 800a046:	2500      	movs	r5, #0
 800a048:	4628      	mov	r0, r5
 800a04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a04e:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0xa8>)
 800a050:	681f      	ldr	r7, [r3, #0]
 800a052:	f507 5481 	add.w	r4, r7, #4128	; 0x1020
 800a056:	3419      	adds	r4, #25
 800a058:	f507 5737 	add.w	r7, r7, #11712	; 0x2dc0
 800a05c:	3729      	adds	r7, #41	; 0x29
 800a05e:	4626      	mov	r6, r4
 800a060:	2500      	movs	r5, #0
 800a062:	f7fc f8bb 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a066:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 800a06a:	2b40      	cmp	r3, #64	; 0x40
 800a06c:	d10c      	bne.n	800a088 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800a06e:	7cf3      	ldrb	r3, [r6, #19]
 800a070:	b153      	cbz	r3, 800a088 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800a072:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800a076:	2b53      	cmp	r3, #83	; 0x53
 800a078:	d106      	bne.n	800a088 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800a07a:	4631      	mov	r1, r6
 800a07c:	4640      	mov	r0, r8
 800a07e:	f7ff f925 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a082:	b108      	cbz	r0, 800a088 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800a084:	f1a6 0541 	sub.w	r5, r6, #65	; 0x41
 800a088:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800a08c:	f7fc f8c6 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a090:	42be      	cmp	r6, r7
 800a092:	d1e6      	bne.n	800a062 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x2a>
 800a094:	b9c5      	cbnz	r5, 800a0c8 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x90>
 800a096:	f7fc f8a1 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a09a:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 800a09e:	2b40      	cmp	r3, #64	; 0x40
 800a0a0:	d10a      	bne.n	800a0b8 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800a0a2:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 800a0a6:	2b53      	cmp	r3, #83	; 0x53
 800a0a8:	d106      	bne.n	800a0b8 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	f7ff f90d 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a0b2:	b108      	cbz	r0, 800a0b8 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800a0b4:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 800a0b8:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800a0bc:	f7fc f8ae 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a0c0:	42bc      	cmp	r4, r7
 800a0c2:	d1e8      	bne.n	800a096 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x5e>
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	d0be      	beq.n	800a046 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0xe>
 800a0c8:	f7fc f888 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a0cc:	786b      	ldrb	r3, [r5, #1]
 800a0ce:	2b40      	cmp	r3, #64	; 0x40
 800a0d0:	bf0c      	ite	eq
 800a0d2:	f885 9001 	strbeq.w	r9, [r5, #1]
 800a0d6:	2500      	movne	r5, #0
 800a0d8:	f7fc f8a0 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a0dc:	e7b4      	b.n	800a048 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x10>
 800a0de:	bf00      	nop
 800a0e0:	20000034 	.word	0x20000034

0800a0e4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>:
 800a0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	4b97      	ldr	r3, [pc, #604]	; (800a348 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x264>)
 800a0ea:	9101      	str	r1, [sp, #4]
 800a0ec:	681e      	ldr	r6, [r3, #0]
 800a0ee:	f506 5580 	add.w	r5, r6, #4096	; 0x1000
 800a0f2:	3515      	adds	r5, #21
 800a0f4:	f506 5837 	add.w	r8, r6, #11712	; 0x2dc0
 800a0f8:	4681      	mov	r9, r0
 800a0fa:	f108 0805 	add.w	r8, r8, #5
 800a0fe:	462f      	mov	r7, r5
 800a100:	2400      	movs	r4, #0
 800a102:	f7fc f86b 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a106:	f817 3c1c 	ldrb.w	r3, [r7, #-28]
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	d12c      	bne.n	800a168 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800a10e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a112:	b34b      	cbz	r3, 800a168 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800a114:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	d115      	bne.n	800a14a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x66>
 800a11e:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800a122:	2b53      	cmp	r3, #83	; 0x53
 800a124:	f040 80cb 	bne.w	800a2be <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1da>
 800a128:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d019      	beq.n	800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a130:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a134:	b9b3      	cbnz	r3, 800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a136:	4638      	mov	r0, r7
 800a138:	f7ff f8b6 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800a13c:	b1a0      	cbz	r0, 800a168 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800a13e:	f107 0025 	add.w	r0, r7, #37	; 0x25
 800a142:	f7fe fd79 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800a146:	b168      	cbz	r0, 800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a148:	e00e      	b.n	800a168 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800a14a:	2b53      	cmp	r3, #83	; 0x53
 800a14c:	d1e7      	bne.n	800a11e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800a14e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e3      	bne.n	800a11e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800a156:	4649      	mov	r1, r9
 800a158:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a15c:	f7ff f8b6 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a160:	2800      	cmp	r0, #0
 800a162:	d1dc      	bne.n	800a11e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800a164:	f1a7 041d 	sub.w	r4, r7, #29
 800a168:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800a16c:	f7fc f856 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a170:	4547      	cmp	r7, r8
 800a172:	d1c6      	bne.n	800a102 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1e>
 800a174:	2c00      	cmp	r4, #0
 800a176:	f040 8088 	bne.w	800a28a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800a17a:	f506 5b81 	add.w	fp, r6, #4128	; 0x1020
 800a17e:	f10b 0b19 	add.w	fp, fp, #25
 800a182:	f04f 37ff 	mov.w	r7, #4294967295
 800a186:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800a18a:	46a2      	mov	sl, r4
 800a18c:	f7fc f826 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a190:	f81b 2c40 	ldrb.w	r2, [fp, #-64]
 800a194:	2a40      	cmp	r2, #64	; 0x40
 800a196:	d11f      	bne.n	800a1d8 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800a198:	f81b 2c41 	ldrb.w	r2, [fp, #-65]
 800a19c:	f1b9 0f00 	cmp.w	r9, #0
 800a1a0:	f040 80a6 	bne.w	800a2f0 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x20c>
 800a1a4:	f81b 2c41 	ldrb.w	r2, [fp, #-65]
 800a1a8:	2a53      	cmp	r2, #83	; 0x53
 800a1aa:	d115      	bne.n	800a1d8 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800a1ac:	f89b 2052 	ldrb.w	r2, [fp, #82]	; 0x52
 800a1b0:	2a01      	cmp	r2, #1
 800a1b2:	d111      	bne.n	800a1d8 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800a1b4:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800a1b8:	fb03 620a 	mla	r2, r3, sl, r6
 800a1bc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 800a1c0:	3208      	adds	r2, #8
 800a1c2:	f8d2 1007 	ldr.w	r1, [r2, #7]
 800a1c6:	7ad2      	ldrb	r2, [r2, #11]
 800a1c8:	42b9      	cmp	r1, r7
 800a1ca:	eb72 0008 	sbcs.w	r0, r2, r8
 800a1ce:	bf3e      	ittt	cc
 800a1d0:	f1ab 0441 	subcc.w	r4, fp, #65	; 0x41
 800a1d4:	460f      	movcc	r7, r1
 800a1d6:	4690      	movcc	r8, r2
 800a1d8:	f10a 0a01 	add.w	sl, sl, #1
 800a1dc:	f7fc f81e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a1e0:	f1ba 0f14 	cmp.w	sl, #20
 800a1e4:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800a1e8:	d1d0      	bne.n	800a18c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xa8>
 800a1ea:	2c00      	cmp	r4, #0
 800a1ec:	d14d      	bne.n	800a28a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800a1ee:	f606 7bf8 	addw	fp, r6, #4088	; 0xff8
 800a1f2:	46a1      	mov	r9, r4
 800a1f4:	f241 0a48 	movw	sl, #4168	; 0x1048
 800a1f8:	f7fb fff0 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a1fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a200:	2a40      	cmp	r2, #64	; 0x40
 800a202:	d111      	bne.n	800a228 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x144>
 800a204:	f89b 203f 	ldrb.w	r2, [fp, #63]	; 0x3f
 800a208:	b172      	cbz	r2, 800a228 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x144>
 800a20a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800a20e:	fb03 6209 	mla	r2, r3, r9, r6
 800a212:	4452      	add	r2, sl
 800a214:	f8d2 1007 	ldr.w	r1, [r2, #7]
 800a218:	7ad2      	ldrb	r2, [r2, #11]
 800a21a:	42b9      	cmp	r1, r7
 800a21c:	eb72 0008 	sbcs.w	r0, r2, r8
 800a220:	bf3e      	ittt	cc
 800a222:	460f      	movcc	r7, r1
 800a224:	4690      	movcc	r8, r2
 800a226:	465c      	movcc	r4, fp
 800a228:	f109 0901 	add.w	r9, r9, #1
 800a22c:	f7fb fff6 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a230:	f1b9 0f14 	cmp.w	r9, #20
 800a234:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800a238:	d1de      	bne.n	800a1f8 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x114>
 800a23a:	bb34      	cbnz	r4, 800a28a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800a23c:	46a1      	mov	r9, r4
 800a23e:	f44f 7abe 	mov.w	sl, #380	; 0x17c
 800a242:	f241 0b48 	movw	fp, #4168	; 0x1048
 800a246:	f7fb ffc9 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a24a:	f815 3c1c 	ldrb.w	r3, [r5, #-28]
 800a24e:	2b40      	cmp	r3, #64	; 0x40
 800a250:	d111      	bne.n	800a276 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800a252:	f815 3c1d 	ldrb.w	r3, [r5, #-29]
 800a256:	2b74      	cmp	r3, #116	; 0x74
 800a258:	d05a      	beq.n	800a310 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x22c>
 800a25a:	f815 3c1d 	ldrb.w	r3, [r5, #-29]
 800a25e:	2b60      	cmp	r3, #96	; 0x60
 800a260:	d15c      	bne.n	800a31c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x238>
 800a262:	fb0a 6309 	mla	r3, sl, r9, r6
 800a266:	445b      	add	r3, fp
 800a268:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800a26c:	7adb      	ldrb	r3, [r3, #11]
 800a26e:	42ba      	cmp	r2, r7
 800a270:	eb73 0108 	sbcs.w	r1, r3, r8
 800a274:	d362      	bcc.n	800a33c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x258>
 800a276:	f109 0901 	add.w	r9, r9, #1
 800a27a:	f7fb ffcf 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a27e:	f1b9 0f14 	cmp.w	r9, #20
 800a282:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800a286:	d1de      	bne.n	800a246 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x162>
 800a288:	b1ac      	cbz	r4, 800a2b6 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1d2>
 800a28a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800a28e:	b943      	cbnz	r3, 800a2a2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1be>
 800a290:	f104 001d 	add.w	r0, r4, #29
 800a294:	f7ff f808 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800a298:	b118      	cbz	r0, 800a2a2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1be>
 800a29a:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800a29e:	f7fe fccb 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800a2a2:	f7fb ff9b 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a2a6:	7863      	ldrb	r3, [r4, #1]
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	bf06      	itte	eq
 800a2ac:	9b01      	ldreq	r3, [sp, #4]
 800a2ae:	7063      	strbeq	r3, [r4, #1]
 800a2b0:	2400      	movne	r4, #0
 800a2b2:	f7fb ffb3 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	f47f af4e 	bne.w	800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a2c8:	2b74      	cmp	r3, #116	; 0x74
 800a2ca:	d00a      	beq.n	800a2e2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1fe>
 800a2cc:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800a2d0:	2b60      	cmp	r3, #96	; 0x60
 800a2d2:	f43f af47 	beq.w	800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a2d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f47f af44 	bne.w	800a168 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800a2e0:	e729      	b.n	800a136 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x52>
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f7fe ff1c 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	f47f af3b 	bne.w	800a164 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800a2ee:	e7ed      	b.n	800a2cc <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1e8>
 800a2f0:	2a53      	cmp	r2, #83	; 0x53
 800a2f2:	f47f af71 	bne.w	800a1d8 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800a2f6:	f89b 2052 	ldrb.w	r2, [fp, #82]	; 0x52
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	f47f af56 	bne.w	800a1ac <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xc8>
 800a300:	4649      	mov	r1, r9
 800a302:	4658      	mov	r0, fp
 800a304:	f7fe ffe2 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f47f af4b 	bne.w	800a1a4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xc0>
 800a30e:	e751      	b.n	800a1b4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xd0>
 800a310:	4628      	mov	r0, r5
 800a312:	f7fe ff05 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800a316:	2800      	cmp	r0, #0
 800a318:	d09f      	beq.n	800a25a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x176>
 800a31a:	e7a2      	b.n	800a262 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x17e>
 800a31c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1a8      	bne.n	800a276 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800a324:	4628      	mov	r0, r5
 800a326:	f7fe ffbf 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0a3      	beq.n	800a276 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800a32e:	f105 0025 	add.w	r0, r5, #37	; 0x25
 800a332:	f7fe fc81 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800a336:	2800      	cmp	r0, #0
 800a338:	d19d      	bne.n	800a276 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800a33a:	e792      	b.n	800a262 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x17e>
 800a33c:	f1a5 041d 	sub.w	r4, r5, #29
 800a340:	4617      	mov	r7, r2
 800a342:	4698      	mov	r8, r3
 800a344:	e797      	b.n	800a276 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800a346:	bf00      	nop
 800a348:	20000034 	.word	0x20000034

0800a34c <fc07e894741fc85c512f976929ce54659d763792>:
 800a34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	4606      	mov	r6, r0
 800a352:	9101      	str	r1, [sp, #4]
 800a354:	b928      	cbnz	r0, 800a362 <fc07e894741fc85c512f976929ce54659d763792+0x16>
 800a356:	4955      	ldr	r1, [pc, #340]	; (800a4ac <fc07e894741fc85c512f976929ce54659d763792+0x160>)
 800a358:	4855      	ldr	r0, [pc, #340]	; (800a4b0 <fc07e894741fc85c512f976929ce54659d763792+0x164>)
 800a35a:	f44f 7221 	mov.w	r2, #644	; 0x284
 800a35e:	f7f7 f917 	bl	8001590 <EXPECT_OnAbortHandler>
 800a362:	7803      	ldrb	r3, [r0, #0]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d004      	beq.n	800a372 <fc07e894741fc85c512f976929ce54659d763792+0x26>
 800a368:	2400      	movs	r4, #0
 800a36a:	4620      	mov	r0, r4
 800a36c:	b003      	add	sp, #12
 800a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <fc07e894741fc85c512f976929ce54659d763792+0x168>)
 800a374:	f8d3 8000 	ldr.w	r8, [r3]
 800a378:	f508 5581 	add.w	r5, r8, #4128	; 0x1020
 800a37c:	3519      	adds	r5, #25
 800a37e:	f508 5937 	add.w	r9, r8, #11712	; 0x2dc0
 800a382:	f109 0929 	add.w	r9, r9, #41	; 0x29
 800a386:	462f      	mov	r7, r5
 800a388:	2400      	movs	r4, #0
 800a38a:	f7fb ff27 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a38e:	f817 3c40 	ldrb.w	r3, [r7, #-64]
 800a392:	2b40      	cmp	r3, #64	; 0x40
 800a394:	d110      	bne.n	800a3b8 <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800a396:	7cfb      	ldrb	r3, [r7, #19]
 800a398:	b173      	cbz	r3, 800a3b8 <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800a39a:	f817 3c41 	ldrb.w	r3, [r7, #-65]
 800a39e:	2b53      	cmp	r3, #83	; 0x53
 800a3a0:	d003      	beq.n	800a3aa <fc07e894741fc85c512f976929ce54659d763792+0x5e>
 800a3a2:	2b50      	cmp	r3, #80	; 0x50
 800a3a4:	d001      	beq.n	800a3aa <fc07e894741fc85c512f976929ce54659d763792+0x5e>
 800a3a6:	2b5f      	cmp	r3, #95	; 0x5f
 800a3a8:	d906      	bls.n	800a3b8 <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7fe ff8d 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a3b2:	b108      	cbz	r0, 800a3b8 <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800a3b4:	f1a7 0441 	sub.w	r4, r7, #65	; 0x41
 800a3b8:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800a3bc:	f7fb ff2e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a3c0:	454f      	cmp	r7, r9
 800a3c2:	d1e2      	bne.n	800a38a <fc07e894741fc85c512f976929ce54659d763792+0x3e>
 800a3c4:	2c00      	cmp	r4, #0
 800a3c6:	d166      	bne.n	800a496 <fc07e894741fc85c512f976929ce54659d763792+0x14a>
 800a3c8:	46ab      	mov	fp, r5
 800a3ca:	f04f 39ff 	mov.w	r9, #4294967295
 800a3ce:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800a3d2:	4627      	mov	r7, r4
 800a3d4:	f7fb ff02 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a3d8:	f81b 3c40 	ldrb.w	r3, [fp, #-64]
 800a3dc:	2b40      	cmp	r3, #64	; 0x40
 800a3de:	d126      	bne.n	800a42e <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800a3e0:	f81b 3c41 	ldrb.w	r3, [fp, #-65]
 800a3e4:	2b53      	cmp	r3, #83	; 0x53
 800a3e6:	d00b      	beq.n	800a400 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800a3e8:	2b50      	cmp	r3, #80	; 0x50
 800a3ea:	d009      	beq.n	800a400 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800a3ec:	f1a3 0260 	sub.w	r2, r3, #96	; 0x60
 800a3f0:	2a13      	cmp	r2, #19
 800a3f2:	d905      	bls.n	800a400 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800a3f4:	2b74      	cmp	r3, #116	; 0x74
 800a3f6:	d11a      	bne.n	800a42e <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800a3f8:	f81b 3c31 	ldrb.w	r3, [fp, #-49]
 800a3fc:	2b3a      	cmp	r3, #58	; 0x3a
 800a3fe:	d116      	bne.n	800a42e <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800a400:	4659      	mov	r1, fp
 800a402:	4630      	mov	r0, r6
 800a404:	f7fe ff62 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a408:	b188      	cbz	r0, 800a42e <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800a40a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800a40e:	fb03 8307 	mla	r3, r3, r7, r8
 800a412:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800a416:	3308      	adds	r3, #8
 800a418:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800a41c:	7adb      	ldrb	r3, [r3, #11]
 800a41e:	454a      	cmp	r2, r9
 800a420:	eb73 000a 	sbcs.w	r0, r3, sl
 800a424:	bf3e      	ittt	cc
 800a426:	f1ab 0441 	subcc.w	r4, fp, #65	; 0x41
 800a42a:	4691      	movcc	r9, r2
 800a42c:	469a      	movcc	sl, r3
 800a42e:	3701      	adds	r7, #1
 800a430:	f7fb fef4 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a434:	2f14      	cmp	r7, #20
 800a436:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800a43a:	d1cb      	bne.n	800a3d4 <fc07e894741fc85c512f976929ce54659d763792+0x88>
 800a43c:	bb5c      	cbnz	r4, 800a496 <fc07e894741fc85c512f976929ce54659d763792+0x14a>
 800a43e:	4627      	mov	r7, r4
 800a440:	f241 0b48 	movw	fp, #4168	; 0x1048
 800a444:	f7fb feca 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a448:	f815 3c40 	ldrb.w	r3, [r5, #-64]
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	d118      	bne.n	800a482 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800a450:	f815 3c41 	ldrb.w	r3, [r5, #-65]
 800a454:	2b73      	cmp	r3, #115	; 0x73
 800a456:	d914      	bls.n	800a482 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800a458:	4629      	mov	r1, r5
 800a45a:	4630      	mov	r0, r6
 800a45c:	f7fe ff36 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800a460:	b178      	cbz	r0, 800a482 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800a462:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800a466:	fb03 8307 	mla	r3, r3, r7, r8
 800a46a:	445b      	add	r3, fp
 800a46c:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800a470:	7adb      	ldrb	r3, [r3, #11]
 800a472:	454a      	cmp	r2, r9
 800a474:	eb73 010a 	sbcs.w	r1, r3, sl
 800a478:	bf3e      	ittt	cc
 800a47a:	f1a5 0441 	subcc.w	r4, r5, #65	; 0x41
 800a47e:	4691      	movcc	r9, r2
 800a480:	469a      	movcc	sl, r3
 800a482:	3701      	adds	r7, #1
 800a484:	f7fb feca 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a488:	2f14      	cmp	r7, #20
 800a48a:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800a48e:	d1d9      	bne.n	800a444 <fc07e894741fc85c512f976929ce54659d763792+0xf8>
 800a490:	2c00      	cmp	r4, #0
 800a492:	f43f af69 	beq.w	800a368 <fc07e894741fc85c512f976929ce54659d763792+0x1c>
 800a496:	f7fb fea1 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a49a:	7863      	ldrb	r3, [r4, #1]
 800a49c:	2b40      	cmp	r3, #64	; 0x40
 800a49e:	bf06      	itte	eq
 800a4a0:	9b01      	ldreq	r3, [sp, #4]
 800a4a2:	7063      	strbeq	r3, [r4, #1]
 800a4a4:	2400      	movne	r4, #0
 800a4a6:	f7fb feb9 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a4aa:	e75e      	b.n	800a36a <fc07e894741fc85c512f976929ce54659d763792+0x1e>
 800a4ac:	0801ac11 	.word	0x0801ac11
 800a4b0:	0801aac7 	.word	0x0801aac7
 800a4b4:	20000034 	.word	0x20000034

0800a4b8 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x40>)
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	4605      	mov	r5, r0
 800a4c0:	460e      	mov	r6, r1
 800a4c2:	f7fb fe8b 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800a4cc:	f604 70f9 	addw	r0, r4, #4089	; 0xff9
 800a4d0:	fb01 f302 	mul.w	r3, r1, r2
 800a4d4:	5cc7      	ldrb	r7, [r0, r3]
 800a4d6:	42af      	cmp	r7, r5
 800a4d8:	d109      	bne.n	800a4ee <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x36>
 800a4da:	18e2      	adds	r2, r4, r3
 800a4dc:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800a4e0:	f882 6ff9 	strb.w	r6, [r2, #4089]	; 0xff9
 800a4e4:	441c      	add	r4, r3
 800a4e6:	f7fb fe99 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	2a14      	cmp	r2, #20
 800a4f2:	d1ed      	bne.n	800a4d0 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x18>
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	e7f6      	b.n	800a4e6 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x2e>
 800a4f8:	20000034 	.word	0x20000034

0800a4fc <QUEUE_GetDiagnosticsCounters>:
 800a4fc:	4a0b      	ldr	r2, [pc, #44]	; (800a52c <QUEUE_GetDiagnosticsCounters+0x30>)
 800a4fe:	6812      	ldr	r2, [r2, #0]
 800a500:	4603      	mov	r3, r0
 800a502:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
 800a506:	f502 5236 	add.w	r2, r2, #11648	; 0x2d80
 800a50a:	f8d0 1db8 	ldr.w	r1, [r0, #3512]	; 0xdb8
 800a50e:	3228      	adds	r2, #40	; 0x28
 800a510:	4291      	cmp	r1, r2
 800a512:	bf0b      	itete	eq
 800a514:	f8d0 1db4 	ldreq.w	r1, [r0, #3508]	; 0xdb4
 800a518:	f8d0 1dac 	ldrne.w	r1, [r0, #3500]	; 0xdac
 800a51c:	f8d0 0db0 	ldreq.w	r0, [r0, #3504]	; 0xdb0
 800a520:	f8d0 0da8 	ldrne.w	r0, [r0, #3496]	; 0xda8
 800a524:	e883 0003 	stmia.w	r3, {r0, r1}
 800a528:	4618      	mov	r0, r3
 800a52a:	4770      	bx	lr
 800a52c:	20000034 	.word	0x20000034

0800a530 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>:
 800a530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a532:	4b10      	ldr	r3, [pc, #64]	; (800a574 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc+0x44>)
 800a534:	466d      	mov	r5, sp
 800a536:	681e      	ldr	r6, [r3, #0]
 800a538:	e885 0003 	stmia.w	r5, {r0, r1}
 800a53c:	f506 5400 	add.w	r4, r6, #8192	; 0x2000
 800a540:	f8d4 3dc4 	ldr.w	r3, [r4, #3524]	; 0xdc4
 800a544:	b1a3      	cbz	r3, 800a570 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc+0x40>
 800a546:	f7fb fe49 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a54a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a54e:	f8c4 0dd0 	str.w	r0, [r4, #3536]	; 0xdd0
 800a552:	f884 1dd4 	strb.w	r1, [r4, #3540]	; 0xdd4
 800a556:	f7fb fe61 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a55a:	f506 5137 	add.w	r1, r6, #11712	; 0x2dc0
 800a55e:	f8d4 0dc4 	ldr.w	r0, [r4, #3524]	; 0xdc4
 800a562:	220b      	movs	r2, #11
 800a564:	3104      	adds	r1, #4
 800a566:	b002      	add	sp, #8
 800a568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a56c:	f001 b894 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800a570:	b002      	add	sp, #8
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	20000034 	.word	0x20000034

0800a578 <c122f50a74e97b0b971f059f93cac9f52ab85af9>:
 800a578:	b513      	push	{r0, r1, r4, lr}
 800a57a:	2360      	movs	r3, #96	; 0x60
 800a57c:	7043      	strb	r3, [r0, #1]
 800a57e:	7803      	ldrb	r3, [r0, #0]
 800a580:	2b60      	cmp	r3, #96	; 0x60
 800a582:	4604      	mov	r4, r0
 800a584:	d009      	beq.n	800a59a <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x22>
 800a586:	2303      	movs	r3, #3
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	4b07      	ldr	r3, [pc, #28]	; (800a5a8 <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x30>)
 800a58c:	9301      	str	r3, [sp, #4]
 800a58e:	ab02      	add	r3, sp, #8
 800a590:	e913 0003 	ldmdb	r3, {r0, r1}
 800a594:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x34>)
 800a596:	f003 f849 	bl	800d62c <LOGGER_PrintLine>
 800a59a:	4620      	mov	r0, r4
 800a59c:	b002      	add	sp, #8
 800a59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a2:	f7ff bacd 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800a5a6:	bf00      	nop
 800a5a8:	0801acf4 	.word	0x0801acf4
 800a5ac:	0801ad3e 	.word	0x0801ad3e

0800a5b0 <db78e4d9b28d7c42d16d219c1384c29b20a49150>:
 800a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b2:	4b16      	ldr	r3, [pc, #88]	; (800a60c <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x5c>)
 800a5b4:	681d      	ldr	r5, [r3, #0]
 800a5b6:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	f8d5 3dc8 	ldr.w	r3, [r5, #3528]	; 0xdc8
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	b303      	cbz	r3, 800a606 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x56>
 800a5c4:	2305      	movs	r3, #5
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	4b11      	ldr	r3, [pc, #68]	; (800a610 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x60>)
 800a5ca:	f8d0 2057 	ldr.w	r2, [r0, #87]	; 0x57
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 800a5d4:	e9cd 2300 	strd	r2, r3, [sp]
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	7a03      	ldrb	r3, [r0, #8]
 800a5dc:	4a0d      	ldr	r2, [pc, #52]	; (800a614 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x64>)
 800a5de:	e911 0003 	ldmdb	r1, {r0, r1}
 800a5e2:	f003 f823 	bl	800d62c <LOGGER_PrintLine>
 800a5e6:	2002      	movs	r0, #2
 800a5e8:	6866      	ldr	r6, [r4, #4]
 800a5ea:	7a27      	ldrb	r7, [r4, #8]
 800a5ec:	f8d5 5dc8 	ldr.w	r5, [r5, #3528]	; 0xdc8
 800a5f0:	f7fd fec0 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	9000      	str	r0, [sp, #0]
 800a5f8:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800a5fc:	f104 0257 	add.w	r2, r4, #87	; 0x57
 800a600:	4639      	mov	r1, r7
 800a602:	4630      	mov	r0, r6
 800a604:	47a8      	blx	r5
 800a606:	b005      	add	sp, #20
 800a608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000034 	.word	0x20000034
 800a610:	0801acf4 	.word	0x0801acf4
 800a614:	0801ad53 	.word	0x0801ad53

0800a618 <bbe099565971cd2d437b6a8e152f225cced7c4ee>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <bbe099565971cd2d437b6a8e152f225cced7c4ee+0x28>)
 800a61c:	681c      	ldr	r4, [r3, #0]
 800a61e:	f504 5037 	add.w	r0, r4, #11712	; 0x2dc0
 800a622:	2100      	movs	r1, #0
 800a624:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a628:	3018      	adds	r0, #24
 800a62a:	f00e fca9 	bl	8018f80 <memset>
 800a62e:	f504 5137 	add.w	r1, r4, #11712	; 0x2dc0
 800a632:	4804      	ldr	r0, [pc, #16]	; (800a644 <bbe099565971cd2d437b6a8e152f225cced7c4ee+0x2c>)
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	3118      	adds	r1, #24
 800a63a:	f7fc bb59 	b.w	8006cf0 <EMBENET_TIMER_Init>
 800a63e:	bf00      	nop
 800a640:	20000034 	.word	0x20000034
 800a644:	0800a789 	.word	0x0800a789

0800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4b13      	ldr	r3, [pc, #76]	; (800a698 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x50>)
 800a64c:	4604      	mov	r4, r0
 800a64e:	681d      	ldr	r5, [r3, #0]
 800a650:	f7fb fdc4 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a654:	b11c      	cbz	r4, 800a65e <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x16>
 800a656:	2c01      	cmp	r4, #1
 800a658:	d00e      	beq.n	800a678 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x30>
 800a65a:	241f      	movs	r4, #31
 800a65c:	e008      	b.n	800a670 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x28>
 800a65e:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800a662:	f895 3df5 	ldrb.w	r3, [r5, #3573]	; 0xdf5
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f7      	bne.n	800a65a <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x12>
 800a66a:	2301      	movs	r3, #1
 800a66c:	f885 3df5 	strb.w	r3, [r5, #3573]	; 0xdf5
 800a670:	f7fb fdd4 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a674:	4620      	mov	r0, r4
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	f505 5337 	add.w	r3, r5, #11712	; 0x2dc0
 800a67c:	3335      	adds	r3, #53	; 0x35
 800a67e:	0162      	lsls	r2, r4, #5
 800a680:	5c99      	ldrb	r1, [r3, r2]
 800a682:	b921      	cbnz	r1, 800a68e <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x46>
 800a684:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800a688:	b2e4      	uxtb	r4, r4
 800a68a:	4415      	add	r5, r2
 800a68c:	e7ed      	b.n	800a66a <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x22>
 800a68e:	3401      	adds	r4, #1
 800a690:	2c1f      	cmp	r4, #31
 800a692:	d1f4      	bne.n	800a67e <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x36>
 800a694:	e7ec      	b.n	800a670 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x28>
 800a696:	bf00      	nop
 800a698:	20000034 	.word	0x20000034

0800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>:
 800a69c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	469a      	mov	sl, r3
 800a6a2:	e9dd 930c 	ldrd	r9, r3, [sp, #48]	; 0x30
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4617      	mov	r7, r2
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	f1b9 0f00 	cmp.w	r9, #0
 800a6b0:	d104      	bne.n	800a6bc <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x20>
 800a6b2:	4930      	ldr	r1, [pc, #192]	; (800a774 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd8>)
 800a6b4:	4830      	ldr	r0, [pc, #192]	; (800a778 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xdc>)
 800a6b6:	2259      	movs	r2, #89	; 0x59
 800a6b8:	f7f6 ff6a 	bl	8001590 <EXPECT_OnAbortHandler>
 800a6bc:	4a2f      	ldr	r2, [pc, #188]	; (800a77c <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe0>)
 800a6be:	281e      	cmp	r0, #30
 800a6c0:	6814      	ldr	r4, [r2, #0]
 800a6c2:	d808      	bhi.n	800a6d6 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x3a>
 800a6c4:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 800a6c8:	eb06 1840 	add.w	r8, r6, r0, lsl #5
 800a6cc:	ea4f 1b40 	mov.w	fp, r0, lsl #5
 800a6d0:	f898 2df5 	ldrb.w	r2, [r8, #3573]	; 0xdf5
 800a6d4:	b91a      	cbnz	r2, 800a6de <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x42>
 800a6d6:	4927      	ldr	r1, [pc, #156]	; (800a774 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd8>)
 800a6d8:	4829      	ldr	r0, [pc, #164]	; (800a780 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe4>)
 800a6da:	225c      	movs	r2, #92	; 0x5c
 800a6dc:	e7ec      	b.n	800a6b8 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x1c>
 800a6de:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800a6e2:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800a6e6:	9101      	str	r1, [sp, #4]
 800a6e8:	f7fb fd78 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a6ec:	9901      	ldr	r1, [sp, #4]
 800a6ee:	f885 1dd8 	strb.w	r1, [r5, #3544]	; 0xdd8
 800a6f2:	f8c8 7de4 	str.w	r7, [r8, #3556]	; 0xde4
 800a6f6:	f7fc fb9f 	bl	8006e38 <EMBENET_TIMER_ReadCounter>
 800a6fa:	44ba      	add	sl, r7
 800a6fc:	4921      	ldr	r1, [pc, #132]	; (800a784 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe8>)
 800a6fe:	ebaa 0200 	sub.w	r2, sl, r0
 800a702:	428a      	cmp	r2, r1
 800a704:	d80d      	bhi.n	800a722 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x86>
 800a706:	9201      	str	r2, [sp, #4]
 800a708:	f7fc fba0 	bl	8006e4c <EMBENET_TIMER_GetMaxCompareDuration>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	fbb2 f7f0 	udiv	r7, r2, r0
 800a712:	4290      	cmp	r0, r2
 800a714:	f8c8 7dec 	str.w	r7, [r8, #3564]	; 0xdec
 800a718:	d82a      	bhi.n	800a770 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd4>
 800a71a:	f7fc fb97 	bl	8006e4c <EMBENET_TIMER_GetMaxCompareDuration>
 800a71e:	fb00 a017 	mls	r0, r0, r7, sl
 800a722:	445e      	add	r6, fp
 800a724:	2301      	movs	r3, #1
 800a726:	f886 3df4 	strb.w	r3, [r6, #3572]	; 0xdf4
 800a72a:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	f8c6 0de8 	str.w	r0, [r6, #3560]	; 0xde8
 800a734:	f8c5 9ddc 	str.w	r9, [r5, #3548]	; 0xddc
 800a738:	f8c6 3de0 	str.w	r3, [r6, #3552]	; 0xde0
 800a73c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
 800a740:	b98b      	cbnz	r3, 800a766 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xca>
 800a742:	f894 31c1 	ldrb.w	r3, [r4, #449]	; 0x1c1
 800a746:	f8d6 0de8 	ldr.w	r0, [r6, #3560]	; 0xde8
 800a74a:	b12b      	cbz	r3, 800a758 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xbc>
 800a74c:	e9d4 236e 	ldrd	r2, r3, [r4, #440]	; 0x1b8
 800a750:	1ad2      	subs	r2, r2, r3
 800a752:	1ac3      	subs	r3, r0, r3
 800a754:	429a      	cmp	r2, r3
 800a756:	d903      	bls.n	800a760 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xc4>
 800a758:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
 800a75c:	f7fc fb3c 	bl	8006dd8 <EMBENET_TIMER_SetCompare>
 800a760:	2301      	movs	r3, #1
 800a762:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
 800a766:	b003      	add	sp, #12
 800a768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	f7fb bd56 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a770:	4650      	mov	r0, sl
 800a772:	e7d6      	b.n	800a722 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x86>
 800a774:	0801ad7a 	.word	0x0801ad7a
 800a778:	0801add9 	.word	0x0801add9
 800a77c:	20000034 	.word	0x20000034
 800a780:	0801ae03 	.word	0x0801ae03
 800a784:	ffffec78 	.word	0xffffec78

0800a788 <84b3a76c23800c7583f919339b96a0fe3bcec754>:
 800a788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	f04f 0a01 	mov.w	sl, #1
 800a790:	2600      	movs	r6, #0
 800a792:	4604      	mov	r4, r0
 800a794:	f880 a3e8 	strb.w	sl, [r0, #1000]	; 0x3e8
 800a798:	4680      	mov	r8, r0
 800a79a:	4605      	mov	r5, r0
 800a79c:	46b3      	mov	fp, r6
 800a79e:	7f2a      	ldrb	r2, [r5, #28]
 800a7a0:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800a7a4:	f105 0920 	add.w	r9, r5, #32
 800a7a8:	b32a      	cbz	r2, 800a7f6 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800a7aa:	692f      	ldr	r7, [r5, #16]
 800a7ac:	429f      	cmp	r7, r3
 800a7ae:	d122      	bne.n	800a7f6 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800a7b0:	696b      	ldr	r3, [r5, #20]
 800a7b2:	f885 b01c 	strb.w	fp, [r5, #28]
 800a7b6:	61af      	str	r7, [r5, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d14c      	bne.n	800a856 <84b3a76c23800c7583f919339b96a0fe3bcec754+0xce>
 800a7bc:	b94e      	cbnz	r6, 800a7d2 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x4a>
 800a7be:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800a7c2:	4798      	blx	r3
 800a7c4:	782a      	ldrb	r2, [r5, #0]
 800a7c6:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800a7ca:	b15a      	cbz	r2, 800a7e4 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x5c>
 800a7cc:	464d      	mov	r5, r9
 800a7ce:	2601      	movs	r6, #1
 800a7d0:	e7e5      	b.n	800a79e <84b3a76c23800c7583f919339b96a0fe3bcec754+0x16>
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800a7d8:	f000 ff5e 	bl	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800a7dc:	782a      	ldrb	r2, [r5, #0]
 800a7de:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800a7e2:	b942      	cbnz	r2, 800a7f6 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800a7e4:	68aa      	ldr	r2, [r5, #8]
 800a7e6:	9201      	str	r2, [sp, #4]
 800a7e8:	686a      	ldr	r2, [r5, #4]
 800a7ea:	9200      	str	r2, [sp, #0]
 800a7ec:	68ea      	ldr	r2, [r5, #12]
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	b2f0      	uxtb	r0, r6
 800a7f2:	f7ff ff53 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800a7f6:	3601      	adds	r6, #1
 800a7f8:	2e1f      	cmp	r6, #31
 800a7fa:	464d      	mov	r5, r9
 800a7fc:	d1cf      	bne.n	800a79e <84b3a76c23800c7583f919339b96a0fe3bcec754+0x16>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f8d4 03e0 	ldr.w	r0, [r4, #992]	; 0x3e0
 800a804:	f8c4 03e4 	str.w	r0, [r4, #996]	; 0x3e4
 800a808:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
 800a80c:	461a      	mov	r2, r3
 800a80e:	f04f 35ff 	mov.w	r5, #4294967295
 800a812:	2601      	movs	r6, #1
 800a814:	f898 101c 	ldrb.w	r1, [r8, #28]
 800a818:	b141      	cbz	r1, 800a82c <84b3a76c23800c7583f919339b96a0fe3bcec754+0xa4>
 800a81a:	f884 63e9 	strb.w	r6, [r4, #1001]	; 0x3e9
 800a81e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a822:	1a09      	subs	r1, r1, r0
 800a824:	42a9      	cmp	r1, r5
 800a826:	bf9c      	itt	ls
 800a828:	b2da      	uxtbls	r2, r3
 800a82a:	460d      	movls	r5, r1
 800a82c:	3301      	adds	r3, #1
 800a82e:	2b1f      	cmp	r3, #31
 800a830:	f108 0820 	add.w	r8, r8, #32
 800a834:	d1ee      	bne.n	800a814 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x8c>
 800a836:	f894 33e9 	ldrb.w	r3, [r4, #1001]	; 0x3e9
 800a83a:	b133      	cbz	r3, 800a84a <84b3a76c23800c7583f919339b96a0fe3bcec754+0xc2>
 800a83c:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800a840:	6910      	ldr	r0, [r2, #16]
 800a842:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
 800a846:	f7fc fac7 	bl	8006dd8 <EMBENET_TIMER_SetCompare>
 800a84a:	2300      	movs	r3, #0
 800a84c:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
 800a850:	b003      	add	sp, #12
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a856:	3b01      	subs	r3, #1
 800a858:	616b      	str	r3, [r5, #20]
 800a85a:	f7fc faf7 	bl	8006e4c <EMBENET_TIMER_GetMaxCompareDuration>
 800a85e:	4407      	add	r7, r0
 800a860:	612f      	str	r7, [r5, #16]
 800a862:	f885 a01c 	strb.w	sl, [r5, #28]
 800a866:	e7c6      	b.n	800a7f6 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>

0800a868 <a146aa5c27211710221f7063067066079d66a071>:
 800a868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a86a:	4616      	mov	r6, r2
 800a86c:	461f      	mov	r7, r3
 800a86e:	4604      	mov	r4, r0
 800a870:	460d      	mov	r5, r1
 800a872:	f7fc fae1 	bl	8006e38 <EMBENET_TIMER_ReadCounter>
 800a876:	9a08      	ldr	r2, [sp, #32]
 800a878:	4603      	mov	r3, r0
 800a87a:	e9cd 7200 	strd	r7, r2, [sp]
 800a87e:	4629      	mov	r1, r5
 800a880:	4632      	mov	r2, r6
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff ff0a 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800a888:	b003      	add	sp, #12
 800a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>:
 800a88c:	281e      	cmp	r0, #30
 800a88e:	b538      	push	{r3, r4, r5, lr}
 800a890:	4605      	mov	r5, r0
 800a892:	d810      	bhi.n	800a8b6 <2f27d002e6f5798bf50ec4e1714df836a8561b81+0x2a>
 800a894:	4b08      	ldr	r3, [pc, #32]	; (800a8b8 <2f27d002e6f5798bf50ec4e1714df836a8561b81+0x2c>)
 800a896:	681c      	ldr	r4, [r3, #0]
 800a898:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 800a89c:	f7fb fc9e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a8a0:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f880 3df4 	strb.w	r3, [r0, #3572]	; 0xdf4
 800a8aa:	f8c0 3ddc 	str.w	r3, [r0, #3548]	; 0xddc
 800a8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b2:	f7fb bcb3 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	20000034 	.word	0x20000034

0800a8bc <45b77a765926e830faa058addab54b36ccfddf75>:
 800a8bc:	281e      	cmp	r0, #30
 800a8be:	b538      	push	{r3, r4, r5, lr}
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	d810      	bhi.n	800a8e6 <45b77a765926e830faa058addab54b36ccfddf75+0x2a>
 800a8c4:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <45b77a765926e830faa058addab54b36ccfddf75+0x30>)
 800a8c6:	681d      	ldr	r5, [r3, #0]
 800a8c8:	f7fb fc88 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	fb02 5004 	mla	r0, r2, r4, r5
 800a8d2:	f500 5037 	add.w	r0, r0, #11712	; 0x2dc0
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	3018      	adds	r0, #24
 800a8da:	f00e fb51 	bl	8018f80 <memset>
 800a8de:	f7fb fc9d 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e7fc      	b.n	800a8e4 <45b77a765926e830faa058addab54b36ccfddf75+0x28>
 800a8ea:	bf00      	nop
 800a8ec:	20000034 	.word	0x20000034

0800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>:
 800a8f0:	f7fc baa2 	b.w	8006e38 <EMBENET_TIMER_ReadCounter>

0800a8f4 <19ac46e5c06ffb6c1640c5d4070de271a544b182>:
 800a8f4:	281e      	cmp	r0, #30
 800a8f6:	b508      	push	{r3, lr}
 800a8f8:	d904      	bls.n	800a904 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x10>
 800a8fa:	22b8      	movs	r2, #184	; 0xb8
 800a8fc:	4908      	ldr	r1, [pc, #32]	; (800a920 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x2c>)
 800a8fe:	4809      	ldr	r0, [pc, #36]	; (800a924 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x30>)
 800a900:	f7f6 fe46 	bl	8001590 <EXPECT_OnAbortHandler>
 800a904:	4b08      	ldr	r3, [pc, #32]	; (800a928 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x34>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a90c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800a910:	f890 3df5 	ldrb.w	r3, [r0, #3573]	; 0xdf5
 800a914:	b90b      	cbnz	r3, 800a91a <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x26>
 800a916:	22bc      	movs	r2, #188	; 0xbc
 800a918:	e7f0      	b.n	800a8fc <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x8>
 800a91a:	f8d0 0df0 	ldr.w	r0, [r0, #3568]	; 0xdf0
 800a91e:	bd08      	pop	{r3, pc}
 800a920:	0801ad7a 	.word	0x0801ad7a
 800a924:	0801aac7 	.word	0x0801aac7
 800a928:	20000034 	.word	0x20000034

0800a92c <56445be374e93738432324b7e0ececbd8047647a>:
 800a92c:	281e      	cmp	r0, #30
 800a92e:	bf9f      	itttt	ls
 800a930:	4b05      	ldrls	r3, [pc, #20]	; (800a948 <56445be374e93738432324b7e0ececbd8047647a+0x1c>)
 800a932:	681b      	ldrls	r3, [r3, #0]
 800a934:	f503 5300 	addls.w	r3, r3, #8192	; 0x2000
 800a938:	eb03 1040 	addls.w	r0, r3, r0, lsl #5
 800a93c:	bf94      	ite	ls
 800a93e:	f890 0df4 	ldrbls.w	r0, [r0, #3572]	; 0xdf4
 800a942:	2000      	movhi	r0, #0
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	20000034 	.word	0x20000034

0800a94c <da97346f7fa50b65fe6c97432d29b132cbef037c>:
 800a94c:	b508      	push	{r3, lr}
 800a94e:	f7fc f803 	bl	8006958 <EMBENET_RANDOM_Get>
 800a952:	b938      	cbnz	r0, 800a964 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x18>
 800a954:	f7fc f800 	bl	8006958 <EMBENET_RANDOM_Get>
 800a958:	b920      	cbnz	r0, 800a964 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x18>
 800a95a:	4906      	ldr	r1, [pc, #24]	; (800a974 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x28>)
 800a95c:	4806      	ldr	r0, [pc, #24]	; (800a978 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x2c>)
 800a95e:	2217      	movs	r2, #23
 800a960:	f7f6 fe16 	bl	8001590 <EXPECT_OnAbortHandler>
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <da97346f7fa50b65fe6c97432d29b132cbef037c+0x30>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800a96c:	f8a3 01c4 	strh.w	r0, [r3, #452]	; 0x1c4
 800a970:	bd08      	pop	{r3, pc}
 800a972:	bf00      	nop
 800a974:	0801ae2e 	.word	0x0801ae2e
 800a978:	0801ae85 	.word	0x0801ae85
 800a97c:	20000034 	.word	0x20000034

0800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x40>)
 800a984:	4d0f      	ldr	r5, [pc, #60]	; (800a9c4 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x44>)
 800a986:	681c      	ldr	r4, [r3, #0]
 800a988:	f7fb fc28 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800a98c:	f504 5040 	add.w	r0, r4, #12288	; 0x3000
 800a990:	2100      	movs	r1, #0
 800a992:	f8b0 31c4 	ldrh.w	r3, [r0, #452]	; 0x1c4
 800a996:	460c      	mov	r4, r1
 800a998:	f003 0201 	and.w	r2, r3, #1
 800a99c:	fa02 f601 	lsl.w	r6, r2, r1
 800a9a0:	4252      	negs	r2, r2
 800a9a2:	402a      	ands	r2, r5
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	4334      	orrs	r4, r6
 800a9a8:	ea82 0353 	eor.w	r3, r2, r3, lsr #1
 800a9ac:	2910      	cmp	r1, #16
 800a9ae:	b2a4      	uxth	r4, r4
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	d1f1      	bne.n	800a998 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x18>
 800a9b4:	f8a0 31c4 	strh.w	r3, [r0, #452]	; 0x1c4
 800a9b8:	f7fb fc30 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	20000034 	.word	0x20000034
 800a9c4:	ffffb400 	.word	0xffffb400

0800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>:
 800a9c8:	4288      	cmp	r0, r1
 800a9ca:	b570      	push	{r4, r5, r6, lr}
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	d304      	bcc.n	800a9dc <7694f58d16cb666949a4f0727c30967f32581954+0x14>
 800a9d2:	490c      	ldr	r1, [pc, #48]	; (800aa04 <7694f58d16cb666949a4f0727c30967f32581954+0x3c>)
 800a9d4:	480c      	ldr	r0, [pc, #48]	; (800aa08 <7694f58d16cb666949a4f0727c30967f32581954+0x40>)
 800a9d6:	2234      	movs	r2, #52	; 0x34
 800a9d8:	f7f6 fdda 	bl	8001590 <EXPECT_OnAbortHandler>
 800a9dc:	f7ff ffd0 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	f7ff ffcd 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	f04f 0100 	mov.w	r1, #0
 800a9ec:	f141 0300 	adc.w	r3, r1, #0
 800a9f0:	1b62      	subs	r2, r4, r5
 800a9f2:	f163 0300 	sbc.w	r3, r3, #0
 800a9f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800a9fa:	f7f6 f917 	bl	8000c2c <__aeabi_uldivmod>
 800a9fe:	18a8      	adds	r0, r5, r2
 800aa00:	bd70      	pop	{r4, r5, r6, pc}
 800aa02:	bf00      	nop
 800aa04:	0801ae2e 	.word	0x0801ae2e
 800aa08:	0801ae98 	.word	0x0801ae98

0800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>:
 800aa0c:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 800aa10:	4602      	mov	r2, r0
 800aa12:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800aa16:	d907      	bls.n	800aa28 <23673502809f5a9646d21283e7a04e0764f4d11d+0x1c>
 800aa18:	43d1      	mvns	r1, r2
 800aa1a:	428b      	cmp	r3, r1
 800aa1c:	eba0 0003 	sub.w	r0, r0, r3
 800aa20:	d204      	bcs.n	800aa2c <23673502809f5a9646d21283e7a04e0764f4d11d+0x20>
 800aa22:	1899      	adds	r1, r3, r2
 800aa24:	f7ff bfd0 	b.w	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e7fa      	b.n	800aa22 <23673502809f5a9646d21283e7a04e0764f4d11d+0x16>
 800aa2c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa30:	e7f8      	b.n	800aa24 <23673502809f5a9646d21283e7a04e0764f4d11d+0x18>

0800aa32 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 800aa32:	3901      	subs	r1, #1
 800aa34:	1d43      	adds	r3, r0, #5
 800aa36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa3a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800aa3e:	4283      	cmp	r3, r0
 800aa40:	d1f9      	bne.n	800aa36 <a0e683530d0c083abc75a62811790ac1bd2e23b8+0x4>
 800aa42:	4770      	bx	lr

0800aa44 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca+0x1c>)
 800aa48:	681c      	ldr	r4, [r3, #0]
 800aa4a:	22ac      	movs	r2, #172	; 0xac
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800aa52:	f00e fa95 	bl	8018f80 <memset>
 800aa56:	2305      	movs	r3, #5
 800aa58:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000034 	.word	0x20000034

0800aa64 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8>:
 800aa64:	b508      	push	{r3, lr}
 800aa66:	b920      	cbnz	r0, 800aa72 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0xe>
 800aa68:	4908      	ldr	r1, [pc, #32]	; (800aa8c <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x28>)
 800aa6a:	4809      	ldr	r0, [pc, #36]	; (800aa90 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x2c>)
 800aa6c:	22dc      	movs	r2, #220	; 0xdc
 800aa6e:	f7f6 fd8f 	bl	8001590 <EXPECT_OnAbortHandler>
 800aa72:	4b08      	ldr	r3, [pc, #32]	; (800aa94 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x30>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f100 0210 	add.w	r2, r0, #16
 800aa7a:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800aa7e:	f850 1b04 	ldr.w	r1, [r0], #4
 800aa82:	f843 1b04 	str.w	r1, [r3], #4
 800aa86:	4290      	cmp	r0, r2
 800aa88:	d1f9      	bne.n	800aa7e <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x1a>
 800aa8a:	bd08      	pop	{r3, pc}
 800aa8c:	0801aea4 	.word	0x0801aea4
 800aa90:	0801af02 	.word	0x0801af02
 800aa94:	20000034 	.word	0x20000034

0800aa98 <7d0846c279c7703537dc22d139b898222dc42c28>:
 800aa98:	b508      	push	{r3, lr}
 800aa9a:	b920      	cbnz	r0, 800aaa6 <7d0846c279c7703537dc22d139b898222dc42c28+0xe>
 800aa9c:	490d      	ldr	r1, [pc, #52]	; (800aad4 <7d0846c279c7703537dc22d139b898222dc42c28+0x3c>)
 800aa9e:	480e      	ldr	r0, [pc, #56]	; (800aad8 <7d0846c279c7703537dc22d139b898222dc42c28+0x40>)
 800aaa0:	22ec      	movs	r2, #236	; 0xec
 800aaa2:	f7f6 fd75 	bl	8001590 <EXPECT_OnAbortHandler>
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <7d0846c279c7703537dc22d139b898222dc42c28+0x44>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 800aaae:	2a03      	cmp	r2, #3
 800aab0:	d10d      	bne.n	800aace <7d0846c279c7703537dc22d139b898222dc42c28+0x36>
 800aab2:	f203 6236 	addw	r2, r3, #1590	; 0x636
 800aab6:	f203 6346 	addw	r3, r3, #1606	; 0x646
 800aaba:	f852 1b04 	ldr.w	r1, [r2], #4
 800aabe:	f840 1b04 	str.w	r1, [r0], #4
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d1f9      	bne.n	800aaba <7d0846c279c7703537dc22d139b898222dc42c28+0x22>
 800aac6:	8813      	ldrh	r3, [r2, #0]
 800aac8:	8003      	strh	r3, [r0, #0]
 800aaca:	2001      	movs	r0, #1
 800aacc:	bd08      	pop	{r3, pc}
 800aace:	2000      	movs	r0, #0
 800aad0:	e7fc      	b.n	800aacc <7d0846c279c7703537dc22d139b898222dc42c28+0x34>
 800aad2:	bf00      	nop
 800aad4:	0801aea4 	.word	0x0801aea4
 800aad8:	0801af13 	.word	0x0801af13
 800aadc:	20000034 	.word	0x20000034

0800aae0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe>:
 800aae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae2:	4b40      	ldr	r3, [pc, #256]	; (800abe4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x104>)
 800aae4:	681c      	ldr	r4, [r3, #0]
 800aae6:	f894 565c 	ldrb.w	r5, [r4, #1628]	; 0x65c
 800aaea:	2d01      	cmp	r5, #1
 800aaec:	4606      	mov	r6, r0
 800aaee:	d141      	bne.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800aaf0:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d86f      	bhi.n	800abd8 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xf8>
 800aaf8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800aafc:	f893 25b6 	ldrb.w	r2, [r3, #1462]	; 0x5b6
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	d063      	beq.n	800abcc <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xec>
 800ab04:	f894 25e8 	ldrb.w	r2, [r4, #1512]	; 0x5e8
 800ab08:	4937      	ldr	r1, [pc, #220]	; (800abe8 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x108>)
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d03b      	beq.n	800ab86 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xa6>
 800ab0e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800ab12:	1a12      	subs	r2, r2, r0
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d92d      	bls.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ab18:	2700      	movs	r7, #0
 800ab1a:	f884 75e8 	strb.w	r7, [r4, #1512]	; 0x5e8
 800ab1e:	f8c3 05b8 	str.w	r0, [r3, #1464]	; 0x5b8
 800ab22:	f7fd fe33 	bl	800878c <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1>
 800ab26:	4606      	mov	r6, r0
 800ab28:	b338      	cbz	r0, 800ab7a <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x9a>
 800ab2a:	2090      	movs	r0, #144	; 0x90
 800ab2c:	f7fe ff4a 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800ab30:	4604      	mov	r4, r0
 800ab32:	b950      	cbnz	r0, 800ab4a <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x6a>
 800ab34:	2304      	movs	r3, #4
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4a2c      	ldr	r2, [pc, #176]	; (800abec <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x10c>)
 800ab3a:	4b2d      	ldr	r3, [pc, #180]	; (800abf0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	ab02      	add	r3, sp, #8
 800ab40:	e913 0003 	ldmdb	r3, {r0, r1}
 800ab44:	f002 fd72 	bl	800d62c <LOGGER_PrintLine>
 800ab48:	e014      	b.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ab4a:	2390      	movs	r3, #144	; 0x90
 800ab4c:	7043      	strb	r3, [r0, #1]
 800ab4e:	2121      	movs	r1, #33	; 0x21
 800ab50:	f00d f96c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800ab54:	6863      	ldr	r3, [r4, #4]
 800ab56:	60e3      	str	r3, [r4, #12]
 800ab58:	2302      	movs	r3, #2
 800ab5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ab5e:	6833      	ldr	r3, [r6, #0]
 800ab60:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 800ab64:	6873      	ldr	r3, [r6, #4]
 800ab66:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
 800ab6a:	f884 709d 	strb.w	r7, [r4, #157]	; 0x9d
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f007 fd18 	bl	80125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>
 800ab74:	4628      	mov	r0, r5
 800ab76:	b003      	add	sp, #12
 800ab78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4b1c      	ldr	r3, [pc, #112]	; (800abf0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ab80:	4a1c      	ldr	r2, [pc, #112]	; (800abf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x114>)
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	e7db      	b.n	800ab3e <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x5e>
 800ab86:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800ab8a:	1ac3      	subs	r3, r0, r3
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	d9f1      	bls.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ab90:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 800ab94:	b163      	cbz	r3, 800abb0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xd0>
 800ab96:	3b01      	subs	r3, #1
 800ab98:	4917      	ldr	r1, [pc, #92]	; (800abf8 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x118>)
 800ab9a:	4818      	ldr	r0, [pc, #96]	; (800abfc <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x11c>)
 800ab9c:	f884 35e0 	strb.w	r3, [r4, #1504]	; 0x5e0
 800aba0:	f884 55e8 	strb.w	r5, [r4, #1512]	; 0x5e8
 800aba4:	f7ff ff10 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800aba8:	4430      	add	r0, r6
 800abaa:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800abae:	e7e1      	b.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800abb0:	2303      	movs	r3, #3
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4a12      	ldr	r2, [pc, #72]	; (800ac00 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x120>)
 800abb6:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800abb8:	9301      	str	r3, [sp, #4]
 800abba:	ab02      	add	r3, sp, #8
 800abbc:	e913 0003 	ldmdb	r3, {r0, r1}
 800abc0:	2504      	movs	r5, #4
 800abc2:	f002 fd33 	bl	800d62c <LOGGER_PrintLine>
 800abc6:	f884 565c 	strb.w	r5, [r4, #1628]	; 0x65c
 800abca:	e7d3      	b.n	800ab74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800abcc:	2303      	movs	r3, #3
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800abd2:	4a0c      	ldr	r2, [pc, #48]	; (800ac04 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x124>)
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	e7f0      	b.n	800abba <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xda>
 800abd8:	2303      	movs	r3, #3
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800abde:	4a0a      	ldr	r2, [pc, #40]	; (800ac08 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x128>)
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	e7ea      	b.n	800abba <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xda>
 800abe4:	20000034 	.word	0x20000034
 800abe8:	01312d00 	.word	0x01312d00
 800abec:	0801af36 	.word	0x0801af36
 800abf0:	0801af30 	.word	0x0801af30
 800abf4:	0801af79 	.word	0x0801af79
 800abf8:	00989680 	.word	0x00989680
 800abfc:	000f4240 	.word	0x000f4240
 800ac00:	0801afa7 	.word	0x0801afa7
 800ac04:	0801afbc 	.word	0x0801afbc
 800ac08:	0801afe7 	.word	0x0801afe7

0800ac0c <9506f9c37a945216115ab5227293f46163fc6230>:
 800ac0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac0e:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <9506f9c37a945216115ab5227293f46163fc6230+0x80>)
 800ac10:	681c      	ldr	r4, [r3, #0]
 800ac12:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800ac16:	f894 2634 	ldrb.w	r2, [r4, #1588]	; 0x634
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	d909      	bls.n	800ac36 <9506f9c37a945216115ab5227293f46163fc6230+0x2a>
 800ac22:	b1b2      	cbz	r2, 800ac52 <9506f9c37a945216115ab5227293f46163fc6230+0x46>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800ac2a:	bb38      	cbnz	r0, 800ac7c <9506f9c37a945216115ab5227293f46163fc6230+0x70>
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
 800ac34:	e022      	b.n	800ac7c <9506f9c37a945216115ab5227293f46163fc6230+0x70>
 800ac36:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	f8c3 55b8 	str.w	r5, [r3, #1464]	; 0x5b8
 800ac40:	f883 15b6 	strb.w	r1, [r3, #1462]	; 0x5b6
 800ac44:	b12a      	cbz	r2, 800ac52 <9506f9c37a945216115ab5227293f46163fc6230+0x46>
 800ac46:	2200      	movs	r2, #0
 800ac48:	f884 2634 	strb.w	r2, [r4, #1588]	; 0x634
 800ac4c:	f8a3 25b6 	strh.w	r2, [r3, #1462]	; 0x5b6
 800ac50:	e7eb      	b.n	800ac2a <9506f9c37a945216115ab5227293f46163fc6230+0x1e>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d0eb      	beq.n	800ac2e <9506f9c37a945216115ab5227293f46163fc6230+0x22>
 800ac56:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 800ac5a:	b173      	cbz	r3, 800ac7a <9506f9c37a945216115ab5227293f46163fc6230+0x6e>
 800ac5c:	2305      	movs	r3, #5
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <9506f9c37a945216115ab5227293f46163fc6230+0x84>)
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	ab02      	add	r3, sp, #8
 800ac66:	e913 0003 	ldmdb	r3, {r0, r1}
 800ac6a:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <9506f9c37a945216115ab5227293f46163fc6230+0x88>)
 800ac6c:	f002 fcde 	bl	800d62c <LOGGER_PrintLine>
 800ac70:	2301      	movs	r3, #1
 800ac72:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800ac76:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	2305      	movs	r3, #5
 800ac7e:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800ac82:	2300      	movs	r3, #0
 800ac84:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800ac88:	b003      	add	sp, #12
 800ac8a:	bd30      	pop	{r4, r5, pc}
 800ac8c:	20000034 	.word	0x20000034
 800ac90:	0801af30 	.word	0x0801af30
 800ac94:	0801b002 	.word	0x0801b002

0800ac98 <d492673eb40b0122449614ddec3203e781e2c714>:
 800ac98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	4b68      	ldr	r3, [pc, #416]	; (800ae40 <d492673eb40b0122449614ddec3203e781e2c714+0x1a8>)
 800ac9e:	681c      	ldr	r4, [r3, #0]
 800aca0:	f894 365c 	ldrb.w	r3, [r4, #1628]	; 0x65c
 800aca4:	4605      	mov	r5, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	b16b      	cbz	r3, 800acc6 <d492673eb40b0122449614ddec3203e781e2c714+0x2e>
 800acaa:	2303      	movs	r3, #3
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4b65      	ldr	r3, [pc, #404]	; (800ae44 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	ab02      	add	r3, sp, #8
 800acb4:	e913 0003 	ldmdb	r3, {r0, r1}
 800acb8:	4a63      	ldr	r2, [pc, #396]	; (800ae48 <d492673eb40b0122449614ddec3203e781e2c714+0x1b0>)
 800acba:	f002 fcb7 	bl	800d62c <LOGGER_PrintLine>
 800acbe:	2100      	movs	r1, #0
 800acc0:	4638      	mov	r0, r7
 800acc2:	f7ff ffa3 	bl	800ac0c <9506f9c37a945216115ab5227293f46163fc6230>
 800acc6:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ae4c <d492673eb40b0122449614ddec3203e781e2c714+0x1b4>
 800acca:	f8df a184 	ldr.w	sl, [pc, #388]	; 800ae50 <d492673eb40b0122449614ddec3203e781e2c714+0x1b8>
 800acce:	46a0      	mov	r8, r4
 800acd0:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800acd4:	4626      	mov	r6, r4
 800acd6:	f896 35b6 	ldrb.w	r3, [r6, #1462]	; 0x5b6
 800acda:	b193      	cbz	r3, 800ad02 <d492673eb40b0122449614ddec3203e781e2c714+0x6a>
 800acdc:	485d      	ldr	r0, [pc, #372]	; (800ae54 <d492673eb40b0122449614ddec3203e781e2c714+0x1bc>)
 800acde:	4659      	mov	r1, fp
 800ace0:	f7fd fad8 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800ace4:	f896 35b7 	ldrb.w	r3, [r6, #1463]	; 0x5b7
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bf18      	it	ne
 800acec:	4650      	movne	r0, sl
 800acee:	f8d6 35b8 	ldr.w	r3, [r6, #1464]	; 0x5b8
 800acf2:	1afb      	subs	r3, r7, r3
 800acf4:	4283      	cmp	r3, r0
 800acf6:	bf82      	ittt	hi
 800acf8:	2300      	movhi	r3, #0
 800acfa:	f886 35b6 	strbhi.w	r3, [r6, #1462]	; 0x5b6
 800acfe:	f886 35b7 	strbhi.w	r3, [r6, #1463]	; 0x5b7
 800ad02:	3608      	adds	r6, #8
 800ad04:	454e      	cmp	r6, r9
 800ad06:	d1e6      	bne.n	800acd6 <d492673eb40b0122449614ddec3203e781e2c714+0x3e>
 800ad08:	f894 3634 	ldrb.w	r3, [r4, #1588]	; 0x634
 800ad0c:	b1a3      	cbz	r3, 800ad38 <d492673eb40b0122449614ddec3203e781e2c714+0xa0>
 800ad0e:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
 800ad12:	4a4f      	ldr	r2, [pc, #316]	; (800ae50 <d492673eb40b0122449614ddec3203e781e2c714+0x1b8>)
 800ad14:	1afb      	subs	r3, r7, r3
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d924      	bls.n	800ad64 <d492673eb40b0122449614ddec3203e781e2c714+0xcc>
 800ad1a:	2304      	movs	r3, #4
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	4b49      	ldr	r3, [pc, #292]	; (800ae44 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	ab02      	add	r3, sp, #8
 800ad24:	e913 0003 	ldmdb	r3, {r0, r1}
 800ad28:	4a4b      	ldr	r2, [pc, #300]	; (800ae58 <d492673eb40b0122449614ddec3203e781e2c714+0x1c0>)
 800ad2a:	f002 fc7f 	bl	800d62c <LOGGER_PrintLine>
 800ad2e:	f00c fdd5 	bl	80178dc <d6f04be9d8ad12cb38262f1bba36a144854d1588>
 800ad32:	2300      	movs	r3, #0
 800ad34:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
 800ad38:	f898 35b6 	ldrb.w	r3, [r8, #1462]	; 0x5b6
 800ad3c:	b32b      	cbz	r3, 800ad8a <d492673eb40b0122449614ddec3203e781e2c714+0xf2>
 800ad3e:	f8b8 35b4 	ldrh.w	r3, [r8, #1460]	; 0x5b4
 800ad42:	42ab      	cmp	r3, r5
 800ad44:	d121      	bne.n	800ad8a <d492673eb40b0122449614ddec3203e781e2c714+0xf2>
 800ad46:	2305      	movs	r3, #5
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	4b3e      	ldr	r3, [pc, #248]	; (800ae44 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	a902      	add	r1, sp, #8
 800ad50:	e911 0003 	ldmdb	r1, {r0, r1}
 800ad54:	4a41      	ldr	r2, [pc, #260]	; (800ae5c <d492673eb40b0122449614ddec3203e781e2c714+0x1c4>)
 800ad56:	462b      	mov	r3, r5
 800ad58:	f002 fc68 	bl	800d62c <LOGGER_PrintLine>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	b003      	add	sp, #12
 800ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad64:	f8b4 3646 	ldrh.w	r3, [r4, #1606]	; 0x646
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	d1f7      	bne.n	800ad5c <d492673eb40b0122449614ddec3203e781e2c714+0xc4>
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800ad72:	2305      	movs	r3, #5
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	ab02      	add	r3, sp, #8
 800ad7c:	e913 0003 	ldmdb	r3, {r0, r1}
 800ad80:	4a37      	ldr	r2, [pc, #220]	; (800ae60 <d492673eb40b0122449614ddec3203e781e2c714+0x1c8>)
 800ad82:	f002 fc53 	bl	800d62c <LOGGER_PrintLine>
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7e9      	b.n	800ad5e <d492673eb40b0122449614ddec3203e781e2c714+0xc6>
 800ad8a:	f108 0808 	add.w	r8, r8, #8
 800ad8e:	45c8      	cmp	r8, r9
 800ad90:	d1d2      	bne.n	800ad38 <d492673eb40b0122449614ddec3203e781e2c714+0xa0>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f204 52b6 	addw	r2, r4, #1462	; 0x5b6
 800ad98:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 800ad9c:	b1b9      	cbz	r1, 800adce <d492673eb40b0122449614ddec3203e781e2c714+0x136>
 800ad9e:	3301      	adds	r3, #1
 800ada0:	2b05      	cmp	r3, #5
 800ada2:	d1f9      	bne.n	800ad98 <d492673eb40b0122449614ddec3203e781e2c714+0x100>
 800ada4:	2100      	movs	r1, #0
 800ada6:	460a      	mov	r2, r1
 800ada8:	f504 66b7 	add.w	r6, r4, #1464	; 0x5b8
 800adac:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
 800adb0:	1a38      	subs	r0, r7, r0
 800adb2:	4288      	cmp	r0, r1
 800adb4:	bf88      	it	hi
 800adb6:	4613      	movhi	r3, r2
 800adb8:	f102 0201 	add.w	r2, r2, #1
 800adbc:	bf88      	it	hi
 800adbe:	4601      	movhi	r1, r0
 800adc0:	2a05      	cmp	r2, #5
 800adc2:	d1f3      	bne.n	800adac <d492673eb40b0122449614ddec3203e781e2c714+0x114>
 800adc4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800adc8:	2100      	movs	r1, #0
 800adca:	f8a2 15b6 	strh.w	r1, [r2, #1462]	; 0x5b6
 800adce:	4921      	ldr	r1, [pc, #132]	; (800ae54 <d492673eb40b0122449614ddec3203e781e2c714+0x1bc>)
 800add0:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800add4:	4608      	mov	r0, r1
 800add6:	f7ff fe19 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 800adda:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800adde:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800ade2:	4438      	add	r0, r7
 800ade4:	2201      	movs	r2, #1
 800ade6:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800adea:	f884 25e8 	strb.w	r2, [r4, #1512]	; 0x5e8
 800adee:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
 800adf2:	f8c3 05b8 	str.w	r0, [r3, #1464]	; 0x5b8
 800adf6:	f8a3 55b4 	strh.w	r5, [r3, #1460]	; 0x5b4
 800adfa:	f8a3 25b6 	strh.w	r2, [r3, #1462]	; 0x5b6
 800adfe:	2300      	movs	r3, #0
 800ae00:	260c      	movs	r6, #12
 800ae02:	4618      	mov	r0, r3
 800ae04:	fb06 4203 	mla	r2, r6, r3, r4
 800ae08:	3301      	adds	r3, #1
 800ae0a:	f892 15f0 	ldrb.w	r1, [r2, #1520]	; 0x5f0
 800ae0e:	f8c2 05ec 	str.w	r0, [r2, #1516]	; 0x5ec
 800ae12:	f360 0107 	bfi	r1, r0, #0, #8
 800ae16:	2b06      	cmp	r3, #6
 800ae18:	f882 15f0 	strb.w	r1, [r2, #1520]	; 0x5f0
 800ae1c:	d1f2      	bne.n	800ae04 <d492673eb40b0122449614ddec3203e781e2c714+0x16c>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800ae24:	2305      	movs	r3, #5
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	a902      	add	r1, sp, #8
 800ae2e:	e911 0003 	ldmdb	r1, {r0, r1}
 800ae32:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <d492673eb40b0122449614ddec3203e781e2c714+0x1cc>)
 800ae34:	f8a4 5646 	strh.w	r5, [r4, #1606]	; 0x646
 800ae38:	462b      	mov	r3, r5
 800ae3a:	f002 fbf7 	bl	800d62c <LOGGER_PrintLine>
 800ae3e:	e7a2      	b.n	800ad86 <d492673eb40b0122449614ddec3203e781e2c714+0xee>
 800ae40:	20000034 	.word	0x20000034
 800ae44:	0801af30 	.word	0x0801af30
 800ae48:	0801b024 	.word	0x0801b024
 800ae4c:	01c9c380 	.word	0x01c9c380
 800ae50:	03938700 	.word	0x03938700
 800ae54:	00989680 	.word	0x00989680
 800ae58:	0801b05e 	.word	0x0801b05e
 800ae5c:	0801b080 	.word	0x0801b080
 800ae60:	0801b073 	.word	0x0801b073
 800ae64:	0801b094 	.word	0x0801b094

0800ae68 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>:
 800ae68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	b08e      	sub	sp, #56	; 0x38
 800ae70:	4607      	mov	r7, r0
 800ae72:	b928      	cbnz	r0, 800ae80 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x18>
 800ae74:	4964      	ldr	r1, [pc, #400]	; (800b008 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a0>)
 800ae76:	4865      	ldr	r0, [pc, #404]	; (800b00c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a4>)
 800ae78:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ae7c:	f7f6 fb88 	bl	8001590 <EXPECT_OnAbortHandler>
 800ae80:	b921      	cbnz	r1, 800ae8c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x24>
 800ae82:	4961      	ldr	r1, [pc, #388]	; (800b008 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a0>)
 800ae84:	4862      	ldr	r0, [pc, #392]	; (800b010 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a8>)
 800ae86:	f240 12b9 	movw	r2, #441	; 0x1b9
 800ae8a:	e7f7      	b.n	800ae7c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x14>
 800ae8c:	2a20      	cmp	r2, #32
 800ae8e:	d94c      	bls.n	800af2a <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc2>
 800ae90:	780b      	ldrb	r3, [r1, #0]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d149      	bne.n	800af2a <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc2>
 800ae96:	4b5f      	ldr	r3, [pc, #380]	; (800b014 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1ac>)
 800ae98:	200c      	movs	r0, #12
 800ae9a:	681c      	ldr	r4, [r3, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	fb00 4103 	mla	r1, r0, r3, r4
 800aea2:	f8d1 25ec 	ldr.w	r2, [r1, #1516]	; 0x5ec
 800aea6:	f891 15f0 	ldrb.w	r1, [r1, #1520]	; 0x5f0
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	d13f      	bne.n	800af2e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc6>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	2b06      	cmp	r3, #6
 800aeb2:	d1f4      	bne.n	800ae9e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x36>
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	9306      	str	r3, [sp, #24]
 800aeb8:	4b57      	ldr	r3, [pc, #348]	; (800b018 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b0>)
 800aeba:	4a58      	ldr	r2, [pc, #352]	; (800b01c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b4>)
 800aebc:	9307      	str	r3, [sp, #28]
 800aebe:	4619      	mov	r1, r3
 800aec0:	2003      	movs	r0, #3
 800aec2:	f002 fbb3 	bl	800d62c <LOGGER_PrintLine>
 800aec6:	e09a      	b.n	800affe <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x196>
 800aec8:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800aecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d17c      	bne.n	800afce <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800aed4:	f10d 031d 	add.w	r3, sp, #29
 800aed8:	f204 6236 	addw	r2, r4, #1590	; 0x636
 800aedc:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 800aee0:	f853 0b04 	ldr.w	r0, [r3], #4
 800aee4:	f842 0b04 	str.w	r0, [r2], #4
 800aee8:	428b      	cmp	r3, r1
 800aeea:	d1f9      	bne.n	800aee0 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x78>
 800aeec:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800aef0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800aef4:	250c      	movs	r5, #12
 800aef6:	f8b3 35b4 	ldrh.w	r3, [r3, #1460]	; 0x5b4
 800aefa:	f8a4 3646 	strh.w	r3, [r4, #1606]	; 0x646
 800aefe:	2301      	movs	r3, #1
 800af00:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
 800af04:	2300      	movs	r3, #0
 800af06:	461a      	mov	r2, r3
 800af08:	fb05 4103 	mla	r1, r5, r3, r4
 800af0c:	3301      	adds	r3, #1
 800af0e:	f891 05f0 	ldrb.w	r0, [r1, #1520]	; 0x5f0
 800af12:	f8c1 25ec 	str.w	r2, [r1, #1516]	; 0x5ec
 800af16:	f362 0007 	bfi	r0, r2, #0, #8
 800af1a:	2b06      	cmp	r3, #6
 800af1c:	f881 05f0 	strb.w	r0, [r1, #1520]	; 0x5f0
 800af20:	d1f2      	bne.n	800af08 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xa0>
 800af22:	f884 25e8 	strb.w	r2, [r4, #1512]	; 0x5e8
 800af26:	2303      	movs	r3, #3
 800af28:	e067      	b.n	800affa <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x192>
 800af2a:	2000      	movs	r0, #0
 800af2c:	e068      	b.n	800b000 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x198>
 800af2e:	f204 58ec 	addw	r8, r4, #1516	; 0x5ec
 800af32:	2600      	movs	r6, #0
 800af34:	f04f 090c 	mov.w	r9, #12
 800af38:	fb09 4206 	mla	r2, r9, r6, r4
 800af3c:	f8d2 35ec 	ldr.w	r3, [r2, #1516]	; 0x5ec
 800af40:	f892 25f0 	ldrb.w	r2, [r2, #1520]	; 0x5f0
 800af44:	4313      	orrs	r3, r2
 800af46:	d042      	beq.n	800afce <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800af48:	4641      	mov	r1, r8
 800af4a:	f10d 0012 	add.w	r0, sp, #18
 800af4e:	f7ff fd70 	bl	800aa32 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	f8cd 3009 	str.w	r3, [sp, #9]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8cd 300d 	str.w	r3, [sp, #13]
 800af5e:	aa06      	add	r2, sp, #24
 800af60:	232f      	movs	r3, #47	; 0x2f
 800af62:	f88d 3008 	strb.w	r3, [sp, #8]
 800af66:	f88d 3011 	strb.w	r3, [sp, #17]
 800af6a:	f88d 3017 	strb.w	r3, [sp, #23]
 800af6e:	f105 0e21 	add.w	lr, r5, #33	; 0x21
 800af72:	1c6b      	adds	r3, r5, #1
 800af74:	4692      	mov	sl, r2
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	6859      	ldr	r1, [r3, #4]
 800af7a:	4694      	mov	ip, r2
 800af7c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800af80:	3308      	adds	r3, #8
 800af82:	4573      	cmp	r3, lr
 800af84:	4662      	mov	r2, ip
 800af86:	d1f6      	bne.n	800af76 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x10e>
 800af88:	ab02      	add	r3, sp, #8
 800af8a:	f204 624c 	addw	r2, r4, #1612	; 0x64c
 800af8e:	2120      	movs	r1, #32
 800af90:	4650      	mov	r0, sl
 800af92:	f00d f887 	bl	80180a4 <7bd9c690a28739e5b569f505b868904b38eb748d>
 800af96:	aa0c      	add	r2, sp, #48	; 0x30
 800af98:	2300      	movs	r3, #0
 800af9a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800af9e:	292f      	cmp	r1, #47	; 0x2f
 800afa0:	d115      	bne.n	800afce <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800afa2:	3301      	adds	r3, #1
 800afa4:	2b07      	cmp	r3, #7
 800afa6:	d1f8      	bne.n	800af9a <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x132>
 800afa8:	4651      	mov	r1, sl
 800afaa:	4668      	mov	r0, sp
 800afac:	f7ff fd41 	bl	800aa32 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800afb0:	230c      	movs	r3, #12
 800afb2:	fb03 4306 	mla	r3, r3, r6, r4
 800afb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afba:	f8d3 15ec 	ldr.w	r1, [r3, #1516]	; 0x5ec
 800afbe:	9800      	ldr	r0, [sp, #0]
 800afc0:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bf08      	it	eq
 800afc8:	4288      	cmpeq	r0, r1
 800afca:	f43f af7d 	beq.w	800aec8 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x60>
 800afce:	3601      	adds	r6, #1
 800afd0:	2e06      	cmp	r6, #6
 800afd2:	f108 080c 	add.w	r8, r8, #12
 800afd6:	d1af      	bne.n	800af38 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xd0>
 800afd8:	2303      	movs	r3, #3
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b0>)
 800afde:	4a10      	ldr	r2, [pc, #64]	; (800b020 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b8>)
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	4619      	mov	r1, r3
 800afe4:	2003      	movs	r0, #3
 800afe6:	f002 fb21 	bl	800d62c <LOGGER_PrintLine>
 800afea:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800afee:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 25b7 	strb.w	r2, [r3, #1463]	; 0x5b7
 800aff8:	2305      	movs	r3, #5
 800affa:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800affe:	2001      	movs	r0, #1
 800b000:	b00e      	add	sp, #56	; 0x38
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	bf00      	nop
 800b008:	0801aea4 	.word	0x0801aea4
 800b00c:	0801b0a7 	.word	0x0801b0a7
 800b010:	0801b0ba 	.word	0x0801b0ba
 800b014:	20000034 	.word	0x20000034
 800b018:	0801af30 	.word	0x0801af30
 800b01c:	0801b0ff 	.word	0x0801b0ff
 800b020:	0801b0cc 	.word	0x0801b0cc

0800b024 <ce7cfafa044c34a88028e8cf12995b3096f9f973>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	460e      	mov	r6, r1
 800b02a:	b08e      	sub	sp, #56	; 0x38
 800b02c:	4615      	mov	r5, r2
 800b02e:	4607      	mov	r7, r0
 800b030:	b928      	cbnz	r0, 800b03e <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x1a>
 800b032:	4942      	ldr	r1, [pc, #264]	; (800b13c <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800b034:	4842      	ldr	r0, [pc, #264]	; (800b140 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x11c>)
 800b036:	f240 12e3 	movw	r2, #483	; 0x1e3
 800b03a:	f7f6 faa9 	bl	8001590 <EXPECT_OnAbortHandler>
 800b03e:	b922      	cbnz	r2, 800b04a <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x26>
 800b040:	493e      	ldr	r1, [pc, #248]	; (800b13c <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800b042:	4840      	ldr	r0, [pc, #256]	; (800b144 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x120>)
 800b044:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b048:	e7f7      	b.n	800b03a <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x16>
 800b04a:	b921      	cbnz	r1, 800b056 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x32>
 800b04c:	493b      	ldr	r1, [pc, #236]	; (800b13c <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800b04e:	483e      	ldr	r0, [pc, #248]	; (800b148 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x124>)
 800b050:	f240 12e5 	movw	r2, #485	; 0x1e5
 800b054:	e7f1      	b.n	800b03a <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x16>
 800b056:	2b20      	cmp	r3, #32
 800b058:	d96d      	bls.n	800b136 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x112>
 800b05a:	4b3c      	ldr	r3, [pc, #240]	; (800b14c <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x128>)
 800b05c:	f10d 0015 	add.w	r0, sp, #21
 800b060:	f8d3 8000 	ldr.w	r8, [r3]
 800b064:	2301      	movs	r3, #1
 800b066:	2400      	movs	r4, #0
 800b068:	f88d 3014 	strb.w	r3, [sp, #20]
 800b06c:	f7ff fce1 	bl	800aa32 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	f8cd 301a 	str.w	r3, [sp, #26]
 800b076:	f04f 31ff 	mov.w	r1, #4294967295
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800b080:	4620      	mov	r0, r4
 800b082:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800b086:	f8cd 301e 	str.w	r3, [sp, #30]
 800b08a:	f7ff fc9d 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800b08e:	f642 732f 	movw	r3, #12079	; 0x2f2f
 800b092:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800b096:	f04f 332f 	mov.w	r3, #791621423	; 0x2f2f2f2f
 800b09a:	930c      	str	r3, [sp, #48]	; 0x30
 800b09c:	232f      	movs	r3, #47	; 0x2f
 800b09e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4623      	mov	r3, r4
 800b0a6:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800b0aa:	240c      	movs	r4, #12
 800b0ac:	fb04 8003 	mla	r0, r4, r3, r8
 800b0b0:	f8d0 25ec 	ldr.w	r2, [r0, #1516]	; 0x5ec
 800b0b4:	f890 05f0 	ldrb.w	r0, [r0, #1520]	; 0x5f0
 800b0b8:	4302      	orrs	r2, r0
 800b0ba:	d003      	beq.n	800b0c4 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0xa0>
 800b0bc:	3301      	adds	r3, #1
 800b0be:	2b06      	cmp	r3, #6
 800b0c0:	d1f4      	bne.n	800b0ac <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x88>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	220c      	movs	r2, #12
 800b0c6:	fb02 8303 	mla	r3, r2, r3, r8
 800b0ca:	6830      	ldr	r0, [r6, #0]
 800b0cc:	f8c3 05ec 	str.w	r0, [r3, #1516]	; 0x5ec
 800b0d0:	7932      	ldrb	r2, [r6, #4]
 800b0d2:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 800b0d6:	f8c3 15f4 	str.w	r1, [r3, #1524]	; 0x5f4
 800b0da:	f10d 000e 	add.w	r0, sp, #14
 800b0de:	4631      	mov	r1, r6
 800b0e0:	f7ff fca7 	bl	800aa32 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800b0e4:	f8dd 301a 	ldr.w	r3, [sp, #26]
 800b0e8:	f8cd 3005 	str.w	r3, [sp, #5]
 800b0ec:	f8dd 301e 	ldr.w	r3, [sp, #30]
 800b0f0:	f8cd 3009 	str.w	r3, [sp, #9]
 800b0f4:	232f      	movs	r3, #47	; 0x2f
 800b0f6:	f88d 3004 	strb.w	r3, [sp, #4]
 800b0fa:	f88d 300d 	strb.w	r3, [sp, #13]
 800b0fe:	f88d 3013 	strb.w	r3, [sp, #19]
 800b102:	f208 624c 	addw	r2, r8, #1612	; 0x64c
 800b106:	ab01      	add	r3, sp, #4
 800b108:	2120      	movs	r1, #32
 800b10a:	f10d 0015 	add.w	r0, sp, #21
 800b10e:	f00c ffa3 	bl	8018058 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9>
 800b112:	ac05      	add	r4, sp, #20
 800b114:	462a      	mov	r2, r5
 800b116:	ad0d      	add	r5, sp, #52	; 0x34
 800b118:	4623      	mov	r3, r4
 800b11a:	cb03      	ldmia	r3!, {r0, r1}
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	6010      	str	r0, [r2, #0]
 800b120:	6051      	str	r1, [r2, #4]
 800b122:	461c      	mov	r4, r3
 800b124:	f102 0208 	add.w	r2, r2, #8
 800b128:	d1f6      	bne.n	800b118 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0xf4>
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	7013      	strb	r3, [r2, #0]
 800b12e:	2001      	movs	r0, #1
 800b130:	b00e      	add	sp, #56	; 0x38
 800b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b136:	2000      	movs	r0, #0
 800b138:	e7fa      	b.n	800b130 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x10c>
 800b13a:	bf00      	nop
 800b13c:	0801aea4 	.word	0x0801aea4
 800b140:	0801b0a7 	.word	0x0801b0a7
 800b144:	0801b130 	.word	0x0801b130
 800b148:	0801b144 	.word	0x0801b144
 800b14c:	20000034 	.word	0x20000034

0800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 800b150:	3901      	subs	r1, #1
 800b152:	4402      	add	r2, r0
 800b154:	4282      	cmp	r2, r0
 800b156:	d100      	bne.n	800b15a <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 800b158:	4770      	bx	lr
 800b15a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b15e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b162:	e7f7      	b.n	800b154 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>

0800b164 <62d501c077e77071b13b9590edfc05c0693f6990>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	b09a      	sub	sp, #104	; 0x68
 800b168:	a90f      	add	r1, sp, #60	; 0x3c
 800b16a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800b16e:	2a29      	cmp	r2, #41	; 0x29
 800b170:	d00c      	beq.n	800b18c <62d501c077e77071b13b9590edfc05c0693f6990+0x28>
 800b172:	2303      	movs	r3, #3
 800b174:	930f      	str	r3, [sp, #60]	; 0x3c
 800b176:	4b68      	ldr	r3, [pc, #416]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b178:	9310      	str	r3, [sp, #64]	; 0x40
 800b17a:	921e      	str	r2, [sp, #120]	; 0x78
 800b17c:	c903      	ldmia	r1, {r0, r1}
 800b17e:	4a67      	ldr	r2, [pc, #412]	; (800b31c <62d501c077e77071b13b9590edfc05c0693f6990+0x1b8>)
 800b180:	2329      	movs	r3, #41	; 0x29
 800b182:	b01a      	add	sp, #104	; 0x68
 800b184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b188:	f002 ba50 	b.w	800d62c <LOGGER_PrintLine>
 800b18c:	460a      	mov	r2, r1
 800b18e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	6859      	ldr	r1, [r3, #4]
 800b196:	4614      	mov	r4, r2
 800b198:	c403      	stmia	r4!, {r0, r1}
 800b19a:	3308      	adds	r3, #8
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	4622      	mov	r2, r4
 800b1a0:	d1f7      	bne.n	800b192 <62d501c077e77071b13b9590edfc05c0693f6990+0x2e>
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	7023      	strb	r3, [r4, #0]
 800b1a6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d00b      	beq.n	800b1c6 <62d501c077e77071b13b9590edfc05c0693f6990+0x62>
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	9306      	str	r3, [sp, #24]
 800b1b2:	4b59      	ldr	r3, [pc, #356]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b1b4:	4a5a      	ldr	r2, [pc, #360]	; (800b320 <62d501c077e77071b13b9590edfc05c0693f6990+0x1bc>)
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	2003      	movs	r0, #3
 800b1bc:	b01a      	add	sp, #104	; 0x68
 800b1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1c2:	f002 ba33 	b.w	800d62c <LOGGER_PrintLine>
 800b1c6:	4b57      	ldr	r3, [pc, #348]	; (800b324 <62d501c077e77071b13b9590edfc05c0693f6990+0x1c0>)
 800b1c8:	681e      	ldr	r6, [r3, #0]
 800b1ca:	2400      	movs	r4, #0
 800b1cc:	f506 65cc 	add.w	r5, r6, #1632	; 0x660
 800b1d0:	7b2b      	ldrb	r3, [r5, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d044      	beq.n	800b260 <62d501c077e77071b13b9590edfc05c0693f6990+0xfc>
 800b1d6:	2208      	movs	r2, #8
 800b1d8:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f00d fea5 	bl	8018f2c <memcmp>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d13c      	bne.n	800b260 <62d501c077e77071b13b9590edfc05c0693f6990+0xfc>
 800b1e6:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800b1ea:	f886 066c 	strb.w	r0, [r6, #1644]	; 0x66c
 800b1ee:	f10d 0345 	add.w	r3, sp, #69	; 0x45
 800b1f2:	f10d 0219 	add.w	r2, sp, #25
 800b1f6:	f10d 0165 	add.w	r1, sp, #101	; 0x65
 800b1fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800b1fe:	f842 0b04 	str.w	r0, [r2], #4
 800b202:	428b      	cmp	r3, r1
 800b204:	d1f9      	bne.n	800b1fa <62d501c077e77071b13b9590edfc05c0693f6990+0x96>
 800b206:	2090      	movs	r0, #144	; 0x90
 800b208:	f7fe fbdc 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800b20c:	4604      	mov	r4, r0
 800b20e:	2800      	cmp	r0, #0
 800b210:	d135      	bne.n	800b27e <62d501c077e77071b13b9590edfc05c0693f6990+0x11a>
 800b212:	2303      	movs	r3, #3
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	4b40      	ldr	r3, [pc, #256]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b218:	4a43      	ldr	r2, [pc, #268]	; (800b328 <62d501c077e77071b13b9590edfc05c0693f6990+0x1c4>)
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	4619      	mov	r1, r3
 800b21e:	2003      	movs	r0, #3
 800b220:	f002 fa04 	bl	800d62c <LOGGER_PrintLine>
 800b224:	f002 f9dc 	bl	800d5e0 <LOGGER_StartSection>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d073      	beq.n	800b314 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b0>
 800b22c:	2305      	movs	r3, #5
 800b22e:	9306      	str	r3, [sp, #24]
 800b230:	4b39      	ldr	r3, [pc, #228]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b232:	9307      	str	r3, [sp, #28]
 800b234:	4619      	mov	r1, r3
 800b236:	2005      	movs	r0, #5
 800b238:	f002 f9da 	bl	800d5f0 <LOGGER_PrintHeader>
 800b23c:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800b240:	a804      	add	r0, sp, #16
 800b242:	2208      	movs	r2, #8
 800b244:	f7ff ff84 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24c:	4837      	ldr	r0, [pc, #220]	; (800b32c <62d501c077e77071b13b9590edfc05c0693f6990+0x1c8>)
 800b24e:	f002 f9b5 	bl	800d5bc <LOGGER_Print>
 800b252:	f002 f9ab 	bl	800d5ac <LOGGER_PrintNL>
 800b256:	b01a      	add	sp, #104	; 0x68
 800b258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b25c:	f002 b9c6 	b.w	800d5ec <LOGGER_EndSection>
 800b260:	3401      	adds	r4, #1
 800b262:	2c0f      	cmp	r4, #15
 800b264:	f105 0510 	add.w	r5, r5, #16
 800b268:	d1b2      	bne.n	800b1d0 <62d501c077e77071b13b9590edfc05c0693f6990+0x6c>
 800b26a:	2304      	movs	r3, #4
 800b26c:	9306      	str	r3, [sp, #24]
 800b26e:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b270:	4a2f      	ldr	r2, [pc, #188]	; (800b330 <62d501c077e77071b13b9590edfc05c0693f6990+0x1cc>)
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	4619      	mov	r1, r3
 800b276:	2004      	movs	r0, #4
 800b278:	f002 f9d8 	bl	800d62c <LOGGER_PrintLine>
 800b27c:	e7b7      	b.n	800b1ee <62d501c077e77071b13b9590edfc05c0693f6990+0x8a>
 800b27e:	f249 0390 	movw	r3, #37008	; 0x9090
 800b282:	8003      	strh	r3, [r0, #0]
 800b284:	2121      	movs	r1, #33	; 0x21
 800b286:	f00c fdd1 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800b28a:	b960      	cbnz	r0, 800b2a6 <62d501c077e77071b13b9590edfc05c0693f6990+0x142>
 800b28c:	2303      	movs	r3, #3
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	4b21      	ldr	r3, [pc, #132]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b292:	4a28      	ldr	r2, [pc, #160]	; (800b334 <62d501c077e77071b13b9590edfc05c0693f6990+0x1d0>)
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	4619      	mov	r1, r3
 800b298:	2003      	movs	r0, #3
 800b29a:	f002 f9c7 	bl	800d62c <LOGGER_PrintLine>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7fe fc4e 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800b2a4:	e7be      	b.n	800b224 <62d501c077e77071b13b9590edfc05c0693f6990+0xc0>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	f88d 3018 	strb.w	r3, [sp, #24]
 800b2ac:	6863      	ldr	r3, [r4, #4]
 800b2ae:	ad06      	add	r5, sp, #24
 800b2b0:	ae0e      	add	r6, sp, #56	; 0x38
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	ca03      	ldmia	r2!, {r0, r1}
 800b2b6:	42b2      	cmp	r2, r6
 800b2b8:	6018      	str	r0, [r3, #0]
 800b2ba:	6059      	str	r1, [r3, #4]
 800b2bc:	4615      	mov	r5, r2
 800b2be:	f103 0308 	add.w	r3, r3, #8
 800b2c2:	d1f6      	bne.n	800b2b2 <62d501c077e77071b13b9590edfc05c0693f6990+0x14e>
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b2ce:	f8dd 303d 	ldr.w	r3, [sp, #61]	; 0x3d
 800b2d2:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 800b2d6:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
 800b2da:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f007 f95d 	bl	80125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	eb0d 0002 	add.w	r0, sp, r2
 800b2f0:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800b2f4:	f7ff ff2c 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b2f8:	2305      	movs	r3, #5
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	4b06      	ldr	r3, [pc, #24]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b2fe:	9305      	str	r3, [sp, #20]
 800b300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b304:	4904      	ldr	r1, [pc, #16]	; (800b318 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800b306:	e9cd 2300 	strd	r2, r3, [sp]
 800b30a:	2005      	movs	r0, #5
 800b30c:	4a0a      	ldr	r2, [pc, #40]	; (800b338 <62d501c077e77071b13b9590edfc05c0693f6990+0x1d4>)
 800b30e:	f002 f98d 	bl	800d62c <LOGGER_PrintLine>
 800b312:	e787      	b.n	800b224 <62d501c077e77071b13b9590edfc05c0693f6990+0xc0>
 800b314:	b01a      	add	sp, #104	; 0x68
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	0801af30 	.word	0x0801af30
 800b31c:	0801b155 	.word	0x0801b155
 800b320:	0801b18b 	.word	0x0801b18b
 800b324:	20000034 	.word	0x20000034
 800b328:	0801b20a 	.word	0x0801b20a
 800b32c:	0801b26c 	.word	0x0801b26c
 800b330:	0801b1a9 	.word	0x0801b1a9
 800b334:	0801b220 	.word	0x0801b220
 800b338:	0801b249 	.word	0x0801b249

0800b33c <781f8340fa417dd87327132209f6d0b889d0ff2a>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <781f8340fa417dd87327132209f6d0b889d0ff2a+0x2c>)
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800b346:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f00d fe17 	bl	8018f80 <memset>
 800b352:	f24f 02b0 	movw	r2, #61616	; 0xf0b0
 800b356:	f8a4 2750 	strh.w	r2, [r4, #1872]	; 0x750
 800b35a:	4a04      	ldr	r2, [pc, #16]	; (800b36c <781f8340fa417dd87327132209f6d0b889d0ff2a+0x30>)
 800b35c:	f8c4 2758 	str.w	r2, [r4, #1880]	; 0x758
 800b360:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
 800b364:	bd10      	pop	{r4, pc}
 800b366:	bf00      	nop
 800b368:	20000034 	.word	0x20000034
 800b36c:	0800b165 	.word	0x0800b165

0800b370 <7d1d6e9032260bf29a701dae9a5813b859a1535c>:
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <7d1d6e9032260bf29a701dae9a5813b859a1535c+0xc>)
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	f500 60ea 	add.w	r0, r0, #1872	; 0x750
 800b378:	f00b bfd4 	b.w	8017324 <76cd6211f2085e3d946bd747f2187c2e80301a64>
 800b37c:	20000034 	.word	0x20000034

0800b380 <b3455a2b4a7c58716d32ab9ee32d439bee656865>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <b3455a2b4a7c58716d32ab9ee32d439bee656865+0xc>)
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	f500 60ea 	add.w	r0, r0, #1872	; 0x750
 800b388:	f00b bfea 	b.w	8017360 <008a3a43d97272e7b0f59f361a8c8969876e60dd>
 800b38c:	20000034 	.word	0x20000034

0800b390 <27342039fe058efec7af5218a4abe449221e7bb4>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	b099      	sub	sp, #100	; 0x64
 800b396:	2b21      	cmp	r3, #33	; 0x21
 800b398:	4604      	mov	r4, r0
 800b39a:	9103      	str	r1, [sp, #12]
 800b39c:	4615      	mov	r5, r2
 800b39e:	f040 80d8 	bne.w	800b552 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800b3a2:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800b564 <27342039fe058efec7af5218a4abe449221e7bb4+0x1d4>
 800b3a6:	f8da 6000 	ldr.w	r6, [sl]
 800b3aa:	f7ff faa1 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800b3ae:	f506 6bcc 	add.w	fp, r6, #1632	; 0x660
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	465f      	mov	r7, fp
 800b3b6:	f506 69ea 	add.w	r9, r6, #1872	; 0x750
 800b3ba:	7b3a      	ldrb	r2, [r7, #12]
 800b3bc:	b182      	cbz	r2, 800b3e0 <27342039fe058efec7af5218a4abe449221e7bb4+0x50>
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	4b69      	ldr	r3, [pc, #420]	; (800b568 <27342039fe058efec7af5218a4abe449221e7bb4+0x1d8>)
 800b3c2:	eba8 0202 	sub.w	r2, r8, r2
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d96f      	bls.n	800b4aa <27342039fe058efec7af5218a4abe449221e7bb4+0x11a>
 800b3ca:	4b68      	ldr	r3, [pc, #416]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	733a      	strb	r2, [r7, #12]
 800b3d0:	2205      	movs	r2, #5
 800b3d2:	920c      	str	r2, [sp, #48]	; 0x30
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	4a66      	ldr	r2, [pc, #408]	; (800b570 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e0>)
 800b3d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b3da:	2005      	movs	r0, #5
 800b3dc:	f002 f926 	bl	800d62c <LOGGER_PrintLine>
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	454f      	cmp	r7, r9
 800b3e4:	d1e9      	bne.n	800b3ba <27342039fe058efec7af5218a4abe449221e7bb4+0x2a>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f206 606c 	addw	r0, r6, #1644	; 0x66c
 800b3ec:	0111      	lsls	r1, r2, #4
 800b3ee:	5c47      	ldrb	r7, [r0, r1]
 800b3f0:	2f00      	cmp	r7, #0
 800b3f2:	f040 8087 	bne.w	800b504 <27342039fe058efec7af5218a4abe449221e7bb4+0x174>
 800b3f6:	440e      	add	r6, r1
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f8c6 8668 	str.w	r8, [r6, #1640]	; 0x668
 800b3fe:	f886 266c 	strb.w	r2, [r6, #1644]	; 0x66c
 800b402:	6822      	ldr	r2, [r4, #0]
 800b404:	f84b 2001 	str.w	r2, [fp, r1]
 800b408:	eb0b 0601 	add.w	r6, fp, r1
 800b40c:	6862      	ldr	r2, [r4, #4]
 800b40e:	6072      	str	r2, [r6, #4]
 800b410:	f002 f8e6 	bl	800d5e0 <LOGGER_StartSection>
 800b414:	b1a8      	cbz	r0, 800b442 <27342039fe058efec7af5218a4abe449221e7bb4+0xb2>
 800b416:	2305      	movs	r3, #5
 800b418:	930c      	str	r3, [sp, #48]	; 0x30
 800b41a:	4b54      	ldr	r3, [pc, #336]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b41c:	930d      	str	r3, [sp, #52]	; 0x34
 800b41e:	4619      	mov	r1, r3
 800b420:	2005      	movs	r0, #5
 800b422:	f002 f8e5 	bl	800d5f0 <LOGGER_PrintHeader>
 800b426:	4631      	mov	r1, r6
 800b428:	2208      	movs	r2, #8
 800b42a:	a808      	add	r0, sp, #32
 800b42c:	f7ff fe90 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b430:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b434:	484f      	ldr	r0, [pc, #316]	; (800b574 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e4>)
 800b436:	f002 f8c1 	bl	800d5bc <LOGGER_Print>
 800b43a:	f002 f8b7 	bl	800d5ac <LOGGER_PrintNL>
 800b43e:	f002 f8d5 	bl	800d5ec <LOGGER_EndSection>
 800b442:	782b      	ldrb	r3, [r5, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	f040 8084 	bne.w	800b552 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800b44a:	2300      	movs	r3, #0
 800b44c:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 800b450:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800b454:	2205      	movs	r2, #5
 800b456:	2303      	movs	r3, #3
 800b458:	9903      	ldr	r1, [sp, #12]
 800b45a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800b45e:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800b462:	f7ff fe75 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
 800b472:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
 800b476:	1c6b      	adds	r3, r5, #1
 800b478:	3521      	adds	r5, #33	; 0x21
 800b47a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b47e:	f842 1b04 	str.w	r1, [r2], #4
 800b482:	42ab      	cmp	r3, r5
 800b484:	d1f9      	bne.n	800b47a <27342039fe058efec7af5218a4abe449221e7bb4+0xea>
 800b486:	a808      	add	r0, sp, #32
 800b488:	f8da 6000 	ldr.w	r6, [sl]
 800b48c:	4d37      	ldr	r5, [pc, #220]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b48e:	f00a fdb5 	bl	8015ffc <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 800b492:	ac06      	add	r4, sp, #24
 800b494:	2800      	cmp	r0, #0
 800b496:	d13f      	bne.n	800b518 <27342039fe058efec7af5218a4abe449221e7bb4+0x188>
 800b498:	2303      	movs	r3, #3
 800b49a:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800b49e:	4a36      	ldr	r2, [pc, #216]	; (800b578 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e8>)
 800b4a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4a4:	f002 f8c2 	bl	800d62c <LOGGER_PrintLine>
 800b4a8:	e053      	b.n	800b552 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f00d fd3c 	bl	8018f2c <memcmp>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d193      	bne.n	800b3e0 <27342039fe058efec7af5218a4abe449221e7bb4+0x50>
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b4bc:	4a2f      	ldr	r2, [pc, #188]	; (800b57c <27342039fe058efec7af5218a4abe449221e7bb4+0x1ec>)
 800b4be:	4b2b      	ldr	r3, [pc, #172]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b4c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	2003      	movs	r0, #3
 800b4c6:	f002 f8b1 	bl	800d62c <LOGGER_PrintLine>
 800b4ca:	f002 f889 	bl	800d5e0 <LOGGER_StartSection>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d03f      	beq.n	800b552 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800b4d2:	2305      	movs	r3, #5
 800b4d4:	930c      	str	r3, [sp, #48]	; 0x30
 800b4d6:	4b25      	ldr	r3, [pc, #148]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b4d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b4da:	4619      	mov	r1, r3
 800b4dc:	2005      	movs	r0, #5
 800b4de:	f002 f887 	bl	800d5f0 <LOGGER_PrintHeader>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	a808      	add	r0, sp, #32
 800b4e6:	2208      	movs	r2, #8
 800b4e8:	f7ff fe32 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b4ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4f0:	4823      	ldr	r0, [pc, #140]	; (800b580 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f0>)
 800b4f2:	f002 f863 	bl	800d5bc <LOGGER_Print>
 800b4f6:	f002 f859 	bl	800d5ac <LOGGER_PrintNL>
 800b4fa:	b019      	add	sp, #100	; 0x64
 800b4fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	f002 b874 	b.w	800d5ec <LOGGER_EndSection>
 800b504:	3201      	adds	r2, #1
 800b506:	2a0f      	cmp	r2, #15
 800b508:	f47f af70 	bne.w	800b3ec <27342039fe058efec7af5218a4abe449221e7bb4+0x5c>
 800b50c:	2303      	movs	r3, #3
 800b50e:	930c      	str	r3, [sp, #48]	; 0x30
 800b510:	4b16      	ldr	r3, [pc, #88]	; (800b56c <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800b512:	4a1c      	ldr	r2, [pc, #112]	; (800b584 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f4>)
 800b514:	930d      	str	r3, [sp, #52]	; 0x34
 800b516:	e7d4      	b.n	800b4c2 <27342039fe058efec7af5218a4abe449221e7bb4+0x132>
 800b518:	232e      	movs	r3, #46	; 0x2e
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	f24f 02b0 	movw	r2, #61616	; 0xf0b0
 800b520:	ab0c      	add	r3, sp, #48	; 0x30
 800b522:	f506 61ea 	add.w	r1, r6, #1872	; 0x750
 800b526:	a808      	add	r0, sp, #32
 800b528:	f00b ff2c 	bl	8017384 <09c9c31144d89e446fc56189171072a9b46992fd>
 800b52c:	b9a0      	cbnz	r0, 800b558 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c8>
 800b52e:	2208      	movs	r2, #8
 800b530:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800b534:	a804      	add	r0, sp, #16
 800b536:	f7ff fe0b 	bl	800b150 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800b53a:	2305      	movs	r3, #5
 800b53c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800b540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b544:	e9cd 2300 	strd	r2, r3, [sp]
 800b548:	4a0f      	ldr	r2, [pc, #60]	; (800b588 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f8>)
 800b54a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b54e:	f002 f86d 	bl	800d62c <LOGGER_PrintLine>
 800b552:	b019      	add	sp, #100	; 0x64
 800b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	2303      	movs	r3, #3
 800b55a:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800b55e:	4a0b      	ldr	r2, [pc, #44]	; (800b58c <27342039fe058efec7af5218a4abe449221e7bb4+0x1fc>)
 800b560:	e79e      	b.n	800b4a0 <27342039fe058efec7af5218a4abe449221e7bb4+0x110>
 800b562:	bf00      	nop
 800b564:	20000034 	.word	0x20000034
 800b568:	004c4b40 	.word	0x004c4b40
 800b56c:	0801af30 	.word	0x0801af30
 800b570:	0801b2d4 	.word	0x0801b2d4
 800b574:	0801b32f 	.word	0x0801b32f
 800b578:	0801b283 	.word	0x0801b283
 800b57c:	0801b2e4 	.word	0x0801b2e4
 800b580:	0801b3b1 	.word	0x0801b3b1
 800b584:	0801b343 	.word	0x0801b343
 800b588:	0801b38e 	.word	0x0801b38e
 800b58c:	0801b2bb 	.word	0x0801b2bb

0800b590 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505>:
 800b590:	b508      	push	{r3, lr}
 800b592:	4b05      	ldr	r3, [pc, #20]	; (800b5a8 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505+0x18>)
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f44f 724a 	mov.w	r2, #808	; 0x328
 800b59a:	2100      	movs	r1, #0
 800b59c:	f200 7064 	addw	r0, r0, #1892	; 0x764
 800b5a0:	f00d fcee 	bl	8018f80 <memset>
 800b5a4:	bd08      	pop	{r3, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000034 	.word	0x20000034

0800b5ac <ef153328aa1040603d831896041b65ee1135a0ee>:
 800b5ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	4b19      	ldr	r3, [pc, #100]	; (800b618 <ef153328aa1040603d831896041b65ee1135a0ee+0x6c>)
 800b5b2:	681d      	ldr	r5, [r3, #0]
 800b5b4:	2464      	movs	r4, #100	; 0x64
 800b5b6:	2713      	movs	r7, #19
 800b5b8:	f8d5 3a84 	ldr.w	r3, [r5, #2692]	; 0xa84
 800b5bc:	b333      	cbz	r3, 800b60c <ef153328aa1040603d831896041b65ee1135a0ee+0x60>
 800b5be:	f895 6a88 	ldrb.w	r6, [r5, #2696]	; 0xa88
 800b5c2:	bb1e      	cbnz	r6, 800b60c <ef153328aa1040603d831896041b65ee1135a0ee+0x60>
 800b5c4:	b964      	cbnz	r4, 800b5e0 <ef153328aa1040603d831896041b65ee1135a0ee+0x34>
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	4b14      	ldr	r3, [pc, #80]	; (800b61c <ef153328aa1040603d831896041b65ee1135a0ee+0x70>)
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	ab02      	add	r3, sp, #8
 800b5d0:	e913 0003 	ldmdb	r3, {r0, r1}
 800b5d4:	4a12      	ldr	r2, [pc, #72]	; (800b620 <ef153328aa1040603d831896041b65ee1135a0ee+0x74>)
 800b5d6:	b003      	add	sp, #12
 800b5d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	f002 b826 	b.w	800d62c <LOGGER_PrintLine>
 800b5e0:	f7fa fdfc 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800b5e4:	f8d5 3a84 	ldr.w	r3, [r5, #2692]	; 0xa84
 800b5e8:	e9d3 9202 	ldrd	r9, r2, [r3, #8]
 800b5ec:	f8d3 8000 	ldr.w	r8, [r3]
 800b5f0:	f8c5 2a84 	str.w	r2, [r5, #2692]	; 0xa84
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	2210      	movs	r2, #16
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f00d fcc1 	bl	8018f80 <memset>
 800b5fe:	7107      	strb	r7, [r0, #4]
 800b600:	f7fa fe0c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800b604:	4648      	mov	r0, r9
 800b606:	3c01      	subs	r4, #1
 800b608:	47c0      	blx	r8
 800b60a:	e7d5      	b.n	800b5b8 <ef153328aa1040603d831896041b65ee1135a0ee+0xc>
 800b60c:	2c00      	cmp	r4, #0
 800b60e:	d0da      	beq.n	800b5c6 <ef153328aa1040603d831896041b65ee1135a0ee+0x1a>
 800b610:	b003      	add	sp, #12
 800b612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b616:	bf00      	nop
 800b618:	20000034 	.word	0x20000034
 800b61c:	0801b3e1 	.word	0x0801b3e1
 800b620:	0801b3e8 	.word	0x0801b3e8

0800b624 <openos_push_task_impl>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	4b19      	ldr	r3, [pc, #100]	; (800b68c <openos_push_task_impl+0x68>)
 800b628:	681c      	ldr	r4, [r3, #0]
 800b62a:	460f      	mov	r7, r1
 800b62c:	4606      	mov	r6, r0
 800b62e:	4615      	mov	r5, r2
 800b630:	f7fa fdd4 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800b634:	f240 7364 	movw	r3, #1892	; 0x764
 800b638:	f640 2184 	movw	r1, #2692	; 0xa84
 800b63c:	f1a4 0c10 	sub.w	ip, r4, #16
 800b640:	428b      	cmp	r3, r1
 800b642:	d106      	bne.n	800b652 <openos_push_task_impl+0x2e>
 800b644:	f7fa fdea 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800b648:	4911      	ldr	r1, [pc, #68]	; (800b690 <openos_push_task_impl+0x6c>)
 800b64a:	4812      	ldr	r0, [pc, #72]	; (800b694 <openos_push_task_impl+0x70>)
 800b64c:	2256      	movs	r2, #86	; 0x56
 800b64e:	f7f5 ff9f 	bl	8001590 <EXPECT_OnAbortHandler>
 800b652:	f103 0210 	add.w	r2, r3, #16
 800b656:	f85c 0002 	ldr.w	r0, [ip, r2]
 800b65a:	b9a8      	cbnz	r0, 800b688 <openos_push_task_impl+0x64>
 800b65c:	18e2      	adds	r2, r4, r3
 800b65e:	50e6      	str	r6, [r4, r3]
 800b660:	6097      	str	r7, [r2, #8]
 800b662:	7115      	strb	r5, [r2, #4]
 800b664:	f8d4 3a84 	ldr.w	r3, [r4, #2692]	; 0xa84
 800b668:	f604 2184 	addw	r1, r4, #2692	; 0xa84
 800b66c:	b113      	cbz	r3, 800b674 <openos_push_task_impl+0x50>
 800b66e:	7918      	ldrb	r0, [r3, #4]
 800b670:	42a8      	cmp	r0, r5
 800b672:	d905      	bls.n	800b680 <openos_push_task_impl+0x5c>
 800b674:	60d3      	str	r3, [r2, #12]
 800b676:	600a      	str	r2, [r1, #0]
 800b678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b67c:	f7fa bdce 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800b680:	f103 010c 	add.w	r1, r3, #12
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	e7f1      	b.n	800b66c <openos_push_task_impl+0x48>
 800b688:	4613      	mov	r3, r2
 800b68a:	e7d9      	b.n	800b640 <openos_push_task_impl+0x1c>
 800b68c:	20000034 	.word	0x20000034
 800b690:	0801b408 	.word	0x0801b408
 800b694:	0801b45d 	.word	0x0801b45d

0800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>:
 800b698:	f7ff bfc4 	b.w	800b624 <openos_push_task_impl>

0800b69c <c5868198428dfaffddb0900c3d01452778b19d11>:
 800b69c:	3901      	subs	r1, #1
 800b69e:	4402      	add	r2, r0
 800b6a0:	4282      	cmp	r2, r0
 800b6a2:	d100      	bne.n	800b6a6 <c5868198428dfaffddb0900c3d01452778b19d11+0xa>
 800b6a4:	4770      	bx	lr
 800b6a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6aa:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b6ae:	e7f7      	b.n	800b6a0 <c5868198428dfaffddb0900c3d01452778b19d11+0x4>

0800b6b0 <ENDIANNESS_hton16>:
 800b6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f8ad 0006 	strh.w	r0, [sp, #6]
 800b6b8:	f10d 0106 	add.w	r1, sp, #6
 800b6bc:	f10d 000e 	add.w	r0, sp, #14
 800b6c0:	f7ff ffec 	bl	800b69c <c5868198428dfaffddb0900c3d01452778b19d11>
 800b6c4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800b6c8:	b005      	add	sp, #20
 800b6ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b6d0 <sendStatusConfirmationIndication>:
 800b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	b09c      	sub	sp, #112	; 0x70
 800b6d8:	4616      	mov	r6, r2
 800b6da:	4680      	mov	r8, r0
 800b6dc:	b100      	cbz	r0, 800b6e0 <sendStatusConfirmationIndication+0x10>
 800b6de:	b921      	cbnz	r1, 800b6ea <sendStatusConfirmationIndication+0x1a>
 800b6e0:	4955      	ldr	r1, [pc, #340]	; (800b838 <sendStatusConfirmationIndication+0x168>)
 800b6e2:	4856      	ldr	r0, [pc, #344]	; (800b83c <sendStatusConfirmationIndication+0x16c>)
 800b6e4:	22cf      	movs	r2, #207	; 0xcf
 800b6e6:	f7f5 ff53 	bl	8001590 <EXPECT_OnAbortHandler>
 800b6ea:	2365      	movs	r3, #101	; 0x65
 800b6ec:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800b6f0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800b6f4:	f00c faa2 	bl	8017c3c <13e346e7537b84bcd52c3cf47fef4ef9086039ba>
 800b6f8:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 800b6fc:	f00c faa4 	bl	8017c48 <bba0525c833a77ea6266641935ef62cce330e9a7>
 800b700:	f7ff ffd6 	bl	800b6b0 <ENDIANNESS_hton16>
 800b704:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 800b708:	f00c faa9 	bl	8017c5e <6bb34e807caa6654eefd3984c9aa6bde2b5f1294>
 800b70c:	4604      	mov	r4, r0
 800b70e:	f00c faa8 	bl	8017c62 <ef56437d1bfbf379203966c0ca60ce860a9e4040>
 800b712:	4404      	add	r4, r0
 800b714:	f00c faa7 	bl	8017c66 <33cb78c5ebdf85a72531cdf9a2db5897a43e9d27>
 800b718:	b2a4      	uxth	r4, r4
 800b71a:	4420      	add	r0, r4
 800b71c:	b280      	uxth	r0, r0
 800b71e:	f7ff ffc7 	bl	800b6b0 <ENDIANNESS_hton16>
 800b722:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800b726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b72a:	f7ff ffc1 	bl	800b6b0 <ENDIANNESS_hton16>
 800b72e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b732:	f00c faa6 	bl	8017c82 <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>
 800b736:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 800b73a:	f00c fa5c 	bl	8017bf6 <e4a3f9918fe69f73b1cc4210ec318e3c426e72f5>
 800b73e:	f7ff ffb7 	bl	800b6b0 <ENDIANNESS_hton16>
 800b742:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800b746:	f00c fa1d 	bl	8017b84 <46cd3075e82ff8b9ea43a88054ba0b7b067be91a>
 800b74a:	ac06      	add	r4, sp, #24
 800b74c:	2208      	movs	r2, #8
 800b74e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b752:	a904      	add	r1, sp, #16
 800b754:	4620      	mov	r0, r4
 800b756:	f7ff ffa1 	bl	800b69c <c5868198428dfaffddb0900c3d01452778b19d11>
 800b75a:	9b06      	ldr	r3, [sp, #24]
 800b75c:	f8cd 3025 	str.w	r3, [sp, #37]	; 0x25
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 800b766:	f00c fa38 	bl	8017bda <EMBENET_NODE_DIAG_GetParentPDR>
 800b76a:	f7ff ffa1 	bl	800b6b0 <ENDIANNESS_hton16>
 800b76e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 800b772:	f00c fa1f 	bl	8017bb4 <b91c6940dbb3047c4c296403649f7867d9870dca>
 800b776:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
 800b77a:	a804      	add	r0, sp, #16
 800b77c:	f00c fa75 	bl	8017c6a <EMBENET_NODE_DIAG_GetQueueThresholdAndOverflowCounters>
 800b780:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800b784:	f7ff ff94 	bl	800b6b0 <ENDIANNESS_hton16>
 800b788:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800b78c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800b790:	f7ff ff8e 	bl	800b6b0 <ENDIANNESS_hton16>
 800b794:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800b798:	f00c fa2f 	bl	8017bfa <4f511565cdbba62bf97753c767d47da43943d7f0>
 800b79c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800b7a0:	f00c fa41 	bl	8017c26 <88f59cfa8d275ffe37bfcd0f1db7f0dfbfb0545b>
 800b7a4:	f7ff ff84 	bl	800b6b0 <ENDIANNESS_hton16>
 800b7a8:	f8ad 0033 	strh.w	r0, [sp, #51]	; 0x33
 800b7ac:	f7fc fa5c 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7b6:	f7f5 fa39 	bl	8000c2c <__aeabi_uldivmod>
 800b7ba:	2204      	movs	r2, #4
 800b7bc:	9003      	str	r0, [sp, #12]
 800b7be:	a903      	add	r1, sp, #12
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7ff ff6b 	bl	800b69c <c5868198428dfaffddb0900c3d01452778b19d11>
 800b7c6:	9b06      	ldr	r3, [sp, #24]
 800b7c8:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
 800b7cc:	f7fc fd68 	bl	80082a0 <EMBENET_NODE_GetGroupCount>
 800b7d0:	2814      	cmp	r0, #20
 800b7d2:	bf28      	it	cs
 800b7d4:	2014      	movcs	r0, #20
 800b7d6:	4681      	mov	r9, r0
 800b7d8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
 800b7dc:	2500      	movs	r5, #0
 800b7de:	454d      	cmp	r5, r9
 800b7e0:	d119      	bne.n	800b816 <sendStatusConfirmationIndication+0x146>
 800b7e2:	3511      	adds	r5, #17
 800b7e4:	4640      	mov	r0, r8
 800b7e6:	006d      	lsls	r5, r5, #1
 800b7e8:	9500      	str	r5, [sp, #0]
 800b7ea:	ab09      	add	r3, sp, #36	; 0x24
 800b7ec:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	f7fc fa21 	bl	8007c38 <EMBENET_UDP_Send>
 800b7f6:	4b12      	ldr	r3, [pc, #72]	; (800b840 <sendStatusConfirmationIndication+0x170>)
 800b7f8:	b9b0      	cbnz	r0, 800b828 <sendStatusConfirmationIndication+0x158>
 800b7fa:	2205      	movs	r2, #5
 800b7fc:	2e21      	cmp	r6, #33	; 0x21
 800b7fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b802:	bf0c      	ite	eq
 800b804:	4a0f      	ldreq	r2, [pc, #60]	; (800b844 <sendStatusConfirmationIndication+0x174>)
 800b806:	4a10      	ldrne	r2, [pc, #64]	; (800b848 <sendStatusConfirmationIndication+0x178>)
 800b808:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b80c:	f001 ff0e 	bl	800d62c <LOGGER_PrintLine>
 800b810:	b01c      	add	sp, #112	; 0x70
 800b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b816:	4628      	mov	r0, r5
 800b818:	f7fc fd44 	bl	80082a4 <EMBENET_NODE_GetGroupByIndex>
 800b81c:	f7ff ff48 	bl	800b6b0 <ENDIANNESS_hton16>
 800b820:	3501      	adds	r5, #1
 800b822:	f82a 0f02 	strh.w	r0, [sl, #2]!
 800b826:	e7da      	b.n	800b7de <sendStatusConfirmationIndication+0x10e>
 800b828:	2203      	movs	r2, #3
 800b82a:	2e21      	cmp	r6, #33	; 0x21
 800b82c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b830:	bf0c      	ite	eq
 800b832:	4a06      	ldreq	r2, [pc, #24]	; (800b84c <sendStatusConfirmationIndication+0x17c>)
 800b834:	4a06      	ldrne	r2, [pc, #24]	; (800b850 <sendStatusConfirmationIndication+0x180>)
 800b836:	e7e7      	b.n	800b808 <sendStatusConfirmationIndication+0x138>
 800b838:	0801b475 	.word	0x0801b475
 800b83c:	0801b4d2 	.word	0x0801b4d2
 800b840:	0801b4df 	.word	0x0801b4df
 800b844:	0801b4e4 	.word	0x0801b4e4
 800b848:	0801b502 	.word	0x0801b502
 800b84c:	0801b51e 	.word	0x0801b51e
 800b850:	0801b546 	.word	0x0801b546

0800b854 <enms_strlen_s>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	460c      	mov	r4, r1
 800b858:	4605      	mov	r5, r0
 800b85a:	b138      	cbz	r0, 800b86c <enms_strlen_s+0x18>
 800b85c:	460a      	mov	r2, r1
 800b85e:	2100      	movs	r1, #0
 800b860:	f7f4 fc9e 	bl	80001a0 <memchr>
 800b864:	b100      	cbz	r0, 800b868 <enms_strlen_s+0x14>
 800b866:	1b44      	subs	r4, r0, r5
 800b868:	4620      	mov	r0, r4
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	4604      	mov	r4, r0
 800b86e:	e7fb      	b.n	800b868 <enms_strlen_s+0x14>

0800b870 <sendCells>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	460f      	mov	r7, r1
 800b876:	b09d      	sub	sp, #116	; 0x74
 800b878:	4615      	mov	r5, r2
 800b87a:	4606      	mov	r6, r0
 800b87c:	b100      	cbz	r0, 800b880 <sendCells+0x10>
 800b87e:	b929      	cbnz	r1, 800b88c <sendCells+0x1c>
 800b880:	4945      	ldr	r1, [pc, #276]	; (800b998 <sendCells+0x128>)
 800b882:	4846      	ldr	r0, [pc, #280]	; (800b99c <sendCells+0x12c>)
 800b884:	f240 1205 	movw	r2, #261	; 0x105
 800b888:	f7f5 fe82 	bl	8001590 <EXPECT_OnAbortHandler>
 800b88c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800b890:	f00c fa0a 	bl	8017ca8 <EMBENET_NODE_DIAG_GetCellsCount>
 800b894:	4b42      	ldr	r3, [pc, #264]	; (800b9a0 <sendCells+0x130>)
 800b896:	4343      	muls	r3, r0
 800b898:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
 800b89c:	f04f 0305 	mov.w	r3, #5
 800b8a0:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8a4:	bf88      	it	hi
 800b8a6:	3301      	addhi	r3, #1
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	f04f 0800 	mov.w	r8, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800b8b4:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
 800b8b8:	f04f 0a00 	mov.w	sl, #0
 800b8bc:	45a0      	cmp	r8, r4
 800b8be:	d102      	bne.n	800b8c6 <sendCells+0x56>
 800b8c0:	b01d      	add	sp, #116	; 0x74
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	4641      	mov	r1, r8
 800b8c8:	a806      	add	r0, sp, #24
 800b8ca:	f00c f9ef 	bl	8017cac <EMBENET_NODE_DIAG_GetCellInfo>
 800b8ce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800b8d2:	f108 0801 	add.w	r8, r8, #1
 800b8d6:	2900      	cmp	r1, #0
 800b8d8:	d0f0      	beq.n	800b8bc <sendCells+0x4c>
 800b8da:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d0ec      	beq.n	800b8bc <sendCells+0x4c>
 800b8e2:	ab1c      	add	r3, sp, #112	; 0x70
 800b8e4:	200d      	movs	r0, #13
 800b8e6:	fb00 3b0a 	mla	fp, r0, sl, r3
 800b8ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800b8ee:	f80b 2c41 	strb.w	r2, [fp, #-65]
 800b8f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8f6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800b8fa:	f80b 2c3d 	strb.w	r2, [fp, #-61]
 800b8fe:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800b902:	f80b 2c3e 	strb.w	r2, [fp, #-62]
 800b906:	f10d 0910 	add.w	r9, sp, #16
 800b90a:	2208      	movs	r2, #8
 800b90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b910:	eb0d 0102 	add.w	r1, sp, r2
 800b914:	4648      	mov	r0, r9
 800b916:	f7ff fec1 	bl	800b69c <c5868198428dfaffddb0900c3d01452778b19d11>
 800b91a:	9a04      	ldr	r2, [sp, #16]
 800b91c:	f84b 2c3c 	str.w	r2, [fp, #-60]
 800b920:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800b924:	9a05      	ldr	r2, [sp, #20]
 800b926:	f84b 2c38 	str.w	r2, [fp, #-56]
 800b92a:	f7ff fec1 	bl	800b6b0 <ENDIANNESS_hton16>
 800b92e:	f10a 0a01 	add.w	sl, sl, #1
 800b932:	f1ba 0f05 	cmp.w	sl, #5
 800b936:	f82b 0c40 	strh.w	r0, [fp, #-64]
 800b93a:	d001      	beq.n	800b940 <sendCells+0xd0>
 800b93c:	4544      	cmp	r4, r8
 800b93e:	d1bd      	bne.n	800b8bc <sendCells+0x4c>
 800b940:	230d      	movs	r3, #13
 800b942:	fb03 f30a 	mul.w	r3, r3, sl
 800b946:	4630      	mov	r0, r6
 800b948:	3303      	adds	r3, #3
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800b950:	ab0b      	add	r3, sp, #44	; 0x2c
 800b952:	4639      	mov	r1, r7
 800b954:	f7fc f970 	bl	8007c38 <EMBENET_UDP_Send>
 800b958:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <sendCells+0x134>)
 800b95a:	b988      	cbnz	r0, 800b980 <sendCells+0x110>
 800b95c:	2205      	movs	r2, #5
 800b95e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b962:	2d31      	cmp	r5, #49	; 0x31
 800b964:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b968:	bf0c      	ite	eq
 800b96a:	4a0f      	ldreq	r2, [pc, #60]	; (800b9a8 <sendCells+0x138>)
 800b96c:	4a0f      	ldrne	r2, [pc, #60]	; (800b9ac <sendCells+0x13c>)
 800b96e:	4653      	mov	r3, sl
 800b970:	f001 fe5c 	bl	800d62c <LOGGER_PrintLine>
 800b974:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800b978:	3301      	adds	r3, #1
 800b97a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800b97e:	e79b      	b.n	800b8b8 <sendCells+0x48>
 800b980:	2203      	movs	r2, #3
 800b982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b986:	2d31      	cmp	r5, #49	; 0x31
 800b988:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b98c:	bf0c      	ite	eq
 800b98e:	4a08      	ldreq	r2, [pc, #32]	; (800b9b0 <sendCells+0x140>)
 800b990:	4a08      	ldrne	r2, [pc, #32]	; (800b9b4 <sendCells+0x144>)
 800b992:	f001 fe4b 	bl	800d62c <LOGGER_PrintLine>
 800b996:	e7ed      	b.n	800b974 <sendCells+0x104>
 800b998:	0801b475 	.word	0x0801b475
 800b99c:	0801b4d2 	.word	0x0801b4d2
 800b9a0:	cccccccd 	.word	0xcccccccd
 800b9a4:	0801b4df 	.word	0x0801b4df
 800b9a8:	0801b56c 	.word	0x0801b56c
 800b9ac:	0801b597 	.word	0x0801b597
 800b9b0:	0801b5c0 	.word	0x0801b5c0
 800b9b4:	0801b5e7 	.word	0x0801b5e7

0800b9b8 <sendNeighborhood>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	b0a1      	sub	sp, #132	; 0x84
 800b9be:	4690      	mov	r8, r2
 800b9c0:	9102      	str	r1, [sp, #8]
 800b9c2:	4681      	mov	r9, r0
 800b9c4:	b100      	cbz	r0, 800b9c8 <sendNeighborhood+0x10>
 800b9c6:	b929      	cbnz	r1, 800b9d4 <sendNeighborhood+0x1c>
 800b9c8:	493c      	ldr	r1, [pc, #240]	; (800babc <sendNeighborhood+0x104>)
 800b9ca:	483d      	ldr	r0, [pc, #244]	; (800bac0 <sendNeighborhood+0x108>)
 800b9cc:	f44f 729c 	mov.w	r2, #312	; 0x138
 800b9d0:	f7f5 fdde 	bl	8001590 <EXPECT_OnAbortHandler>
 800b9d4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800b9d8:	f00c f953 	bl	8017c82 <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>
 800b9dc:	2307      	movs	r3, #7
 800b9de:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9e2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b9e6:	4290      	cmp	r0, r2
 800b9e8:	bf18      	it	ne
 800b9ea:	3301      	addne	r3, #1
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2700      	movs	r7, #0
 800b9f0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800bac4 <sendNeighborhood+0x10c>
 800b9f4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	463d      	mov	r5, r7
 800b9fc:	f04f 0b0a 	mov.w	fp, #10
 800ba00:	42b7      	cmp	r7, r6
 800ba02:	d102      	bne.n	800ba0a <sendNeighborhood+0x52>
 800ba04:	b021      	add	sp, #132	; 0x84
 800ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	a808      	add	r0, sp, #32
 800ba0e:	f00c f93c 	bl	8017c8a <EMBENET_NODE_DIAG_GetNeighborInfo>
 800ba12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba16:	ea50 0301 	orrs.w	r3, r0, r1
 800ba1a:	f107 0701 	add.w	r7, r7, #1
 800ba1e:	d0ef      	beq.n	800ba00 <sendNeighborhood+0x48>
 800ba20:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800ba24:	9105      	str	r1, [sp, #20]
 800ba26:	ab20      	add	r3, sp, #128	; 0x80
 800ba28:	fb0b 3305 	mla	r3, fp, r5, r3
 800ba2c:	0112      	lsls	r2, r2, #4
 800ba2e:	ac06      	add	r4, sp, #24
 800ba30:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800ba34:	f803 2c49 	strb.w	r2, [r3, #-73]
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7ff fe2d 	bl	800b69c <c5868198428dfaffddb0900c3d01452778b19d11>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	9a06      	ldr	r2, [sp, #24]
 800ba46:	f843 2c48 	str.w	r2, [r3, #-72]
 800ba4a:	3501      	adds	r5, #1
 800ba4c:	9a07      	ldr	r2, [sp, #28]
 800ba4e:	f843 2c44 	str.w	r2, [r3, #-68]
 800ba52:	2d07      	cmp	r5, #7
 800ba54:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800ba58:	f803 2c40 	strb.w	r2, [r3, #-64]
 800ba5c:	d001      	beq.n	800ba62 <sendNeighborhood+0xaa>
 800ba5e:	42be      	cmp	r6, r7
 800ba60:	d1ce      	bne.n	800ba00 <sendNeighborhood+0x48>
 800ba62:	fb0b f305 	mul.w	r3, fp, r5
 800ba66:	3303      	adds	r3, #3
 800ba68:	4648      	mov	r0, r9
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800ba70:	9902      	ldr	r1, [sp, #8]
 800ba72:	ab0d      	add	r3, sp, #52	; 0x34
 800ba74:	f7fc f8e0 	bl	8007c38 <EMBENET_UDP_Send>
 800ba78:	b998      	cbnz	r0, 800baa2 <sendNeighborhood+0xea>
 800ba7a:	2305      	movs	r3, #5
 800ba7c:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800ba80:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 800ba84:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ba88:	bf0c      	ite	eq
 800ba8a:	4a0f      	ldreq	r2, [pc, #60]	; (800bac8 <sendNeighborhood+0x110>)
 800ba8c:	4a0f      	ldrne	r2, [pc, #60]	; (800bacc <sendNeighborhood+0x114>)
 800ba8e:	462b      	mov	r3, r5
 800ba90:	f001 fdcc 	bl	800d62c <LOGGER_PrintLine>
 800ba94:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800ba98:	3301      	adds	r3, #1
 800ba9a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800ba9e:	2500      	movs	r5, #0
 800baa0:	e7ae      	b.n	800ba00 <sendNeighborhood+0x48>
 800baa2:	2303      	movs	r3, #3
 800baa4:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800baa8:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 800baac:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bab0:	bf0c      	ite	eq
 800bab2:	4a07      	ldreq	r2, [pc, #28]	; (800bad0 <sendNeighborhood+0x118>)
 800bab4:	4a07      	ldrne	r2, [pc, #28]	; (800bad4 <sendNeighborhood+0x11c>)
 800bab6:	f001 fdb9 	bl	800d62c <LOGGER_PrintLine>
 800baba:	e7eb      	b.n	800ba94 <sendNeighborhood+0xdc>
 800babc:	0801b475 	.word	0x0801b475
 800bac0:	0801b4d2 	.word	0x0801b4d2
 800bac4:	0801b4df 	.word	0x0801b4df
 800bac8:	0801b60c 	.word	0x0801b60c
 800bacc:	0801b642 	.word	0x0801b642
 800bad0:	0801b676 	.word	0x0801b676
 800bad4:	0801b6a4 	.word	0x0801b6a4

0800bad8 <enmsTask>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	b093      	sub	sp, #76	; 0x4c
 800bade:	4615      	mov	r5, r2
 800bae0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bae2:	f512 727a 	adds.w	r2, r2, #1000	; 0x3e8
 800bae6:	461e      	mov	r6, r3
 800bae8:	f143 0300 	adc.w	r3, r3, #0
 800baec:	f7fc fa8a 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800baf0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800baf4:	42aa      	cmp	r2, r5
 800baf6:	41b3      	sbcs	r3, r6
 800baf8:	d241      	bcs.n	800bb7e <enmsTask+0xa6>
 800bafa:	2302      	movs	r3, #2
 800bafc:	f88d 3010 	strb.w	r3, [sp, #16]
 800bb00:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bb04:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800bb08:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
 800bb0c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800bb10:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800bb14:	f7ff fdcc 	bl	800b6b0 <ENDIANNESS_hton16>
 800bb18:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800bb1c:	f8ad 0023 	strh.w	r0, [sp, #35]	; 0x23
 800bb20:	f10d 0211 	add.w	r2, sp, #17
 800bb24:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800bb28:	f853 0b04 	ldr.w	r0, [r3], #4
 800bb2c:	f842 0b04 	str.w	r0, [r2], #4
 800bb30:	428b      	cmp	r3, r1
 800bb32:	d1f9      	bne.n	800bb28 <enmsTask+0x50>
 800bb34:	2315      	movs	r3, #21
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bb3a:	ab04      	add	r3, sp, #16
 800bb3c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bb40:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800bb44:	f7fc f878 	bl	8007c38 <EMBENET_UDP_Send>
 800bb48:	4a70      	ldr	r2, [pc, #448]	; (800bd0c <enmsTask+0x234>)
 800bb4a:	ab02      	add	r3, sp, #8
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d14f      	bne.n	800bbf0 <enmsTask+0x118>
 800bb50:	2105      	movs	r1, #5
 800bb52:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bb56:	4a6e      	ldr	r2, [pc, #440]	; (800bd10 <enmsTask+0x238>)
 800bb58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb5c:	f001 fd66 	bl	800d62c <LOGGER_PrintLine>
 800bb60:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800bb62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb66:	4358      	muls	r0, r3
 800bb68:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800bb6c:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800bb70:	f7fc fb90 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800bb74:	1940      	adds	r0, r0, r5
 800bb76:	f146 0300 	adc.w	r3, r6, #0
 800bb7a:	e9c4 0300 	strd	r0, r3, [r4]
 800bb7e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800bb82:	42aa      	cmp	r2, r5
 800bb84:	41b3      	sbcs	r3, r6
 800bb86:	d26e      	bcs.n	800bc66 <enmsTask+0x18e>
 800bb88:	2312      	movs	r3, #18
 800bb8a:	f88d 3010 	strb.w	r3, [sp, #16]
 800bb8e:	f04f 0800 	mov.w	r8, #0
 800bb92:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 800bb96:	f8df a174 	ldr.w	sl, [pc, #372]	; 800bd0c <enmsTask+0x234>
 800bb9a:	f88d 3011 	strb.w	r3, [sp, #17]
 800bb9e:	f104 0b3c 	add.w	fp, r4, #60	; 0x3c
 800bba2:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800bba6:	46c1      	mov	r9, r8
 800bba8:	783b      	ldrb	r3, [r7, #0]
 800bbaa:	b1d3      	cbz	r3, 800bbe2 <enmsTask+0x10a>
 800bbac:	2312      	movs	r3, #18
 800bbae:	fb03 f309 	mul.w	r3, r3, r9
 800bbb2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800bbb6:	446a      	add	r2, sp
 800bbb8:	7c39      	ldrb	r1, [r7, #16]
 800bbba:	f802 1c25 	strb.w	r1, [r2, #-37]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	f802 8c36 	strb.w	r8, [r2, #-54]
 800bbc4:	3b35      	subs	r3, #53	; 0x35
 800bbc6:	463a      	mov	r2, r7
 800bbc8:	f107 0110 	add.w	r1, r7, #16
 800bbcc:	f852 0b04 	ldr.w	r0, [r2], #4
 800bbd0:	f843 0b04 	str.w	r0, [r3], #4
 800bbd4:	428a      	cmp	r2, r1
 800bbd6:	d1f9      	bne.n	800bbcc <enmsTask+0xf4>
 800bbd8:	f109 0901 	add.w	r9, r9, #1
 800bbdc:	f1b9 0f03 	cmp.w	r9, #3
 800bbe0:	d00b      	beq.n	800bbfa <enmsTask+0x122>
 800bbe2:	f1b8 0f09 	cmp.w	r8, #9
 800bbe6:	d008      	beq.n	800bbfa <enmsTask+0x122>
 800bbe8:	f108 0801 	add.w	r8, r8, #1
 800bbec:	3711      	adds	r7, #17
 800bbee:	e7db      	b.n	800bba8 <enmsTask+0xd0>
 800bbf0:	2103      	movs	r1, #3
 800bbf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bbf6:	4a47      	ldr	r2, [pc, #284]	; (800bd14 <enmsTask+0x23c>)
 800bbf8:	e7ae      	b.n	800bb58 <enmsTask+0x80>
 800bbfa:	2312      	movs	r3, #18
 800bbfc:	fb03 f309 	mul.w	r3, r3, r9
 800bc00:	4620      	mov	r0, r4
 800bc02:	3302      	adds	r3, #2
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	4659      	mov	r1, fp
 800bc08:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800bc0c:	ab04      	add	r3, sp, #16
 800bc0e:	f7fc f813 	bl	8007c38 <EMBENET_UDP_Send>
 800bc12:	a902      	add	r1, sp, #8
 800bc14:	b980      	cbnz	r0, 800bc38 <enmsTask+0x160>
 800bc16:	2305      	movs	r3, #5
 800bc18:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800bc1c:	4a3e      	ldr	r2, [pc, #248]	; (800bd18 <enmsTask+0x240>)
 800bc1e:	c903      	ldmia	r1, {r0, r1}
 800bc20:	464b      	mov	r3, r9
 800bc22:	f001 fd03 	bl	800d62c <LOGGER_PrintLine>
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	f1b8 0f0a 	cmp.w	r8, #10
 800bc2e:	d00b      	beq.n	800bc48 <enmsTask+0x170>
 800bc30:	3711      	adds	r7, #17
 800bc32:	f04f 0900 	mov.w	r9, #0
 800bc36:	e7b7      	b.n	800bba8 <enmsTask+0xd0>
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800bc3e:	4a37      	ldr	r2, [pc, #220]	; (800bd1c <enmsTask+0x244>)
 800bc40:	c903      	ldmia	r1, {r0, r1}
 800bc42:	f001 fcf3 	bl	800d62c <LOGGER_PrintLine>
 800bc46:	e7ee      	b.n	800bc26 <enmsTask+0x14e>
 800bc48:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bc4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc4e:	4358      	muls	r0, r3
 800bc50:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800bc54:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800bc58:	f7fc fb1c 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800bc5c:	1940      	adds	r0, r0, r5
 800bc5e:	f146 0300 	adc.w	r3, r6, #0
 800bc62:	e9c4 0304 	strd	r0, r3, [r4, #16]
 800bc66:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800bc6a:	42aa      	cmp	r2, r5
 800bc6c:	41b3      	sbcs	r3, r6
 800bc6e:	d214      	bcs.n	800bc9a <enmsTask+0x1c2>
 800bc70:	2222      	movs	r2, #34	; 0x22
 800bc72:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7ff fd2a 	bl	800b6d0 <sendStatusConfirmationIndication>
 800bc7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bc7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc82:	4358      	muls	r0, r3
 800bc84:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800bc88:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800bc8c:	f7fc fb02 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800bc90:	1940      	adds	r0, r0, r5
 800bc92:	f146 0300 	adc.w	r3, r6, #0
 800bc96:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800bc9a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800bc9e:	42aa      	cmp	r2, r5
 800bca0:	41b3      	sbcs	r3, r6
 800bca2:	d215      	bcs.n	800bcd0 <enmsTask+0x1f8>
 800bca4:	2242      	movs	r2, #66	; 0x42
 800bca6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7ff fe84 	bl	800b9b8 <sendNeighborhood>
 800bcb0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800bcb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcb8:	4358      	muls	r0, r3
 800bcba:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800bcbe:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800bcc2:	f7fc fae7 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800bcc6:	1940      	adds	r0, r0, r5
 800bcc8:	f146 0300 	adc.w	r3, r6, #0
 800bccc:	e9c4 0306 	strd	r0, r3, [r4, #24]
 800bcd0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800bcd4:	42aa      	cmp	r2, r5
 800bcd6:	41b3      	sbcs	r3, r6
 800bcd8:	d215      	bcs.n	800bd06 <enmsTask+0x22e>
 800bcda:	2232      	movs	r2, #50	; 0x32
 800bcdc:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800bce0:	4620      	mov	r0, r4
 800bce2:	f7ff fdc5 	bl	800b870 <sendCells>
 800bce6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800bcea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcee:	4358      	muls	r0, r3
 800bcf0:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800bcf4:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800bcf8:	f7fc facc 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800bcfc:	1940      	adds	r0, r0, r5
 800bcfe:	f146 0600 	adc.w	r6, r6, #0
 800bd02:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800bd06:	b013      	add	sp, #76	; 0x4c
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	0801b4df 	.word	0x0801b4df
 800bd10:	0801b6d0 	.word	0x0801b6d0
 800bd14:	0801b6f0 	.word	0x0801b6f0
 800bd18:	0801b71a 	.word	0x0801b71a
 800bd1c:	0801b74d 	.word	0x0801b74d

0800bd20 <updRxHandler>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	460d      	mov	r5, r1
 800bd26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd28:	b928      	cbnz	r0, 800bd36 <updRxHandler+0x16>
 800bd2a:	495e      	ldr	r1, [pc, #376]	; (800bea4 <updRxHandler+0x184>)
 800bd2c:	485e      	ldr	r0, [pc, #376]	; (800bea8 <updRxHandler+0x188>)
 800bd2e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bd32:	f7f5 fc2d 	bl	8001590 <EXPECT_OnAbortHandler>
 800bd36:	68c4      	ldr	r4, [r0, #12]
 800bd38:	b924      	cbnz	r4, 800bd44 <updRxHandler+0x24>
 800bd3a:	495a      	ldr	r1, [pc, #360]	; (800bea4 <updRxHandler+0x184>)
 800bd3c:	485b      	ldr	r0, [pc, #364]	; (800beac <updRxHandler+0x18c>)
 800bd3e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bd42:	e7f6      	b.n	800bd32 <updRxHandler+0x12>
 800bd44:	b923      	cbnz	r3, 800bd50 <updRxHandler+0x30>
 800bd46:	4957      	ldr	r1, [pc, #348]	; (800bea4 <updRxHandler+0x184>)
 800bd48:	4859      	ldr	r0, [pc, #356]	; (800beb0 <updRxHandler+0x190>)
 800bd4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bd4e:	e7f0      	b.n	800bd32 <updRxHandler+0x12>
 800bd50:	b922      	cbnz	r2, 800bd5c <updRxHandler+0x3c>
 800bd52:	4954      	ldr	r1, [pc, #336]	; (800bea4 <updRxHandler+0x184>)
 800bd54:	4857      	ldr	r0, [pc, #348]	; (800beb4 <updRxHandler+0x194>)
 800bd56:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800bd5a:	e7ea      	b.n	800bd32 <updRxHandler+0x12>
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	f000 8091 	beq.w	800be86 <updRxHandler+0x166>
 800bd64:	d80e      	bhi.n	800bd84 <updRxHandler+0x64>
 800bd66:	b1cb      	cbz	r3, 800bd9c <updRxHandler+0x7c>
 800bd68:	2b10      	cmp	r3, #16
 800bd6a:	d053      	beq.n	800be14 <updRxHandler+0xf4>
 800bd6c:	2104      	movs	r1, #4
 800bd6e:	9104      	str	r1, [sp, #16]
 800bd70:	920e      	str	r2, [sp, #56]	; 0x38
 800bd72:	4951      	ldr	r1, [pc, #324]	; (800beb8 <updRxHandler+0x198>)
 800bd74:	4a51      	ldr	r2, [pc, #324]	; (800bebc <updRxHandler+0x19c>)
 800bd76:	9105      	str	r1, [sp, #20]
 800bd78:	2004      	movs	r0, #4
 800bd7a:	b00a      	add	sp, #40	; 0x28
 800bd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd80:	f001 bc54 	b.w	800d62c <LOGGER_PrintLine>
 800bd84:	2b30      	cmp	r3, #48	; 0x30
 800bd86:	f000 8085 	beq.w	800be94 <updRxHandler+0x174>
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d1ee      	bne.n	800bd6c <updRxHandler+0x4c>
 800bd8e:	2241      	movs	r2, #65	; 0x41
 800bd90:	4620      	mov	r0, r4
 800bd92:	b00a      	add	sp, #40	; 0x28
 800bd94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd98:	f7ff be0e 	b.w	800b9b8 <sendNeighborhood>
 800bd9c:	b919      	cbnz	r1, 800bda6 <updRxHandler+0x86>
 800bd9e:	2264      	movs	r2, #100	; 0x64
 800bda0:	4940      	ldr	r1, [pc, #256]	; (800bea4 <updRxHandler+0x184>)
 800bda2:	4847      	ldr	r0, [pc, #284]	; (800bec0 <updRxHandler+0x1a0>)
 800bda4:	e7c5      	b.n	800bd32 <updRxHandler+0x12>
 800bda6:	2301      	movs	r3, #1
 800bda8:	f88d 3010 	strb.w	r3, [sp, #16]
 800bdac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bdb0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800bdb4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800bdb8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800bdbc:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
 800bdc0:	f7ff fc76 	bl	800b6b0 <ENDIANNESS_hton16>
 800bdc4:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800bdc8:	f8ad 0023 	strh.w	r0, [sp, #35]	; 0x23
 800bdcc:	f10d 0211 	add.w	r2, sp, #17
 800bdd0:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800bdd4:	f853 0b04 	ldr.w	r0, [r3], #4
 800bdd8:	f842 0b04 	str.w	r0, [r2], #4
 800bddc:	428b      	cmp	r3, r1
 800bdde:	d1f9      	bne.n	800bdd4 <updRxHandler+0xb4>
 800bde0:	4620      	mov	r0, r4
 800bde2:	2315      	movs	r3, #21
 800bde4:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	4629      	mov	r1, r5
 800bdec:	ab04      	add	r3, sp, #16
 800bdee:	f7fb ff23 	bl	8007c38 <EMBENET_UDP_Send>
 800bdf2:	4a31      	ldr	r2, [pc, #196]	; (800beb8 <updRxHandler+0x198>)
 800bdf4:	ab02      	add	r3, sp, #8
 800bdf6:	b940      	cbnz	r0, 800be0a <updRxHandler+0xea>
 800bdf8:	2105      	movs	r1, #5
 800bdfa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bdfe:	4a31      	ldr	r2, [pc, #196]	; (800bec4 <updRxHandler+0x1a4>)
 800be00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be04:	f001 fc12 	bl	800d62c <LOGGER_PrintLine>
 800be08:	e035      	b.n	800be76 <updRxHandler+0x156>
 800be0a:	2103      	movs	r1, #3
 800be0c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800be10:	4a2d      	ldr	r2, [pc, #180]	; (800bec8 <updRxHandler+0x1a8>)
 800be12:	e7f5      	b.n	800be00 <updRxHandler+0xe0>
 800be14:	b909      	cbnz	r1, 800be1a <updRxHandler+0xfa>
 800be16:	2294      	movs	r2, #148	; 0x94
 800be18:	e7c2      	b.n	800bda0 <updRxHandler+0x80>
 800be1a:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 800be1e:	4619      	mov	r1, r3
 800be20:	4630      	mov	r0, r6
 800be22:	f7ff fd17 	bl	800b854 <enms_strlen_s>
 800be26:	b330      	cbz	r0, 800be76 <updRxHandler+0x156>
 800be28:	2311      	movs	r3, #17
 800be2a:	f88d 3010 	strb.w	r3, [sp, #16]
 800be2e:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 800be32:	f88d 3011 	strb.w	r3, [sp, #17]
 800be36:	2300      	movs	r3, #0
 800be38:	f88d 3012 	strb.w	r3, [sp, #18]
 800be3c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800be40:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800be44:	4631      	mov	r1, r6
 800be46:	f10d 0013 	add.w	r0, sp, #19
 800be4a:	f00d f944 	bl	80190d6 <strcpy>
 800be4e:	4620      	mov	r0, r4
 800be50:	2314      	movs	r3, #20
 800be52:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	4629      	mov	r1, r5
 800be5a:	ab04      	add	r3, sp, #16
 800be5c:	f7fb feec 	bl	8007c38 <EMBENET_UDP_Send>
 800be60:	4a15      	ldr	r2, [pc, #84]	; (800beb8 <updRxHandler+0x198>)
 800be62:	4603      	mov	r3, r0
 800be64:	a902      	add	r1, sp, #8
 800be66:	b940      	cbnz	r0, 800be7a <updRxHandler+0x15a>
 800be68:	2005      	movs	r0, #5
 800be6a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800be6e:	4a17      	ldr	r2, [pc, #92]	; (800becc <updRxHandler+0x1ac>)
 800be70:	c903      	ldmia	r1, {r0, r1}
 800be72:	f001 fbdb 	bl	800d62c <LOGGER_PrintLine>
 800be76:	b00a      	add	sp, #40	; 0x28
 800be78:	bd70      	pop	{r4, r5, r6, pc}
 800be7a:	2303      	movs	r3, #3
 800be7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800be80:	4a13      	ldr	r2, [pc, #76]	; (800bed0 <updRxHandler+0x1b0>)
 800be82:	c903      	ldmia	r1, {r0, r1}
 800be84:	e7be      	b.n	800be04 <updRxHandler+0xe4>
 800be86:	2221      	movs	r2, #33	; 0x21
 800be88:	4620      	mov	r0, r4
 800be8a:	b00a      	add	sp, #40	; 0x28
 800be8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be90:	f7ff bc1e 	b.w	800b6d0 <sendStatusConfirmationIndication>
 800be94:	2231      	movs	r2, #49	; 0x31
 800be96:	4620      	mov	r0, r4
 800be98:	b00a      	add	sp, #40	; 0x28
 800be9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be9e:	f7ff bce7 	b.w	800b870 <sendCells>
 800bea2:	bf00      	nop
 800bea4:	0801b475 	.word	0x0801b475
 800bea8:	0801b779 	.word	0x0801b779
 800beac:	0801b791 	.word	0x0801b791
 800beb0:	0801b7b6 	.word	0x0801b7b6
 800beb4:	0801b7cc 	.word	0x0801b7cc
 800beb8:	0801b4df 	.word	0x0801b4df
 800bebc:	0801b897 	.word	0x0801b897
 800bec0:	0801b4d2 	.word	0x0801b4d2
 800bec4:	0801b7e3 	.word	0x0801b7e3
 800bec8:	0801b805 	.word	0x0801b805
 800becc:	0801b831 	.word	0x0801b831
 800bed0:	0801b869 	.word	0x0801b869

0800bed4 <ENMS_NODE_RegisterService>:
 800bed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed8:	460c      	mov	r4, r1
 800beda:	4691      	mov	r9, r2
 800bedc:	4605      	mov	r5, r0
 800bede:	2800      	cmp	r0, #0
 800bee0:	d05f      	beq.n	800bfa2 <ENMS_NODE_RegisterService+0xce>
 800bee2:	2900      	cmp	r1, #0
 800bee4:	d05d      	beq.n	800bfa2 <ENMS_NODE_RegisterService+0xce>
 800bee6:	2110      	movs	r1, #16
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff fcb3 	bl	800b854 <enms_strlen_s>
 800beee:	1e43      	subs	r3, r0, #1
 800bef0:	2b0f      	cmp	r3, #15
 800bef2:	4680      	mov	r8, r0
 800bef4:	d855      	bhi.n	800bfa2 <ENMS_NODE_RegisterService+0xce>
 800bef6:	f105 0a8c 	add.w	sl, r5, #140	; 0x8c
 800befa:	4656      	mov	r6, sl
 800befc:	f505 779b 	add.w	r7, r5, #310	; 0x136
 800bf00:	2210      	movs	r2, #16
 800bf02:	4621      	mov	r1, r4
 800bf04:	4630      	mov	r0, r6
 800bf06:	f00d f843 	bl	8018f90 <strncmp>
 800bf0a:	b978      	cbnz	r0, 800bf2c <ENMS_NODE_RegisterService+0x58>
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	9302      	str	r3, [sp, #8]
 800bf10:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <ENMS_NODE_RegisterService+0xd4>)
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	e911 0003 	ldmdb	r1, {r0, r1}
 800bf1a:	4a24      	ldr	r2, [pc, #144]	; (800bfac <ENMS_NODE_RegisterService+0xd8>)
 800bf1c:	4623      	mov	r3, r4
 800bf1e:	f001 fb85 	bl	800d62c <LOGGER_PrintLine>
 800bf22:	2606      	movs	r6, #6
 800bf24:	4630      	mov	r0, r6
 800bf26:	b004      	add	sp, #16
 800bf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2c:	3611      	adds	r6, #17
 800bf2e:	42be      	cmp	r6, r7
 800bf30:	d1e6      	bne.n	800bf00 <ENMS_NODE_RegisterService+0x2c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	eb03 1703 	add.w	r7, r3, r3, lsl #4
 800bf38:	f81a 6007 	ldrb.w	r6, [sl, r7]
 800bf3c:	bb0e      	cbnz	r6, 800bf82 <ENMS_NODE_RegisterService+0xae>
 800bf3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bf42:	442b      	add	r3, r5
 800bf44:	4618      	mov	r0, r3
 800bf46:	2210      	movs	r2, #16
 800bf48:	4631      	mov	r1, r6
 800bf4a:	f00d f819 	bl	8018f80 <memset>
 800bf4e:	4642      	mov	r2, r8
 800bf50:	4621      	mov	r1, r4
 800bf52:	f00d f8c8 	bl	80190e6 <memcpy>
 800bf56:	442f      	add	r7, r5
 800bf58:	2305      	movs	r3, #5
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	4b12      	ldr	r3, [pc, #72]	; (800bfa8 <ENMS_NODE_RegisterService+0xd4>)
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	f887 909c 	strb.w	r9, [r7, #156]	; 0x9c
 800bf64:	a904      	add	r1, sp, #16
 800bf66:	f8cd 9000 	str.w	r9, [sp]
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	e911 0003 	ldmdb	r1, {r0, r1}
 800bf70:	4a0f      	ldr	r2, [pc, #60]	; (800bfb0 <ENMS_NODE_RegisterService+0xdc>)
 800bf72:	f001 fb5b 	bl	800d62c <LOGGER_PrintLine>
 800bf76:	f895 3136 	ldrb.w	r3, [r5, #310]	; 0x136
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	f885 3136 	strb.w	r3, [r5, #310]	; 0x136
 800bf80:	e7d0      	b.n	800bf24 <ENMS_NODE_RegisterService+0x50>
 800bf82:	3301      	adds	r3, #1
 800bf84:	2b0a      	cmp	r3, #10
 800bf86:	d1d5      	bne.n	800bf34 <ENMS_NODE_RegisterService+0x60>
 800bf88:	2303      	movs	r3, #3
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <ENMS_NODE_RegisterService+0xd4>)
 800bf8e:	9303      	str	r3, [sp, #12]
 800bf90:	a904      	add	r1, sp, #16
 800bf92:	e911 0003 	ldmdb	r1, {r0, r1}
 800bf96:	4a07      	ldr	r2, [pc, #28]	; (800bfb4 <ENMS_NODE_RegisterService+0xe0>)
 800bf98:	4623      	mov	r3, r4
 800bf9a:	f001 fb47 	bl	800d62c <LOGGER_PrintLine>
 800bf9e:	2605      	movs	r6, #5
 800bfa0:	e7c0      	b.n	800bf24 <ENMS_NODE_RegisterService+0x50>
 800bfa2:	2601      	movs	r6, #1
 800bfa4:	e7be      	b.n	800bf24 <ENMS_NODE_RegisterService+0x50>
 800bfa6:	bf00      	nop
 800bfa8:	0801b4df 	.word	0x0801b4df
 800bfac:	0801b8d2 	.word	0x0801b8d2
 800bfb0:	0801b8f2 	.word	0x0801b8f2
 800bfb4:	0801b91b 	.word	0x0801b91b

0800bfb8 <ENMS_NODE_Init>:
 800bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	460f      	mov	r7, r1
 800bfbe:	b08e      	sub	sp, #56	; 0x38
 800bfc0:	4615      	mov	r5, r2
 800bfc2:	461e      	mov	r6, r3
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f000 80ac 	beq.w	800c124 <ENMS_NODE_Init+0x16c>
 800bfcc:	2a00      	cmp	r2, #0
 800bfce:	f000 80a9 	beq.w	800c124 <ENMS_NODE_Init+0x16c>
 800bfd2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	f00c ffd2 	bl	8018f80 <memset>
 800bfdc:	462a      	mov	r2, r5
 800bfde:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800bfe2:	f105 0110 	add.w	r1, r5, #16
 800bfe6:	f852 0b04 	ldr.w	r0, [r2], #4
 800bfea:	f843 0b04 	str.w	r0, [r3], #4
 800bfee:	428a      	cmp	r2, r1
 800bff0:	d1f9      	bne.n	800bfe6 <ENMS_NODE_Init+0x2e>
 800bff2:	f7fc f951 	bl	8008298 <EMBENET_NODE_GetVersion>
 800bff6:	6620      	str	r0, [r4, #96]	; 0x60
 800bff8:	2e00      	cmp	r6, #0
 800bffa:	d056      	beq.n	800c0aa <ENMS_NODE_Init+0xf2>
 800bffc:	4633      	mov	r3, r6
 800bffe:	f104 0264 	add.w	r2, r4, #100	; 0x64
 800c002:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800c006:	f853 0b04 	ldr.w	r0, [r3], #4
 800c00a:	f842 0b04 	str.w	r0, [r2], #4
 800c00e:	428b      	cmp	r3, r1
 800c010:	d1f9      	bne.n	800c006 <ENMS_NODE_Init+0x4e>
 800c012:	2305      	movs	r3, #5
 800c014:	930c      	str	r3, [sp, #48]	; 0x30
 800c016:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c01a:	9308      	str	r3, [sp, #32]
 800c01c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c01e:	9307      	str	r3, [sp, #28]
 800c020:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800c024:	9306      	str	r3, [sp, #24]
 800c026:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c02a:	9305      	str	r3, [sp, #20]
 800c02c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c032:	9303      	str	r3, [sp, #12]
 800c034:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c036:	9302      	str	r3, [sp, #8]
 800c038:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c03e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800c128 <ENMS_NODE_Init+0x170>
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800c048:	ae0c      	add	r6, sp, #48	; 0x30
 800c04a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c04e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c050:	4a36      	ldr	r2, [pc, #216]	; (800c12c <ENMS_NODE_Init+0x174>)
 800c052:	f001 faeb 	bl	800d62c <LOGGER_PrintLine>
 800c056:	f24f 03b1 	movw	r3, #61617	; 0xf0b1
 800c05a:	2f00      	cmp	r7, #0
 800c05c:	bf08      	it	eq
 800c05e:	461f      	moveq	r7, r3
 800c060:	2302      	movs	r3, #2
 800c062:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800c066:	2200      	movs	r2, #0
 800c068:	4b31      	ldr	r3, [pc, #196]	; (800c130 <ENMS_NODE_Init+0x178>)
 800c06a:	6323      	str	r3, [r4, #48]	; 0x30
 800c06c:	8527      	strh	r7, [r4, #40]	; 0x28
 800c06e:	85a2      	strh	r2, [r4, #44]	; 0x2c
 800c070:	6364      	str	r4, [r4, #52]	; 0x34
 800c072:	4623      	mov	r3, r4
 800c074:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800c078:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800c07c:	3311      	adds	r3, #17
 800c07e:	428b      	cmp	r3, r1
 800c080:	d1fa      	bne.n	800c078 <ENMS_NODE_Init+0xc0>
 800c082:	f104 0728 	add.w	r7, r4, #40	; 0x28
 800c086:	4638      	mov	r0, r7
 800c088:	f7fb fdbe 	bl	8007c08 <EMBENET_UDP_RegisterSocket>
 800c08c:	4605      	mov	r5, r0
 800c08e:	b1f8      	cbz	r0, 800c0d0 <ENMS_NODE_Init+0x118>
 800c090:	2303      	movs	r3, #3
 800c092:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 800c096:	4a27      	ldr	r2, [pc, #156]	; (800c134 <ENMS_NODE_Init+0x17c>)
 800c098:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c09c:	f001 fac6 	bl	800d62c <LOGGER_PrintLine>
 800c0a0:	2502      	movs	r5, #2
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	b00e      	add	sp, #56	; 0x38
 800c0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0aa:	230a      	movs	r3, #10
 800c0ac:	6663      	str	r3, [r4, #100]	; 0x64
 800c0ae:	231e      	movs	r3, #30
 800c0b0:	66e3      	str	r3, [r4, #108]	; 0x6c
 800c0b2:	6763      	str	r3, [r4, #116]	; 0x74
 800c0b4:	233c      	movs	r3, #60	; 0x3c
 800c0b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800c0ba:	67e3      	str	r3, [r4, #124]	; 0x7c
 800c0bc:	66a3      	str	r3, [r4, #104]	; 0x68
 800c0be:	6723      	str	r3, [r4, #112]	; 0x70
 800c0c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800c0c4:	67a3      	str	r3, [r4, #120]	; 0x78
 800c0c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c0ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800c0ce:	e7a0      	b.n	800c012 <ENMS_NODE_Init+0x5a>
 800c0d0:	4819      	ldr	r0, [pc, #100]	; (800c138 <ENMS_NODE_Init+0x180>)
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	f7fb fe8e 	bl	8007df4 <EMBENET_NODE_TaskCreate>
 800c0d8:	64e0      	str	r0, [r4, #76]	; 0x4c
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d10b      	bne.n	800c0f6 <ENMS_NODE_Init+0x13e>
 800c0de:	2503      	movs	r5, #3
 800c0e0:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
 800c0e4:	4a15      	ldr	r2, [pc, #84]	; (800c13c <ENMS_NODE_Init+0x184>)
 800c0e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c0ea:	f001 fa9f 	bl	800d62c <LOGGER_PrintLine>
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f7fb fd96 	bl	8007c20 <EMBENET_UDP_UnregisterSocket>
 800c0f4:	e7d5      	b.n	800c0a2 <ENMS_NODE_Init+0xea>
 800c0f6:	4912      	ldr	r1, [pc, #72]	; (800c140 <ENMS_NODE_Init+0x188>)
 800c0f8:	462a      	mov	r2, r5
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7ff feea 	bl	800bed4 <ENMS_NODE_RegisterService>
 800c100:	b138      	cbz	r0, 800c112 <ENMS_NODE_Init+0x15a>
 800c102:	2303      	movs	r3, #3
 800c104:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 800c108:	4a0e      	ldr	r2, [pc, #56]	; (800c144 <ENMS_NODE_Init+0x18c>)
 800c10a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c10e:	f001 fa8d 	bl	800d62c <LOGGER_PrintLine>
 800c112:	2305      	movs	r3, #5
 800c114:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 800c118:	4a0b      	ldr	r2, [pc, #44]	; (800c148 <ENMS_NODE_Init+0x190>)
 800c11a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c11e:	f001 fa85 	bl	800d62c <LOGGER_PrintLine>
 800c122:	e7be      	b.n	800c0a2 <ENMS_NODE_Init+0xea>
 800c124:	2501      	movs	r5, #1
 800c126:	e7bc      	b.n	800c0a2 <ENMS_NODE_Init+0xea>
 800c128:	0801b4df 	.word	0x0801b4df
 800c12c:	0801b93a 	.word	0x0801b93a
 800c130:	0800bd21 	.word	0x0800bd21
 800c134:	0801b9ab 	.word	0x0801b9ab
 800c138:	0800bad9 	.word	0x0800bad9
 800c13c:	0801b9de 	.word	0x0801b9de
 800c140:	0801ba0b 	.word	0x0801ba0b
 800c144:	0801ba10 	.word	0x0801ba10
 800c148:	0801ba2c 	.word	0x0801ba2c

0800c14c <ENMS_NODE_SetServiceState>:
 800c14c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c150:	460d      	mov	r5, r1
 800c152:	4617      	mov	r7, r2
 800c154:	4606      	mov	r6, r0
 800c156:	b340      	cbz	r0, 800c1aa <ENMS_NODE_SetServiceState+0x5e>
 800c158:	b339      	cbz	r1, 800c1aa <ENMS_NODE_SetServiceState+0x5e>
 800c15a:	2111      	movs	r1, #17
 800c15c:	4628      	mov	r0, r5
 800c15e:	f7ff fb79 	bl	800b854 <enms_strlen_s>
 800c162:	3801      	subs	r0, #1
 800c164:	280f      	cmp	r0, #15
 800c166:	d820      	bhi.n	800c1aa <ENMS_NODE_SetServiceState+0x5e>
 800c168:	f106 088c 	add.w	r8, r6, #140	; 0x8c
 800c16c:	2400      	movs	r4, #0
 800c16e:	2210      	movs	r2, #16
 800c170:	4629      	mov	r1, r5
 800c172:	4640      	mov	r0, r8
 800c174:	f00c ff0c 	bl	8018f90 <strncmp>
 800c178:	b938      	cbnz	r0, 800c18a <ENMS_NODE_SetServiceState+0x3e>
 800c17a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800c17e:	4434      	add	r4, r6
 800c180:	f884 709c 	strb.w	r7, [r4, #156]	; 0x9c
 800c184:	b002      	add	sp, #8
 800c186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18a:	3401      	adds	r4, #1
 800c18c:	2c0a      	cmp	r4, #10
 800c18e:	f108 0811 	add.w	r8, r8, #17
 800c192:	d1ec      	bne.n	800c16e <ENMS_NODE_SetServiceState+0x22>
 800c194:	2303      	movs	r3, #3
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <ENMS_NODE_SetServiceState+0x64>)
 800c19a:	9301      	str	r3, [sp, #4]
 800c19c:	a902      	add	r1, sp, #8
 800c19e:	e911 0003 	ldmdb	r1, {r0, r1}
 800c1a2:	4a04      	ldr	r2, [pc, #16]	; (800c1b4 <ENMS_NODE_SetServiceState+0x68>)
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	f001 fa41 	bl	800d62c <LOGGER_PrintLine>
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	e7ea      	b.n	800c184 <ENMS_NODE_SetServiceState+0x38>
 800c1ae:	bf00      	nop
 800c1b0:	0801b4df 	.word	0x0801b4df
 800c1b4:	0801ba40 	.word	0x0801ba40

0800c1b8 <ENMS_NODE_Start>:
 800c1b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	4604      	mov	r4, r0
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	f000 8087 	beq.w	800c2d2 <ENMS_NODE_Start+0x11a>
 800c1c4:	303c      	adds	r0, #60	; 0x3c
 800c1c6:	f7fb fff9 	bl	80081bc <EMBENET_NODE_GetBorderRouterAddress>
 800c1ca:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800c2d8 <ENMS_NODE_Start+0x120>
 800c1ce:	4681      	mov	r9, r0
 800c1d0:	466f      	mov	r7, sp
 800c1d2:	b160      	cbz	r0, 800c1ee <ENMS_NODE_Start+0x36>
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e9cd 3800 	strd	r3, r8, [sp]
 800c1da:	4a40      	ldr	r2, [pc, #256]	; (800c2dc <ENMS_NODE_Start+0x124>)
 800c1dc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c1e0:	f001 fa24 	bl	800d62c <LOGGER_PrintLine>
 800c1e4:	2504      	movs	r5, #4
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	b002      	add	sp, #8
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	f7fb fd3b 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800c1f6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 800c1fa:	fb0a f000 	mul.w	r0, sl, r0
 800c1fe:	460e      	mov	r6, r1
 800c200:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800c204:	f7fc f846 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c208:	1940      	adds	r0, r0, r5
 800c20a:	f146 0300 	adc.w	r3, r6, #0
 800c20e:	e9c4 0300 	strd	r0, r3, [r4]
 800c212:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c214:	fb0a f000 	mul.w	r0, sl, r0
 800c218:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800c21c:	f7fc f83a 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c220:	1940      	adds	r0, r0, r5
 800c222:	f146 0300 	adc.w	r3, r6, #0
 800c226:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800c22a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c22c:	fb0a f000 	mul.w	r0, sl, r0
 800c230:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800c234:	f7fc f82e 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c238:	1940      	adds	r0, r0, r5
 800c23a:	f146 0300 	adc.w	r3, r6, #0
 800c23e:	e9c4 0304 	strd	r0, r3, [r4, #16]
 800c242:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c244:	fb0a f000 	mul.w	r0, sl, r0
 800c248:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800c24c:	f7fc f822 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c250:	1940      	adds	r0, r0, r5
 800c252:	f146 0300 	adc.w	r3, r6, #0
 800c256:	e9c4 0306 	strd	r0, r3, [r4, #24]
 800c25a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c25e:	fb0a f000 	mul.w	r0, sl, r0
 800c262:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800c266:	f7fc f815 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c26a:	1940      	adds	r0, r0, r5
 800c26c:	f146 0600 	adc.w	r6, r6, #0
 800c270:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800c274:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c27c:	f7fc f80a 	bl	8008294 <EMBENET_NODE_GetRandomValue>
 800c280:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800c282:	4605      	mov	r5, r0
 800c284:	f7fb fcf0 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c288:	182a      	adds	r2, r5, r0
 800c28a:	f141 0300 	adc.w	r3, r1, #0
 800c28e:	4630      	mov	r0, r6
 800c290:	4649      	mov	r1, r9
 800c292:	f7fb feb7 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800c296:	4605      	mov	r5, r0
 800c298:	b120      	cbz	r0, 800c2a4 <ENMS_NODE_Start+0xec>
 800c29a:	2303      	movs	r3, #3
 800c29c:	e9cd 3800 	strd	r3, r8, [sp]
 800c2a0:	4a0f      	ldr	r2, [pc, #60]	; (800c2e0 <ENMS_NODE_Start+0x128>)
 800c2a2:	e79b      	b.n	800c1dc <ENMS_NODE_Start+0x24>
 800c2a4:	490f      	ldr	r1, [pc, #60]	; (800c2e4 <ENMS_NODE_Start+0x12c>)
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f7ff ff4f 	bl	800c14c <ENMS_NODE_SetServiceState>
 800c2ae:	b138      	cbz	r0, 800c2c0 <ENMS_NODE_Start+0x108>
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e9cd 3800 	strd	r3, r8, [sp]
 800c2b6:	4a0c      	ldr	r2, [pc, #48]	; (800c2e8 <ENMS_NODE_Start+0x130>)
 800c2b8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c2bc:	f001 f9b6 	bl	800d62c <LOGGER_PrintLine>
 800c2c0:	2305      	movs	r3, #5
 800c2c2:	e9cd 3800 	strd	r3, r8, [sp]
 800c2c6:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <ENMS_NODE_Start+0x134>)
 800c2c8:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c2cc:	f001 f9ae 	bl	800d62c <LOGGER_PrintLine>
 800c2d0:	e789      	b.n	800c1e6 <ENMS_NODE_Start+0x2e>
 800c2d2:	2501      	movs	r5, #1
 800c2d4:	e787      	b.n	800c1e6 <ENMS_NODE_Start+0x2e>
 800c2d6:	bf00      	nop
 800c2d8:	0801b4df 	.word	0x0801b4df
 800c2dc:	0801ba60 	.word	0x0801ba60
 800c2e0:	0801ba7e 	.word	0x0801ba7e
 800c2e4:	0801ba0b 	.word	0x0801ba0b
 800c2e8:	0801ba96 	.word	0x0801ba96
 800c2ec:	0801bab3 	.word	0x0801bab3

0800c2f0 <ENMS_NODE_Stop>:
 800c2f0:	b513      	push	{r0, r1, r4, lr}
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	b1b0      	cbz	r0, 800c324 <ENMS_NODE_Stop+0x34>
 800c2f6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c2f8:	f7fb ff4c 	bl	8008194 <EMBENET_NODE_TaskCancel>
 800c2fc:	490a      	ldr	r1, [pc, #40]	; (800c328 <ENMS_NODE_Stop+0x38>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	4620      	mov	r0, r4
 800c302:	f7ff ff23 	bl	800c14c <ENMS_NODE_SetServiceState>
 800c306:	b910      	cbnz	r0, 800c30e <ENMS_NODE_Stop+0x1e>
 800c308:	2000      	movs	r0, #0
 800c30a:	b002      	add	sp, #8
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	2303      	movs	r3, #3
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	4b06      	ldr	r3, [pc, #24]	; (800c32c <ENMS_NODE_Stop+0x3c>)
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	ab02      	add	r3, sp, #8
 800c318:	e913 0003 	ldmdb	r3, {r0, r1}
 800c31c:	4a04      	ldr	r2, [pc, #16]	; (800c330 <ENMS_NODE_Stop+0x40>)
 800c31e:	f001 f985 	bl	800d62c <LOGGER_PrintLine>
 800c322:	e7f1      	b.n	800c308 <ENMS_NODE_Stop+0x18>
 800c324:	2001      	movs	r0, #1
 800c326:	e7f0      	b.n	800c30a <ENMS_NODE_Stop+0x1a>
 800c328:	0801ba0b 	.word	0x0801ba0b
 800c32c:	0801b4df 	.word	0x0801b4df
 800c330:	0801ba96 	.word	0x0801ba96

0800c334 <MQTTSN_CLIENT_GetPacketId>:
 800c334:	b508      	push	{r3, lr}
 800c336:	4603      	mov	r3, r0
 800c338:	b920      	cbnz	r0, 800c344 <MQTTSN_CLIENT_GetPacketId+0x10>
 800c33a:	4907      	ldr	r1, [pc, #28]	; (800c358 <MQTTSN_CLIENT_GetPacketId+0x24>)
 800c33c:	4807      	ldr	r0, [pc, #28]	; (800c35c <MQTTSN_CLIENT_GetPacketId+0x28>)
 800c33e:	221e      	movs	r2, #30
 800c340:	f7f5 f926 	bl	8001590 <EXPECT_OnAbortHandler>
 800c344:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
 800c348:	1c42      	adds	r2, r0, #1
 800c34a:	b292      	uxth	r2, r2
 800c34c:	2a01      	cmp	r2, #1
 800c34e:	bf38      	it	cc
 800c350:	2201      	movcc	r2, #1
 800c352:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800c356:	bd08      	pop	{r3, pc}
 800c358:	0801bac3 	.word	0x0801bac3
 800c35c:	0801bb30 	.word	0x0801bb30

0800c360 <doDisconnect>:
 800c360:	b510      	push	{r4, lr}
 800c362:	4604      	mov	r4, r0
 800c364:	b920      	cbnz	r0, 800c370 <doDisconnect+0x10>
 800c366:	490c      	ldr	r1, [pc, #48]	; (800c398 <doDisconnect+0x38>)
 800c368:	480c      	ldr	r0, [pc, #48]	; (800c39c <doDisconnect+0x3c>)
 800c36a:	224b      	movs	r2, #75	; 0x4b
 800c36c:	f7f5 f910 	bl	8001590 <EXPECT_OnAbortHandler>
 800c370:	f500 60aa 	add.w	r0, r0, #1360	; 0x550
 800c374:	f7fb fc54 	bl	8007c20 <EMBENET_UDP_UnregisterSocket>
 800c378:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c37a:	f7fb ff0b 	bl	8008194 <EMBENET_NODE_TaskCancel>
 800c37e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c380:	f7fb ff08 	bl	8008194 <EMBENET_NODE_TaskCancel>
 800c384:	2300      	movs	r3, #0
 800c386:	7623      	strb	r3, [r4, #24]
 800c388:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800c38c:	b11b      	cbz	r3, 800c396 <doDisconnect+0x36>
 800c38e:	4620      	mov	r0, r4
 800c390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c394:	4718      	bx	r3
 800c396:	bd10      	pop	{r4, pc}
 800c398:	0801bac3 	.word	0x0801bac3
 800c39c:	0801bb30 	.word	0x0801bb30

0800c3a0 <timeoutTask>:
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	9c02      	ldr	r4, [sp, #8]
 800c3a4:	b924      	cbnz	r4, 800c3b0 <timeoutTask+0x10>
 800c3a6:	4916      	ldr	r1, [pc, #88]	; (800c400 <timeoutTask+0x60>)
 800c3a8:	4816      	ldr	r0, [pc, #88]	; (800c404 <timeoutTask+0x64>)
 800c3aa:	2270      	movs	r2, #112	; 0x70
 800c3ac:	f7f5 f8f0 	bl	8001590 <EXPECT_OnAbortHandler>
 800c3b0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800c3b4:	2b17      	cmp	r3, #23
 800c3b6:	d10a      	bne.n	800c3ce <timeoutTask+0x2e>
 800c3b8:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800c3bc:	3301      	adds	r3, #1
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800c3c6:	d910      	bls.n	800c3ea <timeoutTask+0x4a>
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff ffc9 	bl	800c360 <doDisconnect>
 800c3ce:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d102      	bne.n	800c3dc <timeoutTask+0x3c>
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f7ff ffc2 	bl	800c360 <doDisconnect>
 800c3dc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800c3e0:	2b0b      	cmp	r3, #11
 800c3e2:	d102      	bne.n	800c3ea <timeoutTask+0x4a>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7ff ffbb 	bl	800c360 <doDisconnect>
 800c3ea:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800c3ee:	2b13      	cmp	r3, #19
 800c3f0:	d104      	bne.n	800c3fc <timeoutTask+0x5c>
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3f8:	f7ff bfb2 	b.w	800c360 <doDisconnect>
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	bf00      	nop
 800c400:	0801bac3 	.word	0x0801bac3
 800c404:	0801bb30 	.word	0x0801bb30

0800c408 <sendPing.isra.0>:
 800c408:	b530      	push	{r4, r5, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	b09d      	sub	sp, #116	; 0x74
 800c40e:	b920      	cbnz	r0, 800c41a <sendPing.isra.0+0x12>
 800c410:	4925      	ldr	r1, [pc, #148]	; (800c4a8 <sendPing.isra.0+0xa0>)
 800c412:	4826      	ldr	r0, [pc, #152]	; (800c4ac <sendPing.isra.0+0xa4>)
 800c414:	222d      	movs	r2, #45	; 0x2d
 800c416:	f7f5 f8bb 	bl	8001590 <EXPECT_OnAbortHandler>
 800c41a:	f7fb fc25 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c41e:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800c422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c426:	435a      	muls	r2, r3
 800c428:	1812      	adds	r2, r2, r0
 800c42a:	f141 0300 	adc.w	r3, r1, #0
 800c42e:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
 800c432:	2100      	movs	r1, #0
 800c434:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c436:	f7fb fde5 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800c43a:	2300      	movs	r3, #0
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	4622      	mov	r2, r4
 800c440:	2150      	movs	r1, #80	; 0x50
 800c442:	a808      	add	r0, sp, #32
 800c444:	9405      	str	r4, [sp, #20]
 800c446:	9306      	str	r3, [sp, #24]
 800c448:	f000 fd5e 	bl	800cf08 <MQTTSNSerialize_pingreq>
 800c44c:	b950      	cbnz	r0, 800c464 <sendPing.isra.0+0x5c>
 800c44e:	2303      	movs	r3, #3
 800c450:	9303      	str	r3, [sp, #12]
 800c452:	4a17      	ldr	r2, [pc, #92]	; (800c4b0 <sendPing.isra.0+0xa8>)
 800c454:	4b17      	ldr	r3, [pc, #92]	; (800c4b4 <sendPing.isra.0+0xac>)
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	4619      	mov	r1, r3
 800c45a:	2003      	movs	r0, #3
 800c45c:	f001 f8e6 	bl	800d62c <LOGGER_PrintLine>
 800c460:	b01d      	add	sp, #116	; 0x74
 800c462:	bd30      	pop	{r4, r5, pc}
 800c464:	9000      	str	r0, [sp, #0]
 800c466:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c468:	ab08      	add	r3, sp, #32
 800c46a:	f104 0119 	add.w	r1, r4, #25
 800c46e:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800c472:	f7fb fbe1 	bl	8007c38 <EMBENET_UDP_Send>
 800c476:	4605      	mov	r5, r0
 800c478:	b128      	cbz	r0, 800c486 <sendPing.isra.0+0x7e>
 800c47a:	2303      	movs	r3, #3
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	4b0d      	ldr	r3, [pc, #52]	; (800c4b4 <sendPing.isra.0+0xac>)
 800c480:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <sendPing.isra.0+0xb0>)
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	e7e8      	b.n	800c458 <sendPing.isra.0+0x50>
 800c486:	2317      	movs	r3, #23
 800c488:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800c48c:	6fa4      	ldr	r4, [r4, #120]	; 0x78
 800c48e:	f7fb fbeb 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c492:	f242 7210 	movw	r2, #10000	; 0x2710
 800c496:	1882      	adds	r2, r0, r2
 800c498:	f141 0300 	adc.w	r3, r1, #0
 800c49c:	4620      	mov	r0, r4
 800c49e:	4629      	mov	r1, r5
 800c4a0:	f7fb fdb0 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800c4a4:	e7dc      	b.n	800c460 <sendPing.isra.0+0x58>
 800c4a6:	bf00      	nop
 800c4a8:	0801bac3 	.word	0x0801bac3
 800c4ac:	0801bb30 	.word	0x0801bb30
 800c4b0:	0801bb56 	.word	0x0801bb56
 800c4b4:	0801bb48 	.word	0x0801bb48
 800c4b8:	0801bb76 	.word	0x0801bb76

0800c4bc <updRxHandler>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	b0a2      	sub	sp, #136	; 0x88
 800c4c0:	461d      	mov	r5, r3
 800c4c2:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800c4c4:	b928      	cbnz	r0, 800c4d2 <updRxHandler+0x16>
 800c4c6:	49a5      	ldr	r1, [pc, #660]	; (800c75c <updRxHandler+0x2a0>)
 800c4c8:	48a5      	ldr	r0, [pc, #660]	; (800c760 <updRxHandler+0x2a4>)
 800c4ca:	f240 126d 	movw	r2, #365	; 0x16d
 800c4ce:	f7f5 f85f 	bl	8001590 <EXPECT_OnAbortHandler>
 800c4d2:	68c4      	ldr	r4, [r0, #12]
 800c4d4:	b924      	cbnz	r4, 800c4e0 <updRxHandler+0x24>
 800c4d6:	49a1      	ldr	r1, [pc, #644]	; (800c75c <updRxHandler+0x2a0>)
 800c4d8:	48a2      	ldr	r0, [pc, #648]	; (800c764 <updRxHandler+0x2a8>)
 800c4da:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c4de:	e7f6      	b.n	800c4ce <updRxHandler+0x12>
 800c4e0:	b923      	cbnz	r3, 800c4ec <updRxHandler+0x30>
 800c4e2:	499e      	ldr	r1, [pc, #632]	; (800c75c <updRxHandler+0x2a0>)
 800c4e4:	48a0      	ldr	r0, [pc, #640]	; (800c768 <updRxHandler+0x2ac>)
 800c4e6:	f240 126f 	movw	r2, #367	; 0x16f
 800c4ea:	e7f0      	b.n	800c4ce <updRxHandler+0x12>
 800c4ec:	b926      	cbnz	r6, 800c4f8 <updRxHandler+0x3c>
 800c4ee:	499b      	ldr	r1, [pc, #620]	; (800c75c <updRxHandler+0x2a0>)
 800c4f0:	489e      	ldr	r0, [pc, #632]	; (800c76c <updRxHandler+0x2b0>)
 800c4f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c4f6:	e7ea      	b.n	800c4ce <updRxHandler+0x12>
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fe55 	bl	800d1aa <MQTTSNPacket_readSimplified>
 800c500:	b2c0      	uxtb	r0, r0
 800c502:	3805      	subs	r0, #5
 800c504:	2813      	cmp	r0, #19
 800c506:	f200 8163 	bhi.w	800c7d0 <updRxHandler+0x314>
 800c50a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c50e:	0014      	.short	0x0014
 800c510:	01610066 	.word	0x01610066
 800c514:	01610092 	.word	0x01610092
 800c518:	00ba0161 	.word	0x00ba0161
 800c51c:	016100ee 	.word	0x016100ee
 800c520:	01610161 	.word	0x01610161
 800c524:	01610161 	.word	0x01610161
 800c528:	01370161 	.word	0x01370161
 800c52c:	01610161 	.word	0x01610161
 800c530:	00530046 	.word	0x00530046
 800c534:	0036      	.short	0x0036
 800c536:	f7fb fb97 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c53a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c53e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c540:	f7fb fe28 	bl	8008194 <EMBENET_NODE_TaskCancel>
 800c544:	7e23      	ldrb	r3, [r4, #24]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d125      	bne.n	800c596 <updRxHandler+0xda>
 800c54a:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800c54e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c550:	2304      	movs	r3, #4
 800c552:	7623      	strb	r3, [r4, #24]
 800c554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c558:	435a      	muls	r2, r3
 800c55a:	e9d4 1324 	ldrd	r1, r3, [r4, #144]	; 0x90
 800c55e:	1852      	adds	r2, r2, r1
 800c560:	f143 0300 	adc.w	r3, r3, #0
 800c564:	2100      	movs	r1, #0
 800c566:	f7fb fd4d 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800c56a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800c56e:	b193      	cbz	r3, 800c596 <updRxHandler+0xda>
 800c570:	4620      	mov	r0, r4
 800c572:	b022      	add	sp, #136	; 0x88
 800c574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c578:	4718      	bx	r3
 800c57a:	4632      	mov	r2, r6
 800c57c:	4629      	mov	r1, r5
 800c57e:	a80e      	add	r0, sp, #56	; 0x38
 800c580:	f000 ffed 	bl	800d55e <MQTTSNDeserialize_disconnect>
 800c584:	b138      	cbz	r0, 800c596 <updRxHandler+0xda>
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff feea 	bl	800c360 <doDisconnect>
 800c58c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800c590:	b10b      	cbz	r3, 800c596 <updRxHandler+0xda>
 800c592:	4620      	mov	r0, r4
 800c594:	4798      	blx	r3
 800c596:	b022      	add	sp, #136	; 0x88
 800c598:	bd70      	pop	{r4, r5, r6, pc}
 800c59a:	f7fb fb65 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c59e:	7e23      	ldrb	r3, [r4, #24]
 800c5a0:	2b04      	cmp	r3, #4
 800c5a2:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c5a6:	d1f6      	bne.n	800c596 <updRxHandler+0xda>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	b022      	add	sp, #136	; 0x88
 800c5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5b0:	f7ff bf2a 	b.w	800c408 <sendPing.isra.0>
 800c5b4:	4631      	mov	r1, r6
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f000 fcd0 	bl	800cf5c <MQTTSNDeserialize_pingresp>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d0ea      	beq.n	800c596 <updRxHandler+0xda>
 800c5c0:	f7fb fb52 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c5c4:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c5c8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800c5d0:	b022      	add	sp, #136	; 0x88
 800c5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5d6:	f7fb bddd 	b.w	8008194 <EMBENET_NODE_TaskCancel>
 800c5da:	f7fb fb45 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c5de:	7e23      	ldrb	r3, [r4, #24]
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c5e6:	d1d6      	bne.n	800c596 <updRxHandler+0xda>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800c5ee:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800c5f2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5f4:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c5fc:	2150      	movs	r1, #80	; 0x50
 800c5fe:	a80e      	add	r0, sp, #56	; 0x38
 800c600:	f000 fcf7 	bl	800cff2 <MQTTSNSerialize_willtopic>
 800c604:	2800      	cmp	r0, #0
 800c606:	d0c6      	beq.n	800c596 <updRxHandler+0xda>
 800c608:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c60a:	9000      	str	r0, [sp, #0]
 800c60c:	ab0e      	add	r3, sp, #56	; 0x38
 800c60e:	f104 0119 	add.w	r1, r4, #25
 800c612:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800c616:	f7fb fb0f 	bl	8007c38 <EMBENET_UDP_Send>
 800c61a:	2303      	movs	r3, #3
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d02e      	beq.n	800c67e <updRxHandler+0x1c2>
 800c620:	9309      	str	r3, [sp, #36]	; 0x24
 800c622:	4b53      	ldr	r3, [pc, #332]	; (800c770 <updRxHandler+0x2b4>)
 800c624:	4a53      	ldr	r2, [pc, #332]	; (800c774 <updRxHandler+0x2b8>)
 800c626:	930a      	str	r3, [sp, #40]	; 0x28
 800c628:	4619      	mov	r1, r3
 800c62a:	2003      	movs	r0, #3
 800c62c:	f000 fffe 	bl	800d62c <LOGGER_PrintLine>
 800c630:	e7b1      	b.n	800c596 <updRxHandler+0xda>
 800c632:	f7fb fb19 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c636:	7e25      	ldrb	r5, [r4, #24]
 800c638:	2d03      	cmp	r5, #3
 800c63a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c63e:	d1aa      	bne.n	800c596 <updRxHandler+0xda>
 800c640:	2300      	movs	r3, #0
 800c642:	f104 0252 	add.w	r2, r4, #82	; 0x52
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	2150      	movs	r1, #80	; 0x50
 800c64a:	a80e      	add	r0, sp, #56	; 0x38
 800c64c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800c650:	920b      	str	r2, [sp, #44]	; 0x2c
 800c652:	f000 fd0a 	bl	800d06a <MQTTSNSerialize_willmsg>
 800c656:	2800      	cmp	r0, #0
 800c658:	d09d      	beq.n	800c596 <updRxHandler+0xda>
 800c65a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c65c:	9000      	str	r0, [sp, #0]
 800c65e:	ab0e      	add	r3, sp, #56	; 0x38
 800c660:	f104 0119 	add.w	r1, r4, #25
 800c664:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800c668:	f7fb fae6 	bl	8007c38 <EMBENET_UDP_Send>
 800c66c:	b130      	cbz	r0, 800c67c <updRxHandler+0x1c0>
 800c66e:	4b40      	ldr	r3, [pc, #256]	; (800c770 <updRxHandler+0x2b4>)
 800c670:	4a41      	ldr	r2, [pc, #260]	; (800c778 <updRxHandler+0x2bc>)
 800c672:	9509      	str	r5, [sp, #36]	; 0x24
 800c674:	930a      	str	r3, [sp, #40]	; 0x28
 800c676:	4619      	mov	r1, r3
 800c678:	4628      	mov	r0, r5
 800c67a:	e7d7      	b.n	800c62c <updRxHandler+0x170>
 800c67c:	2301      	movs	r3, #1
 800c67e:	7623      	strb	r3, [r4, #24]
 800c680:	e789      	b.n	800c596 <updRxHandler+0xda>
 800c682:	f7fb faf1 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c686:	462b      	mov	r3, r5
 800c688:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c68c:	aa09      	add	r2, sp, #36	; 0x24
 800c68e:	9600      	str	r6, [sp, #0]
 800c690:	a90e      	add	r1, sp, #56	; 0x38
 800c692:	a80b      	add	r0, sp, #44	; 0x2c
 800c694:	f000 ff34 	bl	800d500 <MQTTSNDeserialize_regack>
 800c698:	2801      	cmp	r0, #1
 800c69a:	f47f af7c 	bne.w	800c596 <updRxHandler+0xda>
 800c69e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c6a0:	f7fb fd78 	bl	8008194 <EMBENET_NODE_TaskCancel>
 800c6a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f47f af74 	bne.w	800c596 <updRxHandler+0xda>
 800c6ae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800c6b2:	203c      	movs	r0, #60	; 0x3c
 800c6b4:	f504 753d 	add.w	r5, r4, #756	; 0x2f4
 800c6b8:	fb00 f203 	mul.w	r2, r0, r3
 800c6bc:	5aae      	ldrh	r6, [r5, r2]
 800c6be:	428e      	cmp	r6, r1
 800c6c0:	d10f      	bne.n	800c6e2 <updRxHandler+0x226>
 800c6c2:	18a3      	adds	r3, r4, r2
 800c6c4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c6c8:	f8a3 12f6 	strh.w	r1, [r3, #758]	; 0x2f6
 800c6cc:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f43f af60 	beq.w	800c596 <updRxHandler+0xda>
 800c6d6:	f502 723e 	add.w	r2, r2, #760	; 0x2f8
 800c6da:	4422      	add	r2, r4
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4798      	blx	r3
 800c6e0:	e759      	b.n	800c596 <updRxHandler+0xda>
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	2b0a      	cmp	r3, #10
 800c6e6:	d1e7      	bne.n	800c6b8 <updRxHandler+0x1fc>
 800c6e8:	e755      	b.n	800c596 <updRxHandler+0xda>
 800c6ea:	f7fb fabd 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c6ee:	ab0e      	add	r3, sp, #56	; 0x38
 800c6f0:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c6f4:	2250      	movs	r2, #80	; 0x50
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f00c fc41 	bl	8018f80 <memset>
 800c6fe:	ab09      	add	r3, sp, #36	; 0x24
 800c700:	9302      	str	r3, [sp, #8]
 800c702:	ab08      	add	r3, sp, #32
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	ab0b      	add	r3, sp, #44	; 0x2c
 800c708:	9008      	str	r0, [sp, #32]
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c710:	f10d 031a 	add.w	r3, sp, #26
 800c714:	f10d 0219 	add.w	r2, sp, #25
 800c718:	a907      	add	r1, sp, #28
 800c71a:	a806      	add	r0, sp, #24
 800c71c:	f000 fe89 	bl	800d432 <MQTTSNDeserialize_publish>
 800c720:	2801      	cmp	r0, #1
 800c722:	f47f af38 	bne.w	800c596 <updRxHandler+0xda>
 800c726:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800c72a:	2300      	movs	r3, #0
 800c72c:	f104 009e 	add.w	r0, r4, #158	; 0x9e
 800c730:	253c      	movs	r5, #60	; 0x3c
 800c732:	fb05 f203 	mul.w	r2, r5, r3
 800c736:	5a86      	ldrh	r6, [r0, r2]
 800c738:	42b1      	cmp	r1, r6
 800c73a:	d10a      	bne.n	800c752 <updRxHandler+0x296>
 800c73c:	4422      	add	r2, r4
 800c73e:	f8d2 50d4 	ldr.w	r5, [r2, #212]	; 0xd4
 800c742:	2d00      	cmp	r5, #0
 800c744:	f43f af27 	beq.w	800c596 <updRxHandler+0xda>
 800c748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c74c:	4620      	mov	r0, r4
 800c74e:	47a8      	blx	r5
 800c750:	e721      	b.n	800c596 <updRxHandler+0xda>
 800c752:	3301      	adds	r3, #1
 800c754:	2b0a      	cmp	r3, #10
 800c756:	d1ec      	bne.n	800c732 <updRxHandler+0x276>
 800c758:	e71d      	b.n	800c596 <updRxHandler+0xda>
 800c75a:	bf00      	nop
 800c75c:	0801bac3 	.word	0x0801bac3
 800c760:	0801b779 	.word	0x0801b779
 800c764:	0801b791 	.word	0x0801b791
 800c768:	0801b7b6 	.word	0x0801b7b6
 800c76c:	0801b7cc 	.word	0x0801b7cc
 800c770:	0801bb48 	.word	0x0801bb48
 800c774:	0801bb91 	.word	0x0801bb91
 800c778:	0801bbb1 	.word	0x0801bbb1
 800c77c:	f7fb fa74 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800c780:	ab08      	add	r3, sp, #32
 800c782:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
 800c786:	aa0b      	add	r2, sp, #44	; 0x2c
 800c788:	e9cd 5600 	strd	r5, r6, [sp]
 800c78c:	a909      	add	r1, sp, #36	; 0x24
 800c78e:	a80e      	add	r0, sp, #56	; 0x38
 800c790:	f000 fd70 	bl	800d274 <MQTTSNDeserialize_suback>
 800c794:	2801      	cmp	r0, #1
 800c796:	f47f aefe 	bne.w	800c596 <updRxHandler+0xda>
 800c79a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800c79e:	2300      	movs	r3, #0
 800c7a0:	203c      	movs	r0, #60	; 0x3c
 800c7a2:	f104 059c 	add.w	r5, r4, #156	; 0x9c
 800c7a6:	fb00 f203 	mul.w	r2, r0, r3
 800c7aa:	5aae      	ldrh	r6, [r5, r2]
 800c7ac:	428e      	cmp	r6, r1
 800c7ae:	d10b      	bne.n	800c7c8 <updRxHandler+0x30c>
 800c7b0:	18a3      	adds	r3, r4, r2
 800c7b2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800c7b6:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
 800c7ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f aee9 	beq.w	800c596 <updRxHandler+0xda>
 800c7c4:	32a0      	adds	r2, #160	; 0xa0
 800c7c6:	e788      	b.n	800c6da <updRxHandler+0x21e>
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	2b0a      	cmp	r3, #10
 800c7cc:	d1eb      	bne.n	800c7a6 <updRxHandler+0x2ea>
 800c7ce:	e6e2      	b.n	800c596 <updRxHandler+0xda>
 800c7d0:	2304      	movs	r3, #4
 800c7d2:	930e      	str	r3, [sp, #56]	; 0x38
 800c7d4:	4b04      	ldr	r3, [pc, #16]	; (800c7e8 <updRxHandler+0x32c>)
 800c7d6:	4a05      	ldr	r2, [pc, #20]	; (800c7ec <updRxHandler+0x330>)
 800c7d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7da:	4619      	mov	r1, r3
 800c7dc:	2004      	movs	r0, #4
 800c7de:	b022      	add	sp, #136	; 0x88
 800c7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7e4:	f000 bf22 	b.w	800d62c <LOGGER_PrintLine>
 800c7e8:	0801bb48 	.word	0x0801bb48
 800c7ec:	0801bbcf 	.word	0x0801bbcf

0800c7f0 <pingTask>:
 800c7f0:	b508      	push	{r3, lr}
 800c7f2:	9802      	ldr	r0, [sp, #8]
 800c7f4:	b920      	cbnz	r0, 800c800 <pingTask+0x10>
 800c7f6:	4904      	ldr	r1, [pc, #16]	; (800c808 <pingTask+0x18>)
 800c7f8:	4804      	ldr	r0, [pc, #16]	; (800c80c <pingTask+0x1c>)
 800c7fa:	2261      	movs	r2, #97	; 0x61
 800c7fc:	f7f4 fec8 	bl	8001590 <EXPECT_OnAbortHandler>
 800c800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c804:	f7ff be00 	b.w	800c408 <sendPing.isra.0>
 800c808:	0801bac3 	.word	0x0801bac3
 800c80c:	0801bb30 	.word	0x0801bb30

0800c810 <MQTTSN_CLIENT_Init>:
 800c810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c812:	460f      	mov	r7, r1
 800c814:	4616      	mov	r6, r2
 800c816:	461d      	mov	r5, r3
 800c818:	4604      	mov	r4, r0
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d04c      	beq.n	800c8b8 <MQTTSN_CLIENT_Init+0xa8>
 800c81e:	7813      	ldrb	r3, [r2, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d049      	beq.n	800c8b8 <MQTTSN_CLIENT_Init+0xa8>
 800c824:	4610      	mov	r0, r2
 800c826:	f7f3 fd0b 	bl	8000240 <strlen>
 800c82a:	2817      	cmp	r0, #23
 800c82c:	d844      	bhi.n	800c8b8 <MQTTSN_CLIENT_Init+0xa8>
 800c82e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c832:	2100      	movs	r1, #0
 800c834:	4620      	mov	r0, r4
 800c836:	f00c fba3 	bl	8018f80 <memset>
 800c83a:	2217      	movs	r2, #23
 800c83c:	4631      	mov	r1, r6
 800c83e:	4620      	mov	r0, r4
 800c840:	f00c fbb8 	bl	8018fb4 <strncpy>
 800c844:	8567      	strh	r7, [r4, #42]	; 0x2a
 800c846:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c84a:	f204 5364 	addw	r3, r4, #1380	; 0x564
 800c84e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c852:	2302      	movs	r3, #2
 800c854:	f884 3552 	strb.w	r3, [r4, #1362]	; 0x552
 800c858:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <MQTTSN_CLIENT_Init+0xb0>)
 800c85a:	481a      	ldr	r0, [pc, #104]	; (800c8c4 <MQTTSN_CLIENT_Init+0xb4>)
 800c85c:	f8a4 7550 	strh.w	r7, [r4, #1360]	; 0x550
 800c860:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
 800c864:	f8c4 455c 	str.w	r4, [r4, #1372]	; 0x55c
 800c868:	4621      	mov	r1, r4
 800c86a:	f7fb fac3 	bl	8007df4 <EMBENET_NODE_TaskCreate>
 800c86e:	6760      	str	r0, [r4, #116]	; 0x74
 800c870:	3001      	adds	r0, #1
 800c872:	d10c      	bne.n	800c88e <MQTTSN_CLIENT_Init+0x7e>
 800c874:	2303      	movs	r3, #3
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	4b13      	ldr	r3, [pc, #76]	; (800c8c8 <MQTTSN_CLIENT_Init+0xb8>)
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	ab02      	add	r3, sp, #8
 800c87e:	e913 0003 	ldmdb	r3, {r0, r1}
 800c882:	4a12      	ldr	r2, [pc, #72]	; (800c8cc <MQTTSN_CLIENT_Init+0xbc>)
 800c884:	f000 fed2 	bl	800d62c <LOGGER_PrintLine>
 800c888:	2003      	movs	r0, #3
 800c88a:	b003      	add	sp, #12
 800c88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88e:	4810      	ldr	r0, [pc, #64]	; (800c8d0 <MQTTSN_CLIENT_Init+0xc0>)
 800c890:	4621      	mov	r1, r4
 800c892:	f7fb faaf 	bl	8007df4 <EMBENET_NODE_TaskCreate>
 800c896:	67a0      	str	r0, [r4, #120]	; 0x78
 800c898:	3001      	adds	r0, #1
 800c89a:	d10f      	bne.n	800c8bc <MQTTSN_CLIENT_Init+0xac>
 800c89c:	2303      	movs	r3, #3
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <MQTTSN_CLIENT_Init+0xb8>)
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	ab02      	add	r3, sp, #8
 800c8a6:	e913 0003 	ldmdb	r3, {r0, r1}
 800c8aa:	4a0a      	ldr	r2, [pc, #40]	; (800c8d4 <MQTTSN_CLIENT_Init+0xc4>)
 800c8ac:	f000 febe 	bl	800d62c <LOGGER_PrintLine>
 800c8b0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c8b2:	f7fb fb91 	bl	8007fd8 <EMBENET_NODE_TaskDestroy>
 800c8b6:	e7e7      	b.n	800c888 <MQTTSN_CLIENT_Init+0x78>
 800c8b8:	2001      	movs	r0, #1
 800c8ba:	e7e6      	b.n	800c88a <MQTTSN_CLIENT_Init+0x7a>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	e7e4      	b.n	800c88a <MQTTSN_CLIENT_Init+0x7a>
 800c8c0:	0800c4bd 	.word	0x0800c4bd
 800c8c4:	0800c7f1 	.word	0x0800c7f1
 800c8c8:	0801bb48 	.word	0x0801bb48
 800c8cc:	0801bbe8 	.word	0x0801bbe8
 800c8d0:	0800c3a1 	.word	0x0800c3a1
 800c8d4:	0801bc03 	.word	0x0801bc03

0800c8d8 <MQTTSN_CLIENT_Deinit>:
 800c8d8:	b510      	push	{r4, lr}
 800c8da:	4604      	mov	r4, r0
 800c8dc:	b158      	cbz	r0, 800c8f6 <MQTTSN_CLIENT_Deinit+0x1e>
 800c8de:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c8e0:	f7fb fb7a 	bl	8007fd8 <EMBENET_NODE_TaskDestroy>
 800c8e4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c8e6:	f7fb fb77 	bl	8007fd8 <EMBENET_NODE_TaskDestroy>
 800c8ea:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800c8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f2:	f7fb b995 	b.w	8007c20 <EMBENET_UDP_UnregisterSocket>
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <MQTTSN_CLIENT_Connect>:
 800c8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8fc:	b09e      	sub	sp, #120	; 0x78
 800c8fe:	e9dd a827 	ldrd	sl, r8, [sp, #156]	; 0x9c
 800c902:	460d      	mov	r5, r1
 800c904:	4617      	mov	r7, r2
 800c906:	4699      	mov	r9, r3
 800c908:	4604      	mov	r4, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f000 80af 	beq.w	800ca6e <MQTTSN_CLIENT_Connect+0x176>
 800c910:	2900      	cmp	r1, #0
 800c912:	f000 80ac 	beq.w	800ca6e <MQTTSN_CLIENT_Connect+0x176>
 800c916:	7e03      	ldrb	r3, [r0, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f040 80aa 	bne.w	800ca72 <MQTTSN_CLIENT_Connect+0x17a>
 800c91e:	f500 66aa 	add.w	r6, r0, #1360	; 0x550
 800c922:	4630      	mov	r0, r6
 800c924:	f7fb f970 	bl	8007c08 <EMBENET_UDP_RegisterSocket>
 800c928:	b168      	cbz	r0, 800c946 <MQTTSN_CLIENT_Connect+0x4e>
 800c92a:	2303      	movs	r3, #3
 800c92c:	930a      	str	r3, [sp, #40]	; 0x28
 800c92e:	4b52      	ldr	r3, [pc, #328]	; (800ca78 <MQTTSN_CLIENT_Connect+0x180>)
 800c930:	4a52      	ldr	r2, [pc, #328]	; (800ca7c <MQTTSN_CLIENT_Connect+0x184>)
 800c932:	930b      	str	r3, [sp, #44]	; 0x2c
 800c934:	4619      	mov	r1, r3
 800c936:	2003      	movs	r0, #3
 800c938:	f000 fe78 	bl	800d62c <LOGGER_PrintLine>
 800c93c:	2502      	movs	r5, #2
 800c93e:	4628      	mov	r0, r5
 800c940:	b01e      	add	sp, #120	; 0x78
 800c942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c946:	f894 354c 	ldrb.w	r3, [r4, #1356]	; 0x54c
 800c94a:	f003 030f 	and.w	r3, r3, #15
 800c94e:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c952:	f1ba 0f00 	cmp.w	sl, #0
 800c956:	d054      	beq.n	800ca02 <MQTTSN_CLIENT_Connect+0x10a>
 800c958:	f1b8 0f00 	cmp.w	r8, #0
 800c95c:	d051      	beq.n	800ca02 <MQTTSN_CLIENT_Connect+0x10a>
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	f360 03c3 	bfi	r3, r0, #3, #1
 800c964:	2225      	movs	r2, #37	; 0x25
 800c966:	4651      	mov	r1, sl
 800c968:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c96c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800c970:	f00c fb20 	bl	8018fb4 <strncpy>
 800c974:	221f      	movs	r2, #31
 800c976:	4641      	mov	r1, r8
 800c978:	f104 0052 	add.w	r0, r4, #82	; 0x52
 800c97c:	f00c fb1a 	bl	8018fb4 <strncpy>
 800c980:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800c984:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
 800c988:	2300      	movs	r3, #0
 800c98a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800c98e:	2301      	movs	r3, #1
 800c990:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 800c994:	f104 0319 	add.w	r3, r4, #25
 800c998:	f8a4 907e 	strh.w	r9, [r4, #126]	; 0x7e
 800c99c:	4629      	mov	r1, r5
 800c99e:	f105 0210 	add.w	r2, r5, #16
 800c9a2:	4698      	mov	r8, r3
 800c9a4:	f851 0b04 	ldr.w	r0, [r1], #4
 800c9a8:	f843 0b04 	str.w	r0, [r3], #4
 800c9ac:	4291      	cmp	r1, r2
 800c9ae:	d1f9      	bne.n	800c9a4 <MQTTSN_CLIENT_Connect+0xac>
 800c9b0:	4b33      	ldr	r3, [pc, #204]	; (800ca80 <MQTTSN_CLIENT_Connect+0x188>)
 800c9b2:	8567      	strh	r7, [r4, #42]	; 0x2a
 800c9b4:	2700      	movs	r7, #0
 800c9b6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 800c9ba:	f894 354c 	ldrb.w	r3, [r4, #1356]	; 0x54c
 800c9be:	9708      	str	r7, [sp, #32]
 800c9c0:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800c9c4:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 800c9c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c9cc:	aa04      	add	r2, sp, #16
 800c9ce:	2150      	movs	r1, #80	; 0x50
 800c9d0:	a80a      	add	r0, sp, #40	; 0x28
 800c9d2:	e9cd 4706 	strd	r4, r7, [sp, #24]
 800c9d6:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 800c9da:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800c9de:	f000 fa5a 	bl	800ce96 <MQTTSNSerialize_connect>
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	b998      	cbnz	r0, 800ca0e <MQTTSN_CLIENT_Connect+0x116>
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	9302      	str	r3, [sp, #8]
 800c9ea:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <MQTTSN_CLIENT_Connect+0x180>)
 800c9ec:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <MQTTSN_CLIENT_Connect+0x18c>)
 800c9ee:	9303      	str	r3, [sp, #12]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	2003      	movs	r0, #3
 800c9f4:	f000 fe1a 	bl	800d62c <LOGGER_PrintLine>
 800c9f8:	2505      	movs	r5, #5
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7fb f910 	bl	8007c20 <EMBENET_UDP_UnregisterSocket>
 800ca00:	e79d      	b.n	800c93e <MQTTSN_CLIENT_Connect+0x46>
 800ca02:	2300      	movs	r3, #0
 800ca04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800ca08:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800ca0c:	e7b8      	b.n	800c980 <MQTTSN_CLIENT_Connect+0x88>
 800ca0e:	2305      	movs	r3, #5
 800ca10:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800ca14:	f8d4 9078 	ldr.w	r9, [r4, #120]	; 0x78
 800ca18:	f7fb f926 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800ca1c:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca20:	1882      	adds	r2, r0, r2
 800ca22:	f141 0300 	adc.w	r3, r1, #0
 800ca26:	4648      	mov	r0, r9
 800ca28:	4639      	mov	r1, r7
 800ca2a:	f7fb faeb 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800ca2e:	9500      	str	r5, [sp, #0]
 800ca30:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ca32:	ab0a      	add	r3, sp, #40	; 0x28
 800ca34:	4641      	mov	r1, r8
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7fb f8fe 	bl	8007c38 <EMBENET_UDP_Send>
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	b150      	cbz	r0, 800ca56 <MQTTSN_CLIENT_Connect+0x15e>
 800ca40:	2303      	movs	r3, #3
 800ca42:	9302      	str	r3, [sp, #8]
 800ca44:	4b0c      	ldr	r3, [pc, #48]	; (800ca78 <MQTTSN_CLIENT_Connect+0x180>)
 800ca46:	4a10      	ldr	r2, [pc, #64]	; (800ca88 <MQTTSN_CLIENT_Connect+0x190>)
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	2003      	movs	r0, #3
 800ca4e:	f000 fded 	bl	800d62c <LOGGER_PrintLine>
 800ca52:	2504      	movs	r5, #4
 800ca54:	e7d1      	b.n	800c9fa <MQTTSN_CLIENT_Connect+0x102>
 800ca56:	f7fb f907 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800ca5a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	bf14      	ite	ne
 800ca62:	2302      	movne	r3, #2
 800ca64:	2301      	moveq	r3, #1
 800ca66:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
 800ca6a:	7623      	strb	r3, [r4, #24]
 800ca6c:	e767      	b.n	800c93e <MQTTSN_CLIENT_Connect+0x46>
 800ca6e:	2501      	movs	r5, #1
 800ca70:	e765      	b.n	800c93e <MQTTSN_CLIENT_Connect+0x46>
 800ca72:	251d      	movs	r5, #29
 800ca74:	e763      	b.n	800c93e <MQTTSN_CLIENT_Connect+0x46>
 800ca76:	bf00      	nop
 800ca78:	0801bb48 	.word	0x0801bb48
 800ca7c:	0801bc21 	.word	0x0801bc21
 800ca80:	4353514d 	.word	0x4353514d
 800ca84:	0801bc52 	.word	0x0801bc52
 800ca88:	0801bc75 	.word	0x0801bc75

0800ca8c <MQTTSN_CLIENT_CleanConnect>:
 800ca8c:	b470      	push	{r4, r5, r6}
 800ca8e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 800ca92:	b148      	cbz	r0, 800caa8 <MQTTSN_CLIENT_CleanConnect+0x1c>
 800ca94:	f890 554c 	ldrb.w	r5, [r0, #1356]	; 0x54c
 800ca98:	f045 0504 	orr.w	r5, r5, #4
 800ca9c:	f880 554c 	strb.w	r5, [r0, #1356]	; 0x54c
 800caa0:	9603      	str	r6, [sp, #12]
 800caa2:	bc70      	pop	{r4, r5, r6}
 800caa4:	f7ff bf28 	b.w	800c8f8 <MQTTSN_CLIENT_Connect>
 800caa8:	2001      	movs	r0, #1
 800caaa:	bc70      	pop	{r4, r5, r6}
 800caac:	4770      	bx	lr
	...

0800cab0 <MQTTSN_CLIENT_RegisterTopic>:
 800cab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab4:	468a      	mov	sl, r1
 800cab6:	b09c      	sub	sp, #112	; 0x70
 800cab8:	4691      	mov	r9, r2
 800caba:	4604      	mov	r4, r0
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f000 8085 	beq.w	800cbcc <MQTTSN_CLIENT_RegisterTopic+0x11c>
 800cac2:	2900      	cmp	r1, #0
 800cac4:	f000 8082 	beq.w	800cbcc <MQTTSN_CLIENT_RegisterTopic+0x11c>
 800cac8:	4608      	mov	r0, r1
 800caca:	f7f3 fbb9 	bl	8000240 <strlen>
 800cace:	2826      	cmp	r0, #38	; 0x26
 800cad0:	d87e      	bhi.n	800cbd0 <MQTTSN_CLIENT_RegisterTopic+0x120>
 800cad2:	7e25      	ldrb	r5, [r4, #24]
 800cad4:	2d04      	cmp	r5, #4
 800cad6:	d02e      	beq.n	800cb36 <MQTTSN_CLIENT_RegisterTopic+0x86>
 800cad8:	2303      	movs	r3, #3
 800cada:	9308      	str	r3, [sp, #32]
 800cadc:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <MQTTSN_CLIENT_RegisterTopic+0x124>)
 800cade:	4a3e      	ldr	r2, [pc, #248]	; (800cbd8 <MQTTSN_CLIENT_RegisterTopic+0x128>)
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	4619      	mov	r1, r3
 800cae4:	2003      	movs	r0, #3
 800cae6:	f000 fda1 	bl	800d62c <LOGGER_PrintLine>
 800caea:	251c      	movs	r5, #28
 800caec:	4628      	mov	r0, r5
 800caee:	b01c      	add	sp, #112	; 0x70
 800caf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf4:	3301      	adds	r3, #1
 800caf6:	fb01 f603 	mul.w	r6, r1, r3
 800cafa:	5b97      	ldrh	r7, [r2, r6]
 800cafc:	2f00      	cmp	r7, #0
 800cafe:	d1f9      	bne.n	800caf4 <MQTTSN_CLIENT_RegisterTopic+0x44>
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7ff fc17 	bl	800c334 <MQTTSN_CLIENT_GetPacketId>
 800cb06:	ab05      	add	r3, sp, #20
 800cb08:	4680      	mov	r8, r0
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	463a      	mov	r2, r7
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2150      	movs	r1, #80	; 0x50
 800cb12:	a808      	add	r0, sp, #32
 800cb14:	e9cd a705 	strd	sl, r7, [sp, #20]
 800cb18:	9707      	str	r7, [sp, #28]
 800cb1a:	f000 fc53 	bl	800d3c4 <MQTTSNSerialize_register>
 800cb1e:	b978      	cbnz	r0, 800cb40 <MQTTSN_CLIENT_RegisterTopic+0x90>
 800cb20:	2303      	movs	r3, #3
 800cb22:	9303      	str	r3, [sp, #12]
 800cb24:	4b2b      	ldr	r3, [pc, #172]	; (800cbd4 <MQTTSN_CLIENT_RegisterTopic+0x124>)
 800cb26:	4a2d      	ldr	r2, [pc, #180]	; (800cbdc <MQTTSN_CLIENT_RegisterTopic+0x12c>)
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	2003      	movs	r0, #3
 800cb2e:	f000 fd7d 	bl	800d62c <LOGGER_PrintLine>
 800cb32:	2517      	movs	r5, #23
 800cb34:	e7da      	b.n	800caec <MQTTSN_CLIENT_RegisterTopic+0x3c>
 800cb36:	2300      	movs	r3, #0
 800cb38:	213c      	movs	r1, #60	; 0x3c
 800cb3a:	f204 22f6 	addw	r2, r4, #758	; 0x2f6
 800cb3e:	e7da      	b.n	800caf6 <MQTTSN_CLIENT_RegisterTopic+0x46>
 800cb40:	9000      	str	r0, [sp, #0]
 800cb42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800cb44:	ab08      	add	r3, sp, #32
 800cb46:	f104 0119 	add.w	r1, r4, #25
 800cb4a:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800cb4e:	f7fb f873 	bl	8007c38 <EMBENET_UDP_Send>
 800cb52:	4607      	mov	r7, r0
 800cb54:	b148      	cbz	r0, 800cb6a <MQTTSN_CLIENT_RegisterTopic+0xba>
 800cb56:	2303      	movs	r3, #3
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <MQTTSN_CLIENT_RegisterTopic+0x124>)
 800cb5c:	4a20      	ldr	r2, [pc, #128]	; (800cbe0 <MQTTSN_CLIENT_RegisterTopic+0x130>)
 800cb5e:	9304      	str	r3, [sp, #16]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2003      	movs	r0, #3
 800cb64:	f000 fd62 	bl	800d62c <LOGGER_PrintLine>
 800cb68:	e7c0      	b.n	800caec <MQTTSN_CLIENT_RegisterTopic+0x3c>
 800cb6a:	f7fb f87d 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800cb6e:	f8b4 5080 	ldrh.w	r5, [r4, #128]	; 0x80
 800cb72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb76:	435d      	muls	r5, r3
 800cb78:	182a      	adds	r2, r5, r0
 800cb7a:	f141 0300 	adc.w	r3, r1, #0
 800cb7e:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
 800cb82:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7fb fa3d 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800cb8a:	f506 733e 	add.w	r3, r6, #760	; 0x2f8
 800cb8e:	4423      	add	r3, r4
 800cb90:	4651      	mov	r1, sl
 800cb92:	4618      	mov	r0, r3
 800cb94:	f00c fa9f 	bl	80190d6 <strcpy>
 800cb98:	f7f3 fb52 	bl	8000240 <strlen>
 800cb9c:	19a5      	adds	r5, r4, r6
 800cb9e:	e9c5 97c9 	strd	r9, r7, [r5, #804]	; 0x324
 800cba2:	230b      	movs	r3, #11
 800cba4:	f8c5 0320 	str.w	r0, [r5, #800]	; 0x320
 800cba8:	f8a5 82f4 	strh.w	r8, [r5, #756]	; 0x2f4
 800cbac:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800cbb0:	6fa4      	ldr	r4, [r4, #120]	; 0x78
 800cbb2:	f7fb f859 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800cbb6:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbba:	1882      	adds	r2, r0, r2
 800cbbc:	f141 0300 	adc.w	r3, r1, #0
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7fb fa1e 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800cbc8:	463d      	mov	r5, r7
 800cbca:	e78f      	b.n	800caec <MQTTSN_CLIENT_RegisterTopic+0x3c>
 800cbcc:	2501      	movs	r5, #1
 800cbce:	e78d      	b.n	800caec <MQTTSN_CLIENT_RegisterTopic+0x3c>
 800cbd0:	2523      	movs	r5, #35	; 0x23
 800cbd2:	e78b      	b.n	800caec <MQTTSN_CLIENT_RegisterTopic+0x3c>
 800cbd4:	0801bb48 	.word	0x0801bb48
 800cbd8:	0801bc93 	.word	0x0801bc93
 800cbdc:	0801bcc9 	.word	0x0801bcc9
 800cbe0:	0801bced 	.word	0x0801bced

0800cbe4 <MQTTSN_CLIENT_GetTopicId>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460f      	mov	r7, r1
 800cbea:	f500 763e 	add.w	r6, r0, #760	; 0x2f8
 800cbee:	2500      	movs	r5, #0
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7f3 fac4 	bl	8000180 <strcmp>
 800cbf8:	b928      	cbnz	r0, 800cc06 <MQTTSN_CLIENT_GetTopicId+0x22>
 800cbfa:	233c      	movs	r3, #60	; 0x3c
 800cbfc:	fb03 4405 	mla	r4, r3, r5, r4
 800cc00:	f8b4 02f6 	ldrh.w	r0, [r4, #758]	; 0x2f6
 800cc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc06:	3501      	adds	r5, #1
 800cc08:	2d0a      	cmp	r5, #10
 800cc0a:	f106 063c 	add.w	r6, r6, #60	; 0x3c
 800cc0e:	d1ef      	bne.n	800cbf0 <MQTTSN_CLIENT_GetTopicId+0xc>
 800cc10:	2000      	movs	r0, #0
 800cc12:	e7f7      	b.n	800cc04 <MQTTSN_CLIENT_GetTopicId+0x20>

0800cc14 <MQTTSN_CLIENT_PublishMessageById>:
 800cc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc16:	4605      	mov	r5, r0
 800cc18:	b0a3      	sub	sp, #140	; 0x8c
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d048      	beq.n	800ccb0 <MQTTSN_CLIENT_PublishMessageById+0x9c>
 800cc1e:	2900      	cmp	r1, #0
 800cc20:	d046      	beq.n	800ccb0 <MQTTSN_CLIENT_PublishMessageById+0x9c>
 800cc22:	2a00      	cmp	r2, #0
 800cc24:	d044      	beq.n	800ccb0 <MQTTSN_CLIENT_PublishMessageById+0x9c>
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d042      	beq.n	800ccb0 <MQTTSN_CLIENT_PublishMessageById+0x9c>
 800cc2a:	7e04      	ldrb	r4, [r0, #24]
 800cc2c:	2c04      	cmp	r4, #4
 800cc2e:	d141      	bne.n	800ccb4 <MQTTSN_CLIENT_PublishMessageById+0xa0>
 800cc30:	f890 c54c 	ldrb.w	ip, [r0, #1356]	; 0x54c
 800cc34:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800cc38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc3c:	2600      	movs	r6, #0
 800cc3e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
 800cc42:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc44:	ca07      	ldmia	r2, {r0, r1, r2}
 800cc46:	af02      	add	r7, sp, #8
 800cc48:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800cc4c:	f3cc 1341 	ubfx	r3, ip, #5, #2
 800cc50:	e9cd 6600 	strd	r6, r6, [sp]
 800cc54:	4632      	mov	r2, r6
 800cc56:	2150      	movs	r1, #80	; 0x50
 800cc58:	a80e      	add	r0, sp, #56	; 0x38
 800cc5a:	f000 fb41 	bl	800d2e0 <MQTTSNSerialize_publish>
 800cc5e:	b960      	cbnz	r0, 800cc7a <MQTTSN_CLIENT_PublishMessageById+0x66>
 800cc60:	2303      	movs	r3, #3
 800cc62:	9309      	str	r3, [sp, #36]	; 0x24
 800cc64:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <MQTTSN_CLIENT_PublishMessageById+0xa4>)
 800cc66:	4a15      	ldr	r2, [pc, #84]	; (800ccbc <MQTTSN_CLIENT_PublishMessageById+0xa8>)
 800cc68:	930a      	str	r3, [sp, #40]	; 0x28
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	2003      	movs	r0, #3
 800cc6e:	f000 fcdd 	bl	800d62c <LOGGER_PrintLine>
 800cc72:	2418      	movs	r4, #24
 800cc74:	4620      	mov	r0, r4
 800cc76:	b023      	add	sp, #140	; 0x8c
 800cc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc7a:	9000      	str	r0, [sp, #0]
 800cc7c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800cc7e:	ab0e      	add	r3, sp, #56	; 0x38
 800cc80:	f105 0119 	add.w	r1, r5, #25
 800cc84:	f505 60aa 	add.w	r0, r5, #1360	; 0x550
 800cc88:	f7fa ffd6 	bl	8007c38 <EMBENET_UDP_Send>
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	b148      	cbz	r0, 800cca4 <MQTTSN_CLIENT_PublishMessageById+0x90>
 800cc90:	2303      	movs	r3, #3
 800cc92:	9309      	str	r3, [sp, #36]	; 0x24
 800cc94:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <MQTTSN_CLIENT_PublishMessageById+0xa4>)
 800cc96:	4a0a      	ldr	r2, [pc, #40]	; (800ccc0 <MQTTSN_CLIENT_PublishMessageById+0xac>)
 800cc98:	930a      	str	r3, [sp, #40]	; 0x28
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	2003      	movs	r0, #3
 800cc9e:	f000 fcc5 	bl	800d62c <LOGGER_PrintLine>
 800cca2:	e7e7      	b.n	800cc74 <MQTTSN_CLIENT_PublishMessageById+0x60>
 800cca4:	f7fa ffe0 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800cca8:	4634      	mov	r4, r6
 800ccaa:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
 800ccae:	e7e1      	b.n	800cc74 <MQTTSN_CLIENT_PublishMessageById+0x60>
 800ccb0:	2401      	movs	r4, #1
 800ccb2:	e7df      	b.n	800cc74 <MQTTSN_CLIENT_PublishMessageById+0x60>
 800ccb4:	241c      	movs	r4, #28
 800ccb6:	e7dd      	b.n	800cc74 <MQTTSN_CLIENT_PublishMessageById+0x60>
 800ccb8:	0801bb48 	.word	0x0801bb48
 800ccbc:	0801bd0c 	.word	0x0801bd0c
 800ccc0:	0801bd2f 	.word	0x0801bd2f

0800ccc4 <MQTTSN_CLIENT_PublishMessage>:
 800ccc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	4615      	mov	r5, r2
 800ccca:	461e      	mov	r6, r3
 800cccc:	4604      	mov	r4, r0
 800ccce:	b1f8      	cbz	r0, 800cd10 <MQTTSN_CLIENT_PublishMessage+0x4c>
 800ccd0:	b1f1      	cbz	r1, 800cd10 <MQTTSN_CLIENT_PublishMessage+0x4c>
 800ccd2:	b1ea      	cbz	r2, 800cd10 <MQTTSN_CLIENT_PublishMessage+0x4c>
 800ccd4:	b1e3      	cbz	r3, 800cd10 <MQTTSN_CLIENT_PublishMessage+0x4c>
 800ccd6:	7e03      	ldrb	r3, [r0, #24]
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d11b      	bne.n	800cd14 <MQTTSN_CLIENT_PublishMessage+0x50>
 800ccdc:	f7ff ff82 	bl	800cbe4 <MQTTSN_CLIENT_GetTopicId>
 800cce0:	4601      	mov	r1, r0
 800cce2:	b968      	cbnz	r0, 800cd00 <MQTTSN_CLIENT_PublishMessage+0x3c>
 800cce4:	2303      	movs	r3, #3
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <MQTTSN_CLIENT_PublishMessage+0x54>)
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	a902      	add	r1, sp, #8
 800ccee:	e911 0003 	ldmdb	r1, {r0, r1}
 800ccf2:	4a0a      	ldr	r2, [pc, #40]	; (800cd1c <MQTTSN_CLIENT_PublishMessage+0x58>)
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	f000 fc99 	bl	800d62c <LOGGER_PrintLine>
 800ccfa:	201f      	movs	r0, #31
 800ccfc:	b003      	add	sp, #12
 800ccfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd00:	4633      	mov	r3, r6
 800cd02:	462a      	mov	r2, r5
 800cd04:	4620      	mov	r0, r4
 800cd06:	b003      	add	sp, #12
 800cd08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd0c:	f7ff bf82 	b.w	800cc14 <MQTTSN_CLIENT_PublishMessageById>
 800cd10:	2001      	movs	r0, #1
 800cd12:	e7f3      	b.n	800ccfc <MQTTSN_CLIENT_PublishMessage+0x38>
 800cd14:	201c      	movs	r0, #28
 800cd16:	e7f1      	b.n	800ccfc <MQTTSN_CLIENT_PublishMessage+0x38>
 800cd18:	0801bb48 	.word	0x0801bb48
 800cd1c:	0801bd4d 	.word	0x0801bd4d

0800cd20 <MQTTSN_CLIENT_Subscribe>:
 800cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	460f      	mov	r7, r1
 800cd26:	b0d9      	sub	sp, #356	; 0x164
 800cd28:	4691      	mov	r9, r2
 800cd2a:	4698      	mov	r8, r3
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f000 809b 	beq.w	800ce6a <MQTTSN_CLIENT_Subscribe+0x14a>
 800cd34:	2900      	cmp	r1, #0
 800cd36:	f000 8098 	beq.w	800ce6a <MQTTSN_CLIENT_Subscribe+0x14a>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 8095 	beq.w	800ce6a <MQTTSN_CLIENT_Subscribe+0x14a>
 800cd40:	4608      	mov	r0, r1
 800cd42:	f7f3 fa7d 	bl	8000240 <strlen>
 800cd46:	2826      	cmp	r0, #38	; 0x26
 800cd48:	f200 8091 	bhi.w	800ce6e <MQTTSN_CLIENT_Subscribe+0x14e>
 800cd4c:	7e23      	ldrb	r3, [r4, #24]
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	f040 808f 	bne.w	800ce72 <MQTTSN_CLIENT_Subscribe+0x152>
 800cd54:	2300      	movs	r3, #0
 800cd56:	f104 029e 	add.w	r2, r4, #158	; 0x9e
 800cd5a:	213c      	movs	r1, #60	; 0x3c
 800cd5c:	fb01 f603 	mul.w	r6, r1, r3
 800cd60:	f832 b006 	ldrh.w	fp, [r2, r6]
 800cd64:	f1bb 0f00 	cmp.w	fp, #0
 800cd68:	d011      	beq.n	800cd8e <MQTTSN_CLIENT_Subscribe+0x6e>
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	2b0a      	cmp	r3, #10
 800cd6e:	d1f5      	bne.n	800cd5c <MQTTSN_CLIENT_Subscribe+0x3c>
 800cd70:	2203      	movs	r2, #3
 800cd72:	9208      	str	r2, [sp, #32]
 800cd74:	4a40      	ldr	r2, [pc, #256]	; (800ce78 <MQTTSN_CLIENT_Subscribe+0x158>)
 800cd76:	9209      	str	r2, [sp, #36]	; 0x24
 800cd78:	ab08      	add	r3, sp, #32
 800cd7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd7e:	4a3f      	ldr	r2, [pc, #252]	; (800ce7c <MQTTSN_CLIENT_Subscribe+0x15c>)
 800cd80:	f000 fc54 	bl	800d62c <LOGGER_PrintLine>
 800cd84:	2522      	movs	r5, #34	; 0x22
 800cd86:	4628      	mov	r0, r5
 800cd88:	b059      	add	sp, #356	; 0x164
 800cd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f88d b014 	strb.w	fp, [sp, #20]
 800cd94:	9706      	str	r7, [sp, #24]
 800cd96:	f7f3 fa53 	bl	8000240 <strlen>
 800cd9a:	9007      	str	r0, [sp, #28]
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f7ff fac9 	bl	800c334 <MQTTSN_CLIENT_GetPacketId>
 800cda2:	f894 354c 	ldrb.w	r3, [r4, #1356]	; 0x54c
 800cda6:	ad05      	add	r5, sp, #20
 800cda8:	e9cd 0500 	strd	r0, r5, [sp]
 800cdac:	4682      	mov	sl, r0
 800cdae:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800cdb2:	465a      	mov	r2, fp
 800cdb4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdb8:	a808      	add	r0, sp, #32
 800cdba:	f000 fa09 	bl	800d1d0 <MQTTSNSerialize_subscribe>
 800cdbe:	b958      	cbnz	r0, 800cdd8 <MQTTSN_CLIENT_Subscribe+0xb8>
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	9203      	str	r2, [sp, #12]
 800cdc4:	4a2c      	ldr	r2, [pc, #176]	; (800ce78 <MQTTSN_CLIENT_Subscribe+0x158>)
 800cdc6:	9204      	str	r2, [sp, #16]
 800cdc8:	ab03      	add	r3, sp, #12
 800cdca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cdce:	4a2c      	ldr	r2, [pc, #176]	; (800ce80 <MQTTSN_CLIENT_Subscribe+0x160>)
 800cdd0:	f000 fc2c 	bl	800d62c <LOGGER_PrintLine>
 800cdd4:	251a      	movs	r5, #26
 800cdd6:	e7d6      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800cdd8:	9000      	str	r0, [sp, #0]
 800cdda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800cddc:	ab08      	add	r3, sp, #32
 800cdde:	f104 0119 	add.w	r1, r4, #25
 800cde2:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 800cde6:	f7fa ff27 	bl	8007c38 <EMBENET_UDP_Send>
 800cdea:	4605      	mov	r5, r0
 800cdec:	b158      	cbz	r0, 800ce06 <MQTTSN_CLIENT_Subscribe+0xe6>
 800cdee:	2203      	movs	r2, #3
 800cdf0:	9203      	str	r2, [sp, #12]
 800cdf2:	4a21      	ldr	r2, [pc, #132]	; (800ce78 <MQTTSN_CLIENT_Subscribe+0x158>)
 800cdf4:	9204      	str	r2, [sp, #16]
 800cdf6:	ab03      	add	r3, sp, #12
 800cdf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cdfc:	4a21      	ldr	r2, [pc, #132]	; (800ce84 <MQTTSN_CLIENT_Subscribe+0x164>)
 800cdfe:	f000 fc15 	bl	800d62c <LOGGER_PrintLine>
 800ce02:	2504      	movs	r5, #4
 800ce04:	e7bf      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800ce06:	f7fa ff2f 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800ce0a:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800ce0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce12:	435a      	muls	r2, r3
 800ce14:	1812      	adds	r2, r2, r0
 800ce16:	eb04 0b06 	add.w	fp, r4, r6
 800ce1a:	f106 06a0 	add.w	r6, r6, #160	; 0xa0
 800ce1e:	f141 0300 	adc.w	r3, r1, #0
 800ce22:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
 800ce26:	4426      	add	r6, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ce2c:	f7fb f8ea 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800ce30:	4639      	mov	r1, r7
 800ce32:	f8ab a09c 	strh.w	sl, [fp, #156]	; 0x9c
 800ce36:	4630      	mov	r0, r6
 800ce38:	f00c f94d 	bl	80190d6 <strcpy>
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7f3 f9ff 	bl	8000240 <strlen>
 800ce42:	e9cb 9834 	strd	r9, r8, [fp, #208]	; 0xd0
 800ce46:	2313      	movs	r3, #19
 800ce48:	f8cb 00c8 	str.w	r0, [fp, #200]	; 0xc8
 800ce4c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 800ce50:	6fa4      	ldr	r4, [r4, #120]	; 0x78
 800ce52:	f7fa ff09 	bl	8007c68 <EMBENET_NODE_GetLocalTime>
 800ce56:	f242 7210 	movw	r2, #10000	; 0x2710
 800ce5a:	1882      	adds	r2, r0, r2
 800ce5c:	f141 0300 	adc.w	r3, r1, #0
 800ce60:	4620      	mov	r0, r4
 800ce62:	4629      	mov	r1, r5
 800ce64:	f7fb f8ce 	bl	8008004 <EMBENET_NODE_TaskSchedule>
 800ce68:	e78d      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800ce6a:	2501      	movs	r5, #1
 800ce6c:	e78b      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800ce6e:	2523      	movs	r5, #35	; 0x23
 800ce70:	e789      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800ce72:	251c      	movs	r5, #28
 800ce74:	e787      	b.n	800cd86 <MQTTSN_CLIENT_Subscribe+0x66>
 800ce76:	bf00      	nop
 800ce78:	0801bb48 	.word	0x0801bb48
 800ce7c:	0801bd7b 	.word	0x0801bd7b
 800ce80:	0801bdad 	.word	0x0801bdad
 800ce84:	0801bdd2 	.word	0x0801bdd2

0800ce88 <MQTTSNSerialize_connectLength>:
 800ce88:	b508      	push	{r3, lr}
 800ce8a:	3008      	adds	r0, #8
 800ce8c:	c807      	ldmia	r0, {r0, r1, r2}
 800ce8e:	f000 f981 	bl	800d194 <MQTTSNstrlen>
 800ce92:	3005      	adds	r0, #5
 800ce94:	bd08      	pop	{r3, pc}

0800ce96 <MQTTSNSerialize_connect>:
 800ce96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce98:	4605      	mov	r5, r0
 800ce9a:	9001      	str	r0, [sp, #4]
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	460e      	mov	r6, r1
 800cea0:	4614      	mov	r4, r2
 800cea2:	f7ff fff1 	bl	800ce88 <MQTTSNSerialize_connectLength>
 800cea6:	f000 f8f3 	bl	800d090 <MQTTSNPacket_len>
 800ceaa:	42b0      	cmp	r0, r6
 800ceac:	4601      	mov	r1, r0
 800ceae:	dc28      	bgt.n	800cf02 <MQTTSNSerialize_connect+0x6c>
 800ceb0:	9801      	ldr	r0, [sp, #4]
 800ceb2:	f000 f933 	bl	800d11c <MQTTSNPacket_encode>
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	2104      	movs	r1, #4
 800ceba:	4403      	add	r3, r0
 800cebc:	eb0d 0001 	add.w	r0, sp, r1
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	f000 f910 	bl	800d0e6 <writeChar>
 800cec6:	7de1      	ldrb	r1, [r4, #23]
 800cec8:	7da3      	ldrb	r3, [r4, #22]
 800ceca:	00c9      	lsls	r1, r1, #3
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	f003 0304 	and.w	r3, r3, #4
 800ced2:	f001 0108 	and.w	r1, r1, #8
 800ced6:	4319      	orrs	r1, r3
 800ced8:	a801      	add	r0, sp, #4
 800ceda:	f000 f904 	bl	800d0e6 <writeChar>
 800cede:	2101      	movs	r1, #1
 800cee0:	a801      	add	r0, sp, #4
 800cee2:	f000 f900 	bl	800d0e6 <writeChar>
 800cee6:	3408      	adds	r4, #8
 800cee8:	89a1      	ldrh	r1, [r4, #12]
 800ceea:	a801      	add	r0, sp, #4
 800ceec:	f000 f901 	bl	800d0f2 <writeInt>
 800cef0:	a801      	add	r0, sp, #4
 800cef2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cef6:	f000 f934 	bl	800d162 <writeMQTTSNString>
 800cefa:	9801      	ldr	r0, [sp, #4]
 800cefc:	1b40      	subs	r0, r0, r5
 800cefe:	b002      	add	sp, #8
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	f06f 0001 	mvn.w	r0, #1
 800cf06:	e7fa      	b.n	800cefe <MQTTSNSerialize_connect+0x68>

0800cf08 <MQTTSNSerialize_pingreq>:
 800cf08:	b082      	sub	sp, #8
 800cf0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	a906      	add	r1, sp, #24
 800cf10:	e881 000c 	stmia.w	r1, {r2, r3}
 800cf14:	9001      	str	r0, [sp, #4]
 800cf16:	4604      	mov	r4, r0
 800cf18:	c907      	ldmia	r1, {r0, r1, r2}
 800cf1a:	f000 f93b 	bl	800d194 <MQTTSNstrlen>
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f000 f8b6 	bl	800d090 <MQTTSNPacket_len>
 800cf24:	42a8      	cmp	r0, r5
 800cf26:	4601      	mov	r1, r0
 800cf28:	dc15      	bgt.n	800cf56 <MQTTSNSerialize_pingreq+0x4e>
 800cf2a:	9801      	ldr	r0, [sp, #4]
 800cf2c:	f000 f8f6 	bl	800d11c <MQTTSNPacket_encode>
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	2116      	movs	r1, #22
 800cf34:	4403      	add	r3, r0
 800cf36:	a801      	add	r0, sp, #4
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	f000 f8d4 	bl	800d0e6 <writeChar>
 800cf3e:	ab06      	add	r3, sp, #24
 800cf40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf42:	a801      	add	r0, sp, #4
 800cf44:	f000 f90d 	bl	800d162 <writeMQTTSNString>
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	1b18      	subs	r0, r3, r4
 800cf4c:	b003      	add	sp, #12
 800cf4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf52:	b002      	add	sp, #8
 800cf54:	4770      	bx	lr
 800cf56:	f06f 0001 	mvn.w	r0, #1
 800cf5a:	e7f7      	b.n	800cf4c <MQTTSNSerialize_pingreq+0x44>

0800cf5c <MQTTSNDeserialize_pingresp>:
 800cf5c:	b513      	push	{r0, r1, r4, lr}
 800cf5e:	aa01      	add	r2, sp, #4
 800cf60:	4604      	mov	r4, r0
 800cf62:	9000      	str	r0, [sp, #0]
 800cf64:	f000 f8a1 	bl	800d0aa <MQTTSNPacket_decode>
 800cf68:	9b00      	ldr	r3, [sp, #0]
 800cf6a:	4418      	add	r0, r3
 800cf6c:	9b01      	ldr	r3, [sp, #4]
 800cf6e:	9000      	str	r0, [sp, #0]
 800cf70:	441c      	add	r4, r3
 800cf72:	1a24      	subs	r4, r4, r0
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	dd08      	ble.n	800cf8a <MQTTSNDeserialize_pingresp+0x2e>
 800cf78:	4668      	mov	r0, sp
 800cf7a:	f000 f8ae 	bl	800d0da <readChar>
 800cf7e:	f1a0 0317 	sub.w	r3, r0, #23
 800cf82:	4258      	negs	r0, r3
 800cf84:	4158      	adcs	r0, r3
 800cf86:	b002      	add	sp, #8
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	e7fb      	b.n	800cf86 <MQTTSNDeserialize_pingresp+0x2a>

0800cf8e <MQTTSNSerialize_willtopic1>:
 800cf8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf90:	461c      	mov	r4, r3
 800cf92:	ab08      	add	r3, sp, #32
 800cf94:	460f      	mov	r7, r1
 800cf96:	9001      	str	r0, [sp, #4]
 800cf98:	4606      	mov	r6, r0
 800cf9a:	4615      	mov	r5, r2
 800cf9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfa0:	f000 f8f8 	bl	800d194 <MQTTSNstrlen>
 800cfa4:	3002      	adds	r0, #2
 800cfa6:	f000 f873 	bl	800d090 <MQTTSNPacket_len>
 800cfaa:	42b8      	cmp	r0, r7
 800cfac:	4601      	mov	r1, r0
 800cfae:	dc1d      	bgt.n	800cfec <MQTTSNSerialize_willtopic1+0x5e>
 800cfb0:	9801      	ldr	r0, [sp, #4]
 800cfb2:	f000 f8b3 	bl	800d11c <MQTTSNPacket_encode>
 800cfb6:	9b01      	ldr	r3, [sp, #4]
 800cfb8:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800cfbc:	4403      	add	r3, r0
 800cfbe:	0124      	lsls	r4, r4, #4
 800cfc0:	a801      	add	r0, sp, #4
 800cfc2:	9301      	str	r3, [sp, #4]
 800cfc4:	f004 0410 	and.w	r4, r4, #16
 800cfc8:	f000 f88d 	bl	800d0e6 <writeChar>
 800cfcc:	f005 0103 	and.w	r1, r5, #3
 800cfd0:	ea44 1141 	orr.w	r1, r4, r1, lsl #5
 800cfd4:	a801      	add	r0, sp, #4
 800cfd6:	f000 f886 	bl	800d0e6 <writeChar>
 800cfda:	ab08      	add	r3, sp, #32
 800cfdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfde:	a801      	add	r0, sp, #4
 800cfe0:	f000 f8bf 	bl	800d162 <writeMQTTSNString>
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	1b98      	subs	r0, r3, r6
 800cfe8:	b003      	add	sp, #12
 800cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfec:	f06f 0001 	mvn.w	r0, #1
 800cff0:	e7fa      	b.n	800cfe8 <MQTTSNSerialize_willtopic1+0x5a>

0800cff2 <MQTTSNSerialize_willtopic>:
 800cff2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cff4:	4616      	mov	r6, r2
 800cff6:	2207      	movs	r2, #7
 800cff8:	9203      	str	r2, [sp, #12]
 800cffa:	aa08      	add	r2, sp, #32
 800cffc:	4604      	mov	r4, r0
 800cffe:	460d      	mov	r5, r1
 800d000:	ca07      	ldmia	r2, {r0, r1, r2}
 800d002:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d006:	4632      	mov	r2, r6
 800d008:	4629      	mov	r1, r5
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7ff ffbf 	bl	800cf8e <MQTTSNSerialize_willtopic1>
 800d010:	b004      	add	sp, #16
 800d012:	bd70      	pop	{r4, r5, r6, pc}

0800d014 <MQTTSNSerialize_willmsg1>:
 800d014:	b082      	sub	sp, #8
 800d016:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d018:	460d      	mov	r5, r1
 800d01a:	a906      	add	r1, sp, #24
 800d01c:	e881 000c 	stmia.w	r1, {r2, r3}
 800d020:	9001      	str	r0, [sp, #4]
 800d022:	4604      	mov	r4, r0
 800d024:	c907      	ldmia	r1, {r0, r1, r2}
 800d026:	f000 f8b5 	bl	800d194 <MQTTSNstrlen>
 800d02a:	3001      	adds	r0, #1
 800d02c:	f000 f830 	bl	800d090 <MQTTSNPacket_len>
 800d030:	42a8      	cmp	r0, r5
 800d032:	4601      	mov	r1, r0
 800d034:	dc16      	bgt.n	800d064 <MQTTSNSerialize_willmsg1+0x50>
 800d036:	9801      	ldr	r0, [sp, #4]
 800d038:	f000 f870 	bl	800d11c <MQTTSNPacket_encode>
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 800d042:	4403      	add	r3, r0
 800d044:	a801      	add	r0, sp, #4
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	f000 f84d 	bl	800d0e6 <writeChar>
 800d04c:	ab06      	add	r3, sp, #24
 800d04e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d050:	a801      	add	r0, sp, #4
 800d052:	f000 f886 	bl	800d162 <writeMQTTSNString>
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	1b18      	subs	r0, r3, r4
 800d05a:	b003      	add	sp, #12
 800d05c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d060:	b002      	add	sp, #8
 800d062:	4770      	bx	lr
 800d064:	f06f 0001 	mvn.w	r0, #1
 800d068:	e7f7      	b.n	800d05a <MQTTSNSerialize_willmsg1+0x46>

0800d06a <MQTTSNSerialize_willmsg>:
 800d06a:	b082      	sub	sp, #8
 800d06c:	b507      	push	{r0, r1, r2, lr}
 800d06e:	f10d 0c10 	add.w	ip, sp, #16
 800d072:	e88c 000c 	stmia.w	ip, {r2, r3}
 800d076:	2309      	movs	r3, #9
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	9b06      	ldr	r3, [sp, #24]
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	e9dc 2300 	ldrd	r2, r3, [ip]
 800d082:	f7ff ffc7 	bl	800d014 <MQTTSNSerialize_willmsg1>
 800d086:	b003      	add	sp, #12
 800d088:	f85d eb04 	ldr.w	lr, [sp], #4
 800d08c:	b002      	add	sp, #8
 800d08e:	4770      	bx	lr

0800d090 <MQTTSNPacket_len>:
 800d090:	28fe      	cmp	r0, #254	; 0xfe
 800d092:	bfcc      	ite	gt
 800d094:	3003      	addgt	r0, #3
 800d096:	3001      	addle	r0, #1
 800d098:	4770      	bx	lr

0800d09a <readInt>:
 800d09a:	6803      	ldr	r3, [r0, #0]
 800d09c:	7819      	ldrb	r1, [r3, #0]
 800d09e:	785a      	ldrb	r2, [r3, #1]
 800d0a0:	3302      	adds	r3, #2
 800d0a2:	6003      	str	r3, [r0, #0]
 800d0a4:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 800d0a8:	4770      	bx	lr

0800d0aa <MQTTSNPacket_decode>:
 800d0aa:	b513      	push	{r0, r1, r4, lr}
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	dd06      	ble.n	800d0c0 <MQTTSNPacket_decode+0x16>
 800d0b2:	7803      	ldrb	r3, [r0, #0]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d10d      	bne.n	800d0d4 <MQTTSNPacket_decode+0x2a>
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	2902      	cmp	r1, #2
 800d0bc:	9001      	str	r0, [sp, #4]
 800d0be:	dc03      	bgt.n	800d0c8 <MQTTSNPacket_decode+0x1e>
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	b002      	add	sp, #8
 800d0c6:	bd10      	pop	{r4, pc}
 800d0c8:	a801      	add	r0, sp, #4
 800d0ca:	f7ff ffe6 	bl	800d09a <readInt>
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	2003      	movs	r0, #3
 800d0d2:	e7f7      	b.n	800d0c4 <MQTTSNPacket_decode+0x1a>
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	e7f4      	b.n	800d0c4 <MQTTSNPacket_decode+0x1a>

0800d0da <readChar>:
 800d0da:	6802      	ldr	r2, [r0, #0]
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	4770      	bx	lr

0800d0e6 <writeChar>:
 800d0e6:	6803      	ldr	r3, [r0, #0]
 800d0e8:	7019      	strb	r1, [r3, #0]
 800d0ea:	6803      	ldr	r3, [r0, #0]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	6003      	str	r3, [r0, #0]
 800d0f0:	4770      	bx	lr

0800d0f2 <writeInt>:
 800d0f2:	2900      	cmp	r1, #0
 800d0f4:	6802      	ldr	r2, [r0, #0]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	bfb8      	it	lt
 800d0fa:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 800d0fe:	121b      	asrs	r3, r3, #8
 800d100:	7013      	strb	r3, [r2, #0]
 800d102:	6802      	ldr	r2, [r0, #0]
 800d104:	1c53      	adds	r3, r2, #1
 800d106:	6003      	str	r3, [r0, #0]
 800d108:	424b      	negs	r3, r1
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	b2c9      	uxtb	r1, r1
 800d10e:	bf58      	it	pl
 800d110:	4259      	negpl	r1, r3
 800d112:	7051      	strb	r1, [r2, #1]
 800d114:	6803      	ldr	r3, [r0, #0]
 800d116:	3301      	adds	r3, #1
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	4770      	bx	lr

0800d11c <MQTTSNPacket_encode>:
 800d11c:	b507      	push	{r0, r1, r2, lr}
 800d11e:	29fe      	cmp	r1, #254	; 0xfe
 800d120:	9001      	str	r0, [sp, #4]
 800d122:	460a      	mov	r2, r1
 800d124:	dd0a      	ble.n	800d13c <MQTTSNPacket_encode+0x20>
 800d126:	a801      	add	r0, sp, #4
 800d128:	2101      	movs	r1, #1
 800d12a:	f7ff ffdc 	bl	800d0e6 <writeChar>
 800d12e:	4611      	mov	r1, r2
 800d130:	f7ff ffdf 	bl	800d0f2 <writeInt>
 800d134:	2003      	movs	r0, #3
 800d136:	b003      	add	sp, #12
 800d138:	f85d fb04 	ldr.w	pc, [sp], #4
 800d13c:	7001      	strb	r1, [r0, #0]
 800d13e:	2001      	movs	r0, #1
 800d140:	e7f9      	b.n	800d136 <MQTTSNPacket_encode+0x1a>

0800d142 <writeCString>:
 800d142:	b570      	push	{r4, r5, r6, lr}
 800d144:	4604      	mov	r4, r0
 800d146:	4608      	mov	r0, r1
 800d148:	460e      	mov	r6, r1
 800d14a:	f7f3 f879 	bl	8000240 <strlen>
 800d14e:	4631      	mov	r1, r6
 800d150:	4605      	mov	r5, r0
 800d152:	4602      	mov	r2, r0
 800d154:	6820      	ldr	r0, [r4, #0]
 800d156:	f00b ffc6 	bl	80190e6 <memcpy>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	442b      	add	r3, r5
 800d15e:	6023      	str	r3, [r4, #0]
 800d160:	bd70      	pop	{r4, r5, r6, pc}

0800d162 <writeMQTTSNString>:
 800d162:	b530      	push	{r4, r5, lr}
 800d164:	b085      	sub	sp, #20
 800d166:	ad04      	add	r5, sp, #16
 800d168:	2a00      	cmp	r2, #0
 800d16a:	e905 000e 	stmdb	r5, {r1, r2, r3}
 800d16e:	4604      	mov	r4, r0
 800d170:	4615      	mov	r5, r2
 800d172:	dd08      	ble.n	800d186 <writeMQTTSNString+0x24>
 800d174:	4619      	mov	r1, r3
 800d176:	6800      	ldr	r0, [r0, #0]
 800d178:	f00b ffb5 	bl	80190e6 <memcpy>
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	442b      	add	r3, r5
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	b005      	add	sp, #20
 800d184:	bd30      	pop	{r4, r5, pc}
 800d186:	2900      	cmp	r1, #0
 800d188:	d0fb      	beq.n	800d182 <writeMQTTSNString+0x20>
 800d18a:	b005      	add	sp, #20
 800d18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d190:	f7ff bfd7 	b.w	800d142 <writeCString>

0800d194 <MQTTSNstrlen>:
 800d194:	b084      	sub	sp, #16
 800d196:	ab04      	add	r3, sp, #16
 800d198:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800d19c:	b110      	cbz	r0, 800d1a4 <MQTTSNstrlen+0x10>
 800d19e:	b004      	add	sp, #16
 800d1a0:	f7f3 b84e 	b.w	8000240 <strlen>
 800d1a4:	9802      	ldr	r0, [sp, #8]
 800d1a6:	b004      	add	sp, #16
 800d1a8:	4770      	bx	lr

0800d1aa <MQTTSNPacket_readSimplified>:
 800d1aa:	b513      	push	{r0, r1, r4, lr}
 800d1ac:	aa01      	add	r2, sp, #4
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	f7ff ff7b 	bl	800d0aa <MQTTSNPacket_decode>
 800d1b4:	5c20      	ldrb	r0, [r4, r0]
 800d1b6:	b002      	add	sp, #8
 800d1b8:	bd10      	pop	{r4, pc}

0800d1ba <MQTTSNSerialize_subscribeLength>:
 800d1ba:	7803      	ldrb	r3, [r0, #0]
 800d1bc:	b913      	cbnz	r3, 800d1c4 <MQTTSNSerialize_subscribeLength+0xa>
 800d1be:	6880      	ldr	r0, [r0, #8]
 800d1c0:	3004      	adds	r0, #4
 800d1c2:	4770      	bx	lr
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	bf94      	ite	ls
 800d1ca:	2006      	movls	r0, #6
 800d1cc:	2004      	movhi	r0, #4
 800d1ce:	4770      	bx	lr

0800d1d0 <MQTTSNSerialize_subscribe>:
 800d1d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d1d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d1d6:	9001      	str	r0, [sp, #4]
 800d1d8:	4606      	mov	r6, r0
 800d1da:	4620      	mov	r0, r4
 800d1dc:	461d      	mov	r5, r3
 800d1de:	f7ff ffec 	bl	800d1ba <MQTTSNSerialize_subscribeLength>
 800d1e2:	4688      	mov	r8, r1
 800d1e4:	4617      	mov	r7, r2
 800d1e6:	f7ff ff53 	bl	800d090 <MQTTSNPacket_len>
 800d1ea:	4540      	cmp	r0, r8
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	dc3e      	bgt.n	800d26e <MQTTSNSerialize_subscribe+0x9e>
 800d1f0:	9801      	ldr	r0, [sp, #4]
 800d1f2:	f7ff ff93 	bl	800d11c <MQTTSNPacket_encode>
 800d1f6:	9b01      	ldr	r3, [sp, #4]
 800d1f8:	2112      	movs	r1, #18
 800d1fa:	4403      	add	r3, r0
 800d1fc:	a801      	add	r0, sp, #4
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	f7ff ff71 	bl	800d0e6 <writeChar>
 800d204:	7821      	ldrb	r1, [r4, #0]
 800d206:	f005 0503 	and.w	r5, r5, #3
 800d20a:	f001 0103 	and.w	r1, r1, #3
 800d20e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800d212:	ea41 11c7 	orr.w	r1, r1, r7, lsl #7
 800d216:	f001 01e3 	and.w	r1, r1, #227	; 0xe3
 800d21a:	a801      	add	r0, sp, #4
 800d21c:	f7ff ff63 	bl	800d0e6 <writeChar>
 800d220:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800d224:	a801      	add	r0, sp, #4
 800d226:	f7ff ff64 	bl	800d0f2 <writeInt>
 800d22a:	7823      	ldrb	r3, [r4, #0]
 800d22c:	b96b      	cbnz	r3, 800d24a <MQTTSNSerialize_subscribe+0x7a>
 800d22e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800d232:	9801      	ldr	r0, [sp, #4]
 800d234:	f00b ff57 	bl	80190e6 <memcpy>
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	68a2      	ldr	r2, [r4, #8]
 800d23c:	4413      	add	r3, r2
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	9b01      	ldr	r3, [sp, #4]
 800d242:	1b98      	subs	r0, r3, r6
 800d244:	b002      	add	sp, #8
 800d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d104      	bne.n	800d258 <MQTTSNSerialize_subscribe+0x88>
 800d24e:	88a1      	ldrh	r1, [r4, #4]
 800d250:	a801      	add	r0, sp, #4
 800d252:	f7ff ff4e 	bl	800d0f2 <writeInt>
 800d256:	e7f3      	b.n	800d240 <MQTTSNSerialize_subscribe+0x70>
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d1f1      	bne.n	800d240 <MQTTSNSerialize_subscribe+0x70>
 800d25c:	7921      	ldrb	r1, [r4, #4]
 800d25e:	a801      	add	r0, sp, #4
 800d260:	f7ff ff41 	bl	800d0e6 <writeChar>
 800d264:	7961      	ldrb	r1, [r4, #5]
 800d266:	a801      	add	r0, sp, #4
 800d268:	f7ff ff3d 	bl	800d0e6 <writeChar>
 800d26c:	e7e8      	b.n	800d240 <MQTTSNSerialize_subscribe+0x70>
 800d26e:	f06f 0001 	mvn.w	r0, #1
 800d272:	e7e7      	b.n	800d244 <MQTTSNSerialize_subscribe+0x74>

0800d274 <MQTTSNDeserialize_suback>:
 800d274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d278:	e9dd 490a 	ldrd	r4, r9, [sp, #40]	; 0x28
 800d27c:	4680      	mov	r8, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	4620      	mov	r0, r4
 800d282:	4616      	mov	r6, r2
 800d284:	461d      	mov	r5, r3
 800d286:	aa01      	add	r2, sp, #4
 800d288:	2300      	movs	r3, #0
 800d28a:	4649      	mov	r1, r9
 800d28c:	9400      	str	r4, [sp, #0]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	f7ff ff0b 	bl	800d0aa <MQTTSNPacket_decode>
 800d294:	9b00      	ldr	r3, [sp, #0]
 800d296:	4418      	add	r0, r3
 800d298:	9b01      	ldr	r3, [sp, #4]
 800d29a:	9000      	str	r0, [sp, #0]
 800d29c:	441c      	add	r4, r3
 800d29e:	1a24      	subs	r4, r4, r0
 800d2a0:	454c      	cmp	r4, r9
 800d2a2:	dd03      	ble.n	800d2ac <MQTTSNDeserialize_suback+0x38>
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	b003      	add	sp, #12
 800d2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ac:	4668      	mov	r0, sp
 800d2ae:	f7ff ff14 	bl	800d0da <readChar>
 800d2b2:	2813      	cmp	r0, #19
 800d2b4:	d1f6      	bne.n	800d2a4 <MQTTSNDeserialize_suback+0x30>
 800d2b6:	4668      	mov	r0, sp
 800d2b8:	f7ff ff0f 	bl	800d0da <readChar>
 800d2bc:	f3c0 1041 	ubfx	r0, r0, #5, #2
 800d2c0:	f8c8 0000 	str.w	r0, [r8]
 800d2c4:	4668      	mov	r0, sp
 800d2c6:	f7ff fee8 	bl	800d09a <readInt>
 800d2ca:	8038      	strh	r0, [r7, #0]
 800d2cc:	4668      	mov	r0, sp
 800d2ce:	f7ff fee4 	bl	800d09a <readInt>
 800d2d2:	8030      	strh	r0, [r6, #0]
 800d2d4:	4668      	mov	r0, sp
 800d2d6:	f7ff ff00 	bl	800d0da <readChar>
 800d2da:	7028      	strb	r0, [r5, #0]
 800d2dc:	2001      	movs	r0, #1
 800d2de:	e7e2      	b.n	800d2a6 <MQTTSNDeserialize_suback+0x32>

0800d2e0 <MQTTSNSerialize_publish>:
 800d2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 800d2e8:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 800d2ec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800d2f0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800d2f4:	9001      	str	r0, [sp, #4]
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	4692      	mov	sl, r2
 800d2fc:	461c      	mov	r4, r3
 800d2fe:	2f00      	cmp	r7, #0
 800d300:	d144      	bne.n	800d38c <MQTTSNSerialize_publish+0xac>
 800d302:	2b03      	cmp	r3, #3
 800d304:	d142      	bne.n	800d38c <MQTTSNSerialize_publish+0xac>
 800d306:	f108 0006 	add.w	r0, r8, #6
 800d30a:	4448      	add	r0, r9
 800d30c:	f7ff fec0 	bl	800d090 <MQTTSNPacket_len>
 800d310:	4558      	cmp	r0, fp
 800d312:	4601      	mov	r1, r0
 800d314:	dc53      	bgt.n	800d3be <MQTTSNSerialize_publish+0xde>
 800d316:	9801      	ldr	r0, [sp, #4]
 800d318:	f7ff ff00 	bl	800d11c <MQTTSNPacket_encode>
 800d31c:	9b01      	ldr	r3, [sp, #4]
 800d31e:	210c      	movs	r1, #12
 800d320:	4403      	add	r3, r0
 800d322:	a801      	add	r0, sp, #4
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	f7ff fede 	bl	800d0e6 <writeChar>
 800d32a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 800d32e:	0109      	lsls	r1, r1, #4
 800d330:	f007 0303 	and.w	r3, r7, #3
 800d334:	f001 0110 	and.w	r1, r1, #16
 800d338:	4319      	orrs	r1, r3
 800d33a:	f004 0303 	and.w	r3, r4, #3
 800d33e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
 800d342:	ea41 11ca 	orr.w	r1, r1, sl, lsl #7
 800d346:	f001 01f3 	and.w	r1, r1, #243	; 0xf3
 800d34a:	a801      	add	r0, sp, #4
 800d34c:	f7ff fecb 	bl	800d0e6 <writeChar>
 800d350:	b9f7      	cbnz	r7, 800d390 <MQTTSNSerialize_publish+0xb0>
 800d352:	2c03      	cmp	r4, #3
 800d354:	d11e      	bne.n	800d394 <MQTTSNSerialize_publish+0xb4>
 800d356:	4641      	mov	r1, r8
 800d358:	a801      	add	r0, sp, #4
 800d35a:	f7ff feca 	bl	800d0f2 <writeInt>
 800d35e:	4631      	mov	r1, r6
 800d360:	a801      	add	r0, sp, #4
 800d362:	f7ff fec6 	bl	800d0f2 <writeInt>
 800d366:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d368:	9801      	ldr	r0, [sp, #4]
 800d36a:	4642      	mov	r2, r8
 800d36c:	f00b febb 	bl	80190e6 <memcpy>
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	4443      	add	r3, r8
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d378:	9801      	ldr	r0, [sp, #4]
 800d37a:	464a      	mov	r2, r9
 800d37c:	f00b feb3 	bl	80190e6 <memcpy>
 800d380:	9801      	ldr	r0, [sp, #4]
 800d382:	4448      	add	r0, r9
 800d384:	1b40      	subs	r0, r0, r5
 800d386:	b003      	add	sp, #12
 800d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38c:	2006      	movs	r0, #6
 800d38e:	e7bc      	b.n	800d30a <MQTTSNSerialize_publish+0x2a>
 800d390:	2f01      	cmp	r7, #1
 800d392:	d109      	bne.n	800d3a8 <MQTTSNSerialize_publish+0xc8>
 800d394:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 800d398:	a801      	add	r0, sp, #4
 800d39a:	f7ff feaa 	bl	800d0f2 <writeInt>
 800d39e:	4631      	mov	r1, r6
 800d3a0:	a801      	add	r0, sp, #4
 800d3a2:	f7ff fea6 	bl	800d0f2 <writeInt>
 800d3a6:	e7e6      	b.n	800d376 <MQTTSNSerialize_publish+0x96>
 800d3a8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d3ac:	a801      	add	r0, sp, #4
 800d3ae:	f7ff fe9a 	bl	800d0e6 <writeChar>
 800d3b2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800d3b6:	a801      	add	r0, sp, #4
 800d3b8:	f7ff fe95 	bl	800d0e6 <writeChar>
 800d3bc:	e7ef      	b.n	800d39e <MQTTSNSerialize_publish+0xbe>
 800d3be:	f06f 0001 	mvn.w	r0, #1
 800d3c2:	e7e0      	b.n	800d386 <MQTTSNSerialize_publish+0xa6>

0800d3c4 <MQTTSNSerialize_register>:
 800d3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d3ca:	9001      	str	r0, [sp, #4]
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	6830      	ldr	r0, [r6, #0]
 800d3d0:	4689      	mov	r9, r1
 800d3d2:	4690      	mov	r8, r2
 800d3d4:	461f      	mov	r7, r3
 800d3d6:	b338      	cbz	r0, 800d428 <MQTTSNSerialize_register+0x64>
 800d3d8:	f7f2 ff32 	bl	8000240 <strlen>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	1d60      	adds	r0, r4, #5
 800d3e0:	f7ff fe56 	bl	800d090 <MQTTSNPacket_len>
 800d3e4:	4548      	cmp	r0, r9
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	dc20      	bgt.n	800d42c <MQTTSNSerialize_register+0x68>
 800d3ea:	9801      	ldr	r0, [sp, #4]
 800d3ec:	f7ff fe96 	bl	800d11c <MQTTSNPacket_encode>
 800d3f0:	9b01      	ldr	r3, [sp, #4]
 800d3f2:	210a      	movs	r1, #10
 800d3f4:	4403      	add	r3, r0
 800d3f6:	a801      	add	r0, sp, #4
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	f7ff fe74 	bl	800d0e6 <writeChar>
 800d3fe:	4641      	mov	r1, r8
 800d400:	a801      	add	r0, sp, #4
 800d402:	f7ff fe76 	bl	800d0f2 <writeInt>
 800d406:	4639      	mov	r1, r7
 800d408:	a801      	add	r0, sp, #4
 800d40a:	f7ff fe72 	bl	800d0f2 <writeInt>
 800d40e:	6831      	ldr	r1, [r6, #0]
 800d410:	9801      	ldr	r0, [sp, #4]
 800d412:	b901      	cbnz	r1, 800d416 <MQTTSNSerialize_register+0x52>
 800d414:	68b1      	ldr	r1, [r6, #8]
 800d416:	4622      	mov	r2, r4
 800d418:	f00b fe65 	bl	80190e6 <memcpy>
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	4423      	add	r3, r4
 800d420:	1b58      	subs	r0, r3, r5
 800d422:	b003      	add	sp, #12
 800d424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d428:	6874      	ldr	r4, [r6, #4]
 800d42a:	e7d8      	b.n	800d3de <MQTTSNSerialize_register+0x1a>
 800d42c:	f06f 0001 	mvn.w	r0, #1
 800d430:	e7f7      	b.n	800d422 <MQTTSNSerialize_register+0x5e>

0800d432 <MQTTSNDeserialize_publish>:
 800d432:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d436:	e9dd 5b0f 	ldrd	r5, fp, [sp, #60]	; 0x3c
 800d43a:	4682      	mov	sl, r0
 800d43c:	460f      	mov	r7, r1
 800d43e:	4628      	mov	r0, r5
 800d440:	4691      	mov	r9, r2
 800d442:	4698      	mov	r8, r3
 800d444:	aa01      	add	r2, sp, #4
 800d446:	2300      	movs	r3, #0
 800d448:	4659      	mov	r1, fp
 800d44a:	9500      	str	r5, [sp, #0]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d450:	f7ff fe2b 	bl	800d0aa <MQTTSNPacket_decode>
 800d454:	9c00      	ldr	r4, [sp, #0]
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	4404      	add	r4, r0
 800d45a:	441d      	add	r5, r3
 800d45c:	9400      	str	r4, [sp, #0]
 800d45e:	1b2c      	subs	r4, r5, r4
 800d460:	455c      	cmp	r4, fp
 800d462:	dd03      	ble.n	800d46c <MQTTSNDeserialize_publish+0x3a>
 800d464:	2000      	movs	r0, #0
 800d466:	b003      	add	sp, #12
 800d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46c:	4668      	mov	r0, sp
 800d46e:	f7ff fe34 	bl	800d0da <readChar>
 800d472:	280c      	cmp	r0, #12
 800d474:	d1f6      	bne.n	800d464 <MQTTSNDeserialize_publish+0x32>
 800d476:	4668      	mov	r0, sp
 800d478:	f7ff fe2f 	bl	800d0da <readChar>
 800d47c:	2400      	movs	r4, #0
 800d47e:	f360 0407 	bfi	r4, r0, #0, #8
 800d482:	f344 13c0 	sbfx	r3, r4, #7, #1
 800d486:	f88a 3000 	strb.w	r3, [sl]
 800d48a:	f3c4 1341 	ubfx	r3, r4, #5, #2
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	f3c4 1300 	ubfx	r3, r4, #4, #1
 800d494:	f889 3000 	strb.w	r3, [r9]
 800d498:	f3c4 0301 	ubfx	r3, r4, #0, #2
 800d49c:	f014 0403 	ands.w	r4, r4, #3
 800d4a0:	7033      	strb	r3, [r6, #0]
 800d4a2:	d11d      	bne.n	800d4e0 <MQTTSNDeserialize_publish+0xae>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b03      	cmp	r3, #3
 800d4a8:	d11c      	bne.n	800d4e4 <MQTTSNDeserialize_publish+0xb2>
 800d4aa:	4668      	mov	r0, sp
 800d4ac:	f7ff fdf5 	bl	800d09a <readInt>
 800d4b0:	60b0      	str	r0, [r6, #8]
 800d4b2:	4668      	mov	r0, sp
 800d4b4:	f7ff fdf1 	bl	800d09a <readInt>
 800d4b8:	f8a8 0000 	strh.w	r0, [r8]
 800d4bc:	7833      	ldrb	r3, [r6, #0]
 800d4be:	b93b      	cbnz	r3, 800d4d0 <MQTTSNDeserialize_publish+0x9e>
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d104      	bne.n	800d4d0 <MQTTSNDeserialize_publish+0x9e>
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	68b2      	ldr	r2, [r6, #8]
 800d4ca:	6073      	str	r3, [r6, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	9b00      	ldr	r3, [sp, #0]
 800d4d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4d4:	1aed      	subs	r5, r5, r3
 800d4d6:	6015      	str	r5, [r2, #0]
 800d4d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4da:	2001      	movs	r0, #1
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	e7c2      	b.n	800d466 <MQTTSNDeserialize_publish+0x34>
 800d4e0:	2c01      	cmp	r4, #1
 800d4e2:	d104      	bne.n	800d4ee <MQTTSNDeserialize_publish+0xbc>
 800d4e4:	4668      	mov	r0, sp
 800d4e6:	f7ff fdd8 	bl	800d09a <readInt>
 800d4ea:	80b0      	strh	r0, [r6, #4]
 800d4ec:	e7e1      	b.n	800d4b2 <MQTTSNDeserialize_publish+0x80>
 800d4ee:	4668      	mov	r0, sp
 800d4f0:	f7ff fdf3 	bl	800d0da <readChar>
 800d4f4:	7130      	strb	r0, [r6, #4]
 800d4f6:	4668      	mov	r0, sp
 800d4f8:	f7ff fdef 	bl	800d0da <readChar>
 800d4fc:	7170      	strb	r0, [r6, #5]
 800d4fe:	e7d8      	b.n	800d4b2 <MQTTSNDeserialize_publish+0x80>

0800d500 <MQTTSNDeserialize_regack>:
 800d500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	461c      	mov	r4, r3
 800d50c:	4607      	mov	r7, r0
 800d50e:	2300      	movs	r3, #0
 800d510:	4620      	mov	r0, r4
 800d512:	460e      	mov	r6, r1
 800d514:	4615      	mov	r5, r2
 800d516:	4641      	mov	r1, r8
 800d518:	aa01      	add	r2, sp, #4
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	f7ff fdc5 	bl	800d0aa <MQTTSNPacket_decode>
 800d520:	9b00      	ldr	r3, [sp, #0]
 800d522:	9a01      	ldr	r2, [sp, #4]
 800d524:	4403      	add	r3, r0
 800d526:	4414      	add	r4, r2
 800d528:	1ae4      	subs	r4, r4, r3
 800d52a:	4544      	cmp	r4, r8
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	dd03      	ble.n	800d538 <MQTTSNDeserialize_regack+0x38>
 800d530:	2000      	movs	r0, #0
 800d532:	b002      	add	sp, #8
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d538:	4668      	mov	r0, sp
 800d53a:	f7ff fdce 	bl	800d0da <readChar>
 800d53e:	280b      	cmp	r0, #11
 800d540:	d1f6      	bne.n	800d530 <MQTTSNDeserialize_regack+0x30>
 800d542:	4668      	mov	r0, sp
 800d544:	f7ff fda9 	bl	800d09a <readInt>
 800d548:	8038      	strh	r0, [r7, #0]
 800d54a:	4668      	mov	r0, sp
 800d54c:	f7ff fda5 	bl	800d09a <readInt>
 800d550:	8030      	strh	r0, [r6, #0]
 800d552:	4668      	mov	r0, sp
 800d554:	f7ff fdc1 	bl	800d0da <readChar>
 800d558:	7028      	strb	r0, [r5, #0]
 800d55a:	2001      	movs	r0, #1
 800d55c:	e7e9      	b.n	800d532 <MQTTSNDeserialize_regack+0x32>

0800d55e <MQTTSNDeserialize_disconnect>:
 800d55e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d560:	460c      	mov	r4, r1
 800d562:	4605      	mov	r5, r0
 800d564:	4611      	mov	r1, r2
 800d566:	4620      	mov	r0, r4
 800d568:	aa01      	add	r2, sp, #4
 800d56a:	9400      	str	r4, [sp, #0]
 800d56c:	f7ff fd9d 	bl	800d0aa <MQTTSNPacket_decode>
 800d570:	9b00      	ldr	r3, [sp, #0]
 800d572:	9a01      	ldr	r2, [sp, #4]
 800d574:	4403      	add	r3, r0
 800d576:	4414      	add	r4, r2
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	1ae3      	subs	r3, r4, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	dc03      	bgt.n	800d588 <MQTTSNDeserialize_disconnect+0x2a>
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	b003      	add	sp, #12
 800d586:	bd30      	pop	{r4, r5, pc}
 800d588:	4668      	mov	r0, sp
 800d58a:	f7ff fda6 	bl	800d0da <readChar>
 800d58e:	2818      	cmp	r0, #24
 800d590:	d1f6      	bne.n	800d580 <MQTTSNDeserialize_disconnect+0x22>
 800d592:	9b00      	ldr	r3, [sp, #0]
 800d594:	1ae2      	subs	r2, r4, r3
 800d596:	2a02      	cmp	r2, #2
 800d598:	d105      	bne.n	800d5a6 <MQTTSNDeserialize_disconnect+0x48>
 800d59a:	4668      	mov	r0, sp
 800d59c:	f7ff fd7d 	bl	800d09a <readInt>
 800d5a0:	6028      	str	r0, [r5, #0]
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7ee      	b.n	800d584 <MQTTSNDeserialize_disconnect+0x26>
 800d5a6:	42a3      	cmp	r3, r4
 800d5a8:	d1ea      	bne.n	800d580 <MQTTSNDeserialize_disconnect+0x22>
 800d5aa:	e7fa      	b.n	800d5a2 <MQTTSNDeserialize_disconnect+0x44>

0800d5ac <LOGGER_PrintNL>:
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <LOGGER_PrintNL+0xc>)
 800d5ae:	200a      	movs	r0, #10
 800d5b0:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 800d5b4:	4710      	bx	r2
 800d5b6:	bf00      	nop
 800d5b8:	20004188 	.word	0x20004188

0800d5bc <LOGGER_Print>:
 800d5bc:	b40f      	push	{r0, r1, r2, r3}
 800d5be:	b507      	push	{r0, r1, r2, lr}
 800d5c0:	4806      	ldr	r0, [pc, #24]	; (800d5dc <LOGGER_Print+0x20>)
 800d5c2:	ab04      	add	r3, sp, #16
 800d5c4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	f000 fdb4 	bl	800e13a <9d4397e1c276e28163cdc66582db3f5f3477f47c>
 800d5d2:	b003      	add	sp, #12
 800d5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d8:	b004      	add	sp, #16
 800d5da:	4770      	bx	lr
 800d5dc:	20004188 	.word	0x20004188

0800d5e0 <LOGGER_StartSection>:
 800d5e0:	4b01      	ldr	r3, [pc, #4]	; (800d5e8 <LOGGER_StartSection+0x8>)
 800d5e2:	7818      	ldrb	r0, [r3, #0]
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	20004188 	.word	0x20004188

0800d5ec <LOGGER_EndSection>:
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <LOGGER_PrintHeader>:
 800d5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5f2:	4c0b      	ldr	r4, [pc, #44]	; (800d620 <LOGGER_PrintHeader+0x30>)
 800d5f4:	ab04      	add	r3, sp, #16
 800d5f6:	e903 0003 	stmdb	r3, {r0, r1}
 800d5fa:	7863      	ldrb	r3, [r4, #1]
 800d5fc:	b973      	cbnz	r3, 800d61c <LOGGER_PrintHeader+0x2c>
 800d5fe:	68e3      	ldr	r3, [r4, #12]
 800d600:	b10b      	cbz	r3, 800d606 <LOGGER_PrintHeader+0x16>
 800d602:	4798      	blx	r3
 800d604:	4603      	mov	r3, r0
 800d606:	4907      	ldr	r1, [pc, #28]	; (800d624 <LOGGER_PrintHeader+0x34>)
 800d608:	9a02      	ldr	r2, [sp, #8]
 800d60a:	5c8a      	ldrb	r2, [r1, r2]
 800d60c:	9201      	str	r2, [sp, #4]
 800d60e:	9a03      	ldr	r2, [sp, #12]
 800d610:	9200      	str	r2, [sp, #0]
 800d612:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800d616:	4a04      	ldr	r2, [pc, #16]	; (800d628 <LOGGER_PrintHeader+0x38>)
 800d618:	f000 fd7e 	bl	800e118 <5dd4cf8b4cc3211a4d064c2aba27f240e0c6a1fc>
 800d61c:	b004      	add	sp, #16
 800d61e:	bd10      	pop	{r4, pc}
 800d620:	20004188 	.word	0x20004188
 800d624:	0801be00 	.word	0x0801be00
 800d628:	0801bdf2 	.word	0x0801bdf2

0800d62c <LOGGER_PrintLine>:
 800d62c:	b40c      	push	{r2, r3}
 800d62e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d630:	4c0b      	ldr	r4, [pc, #44]	; (800d660 <LOGGER_PrintLine+0x34>)
 800d632:	7822      	ldrb	r2, [r4, #0]
 800d634:	466b      	mov	r3, sp
 800d636:	e883 0003 	stmia.w	r3, {r0, r1}
 800d63a:	b162      	cbz	r2, 800d656 <LOGGER_PrintLine+0x2a>
 800d63c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d640:	f7ff ffd6 	bl	800d5f0 <LOGGER_PrintHeader>
 800d644:	ab07      	add	r3, sp, #28
 800d646:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800d64a:	9a06      	ldr	r2, [sp, #24]
 800d64c:	9303      	str	r3, [sp, #12]
 800d64e:	f000 fd74 	bl	800e13a <9d4397e1c276e28163cdc66582db3f5f3477f47c>
 800d652:	f7ff ffab 	bl	800d5ac <LOGGER_PrintNL>
 800d656:	b004      	add	sp, #16
 800d658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d65c:	b002      	add	sp, #8
 800d65e:	4770      	bx	lr
 800d660:	20004188 	.word	0x20004188

0800d664 <626e3158957e216ecf22af8444eac4e472537274>:
 800d664:	b110      	cbz	r0, 800d66c <626e3158957e216ecf22af8444eac4e472537274+0x8>
 800d666:	e9d1 3100 	ldrd	r3, r1, [r1]
 800d66a:	4718      	bx	r3
 800d66c:	4770      	bx	lr

0800d66e <24edba6ab381ef8da8eede88a6ac6de0c2e16560>:
 800d66e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d672:	461e      	mov	r6, r3
 800d674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d676:	4615      	mov	r5, r2
 800d678:	079a      	lsls	r2, r3, #30
 800d67a:	e9dd 490a 	ldrd	r4, r9, [sp, #40]	; 0x28
 800d67e:	4607      	mov	r7, r0
 800d680:	4688      	mov	r8, r1
 800d682:	d021      	beq.n	800d6c8 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x5a>
 800d684:	462a      	mov	r2, r5
 800d686:	4426      	add	r6, r4
 800d688:	4414      	add	r4, r2
 800d68a:	42a2      	cmp	r2, r4
 800d68c:	d120      	bne.n	800d6d0 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x62>
 800d68e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d690:	079b      	lsls	r3, r3, #30
 800d692:	d504      	bpl.n	800d69e <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x30>
 800d694:	1b56      	subs	r6, r2, r5
 800d696:	45b1      	cmp	r9, r6
 800d698:	eb05 0406 	add.w	r4, r5, r6
 800d69c:	d822      	bhi.n	800d6e4 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x76>
 800d69e:	4620      	mov	r0, r4
 800d6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	4641      	mov	r1, r8
 800d6aa:	2020      	movs	r0, #32
 800d6ac:	47b8      	blx	r7
 800d6ae:	f10a 0a01 	add.w	sl, sl, #1
 800d6b2:	45ca      	cmp	sl, r9
 800d6b4:	eb0a 020b 	add.w	r2, sl, fp
 800d6b8:	d3f4      	bcc.n	800d6a4 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x36>
 800d6ba:	eba9 0204 	sub.w	r2, r9, r4
 800d6be:	45a1      	cmp	r9, r4
 800d6c0:	bf38      	it	cc
 800d6c2:	2200      	movcc	r2, #0
 800d6c4:	442a      	add	r2, r5
 800d6c6:	e7de      	b.n	800d686 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x18>
 800d6c8:	46a2      	mov	sl, r4
 800d6ca:	eba5 0b04 	sub.w	fp, r5, r4
 800d6ce:	e7f0      	b.n	800d6b2 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x44>
 800d6d0:	f102 0a01 	add.w	sl, r2, #1
 800d6d4:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800d6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6dc:	4641      	mov	r1, r8
 800d6de:	47b8      	blx	r7
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	e7d2      	b.n	800d68a <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x1c>
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4641      	mov	r1, r8
 800d6ec:	2020      	movs	r0, #32
 800d6ee:	47b8      	blx	r7
 800d6f0:	3601      	adds	r6, #1
 800d6f2:	e7d0      	b.n	800d696 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x28>

0800d6f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34>:
 800d6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	4694      	mov	ip, r2
 800d6fa:	e9dd 270b 	ldrd	r2, r7, [sp, #44]	; 0x2c
 800d6fe:	f017 0f02 	tst.w	r7, #2
 800d702:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	; 0x24
 800d706:	9c07      	ldr	r4, [sp, #28]
 800d708:	f89d e020 	ldrb.w	lr, [sp, #32]
 800d70c:	d11f      	bne.n	800d74e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 800d70e:	f007 0801 	and.w	r8, r7, #1
 800d712:	b14a      	cbz	r2, 800d728 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	d006      	beq.n	800d728 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 800d71a:	f1be 0f00 	cmp.w	lr, #0
 800d71e:	d102      	bne.n	800d726 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x32>
 800d720:	f017 0f0c 	tst.w	r7, #12
 800d724:	d000      	beq.n	800d728 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 800d726:	3a01      	subs	r2, #1
 800d728:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d72c:	e002      	b.n	800d734 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x40>
 800d72e:	f803 9004 	strb.w	r9, [r3, r4]
 800d732:	3401      	adds	r4, #1
 800d734:	42a5      	cmp	r5, r4
 800d736:	d901      	bls.n	800d73c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x48>
 800d738:	2c20      	cmp	r4, #32
 800d73a:	d1f8      	bne.n	800d72e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x3a>
 800d73c:	f1b8 0f00 	cmp.w	r8, #0
 800d740:	d005      	beq.n	800d74e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 800d742:	f04f 0830 	mov.w	r8, #48	; 0x30
 800d746:	42a2      	cmp	r2, r4
 800d748:	d901      	bls.n	800d74e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 800d74a:	2c20      	cmp	r4, #32
 800d74c:	d11a      	bne.n	800d784 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x90>
 800d74e:	f017 0f10 	tst.w	r7, #16
 800d752:	d014      	beq.n	800d77e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x8a>
 800d754:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800d758:	d130      	bne.n	800d7bc <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xc8>
 800d75a:	b1bc      	cbz	r4, 800d78c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x98>
 800d75c:	42a5      	cmp	r5, r4
 800d75e:	d001      	beq.n	800d764 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x70>
 800d760:	4294      	cmp	r4, r2
 800d762:	d12b      	bne.n	800d7bc <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xc8>
 800d764:	1e65      	subs	r5, r4, #1
 800d766:	d011      	beq.n	800d78c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x98>
 800d768:	2e10      	cmp	r6, #16
 800d76a:	d133      	bne.n	800d7d4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xe0>
 800d76c:	06be      	lsls	r6, r7, #26
 800d76e:	f1a4 0402 	sub.w	r4, r4, #2
 800d772:	d452      	bmi.n	800d81a <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x126>
 800d774:	2678      	movs	r6, #120	; 0x78
 800d776:	551e      	strb	r6, [r3, r4]
 800d778:	2630      	movs	r6, #48	; 0x30
 800d77a:	555e      	strb	r6, [r3, r5]
 800d77c:	1c6c      	adds	r4, r5, #1
 800d77e:	2c20      	cmp	r4, #32
 800d780:	d034      	beq.n	800d7ec <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 800d782:	e00c      	b.n	800d79e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xaa>
 800d784:	f803 8004 	strb.w	r8, [r3, r4]
 800d788:	3401      	adds	r4, #1
 800d78a:	e7dc      	b.n	800d746 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x52>
 800d78c:	2e10      	cmp	r6, #16
 800d78e:	d10f      	bne.n	800d7b0 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xbc>
 800d790:	06be      	lsls	r6, r7, #26
 800d792:	d425      	bmi.n	800d7e0 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xec>
 800d794:	2478      	movs	r4, #120	; 0x78
 800d796:	701c      	strb	r4, [r3, #0]
 800d798:	2430      	movs	r4, #48	; 0x30
 800d79a:	705c      	strb	r4, [r3, #1]
 800d79c:	2402      	movs	r4, #2
 800d79e:	f1be 0f00 	cmp.w	lr, #0
 800d7a2:	d030      	beq.n	800d806 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x112>
 800d7a4:	252d      	movs	r5, #45	; 0x2d
 800d7a6:	551d      	strb	r5, [r3, r4]
 800d7a8:	3401      	adds	r4, #1
 800d7aa:	e020      	b.n	800d7ee <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xfa>
 800d7ac:	2462      	movs	r4, #98	; 0x62
 800d7ae:	e7f2      	b.n	800d796 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xa2>
 800d7b0:	2e02      	cmp	r6, #2
 800d7b2:	d0fb      	beq.n	800d7ac <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb8>
 800d7b4:	2430      	movs	r4, #48	; 0x30
 800d7b6:	701c      	strb	r4, [r3, #0]
 800d7b8:	2401      	movs	r4, #1
 800d7ba:	e7f0      	b.n	800d79e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xaa>
 800d7bc:	2e10      	cmp	r6, #16
 800d7be:	d111      	bne.n	800d7e4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf0>
 800d7c0:	06bd      	lsls	r5, r7, #26
 800d7c2:	d428      	bmi.n	800d816 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x122>
 800d7c4:	2c20      	cmp	r4, #32
 800d7c6:	d011      	beq.n	800d7ec <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 800d7c8:	1c65      	adds	r5, r4, #1
 800d7ca:	2678      	movs	r6, #120	; 0x78
 800d7cc:	551e      	strb	r6, [r3, r4]
 800d7ce:	2d20      	cmp	r5, #32
 800d7d0:	d00c      	beq.n	800d7ec <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 800d7d2:	e7d1      	b.n	800d778 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x84>
 800d7d4:	2e02      	cmp	r6, #2
 800d7d6:	d1cf      	bne.n	800d778 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x84>
 800d7d8:	2462      	movs	r4, #98	; 0x62
 800d7da:	555c      	strb	r4, [r3, r5]
 800d7dc:	3501      	adds	r5, #1
 800d7de:	e7f6      	b.n	800d7ce <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xda>
 800d7e0:	2458      	movs	r4, #88	; 0x58
 800d7e2:	e7d8      	b.n	800d796 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xa2>
 800d7e4:	2e02      	cmp	r6, #2
 800d7e6:	d10c      	bne.n	800d802 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x10e>
 800d7e8:	2c20      	cmp	r4, #32
 800d7ea:	d108      	bne.n	800d7fe <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x10a>
 800d7ec:	2420      	movs	r4, #32
 800d7ee:	e9cd 2708 	strd	r2, r7, [sp, #32]
 800d7f2:	9407      	str	r4, [sp, #28]
 800d7f4:	4662      	mov	r2, ip
 800d7f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7fa:	f7ff bf38 	b.w	800d66e <24edba6ab381ef8da8eede88a6ac6de0c2e16560>
 800d7fe:	4625      	mov	r5, r4
 800d800:	e7ea      	b.n	800d7d8 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xe4>
 800d802:	4625      	mov	r5, r4
 800d804:	e7e3      	b.n	800d7ce <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xda>
 800d806:	077e      	lsls	r6, r7, #29
 800d808:	d501      	bpl.n	800d80e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x11a>
 800d80a:	252b      	movs	r5, #43	; 0x2b
 800d80c:	e7cb      	b.n	800d7a6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb2>
 800d80e:	073d      	lsls	r5, r7, #28
 800d810:	d5ed      	bpl.n	800d7ee <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xfa>
 800d812:	2520      	movs	r5, #32
 800d814:	e7c7      	b.n	800d7a6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb2>
 800d816:	2c20      	cmp	r4, #32
 800d818:	d0e8      	beq.n	800d7ec <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 800d81a:	1c65      	adds	r5, r4, #1
 800d81c:	2658      	movs	r6, #88	; 0x58
 800d81e:	e7d5      	b.n	800d7cc <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xd8>

0800d820 <a489971c3e4840c7373cb8be8004d6ffd709aef1>:
 800d820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	b08e      	sub	sp, #56	; 0x38
 800d826:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d828:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d82a:	bbab      	cbnz	r3, 800d898 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x78>
 800d82c:	f024 0c10 	bic.w	ip, r4, #16
 800d830:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 800d834:	d11f      	bne.n	800d876 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x56>
 800d836:	f01c 0f20 	tst.w	ip, #32
 800d83a:	bf14      	ite	ne
 800d83c:	f04f 0e41 	movne.w	lr, #65	; 0x41
 800d840:	f04f 0e61 	moveq.w	lr, #97	; 0x61
 800d844:	f10d 0818 	add.w	r8, sp, #24
 800d848:	2300      	movs	r3, #0
 800d84a:	f1ae 0e0a 	sub.w	lr, lr, #10
 800d84e:	fbb4 f7f6 	udiv	r7, r4, r6
 800d852:	fb06 4717 	mls	r7, r6, r7, r4
 800d856:	b2fd      	uxtb	r5, r7
 800d858:	2f09      	cmp	r7, #9
 800d85a:	bf94      	ite	ls
 800d85c:	3530      	addls	r5, #48	; 0x30
 800d85e:	4475      	addhi	r5, lr
 800d860:	b2ed      	uxtb	r5, r5
 800d862:	42b4      	cmp	r4, r6
 800d864:	f808 5b01 	strb.w	r5, [r8], #1
 800d868:	fbb4 f5f6 	udiv	r5, r4, r6
 800d86c:	f103 0301 	add.w	r3, r3, #1
 800d870:	d301      	bcc.n	800d876 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x56>
 800d872:	2b20      	cmp	r3, #32
 800d874:	d113      	bne.n	800d89e <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x7e>
 800d876:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800d878:	9404      	str	r4, [sp, #16]
 800d87a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800d87c:	f8cd c014 	str.w	ip, [sp, #20]
 800d880:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800d884:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 800d888:	e9cd 3400 	strd	r3, r4, [sp]
 800d88c:	ab06      	add	r3, sp, #24
 800d88e:	f7ff ff31 	bl	800d6f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34>
 800d892:	b00e      	add	sp, #56	; 0x38
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	46a4      	mov	ip, r4
 800d89a:	461c      	mov	r4, r3
 800d89c:	e7cb      	b.n	800d836 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x16>
 800d89e:	462c      	mov	r4, r5
 800d8a0:	e7d5      	b.n	800d84e <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x2e>

0800d8a2 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58>:
 800d8a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a6:	b093      	sub	sp, #76	; 0x4c
 800d8a8:	e9dd 651c 	ldrd	r6, r5, [sp, #112]	; 0x70
 800d8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ae:	ea56 0205 	orrs.w	r2, r6, r5
 800d8b2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800d8b6:	e9dd 8b20 	ldrd	r8, fp, [sp, #128]	; 0x80
 800d8ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d8bc:	d137      	bne.n	800d92e <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x8c>
 800d8be:	055a      	lsls	r2, r3, #21
 800d8c0:	f023 0910 	bic.w	r9, r3, #16
 800d8c4:	d438      	bmi.n	800d938 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x96>
 800d8c6:	f019 0f20 	tst.w	r9, #32
 800d8ca:	bf14      	ite	ne
 800d8cc:	2341      	movne	r3, #65	; 0x41
 800d8ce:	2361      	moveq	r3, #97	; 0x61
 800d8d0:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800d8d4:	2400      	movs	r4, #0
 800d8d6:	f1a3 070a 	sub.w	r7, r3, #10
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4642      	mov	r2, r8
 800d8de:	465b      	mov	r3, fp
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f7f3 f9a3 	bl	8000c2c <__aeabi_uldivmod>
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	2a09      	cmp	r2, #9
 800d8ea:	bf94      	ite	ls
 800d8ec:	3230      	addls	r2, #48	; 0x30
 800d8ee:	19d2      	addhi	r2, r2, r7
 800d8f0:	4546      	cmp	r6, r8
 800d8f2:	b2d2      	uxtb	r2, r2
 800d8f4:	eb75 050b 	sbcs.w	r5, r5, fp
 800d8f8:	f80a 2b01 	strb.w	r2, [sl], #1
 800d8fc:	f104 0401 	add.w	r4, r4, #1
 800d900:	d301      	bcc.n	800d906 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x64>
 800d902:	2c20      	cmp	r4, #32
 800d904:	d115      	bne.n	800d932 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x90>
 800d906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d908:	9304      	str	r3, [sp, #16]
 800d90a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d90c:	9807      	ldr	r0, [sp, #28]
 800d90e:	f8cd 9014 	str.w	r9, [sp, #20]
 800d912:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800d916:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800d91a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d91e:	e9cd 4300 	strd	r4, r3, [sp]
 800d922:	ab0a      	add	r3, sp, #40	; 0x28
 800d924:	f7ff fee6 	bl	800d6f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34>
 800d928:	b013      	add	sp, #76	; 0x4c
 800d92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92e:	4699      	mov	r9, r3
 800d930:	e7c9      	b.n	800d8c6 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x24>
 800d932:	4606      	mov	r6, r0
 800d934:	460d      	mov	r5, r1
 800d936:	e7d0      	b.n	800d8da <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x38>
 800d938:	2400      	movs	r4, #0
 800d93a:	e7e4      	b.n	800d906 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x64>
 800d93c:	0000      	movs	r0, r0
	...

0800d940 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>:
 800d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	b09d      	sub	sp, #116	; 0x74
 800d946:	468b      	mov	fp, r1
 800d948:	900b      	str	r0, [sp, #44]	; 0x2c
 800d94a:	4615      	mov	r5, r2
 800d94c:	2400      	movs	r4, #0
 800d94e:	f89b 0000 	ldrb.w	r0, [fp]
 800d952:	b968      	cbnz	r0, 800d970 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x30>
 800d954:	f06f 0201 	mvn.w	r2, #1
 800d958:	42a2      	cmp	r2, r4
 800d95a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d95c:	f04f 33ff 	mov.w	r3, #4294967295
 800d960:	bf28      	it	cs
 800d962:	4622      	movcs	r2, r4
 800d964:	f7ff fe7e 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800d968:	4620      	mov	r0, r4
 800d96a:	b01d      	add	sp, #116	; 0x74
 800d96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d970:	2825      	cmp	r0, #37	; 0x25
 800d972:	f10b 0b01 	add.w	fp, fp, #1
 800d976:	d008      	beq.n	800d98a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x4a>
 800d978:	4622      	mov	r2, r4
 800d97a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d97c:	1c66      	adds	r6, r4, #1
 800d97e:	f04f 33ff 	mov.w	r3, #4294967295
 800d982:	f7ff fe6f 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800d986:	4634      	mov	r4, r6
 800d988:	e7e1      	b.n	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800d98a:	f04f 0a00 	mov.w	sl, #0
 800d98e:	e00d      	b.n	800d9ac <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6c>
 800d990:	2b2d      	cmp	r3, #45	; 0x2d
 800d992:	d02a      	beq.n	800d9ea <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xaa>
 800d994:	2b30      	cmp	r3, #48	; 0x30
 800d996:	d006      	beq.n	800d9a6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x66>
 800d998:	3b30      	subs	r3, #48	; 0x30
 800d99a:	2b09      	cmp	r3, #9
 800d99c:	f04f 0600 	mov.w	r6, #0
 800d9a0:	d811      	bhi.n	800d9c6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 800d9a2:	200a      	movs	r0, #10
 800d9a4:	e032      	b.n	800da0c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xcc>
 800d9a6:	f04a 0a01 	orr.w	sl, sl, #1
 800d9aa:	4693      	mov	fp, r2
 800d9ac:	465a      	mov	r2, fp
 800d9ae:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d9b2:	2b2b      	cmp	r3, #43	; 0x2b
 800d9b4:	d01c      	beq.n	800d9f0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xb0>
 800d9b6:	d8eb      	bhi.n	800d990 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50>
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d01c      	beq.n	800d9f6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xb6>
 800d9bc:	2b23      	cmp	r3, #35	; 0x23
 800d9be:	d01d      	beq.n	800d9fc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xbc>
 800d9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d9c2:	d02b      	beq.n	800da1c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xdc>
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	f89b 3000 	ldrb.w	r3, [fp]
 800d9ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d9cc:	d177      	bne.n	800dabe <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x17e>
 800d9ce:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800d9d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d9d6:	2909      	cmp	r1, #9
 800d9d8:	f10b 0301 	add.w	r3, fp, #1
 800d9dc:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800d9e0:	d863      	bhi.n	800daaa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x16a>
 800d9e2:	2700      	movs	r7, #0
 800d9e4:	f04f 0c0a 	mov.w	ip, #10
 800d9e8:	e026      	b.n	800da38 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xf8>
 800d9ea:	f04a 0a02 	orr.w	sl, sl, #2
 800d9ee:	e7dc      	b.n	800d9aa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 800d9f0:	f04a 0a04 	orr.w	sl, sl, #4
 800d9f4:	e7d9      	b.n	800d9aa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 800d9f6:	f04a 0a08 	orr.w	sl, sl, #8
 800d9fa:	e7d6      	b.n	800d9aa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 800d9fc:	f04a 0a10 	orr.w	sl, sl, #16
 800da00:	e7d3      	b.n	800d9aa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 800da02:	fb00 3306 	mla	r3, r0, r6, r3
 800da06:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800da0a:	4693      	mov	fp, r2
 800da0c:	465a      	mov	r2, fp
 800da0e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800da12:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800da16:	2909      	cmp	r1, #9
 800da18:	d9f3      	bls.n	800da02 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc2>
 800da1a:	e7d4      	b.n	800d9c6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 800da1c:	f855 6b04 	ldr.w	r6, [r5], #4
 800da20:	2e00      	cmp	r6, #0
 800da22:	bfbc      	itt	lt
 800da24:	f04a 0a02 	orrlt.w	sl, sl, #2
 800da28:	4276      	neglt	r6, r6
 800da2a:	4693      	mov	fp, r2
 800da2c:	e7cb      	b.n	800d9c6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 800da2e:	fb0c 2207 	mla	r2, ip, r7, r2
 800da32:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800da36:	460b      	mov	r3, r1
 800da38:	4619      	mov	r1, r3
 800da3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da3e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800da42:	2809      	cmp	r0, #9
 800da44:	d9f3      	bls.n	800da2e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xee>
 800da46:	469b      	mov	fp, r3
 800da48:	465b      	mov	r3, fp
 800da4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da4e:	2a6c      	cmp	r2, #108	; 0x6c
 800da50:	d03c      	beq.n	800dacc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x18c>
 800da52:	d836      	bhi.n	800dac2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x182>
 800da54:	2a68      	cmp	r2, #104	; 0x68
 800da56:	d042      	beq.n	800dade <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x19e>
 800da58:	2a6a      	cmp	r2, #106	; 0x6a
 800da5a:	d04b      	beq.n	800daf4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1b4>
 800da5c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800da60:	2866      	cmp	r0, #102	; 0x66
 800da62:	f200 8087 	bhi.w	800db74 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x234>
 800da66:	2857      	cmp	r0, #87	; 0x57
 800da68:	d85e      	bhi.n	800db28 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1e8>
 800da6a:	2825      	cmp	r0, #37	; 0x25
 800da6c:	d084      	beq.n	800d978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 800da6e:	2846      	cmp	r0, #70	; 0x46
 800da70:	d182      	bne.n	800d978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 800da72:	f04a 0a20 	orr.w	sl, sl, #32
 800da76:	3507      	adds	r5, #7
 800da78:	f025 0507 	bic.w	r5, r5, #7
 800da7c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800da80:	4610      	mov	r0, r2
 800da82:	4619      	mov	r1, r3
 800da84:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800da88:	f7f3 f806 	bl	8000a98 <__aeabi_dcmpeq>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	f040 812d 	bne.w	800dcec <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3ac>
 800da92:	2303      	movs	r3, #3
 800da94:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4ba7      	ldr	r3, [pc, #668]	; (800dd38 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3f8>)
 800da9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da9e:	48a7      	ldr	r0, [pc, #668]	; (800dd3c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 800daa0:	4622      	mov	r2, r4
 800daa2:	f7ff fde4 	bl	800d66e <24edba6ab381ef8da8eede88a6ac6de0c2e16560>
 800daa6:	4604      	mov	r4, r0
 800daa8:	e751      	b.n	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800daaa:	2a2a      	cmp	r2, #42	; 0x2a
 800daac:	d106      	bne.n	800dabc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x17c>
 800daae:	f855 7b04 	ldr.w	r7, [r5], #4
 800dab2:	f10b 0b02 	add.w	fp, fp, #2
 800dab6:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800daba:	e7c5      	b.n	800da48 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x108>
 800dabc:	469b      	mov	fp, r3
 800dabe:	2700      	movs	r7, #0
 800dac0:	e7c2      	b.n	800da48 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x108>
 800dac2:	2a7a      	cmp	r2, #122	; 0x7a
 800dac4:	d1ca      	bne.n	800da5c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 800dac6:	f44a 7a80 	orr.w	sl, sl, #256	; 0x100
 800daca:	e00e      	b.n	800daea <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1aa>
 800dacc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800dad0:	2a6c      	cmp	r2, #108	; 0x6c
 800dad2:	d1f8      	bne.n	800dac6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x186>
 800dad4:	f44a 7a40 	orr.w	sl, sl, #768	; 0x300
 800dad8:	f10b 0b02 	add.w	fp, fp, #2
 800dadc:	e7be      	b.n	800da5c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 800dade:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800dae2:	2a68      	cmp	r2, #104	; 0x68
 800dae4:	d003      	beq.n	800daee <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1ae>
 800dae6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800daea:	469b      	mov	fp, r3
 800daec:	e7b6      	b.n	800da5c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 800daee:	f04a 0ac0 	orr.w	sl, sl, #192	; 0xc0
 800daf2:	e7f1      	b.n	800dad8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x198>
 800daf4:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 800daf8:	e7f7      	b.n	800daea <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1aa>
 800dafa:	2b0a      	cmp	r3, #10
 800dafc:	f000 82a3 	beq.w	800e046 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x706>
 800db00:	2b07      	cmp	r3, #7
 800db02:	f47f af39 	bne.w	800d978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 800db06:	f04a 0321 	orr.w	r3, sl, #33	; 0x21
 800db0a:	9304      	str	r3, [sp, #16]
 800db0c:	2308      	movs	r3, #8
 800db0e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800db12:	2310      	movs	r3, #16
 800db14:	e9cd 2300 	strd	r2, r3, [sp]
 800db18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1e:	4887      	ldr	r0, [pc, #540]	; (800dd3c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 800db20:	4622      	mov	r2, r4
 800db22:	f7ff fe7d 	bl	800d820 <a489971c3e4840c7373cb8be8004d6ffd709aef1>
 800db26:	e7be      	b.n	800daa6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x166>
 800db28:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
 800db2c:	2b0e      	cmp	r3, #14
 800db2e:	f63f af23 	bhi.w	800d978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 800db32:	a201      	add	r2, pc, #4	; (adr r2, 800db38 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1f8>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800dba3 	.word	0x0800dba3
 800db3c:	0800d979 	.word	0x0800d979
 800db40:	0800d979 	.word	0x0800d979
 800db44:	0800d979 	.word	0x0800d979
 800db48:	0800d979 	.word	0x0800d979
 800db4c:	0800d979 	.word	0x0800d979
 800db50:	0800d979 	.word	0x0800d979
 800db54:	0800d979 	.word	0x0800d979
 800db58:	0800d979 	.word	0x0800d979
 800db5c:	0800d979 	.word	0x0800d979
 800db60:	0800dba3 	.word	0x0800dba3
 800db64:	0800dfad 	.word	0x0800dfad
 800db68:	0800dba3 	.word	0x0800dba3
 800db6c:	0800d979 	.word	0x0800d979
 800db70:	0800da77 	.word	0x0800da77
 800db74:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b0f      	cmp	r3, #15
 800db7c:	f63f aefc 	bhi.w	800d978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 800db80:	2201      	movs	r2, #1
 800db82:	409a      	lsls	r2, r3
 800db84:	f249 0141 	movw	r1, #36929	; 0x9041
 800db88:	400a      	ands	r2, r1
 800db8a:	d0b6      	beq.n	800dafa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1ba>
 800db8c:	2878      	cmp	r0, #120	; 0x78
 800db8e:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800db92:	d124      	bne.n	800dbde <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x29e>
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 808b 	beq.w	800dcb0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x370>
 800db9a:	f02a 020d 	bic.w	r2, sl, #13
 800db9e:	2110      	movs	r1, #16
 800dba0:	e007      	b.n	800dbb2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 800dba2:	2862      	cmp	r0, #98	; 0x62
 800dba4:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800dba8:	d126      	bne.n	800dbf8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2b8>
 800dbaa:	b9ab      	cbnz	r3, 800dbd8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x298>
 800dbac:	f02a 020c 	bic.w	r2, sl, #12
 800dbb0:	2102      	movs	r1, #2
 800dbb2:	f412 7300 	ands.w	r3, r2, #512	; 0x200
 800dbb6:	d07e      	beq.n	800dcb6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x376>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e9cd 6207 	strd	r6, r2, [sp, #28]
 800dbbe:	e9cd 1304 	strd	r1, r3, [sp, #16]
 800dbc2:	f105 0807 	add.w	r8, r5, #7
 800dbc6:	f028 0807 	bic.w	r8, r8, #7
 800dbca:	9706      	str	r7, [sp, #24]
 800dbcc:	9302      	str	r3, [sp, #8]
 800dbce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800dbd2:	e9cd 2300 	strd	r2, r3, [sp]
 800dbd6:	e03b      	b.n	800dc50 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x310>
 800dbd8:	f02a 020d 	bic.w	r2, sl, #13
 800dbdc:	e7e8      	b.n	800dbb0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x270>
 800dbde:	286f      	cmp	r0, #111	; 0x6f
 800dbe0:	d012      	beq.n	800dc08 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2c8>
 800dbe2:	2869      	cmp	r0, #105	; 0x69
 800dbe4:	f02a 0210 	bic.w	r2, sl, #16
 800dbe8:	d03d      	beq.n	800dc66 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x326>
 800dbea:	f02a 021c 	bic.w	r2, sl, #28
 800dbee:	b10b      	cbz	r3, 800dbf4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2b4>
 800dbf0:	f02a 021d 	bic.w	r2, sl, #29
 800dbf4:	210a      	movs	r1, #10
 800dbf6:	e7dc      	b.n	800dbb2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 800dbf8:	2858      	cmp	r0, #88	; 0x58
 800dbfa:	d10d      	bne.n	800dc18 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2d8>
 800dbfc:	bb83      	cbnz	r3, 800dc60 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x320>
 800dbfe:	f02a 020c 	bic.w	r2, sl, #12
 800dc02:	f042 0220 	orr.w	r2, r2, #32
 800dc06:	e7ca      	b.n	800db9e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x25e>
 800dc08:	b91b      	cbnz	r3, 800dc12 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2d2>
 800dc0a:	f02a 020c 	bic.w	r2, sl, #12
 800dc0e:	2108      	movs	r1, #8
 800dc10:	e7cf      	b.n	800dbb2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 800dc12:	f02a 020d 	bic.w	r2, sl, #13
 800dc16:	e7fa      	b.n	800dc0e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2ce>
 800dc18:	bb3b      	cbnz	r3, 800dc6a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x32a>
 800dc1a:	f02a 0210 	bic.w	r2, sl, #16
 800dc1e:	0593      	lsls	r3, r2, #22
 800dc20:	d526      	bpl.n	800dc70 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x330>
 800dc22:	3507      	adds	r5, #7
 800dc24:	f025 0507 	bic.w	r5, r5, #7
 800dc28:	46a8      	mov	r8, r5
 800dc2a:	686d      	ldr	r5, [r5, #4]
 800dc2c:	f858 3b08 	ldr.w	r3, [r8], #8
 800dc30:	9706      	str	r7, [sp, #24]
 800dc32:	e9cd 6207 	strd	r6, r2, [sp, #28]
 800dc36:	200a      	movs	r0, #10
 800dc38:	0fea      	lsrs	r2, r5, #31
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc42:	9202      	str	r2, [sp, #8]
 800dc44:	da02      	bge.n	800dc4c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x30c>
 800dc46:	425b      	negs	r3, r3
 800dc48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800dc4c:	e9cd 3500 	strd	r3, r5, [sp]
 800dc50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc52:	483a      	ldr	r0, [pc, #232]	; (800dd3c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 800dc54:	4622      	mov	r2, r4
 800dc56:	f7ff fe24 	bl	800d8a2 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58>
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	4645      	mov	r5, r8
 800dc5e:	e676      	b.n	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800dc60:	f02a 020d 	bic.w	r2, sl, #13
 800dc64:	e7cd      	b.n	800dc02 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2c2>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0d9      	beq.n	800dc1e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2de>
 800dc6a:	f02a 0211 	bic.w	r2, sl, #17
 800dc6e:	e7d6      	b.n	800dc1e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2de>
 800dc70:	05d0      	lsls	r0, r2, #23
 800dc72:	f105 0804 	add.w	r8, r5, #4
 800dc76:	d501      	bpl.n	800dc7c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x33c>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	e003      	b.n	800dc84 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x344>
 800dc7c:	0651      	lsls	r1, r2, #25
 800dc7e:	d512      	bpl.n	800dca6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x366>
 800dc80:	f995 3000 	ldrsb.w	r3, [r5]
 800dc84:	9702      	str	r7, [sp, #8]
 800dc86:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800dc8a:	220a      	movs	r2, #10
 800dc8c:	9201      	str	r2, [sp, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 800dc94:	9200      	str	r2, [sp, #0]
 800dc96:	bfb8      	it	lt
 800dc98:	425b      	neglt	r3, r3
 800dc9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc9c:	4827      	ldr	r0, [pc, #156]	; (800dd3c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 800dc9e:	4622      	mov	r2, r4
 800dca0:	f7ff fdbe 	bl	800d820 <a489971c3e4840c7373cb8be8004d6ffd709aef1>
 800dca4:	e7d9      	b.n	800dc5a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x31a>
 800dca6:	0613      	lsls	r3, r2, #24
 800dca8:	d5e6      	bpl.n	800dc78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x338>
 800dcaa:	f9b5 3000 	ldrsh.w	r3, [r5]
 800dcae:	e7e9      	b.n	800dc84 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x344>
 800dcb0:	f02a 020c 	bic.w	r2, sl, #12
 800dcb4:	e773      	b.n	800db9e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x25e>
 800dcb6:	05d0      	lsls	r0, r2, #23
 800dcb8:	f105 0804 	add.w	r8, r5, #4
 800dcbc:	d506      	bpl.n	800dccc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38c>
 800dcbe:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800dcc2:	e9cd 1701 	strd	r1, r7, [sp, #4]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	e7e6      	b.n	800dc9a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x35a>
 800dccc:	0650      	lsls	r0, r2, #25
 800dcce:	d507      	bpl.n	800dce0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3a0>
 800dcd0:	782b      	ldrb	r3, [r5, #0]
 800dcd2:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	e9cd 1701 	strd	r1, r7, [sp, #4]
 800dcdc:	9200      	str	r2, [sp, #0]
 800dcde:	e7dc      	b.n	800dc9a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x35a>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800dce6:	bf18      	it	ne
 800dce8:	b29b      	uxthne	r3, r3
 800dcea:	e7f2      	b.n	800dcd2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x392>
 800dcec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf4:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800dcf8:	f7f2 fed8 	bl	8000aac <__aeabi_dcmplt>
 800dcfc:	b128      	cbz	r0, 800dd0a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3ca>
 800dcfe:	2304      	movs	r3, #4
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x400>)
 800dd08:	e6c8      	b.n	800da9c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 800dd0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd0e:	4b0d      	ldr	r3, [pc, #52]	; (800dd44 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x404>)
 800dd10:	f04f 32ff 	mov.w	r2, #4294967295
 800dd14:	f7f2 fee8 	bl	8000ae8 <__aeabi_dcmpgt>
 800dd18:	b1d0      	cbz	r0, 800dd50 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x410>
 800dd1a:	f00a 0304 	and.w	r3, sl, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	4a09      	ldr	r2, [pc, #36]	; (800dd48 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x408>)
 800dd22:	bf0c      	ite	eq
 800dd24:	2303      	moveq	r3, #3
 800dd26:	2304      	movne	r3, #4
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800dd2e:	4b07      	ldr	r3, [pc, #28]	; (800dd4c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x40c>)
 800dd30:	bf08      	it	eq
 800dd32:	4613      	moveq	r3, r2
 800dd34:	e6b2      	b.n	800da9c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 800dd36:	bf00      	nop
 800dd38:	0801be13 	.word	0x0801be13
 800dd3c:	0800d665 	.word	0x0800d665
 800dd40:	0801be17 	.word	0x0801be17
 800dd44:	7fefffff 	.word	0x7fefffff
 800dd48:	0801be0f 	.word	0x0801be0f
 800dd4c:	0801be0a 	.word	0x0801be0a
 800dd50:	a3ad      	add	r3, pc, #692	; (adr r3, 800e008 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6c8>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd5a:	f7f2 fec5 	bl	8000ae8 <__aeabi_dcmpgt>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f47f adf4 	bne.w	800d94c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc>
 800dd64:	a3aa      	add	r3, pc, #680	; (adr r3, 800e010 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6d0>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd6e:	f7f2 fe9d 	bl	8000aac <__aeabi_dcmplt>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f47f adea 	bne.w	800d94c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc>
 800dd78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f7f2 fe94 	bl	8000aac <__aeabi_dcmplt>
 800dd84:	b190      	cbz	r0, 800ddac <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x46c>
 800dd86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	f7f2 fa63 	bl	8000258 <__aeabi_dsub>
 800dd92:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dd96:	2301      	movs	r3, #1
 800dd98:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd9a:	f41a 6880 	ands.w	r8, sl, #1024	; 0x400
 800dd9e:	d067      	beq.n	800de70 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x530>
 800dda0:	2f09      	cmp	r7, #9
 800dda2:	d805      	bhi.n	800ddb0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x470>
 800dda4:	970e      	str	r7, [sp, #56]	; 0x38
 800dda6:	f04f 0800 	mov.w	r8, #0
 800ddaa:	e011      	b.n	800ddd0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 800ddac:	900f      	str	r0, [sp, #60]	; 0x3c
 800ddae:	e7f4      	b.n	800dd9a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x45a>
 800ddb0:	ab14      	add	r3, sp, #80	; 0x50
 800ddb2:	f1a7 0209 	sub.w	r2, r7, #9
 800ddb6:	f04f 0800 	mov.w	r8, #0
 800ddba:	2130      	movs	r1, #48	; 0x30
 800ddbc:	f108 0801 	add.w	r8, r8, #1
 800ddc0:	eba7 0008 	sub.w	r0, r7, r8
 800ddc4:	f1b8 0f20 	cmp.w	r8, #32
 800ddc8:	f803 1b01 	strb.w	r1, [r3], #1
 800ddcc:	900e      	str	r0, [sp, #56]	; 0x38
 800ddce:	d14c      	bne.n	800de6a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x52a>
 800ddd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ddd4:	f7f2 fe92 	bl	8000afc <__aeabi_d2iz>
 800ddd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddda:	4b8f      	ldr	r3, [pc, #572]	; (800e018 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6d8>)
 800dddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde4:	4681      	mov	r9, r0
 800dde6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ddea:	f7f2 fb83 	bl	80004f4 <__aeabi_i2d>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ddf6:	f7f2 fa2f 	bl	8000258 <__aeabi_dsub>
 800ddfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddfe:	f7f2 fbe3 	bl	80005c8 <__aeabi_dmul>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800de0a:	f7f2 fe9f 	bl	8000b4c <__aeabi_d2uiz>
 800de0e:	4607      	mov	r7, r0
 800de10:	f7f2 fb60 	bl	80004d4 <__aeabi_ui2d>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800de1c:	f7f2 fa1c 	bl	8000258 <__aeabi_dsub>
 800de20:	4602      	mov	r2, r0
 800de22:	460b      	mov	r3, r1
 800de24:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800de28:	4b7c      	ldr	r3, [pc, #496]	; (800e01c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	f7f2 fe5c 	bl	8000ae8 <__aeabi_dcmpgt>
 800de30:	b308      	cbz	r0, 800de76 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x536>
 800de32:	3701      	adds	r7, #1
 800de34:	4638      	mov	r0, r7
 800de36:	f7f2 fb4d 	bl	80004d4 <__aeabi_ui2d>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de42:	f7f2 fe3d 	bl	8000ac0 <__aeabi_dcmple>
 800de46:	b110      	cbz	r0, 800de4e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 800de48:	f109 0901 	add.w	r9, r9, #1
 800de4c:	2700      	movs	r7, #0
 800de4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de50:	b1f3      	cbz	r3, 800de90 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x550>
 800de52:	ab14      	add	r3, sp, #80	; 0x50
 800de54:	eb03 0208 	add.w	r2, r3, r8
 800de58:	210a      	movs	r1, #10
 800de5a:	f1b8 0f20 	cmp.w	r8, #32
 800de5e:	d155      	bne.n	800df0c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5cc>
 800de60:	980e      	ldr	r0, [sp, #56]	; 0x38
 800de62:	aa14      	add	r2, sp, #80	; 0x50
 800de64:	4440      	add	r0, r8
 800de66:	2130      	movs	r1, #48	; 0x30
 800de68:	e063      	b.n	800df32 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5f2>
 800de6a:	4590      	cmp	r8, r2
 800de6c:	d1a6      	bne.n	800ddbc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x47c>
 800de6e:	e7af      	b.n	800ddd0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 800de70:	2306      	movs	r3, #6
 800de72:	930e      	str	r3, [sp, #56]	; 0x38
 800de74:	e7ac      	b.n	800ddd0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 800de76:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800de7a:	4b68      	ldr	r3, [pc, #416]	; (800e01c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	f7f2 fe15 	bl	8000aac <__aeabi_dcmplt>
 800de82:	2800      	cmp	r0, #0
 800de84:	d1e3      	bne.n	800de4e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 800de86:	b10f      	cbz	r7, 800de8c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x54c>
 800de88:	07fb      	lsls	r3, r7, #31
 800de8a:	d5e0      	bpl.n	800de4e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 800de8c:	3701      	adds	r7, #1
 800de8e:	e7de      	b.n	800de4e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 800de90:	4648      	mov	r0, r9
 800de92:	f7f2 fb2f 	bl	80004f4 <__aeabi_i2d>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de9e:	f7f2 f9db 	bl	8000258 <__aeabi_dsub>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800deaa:	4b5c      	ldr	r3, [pc, #368]	; (800e01c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 800deac:	2200      	movs	r2, #0
 800deae:	f7f2 fdfd 	bl	8000aac <__aeabi_dcmplt>
 800deb2:	b130      	cbz	r0, 800dec2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x582>
 800deb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800deb8:	4b58      	ldr	r3, [pc, #352]	; (800e01c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 800deba:	2200      	movs	r2, #0
 800debc:	f7f2 fe14 	bl	8000ae8 <__aeabi_dcmpgt>
 800dec0:	b120      	cbz	r0, 800decc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 800dec2:	f019 0f01 	tst.w	r9, #1
 800dec6:	d001      	beq.n	800decc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 800dec8:	f109 0901 	add.w	r9, r9, #1
 800decc:	aa14      	add	r2, sp, #80	; 0x50
 800dece:	eb02 0108 	add.w	r1, r2, r8
 800ded2:	200a      	movs	r0, #10
 800ded4:	f1b8 0f20 	cmp.w	r8, #32
 800ded8:	d00b      	beq.n	800def2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5b2>
 800deda:	fb99 f7f0 	sdiv	r7, r9, r0
 800dede:	fb00 9317 	mls	r3, r0, r7, r9
 800dee2:	3330      	adds	r3, #48	; 0x30
 800dee4:	f801 3b01 	strb.w	r3, [r1], #1
 800dee8:	f108 0801 	add.w	r8, r8, #1
 800deec:	46b9      	mov	r9, r7
 800deee:	2f00      	cmp	r7, #0
 800def0:	d1f0      	bne.n	800ded4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x594>
 800def2:	f00a 0303 	and.w	r3, sl, #3
 800def6:	2b01      	cmp	r3, #1
 800def8:	d13a      	bne.n	800df70 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 800defa:	b3ce      	cbz	r6, 800df70 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 800defc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800defe:	b913      	cbnz	r3, 800df06 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5c6>
 800df00:	f01a 0f0c 	tst.w	sl, #12
 800df04:	d000      	beq.n	800df08 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5c8>
 800df06:	3e01      	subs	r6, #1
 800df08:	2330      	movs	r3, #48	; 0x30
 800df0a:	e026      	b.n	800df5a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x61a>
 800df0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df0e:	fbb7 f0f1 	udiv	r0, r7, r1
 800df12:	3b01      	subs	r3, #1
 800df14:	930e      	str	r3, [sp, #56]	; 0x38
 800df16:	fb01 7310 	mls	r3, r1, r0, r7
 800df1a:	3330      	adds	r3, #48	; 0x30
 800df1c:	2f09      	cmp	r7, #9
 800df1e:	f802 3b01 	strb.w	r3, [r2], #1
 800df22:	f108 0801 	add.w	r8, r8, #1
 800df26:	d99b      	bls.n	800de60 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x520>
 800df28:	4607      	mov	r7, r0
 800df2a:	e796      	b.n	800de5a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x51a>
 800df2c:	f808 1002 	strb.w	r1, [r8, r2]
 800df30:	4698      	mov	r8, r3
 800df32:	f1b8 0f20 	cmp.w	r8, #32
 800df36:	d0c9      	beq.n	800decc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 800df38:	4580      	cmp	r8, r0
 800df3a:	f108 0301 	add.w	r3, r8, #1
 800df3e:	d1f5      	bne.n	800df2c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5ec>
 800df40:	4698      	mov	r8, r3
 800df42:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800df46:	eb0d 0203 	add.w	r2, sp, r3
 800df4a:	232e      	movs	r3, #46	; 0x2e
 800df4c:	f802 3c20 	strb.w	r3, [r2, #-32]
 800df50:	e7bc      	b.n	800decc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 800df52:	f802 3008 	strb.w	r3, [r2, r8]
 800df56:	f108 0801 	add.w	r8, r8, #1
 800df5a:	45b0      	cmp	r8, r6
 800df5c:	d208      	bcs.n	800df70 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 800df5e:	f1b8 0f20 	cmp.w	r8, #32
 800df62:	d1f6      	bne.n	800df52 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x612>
 800df64:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800df68:	f8cd 8000 	str.w	r8, [sp]
 800df6c:	ab14      	add	r3, sp, #80	; 0x50
 800df6e:	e595      	b.n	800da9c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 800df70:	f1b8 0f20 	cmp.w	r8, #32
 800df74:	d0f6      	beq.n	800df64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 800df76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df78:	b143      	cbz	r3, 800df8c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x64c>
 800df7a:	f108 0370 	add.w	r3, r8, #112	; 0x70
 800df7e:	446b      	add	r3, sp
 800df80:	222d      	movs	r2, #45	; 0x2d
 800df82:	f803 2c20 	strb.w	r2, [r3, #-32]
 800df86:	f108 0801 	add.w	r8, r8, #1
 800df8a:	e7eb      	b.n	800df64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 800df8c:	f01a 0f04 	tst.w	sl, #4
 800df90:	d004      	beq.n	800df9c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x65c>
 800df92:	f108 0370 	add.w	r3, r8, #112	; 0x70
 800df96:	446b      	add	r3, sp
 800df98:	222b      	movs	r2, #43	; 0x2b
 800df9a:	e7f2      	b.n	800df82 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x642>
 800df9c:	f01a 0f08 	tst.w	sl, #8
 800dfa0:	d0e0      	beq.n	800df64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 800dfa2:	f108 0370 	add.w	r3, r8, #112	; 0x70
 800dfa6:	446b      	add	r3, sp
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	e7ea      	b.n	800df82 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x642>
 800dfac:	f01a 0a02 	ands.w	sl, sl, #2
 800dfb0:	d025      	beq.n	800dffe <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6be>
 800dfb2:	2701      	movs	r7, #1
 800dfb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb6:	f815 0b04 	ldrb.w	r0, [r5], #4
 800dfba:	f04f 33ff 	mov.w	r3, #4294967295
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	f104 0801 	add.w	r8, r4, #1
 800dfc4:	f7ff fb4e 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800dfc8:	f1ba 0f00 	cmp.w	sl, #0
 800dfcc:	d039      	beq.n	800e042 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x702>
 800dfce:	463c      	mov	r4, r7
 800dfd0:	4642      	mov	r2, r8
 800dfd2:	e02f      	b.n	800e034 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6f4>
 800dfd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfda:	2020      	movs	r0, #32
 800dfdc:	f7ff fb42 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800dfe0:	19e2      	adds	r2, r4, r7
 800dfe2:	3701      	adds	r7, #1
 800dfe4:	42be      	cmp	r6, r7
 800dfe6:	d8f5      	bhi.n	800dfd4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x694>
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	f106 33ff 	add.w	r3, r6, #4294967295
 800dfee:	bf08      	it	eq
 800dff0:	2300      	moveq	r3, #0
 800dff2:	f106 0701 	add.w	r7, r6, #1
 800dff6:	441c      	add	r4, r3
 800dff8:	bf08      	it	eq
 800dffa:	2702      	moveq	r7, #2
 800dffc:	e7da      	b.n	800dfb4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x674>
 800dffe:	4657      	mov	r7, sl
 800e000:	e7ee      	b.n	800dfe0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a0>
 800e002:	bf00      	nop
 800e004:	f3af 8000 	nop.w
 800e008:	00000000 	.word	0x00000000
 800e00c:	41cdcd65 	.word	0x41cdcd65
 800e010:	00000000 	.word	0x00000000
 800e014:	c1cdcd65 	.word	0xc1cdcd65
 800e018:	0801be20 	.word	0x0801be20
 800e01c:	3fe00000 	.word	0x3fe00000
 800e020:	f102 0901 	add.w	r9, r2, #1
 800e024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e026:	f04f 33ff 	mov.w	r3, #4294967295
 800e02a:	2020      	movs	r0, #32
 800e02c:	f7ff fb1a 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800e030:	3401      	adds	r4, #1
 800e032:	464a      	mov	r2, r9
 800e034:	42a6      	cmp	r6, r4
 800e036:	d8f3      	bhi.n	800e020 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6e0>
 800e038:	1bf3      	subs	r3, r6, r7
 800e03a:	42be      	cmp	r6, r7
 800e03c:	bf38      	it	cc
 800e03e:	2300      	movcc	r3, #0
 800e040:	4498      	add	r8, r3
 800e042:	4644      	mov	r4, r8
 800e044:	e483      	b.n	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800e046:	f855 9b04 	ldr.w	r9, [r5], #4
 800e04a:	2f00      	cmp	r7, #0
 800e04c:	bf14      	ite	ne
 800e04e:	463b      	movne	r3, r7
 800e050:	f04f 33ff 	moveq.w	r3, #4294967295
 800e054:	444b      	add	r3, r9
 800e056:	46c8      	mov	r8, r9
 800e058:	f898 2000 	ldrb.w	r2, [r8]
 800e05c:	b10a      	cbz	r2, 800e062 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x722>
 800e05e:	4543      	cmp	r3, r8
 800e060:	d110      	bne.n	800e084 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x744>
 800e062:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800e066:	eba8 0809 	sub.w	r8, r8, r9
 800e06a:	930c      	str	r3, [sp, #48]	; 0x30
 800e06c:	d002      	beq.n	800e074 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x734>
 800e06e:	45b8      	cmp	r8, r7
 800e070:	bf28      	it	cs
 800e072:	46b8      	movcs	r8, r7
 800e074:	f01a 0302 	ands.w	r3, sl, #2
 800e078:	930e      	str	r3, [sp, #56]	; 0x38
 800e07a:	d11c      	bne.n	800e0b6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x776>
 800e07c:	4622      	mov	r2, r4
 800e07e:	eba8 0a04 	sub.w	sl, r8, r4
 800e082:	e00b      	b.n	800e09c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x75c>
 800e084:	f108 0801 	add.w	r8, r8, #1
 800e088:	e7e6      	b.n	800e058 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x718>
 800e08a:	1c53      	adds	r3, r2, #1
 800e08c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e08e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e090:	f04f 33ff 	mov.w	r3, #4294967295
 800e094:	2020      	movs	r0, #32
 800e096:	f7ff fae5 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800e09a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e09c:	eb02 030a 	add.w	r3, r2, sl
 800e0a0:	429e      	cmp	r6, r3
 800e0a2:	d8f2      	bhi.n	800e08a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x74a>
 800e0a4:	eba6 0308 	sub.w	r3, r6, r8
 800e0a8:	4546      	cmp	r6, r8
 800e0aa:	bf38      	it	cc
 800e0ac:	2300      	movcc	r3, #0
 800e0ae:	f108 0801 	add.w	r8, r8, #1
 800e0b2:	441c      	add	r4, r3
 800e0b4:	4498      	add	r8, r3
 800e0b6:	eba4 0a09 	sub.w	sl, r4, r9
 800e0ba:	e006      	b.n	800e0ca <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x78a>
 800e0bc:	461f      	mov	r7, r3
 800e0be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	f7ff facd 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800e0ca:	eb0a 0409 	add.w	r4, sl, r9
 800e0ce:	f819 0b01 	ldrb.w	r0, [r9], #1
 800e0d2:	b128      	cbz	r0, 800e0e0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7a0>
 800e0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0f1      	beq.n	800e0be <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x77e>
 800e0da:	1e7b      	subs	r3, r7, #1
 800e0dc:	2f00      	cmp	r7, #0
 800e0de:	d1ed      	bne.n	800e0bc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x77c>
 800e0e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f43f ac33 	beq.w	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	eba8 0704 	sub.w	r7, r8, r4
 800e0ee:	e008      	b.n	800e102 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7c2>
 800e0f0:	f102 0901 	add.w	r9, r2, #1
 800e0f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0fa:	2020      	movs	r0, #32
 800e0fc:	f7ff fab2 	bl	800d664 <626e3158957e216ecf22af8444eac4e472537274>
 800e100:	464a      	mov	r2, r9
 800e102:	19d3      	adds	r3, r2, r7
 800e104:	429e      	cmp	r6, r3
 800e106:	d8f3      	bhi.n	800e0f0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7b0>
 800e108:	eba6 0308 	sub.w	r3, r6, r8
 800e10c:	4546      	cmp	r6, r8
 800e10e:	bf38      	it	cc
 800e110:	2300      	movcc	r3, #0
 800e112:	441c      	add	r4, r3
 800e114:	e41b      	b.n	800d94e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 800e116:	bf00      	nop

0800e118 <5dd4cf8b4cc3211a4d064c2aba27f240e0c6a1fc>:
 800e118:	b40c      	push	{r2, r3}
 800e11a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e11c:	aa06      	add	r2, sp, #24
 800e11e:	9103      	str	r1, [sp, #12]
 800e120:	f852 3b04 	ldr.w	r3, [r2], #4
 800e124:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800e128:	4619      	mov	r1, r3
 800e12a:	a802      	add	r0, sp, #8
 800e12c:	f7ff fc08 	bl	800d940 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>
 800e130:	b005      	add	sp, #20
 800e132:	f85d eb04 	ldr.w	lr, [sp], #4
 800e136:	b002      	add	sp, #8
 800e138:	4770      	bx	lr

0800e13a <9d4397e1c276e28163cdc66582db3f5f3477f47c>:
 800e13a:	b513      	push	{r0, r1, r4, lr}
 800e13c:	460c      	mov	r4, r1
 800e13e:	e9cd 0400 	strd	r0, r4, [sp]
 800e142:	4611      	mov	r1, r2
 800e144:	4668      	mov	r0, sp
 800e146:	461a      	mov	r2, r3
 800e148:	f7ff fbfa 	bl	800d940 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>
 800e14c:	b002      	add	sp, #8
 800e14e:	bd10      	pop	{r4, pc}

0800e150 <02aa084aaa87b61bfa00c296d0ea733e41c0e799>:
 800e150:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e154:	4770      	bx	lr
	...

0800e158 <a55289d6d9a545b04c48247397ce85f2938a20af>:
 800e158:	ea80 0301 	eor.w	r3, r0, r1
 800e15c:	4a03      	ldr	r2, [pc, #12]	; (800e16c <a55289d6d9a545b04c48247397ce85f2938a20af+0x14>)
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800e164:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	0801be70 	.word	0x0801be70

0800e170 <f4e96df7a22571dfa32822f4af8ba70dac43b850>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4604      	mov	r4, r0
 800e174:	1845      	adds	r5, r0, r1
 800e176:	4610      	mov	r0, r2
 800e178:	42ac      	cmp	r4, r5
 800e17a:	d100      	bne.n	800e17e <f4e96df7a22571dfa32822f4af8ba70dac43b850+0xe>
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	4601      	mov	r1, r0
 800e180:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e184:	f7ff ffe8 	bl	800e158 <a55289d6d9a545b04c48247397ce85f2938a20af>
 800e188:	e7f6      	b.n	800e178 <f4e96df7a22571dfa32822f4af8ba70dac43b850+0x8>

0800e18a <4b59fedb5de869ccde24e265f7a0554552ced4e7>:
 800e18a:	2807      	cmp	r0, #7
 800e18c:	d80f      	bhi.n	800e1ae <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x24>
 800e18e:	2301      	movs	r3, #1
 800e190:	fa03 f000 	lsl.w	r0, r3, r0
 800e194:	f010 0f22 	tst.w	r0, #34	; 0x22
 800e198:	d10b      	bne.n	800e1b2 <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x28>
 800e19a:	f010 0f88 	tst.w	r0, #136	; 0x88
 800e19e:	d10a      	bne.n	800e1b6 <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x2c>
 800e1a0:	f010 0f44 	tst.w	r0, #68	; 0x44
 800e1a4:	bf14      	ite	ne
 800e1a6:	4618      	movne	r0, r3
 800e1a8:	2000      	moveq	r0, #0
 800e1aa:	00c0      	lsls	r0, r0, #3
 800e1ac:	4770      	bx	lr
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	4770      	bx	lr
 800e1b2:	2004      	movs	r0, #4
 800e1b4:	4770      	bx	lr
 800e1b6:	2010      	movs	r0, #16
 800e1b8:	4770      	bx	lr
	...

0800e1bc <36fc8fd3531c1a40f267c168c66ed988dd7f65d6>:
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <36fc8fd3531c1a40f267c168c66ed988dd7f65d6+0x14>)
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	2222      	movs	r2, #34	; 0x22
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	f500 700e 	add.w	r0, r0, #568	; 0x238
 800e1ca:	f00a fed9 	bl	8018f80 <memset>
 800e1ce:	bd08      	pop	{r3, pc}
 800e1d0:	20000034 	.word	0x20000034

0800e1d4 <281684afe20744fe8e8db0e02bb6f53b74a050bd>:
 800e1d4:	4b02      	ldr	r3, [pc, #8]	; (800e1e0 <281684afe20744fe8e8db0e02bb6f53b74a050bd+0xc>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f893 0238 	ldrb.w	r0, [r3, #568]	; 0x238
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	20000034 	.word	0x20000034

0800e1e4 <6339f3934eecab924c4cd30c35957a539872f6f3>:
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <6339f3934eecab924c4cd30c35957a539872f6f3+0xc>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f893 0249 	ldrb.w	r0, [r3, #585]	; 0x249
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	20000034 	.word	0x20000034

0800e1f4 <bdbe454f364e40446632df307cd018fd5121d6b0>:
 800e1f4:	4b07      	ldr	r3, [pc, #28]	; (800e214 <bdbe454f364e40446632df307cd018fd5121d6b0+0x20>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f101 0210 	add.w	r2, r1, #16
 800e1fc:	f883 0238 	strb.w	r0, [r3, #568]	; 0x238
 800e200:	f203 2339 	addw	r3, r3, #569	; 0x239
 800e204:	f851 0b04 	ldr.w	r0, [r1], #4
 800e208:	f843 0b04 	str.w	r0, [r3], #4
 800e20c:	4291      	cmp	r1, r2
 800e20e:	d1f9      	bne.n	800e204 <bdbe454f364e40446632df307cd018fd5121d6b0+0x10>
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	20000034 	.word	0x20000034

0800e218 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>:
 800e218:	4b07      	ldr	r3, [pc, #28]	; (800e238 <73e350c4a17e38f6f89a1d19f29db6422776fe5d+0x20>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f101 0210 	add.w	r2, r1, #16
 800e220:	f883 0249 	strb.w	r0, [r3, #585]	; 0x249
 800e224:	f203 234a 	addw	r3, r3, #586	; 0x24a
 800e228:	f851 0b04 	ldr.w	r0, [r1], #4
 800e22c:	f843 0b04 	str.w	r0, [r3], #4
 800e230:	4291      	cmp	r1, r2
 800e232:	d1f9      	bne.n	800e228 <73e350c4a17e38f6f89a1d19f29db6422776fe5d+0x10>
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	20000034 	.word	0x20000034

0800e23c <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	4604      	mov	r4, r0
 800e240:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
 800e244:	f7ff ffa1 	bl	800e18a <4b59fedb5de869ccde24e265f7a0554552ced4e7>
 800e248:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 800e24c:	7a23      	ldrb	r3, [r4, #8]
 800e24e:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
 800e252:	2a03      	cmp	r2, #3
 800e254:	d804      	bhi.n	800e260 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 800e256:	e8df f002 	tbb	[pc, r2]
 800e25a:	0a0c      	.short	0x0a0c
 800e25c:	0208      	.short	0x0208
 800e25e:	330a      	adds	r3, #10
 800e260:	4418      	add	r0, r3
 800e262:	28c0      	cmp	r0, #192	; 0xc0
 800e264:	dd19      	ble.n	800e29a <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x5e>
 800e266:	2000      	movs	r0, #0
 800e268:	bd38      	pop	{r3, r4, r5, pc}
 800e26a:	3304      	adds	r3, #4
 800e26c:	e7f8      	b.n	800e260 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 800e26e:	3302      	adds	r3, #2
 800e270:	e7f6      	b.n	800e260 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 800e272:	3301      	adds	r3, #1
 800e274:	4418      	add	r0, r3
 800e276:	28c0      	cmp	r0, #192	; 0xc0
 800e278:	dcf5      	bgt.n	800e266 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2a>
 800e27a:	2101      	movs	r1, #1
 800e27c:	4620      	mov	r0, r4
 800e27e:	f009 fdd5 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800e282:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 800e286:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800e28a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e28e:	6862      	ldr	r2, [r4, #4]
 800e290:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e294:	7013      	strb	r3, [r2, #0]
 800e296:	2001      	movs	r0, #1
 800e298:	e7e6      	b.n	800e268 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2c>
 800e29a:	2101      	movs	r1, #1
 800e29c:	4620      	mov	r0, r4
 800e29e:	f894 50a3 	ldrb.w	r5, [r4, #163]	; 0xa3
 800e2a2:	f009 fdc3 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800e2a6:	6863      	ldr	r3, [r4, #4]
 800e2a8:	701d      	strb	r5, [r3, #0]
 800e2aa:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d009      	beq.n	800e2c6 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x8a>
 800e2b2:	d9e2      	bls.n	800e27a <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>
 800e2b4:	2b03      	cmp	r3, #3
 800e2b6:	d1d6      	bne.n	800e266 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2a>
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f009 fdd4 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 800e2c4:	e7d9      	b.n	800e27a <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f009 fdaf 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800e2ce:	6863      	ldr	r3, [r4, #4]
 800e2d0:	f894 20ab 	ldrb.w	r2, [r4, #171]	; 0xab
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	2101      	movs	r1, #1
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f009 fda7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800e2de:	6863      	ldr	r3, [r4, #4]
 800e2e0:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
 800e2e4:	701a      	strb	r2, [r3, #0]
 800e2e6:	e7c8      	b.n	800e27a <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>

0800e2e8 <628044ebadd5376fad8b3928b1093d9e8f1976ae>:
 800e2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 800e2f2:	b08b      	sub	sp, #44	; 0x2c
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	d053      	beq.n	800e3a2 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0xba>
 800e2fa:	4b2b      	ldr	r3, [pc, #172]	; (800e3a8 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0xc0>)
 800e2fc:	681e      	ldr	r6, [r3, #0]
 800e2fe:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800e302:	b9a3      	cbnz	r3, 800e32e <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 800e304:	6808      	ldr	r0, [r1, #0]
 800e306:	6849      	ldr	r1, [r1, #4]
 800e308:	af06      	add	r7, sp, #24
 800e30a:	46bc      	mov	ip, r7
 800e30c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e310:	1e69      	subs	r1, r5, #1
 800e312:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800e316:	3504      	adds	r5, #4
 800e318:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800e31c:	f800 cd01 	strb.w	ip, [r0, #-1]!
 800e320:	42a9      	cmp	r1, r5
 800e322:	d1f9      	bne.n	800e318 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x30>
 800e324:	2a03      	cmp	r2, #3
 800e326:	d906      	bls.n	800e336 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x4e>
 800e328:	3a05      	subs	r2, #5
 800e32a:	2a02      	cmp	r2, #2
 800e32c:	d928      	bls.n	800e380 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x98>
 800e32e:	2000      	movs	r0, #0
 800e330:	b00b      	add	sp, #44	; 0x2c
 800e332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e336:	f896 2238 	ldrb.w	r2, [r6, #568]	; 0x238
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d0f7      	beq.n	800e32e <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 800e33e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e342:	7a25      	ldrb	r5, [r4, #8]
 800e344:	f206 2639 	addw	r6, r6, #569	; 0x239
 800e348:	eb08 0905 	add.w	r9, r8, r5
 800e34c:	f88d 3017 	strb.w	r3, [sp, #23]
 800e350:	442b      	add	r3, r5
 800e352:	2bc0      	cmp	r3, #192	; 0xc0
 800e354:	dceb      	bgt.n	800e32e <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 800e356:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 800e35a:	b111      	cbz	r1, 800e362 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x7a>
 800e35c:	4620      	mov	r0, r4
 800e35e:	f009 fdc3 	bl	8017ee8 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d>
 800e362:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 800e366:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800e36a:	2302      	movs	r3, #2
 800e36c:	e9cd 7300 	strd	r7, r3, [sp]
 800e370:	464a      	mov	r2, r9
 800e372:	f10d 0317 	add.w	r3, sp, #23
 800e376:	4629      	mov	r1, r5
 800e378:	4640      	mov	r0, r8
 800e37a:	f00a f872 	bl	8018462 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d>
 800e37e:	e7d7      	b.n	800e330 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x48>
 800e380:	f896 3249 	ldrb.w	r3, [r6, #585]	; 0x249
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0d2      	beq.n	800e32e <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 800e388:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e38c:	f8d4 905c 	ldr.w	r9, [r4, #92]	; 0x5c
 800e390:	7a23      	ldrb	r3, [r4, #8]
 800e392:	eba9 0508 	sub.w	r5, r9, r8
 800e396:	b2ed      	uxtb	r5, r5
 800e398:	1b5b      	subs	r3, r3, r5
 800e39a:	f206 264a 	addw	r6, r6, #586	; 0x24a
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	e7d4      	b.n	800e34c <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x64>
 800e3a2:	2001      	movs	r0, #1
 800e3a4:	e7c4      	b.n	800e330 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x48>
 800e3a6:	bf00      	nop
 800e3a8:	20000034 	.word	0x20000034

0800e3ac <245bc706add2545900df78a3f141ff0f80e5adf9>:
 800e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ae:	784b      	ldrb	r3, [r1, #1]
 800e3b0:	6842      	ldr	r2, [r0, #4]
 800e3b2:	5cd2      	ldrb	r2, [r2, r3]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	f002 0007 	and.w	r0, r2, #7
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
 800e3c0:	f7ff fee3 	bl	800e18a <4b59fedb5de869ccde24e265f7a0554552ced4e7>
 800e3c4:	f3c2 03c1 	ubfx	r3, r2, #3, #2
 800e3c8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 800e3cc:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
 800e3d0:	784b      	ldrb	r3, [r1, #1]
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	0691      	lsls	r1, r2, #26
 800e3d6:	bf5d      	ittte	pl
 800e3d8:	f3c2 1280 	ubfxpl	r2, r2, #6, #1
 800e3dc:	3305      	addpl	r3, #5
 800e3de:	18d2      	addpl	r2, r2, r3
 800e3e0:	3301      	addmi	r3, #1
 800e3e2:	bf4c      	ite	mi
 800e3e4:	b2da      	uxtbmi	r2, r3
 800e3e6:	b2d2      	uxtbpl	r2, r2
 800e3e8:	706a      	strb	r2, [r5, #1]
 800e3ea:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d02f      	beq.n	800e452 <245bc706add2545900df78a3f141ff0f80e5adf9+0xa6>
 800e3f2:	d904      	bls.n	800e3fe <245bc706add2545900df78a3f141ff0f80e5adf9+0x52>
 800e3f4:	2b03      	cmp	r3, #3
 800e3f6:	d046      	beq.n	800e486 <245bc706add2545900df78a3f141ff0f80e5adf9+0xda>
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	b007      	add	sp, #28
 800e3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fe:	f105 032d 	add.w	r3, r5, #45	; 0x2d
 800e402:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800e406:	f105 013d 	add.w	r1, r5, #61	; 0x3d
 800e40a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e40e:	f842 0b04 	str.w	r0, [r2], #4
 800e412:	428b      	cmp	r3, r1
 800e414:	d1f9      	bne.n	800e40a <245bc706add2545900df78a3f141ff0f80e5adf9+0x5e>
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	7013      	strb	r3, [r2, #0]
 800e41a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d04a      	beq.n	800e4b8 <245bc706add2545900df78a3f141ff0f80e5adf9+0x10c>
 800e422:	786b      	ldrb	r3, [r5, #1]
 800e424:	6862      	ldr	r2, [r4, #4]
 800e426:	5cd3      	ldrb	r3, [r2, r3]
 800e428:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800e42c:	786b      	ldrb	r3, [r5, #1]
 800e42e:	3301      	adds	r3, #1
 800e430:	706b      	strb	r3, [r5, #1]
 800e432:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800e436:	2300      	movs	r3, #0
 800e438:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800e43c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800e440:	2a00      	cmp	r2, #0
 800e442:	d13d      	bne.n	800e4c0 <245bc706add2545900df78a3f141ff0f80e5adf9+0x114>
 800e444:	2b01      	cmp	r3, #1
 800e446:	bf04      	itt	eq
 800e448:	2301      	moveq	r3, #1
 800e44a:	f884 30a0 	strbeq.w	r3, [r4, #160]	; 0xa0
 800e44e:	2001      	movs	r0, #1
 800e450:	e7d3      	b.n	800e3fa <245bc706add2545900df78a3f141ff0f80e5adf9+0x4e>
 800e452:	6860      	ldr	r0, [r4, #4]
 800e454:	7869      	ldrb	r1, [r5, #1]
 800e456:	2301      	movs	r3, #1
 800e458:	461a      	mov	r2, r3
 800e45a:	4401      	add	r1, r0
 800e45c:	4668      	mov	r0, sp
 800e45e:	f009 fcb0 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 800e462:	af04      	add	r7, sp, #16
 800e464:	466b      	mov	r3, sp
 800e466:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800e46a:	6818      	ldr	r0, [r3, #0]
 800e46c:	6859      	ldr	r1, [r3, #4]
 800e46e:	4616      	mov	r6, r2
 800e470:	c603      	stmia	r6!, {r0, r1}
 800e472:	3308      	adds	r3, #8
 800e474:	42bb      	cmp	r3, r7
 800e476:	4632      	mov	r2, r6
 800e478:	d1f7      	bne.n	800e46a <245bc706add2545900df78a3f141ff0f80e5adf9+0xbe>
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	7033      	strb	r3, [r6, #0]
 800e47e:	786b      	ldrb	r3, [r5, #1]
 800e480:	3302      	adds	r3, #2
 800e482:	706b      	strb	r3, [r5, #1]
 800e484:	e7c9      	b.n	800e41a <245bc706add2545900df78a3f141ff0f80e5adf9+0x6e>
 800e486:	6860      	ldr	r0, [r4, #4]
 800e488:	7869      	ldrb	r1, [r5, #1]
 800e48a:	2301      	movs	r3, #1
 800e48c:	2202      	movs	r2, #2
 800e48e:	4401      	add	r1, r0
 800e490:	4668      	mov	r0, sp
 800e492:	f009 fc96 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 800e496:	af04      	add	r7, sp, #16
 800e498:	466b      	mov	r3, sp
 800e49a:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 800e49e:	6818      	ldr	r0, [r3, #0]
 800e4a0:	6859      	ldr	r1, [r3, #4]
 800e4a2:	4616      	mov	r6, r2
 800e4a4:	c603      	stmia	r6!, {r0, r1}
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	42bb      	cmp	r3, r7
 800e4aa:	4632      	mov	r2, r6
 800e4ac:	d1f7      	bne.n	800e49e <245bc706add2545900df78a3f141ff0f80e5adf9+0xf2>
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	7033      	strb	r3, [r6, #0]
 800e4b2:	786b      	ldrb	r3, [r5, #1]
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	e7e4      	b.n	800e482 <245bc706add2545900df78a3f141ff0f80e5adf9+0xd6>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800e4be:	e7b8      	b.n	800e432 <245bc706add2545900df78a3f141ff0f80e5adf9+0x86>
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	e7c0      	b.n	800e446 <245bc706add2545900df78a3f141ff0f80e5adf9+0x9a>

0800e4c4 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>:
 800e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c6:	4b30      	ldr	r3, [pc, #192]	; (800e588 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0xc4>)
 800e4c8:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	b08b      	sub	sp, #44	; 0x2c
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	b1ea      	cbz	r2, 800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e4d6:	f891 1052 	ldrb.w	r1, [r1, #82]	; 0x52
 800e4da:	b9f1      	cbnz	r1, 800e51a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x56>
 800e4dc:	2a01      	cmp	r2, #1
 800e4de:	d118      	bne.n	800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e4e0:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
 800e4e4:	b9a9      	cbnz	r1, 800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e4e6:	f8d4 0042 	ldr.w	r0, [r4, #66]	; 0x42
 800e4ea:	f8d4 1046 	ldr.w	r1, [r4, #70]	; 0x46
 800e4ee:	ae06      	add	r6, sp, #24
 800e4f0:	4637      	mov	r7, r6
 800e4f2:	c703      	stmia	r7!, {r0, r1}
 800e4f4:	1e69      	subs	r1, r5, #1
 800e4f6:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800e4fa:	3504      	adds	r5, #4
 800e4fc:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 800e500:	f800 7d01 	strb.w	r7, [r0, #-1]!
 800e504:	428d      	cmp	r5, r1
 800e506:	d1f9      	bne.n	800e4fc <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x38>
 800e508:	2a03      	cmp	r2, #3
 800e50a:	d90a      	bls.n	800e522 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x5e>
 800e50c:	3a05      	subs	r2, #5
 800e50e:	2a02      	cmp	r2, #2
 800e510:	d92c      	bls.n	800e56c <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0xa8>
 800e512:	2500      	movs	r5, #0
 800e514:	4628      	mov	r0, r5
 800e516:	b00b      	add	sp, #44	; 0x2c
 800e518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e51a:	f002 01fb 	and.w	r1, r2, #251	; 0xfb
 800e51e:	2901      	cmp	r1, #1
 800e520:	e7dd      	b.n	800e4de <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x1a>
 800e522:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 800e526:	2a00      	cmp	r2, #0
 800e528:	d0f3      	beq.n	800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e52a:	7a22      	ldrb	r2, [r4, #8]
 800e52c:	6860      	ldr	r0, [r4, #4]
 800e52e:	f203 2539 	addw	r5, r3, #569	; 0x239
 800e532:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 800e536:	1ad2      	subs	r2, r2, r3
 800e538:	b2d1      	uxtb	r1, r2
 800e53a:	fa50 f282 	uxtab	r2, r0, r2
 800e53e:	f88d 3017 	strb.w	r3, [sp, #23]
 800e542:	440b      	add	r3, r1
 800e544:	2bc0      	cmp	r3, #192	; 0xc0
 800e546:	dce4      	bgt.n	800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e548:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 800e54c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800e550:	2302      	movs	r3, #2
 800e552:	e9cd 6300 	strd	r6, r3, [sp]
 800e556:	f10d 0317 	add.w	r3, sp, #23
 800e55a:	f009 ff41 	bl	80183e0 <71097e204b694049f5c66ccd9b138d3a4c93df13>
 800e55e:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 800e562:	4605      	mov	r5, r0
 800e564:	4620      	mov	r0, r4
 800e566:	f009 fcdb 	bl	8017f20 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d>
 800e56a:	e7d3      	b.n	800e514 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x50>
 800e56c:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 800e570:	2a00      	cmp	r2, #0
 800e572:	d0ce      	beq.n	800e512 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 800e574:	6860      	ldr	r0, [r4, #4]
 800e576:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e578:	f203 254a 	addw	r5, r3, #586	; 0x24a
 800e57c:	1a11      	subs	r1, r2, r0
 800e57e:	7a23      	ldrb	r3, [r4, #8]
 800e580:	b2c9      	uxtb	r1, r1
 800e582:	1a5b      	subs	r3, r3, r1
 800e584:	b2db      	uxtb	r3, r3
 800e586:	e7da      	b.n	800e53e <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x7a>
 800e588:	20000034 	.word	0x20000034

0800e58c <077287437cab717c06c53f5380059be6eda08357>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4b19      	ldr	r3, [pc, #100]	; (800e5f4 <077287437cab717c06c53f5380059be6eda08357+0x68>)
 800e590:	681c      	ldr	r4, [r3, #0]
 800e592:	4605      	mov	r5, r0
 800e594:	f7fc f9ac 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800e598:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 800e59c:	f8d4 3029 	ldr.w	r3, [r4, #41]	; 0x29
 800e5a0:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
 800e5a4:	1ac3      	subs	r3, r0, r3
 800e5a6:	18d2      	adds	r2, r2, r3
 800e5a8:	f141 0100 	adc.w	r1, r1, #0
 800e5ac:	e9c4 2108 	strd	r2, r1, [r4, #32]
 800e5b0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e5b4:	2a02      	cmp	r2, #2
 800e5b6:	d00d      	beq.n	800e5d4 <077287437cab717c06c53f5380059be6eda08357+0x48>
 800e5b8:	2a03      	cmp	r2, #3
 800e5ba:	d013      	beq.n	800e5e4 <077287437cab717c06c53f5380059be6eda08357+0x58>
 800e5bc:	2a01      	cmp	r2, #1
 800e5be:	d106      	bne.n	800e5ce <077287437cab717c06c53f5380059be6eda08357+0x42>
 800e5c0:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
 800e5c4:	18d2      	adds	r2, r2, r3
 800e5c6:	f141 0100 	adc.w	r1, r1, #0
 800e5ca:	e9c4 2106 	strd	r2, r1, [r4, #24]
 800e5ce:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e5d8:	18d2      	adds	r2, r2, r3
 800e5da:	f141 0100 	adc.w	r1, r1, #0
 800e5de:	e9c4 2102 	strd	r2, r1, [r4, #8]
 800e5e2:	e7f4      	b.n	800e5ce <077287437cab717c06c53f5380059be6eda08357+0x42>
 800e5e4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800e5e8:	18d2      	adds	r2, r2, r3
 800e5ea:	f141 0100 	adc.w	r1, r1, #0
 800e5ee:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800e5f2:	e7ec      	b.n	800e5ce <077287437cab717c06c53f5380059be6eda08357+0x42>
 800e5f4:	20000034 	.word	0x20000034

0800e5f8 <66ac93647e4c684dee2227e883242cdee4e3524a>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	4b14      	ldr	r3, [pc, #80]	; (800e64c <66ac93647e4c684dee2227e883242cdee4e3524a+0x54>)
 800e5fc:	4d14      	ldr	r5, [pc, #80]	; (800e650 <66ac93647e4c684dee2227e883242cdee4e3524a+0x58>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	682c      	ldr	r4, [r5, #0]
 800e602:	1ac0      	subs	r0, r0, r3
 800e604:	eb63 0303 	sbc.w	r3, r3, r3
 800e608:	e9c4 037a 	strd	r0, r3, [r4, #488]	; 0x1e8
 800e60c:	4b11      	ldr	r3, [pc, #68]	; (800e654 <66ac93647e4c684dee2227e883242cdee4e3524a+0x5c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	8763      	strh	r3, [r4, #58]	; 0x3a
 800e612:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e616:	b1a3      	cbz	r3, 800e642 <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 800e618:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e61c:	b993      	cbnz	r3, 800e644 <66ac93647e4c684dee2227e883242cdee4e3524a+0x4c>
 800e61e:	f009 fa39 	bl	8017a94 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	e9d4 217a 	ldrd	r2, r1, [r4, #488]	; 0x1e8
 800e628:	681c      	ldr	r4, [r3, #0]
 800e62a:	17e0      	asrs	r0, r4, #31
 800e62c:	42a2      	cmp	r2, r4
 800e62e:	685c      	ldr	r4, [r3, #4]
 800e630:	eb71 0000 	sbcs.w	r0, r1, r0
 800e634:	bfb8      	it	lt
 800e636:	601a      	strlt	r2, [r3, #0]
 800e638:	17e0      	asrs	r0, r4, #31
 800e63a:	4294      	cmp	r4, r2
 800e63c:	4188      	sbcs	r0, r1
 800e63e:	da00      	bge.n	800e642 <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 800e640:	605a      	str	r2, [r3, #4]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	2300      	movs	r3, #0
 800e646:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e64a:	e7fa      	b.n	800e642 <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 800e64c:	0801a5e0 	.word	0x0801a5e0
 800e650:	20000034 	.word	0x20000034
 800e654:	0801a658 	.word	0x0801a658

0800e658 <0d988943f13c94ad3b7af08357d5d17f9043f067>:
 800e658:	b510      	push	{r4, lr}
 800e65a:	4b0b      	ldr	r3, [pc, #44]	; (800e688 <0d988943f13c94ad3b7af08357d5d17f9043f067+0x30>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4604      	mov	r4, r0
 800e660:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
 800e664:	f8c4 2057 	str.w	r2, [r4, #87]	; 0x57
 800e668:	3057      	adds	r0, #87	; 0x57
 800e66a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e66e:	7103      	strb	r3, [r0, #4]
 800e670:	f003 fbb6 	bl	8011de0 <c44994d9507f8e8896ef91cc0ed0c665b4e74466>
 800e674:	2341      	movs	r3, #65	; 0x41
 800e676:	7063      	strb	r3, [r4, #1]
 800e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67c:	4803      	ldr	r0, [pc, #12]	; (800e68c <0d988943f13c94ad3b7af08357d5d17f9043f067+0x34>)
 800e67e:	2201      	movs	r2, #1
 800e680:	2100      	movs	r1, #0
 800e682:	f7fd b809 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800e686:	bf00      	nop
 800e688:	20000034 	.word	0x20000034
 800e68c:	08012d6d 	.word	0x08012d6d

0800e690 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>:
 800e690:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8+0x28>)
 800e692:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
 800e69c:	f8c0 2057 	str.w	r2, [r0, #87]	; 0x57
 800e6a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6a4:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
 800e6a8:	2341      	movs	r3, #65	; 0x41
 800e6aa:	7043      	strb	r3, [r0, #1]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	4803      	ldr	r0, [pc, #12]	; (800e6bc <fdc48e947b5f2f5ed5f47de398f99296ca12bee8+0x2c>)
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	f7fc bff1 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800e6b6:	bf00      	nop
 800e6b8:	20000034 	.word	0x20000034
 800e6bc:	08012ad1 	.word	0x08012ad1

0800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>:
 800e6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	4e5e      	ldr	r6, [pc, #376]	; (800e840 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x180>)
 800e6c6:	6834      	ldr	r4, [r6, #0]
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	f7ff ff5f 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800e6ce:	f7f7 ff5b 	bl	8006588 <EMBENET_RADIO_Idle>
 800e6d2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	e9c4 1174 	strd	r1, r1, [r4, #464]	; 0x1d0
 800e6dc:	f104 0831 	add.w	r8, r4, #49	; 0x31
 800e6e0:	b1da      	cbz	r2, 800e71a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x5a>
 800e6e2:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 800e6e6:	b163      	cbz	r3, 800e702 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x42>
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 800e6ee:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e6f2:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800e6f6:	fab2 f282 	clz	r2, r2
 800e6fa:	0952      	lsrs	r2, r2, #5
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	f003 fb8f 	bl	8011e20 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 800e702:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 800e706:	f890 1055 	ldrb.w	r1, [r0, #85]	; 0x55
 800e70a:	2900      	cmp	r1, #0
 800e70c:	f040 8091 	bne.w	800e832 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x172>
 800e710:	f7ff ffbe 	bl	800e690 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 800e714:	2300      	movs	r3, #0
 800e716:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 800e71a:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800e71e:	b120      	cbz	r0, 800e72a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x6a>
 800e720:	f7fb fa0e 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800e724:	2300      	movs	r3, #0
 800e726:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 800e72a:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800e72e:	b120      	cbz	r0, 800e73a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x7a>
 800e730:	f7fb fa06 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800e734:	2300      	movs	r3, #0
 800e736:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 800e73a:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 800e73e:	b120      	cbz	r0, 800e74a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x8a>
 800e740:	f7fb f9fe 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800e744:	2300      	movs	r3, #0
 800e746:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 800e74a:	f8d4 0031 	ldr.w	r0, [r4, #49]	; 0x31
 800e74e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800e752:	f7fb feed 	bl	800a530 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>
 800e756:	f7f9 fdff 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800e75a:	b140      	cbz	r0, 800e76e <b7931a89d28a92b314e0dd9484b762986b0a117e+0xae>
 800e75c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800e75e:	f002 fd23 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800e762:	3501      	adds	r5, #1
 800e764:	fbb5 f3f0 	udiv	r3, r5, r0
 800e768:	fb03 5510 	mls	r5, r3, r0, r5
 800e76c:	8725      	strh	r5, [r4, #56]	; 0x38
 800e76e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800e770:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e772:	1ad5      	subs	r5, r2, r3
 800e774:	429a      	cmp	r2, r3
 800e776:	b2ad      	uxth	r5, r5
 800e778:	d803      	bhi.n	800e782 <b7931a89d28a92b314e0dd9484b762986b0a117e+0xc2>
 800e77a:	f002 fd15 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800e77e:	4428      	add	r0, r5
 800e780:	b285      	uxth	r5, r0
 800e782:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800e786:	f7fc f881 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 800e78a:	6833      	ldr	r3, [r6, #0]
 800e78c:	f04f 0900 	mov.w	r9, #0
 800e790:	f883 91bd 	strb.w	r9, [r3, #445]	; 0x1bd
 800e794:	2200      	movs	r2, #0
 800e796:	2300      	movs	r3, #0
 800e798:	f8d4 71e8 	ldr.w	r7, [r4, #488]	; 0x1e8
 800e79c:	4640      	mov	r0, r8
 800e79e:	e9c4 237a 	strd	r2, r3, [r4, #488]	; 0x1e8
 800e7a2:	f7fb f89d 	bl	80098e0 <77b737f3175c59c67851de07d0921a2dae9a70ab>
 800e7a6:	4b27      	ldr	r3, [pc, #156]	; (800e844 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x184>)
 800e7a8:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800e7ac:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800e7b0:	4b25      	ldr	r3, [pc, #148]	; (800e848 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x188>)
 800e7b2:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800e7bc:	fb08 7205 	mla	r2, r8, r5, r7
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	f7fb ff6b 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800e7c6:	f7f9 fdc7 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800e7ca:	bb38      	cbnz	r0, 800e81c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 800e7cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e7d0:	b323      	cbz	r3, 800e81c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 800e7d2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800e7d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800e7d6:	1ad5      	subs	r5, r2, r3
 800e7d8:	b2ad      	uxth	r5, r5
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 800e7e0:	d804      	bhi.n	800e7ec <b7931a89d28a92b314e0dd9484b762986b0a117e+0x12c>
 800e7e2:	f002 fce1 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800e7e6:	4405      	add	r5, r0
 800e7e8:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 800e7ec:	f8b4 51fa 	ldrh.w	r5, [r4, #506]	; 0x1fa
 800e7f0:	3d01      	subs	r5, #1
 800e7f2:	b2ad      	uxth	r5, r5
 800e7f4:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 800e7f8:	b185      	cbz	r5, 800e81c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 800e7fa:	f002 fcd5 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800e7fe:	4285      	cmp	r5, r0
 800e800:	d80c      	bhi.n	800e81c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 800e802:	2300      	movs	r3, #0
 800e804:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	4b10      	ldr	r3, [pc, #64]	; (800e84c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x18c>)
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800e812:	eb08 0207 	add.w	r2, r8, r7
 800e816:	2101      	movs	r1, #1
 800e818:	f7fb ff40 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800e81c:	6833      	ldr	r3, [r6, #0]
 800e81e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e822:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800e826:	b13b      	cbz	r3, 800e838 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x178>
 800e828:	2000      	movs	r0, #0
 800e82a:	b003      	add	sp, #12
 800e82c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e830:	4718      	bx	r3
 800e832:	2340      	movs	r3, #64	; 0x40
 800e834:	7043      	strb	r3, [r0, #1]
 800e836:	e76d      	b.n	800e714 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x54>
 800e838:	b003      	add	sp, #12
 800e83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83e:	bf00      	nop
 800e840:	20000034 	.word	0x20000034
 800e844:	0801a5e0 	.word	0x0801a5e0
 800e848:	0800fbbd 	.word	0x0800fbbd
 800e84c:	0800eeb5 	.word	0x0800eeb5

0800e850 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	4ebb      	ldr	r6, [pc, #748]	; (800eb44 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f4>)
 800e856:	6833      	ldr	r3, [r6, #0]
 800e858:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e85c:	b091      	sub	sp, #68	; 0x44
 800e85e:	f8d3 43f4 	ldr.w	r4, [r3, #1012]	; 0x3f4
 800e862:	b10c      	cbz	r4, 800e868 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x18>
 800e864:	2001      	movs	r0, #1
 800e866:	47a0      	blx	r4
 800e868:	6835      	ldr	r5, [r6, #0]
 800e86a:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
 800e86e:	3b04      	subs	r3, #4
 800e870:	2b14      	cmp	r3, #20
 800e872:	d86f      	bhi.n	800e954 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 800e874:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e878:	006e0015 	.word	0x006e0015
 800e87c:	00b90044 	.word	0x00b90044
 800e880:	00ce00c6 	.word	0x00ce00c6
 800e884:	00fc006e 	.word	0x00fc006e
 800e888:	012f0122 	.word	0x012f0122
 800e88c:	0137006e 	.word	0x0137006e
 800e890:	0172006e 	.word	0x0172006e
 800e894:	018c006e 	.word	0x018c006e
 800e898:	006e0194 	.word	0x006e0194
 800e89c:	020401c2 	.word	0x020401c2
 800e8a0:	020c      	.short	0x020c
 800e8a2:	2305      	movs	r3, #5
 800e8a4:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800e8ae:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800e8b2:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	4ba3      	ldr	r3, [pc, #652]	; (800eb48 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800e8c0:	440a      	add	r2, r1
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	f7fb feea 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	f7ff fe5f 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800e8ce:	6833      	ldr	r3, [r6, #0]
 800e8d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e8d4:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800e8d8:	b10f      	cbz	r7, 800e8de <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x8e>
 800e8da:	2001      	movs	r0, #1
 800e8dc:	47b8      	blx	r7
 800e8de:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800e8e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800e8e4:	f995 11d9 	ldrsb.w	r1, [r5, #473]	; 0x1d9
 800e8e8:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800e8ec:	f7f7 fe56 	bl	800659c <EMBENET_RADIO_TxEnable>
 800e8f0:	b10f      	cbz	r7, 800e8f6 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xa6>
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	47b8      	blx	r7
 800e8f6:	6833      	ldr	r3, [r6, #0]
 800e8f8:	2206      	movs	r2, #6
 800e8fa:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800e8fe:	e02b      	b.n	800e958 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 800e900:	2307      	movs	r3, #7
 800e902:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800e906:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 800e90a:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800e90e:	f04f 0800 	mov.w	r8, #0
 800e912:	4b8d      	ldr	r3, [pc, #564]	; (800eb48 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 800e914:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800e918:	f8cd 8004 	str.w	r8, [sp, #4]
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800e922:	440a      	add	r2, r1
 800e924:	2101      	movs	r1, #1
 800e926:	f7fb feb9 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800e92a:	2002      	movs	r0, #2
 800e92c:	f7ff fe2e 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800e930:	6833      	ldr	r3, [r6, #0]
 800e932:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e936:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800e93a:	b9b7      	cbnz	r7, 800e96a <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x11a>
 800e93c:	f7f7 fe64 	bl	8006608 <EMBENET_RADIO_TxNow>
 800e940:	4606      	mov	r6, r0
 800e942:	3604      	adds	r6, #4
 800e944:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
 800e948:	d117      	bne.n	800e97a <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x12a>
 800e94a:	2240      	movs	r2, #64	; 0x40
 800e94c:	705a      	strb	r2, [r3, #1]
 800e94e:	2300      	movs	r3, #0
 800e950:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
 800e954:	f7ff feb4 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800e958:	2c00      	cmp	r4, #0
 800e95a:	f000 81a1 	beq.w	800eca0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x450>
 800e95e:	2000      	movs	r0, #0
 800e960:	4623      	mov	r3, r4
 800e962:	b011      	add	sp, #68	; 0x44
 800e964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	4718      	bx	r3
 800e96a:	2001      	movs	r0, #1
 800e96c:	47b8      	blx	r7
 800e96e:	f7f7 fe4b 	bl	8006608 <EMBENET_RADIO_TxNow>
 800e972:	4606      	mov	r6, r0
 800e974:	4640      	mov	r0, r8
 800e976:	47b8      	blx	r7
 800e978:	e7e3      	b.n	800e942 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xf2>
 800e97a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 800e97e:	3201      	adds	r2, #1
 800e980:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800e984:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800e988:	930b      	str	r3, [sp, #44]	; 0x2c
 800e98a:	f8d5 8031 	ldr.w	r8, [r5, #49]	; 0x31
 800e98e:	f003 f95b 	bl	8011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 800e992:	900d      	str	r0, [sp, #52]	; 0x34
 800e994:	f003 f974 	bl	8011c80 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf>
 800e998:	900c      	str	r0, [sp, #48]	; 0x30
 800e99a:	f003 f87f 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800e99e:	4607      	mov	r7, r0
 800e9a0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
 800e9a4:	f995 a1d9 	ldrsb.w	sl, [r5, #473]	; 0x1d9
 800e9a8:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
 800e9ac:	f895 b048 	ldrb.w	fp, [r5, #72]	; 0x48
 800e9b0:	3041      	adds	r0, #65	; 0x41
 800e9b2:	f7fa fbe3 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	2002      	movs	r0, #2
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	f7f9 fcda 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800e9c0:	f7fa fbdc 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800e9c4:	f04f 0c01 	mov.w	ip, #1
 800e9c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9cc:	e9cd 6504 	strd	r6, r5, [sp, #16]
 800e9d0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800e9d4:	e9cd 7900 	strd	r7, r9, [sp]
 800e9d8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800e9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9de:	f8cd c020 	str.w	ip, [sp, #32]
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f009 f862 	bl	8017aac <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 800e9e8:	e7b6      	b.n	800e958 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 800e9ea:	f7ff fe69 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	930e      	str	r3, [sp, #56]	; 0x38
 800e9f2:	4a56      	ldr	r2, [pc, #344]	; (800eb4c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2fc>)
 800e9f4:	4b56      	ldr	r3, [pc, #344]	; (800eb50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 800e9f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9f8:	ab10      	add	r3, sp, #64	; 0x40
 800e9fa:	e913 0003 	ldmdb	r3, {r0, r1}
 800e9fe:	f7fe fe15 	bl	800d62c <LOGGER_PrintLine>
 800ea02:	e7a9      	b.n	800e958 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 800ea04:	f7ff fe5c 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	930e      	str	r3, [sp, #56]	; 0x38
 800ea0c:	4b50      	ldr	r3, [pc, #320]	; (800eb50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 800ea0e:	4a51      	ldr	r2, [pc, #324]	; (800eb54 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x304>)
 800ea10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea12:	e7f1      	b.n	800e9f8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 800ea14:	230a      	movs	r3, #10
 800ea16:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800ea1a:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 800ea1e:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800ea22:	f04f 0800 	mov.w	r8, #0
 800ea26:	4b48      	ldr	r3, [pc, #288]	; (800eb48 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 800ea28:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800ea2c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800ea36:	440a      	add	r2, r1
 800ea38:	2101      	movs	r1, #1
 800ea3a:	f7fb fe2f 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800ea3e:	2001      	movs	r0, #1
 800ea40:	f7ff fda4 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800ea44:	6833      	ldr	r3, [r6, #0]
 800ea46:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ea4a:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800ea4e:	b157      	cbz	r7, 800ea66 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x216>
 800ea50:	2001      	movs	r0, #1
 800ea52:	47b8      	blx	r7
 800ea54:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800ea58:	f7f7 fdf4 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	47b8      	blx	r7
 800ea60:	6833      	ldr	r3, [r6, #0]
 800ea62:	220b      	movs	r2, #11
 800ea64:	e749      	b.n	800e8fa <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 800ea66:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800ea6a:	f7f7 fdeb 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800ea6e:	e7f7      	b.n	800ea60 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x210>
 800ea70:	230c      	movs	r3, #12
 800ea72:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800ea76:	2003      	movs	r0, #3
 800ea78:	f7ff fd88 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800ea7c:	6833      	ldr	r3, [r6, #0]
 800ea7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ea82:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	; 0x3f8
 800ea86:	b996      	cbnz	r6, 800eaae <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x25e>
 800ea88:	f7f7 fe04 	bl	8006694 <EMBENET_RADIO_RxNow>
 800ea8c:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800ea90:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 800ea94:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800ea98:	2300      	movs	r3, #0
 800ea9a:	9301      	str	r3, [sp, #4]
 800ea9c:	4b2a      	ldr	r3, [pc, #168]	; (800eb48 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	440a      	add	r2, r1
 800eaa2:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	f7fb fdf8 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800eaac:	e754      	b.n	800e958 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 800eaae:	2001      	movs	r0, #1
 800eab0:	47b0      	blx	r6
 800eab2:	f7f7 fdef 	bl	8006694 <EMBENET_RADIO_RxNow>
 800eab6:	2000      	movs	r0, #0
 800eab8:	47b0      	blx	r6
 800eaba:	e7e7      	b.n	800ea8c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x23c>
 800eabc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
 800eac0:	f890 2055 	ldrb.w	r2, [r0, #85]	; 0x55
 800eac4:	f1c2 0203 	rsb	r2, r2, #3
 800eac8:	f100 011d 	add.w	r1, r0, #29
 800eacc:	b2d2      	uxtb	r2, r2
 800eace:	3041      	adds	r0, #65	; 0x41
 800ead0:	f008 ff42 	bl	8017958 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d>
 800ead4:	e73e      	b.n	800e954 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 800ead6:	f7ff fdf3 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800eada:	2302      	movs	r3, #2
 800eadc:	930e      	str	r3, [sp, #56]	; 0x38
 800eade:	4b1c      	ldr	r3, [pc, #112]	; (800eb50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 800eae0:	4a1d      	ldr	r2, [pc, #116]	; (800eb58 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x308>)
 800eae2:	930f      	str	r3, [sp, #60]	; 0x3c
 800eae4:	e788      	b.n	800e9f8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 800eae6:	2310      	movs	r3, #16
 800eae8:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800eaec:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800eaf0:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800eaf4:	f04f 0800 	mov.w	r8, #0
 800eaf8:	4b13      	ldr	r3, [pc, #76]	; (800eb48 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 800eafa:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800eafe:	f8cd 8004 	str.w	r8, [sp, #4]
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800eb08:	440a      	add	r2, r1
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	f7fb fdc6 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800eb10:	2001      	movs	r0, #1
 800eb12:	f7ff fd3b 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800eb16:	6833      	ldr	r3, [r6, #0]
 800eb18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb1c:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800eb20:	b157      	cbz	r7, 800eb38 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2e8>
 800eb22:	2001      	movs	r0, #1
 800eb24:	47b8      	blx	r7
 800eb26:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800eb2a:	f7f7 fd8b 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800eb2e:	4640      	mov	r0, r8
 800eb30:	47b8      	blx	r7
 800eb32:	6833      	ldr	r3, [r6, #0]
 800eb34:	2211      	movs	r2, #17
 800eb36:	e6e0      	b.n	800e8fa <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 800eb38:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800eb3c:	f7f7 fd82 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800eb40:	e7f7      	b.n	800eb32 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2e2>
 800eb42:	bf00      	nop
 800eb44:	20000034 	.word	0x20000034
 800eb48:	0800e851 	.word	0x0800e851
 800eb4c:	0801c07c 	.word	0x0801c07c
 800eb50:	0801c070 	.word	0x0801c070
 800eb54:	0801c08b 	.word	0x0801c08b
 800eb58:	0801c0a5 	.word	0x0801c0a5
 800eb5c:	2312      	movs	r3, #18
 800eb5e:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800eb62:	2003      	movs	r0, #3
 800eb64:	f7ff fd12 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800eb68:	6833      	ldr	r3, [r6, #0]
 800eb6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb6e:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	; 0x3f8
 800eb72:	b936      	cbnz	r6, 800eb82 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x332>
 800eb74:	f7f7 fd8e 	bl	8006694 <EMBENET_RADIO_RxNow>
 800eb78:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800eb7c:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 800eb80:	e788      	b.n	800ea94 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x244>
 800eb82:	2001      	movs	r0, #1
 800eb84:	47b0      	blx	r6
 800eb86:	f7f7 fd85 	bl	8006694 <EMBENET_RADIO_RxNow>
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	47b0      	blx	r6
 800eb8e:	e7f3      	b.n	800eb78 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x328>
 800eb90:	f7ff fd96 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800eb94:	2302      	movs	r3, #2
 800eb96:	930e      	str	r3, [sp, #56]	; 0x38
 800eb98:	4b43      	ldr	r3, [pc, #268]	; (800eca8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 800eb9a:	4a44      	ldr	r2, [pc, #272]	; (800ecac <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x45c>)
 800eb9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb9e:	e72b      	b.n	800e9f8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 800eba0:	2315      	movs	r3, #21
 800eba2:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800eba6:	2300      	movs	r3, #0
 800eba8:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800ebac:	f8d5 222c 	ldr.w	r2, [r5, #556]	; 0x22c
 800ebb0:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	4b3e      	ldr	r3, [pc, #248]	; (800ecb0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x460>)
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800ebbe:	440a      	add	r2, r1
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	f7fb fd6b 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	f7ff fce0 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ebd2:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800ebd6:	b10f      	cbz	r7, 800ebdc <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x38c>
 800ebd8:	2001      	movs	r0, #1
 800ebda:	47b8      	blx	r7
 800ebdc:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
 800ebe0:	f995 11d9 	ldrsb.w	r1, [r5, #473]	; 0x1d9
 800ebe4:	7a13      	ldrb	r3, [r2, #8]
 800ebe6:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800ebea:	6852      	ldr	r2, [r2, #4]
 800ebec:	f7f7 fcd6 	bl	800659c <EMBENET_RADIO_TxEnable>
 800ebf0:	b10f      	cbz	r7, 800ebf6 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x3a6>
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	47b8      	blx	r7
 800ebf6:	6833      	ldr	r3, [r6, #0]
 800ebf8:	2216      	movs	r2, #22
 800ebfa:	e67e      	b.n	800e8fa <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 800ebfc:	2317      	movs	r3, #23
 800ebfe:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 800ec02:	f8d5 2230 	ldr.w	r2, [r5, #560]	; 0x230
 800ec06:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 800ec0a:	f04f 0800 	mov.w	r8, #0
 800ec0e:	4b28      	ldr	r3, [pc, #160]	; (800ecb0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x460>)
 800ec10:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800ec14:	f8cd 8004 	str.w	r8, [sp, #4]
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800ec1e:	440a      	add	r2, r1
 800ec20:	2101      	movs	r1, #1
 800ec22:	f7fb fd3b 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800ec26:	2002      	movs	r0, #2
 800ec28:	f7ff fcb0 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800ec2c:	6833      	ldr	r3, [r6, #0]
 800ec2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ec32:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 800ec36:	b1ff      	cbz	r7, 800ec78 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x428>
 800ec38:	2001      	movs	r0, #1
 800ec3a:	47b8      	blx	r7
 800ec3c:	f7f7 fce4 	bl	8006608 <EMBENET_RADIO_TxNow>
 800ec40:	4606      	mov	r6, r0
 800ec42:	4640      	mov	r0, r8
 800ec44:	47b8      	blx	r7
 800ec46:	3604      	adds	r6, #4
 800ec48:	f43f ae84 	beq.w	800e954 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 800ec4c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800ec50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec52:	f8d5 8031 	ldr.w	r8, [r5, #49]	; 0x31
 800ec56:	f002 fff7 	bl	8011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 800ec5a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 800ec5c:	900d      	str	r0, [sp, #52]	; 0x34
 800ec5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ec60:	f002 ff1c 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800ec64:	4607      	mov	r7, r0
 800ec66:	f8d5 01c8 	ldr.w	r0, [r5, #456]	; 0x1c8
 800ec6a:	f995 a1d9 	ldrsb.w	sl, [r5, #473]	; 0x1d9
 800ec6e:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
 800ec72:	f890 b008 	ldrb.w	fp, [r0, #8]
 800ec76:	e69b      	b.n	800e9b0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x160>
 800ec78:	f7f7 fcc6 	bl	8006608 <EMBENET_RADIO_TxNow>
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	e7e2      	b.n	800ec46 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x3f6>
 800ec80:	f7ff fd1e 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ec84:	2302      	movs	r3, #2
 800ec86:	930e      	str	r3, [sp, #56]	; 0x38
 800ec88:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 800ec8a:	4a0a      	ldr	r2, [pc, #40]	; (800ecb4 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x464>)
 800ec8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec8e:	e6b3      	b.n	800e9f8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 800ec90:	f7ff fd16 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ec94:	2302      	movs	r3, #2
 800ec96:	930e      	str	r3, [sp, #56]	; 0x38
 800ec98:	4b03      	ldr	r3, [pc, #12]	; (800eca8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 800ec9a:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x468>)
 800ec9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec9e:	e6ab      	b.n	800e9f8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 800eca0:	b011      	add	sp, #68	; 0x44
 800eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca6:	bf00      	nop
 800eca8:	0801c070 	.word	0x0801c070
 800ecac:	0801c0be 	.word	0x0801c0be
 800ecb0:	0800e851 	.word	0x0800e851
 800ecb4:	0801c0d8 	.word	0x0801c0d8
 800ecb8:	0801c0e6 	.word	0x0801c0e6

0800ecbc <e0d63f279bcffa109806a257de8645074809531c>:
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	4e35      	ldr	r6, [pc, #212]	; (800ed98 <e0d63f279bcffa109806a257de8645074809531c+0xdc>)
 800ecc2:	b088      	sub	sp, #32
 800ecc4:	f7ff fcfc 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ecc8:	2141      	movs	r1, #65	; 0x41
 800ecca:	2040      	movs	r0, #64	; 0x40
 800eccc:	6835      	ldr	r5, [r6, #0]
 800ecce:	f7fb fbf3 	bl	800a4b8 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>
 800ecd2:	f04f 0800 	mov.w	r8, #0
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	f105 0731 	add.w	r7, r5, #49	; 0x31
 800ecdc:	2c00      	cmp	r4, #0
 800ecde:	d143      	bne.n	800ed68 <e0d63f279bcffa109806a257de8645074809531c+0xac>
 800ece0:	4620      	mov	r0, r4
 800ece2:	6837      	ldr	r7, [r6, #0]
 800ece4:	f002 f8e4 	bl	8010eb0 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 800ece8:	6833      	ldr	r3, [r6, #0]
 800ecea:	f887 403c 	strb.w	r4, [r7, #60]	; 0x3c
 800ecee:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800ecf2:	3201      	adds	r2, #1
 800ecf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ecf8:	e9c3 4400 	strd	r4, r4, [r3]
 800ecfc:	f007 fa1c 	bl	8016138 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>
 800ed00:	f7fa f946 	bl	8008f90 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37>
 800ed04:	f7fa fe30 	bl	8009968 <5abd2f358b9e462fcede09cdd96a94c4ca379573>
 800ed08:	2210      	movs	r2, #16
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	f10d 000d 	add.w	r0, sp, #13
 800ed10:	f00a f936 	bl	8018f80 <memset>
 800ed14:	2306      	movs	r3, #6
 800ed16:	f88d 300c 	strb.w	r3, [sp, #12]
 800ed1a:	f505 76ec 	add.w	r6, r5, #472	; 0x1d8
 800ed1e:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 800ed22:	42a3      	cmp	r3, r4
 800ed24:	d831      	bhi.n	800ed8a <e0d63f279bcffa109806a257de8645074809531c+0xce>
 800ed26:	2400      	movs	r4, #0
 800ed28:	ab01      	add	r3, sp, #4
 800ed2a:	9401      	str	r4, [sp, #4]
 800ed2c:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ed30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed34:	f002 f9f6 	bl	8011124 <6759635076cb4c933592248ebd293b63832a7e9b>
 800ed38:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800ed3c:	f8c5 41e0 	str.w	r4, [r5, #480]	; 0x1e0
 800ed40:	3301      	adds	r3, #1
 800ed42:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 800ed46:	f7fb fdd3 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	f7fb ff5e 	bl	800ac0c <9506f9c37a945216115ab5227293f46163fc6230>
 800ed50:	2301      	movs	r3, #1
 800ed52:	872b      	strh	r3, [r5, #56]	; 0x38
 800ed54:	86ec      	strh	r4, [r5, #54]	; 0x36
 800ed56:	f7fb fdcb 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800ed5a:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4
 800ed5e:	f008 fdef 	bl	8017940 <e9a40864df7737216396ae2e57c8bf2439468a7c>
 800ed62:	b008      	add	sp, #32
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 800ed72:	793b      	ldrb	r3, [r7, #4]
 800ed74:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800ed78:	2000      	movs	r0, #0
 800ed7a:	f003 fea9 	bl	8012ad0 <249d70512359d3b556e86d60c45850a37e74e9ce>
 800ed7e:	2141      	movs	r1, #65	; 0x41
 800ed80:	2040      	movs	r0, #64	; 0x40
 800ed82:	f7fb fb99 	bl	800a4b8 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>
 800ed86:	4604      	mov	r4, r0
 800ed88:	e7a8      	b.n	800ecdc <e0d63f279bcffa109806a257de8645074809531c+0x20>
 800ed8a:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 800ed8e:	a903      	add	r1, sp, #12
 800ed90:	f002 fb76 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 800ed94:	3401      	adds	r4, #1
 800ed96:	e7c2      	b.n	800ed1e <e0d63f279bcffa109806a257de8645074809531c+0x62>
 800ed98:	20000034 	.word	0x20000034

0800ed9c <251b1d447757d9850ec5af8486c96e3050487f39>:
 800ed9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed9e:	4c40      	ldr	r4, [pc, #256]	; (800eea0 <251b1d447757d9850ec5af8486c96e3050487f39+0x104>)
 800eda0:	6823      	ldr	r3, [r4, #0]
 800eda2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eda6:	460e      	mov	r6, r1
 800eda8:	f8d3 53fc 	ldr.w	r5, [r3, #1020]	; 0x3fc
 800edac:	b10d      	cbz	r5, 800edb2 <251b1d447757d9850ec5af8486c96e3050487f39+0x16>
 800edae:	2001      	movs	r0, #1
 800edb0:	47a8      	blx	r5
 800edb2:	6820      	ldr	r0, [r4, #0]
 800edb4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800edb8:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
 800edbc:	1af2      	subs	r2, r6, r3
 800edbe:	b191      	cbz	r1, 800ede6 <251b1d447757d9850ec5af8486c96e3050487f39+0x4a>
 800edc0:	4c38      	ldr	r4, [pc, #224]	; (800eea4 <251b1d447757d9850ec5af8486c96e3050487f39+0x108>)
 800edc2:	6921      	ldr	r1, [r4, #16]
 800edc4:	4291      	cmp	r1, r2
 800edc6:	d21f      	bcs.n	800ee08 <251b1d447757d9850ec5af8486c96e3050487f39+0x6c>
 800edc8:	2201      	movs	r2, #1
 800edca:	9202      	str	r2, [sp, #8]
 800edcc:	4a36      	ldr	r2, [pc, #216]	; (800eea8 <251b1d447757d9850ec5af8486c96e3050487f39+0x10c>)
 800edce:	9203      	str	r2, [sp, #12]
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	a904      	add	r1, sp, #16
 800edd4:	e911 0003 	ldmdb	r1, {r0, r1}
 800edd8:	4a34      	ldr	r2, [pc, #208]	; (800eeac <251b1d447757d9850ec5af8486c96e3050487f39+0x110>)
 800edda:	4633      	mov	r3, r6
 800eddc:	f7fe fc26 	bl	800d62c <LOGGER_PrintLine>
 800ede0:	f7ff fc6e 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ede4:	e008      	b.n	800edf8 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 800ede6:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
 800edea:	2b01      	cmp	r3, #1
 800edec:	d104      	bne.n	800edf8 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 800edee:	e9c0 2274 	strd	r2, r2, [r0, #464]	; 0x1d0
 800edf2:	2302      	movs	r3, #2
 800edf4:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	d04f      	beq.n	800ee9c <251b1d447757d9850ec5af8486c96e3050487f39+0x100>
 800edfc:	2000      	movs	r0, #0
 800edfe:	462b      	mov	r3, r5
 800ee00:	b004      	add	sp, #16
 800ee02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee06:	4718      	bx	r3
 800ee08:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
 800ee0c:	3907      	subs	r1, #7
 800ee0e:	2910      	cmp	r1, #16
 800ee10:	d8e6      	bhi.n	800ede0 <251b1d447757d9850ec5af8486c96e3050487f39+0x44>
 800ee12:	a601      	add	r6, pc, #4	; (adr r6, 800ee18 <251b1d447757d9850ec5af8486c96e3050487f39+0x7c>)
 800ee14:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 800ee18:	0800ee5d 	.word	0x0800ee5d
 800ee1c:	0800ede1 	.word	0x0800ede1
 800ee20:	0800ede1 	.word	0x0800ede1
 800ee24:	0800ede1 	.word	0x0800ede1
 800ee28:	0800ee7f 	.word	0x0800ee7f
 800ee2c:	0800ee7f 	.word	0x0800ee7f
 800ee30:	0800ede1 	.word	0x0800ede1
 800ee34:	0800ede1 	.word	0x0800ede1
 800ee38:	0800ede1 	.word	0x0800ede1
 800ee3c:	0800ede1 	.word	0x0800ede1
 800ee40:	0800ee8d 	.word	0x0800ee8d
 800ee44:	0800ee8d 	.word	0x0800ee8d
 800ee48:	0800ede1 	.word	0x0800ede1
 800ee4c:	0800ede1 	.word	0x0800ede1
 800ee50:	0800ede1 	.word	0x0800ede1
 800ee54:	0800ede1 	.word	0x0800ede1
 800ee58:	0800ee99 	.word	0x0800ee99
 800ee5c:	2108      	movs	r1, #8
 800ee5e:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 800ee62:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 800ee66:	69a1      	ldr	r1, [r4, #24]
 800ee68:	f890 01f0 	ldrb.w	r0, [r0, #496]	; 0x1f0
 800ee6c:	2400      	movs	r4, #0
 800ee6e:	9401      	str	r4, [sp, #4]
 800ee70:	4c0f      	ldr	r4, [pc, #60]	; (800eeb0 <251b1d447757d9850ec5af8486c96e3050487f39+0x114>)
 800ee72:	9400      	str	r4, [sp, #0]
 800ee74:	440a      	add	r2, r1
 800ee76:	2101      	movs	r1, #1
 800ee78:	f7fb fc10 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800ee7c:	e7bc      	b.n	800edf8 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 800ee7e:	210d      	movs	r1, #13
 800ee80:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 800ee84:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 800ee88:	69e1      	ldr	r1, [r4, #28]
 800ee8a:	e7ed      	b.n	800ee68 <251b1d447757d9850ec5af8486c96e3050487f39+0xcc>
 800ee8c:	2113      	movs	r1, #19
 800ee8e:	e9c0 2274 	strd	r2, r2, [r0, #464]	; 0x1d0
 800ee92:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 800ee96:	e7e6      	b.n	800ee66 <251b1d447757d9850ec5af8486c96e3050487f39+0xca>
 800ee98:	2118      	movs	r1, #24
 800ee9a:	e7f1      	b.n	800ee80 <251b1d447757d9850ec5af8486c96e3050487f39+0xe4>
 800ee9c:	b004      	add	sp, #16
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}
 800eea0:	20000034 	.word	0x20000034
 800eea4:	0801a5e0 	.word	0x0801a5e0
 800eea8:	0801c070 	.word	0x0801c070
 800eeac:	0801c0ff 	.word	0x0801c0ff
 800eeb0:	0800e851 	.word	0x0800e851

0800eeb4 <notifyFreeSlots>:
 800eeb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeb6:	4b1b      	ldr	r3, [pc, #108]	; (800ef24 <notifyFreeSlots+0x70>)
 800eeb8:	681f      	ldr	r7, [r3, #0]
 800eeba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800eebe:	b31b      	cbz	r3, 800ef08 <notifyFreeSlots+0x54>
 800eec0:	f7f7 f98c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800eec4:	f8d7 4031 	ldr.w	r4, [r7, #49]	; 0x31
 800eec8:	4b17      	ldr	r3, [pc, #92]	; (800ef28 <notifyFreeSlots+0x74>)
 800eeca:	f897 5035 	ldrb.w	r5, [r7, #53]	; 0x35
 800eece:	691e      	ldr	r6, [r3, #16]
 800eed0:	f8b7 71fa 	ldrh.w	r7, [r7, #506]	; 0x1fa
 800eed4:	3401      	adds	r4, #1
 800eed6:	f145 0500 	adc.w	r5, r5, #0
 800eeda:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800eede:	f7f7 f99d 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800eee2:	fba6 0104 	umull	r0, r1, r6, r4
 800eee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eeea:	2300      	movs	r3, #0
 800eeec:	fb06 1105 	mla	r1, r6, r5, r1
 800eef0:	f7f1 fe9c 	bl	8000c2c <__aeabi_uldivmod>
 800eef4:	4377      	muls	r7, r6
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	9700      	str	r7, [sp, #0]
 800eefc:	4620      	mov	r0, r4
 800eefe:	4629      	mov	r1, r5
 800ef00:	f008 fe30 	bl	8017b64 <EMBENET_INTERNAL_TRACE_OnFreeSlots>
 800ef04:	b003      	add	sp, #12
 800ef06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ef0c:	b133      	cbz	r3, 800ef1c <notifyFreeSlots+0x68>
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	2200      	movs	r2, #0
 800ef12:	2300      	movs	r3, #0
 800ef14:	4610      	mov	r0, r2
 800ef16:	4619      	mov	r1, r3
 800ef18:	f008 fe24 	bl	8017b64 <EMBENET_INTERNAL_TRACE_OnFreeSlots>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800ef22:	e7ef      	b.n	800ef04 <notifyFreeSlots+0x50>
 800ef24:	20000034 	.word	0x20000034
 800ef28:	0801a5e0 	.word	0x0801a5e0

0800ef2c <processEb.constprop.0>:
 800ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef30:	4b79      	ldr	r3, [pc, #484]	; (800f118 <processEb.constprop.0+0x1ec>)
 800ef32:	b089      	sub	sp, #36	; 0x24
 800ef34:	681f      	ldr	r7, [r3, #0]
 800ef36:	9104      	str	r1, [sp, #16]
 800ef38:	7a01      	ldrb	r1, [r0, #8]
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	2600      	movs	r6, #0
 800ef3e:	428e      	cmp	r6, r1
 800ef40:	d303      	bcc.n	800ef4a <processEb.constprop.0+0x1e>
 800ef42:	2000      	movs	r0, #0
 800ef44:	b009      	add	sp, #36	; 0x24
 800ef46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4a:	686a      	ldr	r2, [r5, #4]
 800ef4c:	5d93      	ldrb	r3, [r2, r6]
 800ef4e:	4432      	add	r2, r6
 800ef50:	3602      	adds	r6, #2
 800ef52:	7852      	ldrb	r2, [r2, #1]
 800ef54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ef5c:	9202      	str	r2, [sp, #8]
 800ef5e:	f3c3 22c3 	ubfx	r2, r3, #11, #4
 800ef62:	2a01      	cmp	r2, #1
 800ef64:	b2f6      	uxtb	r6, r6
 800ef66:	9205      	str	r2, [sp, #20]
 800ef68:	d121      	bne.n	800efae <processEb.constprop.0+0x82>
 800ef6a:	041b      	lsls	r3, r3, #16
 800ef6c:	d51f      	bpl.n	800efae <processEb.constprop.0+0x82>
 800ef6e:	f04f 0900 	mov.w	r9, #0
 800ef72:	4634      	mov	r4, r6
 800ef74:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef78:	46ca      	mov	sl, r9
 800ef7a:	46c8      	mov	r8, r9
 800ef7c:	46cb      	mov	fp, r9
 800ef7e:	9b02      	ldr	r3, [sp, #8]
 800ef80:	18f1      	adds	r1, r6, r3
 800ef82:	428c      	cmp	r4, r1
 800ef84:	f080 80b6 	bcs.w	800f0f4 <processEb.constprop.0+0x1c8>
 800ef88:	f1b9 0f00 	cmp.w	r9, #0
 800ef8c:	d013      	beq.n	800efb6 <processEb.constprop.0+0x8a>
 800ef8e:	f1bb 0f00 	cmp.w	fp, #0
 800ef92:	d010      	beq.n	800efb6 <processEb.constprop.0+0x8a>
 800ef94:	f1b8 0f00 	cmp.w	r8, #0
 800ef98:	d00d      	beq.n	800efb6 <processEb.constprop.0+0x8a>
 800ef9a:	f1ba 0f00 	cmp.w	sl, #0
 800ef9e:	d00a      	beq.n	800efb6 <processEb.constprop.0+0x8a>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	b143      	cbz	r3, 800efb6 <processEb.constprop.0+0x8a>
 800efa4:	9a04      	ldr	r2, [sp, #16]
 800efa6:	7a2b      	ldrb	r3, [r5, #8]
 800efa8:	8013      	strh	r3, [r2, #0]
 800efaa:	2001      	movs	r0, #1
 800efac:	e7ca      	b.n	800ef44 <processEb.constprop.0+0x18>
 800efae:	9b02      	ldr	r3, [sp, #8]
 800efb0:	441e      	add	r6, r3
 800efb2:	b2f6      	uxtb	r6, r6
 800efb4:	e7c3      	b.n	800ef3e <processEb.constprop.0+0x12>
 800efb6:	6868      	ldr	r0, [r5, #4]
 800efb8:	1901      	adds	r1, r0, r4
 800efba:	f810 e004 	ldrb.w	lr, [r0, r4]
 800efbe:	f891 c001 	ldrb.w	ip, [r1, #1]
 800efc2:	f8cd e00c 	str.w	lr, [sp, #12]
 800efc6:	ea4e 210c 	orr.w	r1, lr, ip, lsl #8
 800efca:	3402      	adds	r4, #2
 800efcc:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
 800efd0:	b2e4      	uxtb	r4, r4
 800efd2:	d00e      	beq.n	800eff2 <processEb.constprop.0+0xc6>
 800efd4:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800efd8:	2909      	cmp	r1, #9
 800efda:	d106      	bne.n	800efea <processEb.constprop.0+0xbe>
 800efdc:	5d01      	ldrb	r1, [r0, r4]
 800efde:	b921      	cbnz	r1, 800efea <processEb.constprop.0+0xbe>
 800efe0:	4a4d      	ldr	r2, [pc, #308]	; (800f118 <processEb.constprop.0+0x1ec>)
 800efe2:	6812      	ldr	r2, [r2, #0]
 800efe4:	46e3      	mov	fp, ip
 800efe6:	f882 11e5 	strb.w	r1, [r2, #485]	; 0x1e5
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	4423      	add	r3, r4
 800efee:	b2dc      	uxtb	r4, r3
 800eff0:	e7c5      	b.n	800ef7e <processEb.constprop.0+0x52>
 800eff2:	1209      	asrs	r1, r1, #8
 800eff4:	291c      	cmp	r1, #28
 800eff6:	d073      	beq.n	800f0e0 <processEb.constprop.0+0x1b4>
 800eff8:	dc41      	bgt.n	800f07e <processEb.constprop.0+0x152>
 800effa:	291a      	cmp	r1, #26
 800effc:	d05a      	beq.n	800f0b4 <processEb.constprop.0+0x188>
 800effe:	291b      	cmp	r1, #27
 800f000:	d1f3      	bne.n	800efea <processEb.constprop.0+0xbe>
 800f002:	f1bb 0f00 	cmp.w	fp, #0
 800f006:	d0f0      	beq.n	800efea <processEb.constprop.0+0xbe>
 800f008:	f1b8 0f00 	cmp.w	r8, #0
 800f00c:	d0ed      	beq.n	800efea <processEb.constprop.0+0xbe>
 800f00e:	f10d 0b18 	add.w	fp, sp, #24
 800f012:	4658      	mov	r0, fp
 800f014:	f002 f8ae 	bl	8011174 <362182124631b23da2866810d52fbd55ab277bcc>
 800f018:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800f01c:	bb5a      	cbnz	r2, 800f076 <processEb.constprop.0+0x14a>
 800f01e:	686a      	ldr	r2, [r5, #4]
 800f020:	5d11      	ldrb	r1, [r2, r4]
 800f022:	f88d 101b 	strb.w	r1, [sp, #27]
 800f026:	4422      	add	r2, r4
 800f028:	7851      	ldrb	r1, [r2, #1]
 800f02a:	f88d 101a 	strb.w	r1, [sp, #26]
 800f02e:	7891      	ldrb	r1, [r2, #2]
 800f030:	78d2      	ldrb	r2, [r2, #3]
 800f032:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 800f036:	2a0d      	cmp	r2, #13
 800f038:	d11f      	bne.n	800f07a <processEb.constprop.0+0x14e>
 800f03a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f03e:	2201      	movs	r2, #1
 800f040:	f88d 201c 	strb.w	r2, [sp, #28]
 800f044:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800f048:	f002 f86c 	bl	8011124 <6759635076cb4c933592248ebd293b63832a7e9b>
 800f04c:	686a      	ldr	r2, [r5, #4]
 800f04e:	4422      	add	r2, r4
 800f050:	7912      	ldrb	r2, [r2, #4]
 800f052:	2a01      	cmp	r2, #1
 800f054:	4611      	mov	r1, r2
 800f056:	bf28      	it	cs
 800f058:	2101      	movcs	r1, #1
 800f05a:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800f05e:	b152      	cbz	r2, 800f076 <processEb.constprop.0+0x14a>
 800f060:	686a      	ldr	r2, [r5, #4]
 800f062:	4422      	add	r2, r4
 800f064:	7951      	ldrb	r1, [r2, #5]
 800f066:	79d0      	ldrb	r0, [r2, #7]
 800f068:	7992      	ldrb	r2, [r2, #6]
 800f06a:	f887 01dc 	strb.w	r0, [r7, #476]	; 0x1dc
 800f06e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 800f072:	f8a7 21da 	strh.w	r2, [r7, #474]	; 0x1da
 800f076:	f8cd 8004 	str.w	r8, [sp, #4]
 800f07a:	46c3      	mov	fp, r8
 800f07c:	e7b5      	b.n	800efea <processEb.constprop.0+0xbe>
 800f07e:	2937      	cmp	r1, #55	; 0x37
 800f080:	d1b3      	bne.n	800efea <processEb.constprop.0+0xbe>
 800f082:	a906      	add	r1, sp, #24
 800f084:	f105 0042 	add.w	r0, r5, #66	; 0x42
 800f088:	f7f9 ff98 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 800f08c:	b178      	cbz	r0, 800f0ae <processEb.constprop.0+0x182>
 800f08e:	686b      	ldr	r3, [r5, #4]
 800f090:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f094:	5b19      	ldrh	r1, [r3, r4]
 800f096:	f7f9 fe3b 	bl	8008d10 <NEIGHBORS_SetRxSlotCandidate>
 800f09a:	3402      	adds	r4, #2
 800f09c:	686b      	ldr	r3, [r5, #4]
 800f09e:	5d1b      	ldrb	r3, [r3, r4]
 800f0a0:	b12b      	cbz	r3, 800f0ae <processEb.constprop.0+0x182>
 800f0a2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f0a6:	f107 0131 	add.w	r1, r7, #49	; 0x31
 800f0aa:	f7f9 fbc3 	bl	8008834 <027deecf67887395ef5db16208d3312ee727e45e>
 800f0ae:	f04f 0901 	mov.w	r9, #1
 800f0b2:	e79a      	b.n	800efea <processEb.constprop.0+0xbe>
 800f0b4:	1901      	adds	r1, r0, r4
 800f0b6:	5900      	ldr	r0, [r0, r4]
 800f0b8:	f8c7 0031 	str.w	r0, [r7, #49]	; 0x31
 800f0bc:	7909      	ldrb	r1, [r1, #4]
 800f0be:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 800f0c2:	6869      	ldr	r1, [r5, #4]
 800f0c4:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800f0c8:	9b05      	ldr	r3, [sp, #20]
 800f0ca:	4421      	add	r1, r4
 800f0cc:	f04f 0a01 	mov.w	sl, #1
 800f0d0:	7949      	ldrb	r1, [r1, #5]
 800f0d2:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
 800f0d6:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800f0da:	f881 309f 	strb.w	r3, [r1, #159]	; 0x9f
 800f0de:	e784      	b.n	800efea <processEb.constprop.0+0xbe>
 800f0e0:	5d01      	ldrb	r1, [r0, r4]
 800f0e2:	2900      	cmp	r1, #0
 800f0e4:	d181      	bne.n	800efea <processEb.constprop.0+0xbe>
 800f0e6:	4b0c      	ldr	r3, [pc, #48]	; (800f118 <processEb.constprop.0+0x1ec>)
 800f0e8:	6818      	ldr	r0, [r3, #0]
 800f0ea:	f04f 0801 	mov.w	r8, #1
 800f0ee:	f880 11e4 	strb.w	r1, [r0, #484]	; 0x1e4
 800f0f2:	e77a      	b.n	800efea <processEb.constprop.0+0xbe>
 800f0f4:	f1bb 0f00 	cmp.w	fp, #0
 800f0f8:	f43f af23 	beq.w	800ef42 <processEb.constprop.0+0x16>
 800f0fc:	f1b8 0f00 	cmp.w	r8, #0
 800f100:	f43f af1f 	beq.w	800ef42 <processEb.constprop.0+0x16>
 800f104:	f1ba 0f00 	cmp.w	sl, #0
 800f108:	f43f af1b 	beq.w	800ef42 <processEb.constprop.0+0x16>
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f43f af17 	beq.w	800ef42 <processEb.constprop.0+0x16>
 800f114:	e746      	b.n	800efa4 <processEb.constprop.0+0x78>
 800f116:	bf00      	nop
 800f118:	20000034 	.word	0x20000034

0800f11c <c6bd410106c16f549c325b1ca136c82e89930dcb>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	4ec2      	ldr	r6, [pc, #776]	; (800f42c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x310>)
 800f122:	6833      	ldr	r3, [r6, #0]
 800f124:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f128:	b0af      	sub	sp, #188	; 0xbc
 800f12a:	f8d3 53fc 	ldr.w	r5, [r3, #1020]	; 0x3fc
 800f12e:	4688      	mov	r8, r1
 800f130:	b10d      	cbz	r5, 800f136 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x1a>
 800f132:	2001      	movs	r0, #1
 800f134:	47a8      	blx	r5
 800f136:	6834      	ldr	r4, [r6, #0]
 800f138:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f13c:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800f140:	b1a2      	cbz	r2, 800f16c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x50>
 800f142:	4abb      	ldr	r2, [pc, #748]	; (800f430 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x314>)
 800f144:	6912      	ldr	r2, [r2, #16]
 800f146:	eba8 0703 	sub.w	r7, r8, r3
 800f14a:	42ba      	cmp	r2, r7
 800f14c:	f080 817c 	bcs.w	800f448 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x32c>
 800f150:	2201      	movs	r2, #1
 800f152:	9219      	str	r2, [sp, #100]	; 0x64
 800f154:	4ab7      	ldr	r2, [pc, #732]	; (800f434 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 800f156:	921a      	str	r2, [sp, #104]	; 0x68
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	4ab7      	ldr	r2, [pc, #732]	; (800f438 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x31c>)
 800f15c:	49b5      	ldr	r1, [pc, #724]	; (800f434 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 800f15e:	4643      	mov	r3, r8
 800f160:	2001      	movs	r0, #1
 800f162:	f7fe fa63 	bl	800d62c <LOGGER_PrintLine>
 800f166:	f7ff faab 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800f16a:	e072      	b.n	800f252 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 800f16c:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800f170:	f7fb fb8c 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 800f174:	2001      	movs	r0, #1
 800f176:	f7ff fa09 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800f17a:	6833      	ldr	r3, [r6, #0]
 800f17c:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
 800f180:	2a02      	cmp	r2, #2
 800f182:	d143      	bne.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f184:	2203      	movs	r2, #3
 800f186:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800f18a:	2031      	movs	r0, #49	; 0x31
 800f18c:	f7fa fc1a 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800f190:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 800f194:	2800      	cmp	r0, #0
 800f196:	d039      	beq.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f198:	2331      	movs	r3, #49	; 0x31
 800f19a:	7003      	strb	r3, [r0, #0]
 800f19c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
 800f1a0:	7053      	strb	r3, [r2, #1]
 800f1a2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1a6:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 800f1aa:	605a      	str	r2, [r3, #4]
 800f1ac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1b0:	22c0      	movs	r2, #192	; 0xc0
 800f1b2:	6859      	ldr	r1, [r3, #4]
 800f1b4:	a812      	add	r0, sp, #72	; 0x48
 800f1b6:	f7f7 fa7d 	bl	80066b4 <EMBENET_RADIO_GetReceivedFrame>
 800f1ba:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1c0:	721a      	strb	r2, [r3, #8]
 800f1c2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1c6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800f1ca:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 800f1ce:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1d2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800f1d6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800f1da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f1de:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 800f1e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f1e6:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f1ea:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800f1ee:	b16b      	cbz	r3, 800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f1f0:	7a03      	ldrb	r3, [r0, #8]
 800f1f2:	1e5a      	subs	r2, r3, #1
 800f1f4:	b2d2      	uxtb	r2, r2
 800f1f6:	2abf      	cmp	r2, #191	; 0xbf
 800f1f8:	a919      	add	r1, sp, #100	; 0x64
 800f1fa:	d933      	bls.n	800f264 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x148>
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	9219      	str	r2, [sp, #100]	; 0x64
 800f200:	4a8c      	ldr	r2, [pc, #560]	; (800f434 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 800f202:	921a      	str	r2, [sp, #104]	; 0x68
 800f204:	c903      	ldmia	r1, {r0, r1}
 800f206:	4a8d      	ldr	r2, [pc, #564]	; (800f43c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x320>)
 800f208:	f7fe fa10 	bl	800d62c <LOGGER_PrintLine>
 800f20c:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f210:	f7fa fc96 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800f214:	6833      	ldr	r3, [r6, #0]
 800f216:	2700      	movs	r7, #0
 800f218:	2601      	movs	r6, #1
 800f21a:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
 800f21e:	f883 61bd 	strb.w	r6, [r3, #445]	; 0x1bd
 800f222:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
 800f226:	f7f7 fa0d 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800f22a:	f7f7 fa33 	bl	8006694 <EMBENET_RADIO_RxNow>
 800f22e:	2003      	movs	r0, #3
 800f230:	f7ff f9ac 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800f234:	f7fb fb5c 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800f238:	4a81      	ldr	r2, [pc, #516]	; (800f440 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x324>)
 800f23a:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
 800f23e:	4603      	mov	r3, r0
 800f240:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800f244:	9200      	str	r2, [sp, #0]
 800f246:	4a7a      	ldr	r2, [pc, #488]	; (800f430 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x314>)
 800f248:	9701      	str	r7, [sp, #4]
 800f24a:	6912      	ldr	r2, [r2, #16]
 800f24c:	2101      	movs	r1, #1
 800f24e:	f7fb fa25 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800f252:	2d00      	cmp	r5, #0
 800f254:	f000 84aa 	beq.w	800fbac <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa90>
 800f258:	2000      	movs	r0, #0
 800f25a:	462b      	mov	r3, r5
 800f25c:	b02f      	add	sp, #188	; 0xbc
 800f25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f262:	4718      	bx	r3
 800f264:	f009 fa44 	bl	80186f0 <93646682ea820ae310ba1b54d0fccca9d773749e>
 800f268:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0cd      	beq.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f270:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f274:	f89d 9066 	ldrb.w	r9, [sp, #102]	; 0x66
 800f278:	f883 9052 	strb.w	r9, [r3, #82]	; 0x52
 800f27c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f280:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800f284:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f288:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f28c:	f10d 0291 	add.w	r2, sp, #145	; 0x91
 800f290:	3341      	adds	r3, #65	; 0x41
 800f292:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 800f296:	f852 0b04 	ldr.w	r0, [r2], #4
 800f29a:	f843 0b04 	str.w	r0, [r3], #4
 800f29e:	428a      	cmp	r2, r1
 800f2a0:	d1f9      	bne.n	800f296 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x17a>
 800f2a2:	7812      	ldrb	r2, [r2, #0]
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	6837      	ldr	r7, [r6, #0]
 800f2a8:	f8d4 a1c4 	ldr.w	sl, [r4, #452]	; 0x1c4
 800f2ac:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	b142      	cbz	r2, 800f2c6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x1aa>
 800f2b4:	9314      	str	r3, [sp, #80]	; 0x50
 800f2b6:	4b5f      	ldr	r3, [pc, #380]	; (800f434 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 800f2b8:	4a62      	ldr	r2, [pc, #392]	; (800f444 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x328>)
 800f2ba:	9315      	str	r3, [sp, #84]	; 0x54
 800f2bc:	4619      	mov	r1, r3
 800f2be:	2001      	movs	r0, #1
 800f2c0:	f7fe f9b4 	bl	800d62c <LOGGER_PrintLine>
 800f2c4:	e7a2      	b.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f2c6:	f1b9 0f00 	cmp.w	r9, #0
 800f2ca:	d19f      	bne.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f2cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f2ce:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800f2d2:	f7f9 f871 	bl	80083b8 <00481873317fdef387db1bb310377b408b8e47be>
 800f2d6:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800f2da:	4650      	mov	r0, sl
 800f2dc:	f008 fde6 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f2e0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f2e4:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d08f      	beq.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f2ec:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d08b      	beq.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f2f4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d187      	bne.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f2fc:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 800f300:	4650      	mov	r0, sl
 800f302:	f7ff fe13 	bl	800ef2c <processEb.constprop.0>
 800f306:	2800      	cmp	r0, #0
 800f308:	d080      	beq.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f30a:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800f30e:	4650      	mov	r0, sl
 800f310:	f008 fd8c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 800f314:	2800      	cmp	r0, #0
 800f316:	f43f af79 	beq.w	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f31a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f31e:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800f322:	4651      	mov	r1, sl
 800f324:	f8a8 9004 	strh.w	r9, [r8, #4]
 800f328:	f107 0031 	add.w	r0, r7, #49	; 0x31
 800f32c:	f7ff f8ca 	bl	800e4c4 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 800f330:	b920      	cbnz	r0, 800f33c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x220>
 800f332:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f336:	f001 fef5 	bl	8011124 <6759635076cb4c933592248ebd293b63832a7e9b>
 800f33a:	e767      	b.n	800f20c <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 800f33c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800f340:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800f344:	f008 fdb2 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f348:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 800f34c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 800f350:	f008 fdac 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f354:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800f358:	f7fb faca 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800f35c:	ba7f      	rev16	r7, r7
 800f35e:	b2bf      	uxth	r7, r7
 800f360:	4601      	mov	r1, r0
 800f362:	4638      	mov	r0, r7
 800f364:	f7fb fc98 	bl	800ac98 <d492673eb40b0122449614ddec3203e781e2c714>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d0e2      	beq.n	800f332 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x216>
 800f36c:	2210      	movs	r2, #16
 800f36e:	2100      	movs	r1, #0
 800f370:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 800f374:	f009 fe04 	bl	8018f80 <memset>
 800f378:	2306      	movs	r3, #6
 800f37a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800f37e:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
 800f382:	4627      	mov	r7, r4
 800f384:	f104 0a31 	add.w	sl, r4, #49	; 0x31
 800f388:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
 800f38c:	1b3b      	subs	r3, r7, r4
 800f38e:	429a      	cmp	r2, r3
 800f390:	d835      	bhi.n	800f3fe <c6bd410106c16f549c325b1ca136c82e89930dcb+0x2e2>
 800f392:	f8d4 9031 	ldr.w	r9, [r4, #49]	; 0x31
 800f396:	f894 8035 	ldrb.w	r8, [r4, #53]	; 0x35
 800f39a:	f001 ff05 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800f39e:	2700      	movs	r7, #0
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	463b      	mov	r3, r7
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	4641      	mov	r1, r8
 800f3a8:	f7f1 fc40 	bl	8000c2c <__aeabi_uldivmod>
 800f3ac:	b290      	uxth	r0, r2
 800f3ae:	86e0      	strh	r0, [r4, #54]	; 0x36
 800f3b0:	f002 fab2 	bl	8011918 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>
 800f3b4:	f002 fb30 	bl	8011a18 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 800f3b8:	8720      	strh	r0, [r4, #56]	; 0x38
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f7ff f8e6 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800f3c0:	f7f7 f8e2 	bl	8006588 <EMBENET_RADIO_Idle>
 800f3c4:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 800f3c8:	f7ff f916 	bl	800e5f8 <66ac93647e4c684dee2227e883242cdee4e3524a>
 800f3cc:	6836      	ldr	r6, [r6, #0]
 800f3ce:	2001      	movs	r0, #1
 800f3d0:	f001 fd6e 	bl	8010eb0 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 800f3da:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800f3de:	ba76      	rev16	r6, r6
 800f3e0:	b2b6      	uxth	r6, r6
 800f3e2:	a929      	add	r1, sp, #164	; 0xa4
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f008 fa0f 	bl	8017808 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4>
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f008 fa9c 	bl	8017928 <658f5a28751601d813ae36c10ddb69a9ae00a793>
 800f3f0:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f3f4:	f7ff f930 	bl	800e658 <0d988943f13c94ad3b7af08357d5d17f9043f067>
 800f3f8:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
 800f3fc:	e6b3      	b.n	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f3fe:	f8da 0000 	ldr.w	r0, [sl]
 800f402:	f839 cf02 	ldrh.w	ip, [r9, #2]!
 800f406:	9002      	str	r0, [sp, #8]
 800f408:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800f40c:	f88d 300c 	strb.w	r3, [sp, #12]
 800f410:	f8cd 8004 	str.w	r8, [sp, #4]
 800f414:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	2301      	movs	r3, #1
 800f41c:	461a      	mov	r2, r3
 800f41e:	2103      	movs	r1, #3
 800f420:	4660      	mov	r0, ip
 800f422:	f001 fed1 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 800f426:	3701      	adds	r7, #1
 800f428:	e7ae      	b.n	800f388 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x26c>
 800f42a:	bf00      	nop
 800f42c:	20000034 	.word	0x20000034
 800f430:	0801a5e0 	.word	0x0801a5e0
 800f434:	0801c070 	.word	0x0801c070
 800f438:	0801c0ff 	.word	0x0801c0ff
 800f43c:	0801c12b 	.word	0x0801c12b
 800f440:	0800fbbd 	.word	0x0800fbbd
 800f444:	0801c153 	.word	0x0801c153
 800f448:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
 800f44c:	2b13      	cmp	r3, #19
 800f44e:	f000 8191 	beq.w	800f774 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x658>
 800f452:	d811      	bhi.n	800f478 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x35c>
 800f454:	2b08      	cmp	r3, #8
 800f456:	d02c      	beq.n	800f4b2 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x396>
 800f458:	2b0d      	cmp	r3, #13
 800f45a:	f47f ae84 	bne.w	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f45e:	2001      	movs	r0, #1
 800f460:	f7ff f894 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800f464:	f7f6 feba 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800f468:	6833      	ldr	r3, [r6, #0]
 800f46a:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800f46e:	2b0d      	cmp	r3, #13
 800f470:	d05a      	beq.n	800f528 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x40c>
 800f472:	f7f6 fed3 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800f476:	e6ec      	b.n	800f252 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 800f478:	2b18      	cmp	r3, #24
 800f47a:	f47f ae74 	bne.w	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f47e:	2319      	movs	r3, #25
 800f480:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
 800f484:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800f488:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 800f48c:	f7fa fb58 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800f490:	2300      	movs	r3, #0
 800f492:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 800f496:	f7f8 ff5f 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f040 8381 	bne.w	800fba2 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 800f4a0:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f4a4:	3042      	adds	r0, #66	; 0x42
 800f4a6:	f7f9 fbc7 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f000 8379 	beq.w	800fba2 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 800f4b0:	e2c7      	b.n	800fa42 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 800f4b2:	2309      	movs	r3, #9
 800f4b4:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
 800f4b8:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800f4bc:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 800f4c0:	b90b      	cbnz	r3, 800f4c6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3aa>
 800f4c2:	f7ff f8fd 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800f4c6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 800f4ca:	3041      	adds	r0, #65	; 0x41
 800f4cc:	f7f9 fe28 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	b960      	cbnz	r0, 800f4ee <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3d2>
 800f4d4:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 800f4d8:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800f4dc:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	4b9e      	ldr	r3, [pc, #632]	; (800f75c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x640>)
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800f4ea:	440a      	add	r2, r1
 800f4ec:	e6ae      	b.n	800f24c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x130>
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 800f4f6:	f002 fc93 	bl	8011e20 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 800f4fa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800f4fe:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 800f502:	b113      	cbz	r3, 800f50a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3ee>
 800f504:	3b01      	subs	r3, #1
 800f506:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 800f50a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 800f50e:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 800f512:	b933      	cbnz	r3, 800f522 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x406>
 800f514:	2101      	movs	r1, #1
 800f516:	f7ff f8bb 	bl	800e690 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 800f51a:	2300      	movs	r3, #0
 800f51c:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 800f520:	e621      	b.n	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f522:	2340      	movs	r3, #64	; 0x40
 800f524:	7043      	strb	r3, [r0, #1]
 800f526:	e7f8      	b.n	800f51a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3fe>
 800f528:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800f52c:	f7fb f9ae 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 800f530:	f7f6 fe74 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800f534:	6833      	ldr	r3, [r6, #0]
 800f536:	220e      	movs	r2, #14
 800f538:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800f53c:	2031      	movs	r0, #49	; 0x31
 800f53e:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 800f542:	f7fa fa3f 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800f546:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
 800f54a:	2800      	cmp	r0, #0
 800f54c:	f43f ae0b 	beq.w	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f550:	2331      	movs	r3, #49	; 0x31
 800f552:	7003      	strb	r3, [r0, #0]
 800f554:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800f558:	7053      	strb	r3, [r2, #1]
 800f55a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f55e:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 800f562:	605a      	str	r2, [r3, #4]
 800f564:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f568:	22c0      	movs	r2, #192	; 0xc0
 800f56a:	6859      	ldr	r1, [r3, #4]
 800f56c:	a814      	add	r0, sp, #80	; 0x50
 800f56e:	f7f7 f8a1 	bl	80066b4 <EMBENET_RADIO_GetReceivedFrame>
 800f572:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f576:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 800f57a:	f99d 8050 	ldrsb.w	r8, [sp, #80]	; 0x50
 800f57e:	f883 9008 	strb.w	r9, [r3, #8]
 800f582:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f586:	f883 80b6 	strb.w	r8, [r3, #182]	; 0xb6
 800f58a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f58e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800f592:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800f596:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f59a:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 800f59e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f5a2:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 800f5a6:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800f5aa:	b183      	cbz	r3, 800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f5ac:	7a03      	ldrb	r3, [r0, #8]
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2bbf      	cmp	r3, #191	; 0xbf
 800f5b4:	a919      	add	r1, sp, #100	; 0x64
 800f5b6:	d912      	bls.n	800f5de <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4c2>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	9319      	str	r3, [sp, #100]	; 0x64
 800f5bc:	4b68      	ldr	r3, [pc, #416]	; (800f760 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x644>)
 800f5be:	931a      	str	r3, [sp, #104]	; 0x68
 800f5c0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f5c4:	4a67      	ldr	r2, [pc, #412]	; (800f764 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x648>)
 800f5c6:	7a1b      	ldrb	r3, [r3, #8]
 800f5c8:	c903      	ldmia	r1, {r0, r1}
 800f5ca:	f7fe f82f 	bl	800d62c <LOGGER_PrintLine>
 800f5ce:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 800f5d2:	f7fa fab5 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 800f5dc:	e5c3      	b.n	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f5de:	f009 f887 	bl	80186f0 <93646682ea820ae310ba1b54d0fccca9d773749e>
 800f5e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f5e4:	4a60      	ldr	r2, [pc, #384]	; (800f768 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x64c>)
 800f5e6:	f8d4 61c0 	ldr.w	r6, [r4, #448]	; 0x1c0
 800f5ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d1ed      	bne.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f5f2:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800f5f6:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d1e7      	bne.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f5fe:	2004      	movs	r0, #4
 800f600:	f7f8 feb8 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800f604:	4601      	mov	r1, r0
 800f606:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800f60a:	f7f9 fe5f 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d0dd      	beq.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f612:	a820      	add	r0, sp, #128	; 0x80
 800f614:	f7f8 ff16 	bl	8008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d0d8      	beq.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f61c:	f106 0141 	add.w	r1, r6, #65	; 0x41
 800f620:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 800f624:	f7f9 fe52 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d0d0      	beq.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f62c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f630:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 800f634:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800f638:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f63c:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800f640:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f644:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800f648:	f10d 0391 	add.w	r3, sp, #145	; 0x91
 800f64c:	3241      	adds	r2, #65	; 0x41
 800f64e:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 800f652:	f853 0b04 	ldr.w	r0, [r3], #4
 800f656:	f842 0b04 	str.w	r0, [r2], #4
 800f65a:	428b      	cmp	r3, r1
 800f65c:	d1f9      	bne.n	800f652 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x536>
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	7013      	strb	r3, [r2, #0]
 800f662:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800f666:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
 800f66a:	4638      	mov	r0, r7
 800f66c:	f7fe ff2a 	bl	800e4c4 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 800f670:	2800      	cmp	r0, #0
 800f672:	d0ac      	beq.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f674:	f8d4 b031 	ldr.w	fp, [r4, #49]	; 0x31
 800f678:	f894 a035 	ldrb.w	sl, [r4, #53]	; 0x35
 800f67c:	f002 fae4 	bl	8011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 800f680:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f682:	930d      	str	r3, [sp, #52]	; 0x34
 800f684:	900e      	str	r0, [sp, #56]	; 0x38
 800f686:	f002 fa09 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800f68a:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800f68e:	900b      	str	r0, [sp, #44]	; 0x2c
 800f690:	a820      	add	r0, sp, #128	; 0x80
 800f692:	930a      	str	r3, [sp, #40]	; 0x28
 800f694:	f7f9 fd72 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800f698:	900c      	str	r0, [sp, #48]	; 0x30
 800f69a:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 800f69e:	460e      	mov	r6, r1
 800f6a0:	f7f9 fd6c 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800f6a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6a6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800f6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	f04f 0c00 	mov.w	ip, #0
 800f6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6b4:	f8cd c020 	str.w	ip, [sp, #32]
 800f6b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	4658      	mov	r0, fp
 800f6c4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f6c8:	4651      	mov	r1, sl
 800f6ca:	f008 f9ef 	bl	8017aac <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 800f6ce:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800f6d2:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 800f6d6:	f008 fbe9 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f6da:	f7f8 fe3d 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800f6de:	4680      	mov	r8, r0
 800f6e0:	bb50      	cbnz	r0, 800f738 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 800f6e2:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 800f6e6:	3042      	adds	r0, #66	; 0x42
 800f6e8:	f7f9 faa6 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800f6ec:	b320      	cbz	r0, 800f738 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 800f6ee:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800f76c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x650>
 800f6f2:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
 800f6f6:	f8d9 6000 	ldr.w	r6, [r9]
 800f6fa:	17c3      	asrs	r3, r0, #31
 800f6fc:	e9c6 037a 	strd	r0, r3, [r6, #488]	; 0x1e8
 800f700:	4b1b      	ldr	r3, [pc, #108]	; (800f770 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x654>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	8773      	strh	r3, [r6, #58]	; 0x3a
 800f706:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800f70a:	b1ab      	cbz	r3, 800f738 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 800f70c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800f710:	bb03      	cbnz	r3, 800f754 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x638>
 800f712:	f008 f9bf 	bl	8017a94 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>
 800f716:	f8d9 3000 	ldr.w	r3, [r9]
 800f71a:	e9d6 217a 	ldrd	r2, r1, [r6, #488]	; 0x1e8
 800f71e:	681e      	ldr	r6, [r3, #0]
 800f720:	17f0      	asrs	r0, r6, #31
 800f722:	42b2      	cmp	r2, r6
 800f724:	685e      	ldr	r6, [r3, #4]
 800f726:	eb71 0000 	sbcs.w	r0, r1, r0
 800f72a:	bfb8      	it	lt
 800f72c:	601a      	strlt	r2, [r3, #0]
 800f72e:	17f0      	asrs	r0, r6, #31
 800f730:	4296      	cmp	r6, r2
 800f732:	4188      	sbcs	r0, r1
 800f734:	da00      	bge.n	800f738 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 800f736:	605a      	str	r2, [r3, #4]
 800f738:	2201      	movs	r2, #1
 800f73a:	4611      	mov	r1, r2
 800f73c:	4638      	mov	r0, r7
 800f73e:	f002 fb6f 	bl	8011e20 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 800f742:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 800f746:	2101      	movs	r1, #1
 800f748:	f7fe ffa2 	bl	800e690 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 800f74c:	2300      	movs	r3, #0
 800f74e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 800f752:	e73c      	b.n	800f5ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 800f754:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
 800f758:	e7ee      	b.n	800f738 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 800f75a:	bf00      	nop
 800f75c:	0800e851 	.word	0x0800e851
 800f760:	0801c070 	.word	0x0801c070
 800f764:	0801c12b 	.word	0x0801c12b
 800f768:	00020001 	.word	0x00020001
 800f76c:	20000034 	.word	0x20000034
 800f770:	0801a658 	.word	0x0801a658
 800f774:	2001      	movs	r0, #1
 800f776:	f7fe ff09 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800f77a:	f7f6 fd2f 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 800f77e:	6833      	ldr	r3, [r6, #0]
 800f780:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 800f784:	2b13      	cmp	r3, #19
 800f786:	f47f ae74 	bne.w	800f472 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x356>
 800f78a:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800f78e:	f7fb f87d 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 800f792:	f7f6 fd43 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 800f796:	6833      	ldr	r3, [r6, #0]
 800f798:	2214      	movs	r2, #20
 800f79a:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800f79e:	2031      	movs	r0, #49	; 0x31
 800f7a0:	f7fa f910 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800f7a4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	f43f acdc 	beq.w	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f7ae:	2331      	movs	r3, #49	; 0x31
 800f7b0:	7003      	strb	r3, [r0, #0]
 800f7b2:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
 800f7b6:	7053      	strb	r3, [r2, #1]
 800f7b8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7bc:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 800f7c0:	605a      	str	r2, [r3, #4]
 800f7c2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7c6:	22c0      	movs	r2, #192	; 0xc0
 800f7c8:	6859      	ldr	r1, [r3, #4]
 800f7ca:	a812      	add	r0, sp, #72	; 0x48
 800f7cc:	f7f6 ff72 	bl	80066b4 <EMBENET_RADIO_GetReceivedFrame>
 800f7d0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7d4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800f7d8:	f883 9008 	strb.w	r9, [r3, #8]
 800f7dc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7e0:	f99d 8048 	ldrsb.w	r8, [sp, #72]	; 0x48
 800f7e4:	f883 80b6 	strb.w	r8, [r3, #182]	; 0xb6
 800f7e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800f7f0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800f7f4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f7f8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 800f7fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f800:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f804:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800f808:	b16b      	cbz	r3, 800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f80a:	7a03      	ldrb	r3, [r0, #8]
 800f80c:	1e5a      	subs	r2, r3, #1
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	2abf      	cmp	r2, #191	; 0xbf
 800f812:	a919      	add	r1, sp, #100	; 0x64
 800f814:	d912      	bls.n	800f83c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x720>
 800f816:	2201      	movs	r2, #1
 800f818:	9219      	str	r2, [sp, #100]	; 0x64
 800f81a:	4aa0      	ldr	r2, [pc, #640]	; (800fa9c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x980>)
 800f81c:	921a      	str	r2, [sp, #104]	; 0x68
 800f81e:	c903      	ldmia	r1, {r0, r1}
 800f820:	4a9f      	ldr	r2, [pc, #636]	; (800faa0 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x984>)
 800f822:	f7fd ff03 	bl	800d62c <LOGGER_PrintLine>
 800f826:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f82a:	2800      	cmp	r0, #0
 800f82c:	f43f ac9b 	beq.w	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f830:	f7fa f986 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800f834:	2300      	movs	r3, #0
 800f836:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 800f83a:	e494      	b.n	800f166 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 800f83c:	f008 ff58 	bl	80186f0 <93646682ea820ae310ba1b54d0fccca9d773749e>
 800f840:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f844:	2b00      	cmp	r3, #0
 800f846:	d0ee      	beq.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f848:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d8ea      	bhi.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f850:	2004      	movs	r0, #4
 800f852:	f7f8 fd8f 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800f856:	4601      	mov	r1, r0
 800f858:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800f85c:	f7f9 fd36 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800f860:	b980      	cbnz	r0, 800f884 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x768>
 800f862:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800f866:	2b00      	cmp	r3, #0
 800f868:	d0dd      	beq.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f86a:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d8d9      	bhi.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f872:	2004      	movs	r0, #4
 800f874:	f7f8 fd7e 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800f878:	4601      	mov	r1, r0
 800f87a:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800f87e:	f7f9 fd25 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800f882:	e7d0      	b.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f884:	a820      	add	r0, sp, #128	; 0x80
 800f886:	f7f9 fc4b 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800f88a:	b920      	cbnz	r0, 800f896 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x77a>
 800f88c:	a820      	add	r0, sp, #128	; 0x80
 800f88e:	f7f8 fdd9 	bl	8008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 800f892:	2800      	cmp	r0, #0
 800f894:	d0e5      	beq.n	800f862 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x746>
 800f896:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f89a:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 800f89e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800f8a2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f8a6:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800f8aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f8ae:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f8b2:	f10d 0291 	add.w	r2, sp, #145	; 0x91
 800f8b6:	3341      	adds	r3, #65	; 0x41
 800f8b8:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 800f8bc:	f852 0b04 	ldr.w	r0, [r2], #4
 800f8c0:	f843 0b04 	str.w	r0, [r3], #4
 800f8c4:	428a      	cmp	r2, r1
 800f8c6:	d1f9      	bne.n	800f8bc <c6bd410106c16f549c325b1ca136c82e89930dcb+0x7a0>
 800f8c8:	7812      	ldrb	r2, [r2, #0]
 800f8ca:	701a      	strb	r2, [r3, #0]
 800f8cc:	f8d4 61c4 	ldr.w	r6, [r4, #452]	; 0x1c4
 800f8d0:	f002 f8e4 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800f8d4:	f886 009e 	strb.w	r0, [r6, #158]	; 0x9e
 800f8d8:	a820      	add	r0, sp, #128	; 0x80
 800f8da:	f7f9 fc21 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 800f8de:	b1f8      	cbz	r0, 800f920 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x804>
 800f8e0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f8e4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d019      	beq.n	800f920 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x804>
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	d19a      	bne.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	2210      	movs	r2, #16
 800f8f4:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 800f8f8:	f009 fb42 	bl	8018f80 <memset>
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	f10d 0151 	add.w	r1, sp, #81	; 0x51
 800f902:	2000      	movs	r0, #0
 800f904:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800f908:	f7f9 f94e 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	d08a      	beq.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f910:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f914:	a914      	add	r1, sp, #80	; 0x50
 800f916:	3041      	adds	r0, #65	; 0x41
 800f918:	f7f9 fcd8 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d082      	beq.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f920:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f924:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
 800f928:	b13b      	cbz	r3, 800f93a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x81e>
 800f92a:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
 800f92e:	b123      	cbz	r3, 800f93a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x81e>
 800f930:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
 800f934:	2b05      	cmp	r3, #5
 800f936:	f43f af76 	beq.w	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800f93a:	f104 0631 	add.w	r6, r4, #49	; 0x31
 800f93e:	4630      	mov	r0, r6
 800f940:	f7fe fdc0 	bl	800e4c4 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 800f944:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800f948:	4682      	mov	sl, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f040 8089 	bne.w	800fa62 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 800f950:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f954:	2b00      	cmp	r3, #0
 800f956:	f040 8084 	bne.w	800fa62 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 800f95a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f95e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f962:	2b05      	cmp	r3, #5
 800f964:	d17d      	bne.n	800fa62 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 800f966:	2800      	cmp	r0, #0
 800f968:	d070      	beq.n	800fa4c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x930>
 800f96a:	2301      	movs	r3, #1
 800f96c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800f970:	a814      	add	r0, sp, #80	; 0x50
 800f972:	f7fb f891 	bl	800aa98 <7d0846c279c7703537dc22d139b898222dc42c28>
 800f976:	a814      	add	r0, sp, #80	; 0x50
 800f978:	f007 ff98 	bl	80178ac <6a7c8072467648b34afad307e6f084585ae97774>
 800f97c:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 800f980:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f984:	f008 fa92 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f988:	2300      	movs	r3, #0
 800f98a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800f98e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800f992:	2b00      	cmp	r3, #0
 800f994:	d16a      	bne.n	800fa6c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x950>
 800f996:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 800f99a:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f99e:	f008 fa85 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 800f9a2:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 800f9a6:	f8d4 b031 	ldr.w	fp, [r4, #49]	; 0x31
 800f9aa:	f894 a035 	ldrb.w	sl, [r4, #53]	; 0x35
 800f9ae:	f002 f94b 	bl	8011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 800f9b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f9b4:	930e      	str	r3, [sp, #56]	; 0x38
 800f9b6:	900f      	str	r0, [sp, #60]	; 0x3c
 800f9b8:	f002 f870 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800f9bc:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800f9c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800f9c2:	a820      	add	r0, sp, #128	; 0x80
 800f9c4:	930a      	str	r3, [sp, #40]	; 0x28
 800f9c6:	f7f9 fbd9 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800f9ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9ce:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 800f9d2:	f7f9 fbd3 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 800f9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9d8:	9304      	str	r3, [sp, #16]
 800f9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9dc:	9305      	str	r3, [sp, #20]
 800f9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	2700      	movs	r7, #0
 800f9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f9ec:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800f9f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f9f4:	9708      	str	r7, [sp, #32]
 800f9f6:	4658      	mov	r0, fp
 800f9f8:	4651      	mov	r1, sl
 800f9fa:	f008 f857 	bl	8017aac <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 800f9fe:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d14e      	bne.n	800faa4 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x988>
 800fa06:	f7f8 fca7 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	f040 80c8 	bne.w	800fba2 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 800fa12:	2210      	movs	r2, #16
 800fa14:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 800fa18:	f009 fab2 	bl	8018f80 <memset>
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	f10d 0151 	add.w	r1, sp, #81	; 0x51
 800fa22:	f10d 0045 	add.w	r0, sp, #69	; 0x45
 800fa26:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800fa2a:	f7f9 f8bd 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 800fa2e:	b140      	cbz	r0, 800fa42 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 800fa30:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
 800fa34:	a814      	add	r0, sp, #80	; 0x50
 800fa36:	3141      	adds	r1, #65	; 0x41
 800fa38:	f7f9 fc48 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	f000 80aa 	beq.w	800fb96 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa7a>
 800fa42:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 800fa46:	f7fe fdd7 	bl	800e5f8 <66ac93647e4c684dee2227e883242cdee4e3524a>
 800fa4a:	e0aa      	b.n	800fba2 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 800fa4c:	f7fa ff50 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800fa50:	4651      	mov	r1, sl
 800fa52:	f7fb f8db 	bl	800ac0c <9506f9c37a945216115ab5227293f46163fc6230>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	f43f aee5 	beq.w	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fa5c:	f007 ff3e 	bl	80178dc <d6f04be9d8ad12cb38262f1bba36a144854d1588>
 800fa60:	e6e1      	b.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fa62:	f1ba 0f00 	cmp.w	sl, #0
 800fa66:	f43f aede 	beq.w	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fa6a:	e787      	b.n	800f97c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x860>
 800fa6c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d190      	bne.n	800f996 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 800fa74:	2004      	movs	r0, #4
 800fa76:	f7f8 fc7d 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 800fa80:	f7f9 fc24 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d086      	beq.n	800f996 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 800fa88:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800fa8c:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 800fa90:	f7ff fa4c 	bl	800ef2c <processEb.constprop.0>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	f47f af7e 	bne.w	800f996 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 800fa9a:	e6c4      	b.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fa9c:	0801c070 	.word	0x0801c070
 800faa0:	0801c12b 	.word	0x0801c12b
 800faa4:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 800faa8:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 800faac:	4b41      	ldr	r3, [pc, #260]	; (800fbb4 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa98>)
 800faae:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800fab2:	9701      	str	r7, [sp, #4]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	440a      	add	r2, r1
 800fab8:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800fabc:	2101      	movs	r1, #1
 800fabe:	f7fa fded 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800fac2:	2031      	movs	r0, #49	; 0x31
 800fac4:	f7f9 ff7e 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800fac8:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
 800facc:	2800      	cmp	r0, #0
 800face:	f43f aeaa 	beq.w	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fad2:	2331      	movs	r3, #49	; 0x31
 800fad4:	7003      	strb	r3, [r0, #0]
 800fad6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
 800fada:	7053      	strb	r3, [r2, #1]
 800fadc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800fae0:	2202      	movs	r2, #2
 800fae2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800fae6:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 800faea:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 800faee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800faf2:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 800faf6:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 800fafa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800fafe:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 800fb02:	f892 20a2 	ldrb.w	r2, [r2, #162]	; 0xa2
 800fb06:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800fb0a:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 800fb0e:	f892 20a3 	ldrb.w	r2, [r2, #163]	; 0xa3
 800fb12:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 800fb16:	e9d4 1371 	ldrd	r1, r3, [r4, #452]	; 0x1c4
 800fb1a:	f101 0241 	add.w	r2, r1, #65	; 0x41
 800fb1e:	3341      	adds	r3, #65	; 0x41
 800fb20:	3151      	adds	r1, #81	; 0x51
 800fb22:	f852 0b04 	ldr.w	r0, [r2], #4
 800fb26:	f843 0b04 	str.w	r0, [r3], #4
 800fb2a:	428a      	cmp	r2, r1
 800fb2c:	d1f9      	bne.n	800fb22 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa06>
 800fb2e:	7812      	ldrb	r2, [r2, #0]
 800fb30:	701a      	strb	r2, [r3, #0]
 800fb32:	e9d4 c071 	ldrd	ip, r0, [r4, #452]	; 0x1c4
 800fb36:	2200      	movs	r2, #0
 800fb38:	4f1f      	ldr	r7, [pc, #124]	; (800fbb8 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa9c>)
 800fb3a:	f89c e053 	ldrb.w	lr, [ip, #83]	; 0x53
 800fb3e:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 800fb42:	9202      	str	r2, [sp, #8]
 800fb44:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800fb48:	683f      	ldr	r7, [r7, #0]
 800fb4a:	1aff      	subs	r7, r7, r3
 800fb4c:	b23f      	sxth	r7, r7
 800fb4e:	9701      	str	r7, [sp, #4]
 800fb50:	f10c 0741 	add.w	r7, ip, #65	; 0x41
 800fb54:	9700      	str	r7, [sp, #0]
 800fb56:	4673      	mov	r3, lr
 800fb58:	f008 fcb8 	bl	80184cc <984b363f625cd8cdfbde20196ca1e6fa15d151b4>
 800fb5c:	4607      	mov	r7, r0
 800fb5e:	b930      	cbnz	r0, 800fb6e <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa52>
 800fb60:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800fb64:	f7f9 ffec 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800fb68:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
 800fb6c:	e65b      	b.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fb6e:	2002      	movs	r0, #2
 800fb70:	f7f8 fc00 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fb74:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
 800fb78:	1c41      	adds	r1, r0, #1
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	f7fe fbb4 	bl	800e2e8 <628044ebadd5376fad8b3928b1093d9e8f1976ae>
 800fb80:	4606      	mov	r6, r0
 800fb82:	2800      	cmp	r0, #0
 800fb84:	f47f ab65 	bne.w	800f252 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 800fb88:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 800fb8c:	f7f9 ffd8 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800fb90:	f8c4 61c8 	str.w	r6, [r4, #456]	; 0x1c8
 800fb94:	e647      	b.n	800f826 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 800fb96:	a814      	add	r0, sp, #80	; 0x50
 800fb98:	f001 fdcc 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	f43f af50 	beq.w	800fa42 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 800fba2:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800fba6:	f7fe fd57 	bl	800e658 <0d988943f13c94ad3b7af08357d5d17f9043f067>
 800fbaa:	e643      	b.n	800f834 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x718>
 800fbac:	b02f      	add	sp, #188	; 0xbc
 800fbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb2:	bf00      	nop
 800fbb4:	0800e851 	.word	0x0800e851
 800fbb8:	0801a5e0 	.word	0x0801a5e0

0800fbbc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2>:
 800fbbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbc0:	4dab      	ldr	r5, [pc, #684]	; (800fe70 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2b4>)
 800fbc2:	682c      	ldr	r4, [r5, #0]
 800fbc4:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
 800fbc8:	3b02      	subs	r3, #2
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	b095      	sub	sp, #84	; 0x54
 800fbce:	f240 826d 	bls.w	80100ac <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f0>
 800fbd2:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800fbd6:	f8d3 63f4 	ldr.w	r6, [r3, #1012]	; 0x3f4
 800fbda:	b10e      	cbz	r6, 800fbe0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x24>
 800fbdc:	2001      	movs	r0, #1
 800fbde:	47b0      	blx	r6
 800fbe0:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800fbe4:	f8df 828c 	ldr.w	r8, [pc, #652]	; 800fe74 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2b8>
 800fbe8:	f7fa fe84 	bl	800a8f4 <19ac46e5c06ffb6c1640c5d4070de271a544b182>
 800fbec:	4aa2      	ldr	r2, [pc, #648]	; (800fe78 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2bc>)
 800fbee:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
 800fbf2:	6917      	ldr	r7, [r2, #16]
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800fbfc:	9401      	str	r4, [sp, #4]
 800fbfe:	2101      	movs	r1, #1
 800fc00:	f8cd 8000 	str.w	r8, [sp]
 800fc04:	f7fa fd4a 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800fc08:	499c      	ldr	r1, [pc, #624]	; (800fe7c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c0>)
 800fc0a:	489d      	ldr	r0, [pc, #628]	; (800fe80 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c4>)
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f7f6 fca5 	bl	800655c <EMBENET_RADIO_SetCallbacks>
 800fc12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 8142 	bne.w	800fea0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2e4>
 800fc1c:	f7f8 fb9c 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	f000 80f5 	beq.w	800fe10 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x254>
 800fc26:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
 800fc2a:	f1b8 0f00 	cmp.w	r8, #0
 800fc2e:	d13d      	bne.n	800fcac <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0xf0>
 800fc30:	2301      	movs	r3, #1
 800fc32:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800fc36:	f7fa fe5b 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800fc3a:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
 800fc3e:	2005      	movs	r0, #5
 800fc40:	f7f8 fb98 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fc44:	4602      	mov	r2, r0
 800fc46:	f8d0 0001 	ldr.w	r0, [r0, #1]
 800fc4a:	f8d2 1005 	ldr.w	r1, [r2, #5]
 800fc4e:	ab07      	add	r3, sp, #28
 800fc50:	c303      	stmia	r3!, {r0, r1}
 800fc52:	2002      	movs	r0, #2
 800fc54:	f7f8 fb8e 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	f8d0 0001 	ldr.w	r0, [r0, #1]
 800fc5e:	f8d2 1005 	ldr.w	r1, [r2, #5]
 800fc62:	ab09      	add	r3, sp, #36	; 0x24
 800fc64:	c303      	stmia	r3!, {r0, r1}
 800fc66:	a807      	add	r0, sp, #28
 800fc68:	f006 ff4c 	bl	8016b04 <f5d01873bc96944b472aa031c0b65a87221c5869>
 800fc6c:	f04f 31ff 	mov.w	r1, #4294967295
 800fc70:	4640      	mov	r0, r8
 800fc72:	f7fa fea9 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800fc76:	21ff      	movs	r1, #255	; 0xff
 800fc78:	4607      	mov	r7, r0
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	f7fa fea4 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800fc80:	4407      	add	r7, r0
 800fc82:	2002      	movs	r0, #2
 800fc84:	9705      	str	r7, [sp, #20]
 800fc86:	f88d 8018 	strb.w	r8, [sp, #24]
 800fc8a:	f7f8 fb73 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fc8e:	2321      	movs	r3, #33	; 0x21
 800fc90:	aa0b      	add	r2, sp, #44	; 0x2c
 800fc92:	a905      	add	r1, sp, #20
 800fc94:	3001      	adds	r0, #1
 800fc96:	f7fb f9c5 	bl	800b024 <ce7cfafa044c34a88028e8cf12995b3096f9f973>
 800fc9a:	2002      	movs	r0, #2
 800fc9c:	f7f8 fb6a 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fca0:	2321      	movs	r3, #33	; 0x21
 800fca2:	aa0b      	add	r2, sp, #44	; 0x2c
 800fca4:	a905      	add	r1, sp, #20
 800fca6:	3001      	adds	r0, #1
 800fca8:	f7fb fb72 	bl	800b390 <27342039fe058efec7af5218a4abe449221e7bb4>
 800fcac:	2031      	movs	r0, #49	; 0x31
 800fcae:	f7fa f939 	bl	8009f24 <d9cd3de8850ba05653155beecb1d40906820436e>
 800fcb2:	4607      	mov	r7, r0
 800fcb4:	b120      	cbz	r0, 800fcc0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x104>
 800fcb6:	7803      	ldrb	r3, [r0, #0]
 800fcb8:	2b90      	cmp	r3, #144	; 0x90
 800fcba:	d00e      	beq.n	800fcda <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x11e>
 800fcbc:	f7f9 ff40 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800fcc0:	f7fa fe16 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800fcc4:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800fcc8:	1ac0      	subs	r0, r0, r3
 800fcca:	4b6e      	ldr	r3, [pc, #440]	; (800fe84 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c8>)
 800fccc:	4298      	cmp	r0, r3
 800fcce:	d973      	bls.n	800fdb8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 800fcd0:	496d      	ldr	r1, [pc, #436]	; (800fe88 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2cc>)
 800fcd2:	486e      	ldr	r0, [pc, #440]	; (800fe8c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d0>)
 800fcd4:	f240 129b 	movw	r2, #411	; 0x19b
 800fcd8:	e098      	b.n	800fe0c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x250>
 800fcda:	f890 8052 	ldrb.w	r8, [r0, #82]	; 0x52
 800fcde:	f1b8 0f01 	cmp.w	r8, #1
 800fce2:	d1eb      	bne.n	800fcbc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 800fce4:	7a03      	ldrb	r3, [r0, #8]
 800fce6:	2b21      	cmp	r3, #33	; 0x21
 800fce8:	d1e8      	bne.n	800fcbc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 800fcea:	2002      	movs	r0, #2
 800fcec:	f7f8 fb42 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800fcf0:	7a3a      	ldrb	r2, [r7, #8]
 800fcf2:	6879      	ldr	r1, [r7, #4]
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	f7fb f8b7 	bl	800ae68 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>
 800fcfa:	b908      	cbnz	r0, 800fd00 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x144>
 800fcfc:	4638      	mov	r0, r7
 800fcfe:	e7dd      	b.n	800fcbc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 800fd00:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800fd04:	4648      	mov	r0, r9
 800fd06:	f7fa fec7 	bl	800aa98 <7d0846c279c7703537dc22d139b898222dc42c28>
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	4640      	mov	r0, r8
 800fd0e:	f7fe fa83 	bl	800e218 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>
 800fd12:	4638      	mov	r0, r7
 800fd14:	f7f9 ff14 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800fd18:	682f      	ldr	r7, [r5, #0]
 800fd1a:	4640      	mov	r0, r8
 800fd1c:	f001 f8c8 	bl	8010eb0 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 800fd20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd24:	f887 803c 	strb.w	r8, [r7, #60]	; 0x3c
 800fd28:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800fd2a:	682b      	ldr	r3, [r5, #0]
 800fd2c:	2500      	movs	r5, #0
 800fd2e:	f883 51bd 	strb.w	r5, [r3, #445]	; 0x1bd
 800fd32:	4b57      	ldr	r3, [pc, #348]	; (800fe90 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d4>)
 800fd34:	f88d 8020 	strb.w	r8, [sp, #32]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	9908      	ldr	r1, [sp, #32]
 800fd3c:	9307      	str	r3, [sp, #28]
 800fd3e:	f001 f9f1 	bl	8011124 <6759635076cb4c933592248ebd293b63832a7e9b>
 800fd42:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
 800fd46:	f8a4 51da 	strh.w	r5, [r4, #474]	; 0x1da
 800fd4a:	f884 51dc 	strb.w	r5, [r4, #476]	; 0x1dc
 800fd4e:	4629      	mov	r1, r5
 800fd50:	2210      	movs	r2, #16
 800fd52:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800fd56:	f009 f913 	bl	8018f80 <memset>
 800fd5a:	2306      	movs	r3, #6
 800fd5c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800fd60:	f504 77ec 	add.w	r7, r4, #472	; 0x1d8
 800fd64:	4625      	mov	r5, r4
 800fd66:	f104 0831 	add.w	r8, r4, #49	; 0x31
 800fd6a:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
 800fd6e:	1b2b      	subs	r3, r5, r4
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d830      	bhi.n	800fdd6 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x21a>
 800fd74:	f04f 31ff 	mov.w	r1, #4294967295
 800fd78:	2000      	movs	r0, #0
 800fd7a:	f7fa fe25 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 800fd7e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800fd82:	f8c4 0031 	str.w	r0, [r4, #49]	; 0x31
 800fd86:	2700      	movs	r7, #0
 800fd88:	f367 0307 	bfi	r3, r7, #0, #8
 800fd8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800fd90:	4605      	mov	r5, r0
 800fd92:	f001 fa09 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800fd96:	463b      	mov	r3, r7
 800fd98:	4602      	mov	r2, r0
 800fd9a:	4639      	mov	r1, r7
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f7f0 ff45 	bl	8000c2c <__aeabi_uldivmod>
 800fda2:	86e2      	strh	r2, [r4, #54]	; 0x36
 800fda4:	f001 fe38 	bl	8011a18 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	8720      	strh	r0, [r4, #56]	; 0x38
 800fdac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800fdb0:	f7fe fc86 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800fdb4:	f007 fd52 	bl	801785c <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>
 800fdb8:	f8d4 0031 	ldr.w	r0, [r4, #49]	; 0x31
 800fdbc:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800fdc0:	f7fa fbb6 	bl	800a530 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>
 800fdc4:	2e00      	cmp	r6, #0
 800fdc6:	f000 8171 	beq.w	80100ac <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f0>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	4633      	mov	r3, r6
 800fdce:	b015      	add	sp, #84	; 0x54
 800fdd0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdd4:	4718      	bx	r3
 800fdd6:	f8d8 0000 	ldr.w	r0, [r8]
 800fdda:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800fdde:	9002      	str	r0, [sp, #8]
 800fde0:	f898 3004 	ldrb.w	r3, [r8, #4]
 800fde4:	f88d 300c 	strb.w	r3, [sp, #12]
 800fde8:	f8cd 9004 	str.w	r9, [sp, #4]
 800fdec:	f895 31dc 	ldrb.w	r3, [r5, #476]	; 0x1dc
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	2103      	movs	r1, #3
 800fdf8:	4660      	mov	r0, ip
 800fdfa:	f001 f9e5 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 800fdfe:	3501      	adds	r5, #1
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d1b2      	bne.n	800fd6a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1ae>
 800fe04:	4920      	ldr	r1, [pc, #128]	; (800fe88 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2cc>)
 800fe06:	4823      	ldr	r0, [pc, #140]	; (800fe94 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d8>)
 800fe08:	f240 128b 	movw	r2, #395	; 0x18b
 800fe0c:	f7f1 fbc0 	bl	8001590 <EXPECT_OnAbortHandler>
 800fe10:	682d      	ldr	r5, [r5, #0]
 800fe12:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d0ce      	beq.n	800fdb8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 800fe1a:	f04f 0901 	mov.w	r9, #1
 800fe1e:	f885 91bd 	strb.w	r9, [r5, #445]	; 0x1bd
 800fe22:	f7fa fdad 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 800fe26:	4b1c      	ldr	r3, [pc, #112]	; (800fe98 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2dc>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	fbb0 f2f3 	udiv	r2, r0, r3
 800fe2e:	fb02 0013 	mls	r0, r2, r3, r0
 800fe32:	4b1a      	ldr	r3, [pc, #104]	; (800fe9c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2e0>)
 800fe34:	5c1b      	ldrb	r3, [r3, r0]
 800fe36:	f885 31d8 	strb.w	r3, [r5, #472]	; 0x1d8
 800fe3a:	f7f6 fba5 	bl	8006588 <EMBENET_RADIO_Idle>
 800fe3e:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 800fe42:	f7f6 fbff 	bl	8006644 <EMBENET_RADIO_RxEnable>
 800fe46:	f7f6 fc25 	bl	8006694 <EMBENET_RADIO_RxNow>
 800fe4a:	2003      	movs	r0, #3
 800fe4c:	f7fe fb9e 	bl	800e58c <077287437cab717c06c53f5380059be6eda08357>
 800fe50:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
 800fe54:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 800fe58:	e9cd 8500 	strd	r8, r5, [sp]
 800fe5c:	230d      	movs	r3, #13
 800fe5e:	435f      	muls	r7, r3
 800fe60:	1aba      	subs	r2, r7, r2
 800fe62:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 800fe66:	4649      	mov	r1, r9
 800fe68:	f7fa fc18 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800fe6c:	e7a4      	b.n	800fdb8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 800fe6e:	bf00      	nop
 800fe70:	20000034 	.word	0x20000034
 800fe74:	0800fbbd 	.word	0x0800fbbd
 800fe78:	0801a5e0 	.word	0x0801a5e0
 800fe7c:	0800f11d 	.word	0x0800f11d
 800fe80:	0800ed9d 	.word	0x0800ed9d
 800fe84:	002dc6c0 	.word	0x002dc6c0
 800fe88:	0801c177 	.word	0x0801c177
 800fe8c:	0801c202 	.word	0x0801c202
 800fe90:	0100000d 	.word	0x0100000d
 800fe94:	0801c1d9 	.word	0x0801c1d9
 800fe98:	0801a64c 	.word	0x0801a64c
 800fe9c:	0801a650 	.word	0x0801a650
 800fea0:	682b      	ldr	r3, [r5, #0]
 800fea2:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
 800fea6:	2a00      	cmp	r2, #0
 800fea8:	d18c      	bne.n	800fdc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 800feaa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800feae:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800feb2:	b10b      	cbz	r3, 800feb8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2fc>
 800feb4:	2001      	movs	r0, #1
 800feb6:	4798      	blx	r3
 800feb8:	682c      	ldr	r4, [r5, #0]
 800feba:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800febc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800febe:	1ad7      	subs	r7, r2, r3
 800fec0:	429a      	cmp	r2, r3
 800fec2:	b2bf      	uxth	r7, r7
 800fec4:	d803      	bhi.n	800fece <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x312>
 800fec6:	f001 f96f 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800feca:	4438      	add	r0, r7
 800fecc:	b287      	uxth	r7, r0
 800fece:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fed0:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fed2:	f8d4 3031 	ldr.w	r3, [r4, #49]	; 0x31
 800fed6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800feda:	19db      	adds	r3, r3, r7
 800fedc:	f142 0200 	adc.w	r2, r2, #0
 800fee0:	f8c4 3031 	str.w	r3, [r4, #49]	; 0x31
 800fee4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 800fee8:	f7f8 fa36 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800feec:	b920      	cbnz	r0, 800fef8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x33c>
 800feee:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800fef0:	429f      	cmp	r7, r3
 800fef2:	d211      	bcs.n	800ff18 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 800fef4:	1bdb      	subs	r3, r3, r7
 800fef6:	8763      	strh	r3, [r4, #58]	; 0x3a
 800fef8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800fefa:	f001 fd0d 	bl	8011918 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>
 800fefe:	b970      	cbnz	r0, 800ff1e <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x362>
 800ff00:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800ff02:	f001 f951 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 800ff06:	3501      	adds	r5, #1
 800ff08:	fbb5 f3f0 	udiv	r3, r5, r0
 800ff0c:	fb03 5510 	mls	r5, r3, r0, r5
 800ff10:	8725      	strh	r5, [r4, #56]	; 0x38
 800ff12:	f7fe fbd5 	bl	800e6c0 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 800ff16:	e755      	b.n	800fdc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 800ff18:	f7fe fed0 	bl	800ecbc <e0d63f279bcffa109806a257de8645074809531c>
 800ff1c:	e752      	b.n	800fdc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 800ff1e:	f001 fe93 	bl	8011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 800ff22:	682a      	ldr	r2, [r5, #0]
 800ff24:	f8b2 71da 	ldrh.w	r7, [r2, #474]	; 0x1da
 800ff28:	f8d2 3031 	ldr.w	r3, [r2, #49]	; 0x31
 800ff2c:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
 800ff30:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 800ff32:	4297      	cmp	r7, r2
 800ff34:	d13c      	bne.n	800ffb0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3f4>
 800ff36:	18c0      	adds	r0, r0, r3
 800ff38:	4b5e      	ldr	r3, [pc, #376]	; (80100b4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f8>)
 800ff3a:	f141 0100 	adc.w	r1, r1, #0
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	2300      	movs	r3, #0
 800ff42:	f7f0 fe73 	bl	8000c2c <__aeabi_uldivmod>
 800ff46:	4b5c      	ldr	r3, [pc, #368]	; (80100b8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4fc>)
 800ff48:	5c9b      	ldrb	r3, [r3, r2]
 800ff4a:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
 800ff4e:	f001 fd63 	bl	8011a18 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 800ff52:	8720      	strh	r0, [r4, #56]	; 0x38
 800ff54:	f001 fd86 	bl	8011a64 <23fc3861a84c8d8f435c2599ea00b6593300a215>
 800ff58:	4680      	mov	r8, r0
 800ff5a:	f7f8 f9fd 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 800ff5e:	4681      	mov	r9, r0
 800ff60:	b9f0      	cbnz	r0, 800ffa0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 800ff62:	f001 fd9b 	bl	8011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>
 800ff66:	2801      	cmp	r0, #1
 800ff68:	4607      	mov	r7, r0
 800ff6a:	d119      	bne.n	800ffa0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 800ff6c:	f7f9 feb8 	bl	8009ce0 <QUEUE_MacNotifySuperframeStart>
 800ff70:	f7fa fcbe 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800ff74:	f7fa fdb4 	bl	800aae0 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	d0cd      	beq.n	800ff18 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 800ff7c:	1f02      	subs	r2, r0, #4
 800ff7e:	b2d2      	uxtb	r2, r2
 800ff80:	2a01      	cmp	r2, #1
 800ff82:	d9c9      	bls.n	800ff18 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 800ff84:	2803      	cmp	r0, #3
 800ff86:	d10b      	bne.n	800ffa0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 800ff88:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800ff8c:	b143      	cbz	r3, 800ffa0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 800ff8e:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800ff92:	a80b      	add	r0, sp, #44	; 0x2c
 800ff94:	f7fa fd80 	bl	800aa98 <7d0846c279c7703537dc22d139b898222dc42c28>
 800ff98:	a90b      	add	r1, sp, #44	; 0x2c
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	f7fe f93c 	bl	800e218 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>
 800ffa0:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffa4:	2b03      	cmp	r3, #3
 800ffa6:	d8b4      	bhi.n	800ff12 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 800ffa8:	e8df f003 	tbb	[pc, r3]
 800ffac:	7c0c170c 	.word	0x7c0c170c
 800ffb0:	18c0      	adds	r0, r0, r3
 800ffb2:	4b42      	ldr	r3, [pc, #264]	; (80100bc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x500>)
 800ffb4:	f141 0100 	adc.w	r1, r1, #0
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f7f0 fe36 	bl	8000c2c <__aeabi_uldivmod>
 800ffc0:	4b3f      	ldr	r3, [pc, #252]	; (80100c0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x504>)
 800ffc2:	e7c1      	b.n	800ff48 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x38c>
 800ffc4:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800ffc8:	4638      	mov	r0, r7
 800ffca:	f001 fd83 	bl	8011ad4 <ffe29f5c9712609bba4ef23834769dd10ed867f0>
 800ffce:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
 800ffd2:	b978      	cbnz	r0, 800fff4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x438>
 800ffd4:	f1b8 0f01 	cmp.w	r8, #1
 800ffd8:	d09b      	beq.n	800ff12 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 800ffda:	682b      	ldr	r3, [r5, #0]
 800ffdc:	220f      	movs	r2, #15
 800ffde:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 800ffe8:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 800ffec:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	e04e      	b.n	8010092 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4d6>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	2204      	movs	r2, #4
 800fff8:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 800fffc:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8010000:	2231      	movs	r2, #49	; 0x31
 8010002:	705a      	strb	r2, [r3, #1]
 8010004:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8010008:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801000c:	b95a      	cbnz	r2, 8010026 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x46a>
 801000e:	2201      	movs	r2, #1
 8010010:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8010014:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
 8010018:	189a      	adds	r2, r3, r2
 801001a:	f884 21bc 	strb.w	r2, [r4, #444]	; 0x1bc
 801001e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 8010022:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
 8010026:	f104 0840 	add.w	r8, r4, #64	; 0x40
 801002a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 801002e:	4640      	mov	r0, r8
 8010030:	f007 ff92 	bl	8017f58 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>
 8010034:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8010038:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801003c:	b9b3      	cbnz	r3, 801006c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4b0>
 801003e:	f007 fc05 	bl	801784c <a59be9f028c32d03d0e01d3447553913a8330c11>
 8010042:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8010046:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
 801004a:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 801004e:	9002      	str	r0, [sp, #8]
 8010050:	2500      	movs	r5, #0
 8010052:	f104 0081 	add.w	r0, r4, #129	; 0x81
 8010056:	9000      	str	r0, [sp, #0]
 8010058:	9501      	str	r5, [sp, #4]
 801005a:	4640      	mov	r0, r8
 801005c:	f008 fa36 	bl	80184cc <984b363f625cd8cdfbde20196ca1e6fa15d151b4>
 8010060:	b930      	cbnz	r0, 8010070 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4b4>
 8010062:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8010066:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
 801006a:	e752      	b.n	800ff12 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 801006c:	2000      	movs	r0, #0
 801006e:	e7e8      	b.n	8010042 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x486>
 8010070:	2002      	movs	r0, #2
 8010072:	f7f8 f97f 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8010076:	4642      	mov	r2, r8
 8010078:	1c41      	adds	r1, r0, #1
 801007a:	4638      	mov	r0, r7
 801007c:	f7fe f934 	bl	800e2e8 <628044ebadd5376fad8b3928b1093d9e8f1976ae>
 8010080:	2800      	cmp	r0, #0
 8010082:	d0ee      	beq.n	8010062 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4a6>
 8010084:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 8010088:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 801008c:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8010090:	9501      	str	r5, [sp, #4]
 8010092:	4b0c      	ldr	r3, [pc, #48]	; (80100c4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x508>)
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	440a      	add	r2, r1
 8010098:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 801009c:	2101      	movs	r1, #1
 801009e:	f7fa fafd 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 80100a2:	e68f      	b.n	800fdc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 80100a4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80100a6:	f000 fa05 	bl	80104b4 <982333be2760117c5a90b228f88c7e9bbb3de31e>
 80100aa:	e732      	b.n	800ff12 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 80100ac:	b015      	add	sp, #84	; 0x54
 80100ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100b2:	bf00      	nop
 80100b4:	0801a64c 	.word	0x0801a64c
 80100b8:	0801a650 	.word	0x0801a650
 80100bc:	0801a600 	.word	0x0801a600
 80100c0:	0801a604 	.word	0x0801a604
 80100c4:	0800e851 	.word	0x0800e851

080100c8 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79>:
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	4b4e      	ldr	r3, [pc, #312]	; (8010208 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x140>)
 80100ce:	4d4f      	ldr	r5, [pc, #316]	; (801020c <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x144>)
 80100d0:	681c      	ldr	r4, [r3, #0]
 80100d2:	b085      	sub	sp, #20
 80100d4:	f44f 720e 	mov.w	r2, #568	; 0x238
 80100d8:	2100      	movs	r1, #0
 80100da:	4620      	mov	r0, r4
 80100dc:	f008 ff50 	bl	8018f80 <memset>
 80100e0:	f7fa fc06 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 80100e4:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
 80100e8:	f7f6 fb54 	bl	8006794 <EMBENET_RADIO_GetCapabilities>
 80100ec:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 80100f0:	e9d0 7803 	ldrd	r7, r8, [r0, #12]
 80100f4:	9303      	str	r3, [sp, #12]
 80100f6:	682b      	ldr	r3, [r5, #0]
 80100f8:	6802      	ldr	r2, [r0, #0]
 80100fa:	f990 a01d 	ldrsb.w	sl, [r0, #29]
 80100fe:	eba3 0c08 	sub.w	ip, r3, r8
 8010102:	ebac 0202 	sub.w	r2, ip, r2
 8010106:	e9d0 b905 	ldrd	fp, r9, [r0, #20]
 801010a:	e9c4 2c81 	strd	r2, ip, [r4, #516]	; 0x204
 801010e:	696a      	ldr	r2, [r5, #20]
 8010110:	9201      	str	r2, [sp, #4]
 8010112:	eb0c 0e02 	add.w	lr, ip, r2
 8010116:	686a      	ldr	r2, [r5, #4]
 8010118:	9200      	str	r2, [sp, #0]
 801011a:	9900      	ldr	r1, [sp, #0]
 801011c:	68ea      	ldr	r2, [r5, #12]
 801011e:	f8c4 e20c 	str.w	lr, [r4, #524]	; 0x20c
 8010122:	1a88      	subs	r0, r1, r2
 8010124:	440a      	add	r2, r1
 8010126:	68a9      	ldr	r1, [r5, #8]
 8010128:	9102      	str	r1, [sp, #8]
 801012a:	1a59      	subs	r1, r3, r1
 801012c:	eba0 000b 	sub.w	r0, r0, fp
 8010130:	eba1 010b 	sub.w	r1, r1, fp
 8010134:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010138:	445b      	add	r3, fp
 801013a:	444a      	add	r2, r9
 801013c:	444b      	add	r3, r9
 801013e:	f8dd 9000 	ldr.w	r9, [sp]
 8010142:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
 8010146:	eba9 0808 	sub.w	r8, r9, r8
 801014a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801014e:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8010152:	eba8 0909 	sub.w	r9, r8, r9
 8010156:	1bc7      	subs	r7, r0, r7
 8010158:	1b8e      	subs	r6, r1, r6
 801015a:	e9c4 7084 	strd	r7, r0, [r4, #528]	; 0x210
 801015e:	e9c4 6187 	strd	r6, r1, [r4, #540]	; 0x21c
 8010162:	e9c4 988a 	strd	r9, r8, [r4, #552]	; 0x228
 8010166:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801016a:	692d      	ldr	r5, [r5, #16]
 801016c:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
 8010170:	44c1      	add	r9, r8
 8010172:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
 8010176:	f884 a1d9 	strb.w	sl, [r4, #473]	; 0x1d9
 801017a:	f1bc 0f00 	cmp.w	ip, #0
 801017e:	d022      	beq.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8010180:	45ac      	cmp	ip, r5
 8010182:	d220      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8010184:	f1be 0f00 	cmp.w	lr, #0
 8010188:	d01d      	beq.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801018a:	45ae      	cmp	lr, r5
 801018c:	d21b      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801018e:	b1d7      	cbz	r7, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8010190:	42af      	cmp	r7, r5
 8010192:	d218      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8010194:	b1b8      	cbz	r0, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8010196:	42a8      	cmp	r0, r5
 8010198:	d215      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801019a:	b1a2      	cbz	r2, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801019c:	42aa      	cmp	r2, r5
 801019e:	d212      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101a0:	b18e      	cbz	r6, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101a2:	42ae      	cmp	r6, r5
 80101a4:	d20f      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101a6:	b171      	cbz	r1, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101a8:	42a9      	cmp	r1, r5
 80101aa:	d20c      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101ac:	b15b      	cbz	r3, 80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101ae:	42ab      	cmp	r3, r5
 80101b0:	d209      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101b2:	f1b8 0f00 	cmp.w	r8, #0
 80101b6:	d006      	beq.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101b8:	45a8      	cmp	r8, r5
 80101ba:	d204      	bcs.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101bc:	f1b9 0f00 	cmp.w	r9, #0
 80101c0:	d001      	beq.n	80101c6 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80101c2:	45a9      	cmp	r9, r5
 80101c4:	d305      	bcc.n	80101d2 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x10a>
 80101c6:	4912      	ldr	r1, [pc, #72]	; (8010210 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x148>)
 80101c8:	4812      	ldr	r0, [pc, #72]	; (8010214 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x14c>)
 80101ca:	f240 121b 	movw	r2, #283	; 0x11b
 80101ce:	f7f1 f9df 	bl	8001590 <EXPECT_OnAbortHandler>
 80101d2:	2200      	movs	r2, #0
 80101d4:	4910      	ldr	r1, [pc, #64]	; (8010218 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x150>)
 80101d6:	4811      	ldr	r0, [pc, #68]	; (801021c <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x154>)
 80101d8:	f7f6 f9c0 	bl	800655c <EMBENET_RADIO_SetCallbacks>
 80101dc:	2000      	movs	r0, #0
 80101de:	f7fa fa33 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80101e2:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
 80101e6:	2001      	movs	r0, #1
 80101e8:	f7fa fa2e 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80101ec:	230d      	movs	r3, #13
 80101ee:	fb03 f105 	mul.w	r1, r3, r5
 80101f2:	f884 01f8 	strb.w	r0, [r4, #504]	; 0x1f8
 80101f6:	0849      	lsrs	r1, r1, #1
 80101f8:	2000      	movs	r0, #0
 80101fa:	f7fa fbe5 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 80101fe:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
 8010202:	b005      	add	sp, #20
 8010204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010208:	20000034 	.word	0x20000034
 801020c:	0801a5e0 	.word	0x0801a5e0
 8010210:	0801c177 	.word	0x0801c177
 8010214:	0801c22f 	.word	0x0801c22f
 8010218:	0800f11d 	.word	0x0800f11d
 801021c:	0800ed9d 	.word	0x0800ed9d

08010220 <f245cef569e100f3b51b8078c1d070e2f387d00a>:
 8010220:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010222:	4b09      	ldr	r3, [pc, #36]	; (8010248 <f245cef569e100f3b51b8078c1d070e2f387d00a+0x28>)
 8010224:	681c      	ldr	r4, [r3, #0]
 8010226:	f894 51f0 	ldrb.w	r5, [r4, #496]	; 0x1f0
 801022a:	f8d4 6234 	ldr.w	r6, [r4, #564]	; 0x234
 801022e:	f7fa fb5f 	bl	800a8f0 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8010232:	4a06      	ldr	r2, [pc, #24]	; (801024c <f245cef569e100f3b51b8078c1d070e2f387d00a+0x2c>)
 8010234:	9200      	str	r2, [sp, #0]
 8010236:	4603      	mov	r3, r0
 8010238:	9401      	str	r4, [sp, #4]
 801023a:	4632      	mov	r2, r6
 801023c:	2101      	movs	r1, #1
 801023e:	4628      	mov	r0, r5
 8010240:	f7fa fa2c 	bl	800a69c <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8010244:	b002      	add	sp, #8
 8010246:	bd70      	pop	{r4, r5, r6, pc}
 8010248:	20000034 	.word	0x20000034
 801024c:	0800fbbd 	.word	0x0800fbbd

08010250 <c37c52d5fcbad41724f29f060633d7770e309943>:
 8010250:	b510      	push	{r4, lr}
 8010252:	4b05      	ldr	r3, [pc, #20]	; (8010268 <c37c52d5fcbad41724f29f060633d7770e309943+0x18>)
 8010254:	681c      	ldr	r4, [r3, #0]
 8010256:	f7fe fd31 	bl	800ecbc <e0d63f279bcffa109806a257de8645074809531c>
 801025a:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 801025e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010262:	f7fa bb13 	b.w	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8010266:	bf00      	nop
 8010268:	20000034 	.word	0x20000034

0801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>:
 801026c:	b513      	push	{r0, r1, r4, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	f7f5 ffb4 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8010274:	4b09      	ldr	r3, [pc, #36]	; (801029c <21f13ea89246a8f3ee5116c9b445be3be24e58a5+0x30>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	f8d3 0031 	ldr.w	r0, [r3, #49]	; 0x31
 801027c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010280:	9000      	str	r0, [sp, #0]
 8010282:	f88d 3004 	strb.w	r3, [sp, #4]
 8010286:	f7f5 ffc9 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801028a:	9800      	ldr	r0, [sp, #0]
 801028c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010290:	6020      	str	r0, [r4, #0]
 8010292:	4620      	mov	r0, r4
 8010294:	7123      	strb	r3, [r4, #4]
 8010296:	b002      	add	sp, #8
 8010298:	bd10      	pop	{r4, pc}
 801029a:	bf00      	nop
 801029c:	20000034 	.word	0x20000034

080102a0 <57d2957de5f8b1f87a34ecc897e93650c3f2e297>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	4b0a      	ldr	r3, [pc, #40]	; (80102cc <57d2957de5f8b1f87a34ecc897e93650c3f2e297+0x2c>)
 80102a4:	681d      	ldr	r5, [r3, #0]
 80102a6:	f7f5 ff99 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80102aa:	69a8      	ldr	r0, [r5, #24]
 80102ac:	69ee      	ldr	r6, [r5, #28]
 80102ae:	f242 7410 	movw	r4, #10000	; 0x2710
 80102b2:	fba0 0104 	umull	r0, r1, r0, r4
 80102b6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80102ba:	fb04 1106 	mla	r1, r4, r6, r1
 80102be:	f7f0 fcb5 	bl	8000c2c <__aeabi_uldivmod>
 80102c2:	b284      	uxth	r4, r0
 80102c4:	f7f5 ffaa 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80102c8:	4620      	mov	r0, r4
 80102ca:	bd70      	pop	{r4, r5, r6, pc}
 80102cc:	20000034 	.word	0x20000034

080102d0 <430fd23aeea8952b7b416b6590815371f1106b85>:
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <430fd23aeea8952b7b416b6590815371f1106b85+0x2c>)
 80102d4:	681d      	ldr	r5, [r3, #0]
 80102d6:	f7f5 ff81 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80102da:	68a8      	ldr	r0, [r5, #8]
 80102dc:	68ee      	ldr	r6, [r5, #12]
 80102de:	f242 7410 	movw	r4, #10000	; 0x2710
 80102e2:	fba0 0104 	umull	r0, r1, r0, r4
 80102e6:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80102ea:	fb04 1106 	mla	r1, r4, r6, r1
 80102ee:	f7f0 fc9d 	bl	8000c2c <__aeabi_uldivmod>
 80102f2:	b284      	uxth	r4, r0
 80102f4:	f7f5 ff92 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80102f8:	4620      	mov	r0, r4
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	20000034 	.word	0x20000034

08010300 <2a6c61bbc29fcf617904472e829df358a186c125>:
 8010300:	b570      	push	{r4, r5, r6, lr}
 8010302:	4b0a      	ldr	r3, [pc, #40]	; (801032c <2a6c61bbc29fcf617904472e829df358a186c125+0x2c>)
 8010304:	681d      	ldr	r5, [r3, #0]
 8010306:	f7f5 ff69 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 801030a:	6928      	ldr	r0, [r5, #16]
 801030c:	696e      	ldr	r6, [r5, #20]
 801030e:	f242 7410 	movw	r4, #10000	; 0x2710
 8010312:	fba0 0104 	umull	r0, r1, r0, r4
 8010316:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 801031a:	fb04 1106 	mla	r1, r4, r6, r1
 801031e:	f7f0 fc85 	bl	8000c2c <__aeabi_uldivmod>
 8010322:	b284      	uxth	r4, r0
 8010324:	f7f5 ff7a 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8010328:	4620      	mov	r0, r4
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	20000034 	.word	0x20000034

08010330 <60f007314f15c808f67a076d33295282887c81e9>:
 8010330:	4b02      	ldr	r3, [pc, #8]	; (801033c <60f007314f15c808f67a076d33295282887c81e9+0xc>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	20000034 	.word	0x20000034

08010340 <2fba4ddec868eb31998278adcb690f685bb9d2cf>:
 8010340:	f7fe bcbc 	b.w	800ecbc <e0d63f279bcffa109806a257de8645074809531c>

08010344 <423de69afc5c7b88ba71928d815161412a3b9f11>:
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <423de69afc5c7b88ba71928d815161412a3b9f11+0x30>)
 8010348:	681c      	ldr	r4, [r3, #0]
 801034a:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
 801034e:	4605      	mov	r5, r0
 8010350:	460e      	mov	r6, r1
 8010352:	b167      	cbz	r7, 801036e <423de69afc5c7b88ba71928d815161412a3b9f11+0x2a>
 8010354:	f7f5 ff42 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8010358:	f8d4 3031 	ldr.w	r3, [r4, #49]	; 0x31
 801035c:	602b      	str	r3, [r5, #0]
 801035e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010362:	712b      	strb	r3, [r5, #4]
 8010364:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8010368:	6033      	str	r3, [r6, #0]
 801036a:	f7f5 ff57 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801036e:	4638      	mov	r0, r7
 8010370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010372:	bf00      	nop
 8010374:	20000034 	.word	0x20000034

08010378 <7fbb727db4b2b6715b092505673cb5922a0d63a8>:
 8010378:	b508      	push	{r3, lr}
 801037a:	4603      	mov	r3, r0
 801037c:	2000      	movs	r0, #0
 801037e:	7a1a      	ldrb	r2, [r3, #8]
 8010380:	b11a      	cbz	r2, 801038a <7fbb727db4b2b6715b092505673cb5922a0d63a8+0x12>
 8010382:	7218      	strb	r0, [r3, #8]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	b103      	cbz	r3, 801038a <7fbb727db4b2b6715b092505673cb5922a0d63a8+0x12>
 8010388:	4798      	blx	r3
 801038a:	bd08      	pop	{r3, pc}

0801038c <bcbd76277dc83b5a545ee18a3f2075697c040c84>:
 801038c:	4b03      	ldr	r3, [pc, #12]	; (801039c <bcbd76277dc83b5a545ee18a3f2075697c040c84+0x10>)
 801038e:	6819      	ldr	r1, [r3, #0]
 8010390:	2300      	movs	r3, #0
 8010392:	e9c1 33c5 	strd	r3, r3, [r1, #788]	; 0x314
 8010396:	f8c1 331c 	str.w	r3, [r1, #796]	; 0x31c
 801039a:	4770      	bx	lr
 801039c:	20000034 	.word	0x20000034

080103a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f>:
 80103a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103a2:	4b3c      	ldr	r3, [pc, #240]	; (8010494 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf4>)
 80103a4:	681d      	ldr	r5, [r3, #0]
 80103a6:	f8b5 3314 	ldrh.w	r3, [r5, #788]	; 0x314
 80103aa:	4283      	cmp	r3, r0
 80103ac:	b08f      	sub	sp, #60	; 0x3c
 80103ae:	4604      	mov	r4, r0
 80103b0:	d123      	bne.n	80103fa <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x5a>
 80103b2:	f000 fef9 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 80103b6:	2700      	movs	r7, #0
 80103b8:	f000 fef6 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 80103bc:	b2be      	uxth	r6, r7
 80103be:	4286      	cmp	r6, r0
 80103c0:	d204      	bcs.n	80103cc <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x2c>
 80103c2:	4630      	mov	r0, r6
 80103c4:	f001 f980 	bl	80116c8 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 80103c8:	b310      	cbz	r0, 8010410 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x70>
 80103ca:	b30e      	cbz	r6, 8010410 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x70>
 80103cc:	af09      	add	r7, sp, #36	; 0x24
 80103ce:	2100      	movs	r1, #0
 80103d0:	2211      	movs	r2, #17
 80103d2:	4638      	mov	r0, r7
 80103d4:	f008 fdd4 	bl	8018f80 <memset>
 80103d8:	4639      	mov	r1, r7
 80103da:	4620      	mov	r0, r4
 80103dc:	f001 f850 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80103e0:	b9c0      	cbnz	r0, 8010414 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x74>
 80103e2:	4b2d      	ldr	r3, [pc, #180]	; (8010498 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 80103e4:	4a2d      	ldr	r2, [pc, #180]	; (801049c <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xfc>)
 80103e6:	9007      	str	r0, [sp, #28]
 80103e8:	4619      	mov	r1, r3
 80103ea:	9308      	str	r3, [sp, #32]
 80103ec:	f7fd f91e 	bl	800d62c <LOGGER_PrintLine>
 80103f0:	492b      	ldr	r1, [pc, #172]	; (80104a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x100>)
 80103f2:	482c      	ldr	r0, [pc, #176]	; (80104a4 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x104>)
 80103f4:	2264      	movs	r2, #100	; 0x64
 80103f6:	f7f1 f8cb 	bl	8001590 <EXPECT_OnAbortHandler>
 80103fa:	2303      	movs	r3, #3
 80103fc:	9309      	str	r3, [sp, #36]	; 0x24
 80103fe:	4b26      	ldr	r3, [pc, #152]	; (8010498 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 8010400:	4a29      	ldr	r2, [pc, #164]	; (80104a8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x108>)
 8010402:	930a      	str	r3, [sp, #40]	; 0x28
 8010404:	4619      	mov	r1, r3
 8010406:	2003      	movs	r0, #3
 8010408:	f7fd f910 	bl	800d62c <LOGGER_PrintLine>
 801040c:	2400      	movs	r4, #0
 801040e:	e01c      	b.n	801044a <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xaa>
 8010410:	3701      	adds	r7, #1
 8010412:	e7d1      	b.n	80103b8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x18>
 8010414:	f000 fec8 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8010418:	4286      	cmp	r6, r0
 801041a:	d029      	beq.n	8010470 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xd0>
 801041c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8010420:	2300      	movs	r3, #0
 8010422:	f363 0207 	bfi	r2, r3, #0, #8
 8010426:	f88d 2018 	strb.w	r2, [sp, #24]
 801042a:	9906      	ldr	r1, [sp, #24]
 801042c:	f88d 100c 	strb.w	r1, [sp, #12]
 8010430:	e9cd 3700 	strd	r3, r7, [sp]
 8010434:	9305      	str	r3, [sp, #20]
 8010436:	9302      	str	r3, [sp, #8]
 8010438:	2206      	movs	r2, #6
 801043a:	2104      	movs	r1, #4
 801043c:	4630      	mov	r0, r6
 801043e:	f000 fec3 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8010442:	4604      	mov	r4, r0
 8010444:	b120      	cbz	r0, 8010450 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xb0>
 8010446:	f8a5 6314 	strh.w	r6, [r5, #788]	; 0x314
 801044a:	4620      	mov	r0, r4
 801044c:	b00f      	add	sp, #60	; 0x3c
 801044e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010450:	2303      	movs	r3, #3
 8010452:	9307      	str	r3, [sp, #28]
 8010454:	4b10      	ldr	r3, [pc, #64]	; (8010498 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 8010456:	4a15      	ldr	r2, [pc, #84]	; (80104ac <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x10c>)
 8010458:	9308      	str	r3, [sp, #32]
 801045a:	4619      	mov	r1, r3
 801045c:	2003      	movs	r0, #3
 801045e:	f7fd f8e5 	bl	800d62c <LOGGER_PrintLine>
 8010462:	f8c5 4314 	str.w	r4, [r5, #788]	; 0x314
 8010466:	f8c5 4318 	str.w	r4, [r5, #792]	; 0x318
 801046a:	f8c5 431c 	str.w	r4, [r5, #796]	; 0x31c
 801046e:	e7cd      	b.n	801040c <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x6c>
 8010470:	2303      	movs	r3, #3
 8010472:	9307      	str	r3, [sp, #28]
 8010474:	4b08      	ldr	r3, [pc, #32]	; (8010498 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 8010476:	4a0e      	ldr	r2, [pc, #56]	; (80104b0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x110>)
 8010478:	9308      	str	r3, [sp, #32]
 801047a:	4619      	mov	r1, r3
 801047c:	2003      	movs	r0, #3
 801047e:	f7fd f8d5 	bl	800d62c <LOGGER_PrintLine>
 8010482:	2300      	movs	r3, #0
 8010484:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 8010488:	f8c5 3318 	str.w	r3, [r5, #792]	; 0x318
 801048c:	f8c5 331c 	str.w	r3, [r5, #796]	; 0x31c
 8010490:	e7bc      	b.n	801040c <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x6c>
 8010492:	bf00      	nop
 8010494:	20000034 	.word	0x20000034
 8010498:	0801c248 	.word	0x0801c248
 801049c:	0801c2ae 	.word	0x0801c2ae
 80104a0:	0801c2e0 	.word	0x0801c2e0
 80104a4:	0801c33b 	.word	0x0801c33b
 80104a8:	0801c29c 	.word	0x0801c29c
 80104ac:	0801c36c 	.word	0x0801c36c
 80104b0:	0801c396 	.word	0x0801c396

080104b4 <982333be2760117c5a90b228f88c7e9bbb3de31e>:
 80104b4:	4b07      	ldr	r3, [pc, #28]	; (80104d4 <982333be2760117c5a90b228f88c7e9bbb3de31e+0x20>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f8b3 2314 	ldrh.w	r2, [r3, #788]	; 0x314
 80104bc:	4282      	cmp	r2, r0
 80104be:	f503 7145 	add.w	r1, r3, #788	; 0x314
 80104c2:	d106      	bne.n	80104d2 <982333be2760117c5a90b228f88c7e9bbb3de31e+0x1e>
 80104c4:	2201      	movs	r2, #1
 80104c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 80104ca:	4803      	ldr	r0, [pc, #12]	; (80104d8 <982333be2760117c5a90b228f88c7e9bbb3de31e+0x24>)
 80104cc:	2212      	movs	r2, #18
 80104ce:	f7fb b8e3 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80104d2:	4770      	bx	lr
 80104d4:	20000034 	.word	0x20000034
 80104d8:	08010379 	.word	0x08010379

080104dc <f13b11cc0bbf49b03ea71d42a05b941abea0a520>:
 80104dc:	b510      	push	{r4, lr}
 80104de:	4b0a      	ldr	r3, [pc, #40]	; (8010508 <f13b11cc0bbf49b03ea71d42a05b941abea0a520+0x2c>)
 80104e0:	b086      	sub	sp, #24
 80104e2:	681c      	ldr	r4, [r3, #0]
 80104e4:	2211      	movs	r2, #17
 80104e6:	2100      	movs	r1, #0
 80104e8:	a801      	add	r0, sp, #4
 80104ea:	f008 fd49 	bl	8018f80 <memset>
 80104ee:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 80104f2:	b13b      	cbz	r3, 8010504 <f13b11cc0bbf49b03ea71d42a05b941abea0a520+0x28>
 80104f4:	f8b4 0314 	ldrh.w	r0, [r4, #788]	; 0x314
 80104f8:	a901      	add	r1, sp, #4
 80104fa:	f000 ffc1 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80104fe:	2300      	movs	r3, #0
 8010500:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
 8010504:	b006      	add	sp, #24
 8010506:	bd10      	pop	{r4, pc}
 8010508:	20000034 	.word	0x20000034

0801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>:
 801050c:	4b05      	ldr	r3, [pc, #20]	; (8010524 <15dba1c7fc73543b1601dd226b614c09581a3c00+0x18>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8010514:	2b04      	cmp	r3, #4
 8010516:	bf9a      	itte	ls
 8010518:	4a03      	ldrls	r2, [pc, #12]	; (8010528 <15dba1c7fc73543b1601dd226b614c09581a3c00+0x1c>)
 801051a:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 801051e:	4803      	ldrhi	r0, [pc, #12]	; (801052c <15dba1c7fc73543b1601dd226b614c09581a3c00+0x20>)
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	20000034 	.word	0x20000034
 8010528:	0801c644 	.word	0x0801c644
 801052c:	0801aac7 	.word	0x0801aac7

08010530 <05eb4bf7e3ef9650051a184f9a45beef977581cc>:
 8010530:	2000      	movs	r0, #0
 8010532:	4770      	bx	lr

08010534 <7d1cb8091a20cdd8ca4da922eaffd9d973c739dd>:
 8010534:	2000      	movs	r0, #0
 8010536:	4770      	bx	lr

08010538 <ea8791126746fbed7807350ad8e855f2738f0828>:
 8010538:	2000      	movs	r0, #0
 801053a:	4770      	bx	lr

0801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>:
 801053c:	7982      	ldrb	r2, [r0, #6]
 801053e:	2300      	movs	r3, #0
 8010540:	f362 231f 	bfi	r3, r2, #8, #24
 8010544:	79c2      	ldrb	r2, [r0, #7]
 8010546:	f362 0307 	bfi	r3, r2, #0, #8
 801054a:	4a08      	ldr	r2, [pc, #32]	; (801056c <73cbc6b3efc5bccd854bcb41733d9be650914b6e+0x30>)
 801054c:	6810      	ldr	r0, [r2, #0]
 801054e:	b29b      	uxth	r3, r3
 8010550:	fbb3 f2f0 	udiv	r2, r3, r0
 8010554:	fb00 3212 	mls	r2, r0, r2, r3
 8010558:	708a      	strb	r2, [r1, #2]
 801055a:	220c      	movs	r2, #12
 801055c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010560:	fb02 3310 	mls	r3, r2, r0, r3
 8010564:	3301      	adds	r3, #1
 8010566:	800b      	strh	r3, [r1, #0]
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	0801a600 	.word	0x0801a600

08010570 <ea0b8bb8dfe469dd0c00b9aeff09f3d664539527>:
 8010570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010572:	2300      	movs	r3, #0
 8010574:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010578:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	2301      	movs	r3, #1
 8010580:	f100 010e 	add.w	r1, r0, #14
 8010584:	461a      	mov	r2, r3
 8010586:	2007      	movs	r0, #7
 8010588:	f002 f82e 	bl	80125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 801058c:	b007      	add	sp, #28
 801058e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010594 <getRandomChannelOffset>:
 8010594:	b508      	push	{r3, lr}
 8010596:	f7fa f9f3 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 801059a:	4b04      	ldr	r3, [pc, #16]	; (80105ac <getRandomChannelOffset+0x18>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	fbb0 f2f3 	udiv	r2, r0, r3
 80105a2:	fb02 0013 	mls	r0, r2, r3, r0
 80105a6:	b2c0      	uxtb	r0, r0
 80105a8:	bd08      	pop	{r3, pc}
 80105aa:	bf00      	nop
 80105ac:	0801a600 	.word	0x0801a600

080105b0 <44dfb88cdd7607734702d454330b85a9c16a18d6>:
 80105b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105b2:	f100 030e 	add.w	r3, r0, #14
 80105b6:	4604      	mov	r4, r0
 80105b8:	f102 0010 	add.w	r0, r2, #16
 80105bc:	f852 5b04 	ldr.w	r5, [r2], #4
 80105c0:	f843 5b04 	str.w	r5, [r3], #4
 80105c4:	4282      	cmp	r2, r0
 80105c6:	d1f9      	bne.n	80105bc <44dfb88cdd7607734702d454330b85a9c16a18d6+0xc>
 80105c8:	7812      	ldrb	r2, [r2, #0]
 80105ca:	701a      	strb	r2, [r3, #0]
 80105cc:	1f8b      	subs	r3, r1, #6
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d811      	bhi.n	80105f6 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x46>
 80105d2:	2304      	movs	r3, #4
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x54>)
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	ab02      	add	r3, sp, #8
 80105dc:	e913 0003 	ldmdb	r3, {r0, r1}
 80105e0:	4a09      	ldr	r2, [pc, #36]	; (8010608 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x58>)
 80105e2:	f7fd f823 	bl	800d62c <LOGGER_PrintLine>
 80105e6:	4809      	ldr	r0, [pc, #36]	; (801060c <44dfb88cdd7607734702d454330b85a9c16a18d6+0x5c>)
 80105e8:	2207      	movs	r2, #7
 80105ea:	4621      	mov	r1, r4
 80105ec:	b003      	add	sp, #12
 80105ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105f2:	f7fb b851 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80105f6:	b919      	cbnz	r1, 8010600 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x50>
 80105f8:	4805      	ldr	r0, [pc, #20]	; (8010610 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x60>)
 80105fa:	2207      	movs	r2, #7
 80105fc:	4621      	mov	r1, r4
 80105fe:	e7f5      	b.n	80105ec <44dfb88cdd7607734702d454330b85a9c16a18d6+0x3c>
 8010600:	b003      	add	sp, #12
 8010602:	bd30      	pop	{r4, r5, pc}
 8010604:	0801c3ab 	.word	0x0801c3ab
 8010608:	0801c3af 	.word	0x0801c3af
 801060c:	08010571 	.word	0x08010571
 8010610:	08010de5 	.word	0x08010de5

08010614 <candidateAddCellList.part.0.constprop.0>:
 8010614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010618:	b08b      	sub	sp, #44	; 0x2c
 801061a:	460c      	mov	r4, r1
 801061c:	2219      	movs	r2, #25
 801061e:	2100      	movs	r1, #0
 8010620:	af03      	add	r7, sp, #12
 8010622:	4606      	mov	r6, r0
 8010624:	f008 fcac 	bl	8018f80 <memset>
 8010628:	221a      	movs	r2, #26
 801062a:	21ff      	movs	r1, #255	; 0xff
 801062c:	4638      	mov	r0, r7
 801062e:	f008 fca7 	bl	8018f80 <memset>
 8010632:	4620      	mov	r0, r4
 8010634:	f7f8 fb86 	bl	8008d44 <NEIGHBORS_GetRxSlotCandidate>
 8010638:	f100 0801 	add.w	r8, r0, #1
 801063c:	230d      	movs	r3, #13
 801063e:	fa1f f888 	uxth.w	r8, r8
 8010642:	fbb8 f2f3 	udiv	r2, r8, r3
 8010646:	fb03 8812 	mls	r8, r3, r2, r8
 801064a:	fa1f f888 	uxth.w	r8, r8
 801064e:	2500      	movs	r5, #0
 8010650:	462c      	mov	r4, r5
 8010652:	eb08 0a03 	add.w	sl, r8, r3
 8010656:	2d00      	cmp	r5, #0
 8010658:	bf08      	it	eq
 801065a:	2501      	moveq	r5, #1
 801065c:	fa1f f985 	uxth.w	r9, r5
 8010660:	45c8      	cmp	r8, r9
 8010662:	bf8c      	ite	hi
 8010664:	eba8 0909 	subhi.w	r9, r8, r9
 8010668:	ebaa 0909 	subls.w	r9, sl, r9
 801066c:	fa1f f989 	uxth.w	r9, r9
 8010670:	4648      	mov	r0, r9
 8010672:	f001 f829 	bl	80116c8 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 8010676:	b130      	cbz	r0, 8010686 <candidateAddCellList.part.0.constprop.0+0x72>
 8010678:	aa0a      	add	r2, sp, #40	; 0x28
 801067a:	1c63      	adds	r3, r4, #1
 801067c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8010680:	f824 9c1c 	strh.w	r9, [r4, #-28]
 8010684:	b29c      	uxth	r4, r3
 8010686:	3501      	adds	r5, #1
 8010688:	2d0d      	cmp	r5, #13
 801068a:	d1e4      	bne.n	8010656 <candidateAddCellList.part.0.constprop.0+0x42>
 801068c:	2c05      	cmp	r4, #5
 801068e:	d816      	bhi.n	80106be <candidateAddCellList.part.0.constprop.0+0xaa>
 8010690:	2500      	movs	r5, #0
 8010692:	f04f 0801 	mov.w	r8, #1
 8010696:	f837 3b02 	ldrh.w	r3, [r7], #2
 801069a:	f8a6 3001 	strh.w	r3, [r6, #1]
 801069e:	f7ff ff79 	bl	8010594 <getRandomChannelOffset>
 80106a2:	3501      	adds	r5, #1
 80106a4:	b2ab      	uxth	r3, r5
 80106a6:	42a3      	cmp	r3, r4
 80106a8:	f8a6 0003 	strh.w	r0, [r6, #3]
 80106ac:	f806 8b05 	strb.w	r8, [r6], #5
 80106b0:	d9f1      	bls.n	8010696 <candidateAddCellList.part.0.constprop.0+0x82>
 80106b2:	1e20      	subs	r0, r4, #0
 80106b4:	bf18      	it	ne
 80106b6:	2001      	movne	r0, #1
 80106b8:	b00b      	add	sp, #44	; 0x2c
 80106ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106be:	f106 0314 	add.w	r3, r6, #20
 80106c2:	f04f 0a00 	mov.w	sl, #0
 80106c6:	f04f 0901 	mov.w	r9, #1
 80106ca:	9301      	str	r3, [sp, #4]
 80106cc:	f1ba 0f04 	cmp.w	sl, #4
 80106d0:	d143      	bne.n	801075a <candidateAddCellList.part.0.constprop.0+0x146>
 80106d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80106d6:	f7fa f953 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 80106da:	fbb0 f3f5 	udiv	r3, r0, r5
 80106de:	fb03 0315 	mls	r3, r3, r5, r0
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4639      	mov	r1, r7
 80106e6:	2200      	movs	r2, #0
 80106e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80106ec:	f831 cb02 	ldrh.w	ip, [r1], #2
 80106f0:	4584      	cmp	ip, r0
 80106f2:	d103      	bne.n	80106fc <candidateAddCellList.part.0.constprop.0+0xe8>
 80106f4:	3201      	adds	r2, #1
 80106f6:	42a2      	cmp	r2, r4
 80106f8:	d3f8      	bcc.n	80106ec <candidateAddCellList.part.0.constprop.0+0xd8>
 80106fa:	2200      	movs	r2, #0
 80106fc:	b1c3      	cbz	r3, 8010730 <candidateAddCellList.part.0.constprop.0+0x11c>
 80106fe:	f04f 0c00 	mov.w	ip, #0
 8010702:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8010706:	2001      	movs	r0, #1
 8010708:	1811      	adds	r1, r2, r0
 801070a:	fbb1 fbf4 	udiv	fp, r1, r4
 801070e:	fb04 111b 	mls	r1, r4, fp, r1
 8010712:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8010716:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 801071a:	f83b bc1c 	ldrh.w	fp, [fp, #-28]
 801071e:	45f3      	cmp	fp, lr
 8010720:	d125      	bne.n	801076e <candidateAddCellList.part.0.constprop.0+0x15a>
 8010722:	3001      	adds	r0, #1
 8010724:	42a0      	cmp	r0, r4
 8010726:	d3ef      	bcc.n	8010708 <candidateAddCellList.part.0.constprop.0+0xf4>
 8010728:	f10c 0c01 	add.w	ip, ip, #1
 801072c:	4563      	cmp	r3, ip
 801072e:	d8ea      	bhi.n	8010706 <candidateAddCellList.part.0.constprop.0+0xf2>
 8010730:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 8010734:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010738:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
 801073c:	f8a8 3001 	strh.w	r3, [r8, #1]
 8010740:	f7ff ff28 	bl	8010594 <getRandomChannelOffset>
 8010744:	f10a 0a01 	add.w	sl, sl, #1
 8010748:	f1ba 0f05 	cmp.w	sl, #5
 801074c:	f8a8 0003 	strh.w	r0, [r8, #3]
 8010750:	f888 9000 	strb.w	r9, [r8]
 8010754:	d1ba      	bne.n	80106cc <candidateAddCellList.part.0.constprop.0+0xb8>
 8010756:	2001      	movs	r0, #1
 8010758:	e7ae      	b.n	80106b8 <candidateAddCellList.part.0.constprop.0+0xa4>
 801075a:	f7fa f911 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 801075e:	fa09 f30a 	lsl.w	r3, r9, sl
 8010762:	eb0a 088a 	add.w	r8, sl, sl, lsl #2
 8010766:	3b01      	subs	r3, #1
 8010768:	44b0      	add	r8, r6
 801076a:	4003      	ands	r3, r0
 801076c:	e7b9      	b.n	80106e2 <candidateAddCellList.part.0.constprop.0+0xce>
 801076e:	460a      	mov	r2, r1
 8010770:	e7da      	b.n	8010728 <candidateAddCellList.part.0.constprop.0+0x114>

08010772 <857de3c8f5260b81d9c8f1309c962f70e86f8d45>:
 8010772:	b570      	push	{r4, r5, r6, lr}
 8010774:	b08e      	sub	sp, #56	; 0x38
 8010776:	4604      	mov	r4, r0
 8010778:	460d      	mov	r5, r1
 801077a:	f7ff fdd9 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 801077e:	b188      	cbz	r0, 80107a4 <857de3c8f5260b81d9c8f1309c962f70e86f8d45+0x32>
 8010780:	ae07      	add	r6, sp, #28
 8010782:	4629      	mov	r1, r5
 8010784:	4630      	mov	r0, r6
 8010786:	f7ff ff45 	bl	8010614 <candidateAddCellList.part.0.constprop.0>
 801078a:	b158      	cbz	r0, 80107a4 <857de3c8f5260b81d9c8f1309c962f70e86f8d45+0x32>
 801078c:	2300      	movs	r3, #0
 801078e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010792:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8010796:	2301      	movs	r3, #1
 8010798:	9600      	str	r6, [sp, #0]
 801079a:	461a      	mov	r2, r3
 801079c:	4621      	mov	r1, r4
 801079e:	4618      	mov	r0, r3
 80107a0:	f001 ff22 	bl	80125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 80107a4:	b00e      	add	sp, #56	; 0x38
 80107a6:	bd70      	pop	{r4, r5, r6, pc}

080107a8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>:
 80107a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ac:	4bbb      	ldr	r3, [pc, #748]	; (8010a9c <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f4>)
 80107ae:	b0c1      	sub	sp, #260	; 0x104
 80107b0:	681c      	ldr	r4, [r3, #0]
 80107b2:	f7f7 fdd1 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80107b6:	4605      	mov	r5, r0
 80107b8:	b9d8      	cbnz	r0, 80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 80107ba:	f000 fcf5 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 80107be:	4606      	mov	r6, r0
 80107c0:	a817      	add	r0, sp, #92	; 0x5c
 80107c2:	f7ff fd53 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 80107c6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80107c8:	f89d 9060 	ldrb.w	r9, [sp, #96]	; 0x60
 80107cc:	42ae      	cmp	r6, r5
 80107ce:	d113      	bne.n	80107f8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x50>
 80107d0:	2210      	movs	r2, #16
 80107d2:	2100      	movs	r1, #0
 80107d4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
 80107d8:	2502      	movs	r5, #2
 80107da:	f008 fbd1 	bl	8018f80 <memset>
 80107de:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 80107e2:	f7ff fda5 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d16d      	bne.n	80108c6 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11e>
 80107ea:	f001 f833 	bl	8011854 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8>
 80107ee:	f001 f877 	bl	80118e0 <1baccc0636a0c0164401b195d5e58f3f8da51c03>
 80107f2:	b041      	add	sp, #260	; 0x104
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	4629      	mov	r1, r5
 80107fa:	a830      	add	r0, sp, #192	; 0xc0
 80107fc:	f000 feec 	bl	80115d8 <SCHEDULE_GetCellInfo>
 8010800:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
 8010804:	f105 0801 	add.w	r8, r5, #1
 8010808:	2b05      	cmp	r3, #5
 801080a:	fa1f f888 	uxth.w	r8, r8
 801080e:	d158      	bne.n	80108c2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8010810:	f8dd 20d7 	ldr.w	r2, [sp, #215]	; 0xd7
 8010814:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8010818:	1aba      	subs	r2, r7, r2
 801081a:	eb69 0303 	sbc.w	r3, r9, r3
 801081e:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8010822:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8010826:	428a      	cmp	r2, r1
 8010828:	f173 0300 	sbcs.w	r3, r3, #0
 801082c:	d349      	bcc.n	80108c2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 801082e:	46c3      	mov	fp, r8
 8010830:	f04f 0a01 	mov.w	sl, #1
 8010834:	e020      	b.n	8010878 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xd0>
 8010836:	4659      	mov	r1, fp
 8010838:	a838      	add	r0, sp, #224	; 0xe0
 801083a:	f000 fecd 	bl	80115d8 <SCHEDULE_GetCellInfo>
 801083e:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
 8010842:	2a05      	cmp	r2, #5
 8010844:	d114      	bne.n	8010870 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xc8>
 8010846:	a938      	add	r1, sp, #224	; 0xe0
 8010848:	a830      	add	r0, sp, #192	; 0xc0
 801084a:	f7f8 fd3f 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801084e:	b178      	cbz	r0, 8010870 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xc8>
 8010850:	f8dd 10f7 	ldr.w	r1, [sp, #247]	; 0xf7
 8010854:	f89d 20fb 	ldrb.w	r2, [sp, #251]	; 0xfb
 8010858:	1a79      	subs	r1, r7, r1
 801085a:	eb69 0202 	sbc.w	r2, r9, r2
 801085e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8010862:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8010866:	f172 0200 	sbcs.w	r2, r2, #0
 801086a:	bf38      	it	cc
 801086c:	f04f 0a00 	movcc.w	sl, #0
 8010870:	f10b 0301 	add.w	r3, fp, #1
 8010874:	fa1f fb83 	uxth.w	fp, r3
 8010878:	455e      	cmp	r6, fp
 801087a:	d1dc      	bne.n	8010836 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x8e>
 801087c:	f1ba 0f00 	cmp.w	sl, #0
 8010880:	d01f      	beq.n	80108c2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8010882:	a930      	add	r1, sp, #192	; 0xc0
 8010884:	4628      	mov	r0, r5
 8010886:	f000 fdfb 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 801088a:	f7fc fea9 	bl	800d5e0 <LOGGER_StartSection>
 801088e:	b1c0      	cbz	r0, 80108c2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8010890:	2303      	movs	r3, #3
 8010892:	9338      	str	r3, [sp, #224]	; 0xe0
 8010894:	4b82      	ldr	r3, [pc, #520]	; (8010aa0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>)
 8010896:	9339      	str	r3, [sp, #228]	; 0xe4
 8010898:	4619      	mov	r1, r3
 801089a:	2003      	movs	r0, #3
 801089c:	f7fc fea8 	bl	800d5f0 <LOGGER_PrintHeader>
 80108a0:	aa30      	add	r2, sp, #192	; 0xc0
 80108a2:	2307      	movs	r3, #7
 80108a4:	a928      	add	r1, sp, #160	; 0xa0
 80108a6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80108aa:	5458      	strb	r0, [r3, r1]
 80108ac:	3b01      	subs	r3, #1
 80108ae:	d2fa      	bcs.n	80108a6 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xfe>
 80108b0:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80108b4:	487b      	ldr	r0, [pc, #492]	; (8010aa4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2fc>)
 80108b6:	f7fc fe81 	bl	800d5bc <LOGGER_Print>
 80108ba:	f7fc fe77 	bl	800d5ac <LOGGER_PrintNL>
 80108be:	f7fc fe95 	bl	800d5ec <LOGGER_EndSection>
 80108c2:	4645      	mov	r5, r8
 80108c4:	e782      	b.n	80107cc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x24>
 80108c6:	f10d 0165 	add.w	r1, sp, #101	; 0x65
 80108ca:	f10d 0047 	add.w	r0, sp, #71	; 0x47
 80108ce:	f7f8 f96b 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d089      	beq.n	80107ea <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x42>
 80108d6:	2210      	movs	r2, #16
 80108d8:	2100      	movs	r1, #0
 80108da:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 80108de:	f008 fb4f 	bl	8018f80 <memset>
 80108e2:	a81e      	add	r0, sp, #120	; 0x78
 80108e4:	f504 7648 	add.w	r6, r4, #800	; 0x320
 80108e8:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
 80108ec:	f000 ffce 	bl	801188c <0a6eef3dd890049c6feb9f053ae4732930866b35>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	f000 808a 	beq.w	8010a0a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x262>
 80108f6:	a919      	add	r1, sp, #100	; 0x64
 80108f8:	a81e      	add	r0, sp, #120	; 0x78
 80108fa:	f7f8 fce7 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80108fe:	4607      	mov	r7, r0
 8010900:	2800      	cmp	r0, #0
 8010902:	d165      	bne.n	80109d0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x228>
 8010904:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8010aa0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>
 8010908:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
 801090c:	f04f 0a05 	mov.w	sl, #5
 8010910:	f8cd a0e0 	str.w	sl, [sp, #224]	; 0xe0
 8010914:	ad38      	add	r5, sp, #224	; 0xe0
 8010916:	e895 0003 	ldmia.w	r5, {r0, r1}
 801091a:	4a63      	ldr	r2, [pc, #396]	; (8010aa8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x300>)
 801091c:	f7fc fe86 	bl	800d62c <LOGGER_PrintLine>
 8010920:	a81e      	add	r0, sp, #120	; 0x78
 8010922:	f000 ff07 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8010926:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 801092a:	4681      	mov	r9, r0
 801092c:	b163      	cbz	r3, 8010948 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1a0>
 801092e:	f8a4 732c 	strh.w	r7, [r4, #812]	; 0x32c
 8010932:	4630      	mov	r0, r6
 8010934:	e9cd a838 	strd	sl, r8, [sp, #224]	; 0xe0
 8010938:	f7ff fde8 	bl	801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>
 801093c:	4a5b      	ldr	r2, [pc, #364]	; (8010aac <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 801093e:	4603      	mov	r3, r0
 8010940:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010944:	f7fc fe72 	bl	800d62c <LOGGER_PrintLine>
 8010948:	f1b9 0f00 	cmp.w	r9, #0
 801094c:	d026      	beq.n	801099c <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1f4>
 801094e:	f894 732c 	ldrb.w	r7, [r4, #812]	; 0x32c
 8010952:	b9c7      	cbnz	r7, 8010986 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1de>
 8010954:	2305      	movs	r3, #5
 8010956:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 801095a:	4a55      	ldr	r2, [pc, #340]	; (8010ab0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x308>)
 801095c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010960:	f7fc fe64 	bl	800d62c <LOGGER_PrintLine>
 8010964:	2301      	movs	r3, #1
 8010966:	461a      	mov	r2, r3
 8010968:	e9cd 7703 	strd	r7, r7, [sp, #12]
 801096c:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8010970:	9700      	str	r7, [sp, #0]
 8010972:	a91e      	add	r1, sp, #120	; 0x78
 8010974:	2007      	movs	r0, #7
 8010976:	f001 fe37 	bl	80125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 801097a:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 801097e:	3301      	adds	r3, #1
 8010980:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 8010984:	e735      	b.n	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010986:	2304      	movs	r3, #4
 8010988:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 801098c:	4a49      	ldr	r2, [pc, #292]	; (8010ab4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x30c>)
 801098e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010992:	f7fc fe4b 	bl	800d62c <LOGGER_PrintLine>
 8010996:	a81e      	add	r0, sp, #120	; 0x78
 8010998:	f000 ff22 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 801099c:	a912      	add	r1, sp, #72	; 0x48
 801099e:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 80109a2:	f7ff fdcb 	bl	801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80109a6:	a91e      	add	r1, sp, #120	; 0x78
 80109a8:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 80109ac:	f000 fd68 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80109b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109b4:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 80109b8:	4630      	mov	r0, r6
 80109ba:	2305      	movs	r3, #5
 80109bc:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 80109c0:	f7ff fda4 	bl	801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>
 80109c4:	4a39      	ldr	r2, [pc, #228]	; (8010aac <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 80109c6:	4603      	mov	r3, r0
 80109c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80109cc:	f7fc fe2e 	bl	800d62c <LOGGER_PrintLine>
 80109d0:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d01b      	beq.n	8010a10 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x268>
 80109d8:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80109dc:	2b02      	cmp	r3, #2
 80109de:	f040 80e1 	bne.w	8010ba4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3fc>
 80109e2:	a819      	add	r0, sp, #100	; 0x64
 80109e4:	f000 fea6 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 80109e8:	2800      	cmp	r0, #0
 80109ea:	f040 80c5 	bne.w	8010b78 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3d0>
 80109ee:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 80109f2:	2b04      	cmp	r3, #4
 80109f4:	f200 80b4 	bhi.w	8010b60 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3b8>
 80109f8:	3301      	adds	r3, #1
 80109fa:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 80109fe:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8010a02:	a819      	add	r0, sp, #100	; 0x64
 8010a04:	f7ff feb5 	bl	8010772 <857de3c8f5260b81d9c8f1309c962f70e86f8d45>
 8010a08:	e6f3      	b.n	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8010a10:	a912      	add	r1, sp, #72	; 0x48
 8010a12:	f10d 0065 	add.w	r0, sp, #101	; 0x65
 8010a16:	f7ff fd91 	bl	801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 8010a1a:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8010a1e:	a830      	add	r0, sp, #192	; 0xc0
 8010a20:	4639      	mov	r1, r7
 8010a22:	f000 fdd9 	bl	80115d8 <SCHEDULE_GetCellInfo>
 8010a26:	f89d b0d1 	ldrb.w	fp, [sp, #209]	; 0xd1
 8010a2a:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 8010a2e:	f89d 80d2 	ldrb.w	r8, [sp, #210]	; 0xd2
 8010a32:	9306      	str	r3, [sp, #24]
 8010a34:	f1bb 0f04 	cmp.w	fp, #4
 8010a38:	d102      	bne.n	8010a40 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x298>
 8010a3a:	4638      	mov	r0, r7
 8010a3c:	f7ff fcb0 	bl	80103a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f>
 8010a40:	f1a8 0303 	sub.w	r3, r8, #3
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8010aa0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>
 8010a4a:	d916      	bls.n	8010a7a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2d2>
 8010a4c:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8010a50:	d132      	bne.n	8010ab8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x310>
 8010a52:	f89d 804a 	ldrb.w	r8, [sp, #74]	; 0x4a
 8010a56:	ad13      	add	r5, sp, #76	; 0x4c
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f7ff fc07 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8010a5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a62:	ab19      	add	r3, sp, #100	; 0x64
 8010a64:	2203      	movs	r2, #3
 8010a66:	e9cd 8300 	strd	r8, r3, [sp]
 8010a6a:	9002      	str	r0, [sp, #8]
 8010a6c:	f88d 100c 	strb.w	r1, [sp, #12]
 8010a70:	2301      	movs	r3, #1
 8010a72:	4611      	mov	r1, r2
 8010a74:	4638      	mov	r0, r7
 8010a76:	f000 fba7 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8010a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a7e:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8010a82:	4630      	mov	r0, r6
 8010a84:	2305      	movs	r3, #5
 8010a86:	e9cd 3938 	strd	r3, r9, [sp, #224]	; 0xe0
 8010a8a:	f7ff fd3f 	bl	801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8010a8e:	4649      	mov	r1, r9
 8010a90:	4603      	mov	r3, r0
 8010a92:	4a06      	ldr	r2, [pc, #24]	; (8010aac <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 8010a94:	2005      	movs	r0, #5
 8010a96:	f7fc fdc9 	bl	800d62c <LOGGER_PrintLine>
 8010a9a:	e79d      	b.n	80109d8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x230>
 8010a9c:	20000034 	.word	0x20000034
 8010aa0:	0801c3ab 	.word	0x0801c3ab
 8010aa4:	0801c3dc 	.word	0x0801c3dc
 8010aa8:	0801c3f9 	.word	0x0801c3f9
 8010aac:	0801c41b 	.word	0x0801c41b
 8010ab0:	0801c431 	.word	0x0801c431
 8010ab4:	0801c46a 	.word	0x0801c46a
 8010ab8:	f1b8 0f05 	cmp.w	r8, #5
 8010abc:	d1dd      	bne.n	8010a7a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2d2>
 8010abe:	ad30      	add	r5, sp, #192	; 0xc0
 8010ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ac2:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
 8010ac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aca:	682b      	ldr	r3, [r5, #0]
 8010acc:	f88c 3000 	strb.w	r3, [ip]
 8010ad0:	f894 a32c 	ldrb.w	sl, [r4, #812]	; 0x32c
 8010ad4:	ad38      	add	r5, sp, #224	; 0xe0
 8010ad6:	f1ba 0f00 	cmp.w	sl, #0
 8010ada:	d131      	bne.n	8010b40 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x398>
 8010adc:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
 8010ae0:	4ab8      	ldr	r2, [pc, #736]	; (8010dc4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x61c>)
 8010ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ae6:	f7fc fda1 	bl	800d62c <LOGGER_PrintLine>
 8010aea:	af28      	add	r7, sp, #160	; 0xa0
 8010aec:	2214      	movs	r2, #20
 8010aee:	4651      	mov	r1, sl
 8010af0:	f10d 00e5 	add.w	r0, sp, #229	; 0xe5
 8010af4:	f008 fa44 	bl	8018f80 <memset>
 8010af8:	2601      	movs	r6, #1
 8010afa:	9b06      	ldr	r3, [sp, #24]
 8010afc:	f89d 20d6 	ldrb.w	r2, [sp, #214]	; 0xd6
 8010b00:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8010b04:	f88d 60e0 	strb.w	r6, [sp, #224]	; 0xe0
 8010b08:	4638      	mov	r0, r7
 8010b0a:	f8ad 30e1 	strh.w	r3, [sp, #225]	; 0xe1
 8010b0e:	f8ad 20e3 	strh.w	r2, [sp, #227]	; 0xe3
 8010b12:	f7ff fd7f 	bl	8010614 <candidateAddCellList.part.0.constprop.0>
 8010b16:	b920      	cbnz	r0, 8010b22 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x37a>
 8010b18:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8010b1c:	4433      	add	r3, r6
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	e72e      	b.n	8010980 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1d8>
 8010b22:	465b      	mov	r3, fp
 8010b24:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8010b28:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8010b2c:	9700      	str	r7, [sp, #0]
 8010b2e:	4632      	mov	r2, r6
 8010b30:	a923      	add	r1, sp, #140	; 0x8c
 8010b32:	2003      	movs	r0, #3
 8010b34:	f001 fd58 	bl	80125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8010b38:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	e7ee      	b.n	8010b1e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x376>
 8010b40:	2304      	movs	r3, #4
 8010b42:	e9cd 3938 	strd	r3, r9, [sp, #224]	; 0xe0
 8010b46:	4aa0      	ldr	r2, [pc, #640]	; (8010dc8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x620>)
 8010b48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010b4c:	f7fc fd6e 	bl	800d62c <LOGGER_PrintLine>
 8010b50:	9806      	ldr	r0, [sp, #24]
 8010b52:	a923      	add	r1, sp, #140	; 0x8c
 8010b54:	f000 fc94 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8010b58:	ad15      	add	r5, sp, #84	; 0x54
 8010b5a:	f89d 804a 	ldrb.w	r8, [sp, #74]	; 0x4a
 8010b5e:	e77b      	b.n	8010a58 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2b0>
 8010b60:	2303      	movs	r3, #3
 8010b62:	9338      	str	r3, [sp, #224]	; 0xe0
 8010b64:	4b99      	ldr	r3, [pc, #612]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010b66:	4a9a      	ldr	r2, [pc, #616]	; (8010dd0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x628>)
 8010b68:	9339      	str	r3, [sp, #228]	; 0xe4
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	2003      	movs	r0, #3
 8010b6e:	f7fc fd5d 	bl	800d62c <LOGGER_PrintLine>
 8010b72:	f005 ff89 	bl	8016a88 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>
 8010b76:	e63c      	b.n	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010b78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010b7c:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8010b80:	2300      	movs	r3, #0
 8010b82:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8010b86:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
 8010b8a:	2305      	movs	r3, #5
 8010b8c:	9338      	str	r3, [sp, #224]	; 0xe0
 8010b8e:	4630      	mov	r0, r6
 8010b90:	4b8e      	ldr	r3, [pc, #568]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010b92:	9339      	str	r3, [sp, #228]	; 0xe4
 8010b94:	f7ff fcba 	bl	801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8010b98:	498c      	ldr	r1, [pc, #560]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010b9a:	4a8e      	ldr	r2, [pc, #568]	; (8010dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x62c>)
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2005      	movs	r0, #5
 8010ba0:	f7fc fd44 	bl	800d62c <LOGGER_PrintLine>
 8010ba4:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8010ba8:	2b03      	cmp	r3, #3
 8010baa:	d112      	bne.n	8010bd2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x42a>
 8010bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bb0:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8010bb4:	2305      	movs	r3, #5
 8010bb6:	9338      	str	r3, [sp, #224]	; 0xe0
 8010bb8:	4630      	mov	r0, r6
 8010bba:	4b84      	ldr	r3, [pc, #528]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010bbc:	9339      	str	r3, [sp, #228]	; 0xe4
 8010bbe:	f7ff fca5 	bl	801050c <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8010bc2:	4982      	ldr	r1, [pc, #520]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010bc4:	4a83      	ldr	r2, [pc, #524]	; (8010dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x62c>)
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2005      	movs	r0, #5
 8010bca:	f7fc fd2f 	bl	800d62c <LOGGER_PrintLine>
 8010bce:	f005 fca5 	bl	801651c <85bee7284ee25f7a29b50481cf48923ac2abd69d>
 8010bd2:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8010bd6:	2b04      	cmp	r3, #4
 8010bd8:	f47f ae0b 	bne.w	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010bdc:	a819      	add	r0, sp, #100	; 0x64
 8010bde:	f000 fda9 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	f000 80e8 	beq.w	8010db8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x610>
 8010be8:	f994 3323 	ldrsb.w	r3, [r4, #803]	; 0x323
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	ad38      	add	r5, sp, #224	; 0xe0
 8010bf0:	dd0e      	ble.n	8010c10 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x468>
 8010bf2:	2305      	movs	r3, #5
 8010bf4:	9338      	str	r3, [sp, #224]	; 0xe0
 8010bf6:	4b75      	ldr	r3, [pc, #468]	; (8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8010bf8:	9339      	str	r3, [sp, #228]	; 0xe4
 8010bfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010bfe:	4a76      	ldr	r2, [pc, #472]	; (8010dd8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x630>)
 8010c00:	f7fc fd14 	bl	800d62c <LOGGER_PrintLine>
 8010c04:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8010c0e:	e6f6      	b.n	80109fe <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x256>
 8010c10:	f000 809b 	beq.w	8010d4a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5a2>
 8010c14:	a819      	add	r0, sp, #100	; 0x64
 8010c16:	f000 fd8d 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8010c1a:	2801      	cmp	r0, #1
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	f240 8091 	bls.w	8010d44 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x59c>
 8010c22:	2000      	movs	r0, #0
 8010c24:	f000 fda8 	bl	8011778 <ee504f8deafedb03386eec1c989207132bd15110>
 8010c28:	3801      	subs	r0, #1
 8010c2a:	ebb6 0f50 	cmp.w	r6, r0, lsr #1
 8010c2e:	f240 8089 	bls.w	8010d44 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x59c>
 8010c32:	2305      	movs	r3, #5
 8010c34:	f8df b194 	ldr.w	fp, [pc, #404]	; 8010dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>
 8010c38:	9338      	str	r3, [sp, #224]	; 0xe0
 8010c3a:	f8cd b0e4 	str.w	fp, [sp, #228]	; 0xe4
 8010c3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c42:	4a66      	ldr	r2, [pc, #408]	; (8010ddc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x634>)
 8010c44:	f7fc fcf2 	bl	800d62c <LOGGER_PrintLine>
 8010c48:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8010c52:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
 8010c56:	f7ff fb6b 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	f43f adc9 	beq.w	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010c60:	a819      	add	r0, sp, #100	; 0x64
 8010c62:	f000 fd67 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8010c66:	2801      	cmp	r0, #1
 8010c68:	f67f adc3 	bls.w	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010c6c:	af28      	add	r7, sp, #160	; 0xa0
 8010c6e:	2219      	movs	r2, #25
 8010c70:	2100      	movs	r1, #0
 8010c72:	4638      	mov	r0, r7
 8010c74:	f008 f984 	bl	8018f80 <memset>
 8010c78:	f000 fa96 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8010c7c:	4680      	mov	r8, r0
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f7f8 f860 	bl	8008d44 <NEIGHBORS_GetRxSlotCandidate>
 8010c84:	f04f 0900 	mov.w	r9, #0
 8010c88:	9006      	str	r0, [sp, #24]
 8010c8a:	464e      	mov	r6, r9
 8010c8c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8010c90:	fa1f f489 	uxth.w	r4, r9
 8010c94:	4544      	cmp	r4, r8
 8010c96:	d30f      	bcc.n	8010cb8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x510>
 8010c98:	2e00      	cmp	r6, #0
 8010c9a:	f43f adaa 	beq.w	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010ca4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	2301      	movs	r3, #1
 8010cac:	461a      	mov	r2, r3
 8010cae:	a919      	add	r1, sp, #100	; 0x64
 8010cb0:	2002      	movs	r0, #2
 8010cb2:	f001 fc99 	bl	80125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8010cb6:	e59c      	b.n	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010cb8:	9b06      	ldr	r3, [sp, #24]
 8010cba:	441c      	add	r4, r3
 8010cbc:	b2a4      	uxth	r4, r4
 8010cbe:	fbb4 f3f8 	udiv	r3, r4, r8
 8010cc2:	fb08 4413 	mls	r4, r8, r3, r4
 8010cc6:	b2a4      	uxth	r4, r4
 8010cc8:	4621      	mov	r1, r4
 8010cca:	a808      	add	r0, sp, #32
 8010ccc:	f000 fc84 	bl	80115d8 <SCHEDULE_GetCellInfo>
 8010cd0:	aa08      	add	r2, sp, #32
 8010cd2:	462b      	mov	r3, r5
 8010cd4:	6810      	ldr	r0, [r2, #0]
 8010cd6:	6851      	ldr	r1, [r2, #4]
 8010cd8:	469c      	mov	ip, r3
 8010cda:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010cde:	3208      	adds	r2, #8
 8010ce0:	4552      	cmp	r2, sl
 8010ce2:	4663      	mov	r3, ip
 8010ce4:	d1f6      	bne.n	8010cd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x52c>
 8010ce6:	f8da 0000 	ldr.w	r0, [sl]
 8010cea:	f8cc 0000 	str.w	r0, [ip]
 8010cee:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010cf2:	f8ac 2004 	strh.w	r2, [ip, #4]
 8010cf6:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
 8010cfa:	2b05      	cmp	r3, #5
 8010cfc:	d11f      	bne.n	8010d3e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x596>
 8010cfe:	4629      	mov	r1, r5
 8010d00:	a819      	add	r0, sp, #100	; 0x64
 8010d02:	9307      	str	r3, [sp, #28]
 8010d04:	f7f8 fae2 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8010d08:	9b07      	ldr	r3, [sp, #28]
 8010d0a:	b1c0      	cbz	r0, 8010d3e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x596>
 8010d0c:	e9cd 3b23 	strd	r3, fp, [sp, #140]	; 0x8c
 8010d10:	4a33      	ldr	r2, [pc, #204]	; (8010de0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x638>)
 8010d12:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8010d14:	4623      	mov	r3, r4
 8010d16:	4659      	mov	r1, fp
 8010d18:	f7fc fc88 	bl	800d62c <LOGGER_PrintLine>
 8010d1c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8010d20:	18fa      	adds	r2, r7, r3
 8010d22:	f8bd 10f4 	ldrh.w	r1, [sp, #244]	; 0xf4
 8010d26:	f8a2 1001 	strh.w	r1, [r2, #1]
 8010d2a:	f89d 10f6 	ldrb.w	r1, [sp, #246]	; 0xf6
 8010d2e:	f8a2 1003 	strh.w	r1, [r2, #3]
 8010d32:	2201      	movs	r2, #1
 8010d34:	4416      	add	r6, r2
 8010d36:	b2b6      	uxth	r6, r6
 8010d38:	2e04      	cmp	r6, #4
 8010d3a:	54fa      	strb	r2, [r7, r3]
 8010d3c:	d8af      	bhi.n	8010c9e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4f6>
 8010d3e:	f109 0901 	add.w	r9, r9, #1
 8010d42:	e7a5      	b.n	8010c90 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4e8>
 8010d44:	2300      	movs	r3, #0
 8010d46:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8010d4a:	a919      	add	r1, sp, #100	; 0x64
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f000 ffb3 	bl	8011cb8 <e1a4ca54296e83210dff3006a7ef95c89a4943bb>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	f43f ad4d 	beq.w	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010d58:	ac28      	add	r4, sp, #160	; 0xa0
 8010d5a:	2219      	movs	r2, #25
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f008 f90e 	bl	8018f80 <memset>
 8010d64:	2700      	movs	r7, #0
 8010d66:	eb07 0687 	add.w	r6, r7, r7, lsl #2
 8010d6a:	5dab      	ldrb	r3, [r5, r6]
 8010d6c:	b19b      	cbz	r3, 8010d96 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5ee>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	55a3      	strb	r3, [r4, r6]
 8010d72:	f7ff fc0f 	bl	8010594 <getRandomChannelOffset>
 8010d76:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8010d7a:	eb0d 0603 	add.w	r6, sp, r3
 8010d7e:	f1a6 0820 	sub.w	r8, r6, #32
 8010d82:	f826 0c5d 	strh.w	r0, [r6, #-93]
 8010d86:	f8b8 2003 	ldrh.w	r2, [r8, #3]
 8010d8a:	4282      	cmp	r2, r0
 8010d8c:	d011      	beq.n	8010db2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x60a>
 8010d8e:	f8b8 2001 	ldrh.w	r2, [r8, #1]
 8010d92:	f826 2c5f 	strh.w	r2, [r6, #-95]
 8010d96:	3701      	adds	r7, #1
 8010d98:	2f05      	cmp	r7, #5
 8010d9a:	d1e4      	bne.n	8010d66 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5be>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010da2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8010da6:	2301      	movs	r3, #1
 8010da8:	9400      	str	r4, [sp, #0]
 8010daa:	461a      	mov	r2, r3
 8010dac:	a919      	add	r1, sp, #100	; 0x64
 8010dae:	2003      	movs	r0, #3
 8010db0:	e77f      	b.n	8010cb2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x50a>
 8010db2:	f7ff fbef 	bl	8010594 <getRandomChannelOffset>
 8010db6:	e7e4      	b.n	8010d82 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5da>
 8010db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dbc:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8010dc0:	e517      	b.n	80107f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8010dc2:	bf00      	nop
 8010dc4:	0801c4c2 	.word	0x0801c4c2
 8010dc8:	0801c4f5 	.word	0x0801c4f5
 8010dcc:	0801c3ab 	.word	0x0801c3ab
 8010dd0:	0801c51b 	.word	0x0801c51b
 8010dd4:	0801c41b 	.word	0x0801c41b
 8010dd8:	0801c538 	.word	0x0801c538
 8010ddc:	0801c55d 	.word	0x0801c55d
 8010de0:	0801c583 	.word	0x0801c583

08010de4 <b72e07a39f6da27974c9147939138222c897d050>:
 8010de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010de6:	6881      	ldr	r1, [r0, #8]
 8010de8:	7905      	ldrb	r5, [r0, #4]
 8010dea:	4604      	mov	r4, r0
 8010dec:	4608      	mov	r0, r1
 8010dee:	f7f9 fe0d 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8010df2:	4b06      	ldr	r3, [pc, #24]	; (8010e0c <b72e07a39f6da27974c9147939138222c897d050+0x28>)
 8010df4:	9400      	str	r4, [sp, #0]
 8010df6:	4602      	mov	r2, r0
 8010df8:	2101      	movs	r1, #1
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	f7f9 fd34 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8010e00:	b003      	add	sp, #12
 8010e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e06:	f7ff bccf 	b.w	80107a8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>
 8010e0a:	bf00      	nop
 8010e0c:	08010de5 	.word	0x08010de5

08010e10 <d3d7042d854d8905136f03fa99a8893947aafdc7>:
 8010e10:	b510      	push	{r4, lr}
 8010e12:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <d3d7042d854d8905136f03fa99a8893947aafdc7+0x20>)
 8010e14:	2001      	movs	r0, #1
 8010e16:	681c      	ldr	r4, [r3, #0]
 8010e18:	f7f9 fc16 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8010e1c:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <d3d7042d854d8905136f03fa99a8893947aafdc7+0x24>)
 8010e1e:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 8010e22:	2300      	movs	r3, #0
 8010e24:	f884 0324 	strb.w	r0, [r4, #804]	; 0x324
 8010e28:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8010e2c:	bd10      	pop	{r4, pc}
 8010e2e:	bf00      	nop
 8010e30:	20000034 	.word	0x20000034
 8010e34:	00e4e1c0 	.word	0x00e4e1c0

08010e38 <530f39758cfcff95a518bf89df4776da9faf92b4>:
 8010e38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e3a:	4b0d      	ldr	r3, [pc, #52]	; (8010e70 <530f39758cfcff95a518bf89df4776da9faf92b4+0x38>)
 8010e3c:	4a0d      	ldr	r2, [pc, #52]	; (8010e74 <530f39758cfcff95a518bf89df4776da9faf92b4+0x3c>)
 8010e3e:	681c      	ldr	r4, [r3, #0]
 8010e40:	490d      	ldr	r1, [pc, #52]	; (8010e78 <530f39758cfcff95a518bf89df4776da9faf92b4+0x40>)
 8010e42:	4b0e      	ldr	r3, [pc, #56]	; (8010e7c <530f39758cfcff95a518bf89df4776da9faf92b4+0x44>)
 8010e44:	480e      	ldr	r0, [pc, #56]	; (8010e80 <530f39758cfcff95a518bf89df4776da9faf92b4+0x48>)
 8010e46:	f504 7548 	add.w	r5, r4, #800	; 0x320
 8010e4a:	9500      	str	r5, [sp, #0]
 8010e4c:	f001 fb98 	bl	8012580 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>
 8010e50:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
 8010e54:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
 8010e58:	4608      	mov	r0, r1
 8010e5a:	f7f9 fdd7 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8010e5e:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <530f39758cfcff95a518bf89df4776da9faf92b4+0x4c>)
 8010e60:	9500      	str	r5, [sp, #0]
 8010e62:	4602      	mov	r2, r0
 8010e64:	2101      	movs	r1, #1
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7f9 fcfe 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8010e6c:	b002      	add	sp, #8
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}
 8010e70:	20000034 	.word	0x20000034
 8010e74:	08010539 	.word	0x08010539
 8010e78:	08010535 	.word	0x08010535
 8010e7c:	080105b1 	.word	0x080105b1
 8010e80:	08010531 	.word	0x08010531
 8010e84:	08010de5 	.word	0x08010de5

08010e88 <53bc4933f2d7947a48dac4db096e7506c8e8667c>:
 8010e88:	b507      	push	{r0, r1, r2, lr}
 8010e8a:	4b08      	ldr	r3, [pc, #32]	; (8010eac <53bc4933f2d7947a48dac4db096e7506c8e8667c+0x24>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f893 0324 	ldrb.w	r0, [r3, #804]	; 0x324
 8010e92:	f7f9 fcfb 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8010e96:	2300      	movs	r3, #0
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f001 fb6e 	bl	8012580 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>
 8010ea4:	b003      	add	sp, #12
 8010ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010eaa:	bf00      	nop
 8010eac:	20000034 	.word	0x20000034

08010eb0 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>:
 8010eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010eb4:	b08f      	sub	sp, #60	; 0x3c
 8010eb6:	2210      	movs	r2, #16
 8010eb8:	2100      	movs	r1, #0
 8010eba:	4606      	mov	r6, r0
 8010ebc:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8010ec0:	f008 f85e 	bl	8018f80 <memset>
 8010ec4:	2306      	movs	r3, #6
 8010ec6:	2002      	movs	r0, #2
 8010ec8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010ecc:	f7f7 fa52 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8010ed0:	a904      	add	r1, sp, #16
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	f7ff fb32 	bl	801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 8010ed8:	4f1a      	ldr	r7, [pc, #104]	; (8010f44 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x94>)
 8010eda:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010ede:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8010ee2:	ac07      	add	r4, sp, #28
 8010ee4:	b306      	cbz	r6, 8010f28 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x78>
 8010ee6:	ae05      	add	r6, sp, #20
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f89d 9012 	ldrb.w	r9, [sp, #18]
 8010eee:	f7ff f9bd 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8010ef2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	9002      	str	r0, [sp, #8]
 8010efa:	f88d 100c 	strb.w	r1, [sp, #12]
 8010efe:	2202      	movs	r2, #2
 8010f00:	e9cd 9800 	strd	r9, r8, [sp]
 8010f04:	2103      	movs	r1, #3
 8010f06:	4628      	mov	r0, r5
 8010f08:	f000 f95e 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8010f0c:	2305      	movs	r3, #5
 8010f0e:	4a0e      	ldr	r2, [pc, #56]	; (8010f48 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x98>)
 8010f10:	f8cd 9000 	str.w	r9, [sp]
 8010f14:	e9cd 3707 	strd	r3, r7, [sp, #28]
 8010f18:	462b      	mov	r3, r5
 8010f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010f1e:	f7fc fb85 	bl	800d62c <LOGGER_PrintLine>
 8010f22:	b00f      	add	sp, #60	; 0x3c
 8010f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f28:	4641      	mov	r1, r8
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f000 faa8 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8010f30:	2305      	movs	r3, #5
 8010f32:	e9cd 3707 	strd	r3, r7, [sp, #28]
 8010f36:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4a03      	ldr	r2, [pc, #12]	; (8010f4c <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x9c>)
 8010f3e:	462b      	mov	r3, r5
 8010f40:	e7eb      	b.n	8010f1a <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x6a>
 8010f42:	bf00      	nop
 8010f44:	0801c3ab 	.word	0x0801c3ab
 8010f48:	0801c598 	.word	0x0801c598
 8010f4c:	0801c5bd 	.word	0x0801c5bd

08010f50 <a8d9689c957cda0372b2d720a687974af26c85d2>:
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	4b0f      	ldr	r3, [pc, #60]	; (8010f90 <a8d9689c957cda0372b2d720a687974af26c85d2+0x40>)
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	b150      	cbz	r0, 8010f6e <a8d9689c957cda0372b2d720a687974af26c85d2+0x1e>
 8010f58:	f8b2 4342 	ldrh.w	r4, [r2, #834]	; 0x342
 8010f5c:	b1a4      	cbz	r4, 8010f88 <a8d9689c957cda0372b2d720a687974af26c85d2+0x38>
 8010f5e:	f8b2 3340 	ldrh.w	r3, [r2, #832]	; 0x340
 8010f62:	f242 7510 	movw	r5, #10000	; 0x2710
 8010f66:	436b      	muls	r3, r5
 8010f68:	fbb3 f3f4 	udiv	r3, r3, r4
 8010f6c:	8003      	strh	r3, [r0, #0]
 8010f6e:	b151      	cbz	r1, 8010f86 <a8d9689c957cda0372b2d720a687974af26c85d2+0x36>
 8010f70:	f8b2 0346 	ldrh.w	r0, [r2, #838]	; 0x346
 8010f74:	b150      	cbz	r0, 8010f8c <a8d9689c957cda0372b2d720a687974af26c85d2+0x3c>
 8010f76:	f8b2 3344 	ldrh.w	r3, [r2, #836]	; 0x344
 8010f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f7e:	4353      	muls	r3, r2
 8010f80:	fbb3 f3f0 	udiv	r3, r3, r0
 8010f84:	800b      	strh	r3, [r1, #0]
 8010f86:	bd30      	pop	{r4, r5, pc}
 8010f88:	8004      	strh	r4, [r0, #0]
 8010f8a:	e7f0      	b.n	8010f6e <a8d9689c957cda0372b2d720a687974af26c85d2+0x1e>
 8010f8c:	8008      	strh	r0, [r1, #0]
 8010f8e:	e7fa      	b.n	8010f86 <a8d9689c957cda0372b2d720a687974af26c85d2+0x36>
 8010f90:	20000034 	.word	0x20000034

08010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4b2e      	ldr	r3, [pc, #184]	; (8011050 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0xbc>)
 8010f98:	460d      	mov	r5, r1
 8010f9a:	681c      	ldr	r4, [r3, #0]
 8010f9c:	b3d8      	cbz	r0, 8011016 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x82>
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	f7f7 fe4a 	bl	8008c38 <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 8010fa4:	b390      	cbz	r0, 801100c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8010fa6:	f8b4 2342 	ldrh.w	r2, [r4, #834]	; 0x342
 8010faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d108      	bne.n	8010fc4 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x30>
 8010fb2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010fb6:	f8a4 3342 	strh.w	r3, [r4, #834]	; 0x342
 8010fba:	f8b4 3340 	ldrh.w	r3, [r4, #832]	; 0x340
 8010fbe:	085b      	lsrs	r3, r3, #1
 8010fc0:	f8a4 3340 	strh.w	r3, [r4, #832]	; 0x340
 8010fc4:	f8b4 3342 	ldrh.w	r3, [r4, #834]	; 0x342
 8010fc8:	3301      	adds	r3, #1
 8010fca:	f8a4 3342 	strh.w	r3, [r4, #834]	; 0x342
 8010fce:	b14d      	cbz	r5, 8010fe4 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x50>
 8010fd0:	f8b4 3340 	ldrh.w	r3, [r4, #832]	; 0x340
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	f8a4 3340 	strh.w	r3, [r4, #832]	; 0x340
 8010fda:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8010fde:	3301      	adds	r3, #1
 8010fe0:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
 8010fe4:	f894 3321 	ldrb.w	r3, [r4, #801]	; 0x321
 8010fe8:	3301      	adds	r3, #1
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	2b10      	cmp	r3, #16
 8010fee:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8010ff2:	d10b      	bne.n	801100c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8010ff4:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8010ff8:	2b0c      	cmp	r3, #12
 8010ffa:	d908      	bls.n	801100e <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x7a>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8011002:	2300      	movs	r3, #0
 8011004:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8011008:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
 801100c:	bd38      	pop	{r3, r4, r5, pc}
 801100e:	2b01      	cmp	r3, #1
 8011010:	d8f7      	bhi.n	8011002 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x6e>
 8011012:	23ff      	movs	r3, #255	; 0xff
 8011014:	e7f3      	b.n	8010ffe <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x6a>
 8011016:	f8b4 2346 	ldrh.w	r2, [r4, #838]	; 0x346
 801101a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801101e:	429a      	cmp	r2, r3
 8011020:	d108      	bne.n	8011034 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0xa0>
 8011022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011026:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
 801102a:	f8b4 3344 	ldrh.w	r3, [r4, #836]	; 0x344
 801102e:	085b      	lsrs	r3, r3, #1
 8011030:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
 8011034:	f8b4 3346 	ldrh.w	r3, [r4, #838]	; 0x346
 8011038:	3301      	adds	r3, #1
 801103a:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
 801103e:	2d00      	cmp	r5, #0
 8011040:	d0e4      	beq.n	801100c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8011042:	f8b4 3344 	ldrh.w	r3, [r4, #836]	; 0x344
 8011046:	3301      	adds	r3, #1
 8011048:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
 801104c:	e7de      	b.n	801100c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 801104e:	bf00      	nop
 8011050:	20000034 	.word	0x20000034

08011054 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>:
 8011054:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011056:	4b11      	ldr	r3, [pc, #68]	; (801109c <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x48>)
 8011058:	681c      	ldr	r4, [r3, #0]
 801105a:	4615      	mov	r5, r2
 801105c:	f504 7648 	add.w	r6, r4, #800	; 0x320
 8011060:	b928      	cbnz	r0, 801106e <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x1a>
 8011062:	b921      	cbnz	r1, 801106e <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x1a>
 8011064:	f000 fc3c 	bl	80118e0 <1baccc0636a0c0164401b195d5e58f3f8da51c03>
 8011068:	4628      	mov	r0, r5
 801106a:	f000 fbb9 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 801106e:	f894 0324 	ldrb.w	r0, [r4, #804]	; 0x324
 8011072:	f7f9 fc0b 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8011076:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
 801107a:	f894 5324 	ldrb.w	r5, [r4, #804]	; 0x324
 801107e:	4608      	mov	r0, r1
 8011080:	f7f9 fcc4 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8011084:	4b06      	ldr	r3, [pc, #24]	; (80110a0 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x4c>)
 8011086:	9600      	str	r6, [sp, #0]
 8011088:	4602      	mov	r2, r0
 801108a:	2101      	movs	r1, #1
 801108c:	4628      	mov	r0, r5
 801108e:	f7f9 fbeb 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8011092:	b002      	add	sp, #8
 8011094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011098:	f7ff bb86 	b.w	80107a8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>
 801109c:	20000034 	.word	0x20000034
 80110a0:	08010de5 	.word	0x08010de5

080110a4 <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>:
 80110a4:	b513      	push	{r0, r1, r4, lr}
 80110a6:	4604      	mov	r4, r0
 80110a8:	2002      	movs	r0, #2
 80110aa:	f7f7 f963 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80110ae:	4669      	mov	r1, sp
 80110b0:	3001      	adds	r0, #1
 80110b2:	f7ff fa43 	bl	801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80110b6:	4620      	mov	r0, r4
 80110b8:	a901      	add	r1, sp, #4
 80110ba:	f7ff fa3f 	bl	801053c <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80110be:	f8bd 0000 	ldrh.w	r0, [sp]
 80110c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80110c6:	1ac3      	subs	r3, r0, r3
 80110c8:	4258      	negs	r0, r3
 80110ca:	4158      	adcs	r0, r3
 80110cc:	b002      	add	sp, #8
 80110ce:	bd10      	pop	{r4, pc}

080110d0 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>:
 80110d0:	b508      	push	{r3, lr}
 80110d2:	2228      	movs	r2, #40	; 0x28
 80110d4:	2100      	movs	r1, #0
 80110d6:	f007 ff53 	bl	8018f80 <memset>
 80110da:	bd08      	pop	{r3, pc}

080110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 80110dc:	3901      	subs	r1, #1
 80110de:	f100 0308 	add.w	r3, r0, #8
 80110e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110e6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80110ea:	4283      	cmp	r3, r0
 80110ec:	d1f9      	bne.n	80110e2 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 80110ee:	4770      	bx	lr

080110f0 <eea52b91d7a1bb91cb2c756cbb75125f1315d891>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <eea52b91d7a1bb91cb2c756cbb75125f1315d891+0x30>)
 80110f4:	681d      	ldr	r5, [r3, #0]
 80110f6:	f505 7453 	add.w	r4, r5, #844	; 0x34c
 80110fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80110fe:	2100      	movs	r1, #0
 8011100:	4620      	mov	r0, r4
 8011102:	f007 ff3d 	bl	8018f80 <memset>
 8011106:	230d      	movs	r3, #13
 8011108:	f8a5 3558 	strh.w	r3, [r5, #1368]	; 0x558
 801110c:	f205 5554 	addw	r5, r5, #1364	; 0x554
 8011110:	4620      	mov	r0, r4
 8011112:	3428      	adds	r4, #40	; 0x28
 8011114:	f7ff ffdc 	bl	80110d0 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 8011118:	42ac      	cmp	r4, r5
 801111a:	d1f9      	bne.n	8011110 <eea52b91d7a1bb91cb2c756cbb75125f1315d891+0x20>
 801111c:	bd38      	pop	{r3, r4, r5, pc}
 801111e:	bf00      	nop
 8011120:	20000034 	.word	0x20000034

08011124 <6759635076cb4c933592248ebd293b63832a7e9b>:
 8011124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011126:	ab02      	add	r3, sp, #8
 8011128:	e903 0003 	stmdb	r3, {r0, r1}
 801112c:	4b10      	ldr	r3, [pc, #64]	; (8011170 <6759635076cb4c933592248ebd293b63832a7e9b+0x4c>)
 801112e:	f8bd 5000 	ldrh.w	r5, [sp]
 8011132:	681c      	ldr	r4, [r3, #0]
 8011134:	f7f5 f852 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011138:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801113c:	b193      	cbz	r3, 8011164 <6759635076cb4c933592248ebd293b63832a7e9b+0x40>
 801113e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011142:	f8a4 355c 	strh.w	r3, [r4, #1372]	; 0x55c
 8011146:	2d0d      	cmp	r5, #13
 8011148:	f04f 0301 	mov.w	r3, #1
 801114c:	f8a4 555a 	strh.w	r5, [r4, #1370]	; 0x55a
 8011150:	bf98      	it	ls
 8011152:	f8a4 5558 	strhls.w	r5, [r4, #1368]	; 0x558
 8011156:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e
 801115a:	b003      	add	sp, #12
 801115c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011160:	f7f5 b85c 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011164:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e
 8011168:	230d      	movs	r3, #13
 801116a:	f8a4 3558 	strh.w	r3, [r4, #1368]	; 0x558
 801116e:	e7f4      	b.n	801115a <6759635076cb4c933592248ebd293b63832a7e9b+0x36>
 8011170:	20000034 	.word	0x20000034

08011174 <362182124631b23da2866810d52fbd55ab277bcc>:
 8011174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011176:	4b0b      	ldr	r3, [pc, #44]	; (80111a4 <362182124631b23da2866810d52fbd55ab277bcc+0x30>)
 8011178:	681d      	ldr	r5, [r3, #0]
 801117a:	4604      	mov	r4, r0
 801117c:	f7f5 f82e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011180:	f8d5 055a 	ldr.w	r0, [r5, #1370]	; 0x55a
 8011184:	f8b5 355e 	ldrh.w	r3, [r5, #1374]	; 0x55e
 8011188:	9000      	str	r0, [sp, #0]
 801118a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801118e:	f7f5 f845 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011192:	9800      	ldr	r0, [sp, #0]
 8011194:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011198:	6020      	str	r0, [r4, #0]
 801119a:	4620      	mov	r0, r4
 801119c:	80a3      	strh	r3, [r4, #4]
 801119e:	b003      	add	sp, #12
 80111a0:	bd30      	pop	{r4, r5, pc}
 80111a2:	bf00      	nop
 80111a4:	20000034 	.word	0x20000034

080111a8 <8342496502f723d085ab3cae139cfe28db3db880>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4b06      	ldr	r3, [pc, #24]	; (80111c4 <8342496502f723d085ab3cae139cfe28db3db880+0x1c>)
 80111ac:	681d      	ldr	r5, [r3, #0]
 80111ae:	f7f5 f815 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80111b2:	f895 455e 	ldrb.w	r4, [r5, #1374]	; 0x55e
 80111b6:	b10c      	cbz	r4, 80111bc <8342496502f723d085ab3cae139cfe28db3db880+0x14>
 80111b8:	f8b5 455a 	ldrh.w	r4, [r5, #1370]	; 0x55a
 80111bc:	f7f5 f82e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80111c0:	4620      	mov	r0, r4
 80111c2:	bd38      	pop	{r3, r4, r5, pc}
 80111c4:	20000034 	.word	0x20000034

080111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	469a      	mov	sl, r3
 80111ce:	b089      	sub	sp, #36	; 0x24
 80111d0:	4b9e      	ldr	r3, [pc, #632]	; (801144c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x284>)
 80111d2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80111d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80111d8:	f8d3 b000 	ldr.w	fp, [r3]
 80111dc:	4607      	mov	r7, r0
 80111de:	4688      	mov	r8, r1
 80111e0:	4616      	mov	r6, r2
 80111e2:	f7fc f9fd 	bl	800d5e0 <LOGGER_StartSection>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d030      	beq.n	801124c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x84>
 80111ea:	2305      	movs	r3, #5
 80111ec:	9306      	str	r3, [sp, #24]
 80111ee:	4b98      	ldr	r3, [pc, #608]	; (8011450 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 80111f0:	9307      	str	r3, [sp, #28]
 80111f2:	ab08      	add	r3, sp, #32
 80111f4:	e913 0003 	ldmdb	r3, {r0, r1}
 80111f8:	f7fc f9fa 	bl	800d5f0 <LOGGER_PrintHeader>
 80111fc:	a804      	add	r0, sp, #16
 80111fe:	1c69      	adds	r1, r5, #1
 8011200:	f7ff ff6c 	bl	80110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8011204:	4893      	ldr	r0, [pc, #588]	; (8011454 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x28c>)
 8011206:	f7fc f9d9 	bl	800d5bc <LOGGER_Print>
 801120a:	f1ba 0f00 	cmp.w	sl, #0
 801120e:	d03c      	beq.n	801128a <d34d9cc57da987921722d6f0e44d498b73ec396e+0xc2>
 8011210:	4891      	ldr	r0, [pc, #580]	; (8011458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 8011212:	f7fc f9d3 	bl	800d5bc <LOGGER_Print>
 8011216:	f1b8 0f04 	cmp.w	r8, #4
 801121a:	bf96      	itet	ls
 801121c:	4b8f      	ldrls	r3, [pc, #572]	; (801145c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 801121e:	4990      	ldrhi	r1, [pc, #576]	; (8011460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 8011220:	f853 1028 	ldrls.w	r1, [r3, r8, lsl #2]
 8011224:	488f      	ldr	r0, [pc, #572]	; (8011464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 8011226:	f8cd 9000 	str.w	r9, [sp]
 801122a:	2e05      	cmp	r6, #5
 801122c:	bf96      	itet	ls
 801122e:	4b8e      	ldrls	r3, [pc, #568]	; (8011468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 8011230:	4a8e      	ldrhi	r2, [pc, #568]	; (801146c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 8011232:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
 8011236:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801123a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801123e:	463b      	mov	r3, r7
 8011240:	f7fc f9bc 	bl	800d5bc <LOGGER_Print>
 8011244:	f7fc f9b2 	bl	800d5ac <LOGGER_PrintNL>
 8011248:	f7fc f9d0 	bl	800d5ec <LOGGER_EndSection>
 801124c:	f7f4 ffc6 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011250:	f8bb 3558 	ldrh.w	r3, [fp, #1368]	; 0x558
 8011254:	2228      	movs	r2, #40	; 0x28
 8011256:	fb02 b303 	mla	r3, r2, r3, fp
 801125a:	f50b 7453 	add.w	r4, fp, #844	; 0x34c
 801125e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8011262:	78e2      	ldrb	r2, [r4, #3]
 8011264:	b1aa      	cbz	r2, 8011292 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xca>
 8011266:	429c      	cmp	r4, r3
 8011268:	d311      	bcc.n	801128e <d34d9cc57da987921722d6f0e44d498b73ec396e+0xc6>
 801126a:	f7f4 ffd7 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801126e:	2303      	movs	r3, #3
 8011270:	9306      	str	r3, [sp, #24]
 8011272:	4b77      	ldr	r3, [pc, #476]	; (8011450 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 8011274:	9307      	str	r3, [sp, #28]
 8011276:	ab08      	add	r3, sp, #32
 8011278:	e913 0003 	ldmdb	r3, {r0, r1}
 801127c:	4a7c      	ldr	r2, [pc, #496]	; (8011470 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a8>)
 801127e:	f7fc f9d5 	bl	800d62c <LOGGER_PrintLine>
 8011282:	2000      	movs	r0, #0
 8011284:	b009      	add	sp, #36	; 0x24
 8011286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128a:	487a      	ldr	r0, [pc, #488]	; (8011474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 801128c:	e7c1      	b.n	8011212 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x4a>
 801128e:	3428      	adds	r4, #40	; 0x28
 8011290:	e7e7      	b.n	8011262 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x9a>
 8011292:	429c      	cmp	r4, r3
 8011294:	d2e9      	bcs.n	801126a <d34d9cc57da987921722d6f0e44d498b73ec396e+0xa2>
 8011296:	4620      	mov	r0, r4
 8011298:	f7ff ff1a 	bl	80110d0 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 801129c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80112a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80112a2:	61e2      	str	r2, [r4, #28]
 80112a4:	f884 3020 	strb.w	r3, [r4, #32]
 80112a8:	8027      	strh	r7, [r4, #0]
 80112aa:	f884 8003 	strb.w	r8, [r4, #3]
 80112ae:	7126      	strb	r6, [r4, #4]
 80112b0:	f884 a005 	strb.w	sl, [r4, #5]
 80112b4:	f884 9002 	strb.w	r9, [r4, #2]
 80112b8:	462b      	mov	r3, r5
 80112ba:	1de2      	adds	r2, r4, #7
 80112bc:	f105 0110 	add.w	r1, r5, #16
 80112c0:	f853 0b04 	ldr.w	r0, [r3], #4
 80112c4:	f842 0b04 	str.w	r0, [r2], #4
 80112c8:	428b      	cmp	r3, r1
 80112ca:	d1f9      	bne.n	80112c0 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xf8>
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	7013      	strb	r3, [r2, #0]
 80112d0:	f8db 9554 	ldr.w	r9, [fp, #1364]	; 0x554
 80112d4:	f1b9 0f00 	cmp.w	r9, #0
 80112d8:	d116      	bne.n	8011308 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 80112da:	6264      	str	r4, [r4, #36]	; 0x24
 80112dc:	f8cb 4554 	str.w	r4, [fp, #1364]	; 0x554
 80112e0:	2e05      	cmp	r6, #5
 80112e2:	d10d      	bne.n	8011300 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x138>
 80112e4:	f1b8 0f02 	cmp.w	r8, #2
 80112e8:	d10a      	bne.n	8011300 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x138>
 80112ea:	4628      	mov	r0, r5
 80112ec:	a906      	add	r1, sp, #24
 80112ee:	f800 8b01 	strb.w	r8, [r0], #1
 80112f2:	f7f7 fe63 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 80112f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80112fa:	2101      	movs	r1, #1
 80112fc:	f7f7 fe98 	bl	8009030 <ca04a83f27bd1933b342c8619a464a402518176b>
 8011300:	f7f4 ff8c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011304:	2001      	movs	r0, #1
 8011306:	e7bd      	b.n	8011284 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xbc>
 8011308:	46cb      	mov	fp, r9
 801130a:	f8d9 9024 	ldr.w	r9, [r9, #36]	; 0x24
 801130e:	f8bb 3000 	ldrh.w	r3, [fp]
 8011312:	f8b9 2000 	ldrh.w	r2, [r9]
 8011316:	42bb      	cmp	r3, r7
 8011318:	d208      	bcs.n	801132c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x164>
 801131a:	4297      	cmp	r7, r2
 801131c:	d301      	bcc.n	8011322 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 801131e:	4293      	cmp	r3, r2
 8011320:	d3f2      	bcc.n	8011308 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 8011322:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
 8011326:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801132a:	e7d9      	b.n	80112e0 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x118>
 801132c:	4297      	cmp	r7, r2
 801132e:	d201      	bcs.n	8011334 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x16c>
 8011330:	4293      	cmp	r3, r2
 8011332:	d2f6      	bcs.n	8011322 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 8011334:	42bb      	cmp	r3, r7
 8011336:	d1e7      	bne.n	8011308 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 8011338:	2e02      	cmp	r6, #2
 801133a:	d140      	bne.n	80113be <d34d9cc57da987921722d6f0e44d498b73ec396e+0x1f6>
 801133c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8011340:	2b03      	cmp	r3, #3
 8011342:	d144      	bne.n	80113ce <d34d9cc57da987921722d6f0e44d498b73ec396e+0x206>
 8011344:	2301      	movs	r3, #1
 8011346:	71a3      	strb	r3, [r4, #6]
 8011348:	f88b 3006 	strb.w	r3, [fp, #6]
 801134c:	f7fc f948 	bl	800d5e0 <LOGGER_StartSection>
 8011350:	2800      	cmp	r0, #0
 8011352:	d0e6      	beq.n	8011322 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 8011354:	2305      	movs	r3, #5
 8011356:	9306      	str	r3, [sp, #24]
 8011358:	4b3d      	ldr	r3, [pc, #244]	; (8011450 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 801135a:	9307      	str	r3, [sp, #28]
 801135c:	ab08      	add	r3, sp, #32
 801135e:	e913 0003 	ldmdb	r3, {r0, r1}
 8011362:	f7fc f945 	bl	800d5f0 <LOGGER_PrintHeader>
 8011366:	a804      	add	r0, sp, #16
 8011368:	f104 0108 	add.w	r1, r4, #8
 801136c:	f7ff feb6 	bl	80110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8011370:	4841      	ldr	r0, [pc, #260]	; (8011478 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2b0>)
 8011372:	f7fc f923 	bl	800d5bc <LOGGER_Print>
 8011376:	f1ba 0f00 	cmp.w	sl, #0
 801137a:	d026      	beq.n	80113ca <d34d9cc57da987921722d6f0e44d498b73ec396e+0x202>
 801137c:	4836      	ldr	r0, [pc, #216]	; (8011458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 801137e:	f7fc f91d 	bl	800d5bc <LOGGER_Print>
 8011382:	78e3      	ldrb	r3, [r4, #3]
 8011384:	2b04      	cmp	r3, #4
 8011386:	bf96      	itet	ls
 8011388:	4a34      	ldrls	r2, [pc, #208]	; (801145c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 801138a:	4f35      	ldrhi	r7, [pc, #212]	; (8011460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 801138c:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
 8011390:	7923      	ldrb	r3, [r4, #4]
 8011392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011396:	2b05      	cmp	r3, #5
 8011398:	bf96      	itet	ls
 801139a:	4a33      	ldrls	r2, [pc, #204]	; (8011468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 801139c:	4a33      	ldrhi	r2, [pc, #204]	; (801146c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 801139e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80113a2:	8823      	ldrh	r3, [r4, #0]
 80113a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113a8:	78a1      	ldrb	r1, [r4, #2]
 80113aa:	482e      	ldr	r0, [pc, #184]	; (8011464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 80113ac:	9100      	str	r1, [sp, #0]
 80113ae:	4639      	mov	r1, r7
 80113b0:	f7fc f904 	bl	800d5bc <LOGGER_Print>
 80113b4:	f7fc f8fa 	bl	800d5ac <LOGGER_PrintNL>
 80113b8:	f7fc f918 	bl	800d5ec <LOGGER_EndSection>
 80113bc:	e7b1      	b.n	8011322 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 80113be:	2e03      	cmp	r6, #3
 80113c0:	d105      	bne.n	80113ce <d34d9cc57da987921722d6f0e44d498b73ec396e+0x206>
 80113c2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80113c6:	2b02      	cmp	r3, #2
 80113c8:	e7bb      	b.n	8011342 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x17a>
 80113ca:	482a      	ldr	r0, [pc, #168]	; (8011474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 80113cc:	e7d7      	b.n	801137e <d34d9cc57da987921722d6f0e44d498b73ec396e+0x1b6>
 80113ce:	f7fc f907 	bl	800d5e0 <LOGGER_StartSection>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d032      	beq.n	801143c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x274>
 80113d6:	2303      	movs	r3, #3
 80113d8:	9306      	str	r3, [sp, #24]
 80113da:	4b1d      	ldr	r3, [pc, #116]	; (8011450 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 80113dc:	9307      	str	r3, [sp, #28]
 80113de:	ab08      	add	r3, sp, #32
 80113e0:	e913 0003 	ldmdb	r3, {r0, r1}
 80113e4:	f7fc f904 	bl	800d5f0 <LOGGER_PrintHeader>
 80113e8:	a804      	add	r0, sp, #16
 80113ea:	f104 0108 	add.w	r1, r4, #8
 80113ee:	f7ff fe75 	bl	80110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80113f2:	4822      	ldr	r0, [pc, #136]	; (801147c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2b4>)
 80113f4:	f7fc f8e2 	bl	800d5bc <LOGGER_Print>
 80113f8:	f1ba 0f00 	cmp.w	sl, #0
 80113fc:	d024      	beq.n	8011448 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x280>
 80113fe:	4816      	ldr	r0, [pc, #88]	; (8011458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 8011400:	f7fc f8dc 	bl	800d5bc <LOGGER_Print>
 8011404:	78e3      	ldrb	r3, [r4, #3]
 8011406:	2b04      	cmp	r3, #4
 8011408:	bf96      	itet	ls
 801140a:	4a14      	ldrls	r2, [pc, #80]	; (801145c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 801140c:	4914      	ldrhi	r1, [pc, #80]	; (8011460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 801140e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8011412:	7923      	ldrb	r3, [r4, #4]
 8011414:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8011418:	2b05      	cmp	r3, #5
 801141a:	bf96      	itet	ls
 801141c:	4a12      	ldrls	r2, [pc, #72]	; (8011468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 801141e:	4a13      	ldrhi	r2, [pc, #76]	; (801146c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 8011420:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8011424:	8823      	ldrh	r3, [r4, #0]
 8011426:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801142a:	78a0      	ldrb	r0, [r4, #2]
 801142c:	9000      	str	r0, [sp, #0]
 801142e:	480d      	ldr	r0, [pc, #52]	; (8011464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 8011430:	f7fc f8c4 	bl	800d5bc <LOGGER_Print>
 8011434:	f7fc f8ba 	bl	800d5ac <LOGGER_PrintNL>
 8011438:	f7fc f8d8 	bl	800d5ec <LOGGER_EndSection>
 801143c:	4620      	mov	r0, r4
 801143e:	f7ff fe47 	bl	80110d0 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 8011442:	f7f4 feeb 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011446:	e71c      	b.n	8011282 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xba>
 8011448:	480a      	ldr	r0, [pc, #40]	; (8011474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 801144a:	e7d9      	b.n	8011400 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x238>
 801144c:	20000034 	.word	0x20000034
 8011450:	0801c664 	.word	0x0801c664
 8011454:	0801c66d 	.word	0x0801c66d
 8011458:	0801c685 	.word	0x0801c685
 801145c:	0801c860 	.word	0x0801c860
 8011460:	0801c658 	.word	0x0801c658
 8011464:	0801c68c 	.word	0x0801c68c
 8011468:	0801c844 	.word	0x0801c844
 801146c:	0801c660 	.word	0x0801c660
 8011470:	0801c6bf 	.word	0x0801c6bf
 8011474:	0801c682 	.word	0x0801c682
 8011478:	0801c6d3 	.word	0x0801c6d3
 801147c:	0801c6eb 	.word	0x0801c6eb

08011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>:
 8011480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011484:	4b4f      	ldr	r3, [pc, #316]	; (80115c4 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x144>)
 8011486:	4680      	mov	r8, r0
 8011488:	681d      	ldr	r5, [r3, #0]
 801148a:	460f      	mov	r7, r1
 801148c:	f7fc f8a8 	bl	800d5e0 <LOGGER_StartSection>
 8011490:	b1b0      	cbz	r0, 80114c0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x40>
 8011492:	2305      	movs	r3, #5
 8011494:	9302      	str	r3, [sp, #8]
 8011496:	4b4c      	ldr	r3, [pc, #304]	; (80115c8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 8011498:	9303      	str	r3, [sp, #12]
 801149a:	ab04      	add	r3, sp, #16
 801149c:	e913 0003 	ldmdb	r3, {r0, r1}
 80114a0:	f7fc f8a6 	bl	800d5f0 <LOGGER_PrintHeader>
 80114a4:	1c79      	adds	r1, r7, #1
 80114a6:	4668      	mov	r0, sp
 80114a8:	f7ff fe18 	bl	80110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80114ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114b0:	4846      	ldr	r0, [pc, #280]	; (80115cc <77238aa43a8b504c643ddf656419f5fe633c06fa+0x14c>)
 80114b2:	4641      	mov	r1, r8
 80114b4:	f7fc f882 	bl	800d5bc <LOGGER_Print>
 80114b8:	f7fc f878 	bl	800d5ac <LOGGER_PrintNL>
 80114bc:	f7fc f896 	bl	800d5ec <LOGGER_EndSection>
 80114c0:	f7f4 fe8c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80114c4:	f505 7453 	add.w	r4, r5, #844	; 0x34c
 80114c8:	46a1      	mov	r9, r4
 80114ca:	f04f 0a28 	mov.w	sl, #40	; 0x28
 80114ce:	f8b5 3558 	ldrh.w	r3, [r5, #1368]	; 0x558
 80114d2:	fb0a 9303 	mla	r3, sl, r3, r9
 80114d6:	429c      	cmp	r4, r3
 80114d8:	d211      	bcs.n	80114fe <77238aa43a8b504c643ddf656419f5fe633c06fa+0x7e>
 80114da:	8823      	ldrh	r3, [r4, #0]
 80114dc:	4543      	cmp	r3, r8
 80114de:	d001      	beq.n	80114e4 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x64>
 80114e0:	3428      	adds	r4, #40	; 0x28
 80114e2:	e7f4      	b.n	80114ce <77238aa43a8b504c643ddf656419f5fe633c06fa+0x4e>
 80114e4:	1de1      	adds	r1, r4, #7
 80114e6:	4638      	mov	r0, r7
 80114e8:	f7f7 fef0 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80114ec:	4606      	mov	r6, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d0f6      	beq.n	80114e0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x60>
 80114f2:	f8b5 3558 	ldrh.w	r3, [r5, #1368]	; 0x558
 80114f6:	fb0a 9303 	mla	r3, sl, r3, r9
 80114fa:	429c      	cmp	r4, r3
 80114fc:	d30d      	bcc.n	801151a <77238aa43a8b504c643ddf656419f5fe633c06fa+0x9a>
 80114fe:	f7f4 fe8d 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011502:	2301      	movs	r3, #1
 8011504:	9302      	str	r3, [sp, #8]
 8011506:	4a32      	ldr	r2, [pc, #200]	; (80115d0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x150>)
 8011508:	4b2f      	ldr	r3, [pc, #188]	; (80115c8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 801150a:	9303      	str	r3, [sp, #12]
 801150c:	ab04      	add	r3, sp, #16
 801150e:	e913 0003 	ldmdb	r3, {r0, r1}
 8011512:	f7fc f88b 	bl	800d62c <LOGGER_PrintLine>
 8011516:	2600      	movs	r6, #0
 8011518:	e02b      	b.n	8011572 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xf2>
 801151a:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 801151e:	b133      	cbz	r3, 801152e <77238aa43a8b504c643ddf656419f5fe633c06fa+0xae>
 8011520:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011522:	42a2      	cmp	r2, r4
 8011524:	d129      	bne.n	801157a <77238aa43a8b504c643ddf656419f5fe633c06fa+0xfa>
 8011526:	2300      	movs	r3, #0
 8011528:	6263      	str	r3, [r4, #36]	; 0x24
 801152a:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
 801152e:	7923      	ldrb	r3, [r4, #4]
 8011530:	2b05      	cmp	r3, #5
 8011532:	d119      	bne.n	8011568 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 8011534:	78e3      	ldrb	r3, [r4, #3]
 8011536:	2b02      	cmp	r3, #2
 8011538:	d116      	bne.n	8011568 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 801153a:	230c      	movs	r3, #12
 801153c:	f895 2530 	ldrb.w	r2, [r5, #1328]	; 0x530
 8011540:	2a05      	cmp	r2, #5
 8011542:	d103      	bne.n	801154c <77238aa43a8b504c643ddf656419f5fe633c06fa+0xcc>
 8011544:	f895 252f 	ldrb.w	r2, [r5, #1327]	; 0x52f
 8011548:	2a02      	cmp	r2, #2
 801154a:	d00d      	beq.n	8011568 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 801154c:	3b01      	subs	r3, #1
 801154e:	1c5a      	adds	r2, r3, #1
 8011550:	f1a5 0528 	sub.w	r5, r5, #40	; 0x28
 8011554:	d1f2      	bne.n	801153c <77238aa43a8b504c643ddf656419f5fe633c06fa+0xbc>
 8011556:	a902      	add	r1, sp, #8
 8011558:	1c78      	adds	r0, r7, #1
 801155a:	f7f7 fd2f 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 801155e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8011562:	2100      	movs	r1, #0
 8011564:	f7f7 fd64 	bl	8009030 <ca04a83f27bd1933b342c8619a464a402518176b>
 8011568:	4620      	mov	r0, r4
 801156a:	f7ff fdb1 	bl	80110d0 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 801156e:	f7f4 fe55 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011572:	4630      	mov	r0, r6
 8011574:	b004      	add	sp, #16
 8011576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801157a:	210d      	movs	r1, #13
 801157c:	4618      	mov	r0, r3
 801157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011580:	42a3      	cmp	r3, r4
 8011582:	d009      	beq.n	8011598 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x118>
 8011584:	3901      	subs	r1, #1
 8011586:	d1f9      	bne.n	801157c <77238aa43a8b504c643ddf656419f5fe633c06fa+0xfc>
 8011588:	f7f4 fe48 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801158c:	2301      	movs	r3, #1
 801158e:	9302      	str	r3, [sp, #8]
 8011590:	4b0d      	ldr	r3, [pc, #52]	; (80115c8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 8011592:	4a10      	ldr	r2, [pc, #64]	; (80115d4 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x154>)
 8011594:	9303      	str	r3, [sp, #12]
 8011596:	e7b9      	b.n	801150c <77238aa43a8b504c643ddf656419f5fe633c06fa+0x8c>
 8011598:	6242      	str	r2, [r0, #36]	; 0x24
 801159a:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 801159e:	42a3      	cmp	r3, r4
 80115a0:	d101      	bne.n	80115a6 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x126>
 80115a2:	f8c5 2554 	str.w	r2, [r5, #1364]	; 0x554
 80115a6:	462b      	mov	r3, r5
 80115a8:	f505 7202 	add.w	r2, r5, #520	; 0x208
 80115ac:	2100      	movs	r1, #0
 80115ae:	f8b3 c34c 	ldrh.w	ip, [r3, #844]	; 0x34c
 80115b2:	8820      	ldrh	r0, [r4, #0]
 80115b4:	4584      	cmp	ip, r0
 80115b6:	bf08      	it	eq
 80115b8:	f883 1352 	strbeq.w	r1, [r3, #850]	; 0x352
 80115bc:	3328      	adds	r3, #40	; 0x28
 80115be:	4293      	cmp	r3, r2
 80115c0:	d1f5      	bne.n	80115ae <77238aa43a8b504c643ddf656419f5fe633c06fa+0x12e>
 80115c2:	e7b4      	b.n	801152e <77238aa43a8b504c643ddf656419f5fe633c06fa+0xae>
 80115c4:	20000034 	.word	0x20000034
 80115c8:	0801c664 	.word	0x0801c664
 80115cc:	0801c6fc 	.word	0x0801c6fc
 80115d0:	0801c723 	.word	0x0801c723
 80115d4:	0801c736 	.word	0x0801c736

080115d8 <SCHEDULE_GetCellInfo>:
 80115d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115dc:	4b39      	ldr	r3, [pc, #228]	; (80116c4 <SCHEDULE_GetCellInfo+0xec>)
 80115de:	b088      	sub	sp, #32
 80115e0:	681c      	ldr	r4, [r3, #0]
 80115e2:	221e      	movs	r2, #30
 80115e4:	4605      	mov	r5, r0
 80115e6:	460e      	mov	r6, r1
 80115e8:	4668      	mov	r0, sp
 80115ea:	2100      	movs	r1, #0
 80115ec:	f007 fcc8 	bl	8018f80 <memset>
 80115f0:	f7f4 fdf4 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80115f4:	f8b4 2558 	ldrh.w	r2, [r4, #1368]	; 0x558
 80115f8:	2128      	movs	r1, #40	; 0x28
 80115fa:	f504 7353 	add.w	r3, r4, #844	; 0x34c
 80115fe:	fb01 4402 	mla	r4, r1, r2, r4
 8011602:	f504 7453 	add.w	r4, r4, #844	; 0x34c
 8011606:	429c      	cmp	r4, r3
 8011608:	d802      	bhi.n	8011610 <SCHEDULE_GetCellInfo+0x38>
 801160a:	f7f4 fe07 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801160e:	e037      	b.n	8011680 <SCHEDULE_GetCellInfo+0xa8>
 8011610:	881a      	ldrh	r2, [r3, #0]
 8011612:	42b2      	cmp	r2, r6
 8011614:	d153      	bne.n	80116be <SCHEDULE_GetCellInfo+0xe6>
 8011616:	799a      	ldrb	r2, [r3, #6]
 8011618:	f893 a003 	ldrb.w	sl, [r3, #3]
 801161c:	2a00      	cmp	r2, #0
 801161e:	d143      	bne.n	80116a8 <SCHEDULE_GetCellInfo+0xd0>
 8011620:	791f      	ldrb	r7, [r3, #4]
 8011622:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011626:	8b1c      	ldrh	r4, [r3, #24]
 8011628:	f88d 201b 	strb.w	r2, [sp, #27]
 801162c:	8b5a      	ldrh	r2, [r3, #26]
 801162e:	69d8      	ldr	r0, [r3, #28]
 8011630:	f893 9005 	ldrb.w	r9, [r3, #5]
 8011634:	f893 8002 	ldrb.w	r8, [r3, #2]
 8011638:	f8cd 0017 	str.w	r0, [sp, #23]
 801163c:	42a2      	cmp	r2, r4
 801163e:	d935      	bls.n	80116ac <SCHEDULE_GetCellInfo+0xd4>
 8011640:	835c      	strh	r4, [r3, #26]
 8011642:	f242 7410 	movw	r4, #10000	; 0x2710
 8011646:	1dda      	adds	r2, r3, #7
 8011648:	46ec      	mov	ip, sp
 801164a:	3317      	adds	r3, #23
 801164c:	6810      	ldr	r0, [r2, #0]
 801164e:	6851      	ldr	r1, [r2, #4]
 8011650:	46e6      	mov	lr, ip
 8011652:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8011656:	3208      	adds	r2, #8
 8011658:	429a      	cmp	r2, r3
 801165a:	46f4      	mov	ip, lr
 801165c:	d1f6      	bne.n	801164c <SCHEDULE_GetCellInfo+0x74>
 801165e:	7813      	ldrb	r3, [r2, #0]
 8011660:	f88e 3000 	strb.w	r3, [lr]
 8011664:	f7f4 fdda 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011668:	f88d a011 	strb.w	sl, [sp, #17]
 801166c:	f88d 7012 	strb.w	r7, [sp, #18]
 8011670:	f88d 9013 	strb.w	r9, [sp, #19]
 8011674:	f8ad 6014 	strh.w	r6, [sp, #20]
 8011678:	f88d 8016 	strb.w	r8, [sp, #22]
 801167c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011680:	466b      	mov	r3, sp
 8011682:	462a      	mov	r2, r5
 8011684:	ae06      	add	r6, sp, #24
 8011686:	461c      	mov	r4, r3
 8011688:	cc03      	ldmia	r4!, {r0, r1}
 801168a:	42b4      	cmp	r4, r6
 801168c:	6010      	str	r0, [r2, #0]
 801168e:	6051      	str	r1, [r2, #4]
 8011690:	4623      	mov	r3, r4
 8011692:	f102 0208 	add.w	r2, r2, #8
 8011696:	d1f6      	bne.n	8011686 <SCHEDULE_GetCellInfo+0xae>
 8011698:	6820      	ldr	r0, [r4, #0]
 801169a:	6010      	str	r0, [r2, #0]
 801169c:	88a3      	ldrh	r3, [r4, #4]
 801169e:	8093      	strh	r3, [r2, #4]
 80116a0:	4628      	mov	r0, r5
 80116a2:	b008      	add	sp, #32
 80116a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a8:	2704      	movs	r7, #4
 80116aa:	e7ba      	b.n	8011622 <SCHEDULE_GetCellInfo+0x4a>
 80116ac:	2c00      	cmp	r4, #0
 80116ae:	d0ca      	beq.n	8011646 <SCHEDULE_GetCellInfo+0x6e>
 80116b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80116b4:	434a      	muls	r2, r1
 80116b6:	fbb2 f2f4 	udiv	r2, r2, r4
 80116ba:	b294      	uxth	r4, r2
 80116bc:	e7c3      	b.n	8011646 <SCHEDULE_GetCellInfo+0x6e>
 80116be:	3328      	adds	r3, #40	; 0x28
 80116c0:	e7a1      	b.n	8011606 <SCHEDULE_GetCellInfo+0x2e>
 80116c2:	bf00      	nop
 80116c4:	20000034 	.word	0x20000034

080116c8 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	4b0e      	ldr	r3, [pc, #56]	; (8011704 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x3c>)
 80116cc:	681d      	ldr	r5, [r3, #0]
 80116ce:	4604      	mov	r4, r0
 80116d0:	f7f4 fd84 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80116d4:	f8b5 355a 	ldrh.w	r3, [r5, #1370]	; 0x55a
 80116d8:	42a3      	cmp	r3, r4
 80116da:	d803      	bhi.n	80116e4 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x1c>
 80116dc:	f7f4 fd9e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80116e0:	2000      	movs	r0, #0
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	f8d5 2554 	ldr.w	r2, [r5, #1364]	; 0x554
 80116e8:	b91a      	cbnz	r2, 80116f2 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x2a>
 80116ea:	f7f4 fd97 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80116ee:	2001      	movs	r0, #1
 80116f0:	e7f7      	b.n	80116e2 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x1a>
 80116f2:	4613      	mov	r3, r2
 80116f4:	8819      	ldrh	r1, [r3, #0]
 80116f6:	42a1      	cmp	r1, r4
 80116f8:	d0f0      	beq.n	80116dc <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x14>
 80116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d1f9      	bne.n	80116f4 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x2c>
 8011700:	e7f3      	b.n	80116ea <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x22>
 8011702:	bf00      	nop
 8011704:	20000034 	.word	0x20000034

08011708 <a332c320f50553856ddcee95ff765027b8f3e118>:
 8011708:	b510      	push	{r4, lr}
 801170a:	4b09      	ldr	r3, [pc, #36]	; (8011730 <a332c320f50553856ddcee95ff765027b8f3e118+0x28>)
 801170c:	681c      	ldr	r4, [r3, #0]
 801170e:	f7f4 fd65 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011712:	4623      	mov	r3, r4
 8011714:	f504 7202 	add.w	r2, r4, #520	; 0x208
 8011718:	2400      	movs	r4, #0
 801171a:	f893 134f 	ldrb.w	r1, [r3, #847]	; 0x34f
 801171e:	b901      	cbnz	r1, 8011722 <a332c320f50553856ddcee95ff765027b8f3e118+0x1a>
 8011720:	3401      	adds	r4, #1
 8011722:	3328      	adds	r3, #40	; 0x28
 8011724:	4293      	cmp	r3, r2
 8011726:	d1f8      	bne.n	801171a <a332c320f50553856ddcee95ff765027b8f3e118+0x12>
 8011728:	f7f4 fd78 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 801172c:	b2e0      	uxtb	r0, r4
 801172e:	bd10      	pop	{r4, pc}
 8011730:	20000034 	.word	0x20000034

08011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>:
 8011734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011736:	4b0f      	ldr	r3, [pc, #60]	; (8011774 <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x40>)
 8011738:	4607      	mov	r7, r0
 801173a:	681d      	ldr	r5, [r3, #0]
 801173c:	f7f4 fd4e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011740:	f205 3453 	addw	r4, r5, #851	; 0x353
 8011744:	2600      	movs	r6, #0
 8011746:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 801174a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 801174e:	2b05      	cmp	r3, #5
 8011750:	d109      	bne.n	8011766 <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 8011752:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d105      	bne.n	8011766 <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 801175a:	4639      	mov	r1, r7
 801175c:	4620      	mov	r0, r4
 801175e:	f7f7 fdb5 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8011762:	b100      	cbz	r0, 8011766 <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 8011764:	3601      	adds	r6, #1
 8011766:	3428      	adds	r4, #40	; 0x28
 8011768:	42ac      	cmp	r4, r5
 801176a:	d1ee      	bne.n	801174a <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x16>
 801176c:	f7f4 fd56 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011770:	b2f0      	uxtb	r0, r6
 8011772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011774:	20000034 	.word	0x20000034

08011778 <ee504f8deafedb03386eec1c989207132bd15110>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	4b18      	ldr	r3, [pc, #96]	; (80117dc <ee504f8deafedb03386eec1c989207132bd15110+0x64>)
 801177c:	4607      	mov	r7, r0
 801177e:	681c      	ldr	r4, [r3, #0]
 8011780:	f7f4 fd2c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011784:	b1cf      	cbz	r7, 80117ba <ee504f8deafedb03386eec1c989207132bd15110+0x42>
 8011786:	f204 3653 	addw	r6, r4, #851	; 0x353
 801178a:	2500      	movs	r5, #0
 801178c:	f204 545b 	addw	r4, r4, #1371	; 0x55b
 8011790:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8011794:	2b05      	cmp	r3, #5
 8011796:	d109      	bne.n	80117ac <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 8011798:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 801179c:	2b02      	cmp	r3, #2
 801179e:	d105      	bne.n	80117ac <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 80117a0:	4639      	mov	r1, r7
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7f7 fd92 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80117a8:	b100      	cbz	r0, 80117ac <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 80117aa:	3501      	adds	r5, #1
 80117ac:	3628      	adds	r6, #40	; 0x28
 80117ae:	42a6      	cmp	r6, r4
 80117b0:	d1ee      	bne.n	8011790 <ee504f8deafedb03386eec1c989207132bd15110+0x18>
 80117b2:	f7f4 fd33 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80117b6:	4628      	mov	r0, r5
 80117b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ba:	4623      	mov	r3, r4
 80117bc:	f504 7202 	add.w	r2, r4, #520	; 0x208
 80117c0:	463d      	mov	r5, r7
 80117c2:	f893 1350 	ldrb.w	r1, [r3, #848]	; 0x350
 80117c6:	2905      	cmp	r1, #5
 80117c8:	d104      	bne.n	80117d4 <ee504f8deafedb03386eec1c989207132bd15110+0x5c>
 80117ca:	f893 134f 	ldrb.w	r1, [r3, #847]	; 0x34f
 80117ce:	2902      	cmp	r1, #2
 80117d0:	bf08      	it	eq
 80117d2:	3501      	addeq	r5, #1
 80117d4:	3328      	adds	r3, #40	; 0x28
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d1f3      	bne.n	80117c2 <ee504f8deafedb03386eec1c989207132bd15110+0x4a>
 80117da:	e7ea      	b.n	80117b2 <ee504f8deafedb03386eec1c989207132bd15110+0x3a>
 80117dc:	20000034 	.word	0x20000034

080117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>:
 80117e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80117e2:	4b19      	ldr	r3, [pc, #100]	; (8011848 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x68>)
 80117e4:	4605      	mov	r5, r0
 80117e6:	681e      	ldr	r6, [r3, #0]
 80117e8:	f7fb fefa 	bl	800d5e0 <LOGGER_StartSection>
 80117ec:	b1a8      	cbz	r0, 801181a <b3b14ea0535ea7766b14c305344e9dd58438abce+0x3a>
 80117ee:	2305      	movs	r3, #5
 80117f0:	9302      	str	r3, [sp, #8]
 80117f2:	4b16      	ldr	r3, [pc, #88]	; (801184c <b3b14ea0535ea7766b14c305344e9dd58438abce+0x6c>)
 80117f4:	9303      	str	r3, [sp, #12]
 80117f6:	ab04      	add	r3, sp, #16
 80117f8:	e913 0003 	ldmdb	r3, {r0, r1}
 80117fc:	f7fb fef8 	bl	800d5f0 <LOGGER_PrintHeader>
 8011800:	1c69      	adds	r1, r5, #1
 8011802:	4668      	mov	r0, sp
 8011804:	f7ff fc6a 	bl	80110dc <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8011808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801180c:	4810      	ldr	r0, [pc, #64]	; (8011850 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x70>)
 801180e:	f7fb fed5 	bl	800d5bc <LOGGER_Print>
 8011812:	f7fb fecb 	bl	800d5ac <LOGGER_PrintNL>
 8011816:	f7fb fee9 	bl	800d5ec <LOGGER_EndSection>
 801181a:	f206 3453 	addw	r4, r6, #851	; 0x353
 801181e:	f206 565b 	addw	r6, r6, #1371	; 0x55b
 8011822:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8011826:	2b05      	cmp	r3, #5
 8011828:	d109      	bne.n	801183e <b3b14ea0535ea7766b14c305344e9dd58438abce+0x5e>
 801182a:	4629      	mov	r1, r5
 801182c:	4620      	mov	r0, r4
 801182e:	f7f7 fd4d 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8011832:	b120      	cbz	r0, 801183e <b3b14ea0535ea7766b14c305344e9dd58438abce+0x5e>
 8011834:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 8011838:	4629      	mov	r1, r5
 801183a:	f7ff fe21 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 801183e:	3428      	adds	r4, #40	; 0x28
 8011840:	42b4      	cmp	r4, r6
 8011842:	d1ee      	bne.n	8011822 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x42>
 8011844:	b004      	add	sp, #16
 8011846:	bd70      	pop	{r4, r5, r6, pc}
 8011848:	20000034 	.word	0x20000034
 801184c:	0801c664 	.word	0x0801c664
 8011850:	0801c75c 	.word	0x0801c75c

08011854 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x34>)
 8011858:	681d      	ldr	r5, [r3, #0]
 801185a:	f7f4 fcbf 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 801185e:	f205 3453 	addw	r4, r5, #851	; 0x353
 8011862:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 8011866:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 801186a:	2b05      	cmp	r3, #5
 801186c:	d104      	bne.n	8011878 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x24>
 801186e:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 8011872:	4621      	mov	r1, r4
 8011874:	f7ff fe04 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8011878:	3428      	adds	r4, #40	; 0x28
 801187a:	42ac      	cmp	r4, r5
 801187c:	d1f3      	bne.n	8011866 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x12>
 801187e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011882:	f7f4 bccb 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011886:	bf00      	nop
 8011888:	20000034 	.word	0x20000034

0801188c <0a6eef3dd890049c6feb9f053ae4732930866b35>:
 801188c:	b570      	push	{r4, r5, r6, lr}
 801188e:	4b13      	ldr	r3, [pc, #76]	; (80118dc <0a6eef3dd890049c6feb9f053ae4732930866b35+0x50>)
 8011890:	681c      	ldr	r4, [r3, #0]
 8011892:	4605      	mov	r5, r0
 8011894:	f7f4 fca2 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011898:	2300      	movs	r3, #0
 801189a:	2128      	movs	r1, #40	; 0x28
 801189c:	f504 7054 	add.w	r0, r4, #848	; 0x350
 80118a0:	fb01 f203 	mul.w	r2, r1, r3
 80118a4:	5c86      	ldrb	r6, [r0, r2]
 80118a6:	2e03      	cmp	r6, #3
 80118a8:	d111      	bne.n	80118ce <0a6eef3dd890049c6feb9f053ae4732930866b35+0x42>
 80118aa:	f202 3253 	addw	r2, r2, #851	; 0x353
 80118ae:	18a3      	adds	r3, r4, r2
 80118b0:	4628      	mov	r0, r5
 80118b2:	f103 0210 	add.w	r2, r3, #16
 80118b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80118ba:	f840 1b04 	str.w	r1, [r0], #4
 80118be:	4293      	cmp	r3, r2
 80118c0:	d1f9      	bne.n	80118b6 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x2a>
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	7003      	strb	r3, [r0, #0]
 80118c6:	f7f4 fca9 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80118ca:	2001      	movs	r0, #1
 80118cc:	bd70      	pop	{r4, r5, r6, pc}
 80118ce:	3301      	adds	r3, #1
 80118d0:	2b0d      	cmp	r3, #13
 80118d2:	d1e5      	bne.n	80118a0 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x14>
 80118d4:	f7f4 fca2 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80118d8:	2000      	movs	r0, #0
 80118da:	e7f7      	b.n	80118cc <0a6eef3dd890049c6feb9f053ae4732930866b35+0x40>
 80118dc:	20000034 	.word	0x20000034

080118e0 <1baccc0636a0c0164401b195d5e58f3f8da51c03>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4b0c      	ldr	r3, [pc, #48]	; (8011914 <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x34>)
 80118e4:	681d      	ldr	r5, [r3, #0]
 80118e6:	f7f4 fc79 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 80118ea:	f205 3453 	addw	r4, r5, #851	; 0x353
 80118ee:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 80118f2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 80118f6:	2b03      	cmp	r3, #3
 80118f8:	d104      	bne.n	8011904 <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x24>
 80118fa:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 80118fe:	4621      	mov	r1, r4
 8011900:	f7ff fdbe 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8011904:	3428      	adds	r4, #40	; 0x28
 8011906:	42ac      	cmp	r4, r5
 8011908:	d1f3      	bne.n	80118f2 <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x12>
 801190a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801190e:	f7f4 bc85 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011912:	bf00      	nop
 8011914:	20000034 	.word	0x20000034

08011918 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>:
 8011918:	b570      	push	{r4, r5, r6, lr}
 801191a:	4b3c      	ldr	r3, [pc, #240]	; (8011a0c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xf4>)
 801191c:	681c      	ldr	r4, [r3, #0]
 801191e:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011922:	b086      	sub	sp, #24
 8011924:	4606      	mov	r6, r0
 8011926:	b92b      	cbnz	r3, 8011934 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x1c>
 8011928:	4939      	ldr	r1, [pc, #228]	; (8011a10 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xf8>)
 801192a:	483a      	ldr	r0, [pc, #232]	; (8011a14 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xfc>)
 801192c:	f240 2267 	movw	r2, #615	; 0x267
 8011930:	f7ef fe2e 	bl	8001590 <EXPECT_OnAbortHandler>
 8011934:	f7f4 fc52 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011938:	250e      	movs	r5, #14
 801193a:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 801193e:	881a      	ldrh	r2, [r3, #0]
 8011940:	42b2      	cmp	r2, r6
 8011942:	d12b      	bne.n	801199c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x84>
 8011944:	799a      	ldrb	r2, [r3, #6]
 8011946:	2a00      	cmp	r2, #0
 8011948:	d051      	beq.n	80119ee <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 801194a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801194c:	7991      	ldrb	r1, [r2, #6]
 801194e:	2900      	cmp	r1, #0
 8011950:	d04d      	beq.n	80119ee <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 8011952:	8811      	ldrh	r1, [r2, #0]
 8011954:	42b1      	cmp	r1, r6
 8011956:	d14a      	bne.n	80119ee <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 8011958:	7919      	ldrb	r1, [r3, #4]
 801195a:	2903      	cmp	r1, #3
 801195c:	d128      	bne.n	80119b0 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x98>
 801195e:	1dda      	adds	r2, r3, #7
 8011960:	ad01      	add	r5, sp, #4
 8011962:	3317      	adds	r3, #23
 8011964:	6810      	ldr	r0, [r2, #0]
 8011966:	6851      	ldr	r1, [r2, #4]
 8011968:	462e      	mov	r6, r5
 801196a:	c603      	stmia	r6!, {r0, r1}
 801196c:	3208      	adds	r2, #8
 801196e:	429a      	cmp	r2, r3
 8011970:	4635      	mov	r5, r6
 8011972:	d1f7      	bne.n	8011964 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x4c>
 8011974:	7813      	ldrb	r3, [r2, #0]
 8011976:	702b      	strb	r3, [r5, #0]
 8011978:	a801      	add	r0, sp, #4
 801197a:	f7ff fedb 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 801197e:	bb20      	cbnz	r0, 80119ca <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xb2>
 8011980:	2140      	movs	r1, #64	; 0x40
 8011982:	a801      	add	r0, sp, #4
 8011984:	f7f8 fb58 	bl	800a038 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>
 8011988:	b1f8      	cbz	r0, 80119ca <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xb2>
 801198a:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 801198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011990:	791a      	ldrb	r2, [r3, #4]
 8011992:	2a03      	cmp	r2, #3
 8011994:	d12b      	bne.n	80119ee <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 8011996:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 801199a:	e028      	b.n	80119ee <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 801199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801199e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 80119a2:	3d01      	subs	r5, #1
 80119a4:	d1c9      	bne.n	801193a <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x22>
 80119a6:	f7f4 fc39 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80119aa:	4628      	mov	r0, r5
 80119ac:	b006      	add	sp, #24
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	1dd3      	adds	r3, r2, #7
 80119b2:	ad01      	add	r5, sp, #4
 80119b4:	3217      	adds	r2, #23
 80119b6:	6818      	ldr	r0, [r3, #0]
 80119b8:	6859      	ldr	r1, [r3, #4]
 80119ba:	462e      	mov	r6, r5
 80119bc:	c603      	stmia	r6!, {r0, r1}
 80119be:	3308      	adds	r3, #8
 80119c0:	4293      	cmp	r3, r2
 80119c2:	4635      	mov	r5, r6
 80119c4:	d1f7      	bne.n	80119b6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x9e>
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	e7d5      	b.n	8011976 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x5e>
 80119ca:	2302      	movs	r3, #2
 80119cc:	f10d 0105 	add.w	r1, sp, #5
 80119d0:	2000      	movs	r0, #0
 80119d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80119d6:	f7f7 f8e7 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80119da:	2140      	movs	r1, #64	; 0x40
 80119dc:	b100      	cbz	r0, 80119e0 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xc8>
 80119de:	a801      	add	r0, sp, #4
 80119e0:	f7f8 fb80 	bl	800a0e4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>
 80119e4:	b938      	cbnz	r0, 80119f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xde>
 80119e6:	f7f8 ffcb 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 80119ea:	07c3      	lsls	r3, r0, #31
 80119ec:	d409      	bmi.n	8011a02 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xea>
 80119ee:	f7f4 fc15 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 80119f2:	2001      	movs	r0, #1
 80119f4:	e7da      	b.n	80119ac <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x94>
 80119f6:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 80119fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119fc:	791a      	ldrb	r2, [r3, #4]
 80119fe:	2a02      	cmp	r2, #2
 8011a00:	e7c8      	b.n	8011994 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x7c>
 8011a02:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a08:	e7c5      	b.n	8011996 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x7e>
 8011a0a:	bf00      	nop
 8011a0c:	20000034 	.word	0x20000034
 8011a10:	0801c780 	.word	0x0801c780
 8011a14:	0801c7e0 	.word	0x0801c7e0

08011a18 <265e4cb026b8783377b1f22e25c3b310527be0c4>:
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x40>)
 8011a1c:	681c      	ldr	r4, [r3, #0]
 8011a1e:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011a22:	b92b      	cbnz	r3, 8011a30 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x18>
 8011a24:	490d      	ldr	r1, [pc, #52]	; (8011a5c <265e4cb026b8783377b1f22e25c3b310527be0c4+0x44>)
 8011a26:	480e      	ldr	r0, [pc, #56]	; (8011a60 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x48>)
 8011a28:	f240 22b1 	movw	r2, #689	; 0x2b1
 8011a2c:	f7ef fdb0 	bl	8001590 <EXPECT_OnAbortHandler>
 8011a30:	f7f4 fbd4 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011a34:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011a38:	7991      	ldrb	r1, [r2, #6]
 8011a3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011a3c:	b131      	cbz	r1, 8011a4c <265e4cb026b8783377b1f22e25c3b310527be0c4+0x34>
 8011a3e:	7999      	ldrb	r1, [r3, #6]
 8011a40:	b121      	cbz	r1, 8011a4c <265e4cb026b8783377b1f22e25c3b310527be0c4+0x34>
 8011a42:	8811      	ldrh	r1, [r2, #0]
 8011a44:	881a      	ldrh	r2, [r3, #0]
 8011a46:	4291      	cmp	r1, r2
 8011a48:	bf08      	it	eq
 8011a4a:	6a5b      	ldreq	r3, [r3, #36]	; 0x24
 8011a4c:	881c      	ldrh	r4, [r3, #0]
 8011a4e:	f7f4 fbe5 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011a52:	4620      	mov	r0, r4
 8011a54:	bd10      	pop	{r4, pc}
 8011a56:	bf00      	nop
 8011a58:	20000034 	.word	0x20000034
 8011a5c:	0801c780 	.word	0x0801c780
 8011a60:	0801c7e0 	.word	0x0801c7e0

08011a64 <23fc3861a84c8d8f435c2599ea00b6593300a215>:
 8011a64:	b510      	push	{r4, lr}
 8011a66:	4b0a      	ldr	r3, [pc, #40]	; (8011a90 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x2c>)
 8011a68:	681c      	ldr	r4, [r3, #0]
 8011a6a:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011a6e:	b92b      	cbnz	r3, 8011a7c <23fc3861a84c8d8f435c2599ea00b6593300a215+0x18>
 8011a70:	4908      	ldr	r1, [pc, #32]	; (8011a94 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x30>)
 8011a72:	4809      	ldr	r0, [pc, #36]	; (8011a98 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x34>)
 8011a74:	f240 22c9 	movw	r2, #713	; 0x2c9
 8011a78:	f7ef fd8a 	bl	8001590 <EXPECT_OnAbortHandler>
 8011a7c:	f7f4 fbae 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011a80:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011a84:	78dc      	ldrb	r4, [r3, #3]
 8011a86:	f7f4 fbc9 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	bd10      	pop	{r4, pc}
 8011a8e:	bf00      	nop
 8011a90:	20000034 	.word	0x20000034
 8011a94:	0801c780 	.word	0x0801c780
 8011a98:	0801c7e0 	.word	0x0801c7e0

08011a9c <b800951da4b2039f1ee67c6e225564a563003bc0>:
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	4b0a      	ldr	r3, [pc, #40]	; (8011ac8 <b800951da4b2039f1ee67c6e225564a563003bc0+0x2c>)
 8011aa0:	681c      	ldr	r4, [r3, #0]
 8011aa2:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011aa6:	b92b      	cbnz	r3, 8011ab4 <b800951da4b2039f1ee67c6e225564a563003bc0+0x18>
 8011aa8:	4908      	ldr	r1, [pc, #32]	; (8011acc <b800951da4b2039f1ee67c6e225564a563003bc0+0x30>)
 8011aaa:	4809      	ldr	r0, [pc, #36]	; (8011ad0 <b800951da4b2039f1ee67c6e225564a563003bc0+0x34>)
 8011aac:	f240 22de 	movw	r2, #734	; 0x2de
 8011ab0:	f7ef fd6e 	bl	8001590 <EXPECT_OnAbortHandler>
 8011ab4:	f7f4 fb92 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011ab8:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011abc:	791c      	ldrb	r4, [r3, #4]
 8011abe:	f7f4 fbad 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	bd10      	pop	{r4, pc}
 8011ac6:	bf00      	nop
 8011ac8:	20000034 	.word	0x20000034
 8011acc:	0801c780 	.word	0x0801c780
 8011ad0:	0801c7e0 	.word	0x0801c7e0

08011ad4 <ffe29f5c9712609bba4ef23834769dd10ed867f0>:
 8011ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ad8:	4b58      	ldr	r3, [pc, #352]	; (8011c3c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x168>)
 8011ada:	f8d3 9000 	ldr.w	r9, [r3]
 8011ade:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8011ae2:	b08b      	sub	sp, #44	; 0x2c
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	b92b      	cbnz	r3, 8011af4 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x20>
 8011ae8:	4955      	ldr	r1, [pc, #340]	; (8011c40 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x16c>)
 8011aea:	4856      	ldr	r0, [pc, #344]	; (8011c44 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x170>)
 8011aec:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011af0:	f7ef fd4e 	bl	8001590 <EXPECT_OnAbortHandler>
 8011af4:	f7f4 fb72 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011af8:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8011afc:	466c      	mov	r4, sp
 8011afe:	1dda      	adds	r2, r3, #7
 8011b00:	f103 0c17 	add.w	ip, r3, #23
 8011b04:	4625      	mov	r5, r4
 8011b06:	6810      	ldr	r0, [r2, #0]
 8011b08:	6851      	ldr	r1, [r2, #4]
 8011b0a:	4627      	mov	r7, r4
 8011b0c:	c703      	stmia	r7!, {r0, r1}
 8011b0e:	3208      	adds	r2, #8
 8011b10:	4562      	cmp	r2, ip
 8011b12:	463c      	mov	r4, r7
 8011b14:	d1f7      	bne.n	8011b06 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x32>
 8011b16:	7812      	ldrb	r2, [r2, #0]
 8011b18:	703a      	strb	r2, [r7, #0]
 8011b1a:	791f      	ldrb	r7, [r3, #4]
 8011b1c:	f893 8003 	ldrb.w	r8, [r3, #3]
 8011b20:	2f02      	cmp	r7, #2
 8011b22:	d01b      	beq.n	8011b5c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8011b24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011b28:	b1c2      	cbz	r2, 8011b5c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8011b2a:	3a01      	subs	r2, #1
 8011b2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8011b30:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8011b34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011b38:	b183      	cbz	r3, 8011b5c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8011b3a:	2f05      	cmp	r7, #5
 8011b3c:	d103      	bne.n	8011b46 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x72>
 8011b3e:	2101      	movs	r1, #1
 8011b40:	4628      	mov	r0, r5
 8011b42:	f7ff fa27 	bl	8010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8011b46:	2101      	movs	r1, #1
 8011b48:	2000      	movs	r0, #0
 8011b4a:	f7ff fa23 	bl	8010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8011b4e:	f7f4 fb65 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011b52:	2400      	movs	r4, #0
 8011b54:	4620      	mov	r0, r4
 8011b56:	b00b      	add	sp, #44	; 0x2c
 8011b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b5c:	f7f4 fb5e 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011b60:	2210      	movs	r2, #16
 8011b62:	2100      	movs	r1, #0
 8011b64:	f10d 0015 	add.w	r0, sp, #21
 8011b68:	f007 fa0a 	bl	8018f80 <memset>
 8011b6c:	2302      	movs	r3, #2
 8011b6e:	f10d 0115 	add.w	r1, sp, #21
 8011b72:	2000      	movs	r0, #0
 8011b74:	f88d 3014 	strb.w	r3, [sp, #20]
 8011b78:	f7f7 f816 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8011b7c:	1e7b      	subs	r3, r7, #1
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d8e7      	bhi.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011b82:	a201      	add	r2, pc, #4	; (adr r2, 8011b88 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0xb4>)
 8011b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b88:	08011b9d 	.word	0x08011b9d
 8011b8c:	08011be3 	.word	0x08011be3
 8011b90:	08011c01 	.word	0x08011c01
 8011b94:	08011b53 	.word	0x08011b53
 8011b98:	08011c17 	.word	0x08011c17
 8011b9c:	2031      	movs	r0, #49	; 0x31
 8011b9e:	f7f8 f9c1 	bl	8009f24 <d9cd3de8850ba05653155beecb1d40906820436e>
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d0d4      	beq.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011ba8:	7803      	ldrb	r3, [r0, #0]
 8011baa:	2b50      	cmp	r3, #80	; 0x50
 8011bac:	d10b      	bne.n	8011bc6 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0xf2>
 8011bae:	f004 fab3 	bl	8016118 <93f4deb1287f872116dccf0c4dae004ac9b29b84>
 8011bb2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011bb6:	6832      	ldr	r2, [r6, #0]
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	7932      	ldrb	r2, [r6, #4]
 8011bbc:	711a      	strb	r2, [r3, #4]
 8011bbe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8011bc2:	3801      	subs	r0, #1
 8011bc4:	7158      	strb	r0, [r3, #5]
 8011bc6:	7823      	ldrb	r3, [r4, #0]
 8011bc8:	2b90      	cmp	r3, #144	; 0x90
 8011bca:	d107      	bne.n	8011bdc <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8011bcc:	68e2      	ldr	r2, [r4, #12]
 8011bce:	b12a      	cbz	r2, 8011bdc <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8011bd0:	2321      	movs	r3, #33	; 0x21
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8011bd8:	f7f9 fa24 	bl	800b024 <ce7cfafa044c34a88028e8cf12995b3096f9f973>
 8011bdc:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
 8011be0:	e7b8      	b.n	8011b54 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x80>
 8011be2:	2131      	movs	r1, #49	; 0x31
 8011be4:	b100      	cbz	r0, 8011be8 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x114>
 8011be6:	a805      	add	r0, sp, #20
 8011be8:	f7f8 fa7c 	bl	800a0e4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>
 8011bec:	1e01      	subs	r1, r0, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	bf18      	it	ne
 8011bf2:	2101      	movne	r1, #1
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	f7ff f9cd 	bl	8010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8011bfa:	2c00      	cmp	r4, #0
 8011bfc:	d1ee      	bne.n	8011bdc <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8011bfe:	e7a8      	b.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011c00:	4628      	mov	r0, r5
 8011c02:	f7ff fd97 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d1a3      	bne.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011c0a:	2131      	movs	r1, #49	; 0x31
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f7f8 fa13 	bl	800a038 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>
 8011c12:	4604      	mov	r4, r0
 8011c14:	e7f1      	b.n	8011bfa <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x126>
 8011c16:	f1b8 0f01 	cmp.w	r8, #1
 8011c1a:	d19a      	bne.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011c1c:	2131      	movs	r1, #49	; 0x31
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f7f8 fb94 	bl	800a34c <fc07e894741fc85c512f976929ce54659d763792>
 8011c24:	4604      	mov	r4, r0
 8011c26:	b120      	cbz	r0, 8011c32 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x15e>
 8011c28:	4641      	mov	r1, r8
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f7ff f9b2 	bl	8010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8011c30:	e7d4      	b.n	8011bdc <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8011c32:	4601      	mov	r1, r0
 8011c34:	4628      	mov	r0, r5
 8011c36:	f7ff f9ad 	bl	8010f94 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8011c3a:	e78a      	b.n	8011b52 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8011c3c:	20000034 	.word	0x20000034
 8011c40:	0801c780 	.word	0x0801c780
 8011c44:	0801c7e0 	.word	0x0801c7e0

08011c48 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	4b0a      	ldr	r3, [pc, #40]	; (8011c74 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x2c>)
 8011c4c:	681c      	ldr	r4, [r3, #0]
 8011c4e:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011c52:	b92b      	cbnz	r3, 8011c60 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x18>
 8011c54:	4908      	ldr	r1, [pc, #32]	; (8011c78 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x30>)
 8011c56:	4809      	ldr	r0, [pc, #36]	; (8011c7c <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x34>)
 8011c58:	f240 3259 	movw	r2, #857	; 0x359
 8011c5c:	f7ef fc98 	bl	8001590 <EXPECT_OnAbortHandler>
 8011c60:	f7f4 fabc 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011c64:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011c68:	789c      	ldrb	r4, [r3, #2]
 8011c6a:	f7f4 fad7 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011c6e:	4620      	mov	r0, r4
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	bf00      	nop
 8011c74:	20000034 	.word	0x20000034
 8011c78:	0801c780 	.word	0x0801c780
 8011c7c:	0801c7e0 	.word	0x0801c7e0

08011c80 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf>:
 8011c80:	b510      	push	{r4, lr}
 8011c82:	4b0a      	ldr	r3, [pc, #40]	; (8011cac <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x2c>)
 8011c84:	681c      	ldr	r4, [r3, #0]
 8011c86:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011c8a:	b92b      	cbnz	r3, 8011c98 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x18>
 8011c8c:	4908      	ldr	r1, [pc, #32]	; (8011cb0 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x30>)
 8011c8e:	4809      	ldr	r0, [pc, #36]	; (8011cb4 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x34>)
 8011c90:	f240 3269 	movw	r2, #873	; 0x369
 8011c94:	f7ef fc7c 	bl	8001590 <EXPECT_OnAbortHandler>
 8011c98:	f7f4 faa0 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011c9c:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011ca0:	881c      	ldrh	r4, [r3, #0]
 8011ca2:	f7f4 fabb 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	bd10      	pop	{r4, pc}
 8011caa:	bf00      	nop
 8011cac:	20000034 	.word	0x20000034
 8011cb0:	0801c780 	.word	0x0801c780
 8011cb4:	0801c7e0 	.word	0x0801c7e0

08011cb8 <e1a4ca54296e83210dff3006a7ef95c89a4943bb>:
 8011cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cbc:	4b3a      	ldr	r3, [pc, #232]	; (8011da8 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf0>)
 8011cbe:	b085      	sub	sp, #20
 8011cc0:	681e      	ldr	r6, [r3, #0]
 8011cc2:	468b      	mov	fp, r1
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	f7f7 f9df 	bl	8009088 <a72cb89288ba405a2fc975c124a720574840c109>
 8011cca:	f04f 0900 	mov.w	r9, #0
 8011cce:	4604      	mov	r4, r0
 8011cd0:	f7f4 fa84 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011cd4:	2219      	movs	r2, #25
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	4638      	mov	r0, r7
 8011cda:	f007 f951 	bl	8018f80 <memset>
 8011cde:	f206 3553 	addw	r5, r6, #851	; 0x353
 8011ce2:	f206 5a5b 	addw	sl, r6, #1371	; 0x55b
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	464e      	mov	r6, r9
 8011cea:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8011cee:	2a05      	cmp	r2, #5
 8011cf0:	d103      	bne.n	8011cfa <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8011cf2:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 8011cf6:	2a01      	cmp	r2, #1
 8011cf8:	d014      	beq.n	8011d24 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x6c>
 8011cfa:	46b0      	mov	r8, r6
 8011cfc:	3528      	adds	r5, #40	; 0x28
 8011cfe:	45aa      	cmp	sl, r5
 8011d00:	d10e      	bne.n	8011d20 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x68>
 8011d02:	b13b      	cbz	r3, 8011d14 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8011d04:	f1b8 0f00 	cmp.w	r8, #0
 8011d08:	d004      	beq.n	8011d14 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8011d0a:	b11c      	cbz	r4, 8011d14 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8011d0c:	3c01      	subs	r4, #1
 8011d0e:	b2e0      	uxtb	r0, r4
 8011d10:	f7f7 f9d4 	bl	80090bc <201075ddfc12155ac10a81b74045472dd935ece2>
 8011d14:	f7f4 fa82 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011d18:	7838      	ldrb	r0, [r7, #0]
 8011d1a:	b005      	add	sp, #20
 8011d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d20:	4646      	mov	r6, r8
 8011d22:	e7e2      	b.n	8011cea <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x32>
 8011d24:	4629      	mov	r1, r5
 8011d26:	4658      	mov	r0, fp
 8011d28:	9301      	str	r3, [sp, #4]
 8011d2a:	f7f7 facf 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8011d2e:	9b01      	ldr	r3, [sp, #4]
 8011d30:	4680      	mov	r8, r0
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d0e1      	beq.n	8011cfa <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8011d36:	f8b5 2011 	ldrh.w	r2, [r5, #17]
 8011d3a:	2a32      	cmp	r2, #50	; 0x32
 8011d3c:	d9dd      	bls.n	8011cfa <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8011d3e:	f8b5 6013 	ldrh.w	r6, [r5, #19]
 8011d42:	2164      	movs	r1, #100	; 0x64
 8011d44:	2c03      	cmp	r4, #3
 8011d46:	fb01 f606 	mul.w	r6, r1, r6
 8011d4a:	fbb6 f6f2 	udiv	r6, r6, r2
 8011d4e:	d824      	bhi.n	8011d9a <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xe2>
 8011d50:	2e45      	cmp	r6, #69	; 0x45
 8011d52:	d8d3      	bhi.n	8011cfc <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8011d54:	3401      	adds	r4, #1
 8011d56:	b2e4      	uxtb	r4, r4
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7f7 f9af 	bl	80090bc <201075ddfc12155ac10a81b74045472dd935ece2>
 8011d5e:	2304      	movs	r3, #4
 8011d60:	9302      	str	r3, [sp, #8]
 8011d62:	4b12      	ldr	r3, [pc, #72]	; (8011dac <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf4>)
 8011d64:	9303      	str	r3, [sp, #12]
 8011d66:	a904      	add	r1, sp, #16
 8011d68:	e911 0003 	ldmdb	r1, {r0, r1}
 8011d6c:	4a10      	ldr	r2, [pc, #64]	; (8011db0 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf8>)
 8011d6e:	4633      	mov	r3, r6
 8011d70:	f7fb fc5c 	bl	800d62c <LOGGER_PrintLine>
 8011d74:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8011d78:	2101      	movs	r1, #1
 8011d7a:	54b9      	strb	r1, [r7, r2]
 8011d7c:	18bb      	adds	r3, r7, r2
 8011d7e:	f835 2c07 	ldrh.w	r2, [r5, #-7]
 8011d82:	f8a3 2001 	strh.w	r2, [r3, #1]
 8011d86:	4489      	add	r9, r1
 8011d88:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8011d8c:	f8a3 2003 	strh.w	r2, [r3, #3]
 8011d90:	f1b9 0f04 	cmp.w	r9, #4
 8011d94:	d8be      	bhi.n	8011d14 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8011d96:	2300      	movs	r3, #0
 8011d98:	e7b0      	b.n	8011cfc <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8011d9a:	2e27      	cmp	r6, #39	; 0x27
 8011d9c:	d9df      	bls.n	8011d5e <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xa6>
 8011d9e:	2e45      	cmp	r6, #69	; 0x45
 8011da0:	bf98      	it	ls
 8011da2:	2300      	movls	r3, #0
 8011da4:	e7aa      	b.n	8011cfc <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8011da6:	bf00      	nop
 8011da8:	20000034 	.word	0x20000034
 8011dac:	0801c664 	.word	0x0801c664
 8011db0:	0801c7f6 	.word	0x0801c7f6

08011db4 <SCHEDULE_GetCellsCount>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	4b09      	ldr	r3, [pc, #36]	; (8011ddc <SCHEDULE_GetCellsCount+0x28>)
 8011db8:	681c      	ldr	r4, [r3, #0]
 8011dba:	2500      	movs	r5, #0
 8011dbc:	f504 7602 	add.w	r6, r4, #520	; 0x208
 8011dc0:	f7f4 fa0c 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011dc4:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
 8011dc8:	b103      	cbz	r3, 8011dcc <SCHEDULE_GetCellsCount+0x18>
 8011dca:	3501      	adds	r5, #1
 8011dcc:	3428      	adds	r4, #40	; 0x28
 8011dce:	f7f4 fa25 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011dd2:	42b4      	cmp	r4, r6
 8011dd4:	d1f4      	bne.n	8011dc0 <SCHEDULE_GetCellsCount+0xc>
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	bd70      	pop	{r4, r5, r6, pc}
 8011dda:	bf00      	nop
 8011ddc:	20000034 	.word	0x20000034

08011de0 <c44994d9507f8e8896ef91cc0ed0c665b4e74466>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4b0c      	ldr	r3, [pc, #48]	; (8011e14 <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x34>)
 8011de4:	681d      	ldr	r5, [r3, #0]
 8011de6:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 8011dea:	4604      	mov	r4, r0
 8011dec:	b92b      	cbnz	r3, 8011dfa <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x1a>
 8011dee:	490a      	ldr	r1, [pc, #40]	; (8011e18 <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x38>)
 8011df0:	480a      	ldr	r0, [pc, #40]	; (8011e1c <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x3c>)
 8011df2:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011df6:	f7ef fbcb 	bl	8001590 <EXPECT_OnAbortHandler>
 8011dfa:	f7f4 f9ef 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011dfe:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	61d8      	str	r0, [r3, #28]
 8011e06:	7922      	ldrb	r2, [r4, #4]
 8011e08:	f883 2020 	strb.w	r2, [r3, #32]
 8011e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e10:	f7f4 ba04 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011e14:	20000034 	.word	0x20000034
 8011e18:	0801c780 	.word	0x0801c780
 8011e1c:	0801c7e0 	.word	0x0801c7e0

08011e20 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>:
 8011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e22:	4b32      	ldr	r3, [pc, #200]	; (8011eec <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xcc>)
 8011e24:	681c      	ldr	r4, [r3, #0]
 8011e26:	4606      	mov	r6, r0
 8011e28:	f8d4 0554 	ldr.w	r0, [r4, #1364]	; 0x554
 8011e2c:	460d      	mov	r5, r1
 8011e2e:	4617      	mov	r7, r2
 8011e30:	b928      	cbnz	r0, 8011e3e <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x1e>
 8011e32:	492f      	ldr	r1, [pc, #188]	; (8011ef0 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xd0>)
 8011e34:	482f      	ldr	r0, [pc, #188]	; (8011ef4 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xd4>)
 8011e36:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011e3a:	f7ef fba9 	bl	8001590 <EXPECT_OnAbortHandler>
 8011e3e:	b381      	cbz	r1, 8011ea2 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x82>
 8011e40:	f7f4 f9cc 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011e44:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011e48:	8b13      	ldrh	r3, [r2, #24]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	8313      	strh	r3, [r2, #24]
 8011e4e:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011e52:	8b53      	ldrh	r3, [r2, #26]
 8011e54:	3301      	adds	r3, #1
 8011e56:	8353      	strh	r3, [r2, #26]
 8011e58:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011e5c:	8b19      	ldrh	r1, [r3, #24]
 8011e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e62:	4291      	cmp	r1, r2
 8011e64:	d107      	bne.n	8011e76 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x56>
 8011e66:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e6a:	831a      	strh	r2, [r3, #24]
 8011e6c:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011e70:	8b53      	ldrh	r3, [r2, #26]
 8011e72:	085b      	lsrs	r3, r3, #1
 8011e74:	8353      	strh	r3, [r2, #26]
 8011e76:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8011e7a:	6830      	ldr	r0, [r6, #0]
 8011e7c:	61d8      	str	r0, [r3, #28]
 8011e7e:	7932      	ldrb	r2, [r6, #4]
 8011e80:	f883 2020 	strb.w	r2, [r3, #32]
 8011e84:	f8d4 1554 	ldr.w	r1, [r4, #1364]	; 0x554
 8011e88:	b905      	cbnz	r5, 8011e8c <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x6c>
 8011e8a:	b1d7      	cbz	r7, 8011ec2 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xa2>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
 8011e92:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011e96:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 8011e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e9e:	f7f4 b9bd 	b.w	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011ea2:	7903      	ldrb	r3, [r0, #4]
 8011ea4:	2b05      	cmp	r3, #5
 8011ea6:	d104      	bne.n	8011eb2 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x92>
 8011ea8:	3007      	adds	r0, #7
 8011eaa:	f7f7 f967 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8011eae:	f005 fd73 	bl	8017998 <e097653d016fa9f6f38b73037603a15c791aa10d>
 8011eb2:	f7f4 f993 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011eb6:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011eba:	8b13      	ldrh	r3, [r2, #24]
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	8313      	strh	r3, [r2, #24]
 8011ec0:	e7ca      	b.n	8011e58 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x38>
 8011ec2:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8011ec6:	2b03      	cmp	r3, #3
 8011ec8:	bf9c      	itt	ls
 8011eca:	3301      	addls	r3, #1
 8011ecc:	f881 3021 	strbls.w	r3, [r1, #33]	; 0x21
 8011ed0:	f7f8 fd56 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8011ed4:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8011ed8:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8011edc:	2301      	movs	r3, #1
 8011ede:	408b      	lsls	r3, r1
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	4018      	ands	r0, r3
 8011ee4:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
 8011ee8:	e7d7      	b.n	8011e9a <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x7a>
 8011eea:	bf00      	nop
 8011eec:	20000034 	.word	0x20000034
 8011ef0:	0801c780 	.word	0x0801c780
 8011ef4:	0801c7e0 	.word	0x0801c7e0

08011ef8 <SCHEDULE_GetBestRxCellCandidate>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	4b35      	ldr	r3, [pc, #212]	; (8011fd0 <SCHEDULE_GetBestRxCellCandidate+0xd8>)
 8011efc:	681d      	ldr	r5, [r3, #0]
 8011efe:	f7ff f953 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8011f02:	4604      	mov	r4, r0
 8011f04:	b1f0      	cbz	r0, 8011f44 <SCHEDULE_GetBestRxCellCandidate+0x4c>
 8011f06:	f7f8 fd3b 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8011f0a:	230d      	movs	r3, #13
 8011f0c:	fbb0 f2f3 	udiv	r2, r0, r3
 8011f10:	fb02 0413 	mls	r4, r2, r3, r0
 8011f14:	b2a4      	uxth	r4, r4
 8011f16:	2c01      	cmp	r4, #1
 8011f18:	bf38      	it	cc
 8011f1a:	2401      	movcc	r4, #1
 8011f1c:	f7f4 f95e 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011f20:	462b      	mov	r3, r5
 8011f22:	f505 7202 	add.w	r2, r5, #520	; 0x208
 8011f26:	2100      	movs	r1, #0
 8011f28:	f893 034f 	ldrb.w	r0, [r3, #847]	; 0x34f
 8011f2c:	b108      	cbz	r0, 8011f32 <SCHEDULE_GetBestRxCellCandidate+0x3a>
 8011f2e:	3101      	adds	r1, #1
 8011f30:	b289      	uxth	r1, r1
 8011f32:	3328      	adds	r3, #40	; 0x28
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d1f7      	bne.n	8011f28 <SCHEDULE_GetBestRxCellCandidate+0x30>
 8011f38:	290d      	cmp	r1, #13
 8011f3a:	d001      	beq.n	8011f40 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8011f3c:	2901      	cmp	r1, #1
 8011f3e:	d803      	bhi.n	8011f48 <SCHEDULE_GetBestRxCellCandidate+0x50>
 8011f40:	f7f4 f96c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8011f44:	4620      	mov	r0, r4
 8011f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f48:	f8d5 0554 	ldr.w	r0, [r5, #1364]	; 0x554
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	7902      	ldrb	r2, [r0, #4]
 8011f50:	2a05      	cmp	r2, #5
 8011f52:	d102      	bne.n	8011f5a <SCHEDULE_GetBestRxCellCandidate+0x62>
 8011f54:	78c2      	ldrb	r2, [r0, #3]
 8011f56:	2a01      	cmp	r2, #1
 8011f58:	d004      	beq.n	8011f64 <SCHEDULE_GetBestRxCellCandidate+0x6c>
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	4299      	cmp	r1, r3
 8011f5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011f60:	d8f5      	bhi.n	8011f4e <SCHEDULE_GetBestRxCellCandidate+0x56>
 8011f62:	e7ed      	b.n	8011f40 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8011f64:	4603      	mov	r3, r0
 8011f66:	270d      	movs	r7, #13
 8011f68:	2600      	movs	r6, #0
 8011f6a:	f101 3cff 	add.w	ip, r1, #4294967295
 8011f6e:	791a      	ldrb	r2, [r3, #4]
 8011f70:	2a05      	cmp	r2, #5
 8011f72:	d103      	bne.n	8011f7c <SCHEDULE_GetBestRxCellCandidate+0x84>
 8011f74:	78da      	ldrb	r2, [r3, #3]
 8011f76:	2a01      	cmp	r2, #1
 8011f78:	bf08      	it	eq
 8011f7a:	4618      	moveq	r0, r3
 8011f7c:	461d      	mov	r5, r3
 8011f7e:	2200      	movs	r2, #0
 8011f80:	3201      	adds	r2, #1
 8011f82:	4562      	cmp	r2, ip
 8011f84:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8011f86:	dbfb      	blt.n	8011f80 <SCHEDULE_GetBestRxCellCandidate+0x88>
 8011f88:	882a      	ldrh	r2, [r5, #0]
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	bf86      	itte	hi
 8011f90:	f1c2 020d 	rsbhi	r2, r2, #13
 8011f94:	18d2      	addhi	r2, r2, r3
 8011f96:	1a9a      	subls	r2, r3, r2
 8011f98:	b292      	uxth	r2, r2
 8011f9a:	2a01      	cmp	r2, #1
 8011f9c:	d90e      	bls.n	8011fbc <SCHEDULE_GetBestRxCellCandidate+0xc4>
 8011f9e:	b193      	cbz	r3, 8011fc6 <SCHEDULE_GetBestRxCellCandidate+0xce>
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	8802      	ldrh	r2, [r0, #0]
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	bf28      	it	cs
 8011faa:	320d      	addcs	r2, #13
 8011fac:	1ad2      	subs	r2, r2, r3
 8011fae:	b292      	uxth	r2, r2
 8011fb0:	42ba      	cmp	r2, r7
 8011fb2:	d203      	bcs.n	8011fbc <SCHEDULE_GetBestRxCellCandidate+0xc4>
 8011fb4:	2a01      	cmp	r2, #1
 8011fb6:	d008      	beq.n	8011fca <SCHEDULE_GetBestRxCellCandidate+0xd2>
 8011fb8:	4617      	mov	r7, r2
 8011fba:	461c      	mov	r4, r3
 8011fbc:	3601      	adds	r6, #1
 8011fbe:	42b1      	cmp	r1, r6
 8011fc0:	d9be      	bls.n	8011f40 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	e7d3      	b.n	8011f6e <SCHEDULE_GetBestRxCellCandidate+0x76>
 8011fc6:	230c      	movs	r3, #12
 8011fc8:	e7ec      	b.n	8011fa4 <SCHEDULE_GetBestRxCellCandidate+0xac>
 8011fca:	461c      	mov	r4, r3
 8011fcc:	e7b8      	b.n	8011f40 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8011fce:	bf00      	nop
 8011fd0:	20000034 	.word	0x20000034

08011fd4 <1f2424ac27c2cb6c4102eeae83b319f761410057>:
 8011fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd6:	461f      	mov	r7, r3
 8011fd8:	4b0e      	ldr	r3, [pc, #56]	; (8012014 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x40>)
 8011fda:	681c      	ldr	r4, [r3, #0]
 8011fdc:	f504 7453 	add.w	r4, r4, #844	; 0x34c
 8011fe0:	460d      	mov	r5, r1
 8011fe2:	4616      	mov	r6, r2
 8011fe4:	f7f4 f8fa 	bl	80061dc <EMBENET_CRITICAL_SECTION_Enter>
 8011fe8:	4620      	mov	r0, r4
 8011fea:	78c3      	ldrb	r3, [r0, #3]
 8011fec:	42b3      	cmp	r3, r6
 8011fee:	d10b      	bne.n	8012008 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x34>
 8011ff0:	8803      	ldrh	r3, [r0, #0]
 8011ff2:	42ab      	cmp	r3, r5
 8011ff4:	d308      	bcc.n	8012008 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x34>
 8011ff6:	803b      	strh	r3, [r7, #0]
 8011ff8:	9b06      	ldr	r3, [sp, #24]
 8011ffa:	7882      	ldrb	r2, [r0, #2]
 8011ffc:	701a      	strb	r2, [r3, #0]
 8011ffe:	2401      	movs	r4, #1
 8012000:	f7f4 f90c 	bl	800621c <EMBENET_CRITICAL_SECTION_Exit>
 8012004:	4620      	mov	r0, r4
 8012006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012008:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801200a:	4284      	cmp	r4, r0
 801200c:	d1ed      	bne.n	8011fea <1f2424ac27c2cb6c4102eeae83b319f761410057+0x16>
 801200e:	2400      	movs	r4, #0
 8012010:	e7f6      	b.n	8012000 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x2c>
 8012012:	bf00      	nop
 8012014:	20000034 	.word	0x20000034

08012018 <send_internal>:
 8012018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801201a:	4604      	mov	r4, r0
 801201c:	3041      	adds	r0, #65	; 0x41
 801201e:	f7f7 f87f 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8012022:	b348      	cbz	r0, 8012078 <send_internal+0x60>
 8012024:	2301      	movs	r3, #1
 8012026:	f104 051d 	add.w	r5, r4, #29
 801202a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801202e:	4628      	mov	r0, r5
 8012030:	f7f7 f876 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8012034:	b138      	cbz	r0, 8012046 <send_internal+0x2e>
 8012036:	4628      	mov	r0, r5
 8012038:	f7f7 f8da 	bl	80091f0 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 801203c:	b918      	cbnz	r0, 8012046 <send_internal+0x2e>
 801203e:	2302      	movs	r3, #2
 8012040:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8012044:	e006      	b.n	8012054 <send_internal+0x3c>
 8012046:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801204a:	2b02      	cmp	r3, #2
 801204c:	d102      	bne.n	8012054 <send_internal+0x3c>
 801204e:	7f63      	ldrb	r3, [r4, #29]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d0f4      	beq.n	801203e <send_internal+0x26>
 8012054:	2300      	movs	r3, #0
 8012056:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 801205a:	4668      	mov	r0, sp
 801205c:	f7fe f906 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8012060:	9b00      	ldr	r3, [sp, #0]
 8012062:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 8012066:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801206a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801206e:	2001      	movs	r0, #1
 8012070:	2340      	movs	r3, #64	; 0x40
 8012072:	7063      	strb	r3, [r4, #1]
 8012074:	b003      	add	sp, #12
 8012076:	bd30      	pop	{r4, r5, pc}
 8012078:	2304      	movs	r3, #4
 801207a:	e7e1      	b.n	8012040 <send_internal+0x28>

0801207c <225fdc1664c4e3cff7509f058a004348ebce99b7>:
 801207c:	b570      	push	{r4, r5, r6, lr}
 801207e:	b088      	sub	sp, #32
 8012080:	f7f8 fc7e 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8012084:	4604      	mov	r4, r0
 8012086:	f7f6 fa59 	bl	800853c <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 801208a:	2306      	movs	r3, #6
 801208c:	fb00 3303 	mla	r3, r0, r3, r3
 8012090:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012094:	fbb6 f3f3 	udiv	r3, r6, r3
 8012098:	429c      	cmp	r4, r3
 801209a:	da0f      	bge.n	80120bc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 801209c:	4b47      	ldr	r3, [pc, #284]	; (80121bc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x140>)
 801209e:	2211      	movs	r2, #17
 80120a0:	2100      	movs	r1, #0
 80120a2:	a803      	add	r0, sp, #12
 80120a4:	681d      	ldr	r5, [r3, #0]
 80120a6:	f006 ff6b 	bl	8018f80 <memset>
 80120aa:	f7fe f941 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 80120ae:	b938      	cbnz	r0, 80120c0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x44>
 80120b0:	2050      	movs	r0, #80	; 0x50
 80120b2:	f7f7 fbf7 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 80120b6:	2300      	movs	r3, #0
 80120b8:	f8a5 3564 	strh.w	r3, [r5, #1380]	; 0x564
 80120bc:	b008      	add	sp, #32
 80120be:	bd70      	pop	{r4, r5, r6, pc}
 80120c0:	f004 f832 	bl	8016128 <eada7656be7f8681f934187ead57a12001632399>
 80120c4:	42b0      	cmp	r0, r6
 80120c6:	d0f3      	beq.n	80120b0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x34>
 80120c8:	f004 f884 	bl	80161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 80120cc:	2800      	cmp	r0, #0
 80120ce:	d0ef      	beq.n	80120b0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x34>
 80120d0:	f895 3565 	ldrb.w	r3, [r5, #1381]	; 0x565
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1f1      	bne.n	80120bc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 80120d8:	2050      	movs	r0, #80	; 0x50
 80120da:	f7f7 fc73 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 80120de:	4604      	mov	r4, r0
 80120e0:	b958      	cbnz	r0, 80120fa <225fdc1664c4e3cff7509f058a004348ebce99b7+0x7e>
 80120e2:	2303      	movs	r3, #3
 80120e4:	9301      	str	r3, [sp, #4]
 80120e6:	4b36      	ldr	r3, [pc, #216]	; (80121c0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x144>)
 80120e8:	4a36      	ldr	r2, [pc, #216]	; (80121c4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x148>)
 80120ea:	9302      	str	r3, [sp, #8]
 80120ec:	4619      	mov	r1, r3
 80120ee:	2003      	movs	r0, #3
 80120f0:	b008      	add	sp, #32
 80120f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f6:	f7fb ba99 	b.w	800d62c <LOGGER_PrintLine>
 80120fa:	f245 0350 	movw	r3, #20560	; 0x5050
 80120fe:	8003      	strh	r3, [r0, #0]
 8012100:	2121      	movs	r1, #33	; 0x21
 8012102:	f005 fe93 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012106:	4b30      	ldr	r3, [pc, #192]	; (80121c8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x14c>)
 8012108:	6862      	ldr	r2, [r4, #4]
 801210a:	f103 0120 	add.w	r1, r3, #32
 801210e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012112:	f842 0b04 	str.w	r0, [r2], #4
 8012116:	428b      	cmp	r3, r1
 8012118:	d1f9      	bne.n	801210e <225fdc1664c4e3cff7509f058a004348ebce99b7+0x92>
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	7013      	strb	r3, [r2, #0]
 801211e:	f7ff feeb 	bl	8011ef8 <SCHEDULE_GetBestRxCellCandidate>
 8012122:	6863      	ldr	r3, [r4, #4]
 8012124:	83d8      	strh	r0, [r3, #30]
 8012126:	f7ff faef 	bl	8011708 <a332c320f50553856ddcee95ff765027b8f3e118>
 801212a:	f895 3566 	ldrb.w	r3, [r5, #1382]	; 0x566
 801212e:	2b00      	cmp	r3, #0
 8012130:	d038      	beq.n	80121a4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x128>
 8012132:	2801      	cmp	r0, #1
 8012134:	d93b      	bls.n	80121ae <225fdc1664c4e3cff7509f058a004348ebce99b7+0x132>
 8012136:	2300      	movs	r3, #0
 8012138:	f885 3566 	strb.w	r3, [r5, #1382]	; 0x566
 801213c:	6863      	ldr	r3, [r4, #4]
 801213e:	2200      	movs	r2, #0
 8012140:	f883 2020 	strb.w	r2, [r3, #32]
 8012144:	f7ff f830 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8012148:	6863      	ldr	r3, [r4, #4]
 801214a:	7518      	strb	r0, [r3, #20]
 801214c:	f7ff f82c 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8012150:	6863      	ldr	r3, [r4, #4]
 8012152:	0a00      	lsrs	r0, r0, #8
 8012154:	7558      	strb	r0, [r3, #21]
 8012156:	6863      	ldr	r3, [r4, #4]
 8012158:	3304      	adds	r3, #4
 801215a:	2601      	movs	r6, #1
 801215c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8012160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012164:	2300      	movs	r3, #0
 8012166:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 801216a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
 801216e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
 8012172:	f884 609d 	strb.w	r6, [r4, #157]	; 0x9d
 8012176:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
 801217a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 801217e:	f7fc f829 	bl	800e1d4 <281684afe20744fe8e8db0e02bb6f53b74a050bd>
 8012182:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 8012186:	4620      	mov	r0, r4
 8012188:	f7ff ff46 	bl	8012018 <send_internal>
 801218c:	b990      	cbnz	r0, 80121b4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x138>
 801218e:	4620      	mov	r0, r4
 8012190:	f7f7 fcd6 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012194:	2304      	movs	r3, #4
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x144>)
 801219a:	4a0c      	ldr	r2, [pc, #48]	; (80121cc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x150>)
 801219c:	9302      	str	r3, [sp, #8]
 801219e:	4619      	mov	r1, r3
 80121a0:	2004      	movs	r0, #4
 80121a2:	e7a5      	b.n	80120f0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x74>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d1c9      	bne.n	801213c <225fdc1664c4e3cff7509f058a004348ebce99b7+0xc0>
 80121a8:	2301      	movs	r3, #1
 80121aa:	f885 3566 	strb.w	r3, [r5, #1382]	; 0x566
 80121ae:	6863      	ldr	r3, [r4, #4]
 80121b0:	2201      	movs	r2, #1
 80121b2:	e7c5      	b.n	8012140 <225fdc1664c4e3cff7509f058a004348ebce99b7+0xc4>
 80121b4:	f885 6565 	strb.w	r6, [r5, #1381]	; 0x565
 80121b8:	e780      	b.n	80120bc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 80121ba:	bf00      	nop
 80121bc:	20000034 	.word	0x20000034
 80121c0:	0801c878 	.word	0x0801c878
 80121c4:	0801b20a 	.word	0x0801b20a
 80121c8:	0801a471 	.word	0x0801a471
 80121cc:	0801c87f 	.word	0x0801c87f

080121d0 <45a0de43b00f668f42645b8c08621371fe4b9150>:
 80121d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121d2:	b091      	sub	sp, #68	; 0x44
 80121d4:	2100      	movs	r1, #0
 80121d6:	2210      	movs	r2, #16
 80121d8:	f10d 0019 	add.w	r0, sp, #25
 80121dc:	f006 fed0 	bl	8018f80 <memset>
 80121e0:	2302      	movs	r3, #2
 80121e2:	f10d 0119 	add.w	r1, sp, #25
 80121e6:	2000      	movs	r0, #0
 80121e8:	f88d 3018 	strb.w	r3, [sp, #24]
 80121ec:	f7f6 fcdc 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80121f0:	b168      	cbz	r0, 801220e <45a0de43b00f668f42645b8c08621371fe4b9150+0x3e>
 80121f2:	f10d 0119 	add.w	r1, sp, #25
 80121f6:	2000      	movs	r0, #0
 80121f8:	f7f6 fcd6 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80121fc:	b9a0      	cbnz	r0, 8012228 <45a0de43b00f668f42645b8c08621371fe4b9150+0x58>
 80121fe:	466c      	mov	r4, sp
 8012200:	4620      	mov	r0, r4
 8012202:	f7fe f833 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8012206:	e894 0003 	ldmia.w	r4, {r0, r1}
 801220a:	f7f6 fd27 	bl	8008c5c <aee20a6aed232d40647d21a3bace71ea0c450c20>
 801220e:	4b37      	ldr	r3, [pc, #220]	; (80122ec <45a0de43b00f668f42645b8c08621371fe4b9150+0x11c>)
 8012210:	681d      	ldr	r5, [r3, #0]
 8012212:	f7fe f88d 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 8012216:	4604      	mov	r4, r0
 8012218:	b960      	cbnz	r0, 8012234 <45a0de43b00f668f42645b8c08621371fe4b9150+0x64>
 801221a:	2050      	movs	r0, #80	; 0x50
 801221c:	f7f7 fb42 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8012220:	f8a5 4564 	strh.w	r4, [r5, #1380]	; 0x564
 8012224:	b011      	add	sp, #68	; 0x44
 8012226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012228:	a806      	add	r0, sp, #24
 801222a:	f7ff fb2f 	bl	801188c <0a6eef3dd890049c6feb9f053ae4732930866b35>
 801222e:	2800      	cmp	r0, #0
 8012230:	d1e5      	bne.n	80121fe <45a0de43b00f668f42645b8c08621371fe4b9150+0x2e>
 8012232:	e7ec      	b.n	801220e <45a0de43b00f668f42645b8c08621371fe4b9150+0x3e>
 8012234:	f895 3564 	ldrb.w	r3, [r5, #1380]	; 0x564
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1f3      	bne.n	8012224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 801223c:	ac02      	add	r4, sp, #8
 801223e:	4620      	mov	r0, r4
 8012240:	f7fe f814 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8012244:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012248:	f8d5 056a 	ldr.w	r0, [r5, #1386]	; 0x56a
 801224c:	f895 156e 	ldrb.w	r1, [r5, #1390]	; 0x56e
 8012250:	f7f6 fcbe 	bl	8008bd0 <0fa1209e048698b86219960838c5b2bdc21151fc>
 8012254:	2800      	cmp	r0, #0
 8012256:	d0e5      	beq.n	8012224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 8012258:	2302      	movs	r3, #2
 801225a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801225e:	6803      	ldr	r3, [r0, #0]
 8012260:	f8cd 302d 	str.w	r3, [sp, #45]	; 0x2d
 8012264:	6843      	ldr	r3, [r0, #4]
 8012266:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 801226a:	a80b      	add	r0, sp, #44	; 0x2c
 801226c:	f7ff fa62 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8012270:	4604      	mov	r4, r0
 8012272:	2050      	movs	r0, #80	; 0x50
 8012274:	2c00      	cmp	r4, #0
 8012276:	d0d1      	beq.n	801221c <45a0de43b00f668f42645b8c08621371fe4b9150+0x4c>
 8012278:	f7f7 fba4 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801227c:	4604      	mov	r4, r0
 801227e:	b948      	cbnz	r0, 8012294 <45a0de43b00f668f42645b8c08621371fe4b9150+0xc4>
 8012280:	2303      	movs	r3, #3
 8012282:	9304      	str	r3, [sp, #16]
 8012284:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <45a0de43b00f668f42645b8c08621371fe4b9150+0x120>)
 8012286:	4a1b      	ldr	r2, [pc, #108]	; (80122f4 <45a0de43b00f668f42645b8c08621371fe4b9150+0x124>)
 8012288:	9305      	str	r3, [sp, #20]
 801228a:	4619      	mov	r1, r3
 801228c:	2003      	movs	r0, #3
 801228e:	f7fb f9cd 	bl	800d62c <LOGGER_PrintLine>
 8012292:	e7c7      	b.n	8012224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 8012294:	f245 0350 	movw	r3, #20560	; 0x5050
 8012298:	8003      	strh	r3, [r0, #0]
 801229a:	2301      	movs	r3, #1
 801229c:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 80122a0:	f100 0241 	add.w	r2, r0, #65	; 0x41
 80122a4:	ab0b      	add	r3, sp, #44	; 0x2c
 80122a6:	af0f      	add	r7, sp, #60	; 0x3c
 80122a8:	461e      	mov	r6, r3
 80122aa:	ce03      	ldmia	r6!, {r0, r1}
 80122ac:	42be      	cmp	r6, r7
 80122ae:	6010      	str	r0, [r2, #0]
 80122b0:	6051      	str	r1, [r2, #4]
 80122b2:	4633      	mov	r3, r6
 80122b4:	f102 0208 	add.w	r2, r2, #8
 80122b8:	d1f6      	bne.n	80122a8 <45a0de43b00f668f42645b8c08621371fe4b9150+0xd8>
 80122ba:	7833      	ldrb	r3, [r6, #0]
 80122bc:	7013      	strb	r3, [r2, #0]
 80122be:	2305      	movs	r3, #5
 80122c0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80122c4:	2300      	movs	r3, #0
 80122c6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80122ca:	f7fb ff8b 	bl	800e1e4 <6339f3934eecab924c4cd30c35957a539872f6f3>
 80122ce:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80122d2:	4620      	mov	r0, r4
 80122d4:	f7ff fea0 	bl	8012018 <send_internal>
 80122d8:	b918      	cbnz	r0, 80122e2 <45a0de43b00f668f42645b8c08621371fe4b9150+0x112>
 80122da:	4620      	mov	r0, r4
 80122dc:	f7f7 fc30 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80122e0:	e7a0      	b.n	8012224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 80122e2:	2301      	movs	r3, #1
 80122e4:	f885 3564 	strb.w	r3, [r5, #1380]	; 0x564
 80122e8:	e79c      	b.n	8012224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 80122ea:	bf00      	nop
 80122ec:	20000034 	.word	0x20000034
 80122f0:	0801c878 	.word	0x0801c878
 80122f4:	0801b20a 	.word	0x0801b20a

080122f8 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57>:
 80122f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122fa:	7ac3      	ldrb	r3, [r0, #11]
 80122fc:	2b0c      	cmp	r3, #12
 80122fe:	4604      	mov	r4, r0
 8012300:	d10d      	bne.n	801231e <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x26>
 8012302:	f100 050c 	add.w	r5, r0, #12
 8012306:	4628      	mov	r0, r5
 8012308:	f7ff fa6a 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 801230c:	f104 000d 	add.w	r0, r4, #13
 8012310:	f7f6 fb6e 	bl	80089f0 <cbc0e88a681a951e559d988b61bbaa7895224382>
 8012314:	2211      	movs	r2, #17
 8012316:	2100      	movs	r1, #0
 8012318:	4628      	mov	r0, r5
 801231a:	f006 fe31 	bl	8018f80 <memset>
 801231e:	2300      	movs	r3, #0
 8012320:	7960      	ldrb	r0, [r4, #5]
 8012322:	72e3      	strb	r3, [r4, #11]
 8012324:	f7f8 fab2 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8012328:	2304      	movs	r3, #4
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x4c>)
 801232e:	9301      	str	r3, [sp, #4]
 8012330:	ab02      	add	r3, sp, #8
 8012332:	e913 0003 	ldmdb	r3, {r0, r1}
 8012336:	4a04      	ldr	r2, [pc, #16]	; (8012348 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x50>)
 8012338:	b003      	add	sp, #12
 801233a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801233e:	f7fb b975 	b.w	800d62c <LOGGER_PrintLine>
 8012342:	bf00      	nop
 8012344:	0801c878 	.word	0x0801c878
 8012348:	0801c891 	.word	0x0801c891

0801234c <ccc806ca1165fb175d70c767b8da618b114a1c9f>:
 801234c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012350:	2a02      	cmp	r2, #2
 8012352:	b08f      	sub	sp, #60	; 0x3c
 8012354:	4607      	mov	r7, r0
 8012356:	4688      	mov	r8, r1
 8012358:	4616      	mov	r6, r2
 801235a:	d00b      	beq.n	8012374 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x28>
 801235c:	2a07      	cmp	r2, #7
 801235e:	d119      	bne.n	8012394 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x48>
 8012360:	2210      	movs	r2, #16
 8012362:	2100      	movs	r1, #0
 8012364:	f10d 0005 	add.w	r0, sp, #5
 8012368:	f006 fe0a 	bl	8018f80 <memset>
 801236c:	2306      	movs	r3, #6
 801236e:	f88d 3004 	strb.w	r3, [sp, #4]
 8012372:	2603      	movs	r6, #3
 8012374:	1e7b      	subs	r3, r7, #1
 8012376:	2b04      	cmp	r3, #4
 8012378:	d90e      	bls.n	8012398 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x4c>
 801237a:	2303      	movs	r3, #3
 801237c:	9306      	str	r3, [sp, #24]
 801237e:	4b1c      	ldr	r3, [pc, #112]	; (80123f0 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0xa4>)
 8012380:	4a1c      	ldr	r2, [pc, #112]	; (80123f4 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0xa8>)
 8012382:	9307      	str	r3, [sp, #28]
 8012384:	4619      	mov	r1, r3
 8012386:	2003      	movs	r0, #3
 8012388:	f7fb f950 	bl	800d62c <LOGGER_PrintLine>
 801238c:	2000      	movs	r0, #0
 801238e:	b00f      	add	sp, #60	; 0x3c
 8012390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012394:	2601      	movs	r6, #1
 8012396:	e7ed      	b.n	8012374 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x28>
 8012398:	2500      	movs	r5, #0
 801239a:	46c1      	mov	r9, r8
 801239c:	462c      	mov	r4, r5
 801239e:	f899 3000 	ldrb.w	r3, [r9]
 80123a2:	b153      	cbz	r3, 80123ba <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x6e>
 80123a4:	f8b9 1001 	ldrh.w	r1, [r9, #1]
 80123a8:	a806      	add	r0, sp, #24
 80123aa:	f7ff f915 	bl	80115d8 <SCHEDULE_GetCellInfo>
 80123ae:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80123b2:	42b3      	cmp	r3, r6
 80123b4:	d1ea      	bne.n	801238c <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x40>
 80123b6:	3501      	adds	r5, #1
 80123b8:	b2ed      	uxtb	r5, r5
 80123ba:	1c63      	adds	r3, r4, #1
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	2a05      	cmp	r2, #5
 80123c0:	b25c      	sxtb	r4, r3
 80123c2:	d012      	beq.n	80123ea <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x9e>
 80123c4:	42af      	cmp	r7, r5
 80123c6:	f109 0905 	add.w	r9, r9, #5
 80123ca:	d8e8      	bhi.n	801239e <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x52>
 80123cc:	42af      	cmp	r7, r5
 80123ce:	d1dd      	bne.n	801238c <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x40>
 80123d0:	4623      	mov	r3, r4
 80123d2:	2100      	movs	r1, #0
 80123d4:	b25a      	sxtb	r2, r3
 80123d6:	2a05      	cmp	r2, #5
 80123d8:	d101      	bne.n	80123de <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x92>
 80123da:	2001      	movs	r0, #1
 80123dc:	e7d7      	b.n	801238e <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x42>
 80123de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80123e2:	3301      	adds	r3, #1
 80123e4:	f808 1002 	strb.w	r1, [r8, r2]
 80123e8:	e7f4      	b.n	80123d4 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x88>
 80123ea:	4614      	mov	r4, r2
 80123ec:	e7ee      	b.n	80123cc <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x80>
 80123ee:	bf00      	nop
 80123f0:	0801c878 	.word	0x0801c878
 80123f4:	0801c8aa 	.word	0x0801c8aa

080123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 80123f8:	3901      	subs	r1, #1
 80123fa:	f100 0308 	add.w	r3, r0, #8
 80123fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012402:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8012406:	4283      	cmp	r3, r0
 8012408:	d1f9      	bne.n	80123fe <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 801240a:	4770      	bx	lr

0801240c <496ca019b627ff9d4bd45a012282bf5fa5089406>:
 801240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012410:	2a02      	cmp	r2, #2
 8012412:	b087      	sub	sp, #28
 8012414:	4606      	mov	r6, r0
 8012416:	4688      	mov	r8, r1
 8012418:	4614      	mov	r4, r2
 801241a:	d034      	beq.n	8012486 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x7a>
 801241c:	2a07      	cmp	r2, #7
 801241e:	d00e      	beq.n	801243e <496ca019b627ff9d4bd45a012282bf5fa5089406+0x32>
 8012420:	2a01      	cmp	r2, #1
 8012422:	d030      	beq.n	8012486 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x7a>
 8012424:	2303      	movs	r3, #3
 8012426:	9304      	str	r3, [sp, #16]
 8012428:	4b18      	ldr	r3, [pc, #96]	; (801248c <496ca019b627ff9d4bd45a012282bf5fa5089406+0x80>)
 801242a:	9305      	str	r3, [sp, #20]
 801242c:	ab06      	add	r3, sp, #24
 801242e:	e913 0003 	ldmdb	r3, {r0, r1}
 8012432:	4a17      	ldr	r2, [pc, #92]	; (8012490 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x84>)
 8012434:	b007      	add	sp, #28
 8012436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	f7fb b8f7 	b.w	800d62c <LOGGER_PrintLine>
 801243e:	2403      	movs	r4, #3
 8012440:	2701      	movs	r7, #1
 8012442:	2500      	movs	r5, #0
 8012444:	f10d 0910 	add.w	r9, sp, #16
 8012448:	5d73      	ldrb	r3, [r6, r5]
 801244a:	b1b3      	cbz	r3, 801247a <496ca019b627ff9d4bd45a012282bf5fa5089406+0x6e>
 801244c:	1973      	adds	r3, r6, r5
 801244e:	4648      	mov	r0, r9
 8012450:	f8b3 b001 	ldrh.w	fp, [r3, #1]
 8012454:	f8b3 a003 	ldrh.w	sl, [r3, #3]
 8012458:	f7fd ff08 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 801245c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012460:	fa5f fa8a 	uxtb.w	sl, sl
 8012464:	9002      	str	r0, [sp, #8]
 8012466:	f88d 100c 	strb.w	r1, [sp, #12]
 801246a:	e9cd a800 	strd	sl, r8, [sp]
 801246e:	463b      	mov	r3, r7
 8012470:	2205      	movs	r2, #5
 8012472:	4621      	mov	r1, r4
 8012474:	4658      	mov	r0, fp
 8012476:	f7fe fea7 	bl	80111c8 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 801247a:	3505      	adds	r5, #5
 801247c:	2d19      	cmp	r5, #25
 801247e:	d1e3      	bne.n	8012448 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x3c>
 8012480:	b007      	add	sp, #28
 8012482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012486:	2700      	movs	r7, #0
 8012488:	e7db      	b.n	8012442 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x36>
 801248a:	bf00      	nop
 801248c:	0801c878 	.word	0x0801c878
 8012490:	0801c8bd 	.word	0x0801c8bd

08012494 <f18386c4166365fe64df7dd56bd097dc60fcee43>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	4605      	mov	r5, r0
 8012498:	460e      	mov	r6, r1
 801249a:	2400      	movs	r4, #0
 801249c:	5d2b      	ldrb	r3, [r5, r4]
 801249e:	b12b      	cbz	r3, 80124ac <f18386c4166365fe64df7dd56bd097dc60fcee43+0x18>
 80124a0:	192b      	adds	r3, r5, r4
 80124a2:	4631      	mov	r1, r6
 80124a4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 80124a8:	f7fe ffea 	bl	8011480 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80124ac:	3405      	adds	r4, #5
 80124ae:	2c19      	cmp	r4, #25
 80124b0:	d1f4      	bne.n	801249c <f18386c4166365fe64df7dd56bd097dc60fcee43+0x8>
 80124b2:	bd70      	pop	{r4, r5, r6, pc}

080124b4 <fbe24b77062e695b9b69518d2423c2cc606c842f>:
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	4b11      	ldr	r3, [pc, #68]	; (80124fc <fbe24b77062e695b9b69518d2423c2cc606c842f+0x48>)
 80124b8:	681c      	ldr	r4, [r3, #0]
 80124ba:	4b11      	ldr	r3, [pc, #68]	; (8012500 <fbe24b77062e695b9b69518d2423c2cc606c842f+0x4c>)
 80124bc:	2500      	movs	r5, #0
 80124be:	224c      	movs	r2, #76	; 0x4c
 80124c0:	4629      	mov	r1, r5
 80124c2:	f204 5064 	addw	r0, r4, #1380	; 0x564
 80124c6:	681e      	ldr	r6, [r3, #0]
 80124c8:	f006 fd5a 	bl	8018f80 <memset>
 80124cc:	f04f 0300 	mov.w	r3, #0
 80124d0:	f365 0307 	bfi	r3, r5, #0, #8
 80124d4:	f884 356e 	strb.w	r3, [r4, #1390]	; 0x56e
 80124d8:	f8c4 656a 	str.w	r6, [r4, #1386]	; 0x56a
 80124dc:	2001      	movs	r0, #1
 80124de:	f7f8 f8b3 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80124e2:	f884 0567 	strb.w	r0, [r4, #1383]	; 0x567
 80124e6:	2001      	movs	r0, #1
 80124e8:	f7f8 f8ae 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80124ec:	f884 0568 	strb.w	r0, [r4, #1384]	; 0x568
 80124f0:	2001      	movs	r0, #1
 80124f2:	f7f8 f8a9 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80124f6:	f884 0569 	strb.w	r0, [r4, #1385]	; 0x569
 80124fa:	bd70      	pop	{r4, r5, r6, pc}
 80124fc:	20000034 	.word	0x20000034
 8012500:	0801a654 	.word	0x0801a654

08012504 <5b77f5d059012f38360090be73e77f682e6af1b1>:
 8012504:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012506:	4b10      	ldr	r3, [pc, #64]	; (8012548 <5b77f5d059012f38360090be73e77f682e6af1b1+0x44>)
 8012508:	681c      	ldr	r4, [r3, #0]
 801250a:	f894 6568 	ldrb.w	r6, [r4, #1384]	; 0x568
 801250e:	f7f8 fa37 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8012512:	b2c0      	uxtb	r0, r0
 8012514:	f204 5564 	addw	r5, r4, #1380	; 0x564
 8012518:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
 801251c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012520:	4342      	muls	r2, r0
 8012522:	4b0a      	ldr	r3, [pc, #40]	; (801254c <5b77f5d059012f38360090be73e77f682e6af1b1+0x48>)
 8012524:	9500      	str	r5, [sp, #0]
 8012526:	4630      	mov	r0, r6
 8012528:	2100      	movs	r1, #0
 801252a:	f7f8 f99d 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 801252e:	4b08      	ldr	r3, [pc, #32]	; (8012550 <5b77f5d059012f38360090be73e77f682e6af1b1+0x4c>)
 8012530:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
 8012534:	691a      	ldr	r2, [r3, #16]
 8012536:	9500      	str	r5, [sp, #0]
 8012538:	210d      	movs	r1, #13
 801253a:	434a      	muls	r2, r1
 801253c:	4b05      	ldr	r3, [pc, #20]	; (8012554 <5b77f5d059012f38360090be73e77f682e6af1b1+0x50>)
 801253e:	2100      	movs	r1, #0
 8012540:	f7f8 f992 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8012544:	b002      	add	sp, #8
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	20000034 	.word	0x20000034
 801254c:	080121d1 	.word	0x080121d1
 8012550:	0801a5e0 	.word	0x0801a5e0
 8012554:	0801207d 	.word	0x0801207d

08012558 <ae19410868335b64a066b6d27dd8944b8c55271b>:
 8012558:	b510      	push	{r4, lr}
 801255a:	4b08      	ldr	r3, [pc, #32]	; (801257c <ae19410868335b64a066b6d27dd8944b8c55271b+0x24>)
 801255c:	681c      	ldr	r4, [r3, #0]
 801255e:	f894 0568 	ldrb.w	r0, [r4, #1384]	; 0x568
 8012562:	f7f8 f993 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8012566:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
 801256a:	f7f8 f98f 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801256e:	f894 0569 	ldrb.w	r0, [r4, #1385]	; 0x569
 8012572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012576:	f7f8 b989 	b.w	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801257a:	bf00      	nop
 801257c:	20000034 	.word	0x20000034

08012580 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>:
 8012580:	b510      	push	{r4, lr}
 8012582:	4c07      	ldr	r4, [pc, #28]	; (80125a0 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41+0x20>)
 8012584:	6824      	ldr	r4, [r4, #0]
 8012586:	f8c4 35a8 	str.w	r3, [r4, #1448]	; 0x5a8
 801258a:	9b02      	ldr	r3, [sp, #8]
 801258c:	f8c4 059c 	str.w	r0, [r4, #1436]	; 0x59c
 8012590:	f8c4 15a0 	str.w	r1, [r4, #1440]	; 0x5a0
 8012594:	f8c4 25a4 	str.w	r2, [r4, #1444]	; 0x5a4
 8012598:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
 801259c:	bd10      	pop	{r4, pc}
 801259e:	bf00      	nop
 80125a0:	20000034 	.word	0x20000034

080125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>:
 80125a4:	b510      	push	{r4, lr}
 80125a6:	2350      	movs	r3, #80	; 0x50
 80125a8:	7043      	strb	r3, [r0, #1]
 80125aa:	7803      	ldrb	r3, [r0, #0]
 80125ac:	2201      	movs	r2, #1
 80125ae:	2b90      	cmp	r3, #144	; 0x90
 80125b0:	4604      	mov	r4, r0
 80125b2:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
 80125b6:	f04f 0300 	mov.w	r3, #0
 80125ba:	d10c      	bne.n	80125d6 <84a9c9a6c63997e804410fedf3e4beedf650a414+0x32>
 80125bc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
 80125c0:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
 80125c4:	f7fb fe06 	bl	800e1d4 <281684afe20744fe8e8db0e02bb6f53b74a050bd>
 80125c8:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80125cc:	4620      	mov	r0, r4
 80125ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d2:	f7ff bd21 	b.w	8012018 <send_internal>
 80125d6:	2205      	movs	r2, #5
 80125d8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
 80125dc:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
 80125e0:	f7fb fe00 	bl	800e1e4 <6339f3934eecab924c4cd30c35957a539872f6f3>
 80125e4:	e7f0      	b.n	80125c8 <84a9c9a6c63997e804410fedf3e4beedf650a414+0x24>
	...

080125e8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	b095      	sub	sp, #84	; 0x54
 80125ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80125f2:	4ba7      	ldr	r3, [pc, #668]	; (8012890 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2a8>)
 80125f4:	681f      	ldr	r7, [r3, #0]
 80125f6:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80125fa:	e9dd 981e 	ldrd	r9, r8, [sp, #120]	; 0x78
 80125fe:	4606      	mov	r6, r0
 8012600:	468a      	mov	sl, r1
 8012602:	b923      	cbnz	r3, 801260e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x26>
 8012604:	49a3      	ldr	r1, [pc, #652]	; (8012894 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2ac>)
 8012606:	48a4      	ldr	r0, [pc, #656]	; (8012898 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b0>)
 8012608:	22f8      	movs	r2, #248	; 0xf8
 801260a:	f7ee ffc1 	bl	8001590 <EXPECT_OnAbortHandler>
 801260e:	f897 556f 	ldrb.w	r5, [r7, #1391]	; 0x56f
 8012612:	b305      	cbz	r5, 8012656 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x6e>
 8012614:	2303      	movs	r3, #3
 8012616:	9312      	str	r3, [sp, #72]	; 0x48
 8012618:	4ba0      	ldr	r3, [pc, #640]	; (801289c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 801261a:	9313      	str	r3, [sp, #76]	; 0x4c
 801261c:	ab14      	add	r3, sp, #80	; 0x50
 801261e:	e913 0003 	ldmdb	r3, {r0, r1}
 8012622:	4a9f      	ldr	r2, [pc, #636]	; (80128a0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b8>)
 8012624:	f7fb f802 	bl	800d62c <LOGGER_PrintLine>
 8012628:	f897 0569 	ldrb.w	r0, [r7, #1385]	; 0x569
 801262c:	f7f8 f97e 	bl	800a92c <56445be374e93738432324b7e0ececbd8047647a>
 8012630:	b968      	cbnz	r0, 801264e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 8012632:	4a9c      	ldr	r2, [pc, #624]	; (80128a4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2bc>)
 8012634:	f897 0569 	ldrb.w	r0, [r7, #1385]	; 0x569
 8012638:	6912      	ldr	r2, [r2, #16]
 801263a:	4b9b      	ldr	r3, [pc, #620]	; (80128a8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c0>)
 801263c:	f240 11c7 	movw	r1, #455	; 0x1c7
 8012640:	f207 5764 	addw	r7, r7, #1380	; 0x564
 8012644:	434a      	muls	r2, r1
 8012646:	9700      	str	r7, [sp, #0]
 8012648:	2101      	movs	r1, #1
 801264a:	f7f8 f90d 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 801264e:	2000      	movs	r0, #0
 8012650:	b015      	add	sp, #84	; 0x54
 8012652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012656:	b951      	cbnz	r1, 801266e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x86>
 8012658:	2303      	movs	r3, #3
 801265a:	9312      	str	r3, [sp, #72]	; 0x48
 801265c:	4a93      	ldr	r2, [pc, #588]	; (80128ac <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c4>)
 801265e:	4b8f      	ldr	r3, [pc, #572]	; (801289c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 8012660:	9313      	str	r3, [sp, #76]	; 0x4c
 8012662:	ab14      	add	r3, sp, #80	; 0x50
 8012664:	e913 0003 	ldmdb	r3, {r0, r1}
 8012668:	f7fa ffe0 	bl	800d62c <LOGGER_PrintLine>
 801266c:	e7ef      	b.n	801264e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 801266e:	f1b8 0f00 	cmp.w	r8, #0
 8012672:	d107      	bne.n	8012684 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x9c>
 8012674:	2802      	cmp	r0, #2
 8012676:	d105      	bne.n	8012684 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x9c>
 8012678:	2303      	movs	r3, #3
 801267a:	9312      	str	r3, [sp, #72]	; 0x48
 801267c:	4b87      	ldr	r3, [pc, #540]	; (801289c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 801267e:	4a8c      	ldr	r2, [pc, #560]	; (80128b0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c8>)
 8012680:	9313      	str	r3, [sp, #76]	; 0x4c
 8012682:	e7ee      	b.n	8012662 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x7a>
 8012684:	4650      	mov	r0, sl
 8012686:	f7f7 fb99 	bl	8009dbc <43f11770a6d1a267a732a77a0ad450aed83746a6>
 801268a:	b110      	cbz	r0, 8012692 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xaa>
 801268c:	4650      	mov	r0, sl
 801268e:	f7f7 fbd9 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 8012692:	2053      	movs	r0, #83	; 0x53
 8012694:	f7f7 f996 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8012698:	4604      	mov	r4, r0
 801269a:	b928      	cbnz	r0, 80126a8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xc0>
 801269c:	2303      	movs	r3, #3
 801269e:	9312      	str	r3, [sp, #72]	; 0x48
 80126a0:	4b7e      	ldr	r3, [pc, #504]	; (801289c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 80126a2:	4a84      	ldr	r2, [pc, #528]	; (80128b4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2cc>)
 80126a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80126a6:	e7dc      	b.n	8012662 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x7a>
 80126a8:	4683      	mov	fp, r0
 80126aa:	f245 3353 	movw	r3, #21331	; 0x5353
 80126ae:	f82b 3b41 	strh.w	r3, [fp], #65
 80126b2:	f10a 0110 	add.w	r1, sl, #16
 80126b6:	4653      	mov	r3, sl
 80126b8:	465a      	mov	r2, fp
 80126ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80126be:	f842 0b04 	str.w	r0, [r2], #4
 80126c2:	428b      	cmp	r3, r1
 80126c4:	d1f9      	bne.n	80126ba <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xd2>
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	7013      	strb	r3, [r2, #0]
 80126ca:	f1b8 0f00 	cmp.w	r8, #0
 80126ce:	d00c      	beq.n	80126ea <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x102>
 80126d0:	4643      	mov	r3, r8
 80126d2:	f207 5282 	addw	r2, r7, #1410	; 0x582
 80126d6:	f108 0118 	add.w	r1, r8, #24
 80126da:	f853 0b04 	ldr.w	r0, [r3], #4
 80126de:	f842 0b04 	str.w	r0, [r2], #4
 80126e2:	428b      	cmp	r3, r1
 80126e4:	d1f9      	bne.n	80126da <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xf2>
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	7013      	strb	r3, [r2, #0]
 80126ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126ec:	f887 3581 	strb.w	r3, [r7, #1409]	; 0x581
 80126f0:	1e73      	subs	r3, r6, #1
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	f200 80ad 	bhi.w	8012852 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x26a>
 80126f8:	2e01      	cmp	r6, #1
 80126fa:	f04f 0314 	mov.w	r3, #20
 80126fe:	d04c      	beq.n	801279a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1b2>
 8012700:	2e02      	cmp	r6, #2
 8012702:	f000 8081 	beq.w	8012808 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x220>
 8012706:	f819 2003 	ldrb.w	r2, [r9, r3]
 801270a:	b1ea      	cbz	r2, 8012748 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x160>
 801270c:	eb09 0203 	add.w	r2, r9, r3
 8012710:	2104      	movs	r1, #4
 8012712:	4620      	mov	r0, r4
 8012714:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012718:	f005 fb88 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801271c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801271e:	6861      	ldr	r1, [r4, #4]
 8012720:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 8012724:	7008      	strb	r0, [r1, #0]
 8012726:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 801272a:	6860      	ldr	r0, [r4, #4]
 801272c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801272e:	0a09      	lsrs	r1, r1, #8
 8012730:	7041      	strb	r1, [r0, #1]
 8012732:	6861      	ldr	r1, [r4, #4]
 8012734:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 8012738:	7088      	strb	r0, [r1, #2]
 801273a:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 801273e:	6861      	ldr	r1, [r4, #4]
 8012740:	0a12      	lsrs	r2, r2, #8
 8012742:	3504      	adds	r5, #4
 8012744:	70ca      	strb	r2, [r1, #3]
 8012746:	b2ed      	uxtb	r5, r5
 8012748:	3b05      	subs	r3, #5
 801274a:	1d59      	adds	r1, r3, #5
 801274c:	d1db      	bne.n	8012706 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x11e>
 801274e:	2314      	movs	r3, #20
 8012750:	f818 2003 	ldrb.w	r2, [r8, r3]
 8012754:	b1ea      	cbz	r2, 8012792 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1aa>
 8012756:	eb08 0203 	add.w	r2, r8, r3
 801275a:	2104      	movs	r1, #4
 801275c:	4620      	mov	r0, r4
 801275e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012762:	f005 fb63 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012768:	6861      	ldr	r1, [r4, #4]
 801276a:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 801276e:	7008      	strb	r0, [r1, #0]
 8012770:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 8012774:	6860      	ldr	r0, [r4, #4]
 8012776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012778:	0a09      	lsrs	r1, r1, #8
 801277a:	7041      	strb	r1, [r0, #1]
 801277c:	6861      	ldr	r1, [r4, #4]
 801277e:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 8012782:	7088      	strb	r0, [r1, #2]
 8012784:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 8012788:	6861      	ldr	r1, [r4, #4]
 801278a:	0a12      	lsrs	r2, r2, #8
 801278c:	3504      	adds	r5, #4
 801278e:	70ca      	strb	r2, [r1, #3]
 8012790:	b2ed      	uxtb	r5, r5
 8012792:	3b05      	subs	r3, #5
 8012794:	1d5a      	adds	r2, r3, #5
 8012796:	d1db      	bne.n	8012750 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x168>
 8012798:	e023      	b.n	80127e2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1fa>
 801279a:	f819 2003 	ldrb.w	r2, [r9, r3]
 801279e:	b1ea      	cbz	r2, 80127dc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1f4>
 80127a0:	eb09 0203 	add.w	r2, r9, r3
 80127a4:	2104      	movs	r1, #4
 80127a6:	4620      	mov	r0, r4
 80127a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80127ac:	f005 fb3e 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80127b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127b2:	6861      	ldr	r1, [r4, #4]
 80127b4:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 80127b8:	7008      	strb	r0, [r1, #0]
 80127ba:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 80127be:	6860      	ldr	r0, [r4, #4]
 80127c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127c2:	0a09      	lsrs	r1, r1, #8
 80127c4:	7041      	strb	r1, [r0, #1]
 80127c6:	6861      	ldr	r1, [r4, #4]
 80127c8:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 80127cc:	7088      	strb	r0, [r1, #2]
 80127ce:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 80127d2:	6861      	ldr	r1, [r4, #4]
 80127d4:	0a12      	lsrs	r2, r2, #8
 80127d6:	3504      	adds	r5, #4
 80127d8:	70ca      	strb	r2, [r1, #3]
 80127da:	b2ed      	uxtb	r5, r5
 80127dc:	3b05      	subs	r3, #5
 80127de:	1d5a      	adds	r2, r3, #5
 80127e0:	d1db      	bne.n	801279a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1b2>
 80127e2:	2101      	movs	r1, #1
 80127e4:	4620      	mov	r0, r4
 80127e6:	f005 fb21 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80127ea:	6863      	ldr	r3, [r4, #4]
 80127ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127ee:	701a      	strb	r2, [r3, #0]
 80127f0:	3501      	adds	r5, #1
 80127f2:	b2ed      	uxtb	r5, r5
 80127f4:	2101      	movs	r1, #1
 80127f6:	4620      	mov	r0, r4
 80127f8:	f005 fb18 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80127fc:	6863      	ldr	r3, [r4, #4]
 80127fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012800:	701a      	strb	r2, [r3, #0]
 8012802:	3501      	adds	r5, #1
 8012804:	b2ed      	uxtb	r5, r5
 8012806:	e059      	b.n	80128bc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2d4>
 8012808:	f818 2003 	ldrb.w	r2, [r8, r3]
 801280c:	b1ea      	cbz	r2, 801284a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x262>
 801280e:	eb08 0203 	add.w	r2, r8, r3
 8012812:	2104      	movs	r1, #4
 8012814:	4620      	mov	r0, r4
 8012816:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801281a:	f005 fb07 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801281e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012820:	6861      	ldr	r1, [r4, #4]
 8012822:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 8012826:	7008      	strb	r0, [r1, #0]
 8012828:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 801282c:	6860      	ldr	r0, [r4, #4]
 801282e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012830:	0a09      	lsrs	r1, r1, #8
 8012832:	7041      	strb	r1, [r0, #1]
 8012834:	6861      	ldr	r1, [r4, #4]
 8012836:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 801283a:	7088      	strb	r0, [r1, #2]
 801283c:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 8012840:	6861      	ldr	r1, [r4, #4]
 8012842:	0a12      	lsrs	r2, r2, #8
 8012844:	3504      	adds	r5, #4
 8012846:	70ca      	strb	r2, [r1, #3]
 8012848:	b2ed      	uxtb	r5, r5
 801284a:	3b05      	subs	r3, #5
 801284c:	1d58      	adds	r0, r3, #5
 801284e:	d1db      	bne.n	8012808 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x220>
 8012850:	e7c7      	b.n	80127e2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1fa>
 8012852:	2e05      	cmp	r6, #5
 8012854:	d130      	bne.n	80128b8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2d0>
 8012856:	2102      	movs	r1, #2
 8012858:	4620      	mov	r0, r4
 801285a:	f005 fae7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801285e:	6863      	ldr	r3, [r4, #4]
 8012860:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 8012864:	701a      	strb	r2, [r3, #0]
 8012866:	6863      	ldr	r3, [r4, #4]
 8012868:	2500      	movs	r5, #0
 801286a:	705d      	strb	r5, [r3, #1]
 801286c:	2102      	movs	r1, #2
 801286e:	4620      	mov	r0, r4
 8012870:	f005 fadc 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012874:	6863      	ldr	r3, [r4, #4]
 8012876:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	6863      	ldr	r3, [r4, #4]
 801287e:	2101      	movs	r1, #1
 8012880:	705d      	strb	r5, [r3, #1]
 8012882:	4620      	mov	r0, r4
 8012884:	f005 fad2 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012888:	6863      	ldr	r3, [r4, #4]
 801288a:	701d      	strb	r5, [r3, #0]
 801288c:	4635      	mov	r5, r6
 801288e:	e7b1      	b.n	80127f4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x20c>
 8012890:	20000034 	.word	0x20000034
 8012894:	0801c8d4 	.word	0x0801c8d4
 8012898:	0801c932 	.word	0x0801c932
 801289c:	0801c878 	.word	0x0801c878
 80128a0:	0801c943 	.word	0x0801c943
 80128a4:	0801a5e0 	.word	0x0801a5e0
 80128a8:	080122f9 	.word	0x080122f9
 80128ac:	0801c96f 	.word	0x0801c96f
 80128b0:	0801c9a9 	.word	0x0801c9a9
 80128b4:	0801b20a 	.word	0x0801b20a
 80128b8:	2e07      	cmp	r6, #7
 80128ba:	d19b      	bne.n	80127f4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x20c>
 80128bc:	2102      	movs	r1, #2
 80128be:	4620      	mov	r0, r4
 80128c0:	f005 fab4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80128c4:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80128c8:	4798      	blx	r3
 80128ca:	6863      	ldr	r3, [r4, #4]
 80128cc:	7018      	strb	r0, [r3, #0]
 80128ce:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80128d2:	4798      	blx	r3
 80128d4:	6863      	ldr	r3, [r4, #4]
 80128d6:	1200      	asrs	r0, r0, #8
 80128d8:	7058      	strb	r0, [r3, #1]
 80128da:	2101      	movs	r1, #1
 80128dc:	4620      	mov	r0, r4
 80128de:	f10a 0a01 	add.w	sl, sl, #1
 80128e2:	f005 faa3 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80128e6:	4650      	mov	r0, sl
 80128e8:	f7f5 ffca 	bl	8008880 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80128ec:	6863      	ldr	r3, [r4, #4]
 80128ee:	2101      	movs	r1, #1
 80128f0:	7018      	strb	r0, [r3, #0]
 80128f2:	4620      	mov	r0, r4
 80128f4:	f005 fa9a 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80128f8:	6863      	ldr	r3, [r4, #4]
 80128fa:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 80128fe:	701a      	strb	r2, [r3, #0]
 8012900:	2101      	movs	r1, #1
 8012902:	4620      	mov	r0, r4
 8012904:	f005 fa92 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012908:	6863      	ldr	r3, [r4, #4]
 801290a:	2101      	movs	r1, #1
 801290c:	701e      	strb	r6, [r3, #0]
 801290e:	4620      	mov	r0, r4
 8012910:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 8012914:	f005 fa8a 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012918:	6862      	ldr	r2, [r4, #4]
 801291a:	2300      	movs	r3, #0
 801291c:	7013      	strb	r3, [r2, #0]
 801291e:	2101      	movs	r1, #1
 8012920:	4620      	mov	r0, r4
 8012922:	f005 fa83 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012926:	6862      	ldr	r2, [r4, #4]
 8012928:	21c9      	movs	r1, #201	; 0xc9
 801292a:	7011      	strb	r1, [r2, #0]
 801292c:	4620      	mov	r0, r4
 801292e:	2102      	movs	r1, #2
 8012930:	f005 fa7c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8012934:	6862      	ldr	r2, [r4, #4]
 8012936:	3507      	adds	r5, #7
 8012938:	7015      	strb	r5, [r2, #0]
 801293a:	6862      	ldr	r2, [r4, #4]
 801293c:	21a8      	movs	r1, #168	; 0xa8
 801293e:	7051      	strb	r1, [r2, #1]
 8012940:	2300      	movs	r3, #0
 8012942:	2201      	movs	r2, #1
 8012944:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8012948:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 801294c:	f7fa fe48 	bl	800d5e0 <LOGGER_StartSection>
 8012950:	2800      	cmp	r0, #0
 8012952:	d03b      	beq.n	80129cc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x3e4>
 8012954:	2305      	movs	r3, #5
 8012956:	9312      	str	r3, [sp, #72]	; 0x48
 8012958:	4b59      	ldr	r3, [pc, #356]	; (8012ac0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d8>)
 801295a:	9313      	str	r3, [sp, #76]	; 0x4c
 801295c:	ab14      	add	r3, sp, #80	; 0x50
 801295e:	e913 0003 	ldmdb	r3, {r0, r1}
 8012962:	f7fa fe45 	bl	800d5f0 <LOGGER_PrintHeader>
 8012966:	1eb3      	subs	r3, r6, #2
 8012968:	2b01      	cmp	r3, #1
 801296a:	d82b      	bhi.n	80129c4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x3dc>
 801296c:	4651      	mov	r1, sl
 801296e:	a810      	add	r0, sp, #64	; 0x40
 8012970:	f7ff fd42 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8012974:	f8b8 3017 	ldrh.w	r3, [r8, #23]
 8012978:	930a      	str	r3, [sp, #40]	; 0x28
 801297a:	f8b8 3015 	ldrh.w	r3, [r8, #21]
 801297e:	9309      	str	r3, [sp, #36]	; 0x24
 8012980:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8012984:	9308      	str	r3, [sp, #32]
 8012986:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	f8b8 300d 	ldrh.w	r3, [r8, #13]
 8012990:	9306      	str	r3, [sp, #24]
 8012992:	f8b8 300b 	ldrh.w	r3, [r8, #11]
 8012996:	9305      	str	r3, [sp, #20]
 8012998:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801299c:	9304      	str	r3, [sp, #16]
 801299e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80129a2:	9303      	str	r3, [sp, #12]
 80129a4:	f8b8 3003 	ldrh.w	r3, [r8, #3]
 80129a8:	9302      	str	r3, [sp, #8]
 80129aa:	f8b8 3001 	ldrh.w	r3, [r8, #1]
 80129ae:	4945      	ldr	r1, [pc, #276]	; (8012ac4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4dc>)
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80129ba:	4843      	ldr	r0, [pc, #268]	; (8012ac8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4e0>)
 80129bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129c0:	f7fa fdfc 	bl	800d5bc <LOGGER_Print>
 80129c4:	f7fa fdf2 	bl	800d5ac <LOGGER_PrintNL>
 80129c8:	f7fa fe10 	bl	800d5ec <LOGGER_EndSection>
 80129cc:	f7fa fe08 	bl	800d5e0 <LOGGER_StartSection>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d03c      	beq.n	8012a4e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x466>
 80129d4:	2305      	movs	r3, #5
 80129d6:	9312      	str	r3, [sp, #72]	; 0x48
 80129d8:	4b39      	ldr	r3, [pc, #228]	; (8012ac0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d8>)
 80129da:	9313      	str	r3, [sp, #76]	; 0x4c
 80129dc:	ab14      	add	r3, sp, #80	; 0x50
 80129de:	e913 0003 	ldmdb	r3, {r0, r1}
 80129e2:	f7fa fe05 	bl	800d5f0 <LOGGER_PrintHeader>
 80129e6:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d12b      	bne.n	8012a46 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x45e>
 80129ee:	4651      	mov	r1, sl
 80129f0:	a810      	add	r0, sp, #64	; 0x40
 80129f2:	f7ff fd01 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80129f6:	f8b9 3017 	ldrh.w	r3, [r9, #23]
 80129fa:	930a      	str	r3, [sp, #40]	; 0x28
 80129fc:	f8b9 3015 	ldrh.w	r3, [r9, #21]
 8012a00:	9309      	str	r3, [sp, #36]	; 0x24
 8012a02:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8012a06:	9308      	str	r3, [sp, #32]
 8012a08:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8012a0c:	9307      	str	r3, [sp, #28]
 8012a0e:	f8b9 300d 	ldrh.w	r3, [r9, #13]
 8012a12:	9306      	str	r3, [sp, #24]
 8012a14:	f8b9 300b 	ldrh.w	r3, [r9, #11]
 8012a18:	9305      	str	r3, [sp, #20]
 8012a1a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8012a1e:	9304      	str	r3, [sp, #16]
 8012a20:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8012a24:	9303      	str	r3, [sp, #12]
 8012a26:	f8b9 3003 	ldrh.w	r3, [r9, #3]
 8012a2a:	9302      	str	r3, [sp, #8]
 8012a2c:	f8b9 3001 	ldrh.w	r3, [r9, #1]
 8012a30:	4924      	ldr	r1, [pc, #144]	; (8012ac4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4dc>)
 8012a32:	9301      	str	r3, [sp, #4]
 8012a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a36:	9300      	str	r3, [sp, #0]
 8012a38:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8012a3c:	4823      	ldr	r0, [pc, #140]	; (8012acc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4e4>)
 8012a3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012a42:	f7fa fdbb 	bl	800d5bc <LOGGER_Print>
 8012a46:	f7fa fdb1 	bl	800d5ac <LOGGER_PrintNL>
 8012a4a:	f7fa fdcf 	bl	800d5ec <LOGGER_EndSection>
 8012a4e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8012a52:	f10b 0210 	add.w	r2, fp, #16
 8012a56:	f85b 1b04 	ldr.w	r1, [fp], #4
 8012a5a:	f843 1b04 	str.w	r1, [r3], #4
 8012a5e:	4593      	cmp	fp, r2
 8012a60:	d1f9      	bne.n	8012a56 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x46e>
 8012a62:	f89b 2000 	ldrb.w	r2, [fp]
 8012a66:	701a      	strb	r2, [r3, #0]
 8012a68:	4620      	mov	r0, r4
 8012a6a:	f7ff fd9b 	bl	80125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>
 8012a6e:	b318      	cbz	r0, 8012ab8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d0>
 8012a70:	3e01      	subs	r6, #1
 8012a72:	2e06      	cmp	r6, #6
 8012a74:	f63f adec 	bhi.w	8012650 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x68>
 8012a78:	a301      	add	r3, pc, #4	; (adr r3, 8012a80 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x498>)
 8012a7a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8012a7e:	bf00      	nop
 8012a80:	08012a9d 	.word	0x08012a9d
 8012a84:	08012aa5 	.word	0x08012aa5
 8012a88:	08012aa9 	.word	0x08012aa9
 8012a8c:	08012aad 	.word	0x08012aad
 8012a90:	08012ab1 	.word	0x08012ab1
 8012a94:	08012651 	.word	0x08012651
 8012a98:	08012ab5 	.word	0x08012ab5
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
 8012aa2:	e5d5      	b.n	8012650 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x68>
 8012aa4:	2302      	movs	r3, #2
 8012aa6:	e7fa      	b.n	8012a9e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8012aa8:	2303      	movs	r3, #3
 8012aaa:	e7f8      	b.n	8012a9e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8012aac:	2304      	movs	r3, #4
 8012aae:	e7f6      	b.n	8012a9e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8012ab0:	2305      	movs	r3, #5
 8012ab2:	e7f4      	b.n	8012a9e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8012ab4:	2306      	movs	r3, #6
 8012ab6:	e7f2      	b.n	8012a9e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7f7 f841 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012abe:	e5c6      	b.n	801264e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 8012ac0:	0801c878 	.word	0x0801c878
 8012ac4:	0801d024 	.word	0x0801d024
 8012ac8:	0801c9dc 	.word	0x0801c9dc
 8012acc:	0801ca4f 	.word	0x0801ca4f

08012ad0 <249d70512359d3b556e86d60c45850a37e74e9ce>:
 8012ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ad4:	4d98      	ldr	r5, [pc, #608]	; (8012d38 <249d70512359d3b556e86d60c45850a37e74e9ce+0x268>)
 8012ad6:	b089      	sub	sp, #36	; 0x24
 8012ad8:	682f      	ldr	r7, [r5, #0]
 8012ada:	f7f7 f927 	bl	8009d2c <207e15ee7bccb2eb76dd4c1d27604170dc079160>
 8012ade:	4604      	mov	r4, r0
 8012ae0:	b960      	cbnz	r0, 8012afc <249d70512359d3b556e86d60c45850a37e74e9ce+0x2c>
 8012ae2:	2302      	movs	r3, #2
 8012ae4:	9306      	str	r3, [sp, #24]
 8012ae6:	4b95      	ldr	r3, [pc, #596]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012ae8:	9307      	str	r3, [sp, #28]
 8012aea:	ab08      	add	r3, sp, #32
 8012aec:	e913 0003 	ldmdb	r3, {r0, r1}
 8012af0:	4a93      	ldr	r2, [pc, #588]	; (8012d40 <249d70512359d3b556e86d60c45850a37e74e9ce+0x270>)
 8012af2:	b009      	add	sp, #36	; 0x24
 8012af4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012af8:	f7fa bd98 	b.w	800d62c <LOGGER_PrintLine>
 8012afc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
 8012b00:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
 8012b04:	2350      	movs	r3, #80	; 0x50
 8012b06:	7043      	strb	r3, [r0, #1]
 8012b08:	1f53      	subs	r3, r2, #5
 8012b0a:	425a      	negs	r2, r3
 8012b0c:	415a      	adcs	r2, r3
 8012b0e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012b12:	f100 0642 	add.w	r6, r0, #66	; 0x42
 8012b16:	3057      	adds	r0, #87	; 0x57
 8012b18:	9000      	str	r0, [sp, #0]
 8012b1a:	b323      	cbz	r3, 8012b66 <249d70512359d3b556e86d60c45850a37e74e9ce+0x96>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f7f5 fef2 	bl	8008908 <8c07271647b7d6eded14e64818e8777967155b78>
 8012b24:	7823      	ldrb	r3, [r4, #0]
 8012b26:	2b53      	cmp	r3, #83	; 0x53
 8012b28:	d036      	beq.n	8012b98 <249d70512359d3b556e86d60c45850a37e74e9ce+0xc8>
 8012b2a:	2b90      	cmp	r3, #144	; 0x90
 8012b2c:	d015      	beq.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012b2e:	2b50      	cmp	r3, #80	; 0x50
 8012b30:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8012b34:	f040 80f9 	bne.w	8012d2a <249d70512359d3b556e86d60c45850a37e74e9ce+0x25a>
 8012b38:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8012b3c:	b9eb      	cbnz	r3, 8012b7a <249d70512359d3b556e86d60c45850a37e74e9ce+0xaa>
 8012b3e:	b949      	cbnz	r1, 8012b54 <249d70512359d3b556e86d60c45850a37e74e9ce+0x84>
 8012b40:	2304      	movs	r3, #4
 8012b42:	9306      	str	r3, [sp, #24]
 8012b44:	4b7d      	ldr	r3, [pc, #500]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	ab08      	add	r3, sp, #32
 8012b4a:	e913 0003 	ldmdb	r3, {r0, r1}
 8012b4e:	4a7d      	ldr	r2, [pc, #500]	; (8012d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x274>)
 8012b50:	f7fa fd6c 	bl	800d62c <LOGGER_PrintLine>
 8012b54:	2300      	movs	r3, #0
 8012b56:	f887 3565 	strb.w	r3, [r7, #1381]	; 0x565
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	b009      	add	sp, #36	; 0x24
 8012b5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b62:	f7f6 bfed 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012b66:	4630      	mov	r0, r6
 8012b68:	f7f5 fece 	bl	8008908 <8c07271647b7d6eded14e64818e8777967155b78>
 8012b6c:	f104 011d 	add.w	r1, r4, #29
 8012b70:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8012b74:	f004 ff1c 	bl	80179b0 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc>
 8012b78:	e7d4      	b.n	8012b24 <249d70512359d3b556e86d60c45850a37e74e9ce+0x54>
 8012b7a:	b949      	cbnz	r1, 8012b90 <249d70512359d3b556e86d60c45850a37e74e9ce+0xc0>
 8012b7c:	2304      	movs	r3, #4
 8012b7e:	9306      	str	r3, [sp, #24]
 8012b80:	4b6e      	ldr	r3, [pc, #440]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012b82:	9307      	str	r3, [sp, #28]
 8012b84:	ab08      	add	r3, sp, #32
 8012b86:	e913 0003 	ldmdb	r3, {r0, r1}
 8012b8a:	4a6f      	ldr	r2, [pc, #444]	; (8012d48 <249d70512359d3b556e86d60c45850a37e74e9ce+0x278>)
 8012b8c:	f7fa fd4e 	bl	800d62c <LOGGER_PrintLine>
 8012b90:	2300      	movs	r3, #0
 8012b92:	f887 3564 	strb.w	r3, [r7, #1380]	; 0x564
 8012b96:	e7e0      	b.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012b98:	682d      	ldr	r5, [r5, #0]
 8012b9a:	7063      	strb	r3, [r4, #1]
 8012b9c:	4631      	mov	r1, r6
 8012b9e:	a802      	add	r0, sp, #8
 8012ba0:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
 8012ba4:	f7ff fc28 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8012ba8:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d147      	bne.n	8012c40 <249d70512359d3b556e86d60c45850a37e74e9ce+0x170>
 8012bb0:	b9af      	cbnz	r7, 8012bde <249d70512359d3b556e86d60c45850a37e74e9ce+0x10e>
 8012bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012bb6:	f885 756f 	strb.w	r7, [r5, #1391]	; 0x56f
 8012bba:	2303      	movs	r3, #3
 8012bbc:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8012bc0:	9306      	str	r3, [sp, #24]
 8012bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8012bc6:	4b5d      	ldr	r3, [pc, #372]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012bc8:	9307      	str	r3, [sp, #28]
 8012bca:	4b60      	ldr	r3, [pc, #384]	; (8012d4c <249d70512359d3b556e86d60c45850a37e74e9ce+0x27c>)
 8012bcc:	a908      	add	r1, sp, #32
 8012bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd2:	4a5f      	ldr	r2, [pc, #380]	; (8012d50 <249d70512359d3b556e86d60c45850a37e74e9ce+0x280>)
 8012bd4:	e911 0003 	ldmdb	r1, {r0, r1}
 8012bd8:	f7fa fd28 	bl	800d62c <LOGGER_PrintLine>
 8012bdc:	e7bd      	b.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012bde:	f895 356f 	ldrb.w	r3, [r5, #1391]	; 0x56f
 8012be2:	2b06      	cmp	r3, #6
 8012be4:	d821      	bhi.n	8012c2a <249d70512359d3b556e86d60c45850a37e74e9ce+0x15a>
 8012be6:	e8df f003 	tbb	[pc, r3]
 8012bea:	0407      	.short	0x0407
 8012bec:	1a1c1816 	.word	0x1a1c1816
 8012bf0:	1e          	.byte	0x1e
 8012bf1:	00          	.byte	0x00
 8012bf2:	2307      	movs	r3, #7
 8012bf4:	f885 356f 	strb.w	r3, [r5, #1391]	; 0x56f
 8012bf8:	4a56      	ldr	r2, [pc, #344]	; (8012d54 <249d70512359d3b556e86d60c45850a37e74e9ce+0x284>)
 8012bfa:	f895 0569 	ldrb.w	r0, [r5, #1385]	; 0x569
 8012bfe:	6912      	ldr	r2, [r2, #16]
 8012c00:	4b55      	ldr	r3, [pc, #340]	; (8012d58 <249d70512359d3b556e86d60c45850a37e74e9ce+0x288>)
 8012c02:	f205 5564 	addw	r5, r5, #1380	; 0x564
 8012c06:	f240 11c7 	movw	r1, #455	; 0x1c7
 8012c0a:	434a      	muls	r2, r1
 8012c0c:	9500      	str	r5, [sp, #0]
 8012c0e:	2101      	movs	r1, #1
 8012c10:	f7f7 fe2a 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8012c14:	e7a1      	b.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012c16:	2308      	movs	r3, #8
 8012c18:	e7ec      	b.n	8012bf4 <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8012c1a:	2309      	movs	r3, #9
 8012c1c:	e7ea      	b.n	8012bf4 <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8012c1e:	230b      	movs	r3, #11
 8012c20:	e7e8      	b.n	8012bf4 <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8012c22:	230a      	movs	r3, #10
 8012c24:	e7e6      	b.n	8012bf4 <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8012c26:	230c      	movs	r3, #12
 8012c28:	e7e4      	b.n	8012bf4 <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	9306      	str	r3, [sp, #24]
 8012c2e:	4b43      	ldr	r3, [pc, #268]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012c30:	9307      	str	r3, [sp, #28]
 8012c32:	ab08      	add	r3, sp, #32
 8012c34:	e913 0003 	ldmdb	r3, {r0, r1}
 8012c38:	4a48      	ldr	r2, [pc, #288]	; (8012d5c <249d70512359d3b556e86d60c45850a37e74e9ce+0x28c>)
 8012c3a:	f7fa fcf7 	bl	800d62c <LOGGER_PrintLine>
 8012c3e:	e7db      	b.n	8012bf8 <249d70512359d3b556e86d60c45850a37e74e9ce+0x128>
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	d18a      	bne.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012c44:	2f00      	cmp	r7, #0
 8012c46:	d063      	beq.n	8012d10 <249d70512359d3b556e86d60c45850a37e74e9ce+0x240>
 8012c48:	4631      	mov	r1, r6
 8012c4a:	a804      	add	r0, sp, #16
 8012c4c:	f7ff fbd4 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7f5 fea7 	bl	80089a4 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>
 8012c56:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f47f af7d 	bne.w	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012c60:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d107      	bne.n	8012c78 <249d70512359d3b556e86d60c45850a37e74e9ce+0x1a8>
 8012c68:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8012c6c:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8012c70:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8012c74:	f7ff fbca 	bl	801240c <496ca019b627ff9d4bd45a012282bf5fa5089406>
 8012c78:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d105      	bne.n	8012c8c <249d70512359d3b556e86d60c45850a37e74e9ce+0x1bc>
 8012c80:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8012c84:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8012c88:	f7ff fc04 	bl	8012494 <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8012c8c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8012c90:	2b03      	cmp	r3, #3
 8012c92:	d122      	bne.n	8012cda <249d70512359d3b556e86d60c45850a37e74e9ce+0x20a>
 8012c94:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>
 8012c98:	f8cd 801c 	str.w	r8, [sp, #28]
 8012c9c:	f04f 0905 	mov.w	r9, #5
 8012ca0:	f8cd 9018 	str.w	r9, [sp, #24]
 8012ca4:	ad06      	add	r5, sp, #24
 8012ca6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012caa:	4a2d      	ldr	r2, [pc, #180]	; (8012d60 <249d70512359d3b556e86d60c45850a37e74e9ce+0x290>)
 8012cac:	f104 0741 	add.w	r7, r4, #65	; 0x41
 8012cb0:	f7fa fcbc 	bl	800d62c <LOGGER_PrintLine>
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8012cba:	f7ff fbeb 	bl	8012494 <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8012cbe:	e9cd 9806 	strd	r9, r8, [sp, #24]
 8012cc2:	4a28      	ldr	r2, [pc, #160]	; (8012d64 <249d70512359d3b556e86d60c45850a37e74e9ce+0x294>)
 8012cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012cc8:	f7fa fcb0 	bl	800d62c <LOGGER_PrintLine>
 8012ccc:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8012cd0:	4639      	mov	r1, r7
 8012cd2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8012cd6:	f7ff fb99 	bl	801240c <496ca019b627ff9d4bd45a012282bf5fa5089406>
 8012cda:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8012cde:	2b07      	cmp	r3, #7
 8012ce0:	f47f af3b 	bne.w	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012ce4:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8012ce8:	f7fe fd7a 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8012cec:	4630      	mov	r0, r6
 8012cee:	f7f5 fe7f 	bl	80089f0 <cbc0e88a681a951e559d988b61bbaa7895224382>
 8012cf2:	2305      	movs	r3, #5
 8012cf4:	9306      	str	r3, [sp, #24]
 8012cf6:	4b11      	ldr	r3, [pc, #68]	; (8012d3c <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8012cf8:	9307      	str	r3, [sp, #28]
 8012cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8012d02:	ab08      	add	r3, sp, #32
 8012d04:	e913 0003 	ldmdb	r3, {r0, r1}
 8012d08:	4a17      	ldr	r2, [pc, #92]	; (8012d68 <249d70512359d3b556e86d60c45850a37e74e9ce+0x298>)
 8012d0a:	f7fa fc8f 	bl	800d62c <LOGGER_PrintLine>
 8012d0e:	e724      	b.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012d10:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8012d14:	2b07      	cmp	r3, #7
 8012d16:	f47f af20 	bne.w	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012d1a:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8012d1e:	f7fe fd5f 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8012d22:	4630      	mov	r0, r6
 8012d24:	f7f5 fe64 	bl	80089f0 <cbc0e88a681a951e559d988b61bbaa7895224382>
 8012d28:	e717      	b.n	8012b5a <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	b009      	add	sp, #36	; 0x24
 8012d2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d32:	f001 bcb9 	b.w	80146a8 <c4cc1e8c684869221cde02c1ffd97d6034352506>
 8012d36:	bf00      	nop
 8012d38:	20000034 	.word	0x20000034
 8012d3c:	0801c878 	.word	0x0801c878
 8012d40:	0801cabe 	.word	0x0801cabe
 8012d44:	0801cae3 	.word	0x0801cae3
 8012d48:	0801caf9 	.word	0x0801caf9
 8012d4c:	0801d024 	.word	0x0801d024
 8012d50:	0801cb0b 	.word	0x0801cb0b
 8012d54:	0801a5e0 	.word	0x0801a5e0
 8012d58:	080122f9 	.word	0x080122f9
 8012d5c:	0801cb35 	.word	0x0801cb35
 8012d60:	0801cb5e 	.word	0x0801cb5e
 8012d64:	0801cb6e 	.word	0x0801cb6e
 8012d68:	0801cb7b 	.word	0x0801cb7b

08012d6c <b5c72b6730fdfd332fa9751af01c9df74e6e3448>:
 8012d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d70:	b097      	sub	sp, #92	; 0x5c
 8012d72:	f7f6 ffff 	bl	8009d74 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00>
 8012d76:	4604      	mov	r4, r0
 8012d78:	b958      	cbnz	r0, 8012d92 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x26>
 8012d7a:	2304      	movs	r3, #4
 8012d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d7e:	4a7d      	ldr	r2, [pc, #500]	; (8012f74 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x208>)
 8012d80:	4b7d      	ldr	r3, [pc, #500]	; (8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8012d82:	9310      	str	r3, [sp, #64]	; 0x40
 8012d84:	4619      	mov	r1, r3
 8012d86:	2004      	movs	r0, #4
 8012d88:	b017      	add	sp, #92	; 0x5c
 8012d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8e:	f7fa bc4d 	b.w	800d62c <LOGGER_PrintLine>
 8012d92:	2350      	movs	r3, #80	; 0x50
 8012d94:	7043      	strb	r3, [r0, #1]
 8012d96:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8012d9a:	f100 0842 	add.w	r8, r0, #66	; 0x42
 8012d9e:	b9b3      	cbnz	r3, 8012dce <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x62>
 8012da0:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d112      	bne.n	8012dce <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x62>
 8012da8:	7a02      	ldrb	r2, [r0, #8]
 8012daa:	6841      	ldr	r1, [r0, #4]
 8012dac:	4640      	mov	r0, r8
 8012dae:	f7f8 f85b 	bl	800ae68 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>
 8012db2:	b930      	cbnz	r0, 8012dc2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8012db4:	7a23      	ldrb	r3, [r4, #8]
 8012db6:	6862      	ldr	r2, [r4, #4]
 8012db8:	f104 0157 	add.w	r1, r4, #87	; 0x57
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	f7f8 fae7 	bl	800b390 <27342039fe058efec7af5218a4abe449221e7bb4>
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	b017      	add	sp, #92	; 0x5c
 8012dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dca:	f7f6 beb9 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012dce:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8012dd2:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8012dd6:	f994 10b6 	ldrsb.w	r1, [r4, #182]	; 0xb6
 8012dda:	fab2 f282 	clz	r2, r2
 8012dde:	0952      	lsrs	r2, r2, #5
 8012de0:	9201      	str	r2, [sp, #4]
 8012de2:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8012de6:	9200      	str	r2, [sp, #0]
 8012de8:	4640      	mov	r0, r8
 8012dea:	f104 0257 	add.w	r2, r4, #87	; 0x57
 8012dee:	f7f6 f861 	bl	8008eb4 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86>
 8012df2:	b940      	cbnz	r0, 8012e06 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9a>
 8012df4:	4620      	mov	r0, r4
 8012df6:	f7f6 fea3 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012dfa:	2304      	movs	r3, #4
 8012dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dfe:	4b5e      	ldr	r3, [pc, #376]	; (8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8012e00:	4a5e      	ldr	r2, [pc, #376]	; (8012f7c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x210>)
 8012e02:	9310      	str	r3, [sp, #64]	; 0x40
 8012e04:	e7be      	b.n	8012d84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x18>
 8012e06:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8012e0a:	2b05      	cmp	r3, #5
 8012e0c:	d002      	beq.n	8012e14 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa8>
 8012e0e:	3b02      	subs	r3, #2
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d822      	bhi.n	8012e5a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xee>
 8012e14:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 8012e18:	f8cd 8000 	str.w	r8, [sp]
 8012e1c:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 8012e20:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
 8012e24:	f7f5 fe24 	bl	8008a70 <e5d2a5998d8277723156e3d7efef427ee7af0c3f>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	b148      	cbz	r0, 8012e40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd4>
 8012e2c:	2305      	movs	r3, #5
 8012e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e30:	4b51      	ldr	r3, [pc, #324]	; (8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8012e32:	4a53      	ldr	r2, [pc, #332]	; (8012f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x214>)
 8012e34:	9310      	str	r3, [sp, #64]	; 0x40
 8012e36:	4619      	mov	r1, r3
 8012e38:	2005      	movs	r0, #5
 8012e3a:	f7fa fbf7 	bl	800d62c <LOGGER_PrintLine>
 8012e3e:	e7c0      	b.n	8012dc2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8012e40:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 8012e44:	f8cd 8000 	str.w	r8, [sp]
 8012e48:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 8012e4c:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
 8012e50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012e54:	430b      	orrs	r3, r1
 8012e56:	f7f5 fde9 	bl	8008a2c <5e760e12acdfba35bd9ad67595126b5a8623f934>
 8012e5a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	f040 85fe 	bne.w	8013a60 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcf4>
 8012e64:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 8012e68:	2900      	cmp	r1, #0
 8012e6a:	d06b      	beq.n	8012f44 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d8>
 8012e6c:	6863      	ldr	r3, [r4, #4]
 8012e6e:	8819      	ldrh	r1, [r3, #0]
 8012e70:	f401 4278 	and.w	r2, r1, #63488	; 0xf800
 8012e74:	f5b2 4f28 	cmp.w	r2, #43008	; 0xa800
 8012e78:	d007      	beq.n	8012e8a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x11e>
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e7e:	4a41      	ldr	r2, [pc, #260]	; (8012f84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x218>)
 8012e80:	4b3d      	ldr	r3, [pc, #244]	; (8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8012e82:	9310      	str	r3, [sp, #64]	; 0x40
 8012e84:	4619      	mov	r1, r3
 8012e86:	2003      	movs	r0, #3
 8012e88:	e7d7      	b.n	8012e3a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xce>
 8012e8a:	789a      	ldrb	r2, [r3, #2]
 8012e8c:	2ac9      	cmp	r2, #201	; 0xc9
 8012e8e:	d1f4      	bne.n	8012e7a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x10e>
 8012e90:	78df      	ldrb	r7, [r3, #3]
 8012e92:	093a      	lsrs	r2, r7, #4
 8012e94:	2a03      	cmp	r2, #3
 8012e96:	d106      	bne.n	8012ea6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x13a>
 8012e98:	4b37      	ldr	r3, [pc, #220]	; (8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8012e9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8012e9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012e9e:	4a39      	ldr	r2, [pc, #228]	; (8012f84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x218>)
 8012ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	e7c9      	b.n	8012e3a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xce>
 8012ea6:	f3c1 000a 	ubfx	r0, r1, #0, #11
 8012eaa:	f893 a005 	ldrb.w	sl, [r3, #5]
 8012eae:	9009      	str	r0, [sp, #36]	; 0x24
 8012eb0:	7918      	ldrb	r0, [r3, #4]
 8012eb2:	799b      	ldrb	r3, [r3, #6]
 8012eb4:	9306      	str	r3, [sp, #24]
 8012eb6:	b2cb      	uxtb	r3, r1
 8012eb8:	9307      	str	r3, [sp, #28]
 8012eba:	4b33      	ldr	r3, [pc, #204]	; (8012f88 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x21c>)
 8012ebc:	9004      	str	r0, [sp, #16]
 8012ebe:	681e      	ldr	r6, [r3, #0]
 8012ec0:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 8012ec4:	b143      	cbz	r3, 8012ed8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8012ec6:	f8d6 35a4 	ldr.w	r3, [r6, #1444]	; 0x5a4
 8012eca:	b12b      	cbz	r3, 8012ed8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8012ecc:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 8012ed0:	b113      	cbz	r3, 8012ed8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8012ed2:	f8d6 35a8 	ldr.w	r3, [r6, #1448]	; 0x5a8
 8012ed6:	b92b      	cbnz	r3, 8012ee4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x178>
 8012ed8:	492c      	ldr	r1, [pc, #176]	; (8012f8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x220>)
 8012eda:	482d      	ldr	r0, [pc, #180]	; (8012f90 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x224>)
 8012edc:	f240 424d 	movw	r2, #1101	; 0x44d
 8012ee0:	f7ee fb56 	bl	8001590 <EXPECT_OnAbortHandler>
 8012ee4:	2a00      	cmp	r2, #0
 8012ee6:	f040 83dd 	bne.w	80136a4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x938>
 8012eea:	4641      	mov	r1, r8
 8012eec:	a80c      	add	r0, sp, #48	; 0x30
 8012eee:	f7ff fa83 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8012ef2:	2305      	movs	r3, #5
 8012ef4:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ef6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012efa:	e9cd 2300 	strd	r2, r3, [sp]
 8012efe:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012f78 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>
 8012f02:	9a04      	ldr	r2, [sp, #16]
 8012f04:	4b23      	ldr	r3, [pc, #140]	; (8012f94 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x228>)
 8012f06:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8012f0a:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8012f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f12:	4a21      	ldr	r2, [pc, #132]	; (8012f98 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x22c>)
 8012f14:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012f18:	f7fa fb88 	bl	800d62c <LOGGER_PrintLine>
 8012f1c:	f7f6 ff76 	bl	8009e0c <794cbfdf72fe426231c38719436bf778a99748c2>
 8012f20:	2805      	cmp	r0, #5
 8012f22:	d80d      	bhi.n	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8012f24:	2053      	movs	r0, #83	; 0x53
 8012f26:	f7f6 fd4d 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d137      	bne.n	8012fa0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x234>
 8012f30:	2303      	movs	r3, #3
 8012f32:	e9cd 3b0f 	strd	r3, fp, [sp, #60]	; 0x3c
 8012f36:	4a19      	ldr	r2, [pc, #100]	; (8012f9c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x230>)
 8012f38:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012f3c:	f7fa fb76 	bl	800d62c <LOGGER_PrintLine>
 8012f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f42:	3102      	adds	r1, #2
 8012f44:	b2c9      	uxtb	r1, r1
 8012f46:	4620      	mov	r0, r4
 8012f48:	f004 ffb0 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 8012f52:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8012f56:	2b03      	cmp	r3, #3
 8012f58:	f63f af33 	bhi.w	8012dc2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8012f5c:	a201      	add	r2, pc, #4	; (adr r2, 8012f64 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1f8>)
 8012f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f62:	bf00      	nop
 8012f64:	08012dc3 	.word	0x08012dc3
 8012f68:	08013a67 	.word	0x08013a67
 8012f6c:	08013a81 	.word	0x08013a81
 8012f70:	08013a8f 	.word	0x08013a8f
 8012f74:	0801cb93 	.word	0x0801cb93
 8012f78:	0801c878 	.word	0x0801c878
 8012f7c:	0801cbb5 	.word	0x0801cbb5
 8012f80:	0801cbe5 	.word	0x0801cbe5
 8012f84:	0801cbf3 	.word	0x0801cbf3
 8012f88:	20000034 	.word	0x20000034
 8012f8c:	0801c8d4 	.word	0x0801c8d4
 8012f90:	0801cc06 	.word	0x0801cc06
 8012f94:	0801d024 	.word	0x0801d024
 8012f98:	0801cc18 	.word	0x0801cc18
 8012f9c:	0801b20a 	.word	0x0801b20a
 8012fa0:	f100 0379 	add.w	r3, r0, #121	; 0x79
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	2219      	movs	r2, #25
 8012fa8:	2100      	movs	r1, #0
 8012faa:	9308      	str	r3, [sp, #32]
 8012fac:	f005 ffe8 	bl	8018f80 <memset>
 8012fb0:	2219      	movs	r2, #25
 8012fb2:	2100      	movs	r1, #0
 8012fb4:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8012fb8:	f005 ffe2 	bl	8018f80 <memset>
 8012fbc:	462b      	mov	r3, r5
 8012fbe:	f245 3253 	movw	r2, #21331	; 0x5353
 8012fc2:	f104 0941 	add.w	r9, r4, #65	; 0x41
 8012fc6:	f823 2b41 	strh.w	r2, [r3], #65
 8012fca:	f104 0151 	add.w	r1, r4, #81	; 0x51
 8012fce:	464a      	mov	r2, r9
 8012fd0:	f852 0b04 	ldr.w	r0, [r2], #4
 8012fd4:	f843 0b04 	str.w	r0, [r3], #4
 8012fd8:	428a      	cmp	r2, r1
 8012fda:	d1f9      	bne.n	8012fd0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x264>
 8012fdc:	7812      	ldrb	r2, [r2, #0]
 8012fde:	701a      	strb	r2, [r3, #0]
 8012fe0:	2f00      	cmp	r7, #0
 8012fe2:	d05e      	beq.n	80130a2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x336>
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fe8:	4bb3      	ldr	r3, [pc, #716]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8012fea:	4ab4      	ldr	r2, [pc, #720]	; (80132bc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x550>)
 8012fec:	9310      	str	r3, [sp, #64]	; 0x40
 8012fee:	4619      	mov	r1, r3
 8012ff0:	2003      	movs	r0, #3
 8012ff2:	f7fa fb1b 	bl	800d62c <LOGGER_PrintLine>
 8012ff6:	23ff      	movs	r3, #255	; 0xff
 8012ff8:	9303      	str	r3, [sp, #12]
 8012ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ffe:	2700      	movs	r7, #0
 8013000:	9305      	str	r3, [sp, #20]
 8013002:	f04f 0b04 	mov.w	fp, #4
 8013006:	9b04      	ldr	r3, [sp, #16]
 8013008:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
 801300c:	9b05      	ldr	r3, [sp, #20]
 801300e:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 8013012:	9b03      	ldr	r3, [sp, #12]
 8013014:	f885 b096 	strb.w	fp, [r5, #150]	; 0x96
 8013018:	f003 0303 	and.w	r3, r3, #3
 801301c:	2b03      	cmp	r3, #3
 801301e:	bf1e      	ittt	ne
 8013020:	9b03      	ldrne	r3, [sp, #12]
 8013022:	f083 0303 	eorne.w	r3, r3, #3
 8013026:	9303      	strne	r3, [sp, #12]
 8013028:	9b03      	ldr	r3, [sp, #12]
 801302a:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
 801302e:	2101      	movs	r1, #1
 8013030:	4628      	mov	r0, r5
 8013032:	f004 fefb 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8013036:	686b      	ldr	r3, [r5, #4]
 8013038:	9a06      	ldr	r2, [sp, #24]
 801303a:	701a      	strb	r2, [r3, #0]
 801303c:	2101      	movs	r1, #1
 801303e:	4628      	mov	r0, r5
 8013040:	f004 fef4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8013044:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 8013048:	f8d5 8004 	ldr.w	r8, [r5, #4]
 801304c:	4798      	blx	r3
 801304e:	2101      	movs	r1, #1
 8013050:	f888 0000 	strb.w	r0, [r8]
 8013054:	4628      	mov	r0, r5
 8013056:	f004 fee9 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801305a:	686b      	ldr	r3, [r5, #4]
 801305c:	2101      	movs	r1, #1
 801305e:	f883 b000 	strb.w	fp, [r3]
 8013062:	4628      	mov	r0, r5
 8013064:	f004 fee2 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8013068:	686b      	ldr	r3, [r5, #4]
 801306a:	2210      	movs	r2, #16
 801306c:	701a      	strb	r2, [r3, #0]
 801306e:	2101      	movs	r1, #1
 8013070:	4628      	mov	r0, r5
 8013072:	f004 fedb 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8013076:	686b      	ldr	r3, [r5, #4]
 8013078:	22c9      	movs	r2, #201	; 0xc9
 801307a:	701a      	strb	r2, [r3, #0]
 801307c:	2102      	movs	r1, #2
 801307e:	4628      	mov	r0, r5
 8013080:	f004 fed4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8013084:	686b      	ldr	r3, [r5, #4]
 8013086:	3705      	adds	r7, #5
 8013088:	701f      	strb	r7, [r3, #0]
 801308a:	686b      	ldr	r3, [r5, #4]
 801308c:	22a8      	movs	r2, #168	; 0xa8
 801308e:	705a      	strb	r2, [r3, #1]
 8013090:	2301      	movs	r3, #1
 8013092:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
 8013096:	f885 3093 	strb.w	r3, [r5, #147]	; 0x93
 801309a:	4628      	mov	r0, r5
 801309c:	f7ff fa82 	bl	80125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>
 80130a0:	e74e      	b.n	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80130a2:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 80130a6:	4798      	blx	r3
 80130a8:	4582      	cmp	sl, r0
 80130aa:	d010      	beq.n	80130ce <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x362>
 80130ac:	2303      	movs	r3, #3
 80130ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80130b0:	4b81      	ldr	r3, [pc, #516]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 80130b2:	4a83      	ldr	r2, [pc, #524]	; (80132c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x554>)
 80130b4:	9310      	str	r3, [sp, #64]	; 0x40
 80130b6:	4619      	mov	r1, r3
 80130b8:	2003      	movs	r0, #3
 80130ba:	f7fa fab7 	bl	800d62c <LOGGER_PrintLine>
 80130be:	23ff      	movs	r3, #255	; 0xff
 80130c0:	9303      	str	r3, [sp, #12]
 80130c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130c6:	9305      	str	r3, [sp, #20]
 80130c8:	f04f 0b05 	mov.w	fp, #5
 80130cc:	e79b      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80130ce:	4640      	mov	r0, r8
 80130d0:	f7f5 fbd6 	bl	8008880 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80130d4:	9b06      	ldr	r3, [sp, #24]
 80130d6:	4283      	cmp	r3, r0
 80130d8:	d018      	beq.n	801310c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3a0>
 80130da:	9b04      	ldr	r3, [sp, #16]
 80130dc:	2b07      	cmp	r3, #7
 80130de:	d015      	beq.n	801310c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3a0>
 80130e0:	2303      	movs	r3, #3
 80130e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80130e4:	4640      	mov	r0, r8
 80130e6:	4b74      	ldr	r3, [pc, #464]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 80130e8:	9310      	str	r3, [sp, #64]	; 0x40
 80130ea:	f7f5 fbc9 	bl	8008880 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80130ee:	9b06      	ldr	r3, [sp, #24]
 80130f0:	9000      	str	r0, [sp, #0]
 80130f2:	4a74      	ldr	r2, [pc, #464]	; (80132c4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x558>)
 80130f4:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80130f8:	f7fa fa98 	bl	800d62c <LOGGER_PrintLine>
 80130fc:	23ff      	movs	r3, #255	; 0xff
 80130fe:	9303      	str	r3, [sp, #12]
 8013100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013104:	9305      	str	r3, [sp, #20]
 8013106:	f04f 0b06 	mov.w	fp, #6
 801310a:	e77c      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 801310c:	f896 856f 	ldrb.w	r8, [r6, #1391]	; 0x56f
 8013110:	f1b8 0f00 	cmp.w	r8, #0
 8013114:	d010      	beq.n	8013138 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3cc>
 8013116:	2303      	movs	r3, #3
 8013118:	930f      	str	r3, [sp, #60]	; 0x3c
 801311a:	4b67      	ldr	r3, [pc, #412]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 801311c:	4a6a      	ldr	r2, [pc, #424]	; (80132c8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x55c>)
 801311e:	9310      	str	r3, [sp, #64]	; 0x40
 8013120:	4619      	mov	r1, r3
 8013122:	2003      	movs	r0, #3
 8013124:	f7fa fa82 	bl	800d62c <LOGGER_PrintLine>
 8013128:	23ff      	movs	r3, #255	; 0xff
 801312a:	9303      	str	r3, [sp, #12]
 801312c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013130:	9305      	str	r3, [sp, #20]
 8013132:	f04f 0b08 	mov.w	fp, #8
 8013136:	e766      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8013138:	f8d6 35a4 	ldr.w	r3, [r6, #1444]	; 0x5a4
 801313c:	4798      	blx	r3
 801313e:	4683      	mov	fp, r0
 8013140:	b188      	cbz	r0, 8013166 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3fa>
 8013142:	2303      	movs	r3, #3
 8013144:	930f      	str	r3, [sp, #60]	; 0x3c
 8013146:	4b5c      	ldr	r3, [pc, #368]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8013148:	4a60      	ldr	r2, [pc, #384]	; (80132cc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x560>)
 801314a:	9310      	str	r3, [sp, #64]	; 0x40
 801314c:	4619      	mov	r1, r3
 801314e:	2003      	movs	r0, #3
 8013150:	f7fa fa6c 	bl	800d62c <LOGGER_PrintLine>
 8013154:	23ff      	movs	r3, #255	; 0xff
 8013156:	9303      	str	r3, [sp, #12]
 8013158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801315c:	4647      	mov	r7, r8
 801315e:	9305      	str	r3, [sp, #20]
 8013160:	f04f 0b02 	mov.w	fp, #2
 8013164:	e74f      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8013166:	6863      	ldr	r3, [r4, #4]
 8013168:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 801316c:	9205      	str	r2, [sp, #20]
 801316e:	9a04      	ldr	r2, [sp, #16]
 8013170:	2a07      	cmp	r2, #7
 8013172:	f000 8291 	beq.w	8013698 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x92c>
 8013176:	7a5a      	ldrb	r2, [r3, #9]
 8013178:	9203      	str	r2, [sp, #12]
 801317a:	f002 0e03 	and.w	lr, r2, #3
 801317e:	9a04      	ldr	r2, [sp, #16]
 8013180:	2a05      	cmp	r2, #5
 8013182:	d162      	bne.n	801324a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4de>
 8013184:	f1be 0f03 	cmp.w	lr, #3
 8013188:	f8b3 800b 	ldrh.w	r8, [r3, #11]
 801318c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8013190:	9307      	str	r3, [sp, #28]
 8013192:	bf16      	itet	ne
 8013194:	9b03      	ldrne	r3, [sp, #12]
 8013196:	f8dd a00c 	ldreq.w	sl, [sp, #12]
 801319a:	f083 0a03 	eorne.w	sl, r3, #3
 801319e:	f04f 0900 	mov.w	r9, #0
 80131a2:	9b07      	ldr	r3, [sp, #28]
 80131a4:	ea4f 0789 	mov.w	r7, r9, lsl #2
 80131a8:	4599      	cmp	r9, r3
 80131aa:	b2ff      	uxtb	r7, r7
 80131ac:	da34      	bge.n	8013218 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4ac>
 80131ae:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80131b2:	9300      	str	r3, [sp, #0]
 80131b4:	9805      	ldr	r0, [sp, #20]
 80131b6:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80131ba:	4652      	mov	r2, sl
 80131bc:	4641      	mov	r1, r8
 80131be:	f7fe ff09 	bl	8011fd4 <1f2424ac27c2cb6c4102eeae83b319f761410057>
 80131c2:	b1f0      	cbz	r0, 8013202 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x496>
 80131c4:	2104      	movs	r1, #4
 80131c6:	4628      	mov	r0, r5
 80131c8:	f004 fe30 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80131cc:	686b      	ldr	r3, [r5, #4]
 80131ce:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80131d2:	701a      	strb	r2, [r3, #0]
 80131d4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80131d8:	686a      	ldr	r2, [r5, #4]
 80131da:	0a1b      	lsrs	r3, r3, #8
 80131dc:	7053      	strb	r3, [r2, #1]
 80131de:	686b      	ldr	r3, [r5, #4]
 80131e0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80131e4:	709a      	strb	r2, [r3, #2]
 80131e6:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 80131ea:	686b      	ldr	r3, [r5, #4]
 80131ec:	2200      	movs	r2, #0
 80131ee:	f108 0801 	add.w	r8, r8, #1
 80131f2:	f109 0901 	add.w	r9, r9, #1
 80131f6:	70da      	strb	r2, [r3, #3]
 80131f8:	fa1f f888 	uxth.w	r8, r8
 80131fc:	fa0f f989 	sxth.w	r9, r9
 8013200:	e7cf      	b.n	80131a2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x436>
 8013202:	2303      	movs	r3, #3
 8013204:	930f      	str	r3, [sp, #60]	; 0x3c
 8013206:	4b2c      	ldr	r3, [pc, #176]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8013208:	4a31      	ldr	r2, [pc, #196]	; (80132d0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x564>)
 801320a:	9310      	str	r3, [sp, #64]	; 0x40
 801320c:	4619      	mov	r1, r3
 801320e:	2003      	movs	r0, #3
 8013210:	f7fa fa0c 	bl	800d62c <LOGGER_PrintLine>
 8013214:	f04f 0b01 	mov.w	fp, #1
 8013218:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	9805      	ldr	r0, [sp, #20]
 8013220:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013224:	4652      	mov	r2, sl
 8013226:	4641      	mov	r1, r8
 8013228:	f7fe fed4 	bl	8011fd4 <1f2424ac27c2cb6c4102eeae83b319f761410057>
 801322c:	2800      	cmp	r0, #0
 801322e:	f47f aeea 	bne.w	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8013232:	2303      	movs	r3, #3
 8013234:	930f      	str	r3, [sp, #60]	; 0x3c
 8013236:	4b20      	ldr	r3, [pc, #128]	; (80132b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8013238:	4a25      	ldr	r2, [pc, #148]	; (80132d0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x564>)
 801323a:	9310      	str	r3, [sp, #64]	; 0x40
 801323c:	4619      	mov	r1, r3
 801323e:	2003      	movs	r0, #3
 8013240:	f7fa f9f4 	bl	800d62c <LOGGER_PrintLine>
 8013244:	f04f 0b01 	mov.w	fp, #1
 8013248:	e6dd      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 801324a:	9a04      	ldr	r2, [sp, #16]
 801324c:	2a04      	cmp	r2, #4
 801324e:	d141      	bne.n	80132d4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x568>
 8013250:	f1be 0f03 	cmp.w	lr, #3
 8013254:	bf14      	ite	ne
 8013256:	9b03      	ldrne	r3, [sp, #12]
 8013258:	f8dd a00c 	ldreq.w	sl, [sp, #12]
 801325c:	f04f 0900 	mov.w	r9, #0
 8013260:	bf18      	it	ne
 8013262:	f083 0a03 	eorne.w	sl, r3, #3
 8013266:	464f      	mov	r7, r9
 8013268:	46c8      	mov	r8, r9
 801326a:	f7fd ff9d 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 801326e:	fa0f f389 	sxth.w	r3, r9
 8013272:	4283      	cmp	r3, r0
 8013274:	db0a      	blt.n	801328c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x520>
 8013276:	2102      	movs	r1, #2
 8013278:	4628      	mov	r0, r5
 801327a:	f004 fdd7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801327e:	686b      	ldr	r3, [r5, #4]
 8013280:	701f      	strb	r7, [r3, #0]
 8013282:	686b      	ldr	r3, [r5, #4]
 8013284:	0a3f      	lsrs	r7, r7, #8
 8013286:	705f      	strb	r7, [r3, #1]
 8013288:	2702      	movs	r7, #2
 801328a:	e6bc      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 801328c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8013290:	9300      	str	r3, [sp, #0]
 8013292:	9805      	ldr	r0, [sp, #20]
 8013294:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013298:	4652      	mov	r2, sl
 801329a:	4641      	mov	r1, r8
 801329c:	f7fe fe9a 	bl	8011fd4 <1f2424ac27c2cb6c4102eeae83b319f761410057>
 80132a0:	b138      	cbz	r0, 80132b2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x546>
 80132a2:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 80132a6:	3701      	adds	r7, #1
 80132a8:	f108 0801 	add.w	r8, r8, #1
 80132ac:	b2bf      	uxth	r7, r7
 80132ae:	fa1f f888 	uxth.w	r8, r8
 80132b2:	f109 0901 	add.w	r9, r9, #1
 80132b6:	e7d8      	b.n	801326a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4fe>
 80132b8:	0801c878 	.word	0x0801c878
 80132bc:	0801cc35 	.word	0x0801cc35
 80132c0:	0801cc48 	.word	0x0801cc48
 80132c4:	0801cc5c 	.word	0x0801cc5c
 80132c8:	0801cc87 	.word	0x0801cc87
 80132cc:	0801ccaf 	.word	0x0801ccaf
 80132d0:	0801ccc4 	.word	0x0801ccc4
 80132d4:	7a9f      	ldrb	r7, [r3, #10]
 80132d6:	9b07      	ldr	r3, [sp, #28]
 80132d8:	f1a3 0a09 	sub.w	sl, r3, #9
 80132dc:	9b04      	ldr	r3, [sp, #16]
 80132de:	2b01      	cmp	r3, #1
 80132e0:	fa5f fa8a 	uxtb.w	sl, sl
 80132e4:	f040 808d 	bne.w	8013402 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x696>
 80132e8:	f7fe fa0e 	bl	8011708 <a332c320f50553856ddcee95ff765027b8f3e118>
 80132ec:	9007      	str	r0, [sp, #28]
 80132ee:	4648      	mov	r0, r9
 80132f0:	f7fe fa42 	bl	8011778 <ee504f8deafedb03386eec1c989207132bd15110>
 80132f4:	9b07      	ldr	r3, [sp, #28]
 80132f6:	429f      	cmp	r7, r3
 80132f8:	d97b      	bls.n	80133f2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x686>
 80132fa:	2304      	movs	r3, #4
 80132fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80132fe:	4ab9      	ldr	r2, [pc, #740]	; (80135e4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x878>)
 8013300:	4bb9      	ldr	r3, [pc, #740]	; (80135e8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 8013302:	9310      	str	r3, [sp, #64]	; 0x40
 8013304:	4619      	mov	r1, r3
 8013306:	2004      	movs	r0, #4
 8013308:	f7fa f990 	bl	800d62c <LOGGER_PrintLine>
 801330c:	2700      	movs	r7, #0
 801330e:	e67a      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8013310:	6862      	ldr	r2, [r4, #4]
 8013312:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013316:	442b      	add	r3, r5
 8013318:	5c12      	ldrb	r2, [r2, r0]
 801331a:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
 801331e:	6861      	ldr	r1, [r4, #4]
 8013320:	4401      	add	r1, r0
 8013322:	7849      	ldrb	r1, [r1, #1]
 8013324:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013328:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
 801332c:	6861      	ldr	r1, [r4, #4]
 801332e:	4401      	add	r1, r0
 8013330:	7889      	ldrb	r1, [r1, #2]
 8013332:	f8a3 1063 	strh.w	r1, [r3, #99]	; 0x63
 8013336:	6862      	ldr	r2, [r4, #4]
 8013338:	4402      	add	r2, r0
 801333a:	78d2      	ldrb	r2, [r2, #3]
 801333c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8013340:	9a04      	ldr	r2, [sp, #16]
 8013342:	f8a3 1063 	strh.w	r1, [r3, #99]	; 0x63
 8013346:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 801334a:	f1ab 0304 	sub.w	r3, fp, #4
 801334e:	fa5f fb83 	uxtb.w	fp, r3
 8013352:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8013356:	300b      	adds	r0, #11
 8013358:	fa0f f388 	sxth.w	r3, r8
 801335c:	b2c0      	uxtb	r0, r0
 801335e:	f108 0801 	add.w	r8, r8, #1
 8013362:	f1bb 0f00 	cmp.w	fp, #0
 8013366:	d1d3      	bne.n	8013310 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a4>
 8013368:	1e7b      	subs	r3, r7, #1
 801336a:	2b04      	cmp	r3, #4
 801336c:	d843      	bhi.n	80133f6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x68a>
 801336e:	46d8      	mov	r8, fp
 8013370:	f04f 0960 	mov.w	r9, #96	; 0x60
 8013374:	eb05 0309 	add.w	r3, r5, r9
 8013378:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 801337c:	f7fe f9a4 	bl	80116c8 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 8013380:	b130      	cbz	r0, 8013390 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x624>
 8013382:	4547      	cmp	r7, r8
 8013384:	bf86      	itte	hi
 8013386:	f108 0801 	addhi.w	r8, r8, #1
 801338a:	fa5f f888 	uxtbhi.w	r8, r8
 801338e:	2000      	movls	r0, #0
 8013390:	f805 0009 	strb.w	r0, [r5, r9]
 8013394:	f109 0905 	add.w	r9, r9, #5
 8013398:	f1b9 0f79 	cmp.w	r9, #121	; 0x79
 801339c:	d1ea      	bne.n	8013374 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x608>
 801339e:	f1b8 0f00 	cmp.w	r8, #0
 80133a2:	d028      	beq.n	80133f6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x68a>
 80133a4:	2700      	movs	r7, #0
 80133a6:	f04f 0904 	mov.w	r9, #4
 80133aa:	f105 0a60 	add.w	sl, r5, #96	; 0x60
 80133ae:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80133b2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80133b6:	b1c3      	cbz	r3, 80133ea <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x67e>
 80133b8:	44a8      	add	r8, r5
 80133ba:	2104      	movs	r1, #4
 80133bc:	4628      	mov	r0, r5
 80133be:	f004 fd35 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80133c2:	686b      	ldr	r3, [r5, #4]
 80133c4:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80133c8:	701a      	strb	r2, [r3, #0]
 80133ca:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80133ce:	686b      	ldr	r3, [r5, #4]
 80133d0:	0a12      	lsrs	r2, r2, #8
 80133d2:	705a      	strb	r2, [r3, #1]
 80133d4:	686b      	ldr	r3, [r5, #4]
 80133d6:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80133da:	709a      	strb	r2, [r3, #2]
 80133dc:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80133e0:	686b      	ldr	r3, [r5, #4]
 80133e2:	0a12      	lsrs	r2, r2, #8
 80133e4:	3704      	adds	r7, #4
 80133e6:	70da      	strb	r2, [r3, #3]
 80133e8:	b2ff      	uxtb	r7, r7
 80133ea:	f1b9 0901 	subs.w	r9, r9, #1
 80133ee:	d2de      	bcs.n	80133ae <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x642>
 80133f0:	e609      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80133f2:	46d3      	mov	fp, sl
 80133f4:	e7ad      	b.n	8013352 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5e6>
 80133f6:	2304      	movs	r3, #4
 80133f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80133fa:	4b7b      	ldr	r3, [pc, #492]	; (80135e8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 80133fc:	4a7b      	ldr	r2, [pc, #492]	; (80135ec <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x880>)
 80133fe:	9310      	str	r3, [sp, #64]	; 0x40
 8013400:	e780      	b.n	8013304 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x598>
 8013402:	9b04      	ldr	r3, [sp, #16]
 8013404:	2b02      	cmp	r3, #2
 8013406:	d170      	bne.n	80134ea <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x77e>
 8013408:	4602      	mov	r2, r0
 801340a:	2001      	movs	r0, #1
 801340c:	e021      	b.n	8013452 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x6e6>
 801340e:	6861      	ldr	r1, [r4, #4]
 8013410:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8013414:	44ac      	add	ip, r5
 8013416:	f811 8003 	ldrb.w	r8, [r1, r3]
 801341a:	f8ac 807a 	strh.w	r8, [ip, #122]	; 0x7a
 801341e:	6861      	ldr	r1, [r4, #4]
 8013420:	4419      	add	r1, r3
 8013422:	f1aa 0a04 	sub.w	sl, sl, #4
 8013426:	7849      	ldrb	r1, [r1, #1]
 8013428:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
 801342c:	f8ac 807a 	strh.w	r8, [ip, #122]	; 0x7a
 8013430:	6861      	ldr	r1, [r4, #4]
 8013432:	4419      	add	r1, r3
 8013434:	fa5f fa8a 	uxtb.w	sl, sl
 8013438:	f891 8002 	ldrb.w	r8, [r1, #2]
 801343c:	f8ac 807c 	strh.w	r8, [ip, #124]	; 0x7c
 8013440:	6861      	ldr	r1, [r4, #4]
 8013442:	4419      	add	r1, r3
 8013444:	78cb      	ldrb	r3, [r1, #3]
 8013446:	f88c 0079 	strb.w	r0, [ip, #121]	; 0x79
 801344a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 801344e:	f8ac 807c 	strh.w	r8, [ip, #124]	; 0x7c
 8013452:	0093      	lsls	r3, r2, #2
 8013454:	330b      	adds	r3, #11
 8013456:	fa0f fc82 	sxth.w	ip, r2
 801345a:	b2db      	uxtb	r3, r3
 801345c:	3201      	adds	r2, #1
 801345e:	f1ba 0f00 	cmp.w	sl, #0
 8013462:	d1d4      	bne.n	801340e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x6a2>
 8013464:	f1be 0f03 	cmp.w	lr, #3
 8013468:	bf14      	ite	ne
 801346a:	9b03      	ldrne	r3, [sp, #12]
 801346c:	9a03      	ldreq	r2, [sp, #12]
 801346e:	9908      	ldr	r1, [sp, #32]
 8013470:	bf18      	it	ne
 8013472:	f083 0203 	eorne.w	r2, r3, #3
 8013476:	4638      	mov	r0, r7
 8013478:	f7fe ff68 	bl	801234c <ccc806ca1165fb175d70c767b8da618b114a1c9f>
 801347c:	b340      	cbz	r0, 80134d0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x764>
 801347e:	2700      	movs	r7, #0
 8013480:	f04f 0904 	mov.w	r9, #4
 8013484:	f105 0a79 	add.w	sl, r5, #121	; 0x79
 8013488:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 801348c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013490:	b1c3      	cbz	r3, 80134c4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x758>
 8013492:	44a8      	add	r8, r5
 8013494:	2104      	movs	r1, #4
 8013496:	4628      	mov	r0, r5
 8013498:	f004 fcc8 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801349c:	686b      	ldr	r3, [r5, #4]
 801349e:	f8b8 207a 	ldrh.w	r2, [r8, #122]	; 0x7a
 80134a2:	701a      	strb	r2, [r3, #0]
 80134a4:	f8b8 207a 	ldrh.w	r2, [r8, #122]	; 0x7a
 80134a8:	686b      	ldr	r3, [r5, #4]
 80134aa:	0a12      	lsrs	r2, r2, #8
 80134ac:	705a      	strb	r2, [r3, #1]
 80134ae:	686b      	ldr	r3, [r5, #4]
 80134b0:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
 80134b4:	709a      	strb	r2, [r3, #2]
 80134b6:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
 80134ba:	686b      	ldr	r3, [r5, #4]
 80134bc:	0a12      	lsrs	r2, r2, #8
 80134be:	3704      	adds	r7, #4
 80134c0:	70da      	strb	r2, [r3, #3]
 80134c2:	b2ff      	uxtb	r7, r7
 80134c4:	f1b9 0901 	subs.w	r9, r9, #1
 80134c8:	d2de      	bcs.n	8013488 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x71c>
 80134ca:	f04f 0b00 	mov.w	fp, #0
 80134ce:	e59a      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80134d0:	2303      	movs	r3, #3
 80134d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80134d4:	4b44      	ldr	r3, [pc, #272]	; (80135e8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 80134d6:	4a46      	ldr	r2, [pc, #280]	; (80135f0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x884>)
 80134d8:	9310      	str	r3, [sp, #64]	; 0x40
 80134da:	4619      	mov	r1, r3
 80134dc:	2003      	movs	r0, #3
 80134de:	f7fa f8a5 	bl	800d62c <LOGGER_PrintLine>
 80134e2:	2700      	movs	r7, #0
 80134e4:	f04f 0b07 	mov.w	fp, #7
 80134e8:	e58d      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80134ea:	9b04      	ldr	r3, [sp, #16]
 80134ec:	2b03      	cmp	r3, #3
 80134ee:	f040 80d7 	bne.w	80136a0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x934>
 80134f2:	fa0f f987 	sxth.w	r9, r7
 80134f6:	4602      	mov	r2, r0
 80134f8:	f04f 0801 	mov.w	r8, #1
 80134fc:	0093      	lsls	r3, r2, #2
 80134fe:	f103 0c0b 	add.w	ip, r3, #11
 8013502:	4591      	cmp	r9, r2
 8013504:	fa5f fc8c 	uxtb.w	ip, ip
 8013508:	d174      	bne.n	80135f4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x888>
 801350a:	f1be 0f03 	cmp.w	lr, #3
 801350e:	bf14      	ite	ne
 8013510:	9b03      	ldrne	r3, [sp, #12]
 8013512:	9a03      	ldreq	r2, [sp, #12]
 8013514:	9908      	ldr	r1, [sp, #32]
 8013516:	bf18      	it	ne
 8013518:	f083 0203 	eorne.w	r2, r3, #3
 801351c:	4638      	mov	r0, r7
 801351e:	f7fe ff15 	bl	801234c <ccc806ca1165fb175d70c767b8da618b114a1c9f>
 8013522:	2800      	cmp	r0, #0
 8013524:	d0d4      	beq.n	80134d0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x764>
 8013526:	00ba      	lsls	r2, r7, #2
 8013528:	b2d2      	uxtb	r2, r2
 801352a:	f102 030b 	add.w	r3, r2, #11
 801352e:	ebaa 0a02 	sub.w	sl, sl, r2
 8013532:	b2db      	uxtb	r3, r3
 8013534:	fa5f fa8a 	uxtb.w	sl, sl
 8013538:	2200      	movs	r2, #0
 801353a:	2001      	movs	r0, #1
 801353c:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8013540:	fa5f f18c 	uxtb.w	r1, ip
 8013544:	458a      	cmp	sl, r1
 8013546:	d174      	bne.n	8013632 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x8c6>
 8013548:	1e7b      	subs	r3, r7, #1
 801354a:	2b04      	cmp	r3, #4
 801354c:	f63f aede 	bhi.w	801330c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a0>
 8013550:	f105 0a19 	add.w	sl, r5, #25
 8013554:	46a9      	mov	r9, r5
 8013556:	f04f 0800 	mov.w	r8, #0
 801355a:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
 801355e:	b1ab      	cbz	r3, 801358c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x820>
 8013560:	45b8      	cmp	r8, r7
 8013562:	f080 8097 	bcs.w	8013694 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x928>
 8013566:	f109 0360 	add.w	r3, r9, #96	; 0x60
 801356a:	f8b9 0061 	ldrh.w	r0, [r9, #97]	; 0x61
 801356e:	9307      	str	r3, [sp, #28]
 8013570:	f7fe f8aa 	bl	80116c8 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 8013574:	2800      	cmp	r0, #0
 8013576:	d07e      	beq.n	8013676 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x90a>
 8013578:	f108 0801 	add.w	r8, r8, #1
 801357c:	fa5f f888 	uxtb.w	r8, r8
 8013580:	f889 0060 	strb.w	r0, [r9, #96]	; 0x60
 8013584:	f109 0905 	add.w	r9, r9, #5
 8013588:	45ca      	cmp	sl, r9
 801358a:	d1e6      	bne.n	801355a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x7ee>
 801358c:	f1b8 0f00 	cmp.w	r8, #0
 8013590:	f43f aebc 	beq.w	801330c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a0>
 8013594:	2700      	movs	r7, #0
 8013596:	f04f 0904 	mov.w	r9, #4
 801359a:	f105 0a60 	add.w	sl, r5, #96	; 0x60
 801359e:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80135a2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80135a6:	b1c3      	cbz	r3, 80135da <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x86e>
 80135a8:	44a8      	add	r8, r5
 80135aa:	2104      	movs	r1, #4
 80135ac:	4628      	mov	r0, r5
 80135ae:	f004 fc3d 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80135b2:	686b      	ldr	r3, [r5, #4]
 80135b4:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80135b8:	701a      	strb	r2, [r3, #0]
 80135ba:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80135be:	686b      	ldr	r3, [r5, #4]
 80135c0:	0a12      	lsrs	r2, r2, #8
 80135c2:	705a      	strb	r2, [r3, #1]
 80135c4:	686b      	ldr	r3, [r5, #4]
 80135c6:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80135ca:	709a      	strb	r2, [r3, #2]
 80135cc:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80135d0:	686b      	ldr	r3, [r5, #4]
 80135d2:	0a12      	lsrs	r2, r2, #8
 80135d4:	3704      	adds	r7, #4
 80135d6:	70da      	strb	r2, [r3, #3]
 80135d8:	b2ff      	uxtb	r7, r7
 80135da:	f1b9 0901 	subs.w	r9, r9, #1
 80135de:	d2de      	bcs.n	801359e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x832>
 80135e0:	e511      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80135e2:	bf00      	nop
 80135e4:	0801ccd2 	.word	0x0801ccd2
 80135e8:	0801c878 	.word	0x0801c878
 80135ec:	0801cce8 	.word	0x0801cce8
 80135f0:	0801cd09 	.word	0x0801cd09
 80135f4:	6861      	ldr	r1, [r4, #4]
 80135f6:	4413      	add	r3, r2
 80135f8:	442b      	add	r3, r5
 80135fa:	f811 100c 	ldrb.w	r1, [r1, ip]
 80135fe:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
 8013602:	6860      	ldr	r0, [r4, #4]
 8013604:	4460      	add	r0, ip
 8013606:	3201      	adds	r2, #1
 8013608:	7840      	ldrb	r0, [r0, #1]
 801360a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801360e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
 8013612:	6860      	ldr	r0, [r4, #4]
 8013614:	4460      	add	r0, ip
 8013616:	b212      	sxth	r2, r2
 8013618:	7880      	ldrb	r0, [r0, #2]
 801361a:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 801361e:	6861      	ldr	r1, [r4, #4]
 8013620:	4461      	add	r1, ip
 8013622:	78c9      	ldrb	r1, [r1, #3]
 8013624:	f883 8079 	strb.w	r8, [r3, #121]	; 0x79
 8013628:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801362c:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 8013630:	e764      	b.n	80134fc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x790>
 8013632:	6861      	ldr	r1, [r4, #4]
 8013634:	4494      	add	ip, r2
 8013636:	44ac      	add	ip, r5
 8013638:	f811 e003 	ldrb.w	lr, [r1, r3]
 801363c:	f8ac e061 	strh.w	lr, [ip, #97]	; 0x61
 8013640:	6861      	ldr	r1, [r4, #4]
 8013642:	4419      	add	r1, r3
 8013644:	3201      	adds	r2, #1
 8013646:	7849      	ldrb	r1, [r1, #1]
 8013648:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
 801364c:	f8ac e061 	strh.w	lr, [ip, #97]	; 0x61
 8013650:	6861      	ldr	r1, [r4, #4]
 8013652:	4419      	add	r1, r3
 8013654:	b212      	sxth	r2, r2
 8013656:	f891 e002 	ldrb.w	lr, [r1, #2]
 801365a:	f8ac e063 	strh.w	lr, [ip, #99]	; 0x63
 801365e:	6861      	ldr	r1, [r4, #4]
 8013660:	4419      	add	r1, r3
 8013662:	3304      	adds	r3, #4
 8013664:	78c9      	ldrb	r1, [r1, #3]
 8013666:	f88c 0060 	strb.w	r0, [ip, #96]	; 0x60
 801366a:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
 801366e:	f8ac e063 	strh.w	lr, [ip, #99]	; 0x63
 8013672:	b2db      	uxtb	r3, r3
 8013674:	e762      	b.n	801353c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x7d0>
 8013676:	2379      	movs	r3, #121	; 0x79
 8013678:	5ce8      	ldrb	r0, [r5, r3]
 801367a:	b140      	cbz	r0, 801368e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x922>
 801367c:	18ea      	adds	r2, r5, r3
 801367e:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 8013682:	9a07      	ldr	r2, [sp, #28]
 8013684:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8013688:	4291      	cmp	r1, r2
 801368a:	f43f af75 	beq.w	8013578 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x80c>
 801368e:	3305      	adds	r3, #5
 8013690:	2b92      	cmp	r3, #146	; 0x92
 8013692:	d1f1      	bne.n	8013678 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x90c>
 8013694:	2000      	movs	r0, #0
 8013696:	e773      	b.n	8013580 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x814>
 8013698:	23ff      	movs	r3, #255	; 0xff
 801369a:	4607      	mov	r7, r0
 801369c:	9303      	str	r3, [sp, #12]
 801369e:	e4b2      	b.n	8013006 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80136a0:	4607      	mov	r7, r0
 80136a2:	e55d      	b.n	8013160 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3f4>
 80136a4:	2a01      	cmp	r2, #1
 80136a6:	f47f ac4b 	bne.w	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80136aa:	4641      	mov	r1, r8
 80136ac:	a80c      	add	r0, sp, #48	; 0x30
 80136ae:	f7fe fea3 	bl	80123f8 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80136b2:	2305      	movs	r3, #5
 80136b4:	9a04      	ldr	r2, [sp, #16]
 80136b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80136b8:	4bd1      	ldr	r3, [pc, #836]	; (8013a00 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc94>)
 80136ba:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8013a04 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc98>
 80136be:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80136c2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80136c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80136ca:	e9cd 2300 	strd	r2, r3, [sp]
 80136ce:	ad0f      	add	r5, sp, #60	; 0x3c
 80136d0:	465b      	mov	r3, fp
 80136d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80136d6:	4acc      	ldr	r2, [pc, #816]	; (8013a08 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc9c>)
 80136d8:	f7f9 ffa8 	bl	800d62c <LOGGER_PrintLine>
 80136dc:	f896 356f 	ldrb.w	r3, [r6, #1391]	; 0x56f
 80136e0:	f506 6aae 	add.w	sl, r6, #1392	; 0x570
 80136e4:	f104 0741 	add.w	r7, r4, #65	; 0x41
 80136e8:	b1f3      	cbz	r3, 8013728 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9bc>
 80136ea:	4639      	mov	r1, r7
 80136ec:	4650      	mov	r0, sl
 80136ee:	f7f5 fded 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80136f2:	b9c8      	cbnz	r0, 8013728 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9bc>
 80136f4:	f7f9 ff74 	bl	800d5e0 <LOGGER_StartSection>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	f43f ac21 	beq.w	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80136fe:	2304      	movs	r3, #4
 8013700:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8013704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013708:	f7f9 ff72 	bl	800d5f0 <LOGGER_PrintHeader>
 801370c:	48bf      	ldr	r0, [pc, #764]	; (8013a0c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca0>)
 801370e:	f7f9 ff55 	bl	800d5bc <LOGGER_Print>
 8013712:	4650      	mov	r0, sl
 8013714:	f7f5 fdee 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 8013718:	4638      	mov	r0, r7
 801371a:	f7f5 fdeb 	bl	80092f4 <706a956218859121b399480423d2fbe6bb70cd71>
 801371e:	f7f9 ff45 	bl	800d5ac <LOGGER_PrintNL>
 8013722:	f7f9 ff63 	bl	800d5ec <LOGGER_EndSection>
 8013726:	e40b      	b.n	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8013728:	2211      	movs	r2, #17
 801372a:	2100      	movs	r1, #0
 801372c:	4650      	mov	r0, sl
 801372e:	f005 fc27 	bl	8018f80 <memset>
 8013732:	9b04      	ldr	r3, [sp, #16]
 8013734:	2b01      	cmp	r3, #1
 8013736:	f896 356f 	ldrb.w	r3, [r6, #1391]	; 0x56f
 801373a:	f200 8185 	bhi.w	8013a48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcdc>
 801373e:	9a07      	ldr	r2, [sp, #28]
 8013740:	f1a2 0a05 	sub.w	sl, r2, #5
 8013744:	1e5a      	subs	r2, r3, #1
 8013746:	fa5f fa8a 	uxtb.w	sl, sl
 801374a:	2a0b      	cmp	r2, #11
 801374c:	f200 8170 	bhi.w	8013a30 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcc4>
 8013750:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013754:	0052000c 	.word	0x0052000c
 8013758:	00f00099 	.word	0x00f00099
 801375c:	013400fc 	.word	0x013400fc
 8013760:	005d0017 	.word	0x005d0017
 8013764:	007600a4 	.word	0x007600a4
 8013768:	013f0107 	.word	0x013f0107
 801376c:	2303      	movs	r3, #3
 801376e:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8013772:	4aa7      	ldr	r2, [pc, #668]	; (8013a10 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca4>)
 8013774:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013778:	f7f9 ff58 	bl	800d62c <LOGGER_PrintLine>
 801377c:	4638      	mov	r0, r7
 801377e:	f7f6 fb61 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 8013782:	f104 0560 	add.w	r5, r4, #96	; 0x60
 8013786:	2100      	movs	r1, #0
 8013788:	2219      	movs	r2, #25
 801378a:	4628      	mov	r0, r5
 801378c:	f005 fbf8 	bl	8018f80 <memset>
 8013790:	2100      	movs	r1, #0
 8013792:	f04f 0e01 	mov.w	lr, #1
 8013796:	008b      	lsls	r3, r1, #2
 8013798:	3307      	adds	r3, #7
 801379a:	b20a      	sxth	r2, r1
 801379c:	b2db      	uxtb	r3, r3
 801379e:	3101      	adds	r1, #1
 80137a0:	f1ba 0f00 	cmp.w	sl, #0
 80137a4:	d109      	bne.n	80137ba <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa4e>
 80137a6:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 80137aa:	4798      	blx	r3
 80137ac:	f896 2581 	ldrb.w	r2, [r6, #1409]	; 0x581
 80137b0:	4639      	mov	r1, r7
 80137b2:	4628      	mov	r0, r5
 80137b4:	f7fe fe2a 	bl	801240c <496ca019b627ff9d4bd45a012282bf5fa5089406>
 80137b8:	e042      	b.n	8013840 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 80137ba:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80137be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80137c2:	4422      	add	r2, r4
 80137c4:	f81c 0003 	ldrb.w	r0, [ip, r3]
 80137c8:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 80137cc:	4463      	add	r3, ip
 80137ce:	f1aa 0a04 	sub.w	sl, sl, #4
 80137d2:	f893 c001 	ldrb.w	ip, [r3, #1]
 80137d6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80137da:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 80137de:	7898      	ldrb	r0, [r3, #2]
 80137e0:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 80137e4:	78db      	ldrb	r3, [r3, #3]
 80137e6:	f882 e060 	strb.w	lr, [r2, #96]	; 0x60
 80137ea:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80137ee:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 80137f2:	fa5f fa8a 	uxtb.w	sl, sl
 80137f6:	e7ce      	b.n	8013796 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa2a>
 80137f8:	2303      	movs	r3, #3
 80137fa:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 80137fe:	4a85      	ldr	r2, [pc, #532]	; (8013a14 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca8>)
 8013800:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013804:	f7f9 ff12 	bl	800d62c <LOGGER_PrintLine>
 8013808:	4638      	mov	r0, r7
 801380a:	f7f6 fb1b 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 801380e:	f104 0579 	add.w	r5, r4, #121	; 0x79
 8013812:	2100      	movs	r1, #0
 8013814:	2219      	movs	r2, #25
 8013816:	4628      	mov	r0, r5
 8013818:	f005 fbb2 	bl	8018f80 <memset>
 801381c:	2100      	movs	r1, #0
 801381e:	f04f 0e01 	mov.w	lr, #1
 8013822:	008b      	lsls	r3, r1, #2
 8013824:	3307      	adds	r3, #7
 8013826:	b20a      	sxth	r2, r1
 8013828:	b2db      	uxtb	r3, r3
 801382a:	3101      	adds	r1, #1
 801382c:	f1ba 0f00 	cmp.w	sl, #0
 8013830:	d10a      	bne.n	8013848 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xadc>
 8013832:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 8013836:	4798      	blx	r3
 8013838:	4639      	mov	r1, r7
 801383a:	4628      	mov	r0, r5
 801383c:	f7fe fe2a 	bl	8012494 <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8013840:	4640      	mov	r0, r8
 8013842:	f7f5 f8af 	bl	80089a4 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>
 8013846:	e0ca      	b.n	80139de <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8013848:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801384c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013850:	4422      	add	r2, r4
 8013852:	f81c 0003 	ldrb.w	r0, [ip, r3]
 8013856:	f8a2 007a 	strh.w	r0, [r2, #122]	; 0x7a
 801385a:	4463      	add	r3, ip
 801385c:	f1aa 0a04 	sub.w	sl, sl, #4
 8013860:	f893 c001 	ldrb.w	ip, [r3, #1]
 8013864:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8013868:	f8a2 007a 	strh.w	r0, [r2, #122]	; 0x7a
 801386c:	7898      	ldrb	r0, [r3, #2]
 801386e:	f8a2 007c 	strh.w	r0, [r2, #124]	; 0x7c
 8013872:	78db      	ldrb	r3, [r3, #3]
 8013874:	f882 e079 	strb.w	lr, [r2, #121]	; 0x79
 8013878:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801387c:	f8a2 007c 	strh.w	r0, [r2, #124]	; 0x7c
 8013880:	fa5f fa8a 	uxtb.w	sl, sl
 8013884:	e7cd      	b.n	8013822 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xab6>
 8013886:	2303      	movs	r3, #3
 8013888:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 801388c:	4a62      	ldr	r2, [pc, #392]	; (8013a18 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcac>)
 801388e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013892:	f7f9 fecb 	bl	800d62c <LOGGER_PrintLine>
 8013896:	4638      	mov	r0, r7
 8013898:	f7f6 fad4 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 801389c:	f104 0560 	add.w	r5, r4, #96	; 0x60
 80138a0:	2100      	movs	r1, #0
 80138a2:	2219      	movs	r2, #25
 80138a4:	4628      	mov	r0, r5
 80138a6:	f005 fb6b 	bl	8018f80 <memset>
 80138aa:	2100      	movs	r1, #0
 80138ac:	f04f 0e01 	mov.w	lr, #1
 80138b0:	008b      	lsls	r3, r1, #2
 80138b2:	3307      	adds	r3, #7
 80138b4:	b20a      	sxth	r2, r1
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	3101      	adds	r1, #1
 80138ba:	f1ba 0f00 	cmp.w	sl, #0
 80138be:	d11a      	bne.n	80138f6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xb8a>
 80138c0:	f04f 0b05 	mov.w	fp, #5
 80138c4:	e9cd b90f 	strd	fp, r9, [sp, #60]	; 0x3c
 80138c8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80138cc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80138d0:	4a52      	ldr	r2, [pc, #328]	; (8013a1c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb0>)
 80138d2:	f7f9 feab 	bl	800d62c <LOGGER_PrintLine>
 80138d6:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 80138da:	4798      	blx	r3
 80138dc:	4639      	mov	r1, r7
 80138de:	f206 5082 	addw	r0, r6, #1410	; 0x582
 80138e2:	f7fe fdd7 	bl	8012494 <f18386c4166365fe64df7dd56bd097dc60fcee43>
 80138e6:	e9cd b90f 	strd	fp, r9, [sp, #60]	; 0x3c
 80138ea:	4a4d      	ldr	r2, [pc, #308]	; (8013a20 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb4>)
 80138ec:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80138f0:	f7f9 fe9c 	bl	800d62c <LOGGER_PrintLine>
 80138f4:	e757      	b.n	80137a6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa3a>
 80138f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80138fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80138fe:	4422      	add	r2, r4
 8013900:	f81c 0003 	ldrb.w	r0, [ip, r3]
 8013904:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 8013908:	4463      	add	r3, ip
 801390a:	f1aa 0a04 	sub.w	sl, sl, #4
 801390e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8013912:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8013916:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 801391a:	7898      	ldrb	r0, [r3, #2]
 801391c:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 8013920:	78db      	ldrb	r3, [r3, #3]
 8013922:	f882 e060 	strb.w	lr, [r2, #96]	; 0x60
 8013926:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801392a:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 801392e:	fa5f fa8a 	uxtb.w	sl, sl
 8013932:	e7bd      	b.n	80138b0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xb44>
 8013934:	2303      	movs	r3, #3
 8013936:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 801393a:	4a3a      	ldr	r2, [pc, #232]	; (8013a24 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb8>)
 801393c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013940:	f7f9 fe74 	bl	800d62c <LOGGER_PrintLine>
 8013944:	4638      	mov	r0, r7
 8013946:	f7f6 fa7d 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 801394a:	e779      	b.n	8013840 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 801394c:	2303      	movs	r3, #3
 801394e:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8013952:	4a35      	ldr	r2, [pc, #212]	; (8013a28 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcbc>)
 8013954:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013958:	f7f9 fe68 	bl	800d62c <LOGGER_PrintLine>
 801395c:	4638      	mov	r0, r7
 801395e:	f7f6 fa71 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 8013962:	2100      	movs	r1, #0
 8013964:	2219      	movs	r2, #25
 8013966:	4628      	mov	r0, r5
 8013968:	f005 fb0a 	bl	8018f80 <memset>
 801396c:	2100      	movs	r1, #0
 801396e:	2001      	movs	r0, #1
 8013970:	008a      	lsls	r2, r1, #2
 8013972:	3207      	adds	r2, #7
 8013974:	b20b      	sxth	r3, r1
 8013976:	b2d2      	uxtb	r2, r2
 8013978:	3101      	adds	r1, #1
 801397a:	f1ba 0f00 	cmp.w	sl, #0
 801397e:	f43f af5f 	beq.w	8013840 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 8013982:	6865      	ldr	r5, [r4, #4]
 8013984:	eb05 0c02 	add.w	ip, r5, r2
 8013988:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801398c:	5caa      	ldrb	r2, [r5, r2]
 801398e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8013992:	f89c 5003 	ldrb.w	r5, [ip, #3]
 8013996:	3358      	adds	r3, #88	; 0x58
 8013998:	446b      	add	r3, sp
 801399a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 801399e:	f823 2c1b 	strh.w	r2, [r3, #-27]
 80139a2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80139a6:	f803 0c1c 	strb.w	r0, [r3, #-28]
 80139aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80139ae:	f1aa 0a04 	sub.w	sl, sl, #4
 80139b2:	f823 2c19 	strh.w	r2, [r3, #-25]
 80139b6:	fa5f fa8a 	uxtb.w	sl, sl
 80139ba:	e7d9      	b.n	8013970 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc04>
 80139bc:	2303      	movs	r3, #3
 80139be:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 80139c2:	4a1a      	ldr	r2, [pc, #104]	; (8013a2c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcc0>)
 80139c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80139c8:	f7f9 fe30 	bl	800d62c <LOGGER_PrintLine>
 80139cc:	4638      	mov	r0, r7
 80139ce:	f7f6 fa39 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 80139d2:	4638      	mov	r0, r7
 80139d4:	f7fd ff04 	bl	80117e0 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 80139d8:	4640      	mov	r0, r8
 80139da:	f7f5 f809 	bl	80089f0 <cbc0e88a681a951e559d988b61bbaa7895224382>
 80139de:	2300      	movs	r3, #0
 80139e0:	f896 0569 	ldrb.w	r0, [r6, #1385]	; 0x569
 80139e4:	f886 356f 	strb.w	r3, [r6, #1391]	; 0x56f
 80139e8:	f7f6 ff50 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 80139ec:	f8d6 35a8 	ldr.w	r3, [r6, #1448]	; 0x5a8
 80139f0:	9904      	ldr	r1, [sp, #16]
 80139f2:	f8d6 05ac 	ldr.w	r0, [r6, #1452]	; 0x5ac
 80139f6:	463a      	mov	r2, r7
 80139f8:	4798      	blx	r3
 80139fa:	f7ff baa1 	b.w	8012f40 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80139fe:	bf00      	nop
 8013a00:	0801cffc 	.word	0x0801cffc
 8013a04:	0801c878 	.word	0x0801c878
 8013a08:	0801cd18 	.word	0x0801cd18
 8013a0c:	0801cd36 	.word	0x0801cd36
 8013a10:	0801cd5f 	.word	0x0801cd5f
 8013a14:	0801cda4 	.word	0x0801cda4
 8013a18:	0801cdec 	.word	0x0801cdec
 8013a1c:	0801cb5e 	.word	0x0801cb5e
 8013a20:	0801cb6e 	.word	0x0801cb6e
 8013a24:	0801ce36 	.word	0x0801ce36
 8013a28:	0801ce7d 	.word	0x0801ce7d
 8013a2c:	0801cec3 	.word	0x0801cec3
 8013a30:	2203      	movs	r2, #3
 8013a32:	e9cd 290f 	strd	r2, r9, [sp, #60]	; 0x3c
 8013a36:	4a1b      	ldr	r2, [pc, #108]	; (8013aa4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd38>)
 8013a38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a3c:	f7f9 fdf6 	bl	800d62c <LOGGER_PrintLine>
 8013a40:	4638      	mov	r0, r7
 8013a42:	f7f6 f9ff 	bl	8009e44 <9384e57fa8b386170558ee17f590b88f318c4273>
 8013a46:	e7ca      	b.n	80139de <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d0c8      	beq.n	80139de <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8013a4c:	2304      	movs	r3, #4
 8013a4e:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8013a52:	4a15      	ldr	r2, [pc, #84]	; (8013aa8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd3c>)
 8013a54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a58:	465b      	mov	r3, fp
 8013a5a:	f7f9 fde7 	bl	800d62c <LOGGER_PrintLine>
 8013a5e:	e771      	b.n	8013944 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xbd8>
 8013a60:	2100      	movs	r1, #0
 8013a62:	f7ff ba6f 	b.w	8012f44 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d8>
 8013a66:	7a23      	ldrb	r3, [r4, #8]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f43f a9aa 	beq.w	8012dc2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8013a6e:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8013a72:	b19b      	cbz	r3, 8013a9c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd30>
 8013a74:	4620      	mov	r0, r4
 8013a76:	b017      	add	sp, #92	; 0x5c
 8013a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	f000 bf90 	b.w	80149a0 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69>
 8013a80:	2303      	movs	r3, #3
 8013a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a84:	4b09      	ldr	r3, [pc, #36]	; (8013aac <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd40>)
 8013a86:	4a0a      	ldr	r2, [pc, #40]	; (8013ab0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd44>)
 8013a88:	9310      	str	r3, [sp, #64]	; 0x40
 8013a8a:	f7ff b9fb 	b.w	8012e84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x118>
 8013a8e:	2303      	movs	r3, #3
 8013a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a92:	4b06      	ldr	r3, [pc, #24]	; (8013aac <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd40>)
 8013a94:	4a07      	ldr	r2, [pc, #28]	; (8013ab4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd48>)
 8013a96:	9310      	str	r3, [sp, #64]	; 0x40
 8013a98:	f7ff b9f4 	b.w	8012e84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x118>
 8013a9c:	b017      	add	sp, #92	; 0x5c
 8013a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa2:	bf00      	nop
 8013aa4:	0801cf0a 	.word	0x0801cf0a
 8013aa8:	0801cf2d 	.word	0x0801cf2d
 8013aac:	0801c878 	.word	0x0801c878
 8013ab0:	0801cf3f 	.word	0x0801cf3f
 8013ab4:	0801cf5d 	.word	0x0801cf5d

08013ab8 <retrieveIPv6Header.constprop.0>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	f04f 0a00 	mov.w	sl, #0
 8013ac0:	f883 a000 	strb.w	sl, [r3]
 8013ac4:	f881 a048 	strb.w	sl, [r1, #72]	; 0x48
 8013ac8:	f882 a048 	strb.w	sl, [r2, #72]	; 0x48
 8013acc:	f881 a025 	strb.w	sl, [r1, #37]	; 0x25
 8013ad0:	4699      	mov	r9, r3
 8013ad2:	6843      	ldr	r3, [r0, #4]
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	4614      	mov	r4, r2
 8013ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013adc:	2af0      	cmp	r2, #240	; 0xf0
 8013ade:	b095      	sub	sp, #84	; 0x54
 8013ae0:	4607      	mov	r7, r0
 8013ae2:	4688      	mov	r8, r1
 8013ae4:	f040 81bc 	bne.w	8013e60 <retrieveIPv6Header.constprop.0+0x3a8>
 8013ae8:	2201      	movs	r2, #1
 8013aea:	f003 030f 	and.w	r3, r3, #15
 8013aee:	4293      	cmp	r3, r2
 8013af0:	f889 2000 	strb.w	r2, [r9]
 8013af4:	f040 81b2 	bne.w	8013e5c <retrieveIPv6Header.constprop.0+0x3a4>
 8013af8:	6842      	ldr	r2, [r0, #4]
 8013afa:	7856      	ldrb	r6, [r2, #1]
 8013afc:	4655      	mov	r5, sl
 8013afe:	f006 02e0 	and.w	r2, r6, #224	; 0xe0
 8013b02:	2a80      	cmp	r2, #128	; 0x80
 8013b04:	f899 1000 	ldrb.w	r1, [r9]
 8013b08:	f000 80b7 	beq.w	8013c7a <retrieveIPv6Header.constprop.0+0x1c2>
 8013b0c:	2aa0      	cmp	r2, #160	; 0xa0
 8013b0e:	d071      	beq.n	8013bf4 <retrieveIPv6Header.constprop.0+0x13c>
 8013b10:	b123      	cbz	r3, 8013b1c <retrieveIPv6Header.constprop.0+0x64>
 8013b12:	f899 3000 	ldrb.w	r3, [r9]
 8013b16:	3b01      	subs	r3, #1
 8013b18:	f889 3000 	strb.w	r3, [r9]
 8013b1c:	f899 2000 	ldrb.w	r2, [r9]
 8013b20:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013b24:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8013b28:	4413      	add	r3, r2
 8013b2a:	441d      	add	r5, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	b2ed      	uxtb	r5, r5
 8013b30:	440b      	add	r3, r1
 8013b32:	5d5b      	ldrb	r3, [r3, r5]
 8013b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013b38:	2af0      	cmp	r2, #240	; 0xf0
 8013b3a:	f000 819b 	beq.w	8013e74 <retrieveIPv6Header.constprop.0+0x3bc>
 8013b3e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f101 0c01 	add.w	ip, r1, #1
 8013b48:	442b      	add	r3, r5
 8013b4a:	fa5f fc8c 	uxtb.w	ip, ip
 8013b4e:	5c5a      	ldrb	r2, [r3, r1]
 8013b50:	f884 c048 	strb.w	ip, [r4, #72]	; 0x48
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	4428      	add	r0, r5
 8013b58:	f3c2 03c1 	ubfx	r3, r2, #3, #2
 8013b5c:	f810 800c 	ldrb.w	r8, [r0, ip]
 8013b60:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 8013b64:	f002 0603 	and.w	r6, r2, #3
 8013b68:	0952      	lsrs	r2, r2, #5
 8013b6a:	3102      	adds	r1, #2
 8013b6c:	2a03      	cmp	r2, #3
 8013b6e:	f3c8 1a01 	ubfx	sl, r8, #4, #2
 8013b72:	f3c8 09c0 	ubfx	r9, r8, #3, #1
 8013b76:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8013b7a:	f008 0803 	and.w	r8, r8, #3
 8013b7e:	d00a      	beq.n	8013b96 <retrieveIPv6Header.constprop.0+0xde>
 8013b80:	2203      	movs	r2, #3
 8013b82:	920a      	str	r2, [sp, #40]	; 0x28
 8013b84:	4ab7      	ldr	r2, [pc, #732]	; (8013e64 <retrieveIPv6Header.constprop.0+0x3ac>)
 8013b86:	920b      	str	r2, [sp, #44]	; 0x2c
 8013b88:	49b6      	ldr	r1, [pc, #728]	; (8013e64 <retrieveIPv6Header.constprop.0+0x3ac>)
 8013b8a:	4ab7      	ldr	r2, [pc, #732]	; (8013e68 <retrieveIPv6Header.constprop.0+0x3b0>)
 8013b8c:	9301      	str	r3, [sp, #4]
 8013b8e:	2003      	movs	r0, #3
 8013b90:	f7f9 fd4c 	bl	800d62c <LOGGER_PrintLine>
 8013b94:	9b01      	ldr	r3, [sp, #4]
 8013b96:	2b02      	cmp	r3, #2
 8013b98:	f04f 0100 	mov.w	r1, #0
 8013b9c:	f000 8247 	beq.w	801402e <retrieveIPv6Header.constprop.0+0x576>
 8013ba0:	2b03      	cmp	r3, #3
 8013ba2:	f000 81c0 	beq.w	8013f26 <retrieveIPv6Header.constprop.0+0x46e>
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8013bac:	6061      	str	r1, [r4, #4]
 8013bae:	f040 821b 	bne.w	8013fe8 <retrieveIPv6Header.constprop.0+0x530>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	442b      	add	r3, r5
 8013bba:	041b      	lsls	r3, r3, #16
 8013bbc:	1c50      	adds	r0, r2, #1
 8013bbe:	b2c0      	uxtb	r0, r0
 8013bc0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8013bc4:	6063      	str	r3, [r4, #4]
 8013bc6:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8013bca:	6879      	ldr	r1, [r7, #4]
 8013bcc:	7809      	ldrb	r1, [r1, #0]
 8013bce:	4401      	add	r1, r0
 8013bd0:	4429      	add	r1, r5
 8013bd2:	1c90      	adds	r0, r2, #2
 8013bd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013bd8:	b2c0      	uxtb	r0, r0
 8013bda:	6063      	str	r3, [r4, #4]
 8013bdc:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8013be0:	6879      	ldr	r1, [r7, #4]
 8013be2:	7809      	ldrb	r1, [r1, #0]
 8013be4:	4401      	add	r1, r0
 8013be6:	4429      	add	r1, r5
 8013be8:	430b      	orrs	r3, r1
 8013bea:	6063      	str	r3, [r4, #4]
 8013bec:	1cd3      	adds	r3, r2, #3
 8013bee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013bf2:	e199      	b.n	8013f28 <retrieveIPv6Header.constprop.0+0x470>
 8013bf4:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	441a      	add	r2, r3
 8013bfc:	442a      	add	r2, r5
 8013bfe:	440a      	add	r2, r1
 8013c00:	f006 061f 	and.w	r6, r6, #31
 8013c04:	7852      	ldrb	r2, [r2, #1]
 8013c06:	2a06      	cmp	r2, #6
 8013c08:	f040 8114 	bne.w	8013e34 <retrieveIPv6Header.constprop.0+0x37c>
 8013c0c:	1c98      	adds	r0, r3, #2
 8013c0e:	b2c0      	uxtb	r0, r0
 8013c10:	f888 0048 	strb.w	r0, [r8, #72]	; 0x48
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	f899 1000 	ldrb.w	r1, [r9]
 8013c1a:	442a      	add	r2, r5
 8013c1c:	4402      	add	r2, r0
 8013c1e:	3303      	adds	r3, #3
 8013c20:	5c52      	ldrb	r2, [r2, r1]
 8013c22:	f888 2024 	strb.w	r2, [r8, #36]	; 0x24
 8013c26:	2100      	movs	r1, #0
 8013c28:	fa5f fb83 	uxtb.w	fp, r3
 8013c2c:	f888 1037 	strb.w	r1, [r8, #55]	; 0x37
 8013c30:	f888 b048 	strb.w	fp, [r8, #72]	; 0x48
 8013c34:	2210      	movs	r2, #16
 8013c36:	f108 0038 	add.w	r0, r8, #56	; 0x38
 8013c3a:	f005 f9a1 	bl	8018f80 <memset>
 8013c3e:	2e01      	cmp	r6, #1
 8013c40:	f04f 0100 	mov.w	r1, #0
 8013c44:	f040 8091 	bne.w	8013d6a <retrieveIPv6Header.constprop.0+0x2b2>
 8013c48:	f108 0626 	add.w	r6, r8, #38	; 0x26
 8013c4c:	2211      	movs	r2, #17
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f005 f996 	bl	8018f80 <memset>
 8013c54:	2005      	movs	r0, #5
 8013c56:	f7f4 fb8d 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8013c5a:	4a84      	ldr	r2, [pc, #528]	; (8013e6c <retrieveIPv6Header.constprop.0+0x3b4>)
 8013c5c:	4601      	mov	r1, r0
 8013c5e:	a802      	add	r0, sp, #8
 8013c60:	f7f5 fc46 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8013c64:	ab02      	add	r3, sp, #8
 8013c66:	aa06      	add	r2, sp, #24
 8013c68:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c6c:	f846 1b04 	str.w	r1, [r6], #4
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d1f9      	bne.n	8013c68 <retrieveIPv6Header.constprop.0+0x1b0>
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	7033      	strb	r3, [r6, #0]
 8013c78:	e041      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	442b      	add	r3, r5
 8013c7e:	440b      	add	r3, r1
 8013c80:	785b      	ldrb	r3, [r3, #1]
 8013c82:	1f5a      	subs	r2, r3, #5
 8013c84:	b2d2      	uxtb	r2, r2
 8013c86:	2af7      	cmp	r2, #247	; 0xf7
 8013c88:	d956      	bls.n	8013d38 <retrieveIPv6Header.constprop.0+0x280>
 8013c8a:	fa5f f28a 	uxtb.w	r2, sl
 8013c8e:	2a05      	cmp	r2, #5
 8013c90:	d109      	bne.n	8013ca6 <retrieveIPv6Header.constprop.0+0x1ee>
 8013c92:	2303      	movs	r3, #3
 8013c94:	930a      	str	r3, [sp, #40]	; 0x28
 8013c96:	4a76      	ldr	r2, [pc, #472]	; (8013e70 <retrieveIPv6Header.constprop.0+0x3b8>)
 8013c98:	4b72      	ldr	r3, [pc, #456]	; (8013e64 <retrieveIPv6Header.constprop.0+0x3ac>)
 8013c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	2003      	movs	r0, #3
 8013ca0:	f7f9 fcc4 	bl	800d62c <LOGGER_PrintLine>
 8013ca4:	e2b9      	b.n	801421a <retrieveIPv6Header.constprop.0+0x762>
 8013ca6:	b92a      	cbnz	r2, 8013cb4 <retrieveIPv6Header.constprop.0+0x1fc>
 8013ca8:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8013cac:	b911      	cbnz	r1, 8013cb4 <retrieveIPv6Header.constprop.0+0x1fc>
 8013cae:	212b      	movs	r1, #43	; 0x2b
 8013cb0:	f888 1009 	strb.w	r1, [r8, #9]
 8013cb4:	f899 0000 	ldrb.w	r0, [r9]
 8013cb8:	6879      	ldr	r1, [r7, #4]
 8013cba:	4428      	add	r0, r5
 8013cbc:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8013cc0:	4401      	add	r1, r0
 8013cc2:	f006 061f 	and.w	r6, r6, #31
 8013cc6:	2b04      	cmp	r3, #4
 8013cc8:	60d1      	str	r1, [r2, #12]
 8013cca:	f106 0601 	add.w	r6, r6, #1
 8013cce:	f105 0502 	add.w	r5, r5, #2
 8013cd2:	d806      	bhi.n	8013ce2 <retrieveIPv6Header.constprop.0+0x22a>
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d809      	bhi.n	8013cee <retrieveIPv6Header.constprop.0+0x236>
 8013cda:	e8df f003 	tbb	[pc, r3]
 8013cde:	0c24      	.short	0x0c24
 8013ce0:	1f1c      	.short	0x1f1c
 8013ce2:	2bfe      	cmp	r3, #254	; 0xfe
 8013ce4:	d01d      	beq.n	8013d22 <retrieveIPv6Header.constprop.0+0x26a>
 8013ce6:	2bff      	cmp	r3, #255	; 0xff
 8013ce8:	d020      	beq.n	8013d2c <retrieveIPv6Header.constprop.0+0x274>
 8013cea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013cee:	fa56 f685 	uxtab	r6, r6, r5
 8013cf2:	b2f5      	uxtb	r5, r6
 8013cf4:	e003      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013cf6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013cfa:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f899 1000 	ldrb.w	r1, [r9]
 8013d04:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8013d08:	442b      	add	r3, r5
 8013d0a:	440b      	add	r3, r1
 8013d0c:	f10a 0a01 	add.w	sl, sl, #1
 8013d10:	5c9e      	ldrb	r6, [r3, r2]
 8013d12:	2300      	movs	r3, #0
 8013d14:	e6f3      	b.n	8013afe <retrieveIPv6Header.constprop.0+0x46>
 8013d16:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8013d1a:	e7ee      	b.n	8013cfa <retrieveIPv6Header.constprop.0+0x242>
 8013d1c:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8013d20:	e7eb      	b.n	8013cfa <retrieveIPv6Header.constprop.0+0x242>
 8013d22:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013d26:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8013d2a:	e7e6      	b.n	8013cfa <retrieveIPv6Header.constprop.0+0x242>
 8013d2c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8013d30:	fa56 f585 	uxtab	r5, r6, r5
 8013d34:	b2ed      	uxtb	r5, r5
 8013d36:	e7e2      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013d38:	2b05      	cmp	r3, #5
 8013d3a:	d171      	bne.n	8013e20 <retrieveIPv6Header.constprop.0+0x368>
 8013d3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d40:	b90b      	cbnz	r3, 8013d46 <retrieveIPv6Header.constprop.0+0x28e>
 8013d42:	f888 3009 	strb.w	r3, [r8, #9]
 8013d46:	f899 2000 	ldrb.w	r2, [r9]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	442a      	add	r2, r5
 8013d4e:	f006 0603 	and.w	r6, r6, #3
 8013d52:	4413      	add	r3, r2
 8013d54:	2e03      	cmp	r6, #3
 8013d56:	f8c8 3020 	str.w	r3, [r8, #32]
 8013d5a:	d004      	beq.n	8013d66 <retrieveIPv6Header.constprop.0+0x2ae>
 8013d5c:	b90e      	cbnz	r6, 8013d62 <retrieveIPv6Header.constprop.0+0x2aa>
 8013d5e:	3505      	adds	r5, #5
 8013d60:	e7e8      	b.n	8013d34 <retrieveIPv6Header.constprop.0+0x27c>
 8013d62:	3504      	adds	r5, #4
 8013d64:	e7e6      	b.n	8013d34 <retrieveIPv6Header.constprop.0+0x27c>
 8013d66:	3503      	adds	r5, #3
 8013d68:	e7e4      	b.n	8013d34 <retrieveIPv6Header.constprop.0+0x27c>
 8013d6a:	2e09      	cmp	r6, #9
 8013d6c:	f106 32ff 	add.w	r2, r6, #4294967295
 8013d70:	d01e      	beq.n	8013db0 <retrieveIPv6Header.constprop.0+0x2f8>
 8013d72:	2a10      	cmp	r2, #16
 8013d74:	d154      	bne.n	8013e20 <retrieveIPv6Header.constprop.0+0x368>
 8013d76:	f899 6000 	ldrb.w	r6, [r9]
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	445e      	add	r6, fp
 8013d7e:	442e      	add	r6, r5
 8013d80:	460b      	mov	r3, r1
 8013d82:	2203      	movs	r2, #3
 8013d84:	1981      	adds	r1, r0, r6
 8013d86:	a802      	add	r0, sp, #8
 8013d88:	f004 f81b 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8013d8c:	ab02      	add	r3, sp, #8
 8013d8e:	f108 0226 	add.w	r2, r8, #38	; 0x26
 8013d92:	a906      	add	r1, sp, #24
 8013d94:	f853 0b04 	ldr.w	r0, [r3], #4
 8013d98:	f842 0b04 	str.w	r0, [r2], #4
 8013d9c:	428b      	cmp	r3, r1
 8013d9e:	d1f9      	bne.n	8013d94 <retrieveIPv6Header.constprop.0+0x2dc>
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	7013      	strb	r3, [r2, #0]
 8013da4:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013da8:	3310      	adds	r3, #16
 8013daa:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
 8013dae:	e7a6      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013db0:	f899 6000 	ldrb.w	r6, [r9]
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	445e      	add	r6, fp
 8013db8:	442e      	add	r6, r5
 8013dba:	460b      	mov	r3, r1
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	1981      	adds	r1, r0, r6
 8013dc0:	a802      	add	r0, sp, #8
 8013dc2:	f003 fffe 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8013dc6:	ae06      	add	r6, sp, #24
 8013dc8:	f10d 0c08 	add.w	ip, sp, #8
 8013dcc:	ab0f      	add	r3, sp, #60	; 0x3c
 8013dce:	f8dc 0000 	ldr.w	r0, [ip]
 8013dd2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013dd6:	469e      	mov	lr, r3
 8013dd8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013ddc:	f10c 0c08 	add.w	ip, ip, #8
 8013de0:	45b4      	cmp	ip, r6
 8013de2:	4673      	mov	r3, lr
 8013de4:	d1f3      	bne.n	8013dce <retrieveIPv6Header.constprop.0+0x316>
 8013de6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013dea:	f88e 1000 	strb.w	r1, [lr]
 8013dee:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013df2:	3308      	adds	r3, #8
 8013df4:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
 8013df8:	2005      	movs	r0, #5
 8013dfa:	f7f4 fabb 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8013dfe:	aa0f      	add	r2, sp, #60	; 0x3c
 8013e00:	4601      	mov	r1, r0
 8013e02:	a802      	add	r0, sp, #8
 8013e04:	f7f5 fb74 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8013e08:	ab02      	add	r3, sp, #8
 8013e0a:	f108 0226 	add.w	r2, r8, #38	; 0x26
 8013e0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013e12:	f842 1b04 	str.w	r1, [r2], #4
 8013e16:	42b3      	cmp	r3, r6
 8013e18:	d1f9      	bne.n	8013e0e <retrieveIPv6Header.constprop.0+0x356>
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	7013      	strb	r3, [r2, #0]
 8013e1e:	e76e      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013e20:	2303      	movs	r3, #3
 8013e22:	930a      	str	r3, [sp, #40]	; 0x28
 8013e24:	4b0f      	ldr	r3, [pc, #60]	; (8013e64 <retrieveIPv6Header.constprop.0+0x3ac>)
 8013e26:	4a12      	ldr	r2, [pc, #72]	; (8013e70 <retrieveIPv6Header.constprop.0+0x3b8>)
 8013e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	2003      	movs	r0, #3
 8013e2e:	f7f9 fbfd 	bl	800d62c <LOGGER_PrintLine>
 8013e32:	e764      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013e34:	2303      	movs	r3, #3
 8013e36:	930a      	str	r3, [sp, #40]	; 0x28
 8013e38:	4b0a      	ldr	r3, [pc, #40]	; (8013e64 <retrieveIPv6Header.constprop.0+0x3ac>)
 8013e3a:	4a0d      	ldr	r2, [pc, #52]	; (8013e70 <retrieveIPv6Header.constprop.0+0x3b8>)
 8013e3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e3e:	4619      	mov	r1, r3
 8013e40:	2003      	movs	r0, #3
 8013e42:	f7f9 fbf3 	bl	800d62c <LOGGER_PrintLine>
 8013e46:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
 8013e4a:	3502      	adds	r5, #2
 8013e4c:	3302      	adds	r3, #2
 8013e4e:	fa56 f585 	uxtab	r5, r6, r5
 8013e52:	441e      	add	r6, r3
 8013e54:	b2ed      	uxtb	r5, r5
 8013e56:	f888 6025 	strb.w	r6, [r8, #37]	; 0x25
 8013e5a:	e750      	b.n	8013cfe <retrieveIPv6Header.constprop.0+0x246>
 8013e5c:	4655      	mov	r5, sl
 8013e5e:	e658      	b.n	8013b12 <retrieveIPv6Header.constprop.0+0x5a>
 8013e60:	4655      	mov	r5, sl
 8013e62:	e65b      	b.n	8013b1c <retrieveIPv6Header.constprop.0+0x64>
 8013e64:	0801d073 	.word	0x0801d073
 8013e68:	0801d058 	.word	0x0801d058
 8013e6c:	0801d130 	.word	0x0801d130
 8013e70:	0801d044 	.word	0x0801d044
 8013e74:	1c4a      	adds	r2, r1, #1
 8013e76:	b2d2      	uxtb	r2, r2
 8013e78:	f013 030f 	ands.w	r3, r3, #15
 8013e7c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8013e80:	f43f ae5d 	beq.w	8013b3e <retrieveIPv6Header.constprop.0+0x86>
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	f040 81c8 	bne.w	801421a <retrieveIPv6Header.constprop.0+0x762>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	442b      	add	r3, r5
 8013e8e:	f813 8002 	ldrb.w	r8, [r3, r2]
 8013e92:	f008 03c0 	and.w	r3, r8, #192	; 0xc0
 8013e96:	2b80      	cmp	r3, #128	; 0x80
 8013e98:	f47f ae51 	bne.w	8013b3e <retrieveIPv6Header.constprop.0+0x86>
 8013e9c:	f008 03e0 	and.w	r3, r8, #224	; 0xe0
 8013ea0:	2ba0      	cmp	r3, #160	; 0xa0
 8013ea2:	f040 81ba 	bne.w	801421a <retrieveIPv6Header.constprop.0+0x762>
 8013ea6:	1c8b      	adds	r3, r1, #2
 8013ea8:	b2db      	uxtb	r3, r3
 8013eaa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	442a      	add	r2, r5
 8013eb2:	5cd3      	ldrb	r3, [r2, r3]
 8013eb4:	2b06      	cmp	r3, #6
 8013eb6:	f040 81b0 	bne.w	801421a <retrieveIPv6Header.constprop.0+0x762>
 8013eba:	1ccb      	adds	r3, r1, #3
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	442a      	add	r2, r5
 8013ec6:	3104      	adds	r1, #4
 8013ec8:	5cd3      	ldrb	r3, [r2, r3]
 8013eca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8013ece:	b2ce      	uxtb	r6, r1
 8013ed0:	f04f 0900 	mov.w	r9, #0
 8013ed4:	f008 081f 	and.w	r8, r8, #31
 8013ed8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
 8013edc:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
 8013ee0:	2210      	movs	r2, #16
 8013ee2:	4649      	mov	r1, r9
 8013ee4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013ee8:	f005 f84a 	bl	8018f80 <memset>
 8013eec:	f1b8 0f01 	cmp.w	r8, #1
 8013ef0:	f040 8253 	bne.w	801439a <retrieveIPv6Header.constprop.0+0x8e2>
 8013ef4:	3426      	adds	r4, #38	; 0x26
 8013ef6:	2211      	movs	r2, #17
 8013ef8:	4649      	mov	r1, r9
 8013efa:	4620      	mov	r0, r4
 8013efc:	f005 f840 	bl	8018f80 <memset>
 8013f00:	2005      	movs	r0, #5
 8013f02:	f7f4 fa37 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8013f06:	4aa0      	ldr	r2, [pc, #640]	; (8014188 <retrieveIPv6Header.constprop.0+0x6d0>)
 8013f08:	4601      	mov	r1, r0
 8013f0a:	a802      	add	r0, sp, #8
 8013f0c:	f7f5 faf0 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8013f10:	ab02      	add	r3, sp, #8
 8013f12:	aa06      	add	r2, sp, #24
 8013f14:	f853 1b04 	ldr.w	r1, [r3], #4
 8013f18:	f844 1b04 	str.w	r1, [r4], #4
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d1f9      	bne.n	8013f14 <retrieveIPv6Header.constprop.0+0x45c>
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	7023      	strb	r3, [r4, #0]
 8013f24:	e179      	b.n	801421a <retrieveIPv6Header.constprop.0+0x762>
 8013f26:	6061      	str	r1, [r4, #4]
 8013f28:	f1bb 0f00 	cmp.w	fp, #0
 8013f2c:	f040 8084 	bne.w	8014038 <retrieveIPv6Header.constprop.0+0x580>
 8013f30:	f884 b008 	strb.w	fp, [r4, #8]
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013f3a:	442a      	add	r2, r5
 8013f3c:	5cd2      	ldrb	r2, [r2, r3]
 8013f3e:	7262      	strb	r2, [r4, #9]
 8013f40:	3301      	adds	r3, #1
 8013f42:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013f46:	2e02      	cmp	r6, #2
 8013f48:	d079      	beq.n	801403e <retrieveIPv6Header.constprop.0+0x586>
 8013f4a:	2e03      	cmp	r6, #3
 8013f4c:	d07b      	beq.n	8014046 <retrieveIPv6Header.constprop.0+0x58e>
 8013f4e:	2e01      	cmp	r6, #1
 8013f50:	bf1b      	ittet	ne
 8013f52:	687a      	ldrne	r2, [r7, #4]
 8013f54:	f894 3048 	ldrbne.w	r3, [r4, #72]	; 0x48
 8013f58:	f884 6024 	strbeq.w	r6, [r4, #36]	; 0x24
 8013f5c:	1952      	addne	r2, r2, r5
 8013f5e:	bf1f      	itttt	ne
 8013f60:	5cd2      	ldrbne	r2, [r2, r3]
 8013f62:	f884 2024 	strbne.w	r2, [r4, #36]	; 0x24
 8013f66:	3301      	addne	r3, #1
 8013f68:	f884 3048 	strbne.w	r3, [r4, #72]	; 0x48
 8013f6c:	f1ba 0f02 	cmp.w	sl, #2
 8013f70:	ae06      	add	r6, sp, #24
 8013f72:	f000 80a9 	beq.w	80140c8 <retrieveIPv6Header.constprop.0+0x610>
 8013f76:	f1ba 0f03 	cmp.w	sl, #3
 8013f7a:	d066      	beq.n	801404a <retrieveIPv6Header.constprop.0+0x592>
 8013f7c:	f1ba 0f01 	cmp.w	sl, #1
 8013f80:	6879      	ldr	r1, [r7, #4]
 8013f82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013f86:	f040 80e6 	bne.w	8014156 <retrieveIPv6Header.constprop.0+0x69e>
 8013f8a:	1958      	adds	r0, r3, r5
 8013f8c:	4401      	add	r1, r0
 8013f8e:	2300      	movs	r3, #0
 8013f90:	2202      	movs	r2, #2
 8013f92:	a802      	add	r0, sp, #8
 8013f94:	f003 ff15 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8013f98:	ab0f      	add	r3, sp, #60	; 0x3c
 8013f9a:	f10d 0c08 	add.w	ip, sp, #8
 8013f9e:	469a      	mov	sl, r3
 8013fa0:	f8dc 0000 	ldr.w	r0, [ip]
 8013fa4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	c203      	stmia	r2!, {r0, r1}
 8013fac:	f10c 0c08 	add.w	ip, ip, #8
 8013fb0:	45b4      	cmp	ip, r6
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	d1f4      	bne.n	8013fa0 <retrieveIPv6Header.constprop.0+0x4e8>
 8013fb6:	7832      	ldrb	r2, [r6, #0]
 8013fb8:	701a      	strb	r2, [r3, #0]
 8013fba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013fbe:	3308      	adds	r3, #8
 8013fc0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8013fc4:	2005      	movs	r0, #5
 8013fc6:	f7f4 f9d5 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8013fca:	4652      	mov	r2, sl
 8013fcc:	4601      	mov	r1, r0
 8013fce:	a802      	add	r0, sp, #8
 8013fd0:	f7f5 fa8e 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8013fd4:	aa02      	add	r2, sp, #8
 8013fd6:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8013fda:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fde:	f843 1b04 	str.w	r1, [r3], #4
 8013fe2:	42b2      	cmp	r2, r6
 8013fe4:	d1f9      	bne.n	8013fda <retrieveIPv6Header.constprop.0+0x522>
 8013fe6:	e0b3      	b.n	8014150 <retrieveIPv6Header.constprop.0+0x698>
 8013fe8:	1c51      	adds	r1, r2, #1
 8013fea:	b2c9      	uxtb	r1, r1
 8013fec:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	440b      	add	r3, r1
 8013ff6:	442b      	add	r3, r5
 8013ff8:	041b      	lsls	r3, r3, #16
 8013ffa:	1c90      	adds	r0, r2, #2
 8013ffc:	b2c0      	uxtb	r0, r0
 8013ffe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8014002:	6063      	str	r3, [r4, #4]
 8014004:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8014008:	6879      	ldr	r1, [r7, #4]
 801400a:	7809      	ldrb	r1, [r1, #0]
 801400c:	4401      	add	r1, r0
 801400e:	4429      	add	r1, r5
 8014010:	1cd0      	adds	r0, r2, #3
 8014012:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8014016:	b2c0      	uxtb	r0, r0
 8014018:	6063      	str	r3, [r4, #4]
 801401a:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 801401e:	6879      	ldr	r1, [r7, #4]
 8014020:	7809      	ldrb	r1, [r1, #0]
 8014022:	4401      	add	r1, r0
 8014024:	4429      	add	r1, r5
 8014026:	430b      	orrs	r3, r1
 8014028:	6063      	str	r3, [r4, #4]
 801402a:	1d13      	adds	r3, r2, #4
 801402c:	e5df      	b.n	8013bee <retrieveIPv6Header.constprop.0+0x136>
 801402e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014032:	6061      	str	r1, [r4, #4]
 8014034:	3301      	adds	r3, #1
 8014036:	e5da      	b.n	8013bee <retrieveIPv6Header.constprop.0+0x136>
 8014038:	2301      	movs	r3, #1
 801403a:	7223      	strb	r3, [r4, #8]
 801403c:	e783      	b.n	8013f46 <retrieveIPv6Header.constprop.0+0x48e>
 801403e:	2340      	movs	r3, #64	; 0x40
 8014040:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8014044:	e792      	b.n	8013f6c <retrieveIPv6Header.constprop.0+0x4b4>
 8014046:	23ff      	movs	r3, #255	; 0xff
 8014048:	e7fa      	b.n	8014040 <retrieveIPv6Header.constprop.0+0x588>
 801404a:	2005      	movs	r0, #5
 801404c:	f7f4 f992 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014050:	f107 0241 	add.w	r2, r7, #65	; 0x41
 8014054:	4601      	mov	r1, r0
 8014056:	a802      	add	r0, sp, #8
 8014058:	f7f5 fa4a 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801405c:	aa02      	add	r2, sp, #8
 801405e:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8014062:	f852 1b04 	ldr.w	r1, [r2], #4
 8014066:	f843 1b04 	str.w	r1, [r3], #4
 801406a:	42b2      	cmp	r2, r6
 801406c:	d1f9      	bne.n	8014062 <retrieveIPv6Header.constprop.0+0x5aa>
 801406e:	7832      	ldrb	r2, [r6, #0]
 8014070:	701a      	strb	r2, [r3, #0]
 8014072:	f7f5 fbc9 	bl	8009808 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 8014076:	6803      	ldr	r3, [r0, #0]
 8014078:	f8c4 3027 	str.w	r3, [r4, #39]	; 0x27
 801407c:	6843      	ldr	r3, [r0, #4]
 801407e:	f8c4 302b 	str.w	r3, [r4, #43]	; 0x2b
 8014082:	f1b9 0f00 	cmp.w	r9, #0
 8014086:	f000 80d5 	beq.w	8014234 <retrieveIPv6Header.constprop.0+0x77c>
 801408a:	f1b8 0f02 	cmp.w	r8, #2
 801408e:	d07f      	beq.n	8014190 <retrieveIPv6Header.constprop.0+0x6d8>
 8014090:	f1b8 0f03 	cmp.w	r8, #3
 8014094:	f040 80c4 	bne.w	8014220 <retrieveIPv6Header.constprop.0+0x768>
 8014098:	4b3c      	ldr	r3, [pc, #240]	; (801418c <retrieveIPv6Header.constprop.0+0x6d4>)
 801409a:	f104 0237 	add.w	r2, r4, #55	; 0x37
 801409e:	f103 0110 	add.w	r1, r3, #16
 80140a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80140a6:	f842 0b04 	str.w	r0, [r2], #4
 80140aa:	428b      	cmp	r3, r1
 80140ac:	d1f9      	bne.n	80140a2 <retrieveIPv6Header.constprop.0+0x5ea>
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	7013      	strb	r3, [r2, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80140b8:	442a      	add	r2, r5
 80140ba:	5cd2      	ldrb	r2, [r2, r3]
 80140bc:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 80140c0:	3301      	adds	r3, #1
 80140c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80140c6:	e09b      	b.n	8014200 <retrieveIPv6Header.constprop.0+0x748>
 80140c8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	4429      	add	r1, r5
 80140d0:	2300      	movs	r3, #0
 80140d2:	2201      	movs	r2, #1
 80140d4:	4401      	add	r1, r0
 80140d6:	a802      	add	r0, sp, #8
 80140d8:	f003 fe73 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80140dc:	ab0a      	add	r3, sp, #40	; 0x28
 80140de:	aa02      	add	r2, sp, #8
 80140e0:	469e      	mov	lr, r3
 80140e2:	6810      	ldr	r0, [r2, #0]
 80140e4:	6851      	ldr	r1, [r2, #4]
 80140e6:	469c      	mov	ip, r3
 80140e8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80140ec:	3208      	adds	r2, #8
 80140ee:	42b2      	cmp	r2, r6
 80140f0:	4663      	mov	r3, ip
 80140f2:	d1f6      	bne.n	80140e2 <retrieveIPv6Header.constprop.0+0x62a>
 80140f4:	7832      	ldrb	r2, [r6, #0]
 80140f6:	f88c 2000 	strb.w	r2, [ip]
 80140fa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80140fe:	3302      	adds	r3, #2
 8014100:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014104:	4671      	mov	r1, lr
 8014106:	a802      	add	r0, sp, #8
 8014108:	f7f5 fa8c 	bl	8009624 <9730579196d24a2a06a66ac441c59b7f99b57834>
 801410c:	ab0f      	add	r3, sp, #60	; 0x3c
 801410e:	f10d 0c08 	add.w	ip, sp, #8
 8014112:	469a      	mov	sl, r3
 8014114:	f8dc 0000 	ldr.w	r0, [ip]
 8014118:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801411c:	461a      	mov	r2, r3
 801411e:	c203      	stmia	r2!, {r0, r1}
 8014120:	f10c 0c08 	add.w	ip, ip, #8
 8014124:	45b4      	cmp	ip, r6
 8014126:	4613      	mov	r3, r2
 8014128:	d1f4      	bne.n	8014114 <retrieveIPv6Header.constprop.0+0x65c>
 801412a:	7832      	ldrb	r2, [r6, #0]
 801412c:	701a      	strb	r2, [r3, #0]
 801412e:	2005      	movs	r0, #5
 8014130:	f7f4 f920 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014134:	4652      	mov	r2, sl
 8014136:	4601      	mov	r1, r0
 8014138:	a802      	add	r0, sp, #8
 801413a:	f7f5 f9d9 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801413e:	aa02      	add	r2, sp, #8
 8014140:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8014144:	f852 1b04 	ldr.w	r1, [r2], #4
 8014148:	f843 1b04 	str.w	r1, [r3], #4
 801414c:	42b2      	cmp	r2, r6
 801414e:	d1f9      	bne.n	8014144 <retrieveIPv6Header.constprop.0+0x68c>
 8014150:	7832      	ldrb	r2, [r6, #0]
 8014152:	701a      	strb	r2, [r3, #0]
 8014154:	e795      	b.n	8014082 <retrieveIPv6Header.constprop.0+0x5ca>
 8014156:	1958      	adds	r0, r3, r5
 8014158:	2203      	movs	r2, #3
 801415a:	2300      	movs	r3, #0
 801415c:	4401      	add	r1, r0
 801415e:	a802      	add	r0, sp, #8
 8014160:	f003 fe2f 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8014164:	aa02      	add	r2, sp, #8
 8014166:	f104 0326 	add.w	r3, r4, #38	; 0x26
 801416a:	f852 1b04 	ldr.w	r1, [r2], #4
 801416e:	f843 1b04 	str.w	r1, [r3], #4
 8014172:	42b2      	cmp	r2, r6
 8014174:	d1f9      	bne.n	801416a <retrieveIPv6Header.constprop.0+0x6b2>
 8014176:	7832      	ldrb	r2, [r6, #0]
 8014178:	701a      	strb	r2, [r3, #0]
 801417a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801417e:	3310      	adds	r3, #16
 8014180:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014184:	e77d      	b.n	8014082 <retrieveIPv6Header.constprop.0+0x5ca>
 8014186:	bf00      	nop
 8014188:	0801d130 	.word	0x0801d130
 801418c:	0801a492 	.word	0x0801a492
 8014190:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	4429      	add	r1, r5
 8014198:	2300      	movs	r3, #0
 801419a:	4401      	add	r1, r0
 801419c:	2201      	movs	r2, #1
 801419e:	a802      	add	r0, sp, #8
 80141a0:	f003 fe0f 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80141a4:	ab0a      	add	r3, sp, #40	; 0x28
 80141a6:	f10d 0c08 	add.w	ip, sp, #8
 80141aa:	4699      	mov	r9, r3
 80141ac:	f8dc 0000 	ldr.w	r0, [ip]
 80141b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80141b4:	469e      	mov	lr, r3
 80141b6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80141ba:	f10c 0c08 	add.w	ip, ip, #8
 80141be:	45b4      	cmp	ip, r6
 80141c0:	4673      	mov	r3, lr
 80141c2:	d1f3      	bne.n	80141ac <retrieveIPv6Header.constprop.0+0x6f4>
 80141c4:	7832      	ldrb	r2, [r6, #0]
 80141c6:	f88e 2000 	strb.w	r2, [lr]
 80141ca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80141ce:	46a0      	mov	r8, r4
 80141d0:	3302      	adds	r3, #2
 80141d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80141d6:	2303      	movs	r3, #3
 80141d8:	f808 3f37 	strb.w	r3, [r8, #55]!
 80141dc:	2005      	movs	r0, #5
 80141de:	f7f4 f8c9 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80141e2:	464a      	mov	r2, r9
 80141e4:	4601      	mov	r1, r0
 80141e6:	a802      	add	r0, sp, #8
 80141e8:	f7f5 fa62 	bl	80096b0 <144ed7de545b4a42832ce04a16bf065a50d4ff30>
 80141ec:	ab02      	add	r3, sp, #8
 80141ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80141f2:	f848 2b04 	str.w	r2, [r8], #4
 80141f6:	42b3      	cmp	r3, r6
 80141f8:	d1f9      	bne.n	80141ee <retrieveIPv6Header.constprop.0+0x736>
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f888 3000 	strb.w	r3, [r8]
 8014200:	7a23      	ldrb	r3, [r4, #8]
 8014202:	b153      	cbz	r3, 801421a <retrieveIPv6Header.constprop.0+0x762>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 801420a:	442b      	add	r3, r5
 801420c:	5c9b      	ldrb	r3, [r3, r2]
 801420e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014212:	2bf0      	cmp	r3, #240	; 0xf0
 8014214:	d101      	bne.n	801421a <retrieveIPv6Header.constprop.0+0x762>
 8014216:	2311      	movs	r3, #17
 8014218:	7263      	strb	r3, [r4, #9]
 801421a:	b015      	add	sp, #84	; 0x54
 801421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014220:	2303      	movs	r3, #3
 8014222:	9308      	str	r3, [sp, #32]
 8014224:	4b86      	ldr	r3, [pc, #536]	; (8014440 <retrieveIPv6Header.constprop.0+0x988>)
 8014226:	4a87      	ldr	r2, [pc, #540]	; (8014444 <retrieveIPv6Header.constprop.0+0x98c>)
 8014228:	9309      	str	r3, [sp, #36]	; 0x24
 801422a:	4619      	mov	r1, r3
 801422c:	2003      	movs	r0, #3
 801422e:	f7f9 f9fd 	bl	800d62c <LOGGER_PrintLine>
 8014232:	e7e5      	b.n	8014200 <retrieveIPv6Header.constprop.0+0x748>
 8014234:	f1b8 0f02 	cmp.w	r8, #2
 8014238:	d052      	beq.n	80142e0 <retrieveIPv6Header.constprop.0+0x828>
 801423a:	f1b8 0f03 	cmp.w	r8, #3
 801423e:	d037      	beq.n	80142b0 <retrieveIPv6Header.constprop.0+0x7f8>
 8014240:	f1b8 0f01 	cmp.w	r8, #1
 8014244:	6879      	ldr	r1, [r7, #4]
 8014246:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801424a:	f040 8090 	bne.w	801436e <retrieveIPv6Header.constprop.0+0x8b6>
 801424e:	1958      	adds	r0, r3, r5
 8014250:	4401      	add	r1, r0
 8014252:	464b      	mov	r3, r9
 8014254:	2202      	movs	r2, #2
 8014256:	a802      	add	r0, sp, #8
 8014258:	f003 fdb3 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 801425c:	ab0f      	add	r3, sp, #60	; 0x3c
 801425e:	f10d 0c08 	add.w	ip, sp, #8
 8014262:	4698      	mov	r8, r3
 8014264:	f8dc 0000 	ldr.w	r0, [ip]
 8014268:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801426c:	469e      	mov	lr, r3
 801426e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014272:	f10c 0c08 	add.w	ip, ip, #8
 8014276:	45b4      	cmp	ip, r6
 8014278:	4673      	mov	r3, lr
 801427a:	d1f3      	bne.n	8014264 <retrieveIPv6Header.constprop.0+0x7ac>
 801427c:	7832      	ldrb	r2, [r6, #0]
 801427e:	f88e 2000 	strb.w	r2, [lr]
 8014282:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014286:	3308      	adds	r3, #8
 8014288:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801428c:	2005      	movs	r0, #5
 801428e:	f7f4 f871 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014292:	4642      	mov	r2, r8
 8014294:	4601      	mov	r1, r0
 8014296:	a802      	add	r0, sp, #8
 8014298:	f7f5 f92a 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801429c:	ab02      	add	r3, sp, #8
 801429e:	f104 0237 	add.w	r2, r4, #55	; 0x37
 80142a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80142a6:	f842 1b04 	str.w	r1, [r2], #4
 80142aa:	42b3      	cmp	r3, r6
 80142ac:	d1f9      	bne.n	80142a2 <retrieveIPv6Header.constprop.0+0x7ea>
 80142ae:	e014      	b.n	80142da <retrieveIPv6Header.constprop.0+0x822>
 80142b0:	2005      	movs	r0, #5
 80142b2:	f7f4 f85f 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80142b6:	4680      	mov	r8, r0
 80142b8:	2002      	movs	r0, #2
 80142ba:	f7f4 f85b 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80142be:	4641      	mov	r1, r8
 80142c0:	4602      	mov	r2, r0
 80142c2:	a802      	add	r0, sp, #8
 80142c4:	f7f5 f914 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 80142c8:	ab02      	add	r3, sp, #8
 80142ca:	f104 0237 	add.w	r2, r4, #55	; 0x37
 80142ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80142d2:	f842 1b04 	str.w	r1, [r2], #4
 80142d6:	42b3      	cmp	r3, r6
 80142d8:	d1f9      	bne.n	80142ce <retrieveIPv6Header.constprop.0+0x816>
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	7013      	strb	r3, [r2, #0]
 80142de:	e78f      	b.n	8014200 <retrieveIPv6Header.constprop.0+0x748>
 80142e0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	4429      	add	r1, r5
 80142e8:	464b      	mov	r3, r9
 80142ea:	2201      	movs	r2, #1
 80142ec:	4401      	add	r1, r0
 80142ee:	a802      	add	r0, sp, #8
 80142f0:	f003 fd67 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80142f4:	ab0a      	add	r3, sp, #40	; 0x28
 80142f6:	aa02      	add	r2, sp, #8
 80142f8:	469e      	mov	lr, r3
 80142fa:	6810      	ldr	r0, [r2, #0]
 80142fc:	6851      	ldr	r1, [r2, #4]
 80142fe:	469c      	mov	ip, r3
 8014300:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014304:	3208      	adds	r2, #8
 8014306:	42b2      	cmp	r2, r6
 8014308:	4663      	mov	r3, ip
 801430a:	d1f6      	bne.n	80142fa <retrieveIPv6Header.constprop.0+0x842>
 801430c:	7832      	ldrb	r2, [r6, #0]
 801430e:	f88c 2000 	strb.w	r2, [ip]
 8014312:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014316:	3302      	adds	r3, #2
 8014318:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801431c:	4671      	mov	r1, lr
 801431e:	a802      	add	r0, sp, #8
 8014320:	f7f5 f980 	bl	8009624 <9730579196d24a2a06a66ac441c59b7f99b57834>
 8014324:	ab0f      	add	r3, sp, #60	; 0x3c
 8014326:	f10d 0c08 	add.w	ip, sp, #8
 801432a:	4698      	mov	r8, r3
 801432c:	f8dc 0000 	ldr.w	r0, [ip]
 8014330:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014334:	469e      	mov	lr, r3
 8014336:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801433a:	f10c 0c08 	add.w	ip, ip, #8
 801433e:	45b4      	cmp	ip, r6
 8014340:	4673      	mov	r3, lr
 8014342:	d1f3      	bne.n	801432c <retrieveIPv6Header.constprop.0+0x874>
 8014344:	7832      	ldrb	r2, [r6, #0]
 8014346:	f88e 2000 	strb.w	r2, [lr]
 801434a:	2005      	movs	r0, #5
 801434c:	f7f4 f812 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014350:	4642      	mov	r2, r8
 8014352:	4601      	mov	r1, r0
 8014354:	a802      	add	r0, sp, #8
 8014356:	f7f5 f8cb 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801435a:	ab02      	add	r3, sp, #8
 801435c:	f104 0237 	add.w	r2, r4, #55	; 0x37
 8014360:	f853 1b04 	ldr.w	r1, [r3], #4
 8014364:	f842 1b04 	str.w	r1, [r2], #4
 8014368:	42b3      	cmp	r3, r6
 801436a:	d1f9      	bne.n	8014360 <retrieveIPv6Header.constprop.0+0x8a8>
 801436c:	e7b5      	b.n	80142da <retrieveIPv6Header.constprop.0+0x822>
 801436e:	1958      	adds	r0, r3, r5
 8014370:	2203      	movs	r2, #3
 8014372:	464b      	mov	r3, r9
 8014374:	4401      	add	r1, r0
 8014376:	a802      	add	r0, sp, #8
 8014378:	f003 fd23 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 801437c:	ab02      	add	r3, sp, #8
 801437e:	f104 0237 	add.w	r2, r4, #55	; 0x37
 8014382:	f853 1b04 	ldr.w	r1, [r3], #4
 8014386:	f842 1b04 	str.w	r1, [r2], #4
 801438a:	42b3      	cmp	r3, r6
 801438c:	d1f9      	bne.n	8014382 <retrieveIPv6Header.constprop.0+0x8ca>
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	7013      	strb	r3, [r2, #0]
 8014392:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014396:	3310      	adds	r3, #16
 8014398:	e693      	b.n	80140c2 <retrieveIPv6Header.constprop.0+0x60a>
 801439a:	f1b8 0f09 	cmp.w	r8, #9
 801439e:	f108 33ff 	add.w	r3, r8, #4294967295
 80143a2:	d01b      	beq.n	80143dc <retrieveIPv6Header.constprop.0+0x924>
 80143a4:	2b10      	cmp	r3, #16
 80143a6:	d145      	bne.n	8014434 <retrieveIPv6Header.constprop.0+0x97c>
 80143a8:	6879      	ldr	r1, [r7, #4]
 80143aa:	442e      	add	r6, r5
 80143ac:	464b      	mov	r3, r9
 80143ae:	2203      	movs	r2, #3
 80143b0:	4431      	add	r1, r6
 80143b2:	a802      	add	r0, sp, #8
 80143b4:	f003 fd05 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80143b8:	ab02      	add	r3, sp, #8
 80143ba:	f104 0226 	add.w	r2, r4, #38	; 0x26
 80143be:	a906      	add	r1, sp, #24
 80143c0:	f853 0b04 	ldr.w	r0, [r3], #4
 80143c4:	f842 0b04 	str.w	r0, [r2], #4
 80143c8:	428b      	cmp	r3, r1
 80143ca:	d1f9      	bne.n	80143c0 <retrieveIPv6Header.constprop.0+0x908>
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	7013      	strb	r3, [r2, #0]
 80143d0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80143d4:	3310      	adds	r3, #16
 80143d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80143da:	e71e      	b.n	801421a <retrieveIPv6Header.constprop.0+0x762>
 80143dc:	6879      	ldr	r1, [r7, #4]
 80143de:	442e      	add	r6, r5
 80143e0:	464b      	mov	r3, r9
 80143e2:	2202      	movs	r2, #2
 80143e4:	4431      	add	r1, r6
 80143e6:	a802      	add	r0, sp, #8
 80143e8:	f003 fceb 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80143ec:	ab0f      	add	r3, sp, #60	; 0x3c
 80143ee:	ad02      	add	r5, sp, #8
 80143f0:	af06      	add	r7, sp, #24
 80143f2:	4698      	mov	r8, r3
 80143f4:	6828      	ldr	r0, [r5, #0]
 80143f6:	6869      	ldr	r1, [r5, #4]
 80143f8:	461e      	mov	r6, r3
 80143fa:	c603      	stmia	r6!, {r0, r1}
 80143fc:	3508      	adds	r5, #8
 80143fe:	42bd      	cmp	r5, r7
 8014400:	4633      	mov	r3, r6
 8014402:	d1f7      	bne.n	80143f4 <retrieveIPv6Header.constprop.0+0x93c>
 8014404:	783a      	ldrb	r2, [r7, #0]
 8014406:	7032      	strb	r2, [r6, #0]
 8014408:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801440c:	3308      	adds	r3, #8
 801440e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8014412:	2005      	movs	r0, #5
 8014414:	f7f3 ffae 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014418:	4642      	mov	r2, r8
 801441a:	4601      	mov	r1, r0
 801441c:	a802      	add	r0, sp, #8
 801441e:	f7f5 f867 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8014422:	3426      	adds	r4, #38	; 0x26
 8014424:	ab02      	add	r3, sp, #8
 8014426:	f853 2b04 	ldr.w	r2, [r3], #4
 801442a:	f844 2b04 	str.w	r2, [r4], #4
 801442e:	42bb      	cmp	r3, r7
 8014430:	d1f9      	bne.n	8014426 <retrieveIPv6Header.constprop.0+0x96e>
 8014432:	e575      	b.n	8013f20 <retrieveIPv6Header.constprop.0+0x468>
 8014434:	2303      	movs	r3, #3
 8014436:	930a      	str	r3, [sp, #40]	; 0x28
 8014438:	4b01      	ldr	r3, [pc, #4]	; (8014440 <retrieveIPv6Header.constprop.0+0x988>)
 801443a:	4a03      	ldr	r2, [pc, #12]	; (8014448 <retrieveIPv6Header.constprop.0+0x990>)
 801443c:	930b      	str	r3, [sp, #44]	; 0x2c
 801443e:	e42d      	b.n	8013c9c <retrieveIPv6Header.constprop.0+0x1e4>
 8014440:	0801d073 	.word	0x0801d073
 8014444:	0801d078 	.word	0x0801d078
 8014448:	0801d088 	.word	0x0801d088

0801444c <13ccdc5f94324d1909629c7f21aeb736294bb0ba>:
 801444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014450:	461d      	mov	r5, r3
 8014452:	2361      	movs	r3, #97	; 0x61
 8014454:	7043      	strb	r3, [r0, #1]
 8014456:	b092      	sub	sp, #72	; 0x48
 8014458:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801445c:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
 8014460:	4604      	mov	r4, r0
 8014462:	460e      	mov	r6, r1
 8014464:	2b00      	cmp	r3, #0
 8014466:	d058      	beq.n	801451a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xce>
 8014468:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 801446c:	b96b      	cbnz	r3, 801448a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x3e>
 801446e:	2303      	movs	r3, #3
 8014470:	930d      	str	r3, [sp, #52]	; 0x34
 8014472:	4b8a      	ldr	r3, [pc, #552]	; (801469c <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x250>)
 8014474:	4a8a      	ldr	r2, [pc, #552]	; (80146a0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x254>)
 8014476:	930e      	str	r3, [sp, #56]	; 0x38
 8014478:	4619      	mov	r1, r3
 801447a:	2003      	movs	r0, #3
 801447c:	f7f9 f8d6 	bl	800d62c <LOGGER_PrintLine>
 8014480:	2500      	movs	r5, #0
 8014482:	4628      	mov	r0, r5
 8014484:	b012      	add	sp, #72	; 0x48
 8014486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448a:	3b01      	subs	r3, #1
 801448c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 8014490:	f104 081d 	add.w	r8, r4, #29
 8014494:	4641      	mov	r1, r8
 8014496:	a803      	add	r0, sp, #12
 8014498:	f104 072e 	add.w	r7, r4, #46	; 0x2e
 801449c:	f7f4 ffd8 	bl	8009450 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 80144a0:	4639      	mov	r1, r7
 80144a2:	a808      	add	r0, sp, #32
 80144a4:	f7f4 ffd4 	bl	8009450 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 80144a8:	4640      	mov	r0, r8
 80144aa:	f7f4 fe39 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80144ae:	a908      	add	r1, sp, #32
 80144b0:	4682      	mov	sl, r0
 80144b2:	a803      	add	r0, sp, #12
 80144b4:	f7f4 ff0a 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d153      	bne.n	8014564 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x118>
 80144bc:	f1ba 0f00 	cmp.w	sl, #0
 80144c0:	d150      	bne.n	8014564 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x118>
 80144c2:	2005      	movs	r0, #5
 80144c4:	f7f3 ff56 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80144c8:	4a76      	ldr	r2, [pc, #472]	; (80146a4 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x258>)
 80144ca:	4601      	mov	r1, r0
 80144cc:	a80d      	add	r0, sp, #52	; 0x34
 80144ce:	f7f5 f80f 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 80144d2:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 80144d6:	b343      	cbz	r3, 801452a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xde>
 80144d8:	a90d      	add	r1, sp, #52	; 0x34
 80144da:	f106 0026 	add.w	r0, r6, #38	; 0x26
 80144de:	f7f4 fef5 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80144e2:	bb48      	cbnz	r0, 8014538 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xec>
 80144e4:	2200      	movs	r2, #0
 80144e6:	4639      	mov	r1, r7
 80144e8:	4620      	mov	r0, r4
 80144ea:	f003 fcbf 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80144ee:	2101      	movs	r1, #1
 80144f0:	4620      	mov	r0, r4
 80144f2:	f003 fc9b 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80144f6:	6863      	ldr	r3, [r4, #4]
 80144f8:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 80144fc:	701a      	strb	r2, [r3, #0]
 80144fe:	2101      	movs	r1, #1
 8014500:	4620      	mov	r0, r4
 8014502:	f003 fc93 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014506:	6863      	ldr	r3, [r4, #4]
 8014508:	2206      	movs	r2, #6
 801450a:	701a      	strb	r2, [r3, #0]
 801450c:	2101      	movs	r1, #1
 801450e:	4620      	mov	r0, r4
 8014510:	f003 fc8c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014514:	6863      	ldr	r3, [r4, #4]
 8014516:	22b1      	movs	r2, #177	; 0xb1
 8014518:	e023      	b.n	8014562 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x116>
 801451a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 801451e:	2b00      	cmp	r3, #0
 8014520:	d0a5      	beq.n	801446e <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x22>
 8014522:	3b01      	subs	r3, #1
 8014524:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014528:	e7b2      	b.n	8014490 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x44>
 801452a:	a90d      	add	r1, sp, #52	; 0x34
 801452c:	4638      	mov	r0, r7
 801452e:	f7f4 fecd 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8014532:	2800      	cmp	r0, #0
 8014534:	f000 809c 	beq.w	8014670 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x224>
 8014538:	2101      	movs	r1, #1
 801453a:	4620      	mov	r0, r4
 801453c:	f003 fc76 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014540:	6863      	ldr	r3, [r4, #4]
 8014542:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8014546:	701a      	strb	r2, [r3, #0]
 8014548:	2101      	movs	r1, #1
 801454a:	4620      	mov	r0, r4
 801454c:	f003 fc6e 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014550:	6863      	ldr	r3, [r4, #4]
 8014552:	2206      	movs	r2, #6
 8014554:	701a      	strb	r2, [r3, #0]
 8014556:	2101      	movs	r1, #1
 8014558:	4620      	mov	r0, r4
 801455a:	f003 fc67 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801455e:	6863      	ldr	r3, [r4, #4]
 8014560:	22a1      	movs	r2, #161	; 0xa1
 8014562:	701a      	strb	r2, [r3, #0]
 8014564:	782b      	ldrb	r3, [r5, #0]
 8014566:	2b63      	cmp	r3, #99	; 0x63
 8014568:	d12e      	bne.n	80145c8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x17c>
 801456a:	4640      	mov	r0, r8
 801456c:	f7f4 fdd8 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014570:	bb50      	cbnz	r0, 80145c8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x17c>
 8014572:	786b      	ldrb	r3, [r5, #1]
 8014574:	07da      	lsls	r2, r3, #31
 8014576:	f100 8081 	bmi.w	801467c <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x230>
 801457a:	2102      	movs	r1, #2
 801457c:	4620      	mov	r0, r4
 801457e:	f003 fc55 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014582:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8014586:	6862      	ldr	r2, [r4, #4]
 8014588:	0a1b      	lsrs	r3, r3, #8
 801458a:	7013      	strb	r3, [r2, #0]
 801458c:	6863      	ldr	r3, [r4, #4]
 801458e:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 8014592:	705a      	strb	r2, [r3, #1]
 8014594:	786b      	ldrb	r3, [r5, #1]
 8014596:	079b      	lsls	r3, r3, #30
 8014598:	d406      	bmi.n	80145a8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x15c>
 801459a:	2101      	movs	r1, #1
 801459c:	4620      	mov	r0, r4
 801459e:	f003 fc45 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80145a2:	6863      	ldr	r3, [r4, #4]
 80145a4:	78aa      	ldrb	r2, [r5, #2]
 80145a6:	701a      	strb	r2, [r3, #0]
 80145a8:	2101      	movs	r1, #1
 80145aa:	4620      	mov	r0, r4
 80145ac:	f003 fc3e 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80145b0:	6863      	ldr	r3, [r4, #4]
 80145b2:	2205      	movs	r2, #5
 80145b4:	701a      	strb	r2, [r3, #0]
 80145b6:	786d      	ldrb	r5, [r5, #1]
 80145b8:	2101      	movs	r1, #1
 80145ba:	4620      	mov	r0, r4
 80145bc:	f003 fc36 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80145c0:	6863      	ldr	r3, [r4, #4]
 80145c2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80145c6:	701d      	strb	r5, [r3, #0]
 80145c8:	f1b9 0f00 	cmp.w	r9, #0
 80145cc:	d008      	beq.n	80145e0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x194>
 80145ce:	4649      	mov	r1, r9
 80145d0:	4620      	mov	r0, r4
 80145d2:	f003 fc2b 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80145d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80145d8:	6860      	ldr	r0, [r4, #4]
 80145da:	464a      	mov	r2, r9
 80145dc:	f004 fd83 	bl	80190e6 <memcpy>
 80145e0:	6863      	ldr	r3, [r4, #4]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80145e8:	2b80      	cmp	r3, #128	; 0x80
 80145ea:	d106      	bne.n	80145fa <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x1ae>
 80145ec:	2101      	movs	r1, #1
 80145ee:	4620      	mov	r0, r4
 80145f0:	f003 fc1c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80145f4:	6863      	ldr	r3, [r4, #4]
 80145f6:	22f1      	movs	r2, #241	; 0xf1
 80145f8:	701a      	strb	r2, [r3, #0]
 80145fa:	f7f3 fead 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80145fe:	4605      	mov	r5, r0
 8014600:	2800      	cmp	r0, #0
 8014602:	d045      	beq.n	8014690 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x244>
 8014604:	4640      	mov	r0, r8
 8014606:	f7f4 fdf3 	bl	80091f0 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 801460a:	2800      	cmp	r0, #0
 801460c:	d140      	bne.n	8014690 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x244>
 801460e:	2005      	movs	r0, #5
 8014610:	f7f3 feb0 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014614:	4606      	mov	r6, r0
 8014616:	2002      	movs	r0, #2
 8014618:	f7f3 feac 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801461c:	4631      	mov	r1, r6
 801461e:	4602      	mov	r2, r0
 8014620:	a80d      	add	r0, sp, #52	; 0x34
 8014622:	f7f4 ff65 	bl	80094f0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8014626:	4639      	mov	r1, r7
 8014628:	a80d      	add	r0, sp, #52	; 0x34
 801462a:	f7f4 fe4f 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801462e:	b170      	cbz	r0, 801464e <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x202>
 8014630:	2002      	movs	r0, #2
 8014632:	f7f3 fe9f 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014636:	f104 0341 	add.w	r3, r4, #65	; 0x41
 801463a:	f100 0210 	add.w	r2, r0, #16
 801463e:	f850 1b04 	ldr.w	r1, [r0], #4
 8014642:	f843 1b04 	str.w	r1, [r3], #4
 8014646:	4290      	cmp	r0, r2
 8014648:	d1f9      	bne.n	801463e <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x1f2>
 801464a:	7802      	ldrb	r2, [r0, #0]
 801464c:	701a      	strb	r2, [r3, #0]
 801464e:	4668      	mov	r0, sp
 8014650:	f7fb fe0c 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8014654:	9b00      	ldr	r3, [sp, #0]
 8014656:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 801465a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801465e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8014662:	4620      	mov	r0, r4
 8014664:	f7f5 ffa4 	bl	800a5b0 <db78e4d9b28d7c42d16d219c1384c29b20a49150>
 8014668:	4620      	mov	r0, r4
 801466a:	f7f5 fa69 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801466e:	e708      	b.n	8014482 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x36>
 8014670:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 8014674:	2b00      	cmp	r3, #0
 8014676:	f43f af35 	beq.w	80144e4 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x98>
 801467a:	e72d      	b.n	80144d8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x8c>
 801467c:	2101      	movs	r1, #1
 801467e:	4620      	mov	r0, r4
 8014680:	f003 fbd4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014684:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8014688:	6862      	ldr	r2, [r4, #4]
 801468a:	0a1b      	lsrs	r3, r3, #8
 801468c:	7013      	strb	r3, [r2, #0]
 801468e:	e781      	b.n	8014594 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x148>
 8014690:	4620      	mov	r0, r4
 8014692:	f7fd ff87 	bl	80125a4 <84a9c9a6c63997e804410fedf3e4beedf650a414>
 8014696:	4605      	mov	r5, r0
 8014698:	e6f3      	b.n	8014482 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x36>
 801469a:	bf00      	nop
 801469c:	0801d073 	.word	0x0801d073
 80146a0:	0801d09c 	.word	0x0801d09c
 80146a4:	0801d130 	.word	0x0801d130

080146a8 <c4cc1e8c684869221cde02c1ffd97d6034352506>:
 80146a8:	7803      	ldrb	r3, [r0, #0]
 80146aa:	2261      	movs	r2, #97	; 0x61
 80146ac:	2b60      	cmp	r3, #96	; 0x60
 80146ae:	7042      	strb	r2, [r0, #1]
 80146b0:	d101      	bne.n	80146b6 <c4cc1e8c684869221cde02c1ffd97d6034352506+0xe>
 80146b2:	f7f5 bf61 	b.w	800a578 <c122f50a74e97b0b971f059f93cac9f52ab85af9>
 80146b6:	f000 bb39 	b.w	8014d2c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2>
	...

080146bc <2058bb475204def8ad39a4c1db4c087e75b9f860>:
 80146bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c0:	b087      	sub	sp, #28
 80146c2:	469a      	mov	sl, r3
 80146c4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80146c8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80146cc:	9303      	str	r3, [sp, #12]
 80146ce:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80146d2:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80146d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146d8:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
 80146dc:	4604      	mov	r4, r0
 80146de:	468b      	mov	fp, r1
 80146e0:	4615      	mov	r5, r2
 80146e2:	2e03      	cmp	r6, #3
 80146e4:	d83b      	bhi.n	801475e <2058bb475204def8ad39a4c1db4c087e75b9f860+0xa2>
 80146e6:	e8df f006 	tbb	[pc, r6]
 80146ea:	2e34      	.short	0x2e34
 80146ec:	0214      	.short	0x0214
 80146ee:	f1b9 0f00 	cmp.w	r9, #0
 80146f2:	d007      	beq.n	8014704 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 80146f4:	2101      	movs	r1, #1
 80146f6:	9319      	str	r3, [sp, #100]	; 0x64
 80146f8:	f003 fb98 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80146fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146fe:	6862      	ldr	r2, [r4, #4]
 8014700:	7c1b      	ldrb	r3, [r3, #16]
 8014702:	7013      	strb	r3, [r2, #0]
 8014704:	9a03      	ldr	r2, [sp, #12]
 8014706:	2a03      	cmp	r2, #3
 8014708:	d876      	bhi.n	80147f8 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x13c>
 801470a:	e8df f002 	tbb	[pc, r2]
 801470e:	5561      	.short	0x5561
 8014710:	4b36      	.short	0x4b36
 8014712:	f1b9 0f00 	cmp.w	r9, #0
 8014716:	d1f5      	bne.n	8014704 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8014718:	781a      	ldrb	r2, [r3, #0]
 801471a:	2a01      	cmp	r2, #1
 801471c:	d00d      	beq.n	801473a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x7e>
 801471e:	2303      	movs	r3, #3
 8014720:	9304      	str	r3, [sp, #16]
 8014722:	4a79      	ldr	r2, [pc, #484]	; (8014908 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x24c>)
 8014724:	4b79      	ldr	r3, [pc, #484]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 8014726:	9305      	str	r3, [sp, #20]
 8014728:	ab06      	add	r3, sp, #24
 801472a:	e913 0003 	ldmdb	r3, {r0, r1}
 801472e:	f7f8 ff7d 	bl	800d62c <LOGGER_PrintLine>
 8014732:	2000      	movs	r0, #0
 8014734:	b007      	add	sp, #28
 8014736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473a:	2200      	movs	r2, #0
 801473c:	4619      	mov	r1, r3
 801473e:	4620      	mov	r0, r4
 8014740:	f003 fb94 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8014744:	e7de      	b.n	8014704 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8014746:	f1b9 0f00 	cmp.w	r9, #0
 801474a:	d1db      	bne.n	8014704 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 801474c:	781a      	ldrb	r2, [r3, #0]
 801474e:	2a02      	cmp	r2, #2
 8014750:	e7e4      	b.n	801471c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x60>
 8014752:	f1b9 0f00 	cmp.w	r9, #0
 8014756:	d1d5      	bne.n	8014704 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8014758:	781a      	ldrb	r2, [r3, #0]
 801475a:	2a03      	cmp	r2, #3
 801475c:	e7de      	b.n	801471c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x60>
 801475e:	2302      	movs	r3, #2
 8014760:	9304      	str	r3, [sp, #16]
 8014762:	4a6b      	ldr	r2, [pc, #428]	; (8014910 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x254>)
 8014764:	4b69      	ldr	r3, [pc, #420]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 8014766:	9305      	str	r3, [sp, #20]
 8014768:	f8cd 9000 	str.w	r9, [sp]
 801476c:	4633      	mov	r3, r6
 801476e:	a906      	add	r1, sp, #24
 8014770:	e911 0003 	ldmdb	r1, {r0, r1}
 8014774:	f7f8 ff5a 	bl	800d62c <LOGGER_PrintLine>
 8014778:	e7db      	b.n	8014732 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x76>
 801477a:	f1b8 0f02 	cmp.w	r8, #2
 801477e:	d105      	bne.n	801478c <2058bb475204def8ad39a4c1db4c087e75b9f860+0xd0>
 8014780:	2001      	movs	r0, #1
 8014782:	f7f3 fdf7 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014786:	2200      	movs	r2, #0
 8014788:	4601      	mov	r1, r0
 801478a:	e008      	b.n	801479e <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe2>
 801478c:	f1b8 0f01 	cmp.w	r8, #1
 8014790:	d108      	bne.n	80147a4 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 8014792:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	2b01      	cmp	r3, #1
 8014798:	d1c1      	bne.n	801471e <2058bb475204def8ad39a4c1db4c087e75b9f860+0x62>
 801479a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801479c:	2200      	movs	r2, #0
 801479e:	4620      	mov	r0, r4
 80147a0:	f003 fb64 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80147a4:	b38f      	cbz	r7, 801480a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x14e>
 80147a6:	1e7b      	subs	r3, r7, #1
 80147a8:	2b02      	cmp	r3, #2
 80147aa:	d936      	bls.n	801481a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x15e>
 80147ac:	2302      	movs	r3, #2
 80147ae:	9304      	str	r3, [sp, #16]
 80147b0:	4b56      	ldr	r3, [pc, #344]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 80147b2:	4a58      	ldr	r2, [pc, #352]	; (8014914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x258>)
 80147b4:	9305      	str	r3, [sp, #20]
 80147b6:	e7b7      	b.n	8014728 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 80147b8:	f1b8 0f02 	cmp.w	r8, #2
 80147bc:	d101      	bne.n	80147c2 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x106>
 80147be:	4640      	mov	r0, r8
 80147c0:	e7df      	b.n	8014782 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xc6>
 80147c2:	f1b8 0f01 	cmp.w	r8, #1
 80147c6:	d1ed      	bne.n	80147a4 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 80147c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	e7e3      	b.n	8014798 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xdc>
 80147d0:	f1b8 0f02 	cmp.w	r8, #2
 80147d4:	d109      	bne.n	80147ea <2058bb475204def8ad39a4c1db4c087e75b9f860+0x12e>
 80147d6:	4640      	mov	r0, r8
 80147d8:	f7f3 fdcc 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80147dc:	2200      	movs	r2, #0
 80147de:	4601      	mov	r1, r0
 80147e0:	4620      	mov	r0, r4
 80147e2:	f003 fb43 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80147e6:	2005      	movs	r0, #5
 80147e8:	e7cb      	b.n	8014782 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xc6>
 80147ea:	f1b8 0f01 	cmp.w	r8, #1
 80147ee:	d1d9      	bne.n	80147a4 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 80147f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	2b03      	cmp	r3, #3
 80147f6:	e7cf      	b.n	8014798 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xdc>
 80147f8:	2302      	movs	r3, #2
 80147fa:	9304      	str	r3, [sp, #16]
 80147fc:	4b43      	ldr	r3, [pc, #268]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 80147fe:	9305      	str	r3, [sp, #20]
 8014800:	4a45      	ldr	r2, [pc, #276]	; (8014918 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x25c>)
 8014802:	f8cd 9000 	str.w	r9, [sp]
 8014806:	4633      	mov	r3, r6
 8014808:	e7b1      	b.n	801476e <2058bb475204def8ad39a4c1db4c087e75b9f860+0xb2>
 801480a:	2101      	movs	r1, #1
 801480c:	4620      	mov	r0, r4
 801480e:	f003 fb0d 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014812:	6863      	ldr	r3, [r4, #4]
 8014814:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8014818:	701a      	strb	r2, [r3, #0]
 801481a:	f1ba 0f00 	cmp.w	sl, #0
 801481e:	d008      	beq.n	8014832 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x176>
 8014820:	f1ba 0f01 	cmp.w	sl, #1
 8014824:	d00d      	beq.n	8014842 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x186>
 8014826:	2302      	movs	r3, #2
 8014828:	9304      	str	r3, [sp, #16]
 801482a:	4b38      	ldr	r3, [pc, #224]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 801482c:	4a3b      	ldr	r2, [pc, #236]	; (801491c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x260>)
 801482e:	9305      	str	r3, [sp, #20]
 8014830:	e77a      	b.n	8014728 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 8014832:	2101      	movs	r1, #1
 8014834:	4620      	mov	r0, r4
 8014836:	f003 faf9 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801483a:	6863      	ldr	r3, [r4, #4]
 801483c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8014840:	701a      	strb	r2, [r3, #0]
 8014842:	f1bb 0f03 	cmp.w	fp, #3
 8014846:	d859      	bhi.n	80148fc <2058bb475204def8ad39a4c1db4c087e75b9f860+0x240>
 8014848:	e8df f00b 	tbb	[pc, fp]
 801484c:	1650023c 	.word	0x1650023c
 8014850:	2101      	movs	r1, #1
 8014852:	4620      	mov	r0, r4
 8014854:	f003 faea 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014858:	6863      	ldr	r3, [r4, #4]
 801485a:	2101      	movs	r1, #1
 801485c:	701d      	strb	r5, [r3, #0]
 801485e:	4620      	mov	r0, r4
 8014860:	f003 fae4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014864:	6863      	ldr	r3, [r4, #4]
 8014866:	0a2a      	lsrs	r2, r5, #8
 8014868:	701a      	strb	r2, [r3, #0]
 801486a:	2101      	movs	r1, #1
 801486c:	4620      	mov	r0, r4
 801486e:	f003 fadd 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8014872:	6863      	ldr	r3, [r4, #4]
 8014874:	0c2d      	lsrs	r5, r5, #16
 8014876:	701d      	strb	r5, [r3, #0]
 8014878:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 801487c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8014886:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801488a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801488e:	9a03      	ldr	r2, [sp, #12]
 8014890:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8014894:	431e      	orrs	r6, r3
 8014896:	2101      	movs	r1, #1
 8014898:	4620      	mov	r0, r4
 801489a:	f003 fac7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801489e:	ea46 06c9 	orr.w	r6, r6, r9, lsl #3
 80148a2:	6863      	ldr	r3, [r4, #4]
 80148a4:	b2f6      	uxtb	r6, r6
 80148a6:	701e      	strb	r6, [r3, #0]
 80148a8:	2101      	movs	r1, #1
 80148aa:	4620      	mov	r0, r4
 80148ac:	ea47 07cb 	orr.w	r7, r7, fp, lsl #3
 80148b0:	f003 fabc 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80148b4:	ea47 078a 	orr.w	r7, r7, sl, lsl #2
 80148b8:	6863      	ldr	r3, [r4, #4]
 80148ba:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 80148be:	701f      	strb	r7, [r3, #0]
 80148c0:	2001      	movs	r0, #1
 80148c2:	e737      	b.n	8014734 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x78>
 80148c4:	2101      	movs	r1, #1
 80148c6:	4620      	mov	r0, r4
 80148c8:	f003 fab0 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80148cc:	6863      	ldr	r3, [r4, #4]
 80148ce:	2101      	movs	r1, #1
 80148d0:	701d      	strb	r5, [r3, #0]
 80148d2:	4620      	mov	r0, r4
 80148d4:	f003 faaa 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80148d8:	6863      	ldr	r3, [r4, #4]
 80148da:	0a2a      	lsrs	r2, r5, #8
 80148dc:	701a      	strb	r2, [r3, #0]
 80148de:	2101      	movs	r1, #1
 80148e0:	4620      	mov	r0, r4
 80148e2:	f003 faa3 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80148e6:	6863      	ldr	r3, [r4, #4]
 80148e8:	0c2d      	lsrs	r5, r5, #16
 80148ea:	701d      	strb	r5, [r3, #0]
 80148ec:	2101      	movs	r1, #1
 80148ee:	4620      	mov	r0, r4
 80148f0:	f003 fa9c 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80148f4:	6863      	ldr	r3, [r4, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	701a      	strb	r2, [r3, #0]
 80148fa:	e7bd      	b.n	8014878 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x1bc>
 80148fc:	2302      	movs	r3, #2
 80148fe:	9304      	str	r3, [sp, #16]
 8014900:	4b02      	ldr	r3, [pc, #8]	; (801490c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 8014902:	4a07      	ldr	r2, [pc, #28]	; (8014920 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x264>)
 8014904:	9305      	str	r3, [sp, #20]
 8014906:	e70f      	b.n	8014728 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 8014908:	0801a8f2 	.word	0x0801a8f2
 801490c:	0801d073 	.word	0x0801d073
 8014910:	0801d0b7 	.word	0x0801d0b7
 8014914:	0801d0ea 	.word	0x0801d0ea
 8014918:	0801d0d1 	.word	0x0801d0d1
 801491c:	0801d0fa 	.word	0x0801d0fa
 8014920:	0801d108 	.word	0x0801d108

08014924 <6fdc701aa2cd71dee737cd6193e5dab778619cb9>:
 8014924:	b513      	push	{r0, r1, r4, lr}
 8014926:	6843      	ldr	r3, [r0, #4]
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	785b      	ldrb	r3, [r3, #1]
 801492c:	f002 04e0 	and.w	r4, r2, #224	; 0xe0
 8014930:	2c80      	cmp	r4, #128	; 0x80
 8014932:	d124      	bne.n	801497e <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x5a>
 8014934:	2b05      	cmp	r3, #5
 8014936:	d122      	bne.n	801497e <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x5a>
 8014938:	f002 031f 	and.w	r3, r2, #31
 801493c:	704b      	strb	r3, [r1, #1]
 801493e:	0793      	lsls	r3, r2, #30
 8014940:	bf56      	itet	pl
 8014942:	6843      	ldrpl	r3, [r0, #4]
 8014944:	2400      	movmi	r4, #0
 8014946:	789c      	ldrbpl	r4, [r3, #2]
 8014948:	708c      	strb	r4, [r1, #2]
 801494a:	bf54      	ite	pl
 801494c:	2303      	movpl	r3, #3
 801494e:	2302      	movmi	r3, #2
 8014950:	f012 0f01 	tst.w	r2, #1
 8014954:	6842      	ldr	r2, [r0, #4]
 8014956:	d10c      	bne.n	8014972 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4e>
 8014958:	5cd4      	ldrb	r4, [r2, r3]
 801495a:	f8a1 4003 	strh.w	r4, [r1, #3]
 801495e:	6842      	ldr	r2, [r0, #4]
 8014960:	441a      	add	r2, r3
 8014962:	1c98      	adds	r0, r3, #2
 8014964:	7852      	ldrb	r2, [r2, #1]
 8014966:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 801496a:	f8a1 2003 	strh.w	r2, [r1, #3]
 801496e:	b002      	add	sp, #8
 8014970:	bd10      	pop	{r4, pc}
 8014972:	5cd2      	ldrb	r2, [r2, r3]
 8014974:	0212      	lsls	r2, r2, #8
 8014976:	f8a1 2003 	strh.w	r2, [r1, #3]
 801497a:	1c58      	adds	r0, r3, #1
 801497c:	e7f7      	b.n	801496e <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4a>
 801497e:	2303      	movs	r3, #3
 8014980:	9300      	str	r3, [sp, #0]
 8014982:	4b05      	ldr	r3, [pc, #20]	; (8014998 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x74>)
 8014984:	9301      	str	r3, [sp, #4]
 8014986:	ab02      	add	r3, sp, #8
 8014988:	e913 0003 	ldmdb	r3, {r0, r1}
 801498c:	4a03      	ldr	r2, [pc, #12]	; (801499c <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x78>)
 801498e:	f7f8 fe4d 	bl	800d62c <LOGGER_PrintLine>
 8014992:	2000      	movs	r0, #0
 8014994:	e7eb      	b.n	801496e <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4a>
 8014996:	bf00      	nop
 8014998:	0801d073 	.word	0x0801d073
 801499c:	0801d116 	.word	0x0801d116

080149a0 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69>:
 80149a0:	b510      	push	{r4, lr}
 80149a2:	2361      	movs	r3, #97	; 0x61
 80149a4:	b0aa      	sub	sp, #168	; 0xa8
 80149a6:	7043      	strb	r3, [r0, #1]
 80149a8:	4604      	mov	r4, r0
 80149aa:	224c      	movs	r2, #76	; 0x4c
 80149ac:	2100      	movs	r1, #0
 80149ae:	a804      	add	r0, sp, #16
 80149b0:	f004 fae6 	bl	8018f80 <memset>
 80149b4:	224c      	movs	r2, #76	; 0x4c
 80149b6:	2100      	movs	r1, #0
 80149b8:	a817      	add	r0, sp, #92	; 0x5c
 80149ba:	f004 fae1 	bl	8018f80 <memset>
 80149be:	2300      	movs	r3, #0
 80149c0:	9302      	str	r3, [sp, #8]
 80149c2:	f88d 300c 	strb.w	r3, [sp, #12]
 80149c6:	aa17      	add	r2, sp, #92	; 0x5c
 80149c8:	f10d 0307 	add.w	r3, sp, #7
 80149cc:	a904      	add	r1, sp, #16
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7ff f872 	bl	8013ab8 <retrieveIPv6Header.constprop.0>
 80149d4:	f7f3 fcc0 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80149d8:	b138      	cbz	r0, 80149ea <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x4a>
 80149da:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 80149de:	f7f4 fc07 	bl	80091f0 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 80149e2:	b910      	cbnz	r0, 80149ea <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x4a>
 80149e4:	4620      	mov	r0, r4
 80149e6:	f7f5 fde3 	bl	800a5b0 <db78e4d9b28d7c42d16d219c1384c29b20a49150>
 80149ea:	f7f3 fcb5 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80149ee:	b978      	cbnz	r0, 8014a10 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x70>
 80149f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80149f4:	4620      	mov	r0, r4
 80149f6:	f003 fa59 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80149fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80149fe:	b1d3      	cbz	r3, 8014a36 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x96>
 8014a00:	ab02      	add	r3, sp, #8
 8014a02:	aa17      	add	r2, sp, #92	; 0x5c
 8014a04:	a904      	add	r1, sp, #16
 8014a06:	4620      	mov	r0, r4
 8014a08:	f000 fa1a 	bl	8014e40 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb>
 8014a0c:	b02a      	add	sp, #168	; 0xa8
 8014a0e:	bd10      	pop	{r4, pc}
 8014a10:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8014a14:	f7f4 fb84 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	d1e9      	bne.n	80149f0 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x50>
 8014a1c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8014a20:	f7f3 fd10 	bl	8008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8014a24:	b118      	cbz	r0, 8014a2e <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x8e>
 8014a26:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d1e0      	bne.n	80149f0 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x50>
 8014a2e:	4620      	mov	r0, r4
 8014a30:	f7f5 f886 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8014a34:	e7ea      	b.n	8014a0c <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x6c>
 8014a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d0e1      	beq.n	8014a00 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x60>
 8014a3c:	a902      	add	r1, sp, #8
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7ff ff70 	bl	8014924 <6fdc701aa2cd71dee737cd6193e5dab778619cb9>
 8014a44:	4601      	mov	r1, r0
 8014a46:	4620      	mov	r0, r4
 8014a48:	f003 fa30 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8014a4c:	e7d8      	b.n	8014a00 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x60>

08014a4e <ff79dcb9f0638f1ac99659a38f02861c009c540c>:
 8014a4e:	b538      	push	{r3, r4, r5, lr}
 8014a50:	2363      	movs	r3, #99	; 0x63
 8014a52:	7003      	strb	r3, [r0, #0]
 8014a54:	4605      	mov	r5, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	f001 fac8 	bl	8015fec <bc7077241f0f6c26eafbf9350b96f546688ad609>
 8014a5c:	70a8      	strb	r0, [r5, #2]
 8014a5e:	f001 fb63 	bl	8016128 <eada7656be7f8681f934187ead57a12001632399>
 8014a62:	78ab      	ldrb	r3, [r5, #2]
 8014a64:	f8a5 0003 	strh.w	r0, [r5, #3]
 8014a68:	fab3 f383 	clz	r3, r3
 8014a6c:	095b      	lsrs	r3, r3, #5
 8014a6e:	f024 0403 	bic.w	r4, r4, #3
 8014a72:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8014a76:	b2c0      	uxtb	r0, r0
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	bf08      	it	eq
 8014a7c:	f044 0401 	orreq.w	r4, r4, #1
 8014a80:	706c      	strb	r4, [r5, #1]
 8014a82:	bd38      	pop	{r3, r4, r5, pc}

08014a84 <1b70dd809fc4873e9266aad98968a88e80b5bf06>:
 8014a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a88:	f100 091d 	add.w	r9, r0, #29
 8014a8c:	4604      	mov	r4, r0
 8014a8e:	b086      	sub	sp, #24
 8014a90:	4648      	mov	r0, r9
 8014a92:	460e      	mov	r6, r1
 8014a94:	4617      	mov	r7, r2
 8014a96:	4698      	mov	r8, r3
 8014a98:	f7f4 fb42 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014aa0:	b1d8      	cbz	r0, 8014ada <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x56>
 8014aa2:	2302      	movs	r3, #2
 8014aa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 8014ab0:	606b      	str	r3, [r5, #4]
 8014ab2:	4648      	mov	r0, r9
 8014ab4:	f7f4 fbf8 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8014ab8:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8014abc:	bb5d      	cbnz	r5, 8014b16 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x92>
 8014abe:	2303      	movs	r3, #3
 8014ac0:	9304      	str	r3, [sp, #16]
 8014ac2:	4b22      	ldr	r3, [pc, #136]	; (8014b4c <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xc8>)
 8014ac4:	9305      	str	r3, [sp, #20]
 8014ac6:	ab06      	add	r3, sp, #24
 8014ac8:	e913 0003 	ldmdb	r3, {r0, r1}
 8014acc:	4a20      	ldr	r2, [pc, #128]	; (8014b50 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xcc>)
 8014ace:	f7f8 fdad 	bl	800d62c <LOGGER_PrintLine>
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	b006      	add	sp, #24
 8014ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ada:	f104 0a26 	add.w	sl, r4, #38	; 0x26
 8014ade:	a904      	add	r1, sp, #16
 8014ae0:	4650      	mov	r0, sl
 8014ae2:	f7f4 fa6b 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 8014ae6:	b170      	cbz	r0, 8014b06 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x82>
 8014ae8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8014aec:	f7f4 fa86 	bl	8008ffc <5cf48605db24e77c7dc4310895ecb68238b276e7>
 8014af0:	b148      	cbz	r0, 8014b06 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x82>
 8014af2:	2302      	movs	r3, #2
 8014af4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8014af8:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 8014afc:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 8014b00:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
 8014b04:	e7d4      	b.n	8014ab0 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x2c>
 8014b06:	2302      	movs	r3, #2
 8014b08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	2000      	movs	r0, #0
 8014b10:	f7f4 f84a 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8014b14:	e7cd      	b.n	8014ab2 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x2e>
 8014b16:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 8014b1a:	b143      	cbz	r3, 8014b2e <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xaa>
 8014b1c:	4648      	mov	r0, r9
 8014b1e:	f7f4 faff 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014b22:	b920      	cbnz	r0, 8014b2e <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xaa>
 8014b24:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f003 f9bf 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8014b2e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8014b32:	9303      	str	r3, [sp, #12]
 8014b34:	2300      	movs	r3, #0
 8014b36:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b3c:	9300      	str	r3, [sp, #0]
 8014b3e:	463a      	mov	r2, r7
 8014b40:	4643      	mov	r3, r8
 8014b42:	4631      	mov	r1, r6
 8014b44:	4620      	mov	r0, r4
 8014b46:	f7ff fc81 	bl	801444c <13ccdc5f94324d1909629c7f21aeb736294bb0ba>
 8014b4a:	e7c3      	b.n	8014ad4 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x50>
 8014b4c:	0801d139 	.word	0x0801d139
 8014b50:	0801d144 	.word	0x0801d144

08014b54 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 8014b54:	3901      	subs	r1, #1
 8014b56:	f100 0308 	add.w	r3, r0, #8
 8014b5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014b5e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8014b62:	4283      	cmp	r3, r0
 8014b64:	d1f9      	bne.n	8014b5a <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 8014b66:	4770      	bx	lr

08014b68 <294ac47dbf0553b0bc1a0d13a73dce6f2c303667>:
 8014b68:	4770      	bx	lr

08014b6a <7642e1952f3dfa50bc246e452b3db5bce6f65fea>:
 8014b6a:	4770      	bx	lr

08014b6c <329b6edcbe2eed1a451d1df4c9584a68c1390127>:
 8014b6c:	4770      	bx	lr

08014b6e <00af7f89235fe04a2b2b59d942644988487fcbf4>:
 8014b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b72:	b0d0      	sub	sp, #320	; 0x140
 8014b74:	2300      	movs	r3, #0
 8014b76:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b78:	2374      	movs	r3, #116	; 0x74
 8014b7a:	4604      	mov	r4, r0
 8014b7c:	7043      	strb	r3, [r0, #1]
 8014b7e:	2002      	movs	r0, #2
 8014b80:	f7f3 fbf8 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014b84:	f104 051d 	add.w	r5, r4, #29
 8014b88:	2303      	movs	r3, #3
 8014b8a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014b8e:	4680      	mov	r8, r0
 8014b90:	4629      	mov	r1, r5
 8014b92:	a80c      	add	r0, sp, #48	; 0x30
 8014b94:	f7f4 fc0c 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8014b98:	ab1b      	add	r3, sp, #108	; 0x6c
 8014b9a:	aa0c      	add	r2, sp, #48	; 0x30
 8014b9c:	ae10      	add	r6, sp, #64	; 0x40
 8014b9e:	469a      	mov	sl, r3
 8014ba0:	6810      	ldr	r0, [r2, #0]
 8014ba2:	6851      	ldr	r1, [r2, #4]
 8014ba4:	461f      	mov	r7, r3
 8014ba6:	c703      	stmia	r7!, {r0, r1}
 8014ba8:	3208      	adds	r2, #8
 8014baa:	42b2      	cmp	r2, r6
 8014bac:	463b      	mov	r3, r7
 8014bae:	d1f7      	bne.n	8014ba0 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x32>
 8014bb0:	7832      	ldrb	r2, [r6, #0]
 8014bb2:	703a      	strb	r2, [r7, #0]
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	a80c      	add	r0, sp, #48	; 0x30
 8014bb8:	f7f4 fc4a 	bl	8009450 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 8014bbc:	aa16      	add	r2, sp, #88	; 0x58
 8014bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8014bc0:	4691      	mov	r9, r2
 8014bc2:	6818      	ldr	r0, [r3, #0]
 8014bc4:	6859      	ldr	r1, [r3, #4]
 8014bc6:	4617      	mov	r7, r2
 8014bc8:	c703      	stmia	r7!, {r0, r1}
 8014bca:	3308      	adds	r3, #8
 8014bcc:	42b3      	cmp	r3, r6
 8014bce:	463a      	mov	r2, r7
 8014bd0:	d1f7      	bne.n	8014bc2 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x54>
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	703b      	strb	r3, [r7, #0]
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f7f4 fb66 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d066      	beq.n	8014cae <00af7f89235fe04a2b2b59d942644988487fcbf4+0x140>
 8014be0:	220e      	movs	r2, #14
 8014be2:	2100      	movs	r1, #0
 8014be4:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8014be8:	f004 f9ca 	bl	8018f80 <memset>
 8014bec:	f64f 6305 	movw	r3, #65029	; 0xfe05
 8014bf0:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
 8014bf4:	2380      	movs	r3, #128	; 0x80
 8014bf6:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
 8014bfa:	eb0d 0603 	add.w	r6, sp, r3
 8014bfe:	2700      	movs	r7, #0
 8014c00:	f8d6 3001 	ldr.w	r3, [r6, #1]
 8014c04:	f8c4 302f 	str.w	r3, [r4, #47]	; 0x2f
 8014c08:	f8d6 3005 	ldr.w	r3, [r6, #5]
 8014c0c:	f8c4 3033 	str.w	r3, [r4, #51]	; 0x33
 8014c10:	f8d8 3001 	ldr.w	r3, [r8, #1]
 8014c14:	f8c4 3037 	str.w	r3, [r4, #55]	; 0x37
 8014c18:	f8d8 3005 	ldr.w	r3, [r8, #5]
 8014c1c:	f8c4 303b 	str.w	r3, [r4, #59]	; 0x3b
 8014c20:	224c      	movs	r2, #76	; 0x4c
 8014c22:	2100      	movs	r1, #0
 8014c24:	a82a      	add	r0, sp, #168	; 0xa8
 8014c26:	f004 f9ab 	bl	8018f80 <memset>
 8014c2a:	224c      	movs	r2, #76	; 0x4c
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	a83d      	add	r0, sp, #244	; 0xf4
 8014c30:	f004 f9a6 	bl	8018f80 <memset>
 8014c34:	2341      	movs	r3, #65	; 0x41
 8014c36:	2100      	movs	r1, #0
 8014c38:	a814      	add	r0, sp, #80	; 0x50
 8014c3a:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8014c3e:	f7ff ff06 	bl	8014a4e <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8014c42:	4631      	mov	r1, r6
 8014c44:	4648      	mov	r0, r9
 8014c46:	f7f4 fb41 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d051      	beq.n	8014cf2 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x184>
 8014c4e:	4628      	mov	r0, r5
 8014c50:	f7f4 fb2a 	bl	80092a8 <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8014c54:	2200      	movs	r2, #0
 8014c56:	4290      	cmp	r0, r2
 8014c58:	bf14      	ite	ne
 8014c5a:	2303      	movne	r3, #3
 8014c5c:	2301      	moveq	r3, #1
 8014c5e:	a925      	add	r1, sp, #148	; 0x94
 8014c60:	4655      	mov	r5, sl
 8014c62:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8014c66:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	9303      	str	r3, [sp, #12]
 8014c6e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8014c72:	2602      	movs	r6, #2
 8014c74:	e9cd 160a 	strd	r1, r6, [sp, #40]	; 0x28
 8014c78:	e9cd 2706 	strd	r2, r7, [sp, #24]
 8014c7c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014c80:	7c23      	ldrb	r3, [r4, #16]
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	7c63      	ldrb	r3, [r4, #17]
 8014c86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014c88:	2103      	movs	r1, #3
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f7ff fd16 	bl	80146bc <2058bb475204def8ad39a4c1db4c087e75b9f860>
 8014c90:	2301      	movs	r3, #1
 8014c92:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8014c96:	ab13      	add	r3, sp, #76	; 0x4c
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	9601      	str	r6, [sp, #4]
 8014c9c:	ab14      	add	r3, sp, #80	; 0x50
 8014c9e:	aa3d      	add	r2, sp, #244	; 0xf4
 8014ca0:	a92a      	add	r1, sp, #168	; 0xa8
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f7ff feee 	bl	8014a84 <1b70dd809fc4873e9266aad98968a88e80b5bf06>
 8014ca8:	b050      	add	sp, #320	; 0x140
 8014caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cae:	4628      	mov	r0, r5
 8014cb0:	f7f4 fa9e 	bl	80091f0 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d193      	bne.n	8014be0 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x72>
 8014cb8:	4628      	mov	r0, r5
 8014cba:	f7f4 fac7 	bl	800924c <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	d18e      	bne.n	8014be0 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x72>
 8014cc2:	2005      	movs	r0, #5
 8014cc4:	f7f3 fb56 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014cc8:	4601      	mov	r1, r0
 8014cca:	4648      	mov	r0, r9
 8014ccc:	f7f4 fafe 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8014cd0:	b948      	cbnz	r0, 8014ce6 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x178>
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f7f4 fa24 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014cd8:	4607      	mov	r7, r0
 8014cda:	b920      	cbnz	r0, 8014ce6 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x178>
 8014cdc:	2005      	movs	r0, #5
 8014cde:	f7f3 fb49 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	e78c      	b.n	8014c00 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x92>
 8014ce6:	2005      	movs	r0, #5
 8014ce8:	f7f3 fb44 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8014cec:	2701      	movs	r7, #1
 8014cee:	4606      	mov	r6, r0
 8014cf0:	e786      	b.n	8014c00 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x92>
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	f7f4 fa14 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014cf8:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8014cfc:	b990      	cbnz	r0, 8014d24 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x1b6>
 8014cfe:	460b      	mov	r3, r1
 8014d00:	f10d 02ce 	add.w	r2, sp, #206	; 0xce
 8014d04:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8014d08:	f853 6b04 	ldr.w	r6, [r3], #4
 8014d0c:	f842 6b04 	str.w	r6, [r2], #4
 8014d10:	4283      	cmp	r3, r0
 8014d12:	d1f9      	bne.n	8014d08 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x19a>
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	7013      	strb	r3, [r2, #0]
 8014d18:	2341      	movs	r3, #65	; 0x41
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 8014d20:	4613      	mov	r3, r2
 8014d22:	e79e      	b.n	8014c62 <00af7f89235fe04a2b2b59d942644988487fcbf4+0xf4>
 8014d24:	2201      	movs	r2, #1
 8014d26:	2303      	movs	r3, #3
 8014d28:	e79b      	b.n	8014c62 <00af7f89235fe04a2b2b59d942644988487fcbf4+0xf4>
	...

08014d2c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2>:
 8014d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d2e:	2274      	movs	r2, #116	; 0x74
 8014d30:	7042      	strb	r2, [r0, #1]
 8014d32:	7802      	ldrb	r2, [r0, #0]
 8014d34:	2a74      	cmp	r2, #116	; 0x74
 8014d36:	b089      	sub	sp, #36	; 0x24
 8014d38:	4604      	mov	r4, r0
 8014d3a:	d15a      	bne.n	8014df2 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xc6>
 8014d3c:	2900      	cmp	r1, #0
 8014d3e:	d14b      	bne.n	8014dd8 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xac>
 8014d40:	f7f8 fc4e 	bl	800d5e0 <LOGGER_StartSection>
 8014d44:	4e36      	ldr	r6, [pc, #216]	; (8014e20 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf4>)
 8014d46:	af03      	add	r7, sp, #12
 8014d48:	466d      	mov	r5, sp
 8014d4a:	b340      	cbz	r0, 8014d9e <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x72>
 8014d4c:	2303      	movs	r3, #3
 8014d4e:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8014d52:	e897 0003 	ldmia.w	r7, {r0, r1}
 8014d56:	f7f8 fc4b 	bl	800d5f0 <LOGGER_PrintHeader>
 8014d5a:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f7ff fef8 	bl	8014b54 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8014d64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d68:	482e      	ldr	r0, [pc, #184]	; (8014e24 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf8>)
 8014d6a:	f7f8 fc27 	bl	800d5bc <LOGGER_Print>
 8014d6e:	f104 0137 	add.w	r1, r4, #55	; 0x37
 8014d72:	4628      	mov	r0, r5
 8014d74:	f7ff feee 	bl	8014b54 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8014d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d7c:	482a      	ldr	r0, [pc, #168]	; (8014e28 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xfc>)
 8014d7e:	f7f8 fc1d 	bl	800d5bc <LOGGER_Print>
 8014d82:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014d86:	4628      	mov	r0, r5
 8014d88:	f7ff fee4 	bl	8014b54 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8014d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d90:	4826      	ldr	r0, [pc, #152]	; (8014e2c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x100>)
 8014d92:	f7f8 fc13 	bl	800d5bc <LOGGER_Print>
 8014d96:	f7f8 fc09 	bl	800d5ac <LOGGER_PrintNL>
 8014d9a:	f7f8 fc27 	bl	800d5ec <LOGGER_EndSection>
 8014d9e:	2100      	movs	r1, #0
 8014da0:	2210      	movs	r2, #16
 8014da2:	f10d 000d 	add.w	r0, sp, #13
 8014da6:	f004 f8eb 	bl	8018f80 <memset>
 8014daa:	2302      	movs	r3, #2
 8014dac:	f10d 010d 	add.w	r1, sp, #13
 8014db0:	2000      	movs	r0, #0
 8014db2:	f88d 300c 	strb.w	r3, [sp, #12]
 8014db6:	f7f3 fef7 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8014dba:	b1a8      	cbz	r0, 8014de8 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xbc>
 8014dbc:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014dc0:	4638      	mov	r0, r7
 8014dc2:	f7f4 fa83 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8014dc6:	2303      	movs	r3, #3
 8014dc8:	e9cd 3600 	strd	r3, r6, [sp]
 8014dcc:	b150      	cbz	r0, 8014de4 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xb8>
 8014dce:	4a18      	ldr	r2, [pc, #96]	; (8014e30 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x104>)
 8014dd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014dd4:	f7f8 fc2a 	bl	800d62c <LOGGER_PrintLine>
 8014dd8:	4620      	mov	r0, r4
 8014dda:	b009      	add	sp, #36	; 0x24
 8014ddc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014de0:	f7f4 beae 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8014de4:	4a13      	ldr	r2, [pc, #76]	; (8014e34 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x108>)
 8014de6:	e7f3      	b.n	8014dd0 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa4>
 8014de8:	2303      	movs	r3, #3
 8014dea:	e9cd 3600 	strd	r3, r6, [sp]
 8014dee:	4a12      	ldr	r2, [pc, #72]	; (8014e38 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x10c>)
 8014df0:	e7ee      	b.n	8014dd0 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa4>
 8014df2:	7c03      	ldrb	r3, [r0, #16]
 8014df4:	2b11      	cmp	r3, #17
 8014df6:	d009      	beq.n	8014e0c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xe0>
 8014df8:	2b3a      	cmp	r3, #58	; 0x3a
 8014dfa:	d00c      	beq.n	8014e16 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xea>
 8014dfc:	2303      	movs	r3, #3
 8014dfe:	9303      	str	r3, [sp, #12]
 8014e00:	4b07      	ldr	r3, [pc, #28]	; (8014e20 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf4>)
 8014e02:	4a0e      	ldr	r2, [pc, #56]	; (8014e3c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x110>)
 8014e04:	9304      	str	r3, [sp, #16]
 8014e06:	4619      	mov	r1, r3
 8014e08:	2003      	movs	r0, #3
 8014e0a:	e7e3      	b.n	8014dd4 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa8>
 8014e0c:	b009      	add	sp, #36	; 0x24
 8014e0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e12:	f002 bba1 	b.w	8017558 <32c59f113e62a8491f5b52f96af26c008a4f227e>
 8014e16:	b009      	add	sp, #36	; 0x24
 8014e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e1c:	f000 bc52 	b.w	80156c4 <a4e54615be274afd6b4d40b38f5ecc85b5402247>
 8014e20:	0801d139 	.word	0x0801d139
 8014e24:	0801d150 	.word	0x0801d150
 8014e28:	0801d161 	.word	0x0801d161
 8014e2c:	0801d16c 	.word	0x0801d16c
 8014e30:	0801d17f 	.word	0x0801d17f
 8014e34:	0801d19b 	.word	0x0801d19b
 8014e38:	0801d1b6 	.word	0x0801d1b6
 8014e3c:	0801d1db 	.word	0x0801d1db

08014e40 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb>:
 8014e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e44:	461e      	mov	r6, r3
 8014e46:	2374      	movs	r3, #116	; 0x74
 8014e48:	7043      	strb	r3, [r0, #1]
 8014e4a:	7a53      	ldrb	r3, [r2, #9]
 8014e4c:	7403      	strb	r3, [r0, #16]
 8014e4e:	7a13      	ldrb	r3, [r2, #8]
 8014e50:	7443      	strb	r3, [r0, #17]
 8014e52:	4691      	mov	r9, r2
 8014e54:	f102 0a37 	add.w	sl, r2, #55	; 0x37
 8014e58:	f100 041d 	add.w	r4, r0, #29
 8014e5c:	4688      	mov	r8, r1
 8014e5e:	b0c7      	sub	sp, #284	; 0x11c
 8014e60:	4607      	mov	r7, r0
 8014e62:	4653      	mov	r3, sl
 8014e64:	4622      	mov	r2, r4
 8014e66:	f109 0147 	add.w	r1, r9, #71	; 0x47
 8014e6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8014e6e:	f842 0b04 	str.w	r0, [r2], #4
 8014e72:	428b      	cmp	r3, r1
 8014e74:	d1f9      	bne.n	8014e6a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2a>
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	7013      	strb	r3, [r2, #0]
 8014e7a:	f109 0526 	add.w	r5, r9, #38	; 0x26
 8014e7e:	462b      	mov	r3, r5
 8014e80:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8014e84:	f109 0136 	add.w	r1, r9, #54	; 0x36
 8014e88:	f853 0b04 	ldr.w	r0, [r3], #4
 8014e8c:	f842 0b04 	str.w	r0, [r2], #4
 8014e90:	428b      	cmp	r3, r1
 8014e92:	d1f9      	bne.n	8014e88 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x48>
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	7013      	strb	r3, [r2, #0]
 8014e98:	4620      	mov	r0, r4
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8014ea0:	f7f4 f93e 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8014ea4:	9005      	str	r0, [sp, #20]
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d165      	bne.n	8014f76 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x136>
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f7f3 faca 	bl	8008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8014eb0:	b118      	cbz	r0, 8014eba <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a>
 8014eb2:	f898 3009 	ldrb.w	r3, [r8, #9]
 8014eb6:	2b2b      	cmp	r3, #43	; 0x2b
 8014eb8:	d177      	bne.n	8014faa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8014eba:	2300      	movs	r3, #0
 8014ebc:	9306      	str	r3, [sp, #24]
 8014ebe:	f7f4 fe81 	bl	8009bc4 <4b9793db96fa05ad63a954fae76e17c90da5d34d>
 8014ec2:	4604      	mov	r4, r0
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	f000 83d5 	beq.w	8015674 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x834>
 8014eca:	4639      	mov	r1, r7
 8014ecc:	f003 f844 	bl	8017f58 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>
 8014ed0:	2374      	movs	r3, #116	; 0x74
 8014ed2:	7023      	strb	r3, [r4, #0]
 8014ed4:	f898 3009 	ldrb.w	r3, [r8, #9]
 8014ed8:	2b2b      	cmp	r3, #43	; 0x2b
 8014eda:	f000 80a3 	beq.w	8015024 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1e4>
 8014ede:	9b05      	ldr	r3, [sp, #20]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f040 808f 	bne.w	8015004 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1c4>
 8014ee6:	7873      	ldrb	r3, [r6, #1]
 8014ee8:	06da      	lsls	r2, r3, #27
 8014eea:	d508      	bpl.n	8014efe <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0xbe>
 8014eec:	2304      	movs	r3, #4
 8014eee:	9326      	str	r3, [sp, #152]	; 0x98
 8014ef0:	4bb3      	ldr	r3, [pc, #716]	; (80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8014ef2:	4ab4      	ldr	r2, [pc, #720]	; (80151c4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x384>)
 8014ef4:	9327      	str	r3, [sp, #156]	; 0x9c
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	2004      	movs	r0, #4
 8014efa:	f7f8 fb97 	bl	800d62c <LOGGER_PrintLine>
 8014efe:	f8b6 5003 	ldrh.w	r5, [r6, #3]
 8014f02:	f001 f911 	bl	8016128 <eada7656be7f8681f934187ead57a12001632399>
 8014f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f0a:	4298      	cmp	r0, r3
 8014f0c:	d01d      	beq.n	8014f4a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x10a>
 8014f0e:	4285      	cmp	r5, r0
 8014f10:	d21b      	bcs.n	8014f4a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x10a>
 8014f12:	7873      	ldrb	r3, [r6, #1]
 8014f14:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>
 8014f18:	f043 0308 	orr.w	r3, r3, #8
 8014f1c:	7073      	strb	r3, [r6, #1]
 8014f1e:	a921      	add	r1, sp, #132	; 0x84
 8014f20:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8014f24:	f7f4 f84a 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 8014f28:	f10d 0a98 	add.w	sl, sp, #152	; 0x98
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d064      	beq.n	8014ffa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1ba>
 8014f30:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
 8014f34:	4629      	mov	r1, r5
 8014f36:	f7f3 fb73 	bl	8008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8014f3a:	2304      	movs	r3, #4
 8014f3c:	e9cd 3b26 	strd	r3, fp, [sp, #152]	; 0x98
 8014f40:	4aa1      	ldr	r2, [pc, #644]	; (80151c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x388>)
 8014f42:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8014f46:	f7f8 fb71 	bl	800d62c <LOGGER_PrintLine>
 8014f4a:	7871      	ldrb	r1, [r6, #1]
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ff fd7e 	bl	8014a4e <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8014f52:	2301      	movs	r3, #1
 8014f54:	9301      	str	r3, [sp, #4]
 8014f56:	f108 0304 	add.w	r3, r8, #4
 8014f5a:	9300      	str	r3, [sp, #0]
 8014f5c:	464a      	mov	r2, r9
 8014f5e:	4633      	mov	r3, r6
 8014f60:	4641      	mov	r1, r8
 8014f62:	4620      	mov	r0, r4
 8014f64:	f7ff fd8e 	bl	8014a84 <1b70dd809fc4873e9266aad98968a88e80b5bf06>
 8014f68:	b910      	cbnz	r0, 8014f70 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	f7f4 fde8 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8014f70:	9b06      	ldr	r3, [sp, #24]
 8014f72:	b18b      	cbz	r3, 8014f98 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8014f74:	e019      	b.n	8014faa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8014f76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014f78:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f7f3 fa61 	bl	8008444 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8014f82:	f898 3009 	ldrb.w	r3, [r8, #9]
 8014f86:	2b2b      	cmp	r3, #43	; 0x2b
 8014f88:	7c3b      	ldrb	r3, [r7, #16]
 8014f8a:	d109      	bne.n	8014fa0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x160>
 8014f8c:	2b11      	cmp	r3, #17
 8014f8e:	d103      	bne.n	8014f98 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8014f90:	f7f4 f868 	bl	8009064 <963d67651eaddeb307ab0b02134cee28199d533d>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d190      	bne.n	8014eba <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a>
 8014f98:	4638      	mov	r0, r7
 8014f9a:	f7f4 fdd1 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8014f9e:	e376      	b.n	801568e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x84e>
 8014fa0:	2b11      	cmp	r3, #17
 8014fa2:	d102      	bne.n	8014faa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8014fa4:	f7f4 f85e 	bl	8009064 <963d67651eaddeb307ab0b02134cee28199d533d>
 8014fa8:	bb28      	cbnz	r0, 8014ff6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1b6>
 8014faa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014fae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014fb6:	b143      	cbz	r3, 8014fca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x18a>
 8014fb8:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
 8014fbc:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
 8014fc0:	4419      	add	r1, r3
 8014fc2:	b2c9      	uxtb	r1, r1
 8014fc4:	4638      	mov	r0, r7
 8014fc6:	f002 ff71 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8014fca:	f899 1048 	ldrb.w	r1, [r9, #72]	; 0x48
 8014fce:	4638      	mov	r0, r7
 8014fd0:	f002 ff6c 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8014fd4:	7c3b      	ldrb	r3, [r7, #16]
 8014fd6:	2b11      	cmp	r3, #17
 8014fd8:	f000 8354 	beq.w	8015684 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x844>
 8014fdc:	2b3a      	cmp	r3, #58	; 0x3a
 8014fde:	f000 835f 	beq.w	80156a0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x860>
 8014fe2:	2204      	movs	r2, #4
 8014fe4:	9226      	str	r2, [sp, #152]	; 0x98
 8014fe6:	4a76      	ldr	r2, [pc, #472]	; (80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8014fe8:	9227      	str	r2, [sp, #156]	; 0x9c
 8014fea:	4975      	ldr	r1, [pc, #468]	; (80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8014fec:	4a77      	ldr	r2, [pc, #476]	; (80151cc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x38c>)
 8014fee:	2004      	movs	r0, #4
 8014ff0:	f7f8 fb1c 	bl	800d62c <LOGGER_PrintLine>
 8014ff4:	e7d0      	b.n	8014f98 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8014ff6:	9b05      	ldr	r3, [sp, #20]
 8014ff8:	e760      	b.n	8014ebc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7c>
 8014ffa:	2304      	movs	r3, #4
 8014ffc:	e9cd 3b26 	strd	r3, fp, [sp, #152]	; 0x98
 8015000:	4a73      	ldr	r2, [pc, #460]	; (80151d0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x390>)
 8015002:	e79e      	b.n	8014f42 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x102>
 8015004:	2305      	movs	r3, #5
 8015006:	9326      	str	r3, [sp, #152]	; 0x98
 8015008:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801500c:	4b6c      	ldr	r3, [pc, #432]	; (80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 801500e:	9327      	str	r3, [sp, #156]	; 0x9c
 8015010:	f7f4 f8b4 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8015014:	4a6f      	ldr	r2, [pc, #444]	; (80151d4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x394>)
 8015016:	e9cd 0100 	strd	r0, r1, [sp]
 801501a:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 801501e:	f7f8 fb05 	bl	800d62c <LOGGER_PrintLine>
 8015022:	e796      	b.n	8014f52 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x112>
 8015024:	227f      	movs	r2, #127	; 0x7f
 8015026:	2100      	movs	r1, #0
 8015028:	a826      	add	r0, sp, #152	; 0x98
 801502a:	f003 ffa9 	bl	8018f80 <memset>
 801502e:	f104 031d 	add.w	r3, r4, #29
 8015032:	9307      	str	r3, [sp, #28]
 8015034:	f10a 0210 	add.w	r2, sl, #16
 8015038:	f85a 1b04 	ldr.w	r1, [sl], #4
 801503c:	f843 1b04 	str.w	r1, [r3], #4
 8015040:	4592      	cmp	sl, r2
 8015042:	d1f9      	bne.n	8015038 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1f8>
 8015044:	f89a 2000 	ldrb.w	r2, [sl]
 8015048:	701a      	strb	r2, [r3, #0]
 801504a:	f105 0110 	add.w	r1, r5, #16
 801504e:	462b      	mov	r3, r5
 8015050:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8015054:	f853 0b04 	ldr.w	r0, [r3], #4
 8015058:	f842 0b04 	str.w	r0, [r2], #4
 801505c:	428b      	cmp	r3, r1
 801505e:	d1f9      	bne.n	8015054 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x214>
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	7013      	strb	r3, [r2, #0]
 8015064:	2303      	movs	r3, #3
 8015066:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 801506a:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 801506e:	b1cb      	cbz	r3, 80150a4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x264>
 8015070:	78b3      	ldrb	r3, [r6, #2]
 8015072:	b91b      	cbnz	r3, 801507c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x23c>
 8015074:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8015078:	f000 ffc0 	bl	8015ffc <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 801507c:	6863      	ldr	r3, [r4, #4]
 801507e:	f893 a000 	ldrb.w	sl, [r3]
 8015082:	785d      	ldrb	r5, [r3, #1]
 8015084:	2300      	movs	r3, #0
 8015086:	9304      	str	r3, [sp, #16]
 8015088:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 801508c:	2ba0      	cmp	r3, #160	; 0xa0
 801508e:	d017      	beq.n	80150c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x280>
 8015090:	2d04      	cmp	r5, #4
 8015092:	d82c      	bhi.n	80150ee <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2ae>
 8015094:	1e6a      	subs	r2, r5, #1
 8015096:	6863      	ldr	r3, [r4, #4]
 8015098:	2a03      	cmp	r2, #3
 801509a:	d873      	bhi.n	8015184 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x344>
 801509c:	e8df f002 	tbb	[pc, r2]
 80150a0:	9e857e78 	.word	0x9e857e78
 80150a4:	ab12      	add	r3, sp, #72	; 0x48
 80150a6:	f109 0c36 	add.w	ip, r9, #54	; 0x36
 80150aa:	6828      	ldr	r0, [r5, #0]
 80150ac:	6869      	ldr	r1, [r5, #4]
 80150ae:	461a      	mov	r2, r3
 80150b0:	c203      	stmia	r2!, {r0, r1}
 80150b2:	3508      	adds	r5, #8
 80150b4:	4565      	cmp	r5, ip
 80150b6:	4613      	mov	r3, r2
 80150b8:	d1f7      	bne.n	80150aa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x26a>
 80150ba:	782a      	ldrb	r2, [r5, #0]
 80150bc:	701a      	strb	r2, [r3, #0]
 80150be:	e7dd      	b.n	801507c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x23c>
 80150c0:	9804      	ldr	r0, [sp, #16]
 80150c2:	6861      	ldr	r1, [r4, #4]
 80150c4:	f00a 051f 	and.w	r5, sl, #31
 80150c8:	ab26      	add	r3, sp, #152	; 0x98
 80150ca:	3502      	adds	r5, #2
 80150cc:	462a      	mov	r2, r5
 80150ce:	1818      	adds	r0, r3, r0
 80150d0:	f004 f809 	bl	80190e6 <memcpy>
 80150d4:	4629      	mov	r1, r5
 80150d6:	4620      	mov	r0, r4
 80150d8:	f002 fee8 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80150dc:	9b04      	ldr	r3, [sp, #16]
 80150de:	441d      	add	r5, r3
 80150e0:	b2eb      	uxtb	r3, r5
 80150e2:	9304      	str	r3, [sp, #16]
 80150e4:	6863      	ldr	r3, [r4, #4]
 80150e6:	f893 a000 	ldrb.w	sl, [r3]
 80150ea:	785d      	ldrb	r5, [r3, #1]
 80150ec:	e7cc      	b.n	8015088 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x248>
 80150ee:	2dfe      	cmp	r5, #254	; 0xfe
 80150f0:	f000 808b 	beq.w	801520a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3ca>
 80150f4:	2dff      	cmp	r5, #255	; 0xff
 80150f6:	f000 8093 	beq.w	8015220 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3e0>
 80150fa:	2dfd      	cmp	r5, #253	; 0xfd
 80150fc:	d07b      	beq.n	80151f6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3b6>
 80150fe:	f04f 0b02 	mov.w	fp, #2
 8015102:	a912      	add	r1, sp, #72	; 0x48
 8015104:	a808      	add	r0, sp, #32
 8015106:	f7f4 f953 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 801510a:	ab08      	add	r3, sp, #32
 801510c:	aa21      	add	r2, sp, #132	; 0x84
 801510e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8015112:	6818      	ldr	r0, [r3, #0]
 8015114:	6859      	ldr	r1, [r3, #4]
 8015116:	4694      	mov	ip, r2
 8015118:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801511c:	3308      	adds	r3, #8
 801511e:	4573      	cmp	r3, lr
 8015120:	4662      	mov	r2, ip
 8015122:	d1f6      	bne.n	8015112 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2d2>
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	f88c 3000 	strb.w	r3, [ip]
 801512a:	a912      	add	r1, sp, #72	; 0x48
 801512c:	a808      	add	r0, sp, #32
 801512e:	f7f4 f98f 	bl	8009450 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 8015132:	ab08      	add	r3, sp, #32
 8015134:	aa1c      	add	r2, sp, #112	; 0x70
 8015136:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801513a:	6818      	ldr	r0, [r3, #0]
 801513c:	6859      	ldr	r1, [r3, #4]
 801513e:	4694      	mov	ip, r2
 8015140:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015144:	3308      	adds	r3, #8
 8015146:	4573      	cmp	r3, lr
 8015148:	4662      	mov	r2, ip
 801514a:	d1f6      	bne.n	801513a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2fa>
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	f88c 3000 	strb.w	r3, [ip]
 8015152:	2005      	movs	r0, #5
 8015154:	f7f3 f90e 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015158:	4601      	mov	r1, r0
 801515a:	a81c      	add	r0, sp, #112	; 0x70
 801515c:	f7f4 f8b6 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8015160:	2800      	cmp	r0, #0
 8015162:	d16b      	bne.n	801523c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3fc>
 8015164:	9807      	ldr	r0, [sp, #28]
 8015166:	f7f3 ffdb 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 801516a:	2800      	cmp	r0, #0
 801516c:	f040 809b 	bne.w	80152a6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x466>
 8015170:	2303      	movs	r3, #3
 8015172:	9317      	str	r3, [sp, #92]	; 0x5c
 8015174:	4b12      	ldr	r3, [pc, #72]	; (80151c0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8015176:	4a18      	ldr	r2, [pc, #96]	; (80151d8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x398>)
 8015178:	9318      	str	r3, [sp, #96]	; 0x60
 801517a:	4619      	mov	r1, r3
 801517c:	2003      	movs	r0, #3
 801517e:	f7f8 fa55 	bl	800d62c <LOGGER_PrintLine>
 8015182:	e0ae      	b.n	80152e2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x4a2>
 8015184:	789b      	ldrb	r3, [r3, #2]
 8015186:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801518a:	f04f 0b03 	mov.w	fp, #3
 801518e:	e7b8      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8015190:	885b      	ldrh	r3, [r3, #2]
 8015192:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 8015196:	f04f 0b04 	mov.w	fp, #4
 801519a:	e7b2      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 801519c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80151a0:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 80151a4:	f04f 0b06 	mov.w	fp, #6
 80151a8:	e7ab      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80151aa:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80151ae:	f8cd 2051 	str.w	r2, [sp, #81]	; 0x51
 80151b2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80151b6:	f8cd 2055 	str.w	r2, [sp, #85]	; 0x55
 80151ba:	f04f 0b0a 	mov.w	fp, #10
 80151be:	e7a0      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80151c0:	0801d139 	.word	0x0801d139
 80151c4:	0801d1f4 	.word	0x0801d1f4
 80151c8:	0801d204 	.word	0x0801d204
 80151cc:	0801d2a9 	.word	0x0801d2a9
 80151d0:	0801d221 	.word	0x0801d221
 80151d4:	0801d22f 	.word	0x0801d22f
 80151d8:	0801d044 	.word	0x0801d044
 80151dc:	1c9a      	adds	r2, r3, #2
 80151de:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 80151e2:	3312      	adds	r3, #18
 80151e4:	f852 0b04 	ldr.w	r0, [r2], #4
 80151e8:	f841 0b04 	str.w	r0, [r1], #4
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d1f9      	bne.n	80151e4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3a4>
 80151f0:	f04f 0b12 	mov.w	fp, #18
 80151f4:	e785      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80151f6:	6863      	ldr	r3, [r4, #4]
 80151f8:	f8d3 0002 	ldr.w	r0, [r3, #2]
 80151fc:	9015      	str	r0, [sp, #84]	; 0x54
 80151fe:	799b      	ldrb	r3, [r3, #6]
 8015200:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8015204:	f04f 0b07 	mov.w	fp, #7
 8015208:	e77b      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 801520a:	6863      	ldr	r3, [r4, #4]
 801520c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8015210:	f8cd 2053 	str.w	r2, [sp, #83]	; 0x53
 8015214:	88db      	ldrh	r3, [r3, #6]
 8015216:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 801521a:	f04f 0b08 	mov.w	fp, #8
 801521e:	e770      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8015220:	6863      	ldr	r3, [r4, #4]
 8015222:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8015226:	f8cd 2052 	str.w	r2, [sp, #82]	; 0x52
 801522a:	88da      	ldrh	r2, [r3, #6]
 801522c:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
 8015230:	7a1b      	ldrb	r3, [r3, #8]
 8015232:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8015236:	f04f 0b09 	mov.w	fp, #9
 801523a:	e762      	b.n	8015102 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 801523c:	2002      	movs	r0, #2
 801523e:	f7f3 f899 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015242:	4601      	mov	r1, r0
 8015244:	a821      	add	r0, sp, #132	; 0x84
 8015246:	f7f4 f841 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801524a:	2800      	cmp	r0, #0
 801524c:	d08a      	beq.n	8015164 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x324>
 801524e:	f01a 0a1f 	ands.w	sl, sl, #31
 8015252:	f000 80e7 	beq.w	8015424 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5e4>
 8015256:	4659      	mov	r1, fp
 8015258:	4620      	mov	r0, r4
 801525a:	f002 fe27 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801525e:	2102      	movs	r1, #2
 8015260:	4620      	mov	r0, r4
 8015262:	f002 fde3 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015266:	f10a 3aff 	add.w	sl, sl, #4294967295
 801526a:	6863      	ldr	r3, [r4, #4]
 801526c:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
 8015270:	f883 a000 	strb.w	sl, [r3]
 8015274:	6863      	ldr	r3, [r4, #4]
 8015276:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 801527a:	705d      	strb	r5, [r3, #1]
 801527c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015280:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015288:	2d04      	cmp	r5, #4
 801528a:	f8de 3000 	ldr.w	r3, [lr]
 801528e:	f88c 3000 	strb.w	r3, [ip]
 8015292:	d80d      	bhi.n	80152b0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x470>
 8015294:	3d01      	subs	r5, #1
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	2d03      	cmp	r5, #3
 801529a:	f200 808b 	bhi.w	80153b4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x574>
 801529e:	e8df f005 	tbb	[pc, r5]
 80152a2:	918d      	.short	0x918d
 80152a4:	9f96      	.short	0x9f96
 80152a6:	7c23      	ldrb	r3, [r4, #16]
 80152a8:	2b11      	cmp	r3, #17
 80152aa:	f47f af61 	bne.w	8015170 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x330>
 80152ae:	e7ce      	b.n	801524e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x40e>
 80152b0:	2dfe      	cmp	r5, #254	; 0xfe
 80152b2:	f000 80a6 	beq.w	8015402 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5c2>
 80152b6:	2dff      	cmp	r5, #255	; 0xff
 80152b8:	f000 80aa 	beq.w	8015410 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5d0>
 80152bc:	2dfd      	cmp	r5, #253	; 0xfd
 80152be:	f000 809a 	beq.w	80153f6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5b6>
 80152c2:	a917      	add	r1, sp, #92	; 0x5c
 80152c4:	a808      	add	r0, sp, #32
 80152c6:	f7f4 f873 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 80152ca:	ab08      	add	r3, sp, #32
 80152cc:	f104 0241 	add.w	r2, r4, #65	; 0x41
 80152d0:	a90c      	add	r1, sp, #48	; 0x30
 80152d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80152d6:	f842 0b04 	str.w	r0, [r2], #4
 80152da:	428b      	cmp	r3, r1
 80152dc:	d1f9      	bne.n	80152d2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x492>
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	7013      	strb	r3, [r2, #0]
 80152e2:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 80152e6:	ad26      	add	r5, sp, #152	; 0x98
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d046      	beq.n	801537a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x53a>
 80152ec:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d042      	beq.n	801537a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x53a>
 80152f4:	6861      	ldr	r1, [r4, #4]
 80152f6:	eba3 0a01 	sub.w	sl, r3, r1
 80152fa:	9b04      	ldr	r3, [sp, #16]
 80152fc:	fa5f fb8a 	uxtb.w	fp, sl
 8015300:	465a      	mov	r2, fp
 8015302:	18e8      	adds	r0, r5, r3
 8015304:	f003 feef 	bl	80190e6 <memcpy>
 8015308:	4659      	mov	r1, fp
 801530a:	4620      	mov	r0, r4
 801530c:	f002 fdce 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8015310:	9b04      	ldr	r3, [sp, #16]
 8015312:	449a      	add	sl, r3
 8015314:	fa5f f38a 	uxtb.w	r3, sl
 8015318:	4631      	mov	r1, r6
 801531a:	4620      	mov	r0, r4
 801531c:	9304      	str	r3, [sp, #16]
 801531e:	f7ff fb01 	bl	8014924 <6fdc701aa2cd71dee737cd6193e5dab778619cb9>
 8015322:	4601      	mov	r1, r0
 8015324:	4620      	mov	r0, r4
 8015326:	f002 fdc1 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801532a:	7873      	ldrb	r3, [r6, #1]
 801532c:	f8b6 a003 	ldrh.w	sl, [r6, #3]
 8015330:	06db      	lsls	r3, r3, #27
 8015332:	d408      	bmi.n	8015346 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x506>
 8015334:	2303      	movs	r3, #3
 8015336:	9310      	str	r3, [sp, #64]	; 0x40
 8015338:	4bb9      	ldr	r3, [pc, #740]	; (8015620 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 801533a:	4aba      	ldr	r2, [pc, #744]	; (8015624 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e4>)
 801533c:	9311      	str	r3, [sp, #68]	; 0x44
 801533e:	4619      	mov	r1, r3
 8015340:	2003      	movs	r0, #3
 8015342:	f7f8 f973 	bl	800d62c <LOGGER_PrintLine>
 8015346:	f000 feef 	bl	8016128 <eada7656be7f8681f934187ead57a12001632399>
 801534a:	4582      	cmp	sl, r0
 801534c:	d90c      	bls.n	8015368 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x528>
 801534e:	7873      	ldrb	r3, [r6, #1]
 8015350:	4ab5      	ldr	r2, [pc, #724]	; (8015628 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e8>)
 8015352:	f043 0308 	orr.w	r3, r3, #8
 8015356:	7073      	strb	r3, [r6, #1]
 8015358:	2303      	movs	r3, #3
 801535a:	9310      	str	r3, [sp, #64]	; 0x40
 801535c:	4bb0      	ldr	r3, [pc, #704]	; (8015620 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 801535e:	9311      	str	r3, [sp, #68]	; 0x44
 8015360:	4619      	mov	r1, r3
 8015362:	2003      	movs	r0, #3
 8015364:	f7f8 f962 	bl	800d62c <LOGGER_PrintLine>
 8015368:	7871      	ldrb	r1, [r6, #1]
 801536a:	4630      	mov	r0, r6
 801536c:	f7ff fb6f 	bl	8014a4e <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8015370:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
 8015374:	4620      	mov	r0, r4
 8015376:	f002 fd99 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801537a:	2301      	movs	r3, #1
 801537c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8015380:	9303      	str	r3, [sp, #12]
 8015382:	9b04      	ldr	r3, [sp, #16]
 8015384:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8015388:	f108 0304 	add.w	r3, r8, #4
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	464a      	mov	r2, r9
 8015390:	4633      	mov	r3, r6
 8015392:	4641      	mov	r1, r8
 8015394:	4620      	mov	r0, r4
 8015396:	f7ff f859 	bl	801444c <13ccdc5f94324d1909629c7f21aeb736294bb0ba>
 801539a:	2800      	cmp	r0, #0
 801539c:	f47f ade8 	bne.w	8014f70 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 80153a0:	2304      	movs	r3, #4
 80153a2:	9326      	str	r3, [sp, #152]	; 0x98
 80153a4:	4b9e      	ldr	r3, [pc, #632]	; (8015620 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 80153a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80153a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80153ac:	4a9f      	ldr	r2, [pc, #636]	; (801562c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7ec>)
 80153ae:	f7f8 f93d 	bl	800d62c <LOGGER_PrintLine>
 80153b2:	e5dd      	b.n	8014f70 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 80153b4:	789b      	ldrb	r3, [r3, #2]
 80153b6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80153ba:	e782      	b.n	80152c2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80153bc:	885b      	ldrh	r3, [r3, #2]
 80153be:	f8ad 306b 	strh.w	r3, [sp, #107]	; 0x6b
 80153c2:	e77e      	b.n	80152c2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80153c4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80153c8:	f8cd 3069 	str.w	r3, [sp, #105]	; 0x69
 80153cc:	e779      	b.n	80152c2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80153ce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80153d2:	f8cd 2065 	str.w	r2, [sp, #101]	; 0x65
 80153d6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80153da:	f8cd 2069 	str.w	r2, [sp, #105]	; 0x69
 80153de:	e770      	b.n	80152c2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80153e0:	1c9a      	adds	r2, r3, #2
 80153e2:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
 80153e6:	3312      	adds	r3, #18
 80153e8:	f852 0b04 	ldr.w	r0, [r2], #4
 80153ec:	f841 0b04 	str.w	r0, [r1], #4
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d1f9      	bne.n	80153e8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5a8>
 80153f4:	e765      	b.n	80152c2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80153f6:	6863      	ldr	r3, [r4, #4]
 80153f8:	f8d3 0002 	ldr.w	r0, [r3, #2]
 80153fc:	901a      	str	r0, [sp, #104]	; 0x68
 80153fe:	799b      	ldrb	r3, [r3, #6]
 8015400:	e7d9      	b.n	80153b6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x576>
 8015402:	6863      	ldr	r3, [r4, #4]
 8015404:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8015408:	f8cd 2067 	str.w	r2, [sp, #103]	; 0x67
 801540c:	88db      	ldrh	r3, [r3, #6]
 801540e:	e7d6      	b.n	80153be <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x57e>
 8015410:	6863      	ldr	r3, [r4, #4]
 8015412:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8015416:	f8cd 2066 	str.w	r2, [sp, #102]	; 0x66
 801541a:	88da      	ldrh	r2, [r3, #6]
 801541c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8015420:	7a1b      	ldrb	r3, [r3, #8]
 8015422:	e7c8      	b.n	80153b6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x576>
 8015424:	6863      	ldr	r3, [r4, #4]
 8015426:	eb03 010b 	add.w	r1, r3, fp
 801542a:	f813 200b 	ldrb.w	r2, [r3, fp]
 801542e:	f891 a001 	ldrb.w	sl, [r1, #1]
 8015432:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
 8015436:	2980      	cmp	r1, #128	; 0x80
 8015438:	f040 8109 	bne.w	801564e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x80e>
 801543c:	f1ba 0f04 	cmp.w	sl, #4
 8015440:	f200 8105 	bhi.w	801564e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x80e>
 8015444:	45aa      	cmp	sl, r5
 8015446:	d345      	bcc.n	80154d4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x694>
 8015448:	4659      	mov	r1, fp
 801544a:	4620      	mov	r0, r4
 801544c:	f002 fd2e 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8015450:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 8015454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015458:	ad17      	add	r5, sp, #92	; 0x5c
 801545a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801545c:	f8dc 3000 	ldr.w	r3, [ip]
 8015460:	702b      	strb	r3, [r5, #0]
 8015462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015466:	6863      	ldr	r3, [r4, #4]
 8015468:	f1ba 0f03 	cmp.w	sl, #3
 801546c:	d803      	bhi.n	8015476 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x636>
 801546e:	e8df f00a 	tbb	[pc, sl]
 8015472:	1814      	.short	0x1814
 8015474:	261d      	.short	0x261d
 8015476:	789b      	ldrb	r3, [r3, #2]
 8015478:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801547c:	a917      	add	r1, sp, #92	; 0x5c
 801547e:	a808      	add	r0, sp, #32
 8015480:	f7f3 ff96 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8015484:	ab08      	add	r3, sp, #32
 8015486:	f104 0241 	add.w	r2, r4, #65	; 0x41
 801548a:	a90c      	add	r1, sp, #48	; 0x30
 801548c:	f853 0b04 	ldr.w	r0, [r3], #4
 8015490:	f842 0b04 	str.w	r0, [r2], #4
 8015494:	428b      	cmp	r3, r1
 8015496:	d1f9      	bne.n	801548c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x64c>
 8015498:	e721      	b.n	80152de <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 801549a:	885b      	ldrh	r3, [r3, #2]
 801549c:	f8ad 306b 	strh.w	r3, [sp, #107]	; 0x6b
 80154a0:	e7ec      	b.n	801547c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80154a2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80154a6:	f8cd 3069 	str.w	r3, [sp, #105]	; 0x69
 80154aa:	e7e7      	b.n	801547c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80154ac:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80154b0:	f8cd 2065 	str.w	r2, [sp, #101]	; 0x65
 80154b4:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80154b8:	f8cd 2069 	str.w	r2, [sp, #105]	; 0x69
 80154bc:	e7de      	b.n	801547c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80154be:	1c9a      	adds	r2, r3, #2
 80154c0:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
 80154c4:	3312      	adds	r3, #18
 80154c6:	f852 0b04 	ldr.w	r0, [r2], #4
 80154ca:	f841 0b04 	str.w	r0, [r1], #4
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d1f9      	bne.n	80154c6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x686>
 80154d2:	e7d3      	b.n	801547c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80154d4:	f10b 0102 	add.w	r1, fp, #2
 80154d8:	f1ba 0f03 	cmp.w	sl, #3
 80154dc:	d808      	bhi.n	80154f0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 80154de:	e8df f00a 	tbb	[pc, sl]
 80154e2:	2602      	.short	0x2602
 80154e4:	322c      	.short	0x322c
 80154e6:	5c5b      	ldrb	r3, [r3, r1]
 80154e8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80154ec:	f10b 0103 	add.w	r1, fp, #3
 80154f0:	f002 0b1f 	and.w	fp, r2, #31
 80154f4:	4620      	mov	r0, r4
 80154f6:	f002 fcd9 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80154fa:	f1bb 0f00 	cmp.w	fp, #0
 80154fe:	d00d      	beq.n	801551c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6dc>
 8015500:	2102      	movs	r1, #2
 8015502:	4620      	mov	r0, r4
 8015504:	f002 fc92 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015508:	f10b 3bff 	add.w	fp, fp, #4294967295
 801550c:	6863      	ldr	r3, [r4, #4]
 801550e:	f06b 0b7f 	orn	fp, fp, #127	; 0x7f
 8015512:	f883 b000 	strb.w	fp, [r3]
 8015516:	6863      	ldr	r3, [r4, #4]
 8015518:	f883 a001 	strb.w	sl, [r3, #1]
 801551c:	2d04      	cmp	r5, #4
 801551e:	d81c      	bhi.n	801555a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x71a>
 8015520:	1eab      	subs	r3, r5, #2
 8015522:	2b02      	cmp	r3, #2
 8015524:	d837      	bhi.n	8015596 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x756>
 8015526:	e8df f003 	tbb	[pc, r3]
 801552a:	483f      	.short	0x483f
 801552c:	54          	.byte	0x54
 801552d:	00          	.byte	0x00
 801552e:	5a5b      	ldrh	r3, [r3, r1]
 8015530:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 8015534:	f10b 0104 	add.w	r1, fp, #4
 8015538:	e7da      	b.n	80154f0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 801553a:	585b      	ldr	r3, [r3, r1]
 801553c:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 8015540:	f10b 0106 	add.w	r1, fp, #6
 8015544:	e7d4      	b.n	80154f0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 8015546:	1858      	adds	r0, r3, r1
 8015548:	585b      	ldr	r3, [r3, r1]
 801554a:	f8cd 3051 	str.w	r3, [sp, #81]	; 0x51
 801554e:	6843      	ldr	r3, [r0, #4]
 8015550:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 8015554:	f10b 010a 	add.w	r1, fp, #10
 8015558:	e7ca      	b.n	80154f0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 801555a:	2dfe      	cmp	r5, #254	; 0xfe
 801555c:	d054      	beq.n	8015608 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7c8>
 801555e:	2dff      	cmp	r5, #255	; 0xff
 8015560:	d066      	beq.n	8015630 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7f0>
 8015562:	2dfd      	cmp	r5, #253	; 0xfd
 8015564:	d045      	beq.n	80155f2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7b2>
 8015566:	2102      	movs	r1, #2
 8015568:	4620      	mov	r0, r4
 801556a:	f002 fc5f 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801556e:	6863      	ldr	r3, [r4, #4]
 8015570:	2280      	movs	r2, #128	; 0x80
 8015572:	701a      	strb	r2, [r3, #0]
 8015574:	6863      	ldr	r3, [r4, #4]
 8015576:	a912      	add	r1, sp, #72	; 0x48
 8015578:	705d      	strb	r5, [r3, #1]
 801557a:	a808      	add	r0, sp, #32
 801557c:	f7f3 ff18 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8015580:	ab08      	add	r3, sp, #32
 8015582:	f104 0241 	add.w	r2, r4, #65	; 0x41
 8015586:	a90c      	add	r1, sp, #48	; 0x30
 8015588:	f853 0b04 	ldr.w	r0, [r3], #4
 801558c:	f842 0b04 	str.w	r0, [r2], #4
 8015590:	428b      	cmp	r3, r1
 8015592:	d1f9      	bne.n	8015588 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x748>
 8015594:	e6a3      	b.n	80152de <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 8015596:	2102      	movs	r1, #2
 8015598:	4620      	mov	r0, r4
 801559a:	f002 fc47 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801559e:	6863      	ldr	r3, [r4, #4]
 80155a0:	f8bd 2057 	ldrh.w	r2, [sp, #87]	; 0x57
 80155a4:	801a      	strh	r2, [r3, #0]
 80155a6:	e7de      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80155a8:	2104      	movs	r1, #4
 80155aa:	4620      	mov	r0, r4
 80155ac:	f002 fc3e 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80155b0:	6863      	ldr	r3, [r4, #4]
 80155b2:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	e7d5      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80155ba:	2108      	movs	r1, #8
 80155bc:	4620      	mov	r0, r4
 80155be:	f002 fc35 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80155c2:	6862      	ldr	r2, [r4, #4]
 80155c4:	f8dd 3051 	ldr.w	r3, [sp, #81]	; 0x51
 80155c8:	6013      	str	r3, [r2, #0]
 80155ca:	f8dd 3055 	ldr.w	r3, [sp, #85]	; 0x55
 80155ce:	6053      	str	r3, [r2, #4]
 80155d0:	e7c9      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80155d2:	2110      	movs	r1, #16
 80155d4:	4620      	mov	r0, r4
 80155d6:	f002 fc29 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80155da:	6862      	ldr	r2, [r4, #4]
 80155dc:	f10d 0349 	add.w	r3, sp, #73	; 0x49
 80155e0:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80155e4:	f853 0b04 	ldr.w	r0, [r3], #4
 80155e8:	f842 0b04 	str.w	r0, [r2], #4
 80155ec:	428b      	cmp	r3, r1
 80155ee:	d1f9      	bne.n	80155e4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a4>
 80155f0:	e7b9      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80155f2:	2105      	movs	r1, #5
 80155f4:	4620      	mov	r0, r4
 80155f6:	f002 fc19 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80155fa:	6863      	ldr	r3, [r4, #4]
 80155fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80155fe:	6018      	str	r0, [r3, #0]
 8015600:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8015604:	711a      	strb	r2, [r3, #4]
 8015606:	e7ae      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 8015608:	2106      	movs	r1, #6
 801560a:	4620      	mov	r0, r4
 801560c:	f002 fc0e 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015610:	6863      	ldr	r3, [r4, #4]
 8015612:	f8dd 2053 	ldr.w	r2, [sp, #83]	; 0x53
 8015616:	601a      	str	r2, [r3, #0]
 8015618:	f8bd 2057 	ldrh.w	r2, [sp, #87]	; 0x57
 801561c:	809a      	strh	r2, [r3, #4]
 801561e:	e7a2      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 8015620:	0801d139 	.word	0x0801d139
 8015624:	0801d1f4 	.word	0x0801d1f4
 8015628:	0801d221 	.word	0x0801d221
 801562c:	0801d25e 	.word	0x0801d25e
 8015630:	2107      	movs	r1, #7
 8015632:	4620      	mov	r0, r4
 8015634:	f002 fbfa 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015638:	6863      	ldr	r3, [r4, #4]
 801563a:	f8dd 2052 	ldr.w	r2, [sp, #82]	; 0x52
 801563e:	601a      	str	r2, [r3, #0]
 8015640:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8015644:	809a      	strh	r2, [r3, #4]
 8015646:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 801564a:	719a      	strb	r2, [r3, #6]
 801564c:	e78b      	b.n	8015566 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 801564e:	4659      	mov	r1, fp
 8015650:	4620      	mov	r0, r4
 8015652:	f002 fc2b 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8015656:	9907      	ldr	r1, [sp, #28]
 8015658:	a808      	add	r0, sp, #32
 801565a:	f7f3 fea9 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 801565e:	ab08      	add	r3, sp, #32
 8015660:	f104 0241 	add.w	r2, r4, #65	; 0x41
 8015664:	a90c      	add	r1, sp, #48	; 0x30
 8015666:	f853 0b04 	ldr.w	r0, [r3], #4
 801566a:	f842 0b04 	str.w	r0, [r2], #4
 801566e:	428b      	cmp	r3, r1
 8015670:	d1f9      	bne.n	8015666 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x826>
 8015672:	e634      	b.n	80152de <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 8015674:	2303      	movs	r3, #3
 8015676:	9326      	str	r3, [sp, #152]	; 0x98
 8015678:	4b0b      	ldr	r3, [pc, #44]	; (80156a8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x868>)
 801567a:	4a0c      	ldr	r2, [pc, #48]	; (80156ac <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x86c>)
 801567c:	9327      	str	r3, [sp, #156]	; 0x9c
 801567e:	4619      	mov	r1, r3
 8015680:	2003      	movs	r0, #3
 8015682:	e694      	b.n	80153ae <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x56e>
 8015684:	9b05      	ldr	r3, [sp, #20]
 8015686:	b92b      	cbnz	r3, 8015694 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x854>
 8015688:	4638      	mov	r0, r7
 801568a:	f001 ff7f 	bl	801758c <078582282b526a1ec1227869e1581c8a1811b440>
 801568e:	b047      	add	sp, #284	; 0x11c
 8015690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015694:	a80f      	add	r0, sp, #60	; 0x3c
 8015696:	f001 fc87 	bl	8016fa8 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 801569a:	2800      	cmp	r0, #0
 801569c:	d1f4      	bne.n	8015688 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x848>
 801569e:	e47b      	b.n	8014f98 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 80156a0:	4638      	mov	r0, r7
 80156a2:	f000 f839 	bl	8015718 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2>
 80156a6:	e7f2      	b.n	801568e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x84e>
 80156a8:	0801d139 	.word	0x0801d139
 80156ac:	0801d276 	.word	0x0801d276

080156b0 <1d524c1b514218a64c10ce09ef25ee3b26d5aac8>:
 80156b0:	4770      	bx	lr

080156b2 <443e8a131efc1d3c180cec49dabd3d3f1c58eeac>:
 80156b2:	4770      	bx	lr

080156b4 <cb5093c001ef61253a4d1da1a0188ff7663f0307>:
 80156b4:	4770      	bx	lr

080156b6 <966a9fb75e08bd6bd3b3054de298215c3cbec82e>:
 80156b6:	2270      	movs	r2, #112	; 0x70
 80156b8:	7042      	strb	r2, [r0, #1]
 80156ba:	223a      	movs	r2, #58	; 0x3a
 80156bc:	7402      	strb	r2, [r0, #16]
 80156be:	f7ff ba56 	b.w	8014b6e <00af7f89235fe04a2b2b59d942644988487fcbf4>
	...

080156c4 <a4e54615be274afd6b4d40b38f5ecc85b5402247>:
 80156c4:	b513      	push	{r0, r1, r4, lr}
 80156c6:	2370      	movs	r3, #112	; 0x70
 80156c8:	7043      	strb	r3, [r0, #1]
 80156ca:	8a43      	ldrh	r3, [r0, #18]
 80156cc:	2b81      	cmp	r3, #129	; 0x81
 80156ce:	4604      	mov	r4, r0
 80156d0:	d806      	bhi.n	80156e0 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x1c>
 80156d2:	2b7f      	cmp	r3, #127	; 0x7f
 80156d4:	d906      	bls.n	80156e4 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x20>
 80156d6:	b002      	add	sp, #8
 80156d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156dc:	f000 b85e 	b.w	801579c <623bedcd6d024f4b6fd8797e4e7a6121693618c5>
 80156e0:	2b9b      	cmp	r3, #155	; 0x9b
 80156e2:	d00f      	beq.n	8015704 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x40>
 80156e4:	2303      	movs	r3, #3
 80156e6:	9300      	str	r3, [sp, #0]
 80156e8:	4b09      	ldr	r3, [pc, #36]	; (8015710 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x4c>)
 80156ea:	9301      	str	r3, [sp, #4]
 80156ec:	ab02      	add	r3, sp, #8
 80156ee:	e913 0003 	ldmdb	r3, {r0, r1}
 80156f2:	4a08      	ldr	r2, [pc, #32]	; (8015714 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x50>)
 80156f4:	f7f7 ff9a 	bl	800d62c <LOGGER_PrintLine>
 80156f8:	4620      	mov	r0, r4
 80156fa:	b002      	add	sp, #8
 80156fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015700:	f7f4 ba1e 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015704:	b002      	add	sp, #8
 8015706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801570a:	f000 bc8b 	b.w	8016024 <c56d874196d9f33fea409aab4115507f6cab3a7f>
 801570e:	bf00      	nop
 8015710:	0801d2c8 	.word	0x0801d2c8
 8015714:	0801d2cf 	.word	0x0801d2cf

08015718 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2>:
 8015718:	b513      	push	{r0, r1, r4, lr}
 801571a:	2370      	movs	r3, #112	; 0x70
 801571c:	7043      	strb	r3, [r0, #1]
 801571e:	6843      	ldr	r3, [r0, #4]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	8243      	strh	r3, [r0, #18]
 8015724:	2b81      	cmp	r3, #129	; 0x81
 8015726:	4604      	mov	r4, r0
 8015728:	d806      	bhi.n	8015738 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x20>
 801572a:	061b      	lsls	r3, r3, #24
 801572c:	d506      	bpl.n	801573c <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x24>
 801572e:	b002      	add	sp, #8
 8015730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015734:	f000 b854 	b.w	80157e0 <1d79bc66ce5e0a5814d212e24315240b99f665c4>
 8015738:	2b9b      	cmp	r3, #155	; 0x9b
 801573a:	d00f      	beq.n	801575c <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x44>
 801573c:	2303      	movs	r3, #3
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	4b09      	ldr	r3, [pc, #36]	; (8015768 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x50>)
 8015742:	9301      	str	r3, [sp, #4]
 8015744:	ab02      	add	r3, sp, #8
 8015746:	e913 0003 	ldmdb	r3, {r0, r1}
 801574a:	4a08      	ldr	r2, [pc, #32]	; (801576c <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x54>)
 801574c:	f7f7 ff6e 	bl	800d62c <LOGGER_PrintLine>
 8015750:	4620      	mov	r0, r4
 8015752:	b002      	add	sp, #8
 8015754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015758:	f7f4 b9f2 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801575c:	b002      	add	sp, #8
 801575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015762:	f001 b9f7 	b.w	8016b54 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68>
 8015766:	bf00      	nop
 8015768:	0801d2c8 	.word	0x0801d2c8
 801576c:	0801d2cf 	.word	0x0801d2cf

08015770 <df2f78a5f231f323fc241372a3a00cee3087c107>:
 8015770:	4b05      	ldr	r3, [pc, #20]	; (8015788 <df2f78a5f231f323fc241372a3a00cee3087c107+0x18>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2200      	movs	r2, #0
 8015776:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 801577a:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
 801577e:	2201      	movs	r2, #1
 8015780:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8015784:	4770      	bx	lr
 8015786:	bf00      	nop
 8015788:	20000034 	.word	0x20000034

0801578c <80b9218102010b739652963fa2fb0c366b6f860e>:
 801578c:	4b02      	ldr	r3, [pc, #8]	; (8015798 <80b9218102010b739652963fa2fb0c366b6f860e+0xc>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	2200      	movs	r2, #0
 8015792:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8015796:	4770      	bx	lr
 8015798:	20000034 	.word	0x20000034

0801579c <623bedcd6d024f4b6fd8797e4e7a6121693618c5>:
 801579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801579e:	4b0d      	ldr	r3, [pc, #52]	; (80157d4 <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x38>)
 80157a0:	681d      	ldr	r5, [r3, #0]
 80157a2:	2371      	movs	r3, #113	; 0x71
 80157a4:	7043      	strb	r3, [r0, #1]
 80157a6:	7803      	ldrb	r3, [r0, #0]
 80157a8:	2b71      	cmp	r3, #113	; 0x71
 80157aa:	4604      	mov	r4, r0
 80157ac:	d009      	beq.n	80157c2 <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x26>
 80157ae:	2303      	movs	r3, #3
 80157b0:	9300      	str	r3, [sp, #0]
 80157b2:	4b09      	ldr	r3, [pc, #36]	; (80157d8 <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x3c>)
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	ab02      	add	r3, sp, #8
 80157b8:	e913 0003 	ldmdb	r3, {r0, r1}
 80157bc:	4a07      	ldr	r2, [pc, #28]	; (80157dc <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x40>)
 80157be:	f7f7 ff35 	bl	800d62c <LOGGER_PrintLine>
 80157c2:	4620      	mov	r0, r4
 80157c4:	f7f4 f9bc 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80157c8:	2300      	movs	r3, #0
 80157ca:	f885 325a 	strb.w	r3, [r5, #602]	; 0x25a
 80157ce:	b003      	add	sp, #12
 80157d0:	bd30      	pop	{r4, r5, pc}
 80157d2:	bf00      	nop
 80157d4:	20000034 	.word	0x20000034
 80157d8:	0801d2e6 	.word	0x0801d2e6
 80157dc:	0801ad3e 	.word	0x0801ad3e

080157e0 <1d79bc66ce5e0a5814d212e24315240b99f665c4>:
 80157e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80157e4:	4b3a      	ldr	r3, [pc, #232]	; (80158d0 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf0>)
 80157e6:	681f      	ldr	r7, [r3, #0]
 80157e8:	8a43      	ldrh	r3, [r0, #18]
 80157ea:	2571      	movs	r5, #113	; 0x71
 80157ec:	2b80      	cmp	r3, #128	; 0x80
 80157ee:	4604      	mov	r4, r0
 80157f0:	7045      	strb	r5, [r0, #1]
 80157f2:	d00c      	beq.n	801580e <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x2e>
 80157f4:	2b81      	cmp	r3, #129	; 0x81
 80157f6:	d02b      	beq.n	8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 80157f8:	2203      	movs	r2, #3
 80157fa:	9200      	str	r2, [sp, #0]
 80157fc:	4a35      	ldr	r2, [pc, #212]	; (80158d4 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf4>)
 80157fe:	9201      	str	r2, [sp, #4]
 8015800:	a902      	add	r1, sp, #8
 8015802:	e911 0003 	ldmdb	r1, {r0, r1}
 8015806:	4a34      	ldr	r2, [pc, #208]	; (80158d8 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf8>)
 8015808:	f7f7 ff10 	bl	800d62c <LOGGER_PrintLine>
 801580c:	e020      	b.n	8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 801580e:	2305      	movs	r3, #5
 8015810:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80158d4 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf4>
 8015814:	9300      	str	r3, [sp, #0]
 8015816:	f8cd 8004 	str.w	r8, [sp, #4]
 801581a:	466e      	mov	r6, sp
 801581c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015820:	4a2e      	ldr	r2, [pc, #184]	; (80158dc <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xfc>)
 8015822:	f7f7 ff03 	bl	800d62c <LOGGER_PrintLine>
 8015826:	f897 326e 	ldrb.w	r3, [r7, #622]	; 0x26e
 801582a:	b18b      	cbz	r3, 8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 801582c:	f104 001d 	add.w	r0, r4, #29
 8015830:	f7f3 fc76 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8015834:	b960      	cbnz	r0, 8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 8015836:	4628      	mov	r0, r5
 8015838:	f7f4 f8c4 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801583c:	4605      	mov	r5, r0
 801583e:	b968      	cbnz	r0, 801585c <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x7c>
 8015840:	2303      	movs	r3, #3
 8015842:	e9cd 3800 	strd	r3, r8, [sp]
 8015846:	4a26      	ldr	r2, [pc, #152]	; (80158e0 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x100>)
 8015848:	e896 0003 	ldmia.w	r6, {r0, r1}
 801584c:	f7f7 feee 	bl	800d62c <LOGGER_PrintLine>
 8015850:	4620      	mov	r0, r4
 8015852:	b002      	add	sp, #8
 8015854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015858:	f7f4 b972 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801585c:	f247 1371 	movw	r3, #29041	; 0x7171
 8015860:	8003      	strh	r3, [r0, #0]
 8015862:	233a      	movs	r3, #58	; 0x3a
 8015864:	7403      	strb	r3, [r0, #16]
 8015866:	2381      	movs	r3, #129	; 0x81
 8015868:	8243      	strh	r3, [r0, #18]
 801586a:	7a21      	ldrb	r1, [r4, #8]
 801586c:	f002 fade 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015870:	686e      	ldr	r6, [r5, #4]
 8015872:	7a22      	ldrb	r2, [r4, #8]
 8015874:	6861      	ldr	r1, [r4, #4]
 8015876:	4630      	mov	r0, r6
 8015878:	f003 fc35 	bl	80190e6 <memcpy>
 801587c:	f104 032e 	add.w	r3, r4, #46	; 0x2e
 8015880:	f105 021d 	add.w	r2, r5, #29
 8015884:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8015888:	f853 0b04 	ldr.w	r0, [r3], #4
 801588c:	f842 0b04 	str.w	r0, [r2], #4
 8015890:	428b      	cmp	r3, r1
 8015892:	d1f9      	bne.n	8015888 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xa8>
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	7013      	strb	r3, [r2, #0]
 8015898:	7cab      	ldrb	r3, [r5, #18]
 801589a:	f806 3b02 	strb.w	r3, [r6], #2
 801589e:	2005      	movs	r0, #5
 80158a0:	f7f2 fd68 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80158a4:	4680      	mov	r8, r0
 80158a6:	2002      	movs	r0, #2
 80158a8:	f7f2 fd64 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80158ac:	f108 0201 	add.w	r2, r8, #1
 80158b0:	1c43      	adds	r3, r0, #1
 80158b2:	4631      	mov	r1, r6
 80158b4:	4628      	mov	r0, r5
 80158b6:	f002 fb75 	bl	8017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 80158ba:	2301      	movs	r3, #1
 80158bc:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
 80158c0:	4628      	mov	r0, r5
 80158c2:	f7ff fef8 	bl	80156b6 <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 80158c6:	2800      	cmp	r0, #0
 80158c8:	d1c2      	bne.n	8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 80158ca:	f887 025a 	strb.w	r0, [r7, #602]	; 0x25a
 80158ce:	e7bf      	b.n	8015850 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 80158d0:	20000034 	.word	0x20000034
 80158d4:	0801d2e6 	.word	0x0801d2e6
 80158d8:	0801d317 	.word	0x0801d317
 80158dc:	0801d2ff 	.word	0x0801d2ff
 80158e0:	0801b20a 	.word	0x0801b20a

080158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 80158e4:	3901      	subs	r1, #1
 80158e6:	4402      	add	r2, r0
 80158e8:	4282      	cmp	r2, r0
 80158ea:	d100      	bne.n	80158ee <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 80158ec:	4770      	bx	lr
 80158ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80158f2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80158f6:	e7f7      	b.n	80158e8 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>

080158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>:
 80158f8:	4b02      	ldr	r3, [pc, #8]	; (8015904 <047450545e88a7e0b1f703be227cb1455be57bcf+0xc>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	f8a3 030c 	strh.w	r0, [r3, #780]	; 0x30c
 8015900:	f002 b8b0 	b.w	8017a64 <6362cea72da2b827a19bfabd8f796b6337cbd199>
 8015904:	20000034 	.word	0x20000034

08015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>:
 8015908:	4b05      	ldr	r3, [pc, #20]	; (8015920 <5d52bdabf8ecd6c8d7198566d11b639ed660a013+0x18>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2200      	movs	r2, #0
 801590e:	f893 0305 	ldrb.w	r0, [r3, #773]	; 0x305
 8015912:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8015916:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 801591a:	f7f4 bfb7 	b.w	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801591e:	bf00      	nop
 8015920:	20000034 	.word	0x20000034

08015924 <43cc35f40acb52f42fa1199cee254d1023926eea>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4b09      	ldr	r3, [pc, #36]	; (801594c <43cc35f40acb52f42fa1199cee254d1023926eea+0x28>)
 8015928:	681c      	ldr	r4, [r3, #0]
 801592a:	2300      	movs	r3, #0
 801592c:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
 8015930:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
 8015934:	f884 32f1 	strb.w	r3, [r4, #753]	; 0x2f1
 8015938:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
 801593c:	f894 02fc 	ldrb.w	r0, [r4, #764]	; 0x2fc
 8015940:	f7f4 ffa4 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8015944:	2302      	movs	r3, #2
 8015946:	f8a4 32f2 	strh.w	r3, [r4, #754]	; 0x2f2
 801594a:	bd10      	pop	{r4, pc}
 801594c:	20000034 	.word	0x20000034

08015950 <cef630f5a74a35314667ebee3f885b52bc89b138>:
 8015950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015952:	4605      	mov	r5, r0
 8015954:	2073      	movs	r0, #115	; 0x73
 8015956:	f7f4 f835 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801595a:	4604      	mov	r4, r0
 801595c:	b960      	cbnz	r0, 8015978 <cef630f5a74a35314667ebee3f885b52bc89b138+0x28>
 801595e:	2303      	movs	r3, #3
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	4b4b      	ldr	r3, [pc, #300]	; (8015a90 <cef630f5a74a35314667ebee3f885b52bc89b138+0x140>)
 8015964:	9301      	str	r3, [sp, #4]
 8015966:	ab02      	add	r3, sp, #8
 8015968:	e913 0003 	ldmdb	r3, {r0, r1}
 801596c:	4a49      	ldr	r2, [pc, #292]	; (8015a94 <cef630f5a74a35314667ebee3f885b52bc89b138+0x144>)
 801596e:	b003      	add	sp, #12
 8015970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015974:	f7f7 be5a 	b.w	800d62c <LOGGER_PrintLine>
 8015978:	f247 3373 	movw	r3, #29555	; 0x7373
 801597c:	8003      	strh	r3, [r0, #0]
 801597e:	4b46      	ldr	r3, [pc, #280]	; (8015a98 <cef630f5a74a35314667ebee3f885b52bc89b138+0x148>)
 8015980:	6103      	str	r3, [r0, #16]
 8015982:	f105 0348 	add.w	r3, r5, #72	; 0x48
 8015986:	f100 021d 	add.w	r2, r0, #29
 801598a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 801598e:	461f      	mov	r7, r3
 8015990:	f853 0b04 	ldr.w	r0, [r3], #4
 8015994:	f842 0b04 	str.w	r0, [r2], #4
 8015998:	428b      	cmp	r3, r1
 801599a:	d1f9      	bne.n	8015990 <cef630f5a74a35314667ebee3f885b52bc89b138+0x40>
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	7013      	strb	r3, [r2, #0]
 80159a0:	2110      	movs	r1, #16
 80159a2:	4620      	mov	r0, r4
 80159a4:	f002 fa42 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80159a8:	f105 0338 	add.w	r3, r5, #56	; 0x38
 80159ac:	6862      	ldr	r2, [r4, #4]
 80159ae:	461e      	mov	r6, r3
 80159b0:	f853 1b04 	ldr.w	r1, [r3], #4
 80159b4:	f842 1b04 	str.w	r1, [r2], #4
 80159b8:	42bb      	cmp	r3, r7
 80159ba:	d1f9      	bne.n	80159b0 <cef630f5a74a35314667ebee3f885b52bc89b138+0x60>
 80159bc:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80159be:	6862      	ldr	r2, [r4, #4]
 80159c0:	ba5b      	rev16	r3, r3
 80159c2:	80d3      	strh	r3, [r2, #6]
 80159c4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 80159c8:	6862      	ldr	r2, [r4, #4]
 80159ca:	ba5b      	rev16	r3, r3
 80159cc:	8113      	strh	r3, [r2, #8]
 80159ce:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 80159d2:	6862      	ldr	r2, [r4, #4]
 80159d4:	ba5b      	rev16	r3, r3
 80159d6:	8153      	strh	r3, [r2, #10]
 80159d8:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 80159dc:	6862      	ldr	r2, [r4, #4]
 80159de:	ba5b      	rev16	r3, r3
 80159e0:	81d3      	strh	r3, [r2, #14]
 80159e2:	2120      	movs	r1, #32
 80159e4:	4620      	mov	r0, r4
 80159e6:	f002 fa21 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80159ea:	2005      	movs	r0, #5
 80159ec:	f7f2 fcc2 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80159f0:	f8d0 3001 	ldr.w	r3, [r0, #1]
 80159f4:	62ab      	str	r3, [r5, #40]	; 0x28
 80159f6:	f8d0 3005 	ldr.w	r3, [r0, #5]
 80159fa:	62eb      	str	r3, [r5, #44]	; 0x2c
 80159fc:	2300      	movs	r3, #0
 80159fe:	626b      	str	r3, [r5, #36]	; 0x24
 8015a00:	6862      	ldr	r2, [r4, #4]
 8015a02:	f105 0318 	add.w	r3, r5, #24
 8015a06:	461f      	mov	r7, r3
 8015a08:	f853 1b04 	ldr.w	r1, [r3], #4
 8015a0c:	f842 1b04 	str.w	r1, [r2], #4
 8015a10:	42b3      	cmp	r3, r6
 8015a12:	d1f9      	bne.n	8015a08 <cef630f5a74a35314667ebee3f885b52bc89b138+0xb8>
 8015a14:	4b21      	ldr	r3, [pc, #132]	; (8015a9c <cef630f5a74a35314667ebee3f885b52bc89b138+0x14c>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8015a1c:	806b      	strh	r3, [r5, #2]
 8015a1e:	2118      	movs	r1, #24
 8015a20:	4620      	mov	r0, r4
 8015a22:	f002 fa03 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015a26:	6862      	ldr	r2, [r4, #4]
 8015a28:	462b      	mov	r3, r5
 8015a2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8015a2e:	f842 1b04 	str.w	r1, [r2], #4
 8015a32:	42bb      	cmp	r3, r7
 8015a34:	d1f9      	bne.n	8015a2a <cef630f5a74a35314667ebee3f885b52bc89b138+0xda>
 8015a36:	886b      	ldrh	r3, [r5, #2]
 8015a38:	6862      	ldr	r2, [r4, #4]
 8015a3a:	0a1b      	lsrs	r3, r3, #8
 8015a3c:	7093      	strb	r3, [r2, #2]
 8015a3e:	6863      	ldr	r3, [r4, #4]
 8015a40:	886a      	ldrh	r2, [r5, #2]
 8015a42:	70da      	strb	r2, [r3, #3]
 8015a44:	2104      	movs	r1, #4
 8015a46:	4620      	mov	r0, r4
 8015a48:	f002 f9f0 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015a4c:	6863      	ldr	r3, [r4, #4]
 8015a4e:	8a62      	ldrh	r2, [r4, #18]
 8015a50:	701a      	strb	r2, [r3, #0]
 8015a52:	6863      	ldr	r3, [r4, #4]
 8015a54:	2201      	movs	r2, #1
 8015a56:	705a      	strb	r2, [r3, #1]
 8015a58:	6861      	ldr	r1, [r4, #4]
 8015a5a:	2005      	movs	r0, #5
 8015a5c:	1c8e      	adds	r6, r1, #2
 8015a5e:	f7f2 fc89 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015a62:	4607      	mov	r7, r0
 8015a64:	2002      	movs	r0, #2
 8015a66:	f7f2 fc85 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015a6a:	1c7a      	adds	r2, r7, #1
 8015a6c:	1c43      	adds	r3, r0, #1
 8015a6e:	4631      	mov	r1, r6
 8015a70:	4620      	mov	r0, r4
 8015a72:	f002 fa97 	bl	8017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8015a76:	4620      	mov	r0, r4
 8015a78:	f7ff fe1d 	bl	80156b6 <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 8015a7c:	b110      	cbz	r0, 8015a84 <cef630f5a74a35314667ebee3f885b52bc89b138+0x134>
 8015a7e:	65ec      	str	r4, [r5, #92]	; 0x5c
 8015a80:	b003      	add	sp, #12
 8015a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a84:	4620      	mov	r0, r4
 8015a86:	b003      	add	sp, #12
 8015a88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015a8c:	f7f4 b858 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015a90:	0801d34f 	.word	0x0801d34f
 8015a94:	0801b20a 	.word	0x0801b20a
 8015a98:	009b003a 	.word	0x009b003a
 8015a9c:	20000034 	.word	0x20000034

08015aa0 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>:
 8015aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015aa2:	4b09      	ldr	r3, [pc, #36]	; (8015ac8 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x28>)
 8015aa4:	4909      	ldr	r1, [pc, #36]	; (8015acc <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x2c>)
 8015aa6:	681c      	ldr	r4, [r3, #0]
 8015aa8:	4809      	ldr	r0, [pc, #36]	; (8015ad0 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x30>)
 8015aaa:	f894 52fc 	ldrb.w	r5, [r4, #764]	; 0x2fc
 8015aae:	f7f4 ffad 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8015ab2:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	4b06      	ldr	r3, [pc, #24]	; (8015ad4 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x34>)
 8015aba:	9400      	str	r4, [sp, #0]
 8015abc:	2101      	movs	r1, #1
 8015abe:	4628      	mov	r0, r5
 8015ac0:	f7f4 fed2 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015ac4:	b003      	add	sp, #12
 8015ac6:	bd30      	pop	{r4, r5, pc}
 8015ac8:	20000034 	.word	0x20000034
 8015acc:	00e4e1c0 	.word	0x00e4e1c0
 8015ad0:	03938700 	.word	0x03938700
 8015ad4:	08015dcd 	.word	0x08015dcd

08015ad8 <ddcc96d14128f39f258a026a92cbd4c2383286b1>:
 8015ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ada:	4b0a      	ldr	r3, [pc, #40]	; (8015b04 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x2c>)
 8015adc:	681c      	ldr	r4, [r3, #0]
 8015ade:	f7ff ff13 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8015ae2:	4909      	ldr	r1, [pc, #36]	; (8015b08 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x30>)
 8015ae4:	4809      	ldr	r0, [pc, #36]	; (8015b0c <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x34>)
 8015ae6:	f894 5305 	ldrb.w	r5, [r4, #773]	; 0x305
 8015aea:	f7f4 ff8f 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8015aee:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8015af2:	4602      	mov	r2, r0
 8015af4:	4b06      	ldr	r3, [pc, #24]	; (8015b10 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x38>)
 8015af6:	9400      	str	r4, [sp, #0]
 8015af8:	2101      	movs	r1, #1
 8015afa:	4628      	mov	r0, r5
 8015afc:	f7f4 feb4 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015b00:	b003      	add	sp, #12
 8015b02:	bd30      	pop	{r4, r5, pc}
 8015b04:	20000034 	.word	0x20000034
 8015b08:	01312d00 	.word	0x01312d00
 8015b0c:	00989680 	.word	0x00989680
 8015b10:	080162f1 	.word	0x080162f1

08015b14 <e1f51aec36766790a9d7657a41d61426b11f2b8a>:
 8015b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b16:	4b0d      	ldr	r3, [pc, #52]	; (8015b4c <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x38>)
 8015b18:	490d      	ldr	r1, [pc, #52]	; (8015b50 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x3c>)
 8015b1a:	681c      	ldr	r4, [r3, #0]
 8015b1c:	480d      	ldr	r0, [pc, #52]	; (8015b54 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x40>)
 8015b1e:	f894 52fc 	ldrb.w	r5, [r4, #764]	; 0x2fc
 8015b22:	2300      	movs	r3, #0
 8015b24:	2202      	movs	r2, #2
 8015b26:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
 8015b2a:	f8a4 22f2 	strh.w	r2, [r4, #754]	; 0x2f2
 8015b2e:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
 8015b32:	f7f4 ff6b 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8015b36:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	4b06      	ldr	r3, [pc, #24]	; (8015b58 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x44>)
 8015b3e:	9400      	str	r4, [sp, #0]
 8015b40:	2101      	movs	r1, #1
 8015b42:	4628      	mov	r0, r5
 8015b44:	f7f4 fe90 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015b48:	b003      	add	sp, #12
 8015b4a:	bd30      	pop	{r4, r5, pc}
 8015b4c:	20000034 	.word	0x20000034
 8015b50:	01312d00 	.word	0x01312d00
 8015b54:	00989680 	.word	0x00989680
 8015b58:	08015b5d 	.word	0x08015b5d

08015b5c <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>:
 8015b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b60:	b08d      	sub	sp, #52	; 0x34
 8015b62:	4605      	mov	r5, r0
 8015b64:	f7fa fbe4 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 8015b68:	b318      	cbz	r0, 8015bb2 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8015b6a:	f7f2 fbf5 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 8015b6e:	4604      	mov	r4, r0
 8015b70:	b9f8      	cbnz	r0, 8015bb2 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8015b72:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8015db0 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x254>
 8015b76:	f8d9 3000 	ldr.w	r3, [r9]
 8015b7a:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8015b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d015      	beq.n	8015bb2 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8015b86:	4601      	mov	r1, r0
 8015b88:	2210      	movs	r2, #16
 8015b8a:	f10d 0009 	add.w	r0, sp, #9
 8015b8e:	f003 f9f7 	bl	8018f80 <memset>
 8015b92:	2302      	movs	r3, #2
 8015b94:	f10d 0109 	add.w	r1, sp, #9
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f88d 3008 	strb.w	r3, [sp, #8]
 8015b9e:	f7f3 f803 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8015ba2:	b948      	cbnz	r0, 8015bb8 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x5c>
 8015ba4:	2073      	movs	r0, #115	; 0x73
 8015ba6:	f7f3 fe7d 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8015baa:	f7ff fead 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8015bae:	f7ff feb9 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 8015bb2:	b00d      	add	sp, #52	; 0x34
 8015bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bb8:	a802      	add	r0, sp, #8
 8015bba:	f7fb fdbb 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d0f0      	beq.n	8015ba4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x48>
 8015bc2:	2073      	movs	r0, #115	; 0x73
 8015bc4:	f7f3 fefe 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8015bc8:	4604      	mov	r4, r0
 8015bca:	b998      	cbnz	r0, 8015bf4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x98>
 8015bcc:	2303      	movs	r3, #3
 8015bce:	9307      	str	r3, [sp, #28]
 8015bd0:	4b78      	ldr	r3, [pc, #480]	; (8015db4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x258>)
 8015bd2:	4a79      	ldr	r2, [pc, #484]	; (8015db8 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x25c>)
 8015bd4:	9308      	str	r3, [sp, #32]
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	2003      	movs	r0, #3
 8015bda:	f7f7 fd27 	bl	800d62c <LOGGER_PrintLine>
 8015bde:	2101      	movs	r1, #1
 8015be0:	f885 1083 	strb.w	r1, [r5, #131]	; 0x83
 8015be4:	9500      	str	r5, [sp, #0]
 8015be6:	4b75      	ldr	r3, [pc, #468]	; (8015dbc <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x260>)
 8015be8:	4a75      	ldr	r2, [pc, #468]	; (8015dc0 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x264>)
 8015bea:	f895 008c 	ldrb.w	r0, [r5, #140]	; 0x8c
 8015bee:	f7f4 fe3b 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015bf2:	e7de      	b.n	8015bb2 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8015bf4:	f247 3373 	movw	r3, #29555	; 0x7373
 8015bf8:	8003      	strh	r3, [r0, #0]
 8015bfa:	233a      	movs	r3, #58	; 0x3a
 8015bfc:	7403      	strb	r3, [r0, #16]
 8015bfe:	239b      	movs	r3, #155	; 0x9b
 8015c00:	8243      	strh	r3, [r0, #18]
 8015c02:	2303      	movs	r3, #3
 8015c04:	7743      	strb	r3, [r0, #29]
 8015c06:	f100 021e 	add.w	r2, r0, #30
 8015c0a:	f105 0308 	add.w	r3, r5, #8
 8015c0e:	f105 0118 	add.w	r1, r5, #24
 8015c12:	f853 0b04 	ldr.w	r0, [r3], #4
 8015c16:	f842 0b04 	str.w	r0, [r2], #4
 8015c1a:	428b      	cmp	r3, r1
 8015c1c:	d1f9      	bne.n	8015c12 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0xb6>
 8015c1e:	2200      	movs	r2, #0
 8015c20:	a902      	add	r1, sp, #8
 8015c22:	4620      	mov	r0, r4
 8015c24:	f002 f922 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8015c28:	2005      	movs	r0, #5
 8015c2a:	f7f2 fba3 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015c2e:	46a8      	mov	r8, r5
 8015c30:	4601      	mov	r1, r0
 8015c32:	2200      	movs	r2, #0
 8015c34:	4620      	mov	r0, r4
 8015c36:	f002 f919 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8015c3a:	2700      	movs	r7, #0
 8015c3c:	2314      	movs	r3, #20
 8015c3e:	2106      	movs	r1, #6
 8015c40:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
 8015c44:	f885 7078 	strb.w	r7, [r5, #120]	; 0x78
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f808 1f75 	strb.w	r1, [r8, #117]!
 8015c4e:	f002 f8ed 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015c52:	6863      	ldr	r3, [r4, #4]
 8015c54:	f8d5 2075 	ldr.w	r2, [r5, #117]	; 0x75
 8015c58:	601a      	str	r2, [r3, #0]
 8015c5a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8015c5e:	809a      	strh	r2, [r3, #4]
 8015c60:	f001 fa0c 	bl	801707c <84780c9f08e19cea1884da40f03f0c5650f281d0>
 8015c64:	4606      	mov	r6, r0
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d063      	beq.n	8015d32 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d6>
 8015c6a:	f04f 0905 	mov.w	r9, #5
 8015c6e:	a907      	add	r1, sp, #28
 8015c70:	4638      	mov	r0, r7
 8015c72:	f001 fa13 	bl	801709c <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>
 8015c76:	b1b0      	cbz	r0, 8015ca6 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x14a>
 8015c78:	2102      	movs	r1, #2
 8015c7a:	4620      	mov	r0, r4
 8015c7c:	f002 f8d6 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015c80:	6863      	ldr	r3, [r4, #4]
 8015c82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8015c86:	801a      	strh	r2, [r3, #0]
 8015c88:	2104      	movs	r1, #4
 8015c8a:	2310      	movs	r3, #16
 8015c8c:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8015c90:	f885 907b 	strb.w	r9, [r5, #123]	; 0x7b
 8015c94:	f8a5 107c 	strh.w	r1, [r5, #124]	; 0x7c
 8015c98:	4620      	mov	r0, r4
 8015c9a:	f002 f8c7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015c9e:	6863      	ldr	r3, [r4, #4]
 8015ca0:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8015ca4:	601a      	str	r2, [r3, #0]
 8015ca6:	3701      	adds	r7, #1
 8015ca8:	42be      	cmp	r6, r7
 8015caa:	d1e0      	bne.n	8015c6e <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x112>
 8015cac:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
 8015cb6:	2114      	movs	r1, #20
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f002 f8b7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015cbe:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
 8015cc8:	6862      	ldr	r2, [r4, #4]
 8015cca:	f105 0361 	add.w	r3, r5, #97	; 0x61
 8015cce:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cd2:	f842 1b04 	str.w	r1, [r2], #4
 8015cd6:	4543      	cmp	r3, r8
 8015cd8:	d1f9      	bne.n	8015cce <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x172>
 8015cda:	2104      	movs	r1, #4
 8015cdc:	4620      	mov	r0, r4
 8015cde:	f002 f8a5 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015ce2:	6863      	ldr	r3, [r4, #4]
 8015ce4:	8a62      	ldrh	r2, [r4, #18]
 8015ce6:	701a      	strb	r2, [r3, #0]
 8015ce8:	6863      	ldr	r3, [r4, #4]
 8015cea:	f04f 0802 	mov.w	r8, #2
 8015cee:	f883 8001 	strb.w	r8, [r3, #1]
 8015cf2:	6861      	ldr	r1, [r4, #4]
 8015cf4:	2005      	movs	r0, #5
 8015cf6:	eb01 0608 	add.w	r6, r1, r8
 8015cfa:	f7f2 fb3b 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015cfe:	4607      	mov	r7, r0
 8015d00:	4640      	mov	r0, r8
 8015d02:	f7f2 fb37 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015d06:	1c7a      	adds	r2, r7, #1
 8015d08:	1c43      	adds	r3, r0, #1
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f002 f949 	bl	8017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8015d12:	4620      	mov	r0, r4
 8015d14:	f7ff fccf 	bl	80156b6 <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 8015d18:	4a26      	ldr	r2, [pc, #152]	; (8015db4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x258>)
 8015d1a:	ab07      	add	r3, sp, #28
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d042      	beq.n	8015da6 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x24a>
 8015d20:	2105      	movs	r1, #5
 8015d22:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8015d26:	4a27      	ldr	r2, [pc, #156]	; (8015dc4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x268>)
 8015d28:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
 8015d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d30:	e753      	b.n	8015bda <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x7e>
 8015d32:	f8d9 3000 	ldr.w	r3, [r9]
 8015d36:	b2f7      	uxtb	r7, r6
 8015d38:	f8b3 130c 	ldrh.w	r1, [r3, #780]	; 0x30c
 8015d3c:	4638      	mov	r0, r7
 8015d3e:	f7f2 fdc5 	bl	80088cc <91ad02464a5553c72b508f812e77f83c74a657ed>
 8015d42:	b918      	cbnz	r0, 8015d4c <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1f0>
 8015d44:	3601      	adds	r6, #1
 8015d46:	2e1e      	cmp	r6, #30
 8015d48:	d1f3      	bne.n	8015d32 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d6>
 8015d4a:	e7af      	b.n	8015cac <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x150>
 8015d4c:	2210      	movs	r2, #16
 8015d4e:	2100      	movs	r1, #0
 8015d50:	f10d 001d 	add.w	r0, sp, #29
 8015d54:	f003 f914 	bl	8018f80 <memset>
 8015d58:	2302      	movs	r3, #2
 8015d5a:	f10d 011d 	add.w	r1, sp, #29
 8015d5e:	4638      	mov	r0, r7
 8015d60:	f88d 301c 	strb.w	r3, [sp, #28]
 8015d64:	f7f2 fec0 	bl	8008ae8 <b7be15738b198492e50cb8023d171fca112169af>
 8015d68:	2200      	movs	r2, #0
 8015d6a:	a907      	add	r1, sp, #28
 8015d6c:	4620      	mov	r0, r4
 8015d6e:	f002 f87d 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8015d72:	2005      	movs	r0, #5
 8015d74:	f7f2 fafe 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8015d78:	2200      	movs	r2, #0
 8015d7a:	4601      	mov	r1, r0
 8015d7c:	4620      	mov	r0, r4
 8015d7e:	f002 f875 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8015d82:	2305      	movs	r3, #5
 8015d84:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8015d88:	2312      	movs	r3, #18
 8015d8a:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
 8015d8e:	2380      	movs	r3, #128	; 0x80
 8015d90:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8015d94:	2104      	movs	r1, #4
 8015d96:	4620      	mov	r0, r4
 8015d98:	f002 f848 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015d9c:	6863      	ldr	r3, [r4, #4]
 8015d9e:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8015da2:	601a      	str	r2, [r3, #0]
 8015da4:	e782      	b.n	8015cac <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x150>
 8015da6:	2104      	movs	r1, #4
 8015da8:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8015dac:	4a06      	ldr	r2, [pc, #24]	; (8015dc8 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x26c>)
 8015dae:	e7bd      	b.n	8015d2c <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d0>
 8015db0:	20000034 	.word	0x20000034
 8015db4:	0801d34f 	.word	0x0801d34f
 8015db8:	0801d35a 	.word	0x0801d35a
 8015dbc:	08015e11 	.word	0x08015e11
 8015dc0:	01312d00 	.word	0x01312d00
 8015dc4:	0801d384 	.word	0x0801d384
 8015dc8:	0801d395 	.word	0x0801d395

08015dcc <0e7260d9ec263799a3774447fe3c1a059b19a3b3>:
 8015dcc:	b510      	push	{r4, lr}
 8015dce:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	b133      	cbz	r3, 8015de4 <0e7260d9ec263799a3774447fe3c1a059b19a3b3+0x18>
 8015dd6:	3b01      	subs	r3, #1
 8015dd8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8015ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015de0:	f7ff be5e 	b.w	8015aa0 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>
 8015de4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8015de8:	2b04      	cmp	r3, #4
 8015dea:	bf9c      	itt	ls
 8015dec:	3301      	addls	r3, #1
 8015dee:	f880 3084 	strbls.w	r3, [r0, #132]	; 0x84
 8015df2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8015df6:	2101      	movs	r1, #1
 8015df8:	3301      	adds	r3, #1
 8015dfa:	4099      	lsls	r1, r3
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	f7f4 fde3 	bl	800a9c8 <7694f58d16cb666949a4f0727c30967f32581954>
 8015e02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8015e06:	4620      	mov	r0, r4
 8015e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e0c:	f7ff bea6 	b.w	8015b5c <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>

08015e10 <8495929e13f55eda4e8148e511dfd6898419e338>:
 8015e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e12:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
 8015e16:	4a22      	ldr	r2, [pc, #136]	; (8015ea0 <8495929e13f55eda4e8148e511dfd6898419e338+0x90>)
 8015e18:	4604      	mov	r4, r0
 8015e1a:	ab02      	add	r3, sp, #8
 8015e1c:	b389      	cbz	r1, 8015e82 <8495929e13f55eda4e8148e511dfd6898419e338+0x72>
 8015e1e:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
 8015e22:	b309      	cbz	r1, 8015e68 <8495929e13f55eda4e8148e511dfd6898419e338+0x58>
 8015e24:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 8015e28:	b1f1      	cbz	r1, 8015e68 <8495929e13f55eda4e8148e511dfd6898419e338+0x58>
 8015e2a:	2103      	movs	r1, #3
 8015e2c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015e30:	4a1c      	ldr	r2, [pc, #112]	; (8015ea4 <8495929e13f55eda4e8148e511dfd6898419e338+0x94>)
 8015e32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e36:	f7f7 fbf9 	bl	800d62c <LOGGER_PrintLine>
 8015e3a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8015e3e:	481a      	ldr	r0, [pc, #104]	; (8015ea8 <8495929e13f55eda4e8148e511dfd6898419e338+0x98>)
 8015e40:	3b01      	subs	r3, #1
 8015e42:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8015e46:	2300      	movs	r3, #0
 8015e48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8015e4c:	4621      	mov	r1, r4
 8015e4e:	2212      	movs	r2, #18
 8015e50:	f7f5 fc22 	bl	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8015e54:	9400      	str	r4, [sp, #0]
 8015e56:	4b15      	ldr	r3, [pc, #84]	; (8015eac <8495929e13f55eda4e8148e511dfd6898419e338+0x9c>)
 8015e58:	4a15      	ldr	r2, [pc, #84]	; (8015eb0 <8495929e13f55eda4e8148e511dfd6898419e338+0xa0>)
 8015e5a:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8015e5e:	2101      	movs	r1, #1
 8015e60:	f7f4 fd02 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015e64:	b004      	add	sp, #16
 8015e66:	bd10      	pop	{r4, pc}
 8015e68:	2101      	movs	r1, #1
 8015e6a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015e6e:	4a11      	ldr	r2, [pc, #68]	; (8015eb4 <8495929e13f55eda4e8148e511dfd6898419e338+0xa4>)
 8015e70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e74:	f7f7 fbda 	bl	800d62c <LOGGER_PrintLine>
 8015e78:	b004      	add	sp, #16
 8015e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e7e:	f7fa ba5f 	b.w	8010340 <2fba4ddec868eb31998278adcb690f685bb9d2cf>
 8015e82:	2103      	movs	r1, #3
 8015e84:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015e88:	4a0b      	ldr	r2, [pc, #44]	; (8015eb8 <8495929e13f55eda4e8148e511dfd6898419e338+0xa8>)
 8015e8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e8e:	f7f7 fbcd 	bl	800d62c <LOGGER_PrintLine>
 8015e92:	4620      	mov	r0, r4
 8015e94:	b004      	add	sp, #16
 8015e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e9a:	f7ff be5f 	b.w	8015b5c <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>
 8015e9e:	bf00      	nop
 8015ea0:	0801d34f 	.word	0x0801d34f
 8015ea4:	0801d3b0 	.word	0x0801d3b0
 8015ea8:	08015b5d 	.word	0x08015b5d
 8015eac:	08015e11 	.word	0x08015e11
 8015eb0:	01312d00 	.word	0x01312d00
 8015eb4:	0801d3ce 	.word	0x0801d3ce
 8015eb8:	0801d3ec 	.word	0x0801d3ec

08015ebc <cb684a375f86ba40b2b36632ce4bd2a58554e76c>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	4b35      	ldr	r3, [pc, #212]	; (8015f94 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xd8>)
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	681c      	ldr	r4, [r3, #0]
 8015ec4:	f7f4 fbc0 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8015ec8:	2500      	movs	r5, #0
 8015eca:	f884 0310 	strb.w	r0, [r4, #784]	; 0x310
 8015ece:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ed2:	f8a4 030e 	strh.w	r0, [r4, #782]	; 0x30e
 8015ed6:	f884 5311 	strb.w	r5, [r4, #785]	; 0x311
 8015eda:	f7ff fd0d 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8015ede:	f7ff fd13 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8015ee2:	f7ff fd1f 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 8015ee6:	f243 3388 	movw	r3, #13192	; 0x3388
 8015eea:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8015eee:	2210      	movs	r2, #16
 8015ef0:	4629      	mov	r1, r5
 8015ef2:	f8a4 5270 	strh.w	r5, [r4, #624]	; 0x270
 8015ef6:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8015efa:	f003 f841 	bl	8018f80 <memset>
 8015efe:	4b26      	ldr	r3, [pc, #152]	; (8015f98 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xdc>)
 8015f00:	f504 722e 	add.w	r2, r4, #696	; 0x2b8
 8015f04:	f103 0110 	add.w	r1, r3, #16
 8015f08:	f853 0b04 	ldr.w	r0, [r3], #4
 8015f0c:	f842 0b04 	str.w	r0, [r2], #4
 8015f10:	428b      	cmp	r3, r1
 8015f12:	d1f9      	bne.n	8015f08 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0x4c>
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	7013      	strb	r3, [r2, #0]
 8015f18:	2001      	movs	r0, #1
 8015f1a:	f7f4 fb95 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8015f1e:	4a1f      	ldr	r2, [pc, #124]	; (8015f9c <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe0>)
 8015f20:	f884 02d0 	strb.w	r0, [r4, #720]	; 0x2d0
 8015f24:	f04f 33ff 	mov.w	r3, #4294967295
 8015f28:	e9c4 23a2 	strd	r2, r3, [r4, #648]	; 0x288
 8015f2c:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
 8015f30:	4b1b      	ldr	r3, [pc, #108]	; (8015fa0 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe4>)
 8015f32:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
 8015f36:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8015f3a:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
 8015f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015f42:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8015f46:	2500      	movs	r5, #0
 8015f48:	e9c4 13ac 	strd	r1, r3, [r4, #688]	; 0x2b0
 8015f4c:	23c0      	movs	r3, #192	; 0xc0
 8015f4e:	2210      	movs	r2, #16
 8015f50:	4629      	mov	r1, r5
 8015f52:	f8a4 32d2 	strh.w	r3, [r4, #722]	; 0x2d2
 8015f56:	f884 52d1 	strb.w	r5, [r4, #721]	; 0x2d1
 8015f5a:	f884 52d4 	strb.w	r5, [r4, #724]	; 0x2d4
 8015f5e:	f204 20d5 	addw	r0, r4, #725	; 0x2d5
 8015f62:	f003 f80d 	bl	8018f80 <memset>
 8015f66:	2306      	movs	r3, #6
 8015f68:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
 8015f6c:	4b0d      	ldr	r3, [pc, #52]	; (8015fa4 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe8>)
 8015f6e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8015f72:	f884 52e7 	strb.w	r5, [r4, #743]	; 0x2e7
 8015f76:	f8a4 52ec 	strh.w	r5, [r4, #748]	; 0x2ec
 8015f7a:	f884 52ee 	strb.w	r5, [r4, #750]	; 0x2ee
 8015f7e:	2001      	movs	r0, #1
 8015f80:	f7f4 fb62 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8015f84:	f884 02fc 	strb.w	r0, [r4, #764]	; 0x2fc
 8015f88:	2001      	movs	r0, #1
 8015f8a:	f7f4 fb5d 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8015f8e:	f884 0305 	strb.w	r0, [r4, #773]	; 0x305
 8015f92:	bd38      	pop	{r3, r4, r5, pc}
 8015f94:	20000034 	.word	0x20000034
 8015f98:	0801a4a3 	.word	0x0801a4a3
 8015f9c:	60401e08 	.word	0x60401e08
 8015fa0:	08000e04 	.word	0x08000e04
 8015fa4:	05aa0040 	.word	0x05aa0040

08015fa8 <a60e70bd13e8775612e7fe5ae94a36c965317289>:
 8015fa8:	b507      	push	{r0, r1, r2, lr}
 8015faa:	4b09      	ldr	r3, [pc, #36]	; (8015fd0 <a60e70bd13e8775612e7fe5ae94a36c965317289+0x28>)
 8015fac:	4a09      	ldr	r2, [pc, #36]	; (8015fd4 <a60e70bd13e8775612e7fe5ae94a36c965317289+0x2c>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	6912      	ldr	r2, [r2, #16]
 8015fb2:	f893 02d0 	ldrb.w	r0, [r3, #720]	; 0x2d0
 8015fb6:	210d      	movs	r1, #13
 8015fb8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8015fbc:	9300      	str	r3, [sp, #0]
 8015fbe:	434a      	muls	r2, r1
 8015fc0:	4b05      	ldr	r3, [pc, #20]	; (8015fd8 <a60e70bd13e8775612e7fe5ae94a36c965317289+0x30>)
 8015fc2:	2100      	movs	r1, #0
 8015fc4:	f7f4 fc50 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8015fc8:	b003      	add	sp, #12
 8015fca:	f85d fb04 	ldr.w	pc, [sp], #4
 8015fce:	bf00      	nop
 8015fd0:	20000034 	.word	0x20000034
 8015fd4:	0801a5e0 	.word	0x0801a5e0
 8015fd8:	080161ed 	.word	0x080161ed

08015fdc <14e0e80443fa04d4f8b6b44eccb243ea385eea36>:
 8015fdc:	4b02      	ldr	r3, [pc, #8]	; (8015fe8 <14e0e80443fa04d4f8b6b44eccb243ea385eea36+0xc>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	f893 02d0 	ldrb.w	r0, [r3, #720]	; 0x2d0
 8015fe4:	f7f4 bc52 	b.w	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8015fe8:	20000034 	.word	0x20000034

08015fec <bc7077241f0f6c26eafbf9350b96f546688ad609>:
 8015fec:	4b02      	ldr	r3, [pc, #8]	; (8015ff8 <bc7077241f0f6c26eafbf9350b96f546688ad609+0xc>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	f893 02d1 	ldrb.w	r0, [r3, #721]	; 0x2d1
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop
 8015ff8:	20000034 	.word	0x20000034

08015ffc <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>:
 8015ffc:	b510      	push	{r4, lr}
 8015ffe:	4a08      	ldr	r2, [pc, #32]	; (8016020 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x24>)
 8016000:	6812      	ldr	r2, [r2, #0]
 8016002:	4603      	mov	r3, r0
 8016004:	f892 0311 	ldrb.w	r0, [r2, #785]	; 0x311
 8016008:	b148      	cbz	r0, 801601e <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x22>
 801600a:	f202 21d5 	addw	r1, r2, #725	; 0x2d5
 801600e:	f202 22e5 	addw	r2, r2, #741	; 0x2e5
 8016012:	f851 4b04 	ldr.w	r4, [r1], #4
 8016016:	f843 4b04 	str.w	r4, [r3], #4
 801601a:	4291      	cmp	r1, r2
 801601c:	d1f9      	bne.n	8016012 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x16>
 801601e:	bd10      	pop	{r4, pc}
 8016020:	20000034 	.word	0x20000034

08016024 <c56d874196d9f33fea409aab4115507f6cab3a7f>:
 8016024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016028:	4b33      	ldr	r3, [pc, #204]	; (80160f8 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd4>)
 801602a:	681f      	ldr	r7, [r3, #0]
 801602c:	2373      	movs	r3, #115	; 0x73
 801602e:	7043      	strb	r3, [r0, #1]
 8016030:	7803      	ldrb	r3, [r0, #0]
 8016032:	2b73      	cmp	r3, #115	; 0x73
 8016034:	b088      	sub	sp, #32
 8016036:	4605      	mov	r5, r0
 8016038:	4688      	mov	r8, r1
 801603a:	d009      	beq.n	8016050 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x2c>
 801603c:	2303      	movs	r3, #3
 801603e:	9306      	str	r3, [sp, #24]
 8016040:	4b2e      	ldr	r3, [pc, #184]	; (80160fc <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd8>)
 8016042:	9307      	str	r3, [sp, #28]
 8016044:	ab08      	add	r3, sp, #32
 8016046:	e913 0003 	ldmdb	r3, {r0, r1}
 801604a:	4a2d      	ldr	r2, [pc, #180]	; (8016100 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xdc>)
 801604c:	f7f7 faee 	bl	800d62c <LOGGER_PrintLine>
 8016050:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8016054:	42ab      	cmp	r3, r5
 8016056:	d108      	bne.n	801606a <c56d874196d9f33fea409aab4115507f6cab3a7f+0x46>
 8016058:	2300      	movs	r3, #0
 801605a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 801605e:	4628      	mov	r0, r5
 8016060:	b008      	add	sp, #32
 8016062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016066:	f7f3 bd6b 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801606a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 801606e:	4e23      	ldr	r6, [pc, #140]	; (80160fc <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd8>)
 8016070:	42ab      	cmp	r3, r5
 8016072:	ac06      	add	r4, sp, #24
 8016074:	d113      	bne.n	801609e <c56d874196d9f33fea409aab4115507f6cab3a7f+0x7a>
 8016076:	2300      	movs	r3, #0
 8016078:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 801607c:	f1b8 0f00 	cmp.w	r8, #0
 8016080:	d008      	beq.n	8016094 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x70>
 8016082:	2305      	movs	r3, #5
 8016084:	e9cd 3606 	strd	r3, r6, [sp, #24]
 8016088:	4a1e      	ldr	r2, [pc, #120]	; (8016104 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe0>)
 801608a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801608e:	f7f7 facd 	bl	800d62c <LOGGER_PrintLine>
 8016092:	e7e4      	b.n	801605e <c56d874196d9f33fea409aab4115507f6cab3a7f+0x3a>
 8016094:	2303      	movs	r3, #3
 8016096:	e9cd 3606 	strd	r3, r6, [sp, #24]
 801609a:	4a1b      	ldr	r2, [pc, #108]	; (8016108 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe4>)
 801609c:	e7f5      	b.n	801608a <c56d874196d9f33fea409aab4115507f6cab3a7f+0x66>
 801609e:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 80160a2:	42ab      	cmp	r3, r5
 80160a4:	d122      	bne.n	80160ec <c56d874196d9f33fea409aab4115507f6cab3a7f+0xc8>
 80160a6:	2000      	movs	r0, #0
 80160a8:	a904      	add	r1, sp, #16
 80160aa:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80160ae:	f7f2 fd7b 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80160b2:	2208      	movs	r2, #8
 80160b4:	eb0d 0002 	add.w	r0, sp, r2
 80160b8:	a904      	add	r1, sp, #16
 80160ba:	f7ff fc13 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80160be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160c2:	f1b8 0f00 	cmp.w	r8, #0
 80160c6:	d00a      	beq.n	80160de <c56d874196d9f33fea409aab4115507f6cab3a7f+0xba>
 80160c8:	2105      	movs	r1, #5
 80160ca:	e9cd 1606 	strd	r1, r6, [sp, #24]
 80160ce:	e9cd 2300 	strd	r2, r3, [sp]
 80160d2:	4a0e      	ldr	r2, [pc, #56]	; (801610c <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe8>)
 80160d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80160d8:	f7f7 faa8 	bl	800d62c <LOGGER_PrintLine>
 80160dc:	e7bf      	b.n	801605e <c56d874196d9f33fea409aab4115507f6cab3a7f+0x3a>
 80160de:	2104      	movs	r1, #4
 80160e0:	e9cd 2300 	strd	r2, r3, [sp]
 80160e4:	e9cd 1606 	strd	r1, r6, [sp, #24]
 80160e8:	4a09      	ldr	r2, [pc, #36]	; (8016110 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xec>)
 80160ea:	e7f3      	b.n	80160d4 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xb0>
 80160ec:	2305      	movs	r3, #5
 80160ee:	e9cd 3606 	strd	r3, r6, [sp, #24]
 80160f2:	4a08      	ldr	r2, [pc, #32]	; (8016114 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xf0>)
 80160f4:	e7c9      	b.n	801608a <c56d874196d9f33fea409aab4115507f6cab3a7f+0x66>
 80160f6:	bf00      	nop
 80160f8:	20000034 	.word	0x20000034
 80160fc:	0801d34f 	.word	0x0801d34f
 8016100:	0801ad3e 	.word	0x0801ad3e
 8016104:	0801d422 	.word	0x0801d422
 8016108:	0801d43d 	.word	0x0801d43d
 801610c:	0801d455 	.word	0x0801d455
 8016110:	0801d47b 	.word	0x0801d47b
 8016114:	0801d49e 	.word	0x0801d49e

08016118 <93f4deb1287f872116dccf0c4dae004ac9b29b84>:
 8016118:	4b02      	ldr	r3, [pc, #8]	; (8016124 <93f4deb1287f872116dccf0c4dae004ac9b29b84+0xc>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	f8b3 030c 	ldrh.w	r0, [r3, #780]	; 0x30c
 8016120:	f001 b849 	b.w	80171b6 <7a609a09e67535970a8503dff96b9de207d8fd88>
 8016124:	20000034 	.word	0x20000034

08016128 <eada7656be7f8681f934187ead57a12001632399>:
 8016128:	4b02      	ldr	r3, [pc, #8]	; (8016134 <eada7656be7f8681f934187ead57a12001632399+0xc>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f8b3 030c 	ldrh.w	r0, [r3, #780]	; 0x30c
 8016130:	4770      	bx	lr
 8016132:	bf00      	nop
 8016134:	20000034 	.word	0x20000034

08016138 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>:
 8016138:	b510      	push	{r4, lr}
 801613a:	4b23      	ldr	r3, [pc, #140]	; (80161c8 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x90>)
 801613c:	b088      	sub	sp, #32
 801613e:	681c      	ldr	r4, [r3, #0]
 8016140:	f7f2 f90a 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 8016144:	2800      	cmp	r0, #0
 8016146:	d03b      	beq.n	80161c0 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x88>
 8016148:	f001 f832 	bl	80171b0 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 801614c:	f7ff fbd4 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8016150:	2073      	movs	r0, #115	; 0x73
 8016152:	f7f3 fba7 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8016156:	f7ff fbd7 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 801615a:	f7ff fbe3 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 801615e:	2210      	movs	r2, #16
 8016160:	2100      	movs	r1, #0
 8016162:	f10d 000d 	add.w	r0, sp, #13
 8016166:	f002 ff0b 	bl	8018f80 <memset>
 801616a:	2302      	movs	r3, #2
 801616c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016170:	f894 32ef 	ldrb.w	r3, [r4, #751]	; 0x2ef
 8016174:	b123      	cbz	r3, 8016180 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x48>
 8016176:	2300      	movs	r3, #0
 8016178:	f884 32ef 	strb.w	r3, [r4, #751]	; 0x2ef
 801617c:	f001 fb80 	bl	8017880 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc>
 8016180:	f10d 010d 	add.w	r1, sp, #13
 8016184:	f10d 0003 	add.w	r0, sp, #3
 8016188:	f7f2 fd0e 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801618c:	b198      	cbz	r0, 80161b6 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x7e>
 801618e:	2304      	movs	r3, #4
 8016190:	9301      	str	r3, [sp, #4]
 8016192:	4b0e      	ldr	r3, [pc, #56]	; (80161cc <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x94>)
 8016194:	4a0e      	ldr	r2, [pc, #56]	; (80161d0 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x98>)
 8016196:	9302      	str	r3, [sp, #8]
 8016198:	4619      	mov	r1, r3
 801619a:	2004      	movs	r0, #4
 801619c:	f7f7 fa46 	bl	800d62c <LOGGER_PrintLine>
 80161a0:	f7f2 fcdc 	bl	8008b5c <a1f453367df5fb7326959ac01438704c8522c5f4>
 80161a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80161a8:	f7f2 fed6 	bl	8008f58 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>
 80161ac:	2100      	movs	r1, #0
 80161ae:	aa03      	add	r2, sp, #12
 80161b0:	4608      	mov	r0, r1
 80161b2:	f7fa ff4f 	bl	8011054 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>
 80161b6:	2300      	movs	r3, #0
 80161b8:	f884 3311 	strb.w	r3, [r4, #785]	; 0x311
 80161bc:	b008      	add	sp, #32
 80161be:	bd10      	pop	{r4, pc}
 80161c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80161c4:	e7c2      	b.n	801614c <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x14>
 80161c6:	bf00      	nop
 80161c8:	20000034 	.word	0x20000034
 80161cc:	0801d34f 	.word	0x0801d34f
 80161d0:	0801d4b2 	.word	0x0801d4b2

080161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>:
 80161d4:	b508      	push	{r3, lr}
 80161d6:	f7f2 f8bf 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80161da:	b918      	cbnz	r0, 80161e4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2+0x10>
 80161dc:	4b02      	ldr	r3, [pc, #8]	; (80161e8 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2+0x14>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f893 02f1 	ldrb.w	r0, [r3, #753]	; 0x2f1
 80161e4:	bd08      	pop	{r3, pc}
 80161e6:	bf00      	nop
 80161e8:	20000034 	.word	0x20000034

080161ec <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27>:
 80161ec:	b530      	push	{r4, r5, lr}
 80161ee:	b087      	sub	sp, #28
 80161f0:	4605      	mov	r5, r0
 80161f2:	f7f2 f8b1 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80161f6:	4604      	mov	r4, r0
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d134      	bne.n	8016266 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x7a>
 80161fc:	4601      	mov	r1, r0
 80161fe:	2210      	movs	r2, #16
 8016200:	f10d 0005 	add.w	r0, sp, #5
 8016204:	f002 febc 	bl	8018f80 <memset>
 8016208:	2302      	movs	r3, #2
 801620a:	f88d 3004 	strb.w	r3, [sp, #4]
 801620e:	f7fa f88f 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 8016212:	b940      	cbnz	r0, 8016226 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x3a>
 8016214:	2073      	movs	r0, #115	; 0x73
 8016216:	f7f3 fb45 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 801621a:	f7ff fb75 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 801621e:	f7ff fb81 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 8016222:	b007      	add	sp, #28
 8016224:	bd30      	pop	{r4, r5, pc}
 8016226:	4b1c      	ldr	r3, [pc, #112]	; (8016298 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0xac>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 801622e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016232:	429a      	cmp	r2, r3
 8016234:	d0ee      	beq.n	8016214 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 8016236:	f10d 0105 	add.w	r1, sp, #5
 801623a:	4620      	mov	r0, r4
 801623c:	f7f2 fcb4 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8016240:	2800      	cmp	r0, #0
 8016242:	d0e7      	beq.n	8016214 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 8016244:	a801      	add	r0, sp, #4
 8016246:	f7fb fa75 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 801624a:	2800      	cmp	r0, #0
 801624c:	d0e2      	beq.n	8016214 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 801624e:	f10d 0105 	add.w	r1, sp, #5
 8016252:	4620      	mov	r0, r4
 8016254:	f7f2 fca8 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8016258:	2800      	cmp	r0, #0
 801625a:	d0db      	beq.n	8016214 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 801625c:	a801      	add	r0, sp, #4
 801625e:	f7fb fa69 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8016262:	2800      	cmp	r0, #0
 8016264:	d0d6      	beq.n	8016214 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 8016266:	f7f4 fb8b 	bl	800a980 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 801626a:	4604      	mov	r4, r0
 801626c:	f7f2 f966 	bl	800853c <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 8016270:	2306      	movs	r3, #6
 8016272:	fb00 3303 	mla	r3, r0, r3, r3
 8016276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801627a:	fbb2 f3f3 	udiv	r3, r2, r3
 801627e:	429c      	cmp	r4, r3
 8016280:	dacf      	bge.n	8016222 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x36>
 8016282:	f7ff ffa7 	bl	80161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 8016286:	2800      	cmp	r0, #0
 8016288:	d0cb      	beq.n	8016222 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x36>
 801628a:	4628      	mov	r0, r5
 801628c:	b007      	add	sp, #28
 801628e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016292:	f7ff bb5d 	b.w	8015950 <cef630f5a74a35314667ebee3f885b52bc89b138>
 8016296:	bf00      	nop
 8016298:	20000034 	.word	0x20000034

0801629c <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>:
 801629c:	b513      	push	{r0, r1, r4, lr}
 801629e:	4b10      	ldr	r3, [pc, #64]	; (80162e0 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x44>)
 80162a0:	681c      	ldr	r4, [r3, #0]
 80162a2:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 80162a6:	f7f4 fb41 	bl	800a92c <56445be374e93738432324b7e0ececbd8047647a>
 80162aa:	4601      	mov	r1, r0
 80162ac:	b998      	cbnz	r0, 80162d6 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3a>
 80162ae:	f7f2 fc7b 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80162b2:	b990      	cbnz	r0, 80162da <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3e>
 80162b4:	f7ff ff8e 	bl	80161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 80162b8:	b978      	cbnz	r0, 80162da <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3e>
 80162ba:	490a      	ldr	r1, [pc, #40]	; (80162e4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x48>)
 80162bc:	4608      	mov	r0, r1
 80162be:	f7f4 fba5 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 80162c2:	f504 741c 	add.w	r4, r4, #624	; 0x270
 80162c6:	4602      	mov	r2, r0
 80162c8:	4b07      	ldr	r3, [pc, #28]	; (80162e8 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x4c>)
 80162ca:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 80162ce:	9400      	str	r4, [sp, #0]
 80162d0:	2101      	movs	r1, #1
 80162d2:	f7f4 fac9 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 80162d6:	b002      	add	sp, #8
 80162d8:	bd10      	pop	{r4, pc}
 80162da:	4904      	ldr	r1, [pc, #16]	; (80162ec <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x50>)
 80162dc:	e7ee      	b.n	80162bc <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x20>
 80162de:	bf00      	nop
 80162e0:	20000034 	.word	0x20000034
 80162e4:	00a7d8c0 	.word	0x00a7d8c0
 80162e8:	080165b1 	.word	0x080165b1
 80162ec:	00989680 	.word	0x00989680

080162f0 <2286051897e6bbb22857e9c9a8dc75ab84e05da9>:
 80162f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162f4:	4980      	ldr	r1, [pc, #512]	; (80164f8 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x208>)
 80162f6:	f890 4095 	ldrb.w	r4, [r0, #149]	; 0x95
 80162fa:	b08a      	sub	sp, #40	; 0x28
 80162fc:	4605      	mov	r5, r0
 80162fe:	487f      	ldr	r0, [pc, #508]	; (80164fc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x20c>)
 8016300:	f7f4 fb84 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8016304:	4b7e      	ldr	r3, [pc, #504]	; (8016500 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x210>)
 8016306:	9500      	str	r5, [sp, #0]
 8016308:	4602      	mov	r2, r0
 801630a:	2101      	movs	r1, #1
 801630c:	4620      	mov	r0, r4
 801630e:	f7f4 faab 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8016312:	f7fa f80d 	bl	8010330 <60f007314f15c808f67a076d33295282887c81e9>
 8016316:	2800      	cmp	r0, #0
 8016318:	f000 80e0 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801631c:	f7f2 f81c 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 8016320:	4606      	mov	r6, r0
 8016322:	2800      	cmp	r0, #0
 8016324:	f040 80da 	bne.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8016328:	4b76      	ldr	r3, [pc, #472]	; (8016504 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x214>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8016330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016334:	429a      	cmp	r2, r3
 8016336:	f000 80d1 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801633a:	f7ff ff4b 	bl	80161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 801633e:	2800      	cmp	r0, #0
 8016340:	f000 80cc 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8016344:	f000 fec8 	bl	80170d8 <bdffef4226ee0110f60b8de23959aef3caa4ba4a>
 8016348:	4607      	mov	r7, r0
 801634a:	2800      	cmp	r0, #0
 801634c:	f000 80c6 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8016350:	4631      	mov	r1, r6
 8016352:	2210      	movs	r2, #16
 8016354:	f10d 0015 	add.w	r0, sp, #21
 8016358:	f002 fe12 	bl	8018f80 <memset>
 801635c:	2302      	movs	r3, #2
 801635e:	f10d 0115 	add.w	r1, sp, #21
 8016362:	4630      	mov	r0, r6
 8016364:	f88d 3014 	strb.w	r3, [sp, #20]
 8016368:	f7f2 fc1e 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801636c:	2800      	cmp	r0, #0
 801636e:	f000 80b5 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8016372:	a805      	add	r0, sp, #20
 8016374:	f7fb f9de 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8016378:	2800      	cmp	r0, #0
 801637a:	f000 80af 	beq.w	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801637e:	2073      	movs	r0, #115	; 0x73
 8016380:	f7f3 fb20 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8016384:	4604      	mov	r4, r0
 8016386:	b948      	cbnz	r0, 801639c <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xac>
 8016388:	2303      	movs	r3, #3
 801638a:	9303      	str	r3, [sp, #12]
 801638c:	4b5e      	ldr	r3, [pc, #376]	; (8016508 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x218>)
 801638e:	4a5f      	ldr	r2, [pc, #380]	; (801650c <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x21c>)
 8016390:	9304      	str	r3, [sp, #16]
 8016392:	4619      	mov	r1, r3
 8016394:	2003      	movs	r0, #3
 8016396:	f7f7 f949 	bl	800d62c <LOGGER_PrintLine>
 801639a:	e09f      	b.n	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801639c:	f247 3373 	movw	r3, #29555	; 0x7373
 80163a0:	8003      	strh	r3, [r0, #0]
 80163a2:	233a      	movs	r3, #58	; 0x3a
 80163a4:	7403      	strb	r3, [r0, #16]
 80163a6:	239b      	movs	r3, #155	; 0x9b
 80163a8:	8243      	strh	r3, [r0, #18]
 80163aa:	2303      	movs	r3, #3
 80163ac:	7743      	strb	r3, [r0, #29]
 80163ae:	f7f3 fa2b 	bl	8009808 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	f8c4 301e 	str.w	r3, [r4, #30]
 80163b8:	6843      	ldr	r3, [r0, #4]
 80163ba:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
 80163be:	f8dd 3015 	ldr.w	r3, [sp, #21]
 80163c2:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 80163c6:	f8dd 3019 	ldr.w	r3, [sp, #25]
 80163ca:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 80163ce:	a902      	add	r1, sp, #8
 80163d0:	4630      	mov	r0, r6
 80163d2:	f000 fea5 	bl	8017120 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac>
 80163d6:	b1e0      	cbz	r0, 8016412 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x122>
 80163d8:	2202      	movs	r2, #2
 80163da:	a902      	add	r1, sp, #8
 80163dc:	a803      	add	r0, sp, #12
 80163de:	f7ff fa81 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80163e2:	2102      	movs	r1, #2
 80163e4:	4620      	mov	r0, r4
 80163e6:	f001 fd21 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80163ea:	6863      	ldr	r3, [r4, #4]
 80163ec:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80163f0:	801a      	strh	r2, [r3, #0]
 80163f2:	2305      	movs	r3, #5
 80163f4:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 80163f8:	2104      	movs	r1, #4
 80163fa:	2310      	movs	r3, #16
 80163fc:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8016400:	f8a5 107c 	strh.w	r1, [r5, #124]	; 0x7c
 8016404:	4620      	mov	r0, r4
 8016406:	f001 fd11 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801640a:	6863      	ldr	r3, [r4, #4]
 801640c:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	3601      	adds	r6, #1
 8016414:	42b7      	cmp	r7, r6
 8016416:	d1da      	bne.n	80163ce <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xde>
 8016418:	2101      	movs	r1, #1
 801641a:	4620      	mov	r0, r4
 801641c:	f001 fd06 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	2600      	movs	r6, #0
 8016424:	701e      	strb	r6, [r3, #0]
 8016426:	2101      	movs	r1, #1
 8016428:	4620      	mov	r0, r4
 801642a:	f001 fcff 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801642e:	6863      	ldr	r3, [r4, #4]
 8016430:	2101      	movs	r1, #1
 8016432:	701e      	strb	r6, [r3, #0]
 8016434:	4620      	mov	r0, r4
 8016436:	f001 fcf9 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801643a:	6863      	ldr	r3, [r4, #4]
 801643c:	2101      	movs	r1, #1
 801643e:	701e      	strb	r6, [r3, #0]
 8016440:	4620      	mov	r0, r4
 8016442:	f001 fcf3 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016446:	6863      	ldr	r3, [r4, #4]
 8016448:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
 801644c:	701a      	strb	r2, [r3, #0]
 801644e:	2104      	movs	r1, #4
 8016450:	4620      	mov	r0, r4
 8016452:	f001 fceb 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016456:	6863      	ldr	r3, [r4, #4]
 8016458:	8a62      	ldrh	r2, [r4, #18]
 801645a:	701a      	strb	r2, [r3, #0]
 801645c:	6863      	ldr	r3, [r4, #4]
 801645e:	f04f 0802 	mov.w	r8, #2
 8016462:	f883 8001 	strb.w	r8, [r3, #1]
 8016466:	6861      	ldr	r1, [r4, #4]
 8016468:	2005      	movs	r0, #5
 801646a:	eb01 0608 	add.w	r6, r1, r8
 801646e:	f7f1 ff81 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016472:	4607      	mov	r7, r0
 8016474:	4640      	mov	r0, r8
 8016476:	f7f1 ff7d 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801647a:	1c7a      	adds	r2, r7, #1
 801647c:	1c43      	adds	r3, r0, #1
 801647e:	4631      	mov	r1, r6
 8016480:	4620      	mov	r0, r4
 8016482:	f001 fd8f 	bl	8017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8016486:	4620      	mov	r0, r4
 8016488:	f7ff f915 	bl	80156b6 <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 801648c:	4f1e      	ldr	r7, [pc, #120]	; (8016508 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x218>)
 801648e:	ae03      	add	r6, sp, #12
 8016490:	b338      	cbz	r0, 80164e2 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1f2>
 8016492:	2305      	movs	r3, #5
 8016494:	e9cd 3703 	strd	r3, r7, [sp, #12]
 8016498:	4a1d      	ldr	r2, [pc, #116]	; (8016510 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x220>)
 801649a:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
 801649e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80164a2:	f7f7 f8c3 	bl	800d62c <LOGGER_PrintLine>
 80164a6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 80164aa:	481a      	ldr	r0, [pc, #104]	; (8016514 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x224>)
 80164ac:	f895 4095 	ldrb.w	r4, [r5, #149]	; 0x95
 80164b0:	fa10 f103 	lsls.w	r1, r0, r3
 80164b4:	bf48      	it	mi
 80164b6:	3103      	addmi	r1, #3
 80164b8:	1089      	asrs	r1, r1, #2
 80164ba:	4098      	lsls	r0, r3
 80164bc:	f7f4 faa6 	bl	800aa0c <23673502809f5a9646d21283e7a04e0764f4d11d>
 80164c0:	4b0f      	ldr	r3, [pc, #60]	; (8016500 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x210>)
 80164c2:	9500      	str	r5, [sp, #0]
 80164c4:	4602      	mov	r2, r0
 80164c6:	2101      	movs	r1, #1
 80164c8:	4620      	mov	r0, r4
 80164ca:	f7f4 f9cd 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 80164ce:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 80164d2:	2b05      	cmp	r3, #5
 80164d4:	d802      	bhi.n	80164dc <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 80164d6:	3301      	adds	r3, #1
 80164d8:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
 80164dc:	b00a      	add	sp, #40	; 0x28
 80164de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e2:	4620      	mov	r0, r4
 80164e4:	f7f3 fb2c 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80164e8:	2304      	movs	r3, #4
 80164ea:	e9cd 3703 	strd	r3, r7, [sp, #12]
 80164ee:	4a0a      	ldr	r2, [pc, #40]	; (8016518 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x228>)
 80164f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80164f4:	e74f      	b.n	8016396 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xa6>
 80164f6:	bf00      	nop
 80164f8:	01312d00 	.word	0x01312d00
 80164fc:	00989680 	.word	0x00989680
 8016500:	080162f1 	.word	0x080162f1
 8016504:	20000034 	.word	0x20000034
 8016508:	0801d34f 	.word	0x0801d34f
 801650c:	0801b20a 	.word	0x0801b20a
 8016510:	0801d4cc 	.word	0x0801d4cc
 8016514:	01c9c380 	.word	0x01c9c380
 8016518:	0801d4df 	.word	0x0801d4df

0801651c <85bee7284ee25f7a29b50481cf48923ac2abd69d>:
 801651c:	b508      	push	{r3, lr}
 801651e:	f7ff f9f3 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8016522:	f7ff f9ff 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 8016526:	f7ff fad7 	bl	8015ad8 <ddcc96d14128f39f258a026a92cbd4c2383286b1>
 801652a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801652e:	f7ff baf1 	b.w	8015b14 <e1f51aec36766790a9d7657a41d61426b11f2b8a>

08016532 <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e>:
 8016532:	b508      	push	{r3, lr}
 8016534:	f7ff fe4e 	bl	80161d4 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 8016538:	b128      	cbz	r0, 8016546 <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e+0x14>
 801653a:	f7ff facd 	bl	8015ad8 <ddcc96d14128f39f258a026a92cbd4c2383286b1>
 801653e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016542:	f7ff bae7 	b.w	8015b14 <e1f51aec36766790a9d7657a41d61426b11f2b8a>
 8016546:	bd08      	pop	{r3, pc}

08016548 <5150c16bb7c98e5d77d974241410b468172cd080>:
 8016548:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801654a:	4b18      	ldr	r3, [pc, #96]	; (80165ac <5150c16bb7c98e5d77d974241410b468172cd080+0x64>)
 801654c:	4606      	mov	r6, r0
 801654e:	681c      	ldr	r4, [r3, #0]
 8016550:	460d      	mov	r5, r1
 8016552:	f7f1 ff01 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 8016556:	b1e8      	cbz	r0, 8016594 <5150c16bb7c98e5d77d974241410b468172cd080+0x4c>
 8016558:	f000 fe2a 	bl	80171b0 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 801655c:	f7ff f9cc 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8016560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016564:	4630      	mov	r0, r6
 8016566:	f7f2 f85b 	bl	8008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 801656a:	f7f2 faf7 	bl	8008b5c <a1f453367df5fb7326959ac01438704c8522c5f4>
 801656e:	f7ff f9cb 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8016572:	f7ff f9d7 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 8016576:	2073      	movs	r0, #115	; 0x73
 8016578:	f7f3 f994 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 801657c:	4629      	mov	r1, r5
 801657e:	4668      	mov	r0, sp
 8016580:	2208      	movs	r2, #8
 8016582:	f7ff f9af 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8016586:	e9dd 0100 	ldrd	r0, r1, [sp]
 801658a:	b002      	add	sp, #8
 801658c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016590:	f001 ba44 	b.w	8017a1c <92a2aa0d77d83c323d033422c3070d3730d69fc2>
 8016594:	f8b4 430e 	ldrh.w	r4, [r4, #782]	; 0x30e
 8016598:	f000 fe5e 	bl	8017258 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d>
 801659c:	4420      	add	r0, r4
 801659e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80165a2:	bf2c      	ite	cs
 80165a4:	f64f 70ff 	movwcs	r0, #65535	; 0xffff
 80165a8:	b280      	uxthcc	r0, r0
 80165aa:	e7d7      	b.n	801655c <5150c16bb7c98e5d77d974241410b468172cd080+0x14>
 80165ac:	20000034 	.word	0x20000034

080165b0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	b0af      	sub	sp, #188	; 0xbc
 80165b6:	4604      	mov	r4, r0
 80165b8:	f7fa fdf6 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 80165bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80165be:	f7fb f8a3 	bl	8011708 <a332c320f50553856ddcee95ff765027b8f3e118>
 80165c2:	4605      	mov	r5, r0
 80165c4:	f7f1 fec8 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 80165c8:	4606      	mov	r6, r0
 80165ca:	b178      	cbz	r0, 80165ec <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3c>
 80165cc:	2303      	movs	r3, #3
 80165ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80165d0:	4bb4      	ldr	r3, [pc, #720]	; (80168a4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 80165d2:	4ab5      	ldr	r2, [pc, #724]	; (80168a8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f8>)
 80165d4:	932a      	str	r3, [sp, #168]	; 0xa8
 80165d6:	4619      	mov	r1, r3
 80165d8:	2003      	movs	r0, #3
 80165da:	f7f7 f827 	bl	800d62c <LOGGER_PrintLine>
 80165de:	f000 fde7 	bl	80171b0 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 80165e2:	b02f      	add	sp, #188	; 0xbc
 80165e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e8:	f7ff b986 	b.w	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 80165ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165ee:	1b5d      	subs	r5, r3, r5
 80165f0:	429d      	cmp	r5, r3
 80165f2:	bf28      	it	cs
 80165f4:	461d      	movcs	r5, r3
 80165f6:	4601      	mov	r1, r0
 80165f8:	231e      	movs	r3, #30
 80165fa:	2210      	movs	r2, #16
 80165fc:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 8016600:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8016604:	950c      	str	r5, [sp, #48]	; 0x30
 8016606:	f002 fcbb 	bl	8018f80 <memset>
 801660a:	2302      	movs	r3, #2
 801660c:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8016610:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 8016614:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8016618:	f7f2 fac6 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801661c:	9009      	str	r0, [sp, #36]	; 0x24
 801661e:	2800      	cmp	r0, #0
 8016620:	f040 80bb 	bne.w	801679a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x1ea>
 8016624:	a814      	add	r0, sp, #80	; 0x50
 8016626:	f7f9 fe21 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 801662a:	2301      	movs	r3, #1
 801662c:	930e      	str	r3, [sp, #56]	; 0x38
 801662e:	2300      	movs	r3, #0
 8016630:	930d      	str	r3, [sp, #52]	; 0x34
 8016632:	f04f 0801 	mov.w	r8, #1
 8016636:	930a      	str	r3, [sp, #40]	; 0x28
 8016638:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801663c:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8016640:	4638      	mov	r0, r7
 8016642:	f7f2 fa73 	bl	8008b2c <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1>
 8016646:	2800      	cmp	r0, #0
 8016648:	d075      	beq.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801664a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 801664e:	42bb      	cmp	r3, r7
 8016650:	d071      	beq.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016652:	a914      	add	r1, sp, #80	; 0x50
 8016654:	4638      	mov	r0, r7
 8016656:	f7f2 f8b9 	bl	80087cc <4f011439265b330ba2d9f164eb1f6389866b01df>
 801665a:	2800      	cmp	r0, #0
 801665c:	d16b      	bne.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801665e:	4638      	mov	r0, r7
 8016660:	f7f2 fccc 	bl	8008ffc <5cf48605db24e77c7dc4310895ecb68238b276e7>
 8016664:	4601      	mov	r1, r0
 8016666:	2800      	cmp	r0, #0
 8016668:	d165      	bne.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801666a:	2210      	movs	r2, #16
 801666c:	f10d 00a5 	add.w	r0, sp, #165	; 0xa5
 8016670:	f002 fc86 	bl	8018f80 <memset>
 8016674:	2302      	movs	r3, #2
 8016676:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 801667a:	4638      	mov	r0, r7
 801667c:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8016680:	f7f2 fa32 	bl	8008ae8 <b7be15738b198492e50cb8023d171fca112169af>
 8016684:	a829      	add	r0, sp, #164	; 0xa4
 8016686:	f7f2 fd79 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801668a:	f000 fe0f 	bl	80172ac <TOPOLOGY_IsAcceptable>
 801668e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016690:	2800      	cmp	r0, #0
 8016692:	d050      	beq.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016694:	4638      	mov	r0, r7
 8016696:	f7f1 ffa9 	bl	80085ec <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 801669a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801669e:	4558      	cmp	r0, fp
 80166a0:	4682      	mov	sl, r0
 80166a2:	d048      	beq.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 80166a4:	4639      	mov	r1, r7
 80166a6:	a818      	add	r0, sp, #96	; 0x60
 80166a8:	f7f1 ffd4 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 80166ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80166b0:	9311      	str	r3, [sp, #68]	; 0x44
 80166b2:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 80166b6:	f99d 5064 	ldrsb.w	r5, [sp, #100]	; 0x64
 80166ba:	9310      	str	r3, [sp, #64]	; 0x40
 80166bc:	f7f0 f86a 	bl	8006794 <EMBENET_RADIO_GetCapabilities>
 80166c0:	f990 301c 	ldrsb.w	r3, [r0, #28]
 80166c4:	42ab      	cmp	r3, r5
 80166c6:	dc36      	bgt.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 80166c8:	f7f9 fe02 	bl	80102d0 <430fd23aeea8952b7b416b6590815371f1106b85>
 80166cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166ce:	9001      	str	r0, [sp, #4]
 80166d0:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	4628      	mov	r0, r5
 80166d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166da:	f000 fd6f 	bl	80171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80166de:	eb00 050a 	add.w	r5, r0, sl
 80166e2:	455d      	cmp	r5, fp
 80166e4:	a922      	add	r1, sp, #136	; 0x88
 80166e6:	4638      	mov	r0, r7
 80166e8:	bf28      	it	cs
 80166ea:	465d      	movcs	r5, fp
 80166ec:	f7f2 f9fc 	bl	8008ae8 <b7be15738b198492e50cb8023d171fca112169af>
 80166f0:	a822      	add	r0, sp, #136	; 0x88
 80166f2:	f7fa fcd7 	bl	80110a4 <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>
 80166f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f8:	4682      	mov	sl, r0
 80166fa:	2800      	cmp	r0, #0
 80166fc:	f000 80b4 	beq.w	8016868 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2b8>
 8016700:	b153      	cbz	r3, 8016718 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x168>
 8016702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016704:	b1bb      	cbz	r3, 8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016706:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 801670a:	b92b      	cbnz	r3, 8016718 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x168>
 801670c:	4b67      	ldr	r3, [pc, #412]	; (80168ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8016714:	429d      	cmp	r5, r3
 8016716:	d20e      	bcs.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016718:	f1b8 0f00 	cmp.w	r8, #0
 801671c:	f000 80bc 	beq.w	8016898 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2e8>
 8016720:	b2ad      	uxth	r5, r5
 8016722:	454d      	cmp	r5, r9
 8016724:	46c2      	mov	sl, r8
 8016726:	d302      	bcc.n	801672e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 8016728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801672a:	464d      	mov	r5, r9
 801672c:	46b0      	mov	r8, r6
 801672e:	4646      	mov	r6, r8
 8016730:	970a      	str	r7, [sp, #40]	; 0x28
 8016732:	46a9      	mov	r9, r5
 8016734:	46d0      	mov	r8, sl
 8016736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016738:	3301      	adds	r3, #1
 801673a:	2b1e      	cmp	r3, #30
 801673c:	930d      	str	r3, [sp, #52]	; 0x34
 801673e:	f47f af7d 	bne.w	801663c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x8c>
 8016742:	2210      	movs	r2, #16
 8016744:	2100      	movs	r1, #0
 8016746:	f10d 00a5 	add.w	r0, sp, #165	; 0xa5
 801674a:	f002 fc19 	bl	8018f80 <memset>
 801674e:	2302      	movs	r3, #2
 8016750:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8016754:	2e00      	cmp	r6, #0
 8016756:	f040 80b5 	bne.w	80168c4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x314>
 801675a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801675c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8016760:	2a00      	cmp	r2, #0
 8016762:	f040 815f 	bne.w	8016a24 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x474>
 8016766:	2b00      	cmp	r3, #0
 8016768:	f000 80f9 	beq.w	801695e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 801676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801676e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8016772:	2303      	movs	r3, #3
 8016774:	9322      	str	r3, [sp, #136]	; 0x88
 8016776:	4b4b      	ldr	r3, [pc, #300]	; (80168a4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 8016778:	4a4d      	ldr	r2, [pc, #308]	; (80168b0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x300>)
 801677a:	9323      	str	r3, [sp, #140]	; 0x8c
 801677c:	4619      	mov	r1, r3
 801677e:	2003      	movs	r0, #3
 8016780:	f7f6 ff54 	bl	800d62c <LOGGER_PrintLine>
 8016784:	484b      	ldr	r0, [pc, #300]	; (80168b4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x304>)
 8016786:	2204      	movs	r2, #4
 8016788:	4621      	mov	r1, r4
 801678a:	f7f4 ff85 	bl	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801678e:	f7ff fcd3 	bl	8016138 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>
 8016792:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016794:	aa24      	add	r2, sp, #144	; 0x90
 8016796:	4608      	mov	r0, r1
 8016798:	e0df      	b.n	801695a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3aa>
 801679a:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 801679e:	f7fa fc81 	bl	80110a4 <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>
 80167a2:	900e      	str	r0, [sp, #56]	; 0x38
 80167a4:	a814      	add	r0, sp, #80	; 0x50
 80167a6:	f7f9 fd61 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 80167aa:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80167ae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80167b0:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80167b4:	a816      	add	r0, sp, #88	; 0x58
 80167b6:	f7f1 ffa7 	bl	8008708 <7df3ba357f7f62320ead08135508bf101de27d80>
 80167ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80167bc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80167c0:	1aff      	subs	r7, r7, r3
 80167c2:	eb65 0502 	sbc.w	r5, r5, r2
 80167c6:	4a3c      	ldr	r2, [pc, #240]	; (80168b8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x308>)
 80167c8:	4b3c      	ldr	r3, [pc, #240]	; (80168bc <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x30c>)
 80167ca:	6912      	ldr	r2, [r2, #16]
 80167cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80167d0:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80167d4:	42bb      	cmp	r3, r7
 80167d6:	eb76 0505 	sbcs.w	r5, r6, r5
 80167da:	d213      	bcs.n	8016804 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x254>
 80167dc:	2303      	movs	r3, #3
 80167de:	9329      	str	r3, [sp, #164]	; 0xa4
 80167e0:	4b30      	ldr	r3, [pc, #192]	; (80168a4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 80167e2:	4a37      	ldr	r2, [pc, #220]	; (80168c0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x310>)
 80167e4:	932a      	str	r3, [sp, #168]	; 0xa8
 80167e6:	4619      	mov	r1, r3
 80167e8:	2003      	movs	r0, #3
 80167ea:	f7f6 ff1f 	bl	800d62c <LOGGER_PrintLine>
 80167ee:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 80167f2:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 80167f6:	f7ff fea7 	bl	8016548 <5150c16bb7c98e5d77d974241410b468172cd080>
 80167fa:	2301      	movs	r3, #1
 80167fc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8016800:	9609      	str	r6, [sp, #36]	; 0x24
 8016802:	e714      	b.n	801662e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 8016804:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8016808:	a818      	add	r0, sp, #96	; 0x60
 801680a:	f7f1 ff23 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 801680e:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 8016812:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016816:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
 801681a:	f99d 7064 	ldrsb.w	r7, [sp, #100]	; 0x64
 801681e:	f7f1 fee5 	bl	80085ec <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 8016822:	4605      	mov	r5, r0
 8016824:	f7f9 fd54 	bl	80102d0 <430fd23aeea8952b7b416b6590815371f1106b85>
 8016828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801682a:	9001      	str	r0, [sp, #4]
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	4642      	mov	r2, r8
 8016830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016832:	4649      	mov	r1, r9
 8016834:	4638      	mov	r0, r7
 8016836:	f000 fcc1 	bl	80171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 801683a:	4428      	add	r0, r5
 801683c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016840:	d304      	bcc.n	801684c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x29c>
 8016842:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016846:	f7ff f857 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 801684a:	e6f0      	b.n	801662e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 801684c:	b280      	uxth	r0, r0
 801684e:	f7ff f853 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8016852:	4b16      	ldr	r3, [pc, #88]	; (80168ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>)
 8016854:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 801685e:	429a      	cmp	r2, r3
 8016860:	bf88      	it	hi
 8016862:	f8a4 309e 	strhhi.w	r3, [r4, #158]	; 0x9e
 8016866:	e6e2      	b.n	801662e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 8016868:	b17b      	cbz	r3, 801688a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 801686a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 801686e:	b963      	cbnz	r3, 801688a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 8016870:	f8df b038 	ldr.w	fp, [pc, #56]	; 80168ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>
 8016874:	f8db 3000 	ldr.w	r3, [fp]
 8016878:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 801687c:	429d      	cmp	r5, r3
 801687e:	f4bf af5a 	bcs.w	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016884:	2b00      	cmp	r3, #0
 8016886:	f000 80dd 	beq.w	8016a44 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x494>
 801688a:	b2ad      	uxth	r5, r5
 801688c:	454d      	cmp	r5, r9
 801688e:	d306      	bcc.n	801689e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2ee>
 8016890:	f1b8 0f00 	cmp.w	r8, #0
 8016894:	f47f af4b 	bne.w	801672e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 8016898:	f04f 0a00 	mov.w	sl, #0
 801689c:	e744      	b.n	8016728 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x178>
 801689e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80168a2:	e744      	b.n	801672e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 80168a4:	0801d34f 	.word	0x0801d34f
 80168a8:	0801d4fc 	.word	0x0801d4fc
 80168ac:	20000034 	.word	0x20000034
 80168b0:	0801d5ee 	.word	0x0801d5ee
 80168b4:	08015951 	.word	0x08015951
 80168b8:	0801a5e0 	.word	0x0801a5e0
 80168bc:	02aea540 	.word	0x02aea540
 80168c0:	0801d506 	.word	0x0801d506
 80168c4:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 80168c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168ca:	f7f2 f90d 	bl	8008ae8 <b7be15738b198492e50cb8023d171fca112169af>
 80168ce:	4648      	mov	r0, r9
 80168d0:	f7ff f812 	bl	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 80168d4:	f7ff f818 	bl	8015908 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 80168d8:	f7ff f824 	bl	8015924 <43cc35f40acb52f42fa1199cee254d1023926eea>
 80168dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168de:	f8a4 909e 	strh.w	r9, [r4, #158]	; 0x9e
 80168e2:	f7f2 f943 	bl	8008b6c <bc730516ff4e3e92f0649500c5c053783837fa16>
 80168e6:	2073      	movs	r0, #115	; 0x73
 80168e8:	f7f2 ffdc 	bl	80098a4 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 80168ec:	a929      	add	r1, sp, #164	; 0xa4
 80168ee:	a824      	add	r0, sp, #144	; 0x90
 80168f0:	f7f3 fae0 	bl	8009eb4 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725>
 80168f4:	2208      	movs	r2, #8
 80168f6:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 80168fa:	a81e      	add	r0, sp, #120	; 0x78
 80168fc:	f7fe fff2 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8016900:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 8016904:	4630      	mov	r0, r6
 8016906:	4639      	mov	r1, r7
 8016908:	f001 f87c 	bl	8017a04 <174d137b644ccd4ef57a02826061d132a3dec310>
 801690c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016910:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016912:	f7f1 ff17 	bl	8008744 <5004528a8ffa5581bbd161cf1057e8d5d3867843>
 8016916:	f7f6 fe63 	bl	800d5e0 <LOGGER_StartSection>
 801691a:	2800      	cmp	r0, #0
 801691c:	d07d      	beq.n	8016a1a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x46a>
 801691e:	2305      	movs	r3, #5
 8016920:	9322      	str	r3, [sp, #136]	; 0x88
 8016922:	4b53      	ldr	r3, [pc, #332]	; (8016a70 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c0>)
 8016924:	9323      	str	r3, [sp, #140]	; 0x8c
 8016926:	4619      	mov	r1, r3
 8016928:	2005      	movs	r0, #5
 801692a:	f7f6 fe61 	bl	800d5f0 <LOGGER_PrintHeader>
 801692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016930:	b9d3      	cbnz	r3, 8016968 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3b8>
 8016932:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8016936:	b9bb      	cbnz	r3, 8016968 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3b8>
 8016938:	484e      	ldr	r0, [pc, #312]	; (8016a74 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c4>)
 801693a:	4632      	mov	r2, r6
 801693c:	463b      	mov	r3, r7
 801693e:	f7f6 fe3d 	bl	800d5bc <LOGGER_Print>
 8016942:	f7f6 fe33 	bl	800d5ac <LOGGER_PrintNL>
 8016946:	f7f6 fe51 	bl	800d5ec <LOGGER_EndSection>
 801694a:	2001      	movs	r0, #1
 801694c:	2300      	movs	r3, #0
 801694e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016950:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8016954:	aa24      	add	r2, sp, #144	; 0x90
 8016956:	f000 0001 	and.w	r0, r0, #1
 801695a:	f7fa fb7b 	bl	8011054 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>
 801695e:	f7ff fc9d 	bl	801629c <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>
 8016962:	b02f      	add	sp, #188	; 0xbc
 8016964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016968:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 801696c:	2208      	movs	r2, #8
 801696e:	a820      	add	r0, sp, #128	; 0x80
 8016970:	f7fe ffb8 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8016974:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8016978:	e9cd 6700 	strd	r6, r7, [sp]
 801697c:	483e      	ldr	r0, [pc, #248]	; (8016a78 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c8>)
 801697e:	f7f6 fe1d 	bl	800d5bc <LOGGER_Print>
 8016982:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8016986:	a81a      	add	r0, sp, #104	; 0x68
 8016988:	f7f1 fe64 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 801698c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8016990:	f8bd 806a 	ldrh.w	r8, [sp, #106]	; 0x6a
 8016994:	f99d 606c 	ldrsb.w	r6, [sp, #108]	; 0x6c
 8016998:	f7f9 fc9a 	bl	80102d0 <430fd23aeea8952b7b416b6590815371f1106b85>
 801699c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801699e:	9001      	str	r0, [sp, #4]
 80169a0:	4642      	mov	r2, r8
 80169a2:	9300      	str	r3, [sp, #0]
 80169a4:	4639      	mov	r1, r7
 80169a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169a8:	4630      	mov	r0, r6
 80169aa:	f000 fc07 	bl	80171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80169ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169b0:	900d      	str	r0, [sp, #52]	; 0x34
 80169b2:	a81c      	add	r0, sp, #112	; 0x70
 80169b4:	f7f1 fe4e 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 80169b8:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 80169bc:	f8bd b072 	ldrh.w	fp, [sp, #114]	; 0x72
 80169c0:	f99d 9074 	ldrsb.w	r9, [sp, #116]	; 0x74
 80169c4:	f7f9 fc84 	bl	80102d0 <430fd23aeea8952b7b416b6590815371f1106b85>
 80169c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169ca:	9001      	str	r0, [sp, #4]
 80169cc:	9300      	str	r3, [sp, #0]
 80169ce:	465a      	mov	r2, fp
 80169d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169d2:	4651      	mov	r1, sl
 80169d4:	4648      	mov	r0, r9
 80169d6:	f000 fbf1 	bl	80171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80169da:	4a28      	ldr	r2, [pc, #160]	; (8016a7c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4cc>)
 80169dc:	6812      	ldr	r2, [r2, #0]
 80169de:	4605      	mov	r5, r0
 80169e0:	f8b2 130c 	ldrh.w	r1, [r2, #780]	; 0x30c
 80169e4:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 80169e8:	910c      	str	r1, [sp, #48]	; 0x30
 80169ea:	f7f1 fdff 	bl	80085ec <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 80169ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80169f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169f2:	f7f1 fdfb 	bl	80085ec <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 80169f6:	e9dd 210b 	ldrd	r2, r1, [sp, #44]	; 0x2c
 80169fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169fc:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8016a00:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8016a04:	481e      	ldr	r0, [pc, #120]	; (8016a80 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4d0>)
 8016a06:	e9cd 5904 	strd	r5, r9, [sp, #16]
 8016a0a:	e9cd 6700 	strd	r6, r7, [sp]
 8016a0e:	f7f6 fdd5 	bl	800d5bc <LOGGER_Print>
 8016a12:	f7f6 fdcb 	bl	800d5ac <LOGGER_PrintNL>
 8016a16:	f7f6 fde9 	bl	800d5ec <LOGGER_EndSection>
 8016a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a1c:	f083 0001 	eor.w	r0, r3, #1
 8016a20:	b2c0      	uxtb	r0, r0
 8016a22:	e793      	b.n	801694c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x39c>
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d09a      	beq.n	801695e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	9322      	str	r3, [sp, #136]	; 0x88
 8016a2c:	4b10      	ldr	r3, [pc, #64]	; (8016a70 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c0>)
 8016a2e:	4a15      	ldr	r2, [pc, #84]	; (8016a84 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4d4>)
 8016a30:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
 8016a34:	4619      	mov	r1, r3
 8016a36:	2001      	movs	r0, #1
 8016a38:	9323      	str	r3, [sp, #140]	; 0x8c
 8016a3a:	f7f6 fdf7 	bl	800d62c <LOGGER_PrintLine>
 8016a3e:	f7f9 fc7f 	bl	8010340 <2fba4ddec868eb31998278adcb690f685bb9d2cf>
 8016a42:	e78c      	b.n	801695e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 8016a44:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8016a48:	a818      	add	r0, sp, #96	; 0x60
 8016a4a:	f7f1 fe03 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 8016a4e:	f8db 3000 	ldr.w	r3, [fp]
 8016a52:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8016a56:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8016a5a:	f8b3 b30c 	ldrh.w	fp, [r3, #780]	; 0x30c
 8016a5e:	f000 fc0d 	bl	801727c <dc0ee848a3d94ab51a590cd57f74390ab215fb95>
 8016a62:	ebab 0b05 	sub.w	fp, fp, r5
 8016a66:	4583      	cmp	fp, r0
 8016a68:	f4bf af0f 	bcs.w	801688a <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 8016a6c:	e663      	b.n	8016736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8016a6e:	bf00      	nop
 8016a70:	0801d34f 	.word	0x0801d34f
 8016a74:	0801d51f 	.word	0x0801d51f
 8016a78:	0801d539 	.word	0x0801d539
 8016a7c:	20000034 	.word	0x20000034
 8016a80:	0801d55d 	.word	0x0801d55d
 8016a84:	0801d609 	.word	0x0801d609

08016a88 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>:
 8016a88:	b530      	push	{r4, r5, lr}
 8016a8a:	4b0f      	ldr	r3, [pc, #60]	; (8016ac8 <15dfb4a8f71a3c92937ea9475d964fb266f362bf+0x40>)
 8016a8c:	b085      	sub	sp, #20
 8016a8e:	681c      	ldr	r4, [r3, #0]
 8016a90:	2100      	movs	r1, #0
 8016a92:	f10d 0007 	add.w	r0, sp, #7
 8016a96:	f504 751c 	add.w	r5, r4, #624	; 0x270
 8016a9a:	f7f2 f885 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8016a9e:	b138      	cbz	r0, 8016ab0 <15dfb4a8f71a3c92937ea9475d964fb266f362bf+0x28>
 8016aa0:	a802      	add	r0, sp, #8
 8016aa2:	f7f9 fbe3 	bl	801026c <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8016aa6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016aaa:	a902      	add	r1, sp, #8
 8016aac:	f7f1 fec2 	bl	8008834 <027deecf67887395ef5db16208d3312ee727e45e>
 8016ab0:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 8016ab4:	f7f3 feea 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8016ab8:	2301      	movs	r3, #1
 8016aba:	f884 32f0 	strb.w	r3, [r4, #752]	; 0x2f0
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f7ff fd76 	bl	80165b0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0>
 8016ac4:	b005      	add	sp, #20
 8016ac6:	bd30      	pop	{r4, r5, pc}
 8016ac8:	20000034 	.word	0x20000034

08016acc <515d4494213ab78813ec2d283c3e06e54664cad2>:
 8016acc:	b530      	push	{r4, r5, lr}
 8016ace:	4b0c      	ldr	r3, [pc, #48]	; (8016b00 <515d4494213ab78813ec2d283c3e06e54664cad2+0x34>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8016ad8:	f100 0110 	add.w	r1, r0, #16
 8016adc:	f852 5b04 	ldr.w	r5, [r2], #4
 8016ae0:	f844 5b04 	str.w	r5, [r4], #4
 8016ae4:	428a      	cmp	r2, r1
 8016ae6:	d1f9      	bne.n	8016adc <515d4494213ab78813ec2d283c3e06e54664cad2+0x10>
 8016ae8:	f203 22d5 	addw	r2, r3, #725	; 0x2d5
 8016aec:	f850 4b04 	ldr.w	r4, [r0], #4
 8016af0:	f842 4b04 	str.w	r4, [r2], #4
 8016af4:	4288      	cmp	r0, r1
 8016af6:	d1f9      	bne.n	8016aec <515d4494213ab78813ec2d283c3e06e54664cad2+0x20>
 8016af8:	2201      	movs	r2, #1
 8016afa:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8016afe:	bd30      	pop	{r4, r5, pc}
 8016b00:	20000034 	.word	0x20000034

08016b04 <f5d01873bc96944b472aa031c0b65a87221c5869>:
 8016b04:	b510      	push	{r4, lr}
 8016b06:	4b12      	ldr	r3, [pc, #72]	; (8016b50 <f5d01873bc96944b472aa031c0b65a87221c5869+0x4c>)
 8016b08:	681c      	ldr	r4, [r3, #0]
 8016b0a:	f7ff ffdf 	bl	8016acc <515d4494213ab78813ec2d283c3e06e54664cad2>
 8016b0e:	2005      	movs	r0, #5
 8016b10:	f7f1 fc30 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016b14:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8016b18:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8016b1c:	f8d0 3005 	ldr.w	r3, [r0, #5]
 8016b20:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 8016b24:	2002      	movs	r0, #2
 8016b26:	f7f1 fc25 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016b2a:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8016b2e:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
 8016b32:	f8d0 3005 	ldr.w	r3, [r0, #5]
 8016b36:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8016b3a:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 8016b3e:	f7f3 fea5 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8016b42:	f000 fb35 	bl	80171b0 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 8016b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b4a:	f7fe bed5 	b.w	80158f8 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8016b4e:	bf00      	nop
 8016b50:	20000034 	.word	0x20000034

08016b54 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68>:
 8016b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b58:	4fae      	ldr	r7, [pc, #696]	; (8016e14 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c0>)
 8016b5a:	6843      	ldr	r3, [r0, #4]
 8016b5c:	f8d7 8000 	ldr.w	r8, [r7]
 8016b60:	2573      	movs	r5, #115	; 0x73
 8016b62:	7045      	strb	r5, [r0, #1]
 8016b64:	785e      	ldrb	r6, [r3, #1]
 8016b66:	b093      	sub	sp, #76	; 0x4c
 8016b68:	2104      	movs	r1, #4
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	f001 f99e 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8016b70:	2e03      	cmp	r6, #3
 8016b72:	f200 81c9 	bhi.w	8016f08 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3b4>
 8016b76:	e8df f016 	tbh	[pc, r6, lsl #1]
 8016b7a:	0004      	.short	0x0004
 8016b7c:	00d9000e 	.word	0x00d9000e
 8016b80:	015b      	.short	0x015b
 8016b82:	f508 701c 	add.w	r0, r8, #624	; 0x270
 8016b86:	f7fe fee3 	bl	8015950 <cef630f5a74a35314667ebee3f885b52bc89b138>
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	b013      	add	sp, #76	; 0x4c
 8016b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b92:	f7f2 bfd5 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8016b96:	f7f1 fbdf 	bl	8008358 <cb03b4776ba370511f18aa83227a6716bbc89321>
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	d1f5      	bne.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016b9e:	f8d7 9000 	ldr.w	r9, [r7]
 8016ba2:	2351      	movs	r3, #81	; 0x51
 8016ba4:	7063      	strb	r3, [r4, #1]
 8016ba6:	6863      	ldr	r3, [r4, #4]
 8016ba8:	f509 7a1c 	add.w	sl, r9, #624	; 0x270
 8016bac:	4652      	mov	r2, sl
 8016bae:	f103 0118 	add.w	r1, r3, #24
 8016bb2:	f853 0b04 	ldr.w	r0, [r3], #4
 8016bb6:	f842 0b04 	str.w	r0, [r2], #4
 8016bba:	428b      	cmp	r3, r1
 8016bbc:	d1f9      	bne.n	8016bb2 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x5e>
 8016bbe:	6860      	ldr	r0, [r4, #4]
 8016bc0:	3008      	adds	r0, #8
 8016bc2:	f7ff ff83 	bl	8016acc <515d4494213ab78813ec2d283c3e06e54664cad2>
 8016bc6:	7a26      	ldrb	r6, [r4, #8]
 8016bc8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016bcc:	3e18      	subs	r6, #24
 8016bce:	f108 0518 	add.w	r5, r8, #24
 8016bd2:	b2f6      	uxtb	r6, r6
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
 8016bda:	f509 7322 	add.w	r3, r9, #648	; 0x288
 8016bde:	2e00      	cmp	r6, #0
 8016be0:	d14a      	bne.n	8016c78 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x124>
 8016be2:	6863      	ldr	r3, [r4, #4]
 8016be4:	9203      	str	r2, [sp, #12]
 8016be6:	885b      	ldrh	r3, [r3, #2]
 8016be8:	ba5b      	rev16	r3, r3
 8016bea:	f8a8 3002 	strh.w	r3, [r8, #2]
 8016bee:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8016bf2:	f8a9 3272 	strh.w	r3, [r9, #626]	; 0x272
 8016bf6:	a808      	add	r0, sp, #32
 8016bf8:	f7f2 fbda 	bl	80093b0 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8016bfc:	9a03      	ldr	r2, [sp, #12]
 8016bfe:	2a00      	cmp	r2, #0
 8016c00:	f000 808c 	beq.w	8016d1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8016c04:	f10d 0117 	add.w	r1, sp, #23
 8016c08:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8016c0c:	f7f2 f9d6 	bl	8008fbc <52a2c697077f87280125159eda12d46a7578d4b9>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	f000 8083 	beq.w	8016d1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8016c16:	2210      	movs	r2, #16
 8016c18:	4631      	mov	r1, r6
 8016c1a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
 8016c1e:	f002 f9af 	bl	8018f80 <memset>
 8016c22:	2302      	movs	r3, #2
 8016c24:	f10d 0135 	add.w	r1, sp, #53	; 0x35
 8016c28:	4630      	mov	r0, r6
 8016c2a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8016c2e:	f7f1 ffbb 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8016c32:	a90d      	add	r1, sp, #52	; 0x34
 8016c34:	a808      	add	r0, sp, #32
 8016c36:	f7f2 fb49 	bl	80092cc <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8016c3a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	d06f      	beq.n	8016d22 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1ce>
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8016c48:	428b      	cmp	r3, r1
 8016c4a:	d26a      	bcs.n	8016d22 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1ce>
 8016c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c50:	4299      	cmp	r1, r3
 8016c52:	d15a      	bne.n	8016d0a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1b6>
 8016c54:	2304      	movs	r3, #4
 8016c56:	9306      	str	r3, [sp, #24]
 8016c58:	4b6f      	ldr	r3, [pc, #444]	; (8016e18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8016c5a:	4a70      	ldr	r2, [pc, #448]	; (8016e1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c8>)
 8016c5c:	9307      	str	r3, [sp, #28]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	2004      	movs	r0, #4
 8016c62:	f7f6 fce3 	bl	800d62c <LOGGER_PrintLine>
 8016c66:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8016c6a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8016c6e:	f7f1 fcd7 	bl	8008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8016c72:	f7ff ff09 	bl	8016a88 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>
 8016c76:	e788      	b.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016c78:	7829      	ldrb	r1, [r5, #0]
 8016c7a:	3e02      	subs	r6, #2
 8016c7c:	2904      	cmp	r1, #4
 8016c7e:	b2f6      	uxtb	r6, r6
 8016c80:	d007      	beq.n	8016c92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x13e>
 8016c82:	2908      	cmp	r1, #8
 8016c84:	d01c      	beq.n	8016cc0 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x16c>
 8016c86:	7869      	ldrb	r1, [r5, #1]
 8016c88:	1a76      	subs	r6, r6, r1
 8016c8a:	3102      	adds	r1, #2
 8016c8c:	b2f6      	uxtb	r6, r6
 8016c8e:	440d      	add	r5, r1
 8016c90:	e7a5      	b.n	8016bde <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x8a>
 8016c92:	88e9      	ldrh	r1, [r5, #6]
 8016c94:	ba49      	rev16	r1, r1
 8016c96:	80e9      	strh	r1, [r5, #6]
 8016c98:	8929      	ldrh	r1, [r5, #8]
 8016c9a:	ba49      	rev16	r1, r1
 8016c9c:	8129      	strh	r1, [r5, #8]
 8016c9e:	8969      	ldrh	r1, [r5, #10]
 8016ca0:	ba49      	rev16	r1, r1
 8016ca2:	8169      	strh	r1, [r5, #10]
 8016ca4:	89e9      	ldrh	r1, [r5, #14]
 8016ca6:	ba49      	rev16	r1, r1
 8016ca8:	81e9      	strh	r1, [r5, #14]
 8016caa:	4658      	mov	r0, fp
 8016cac:	4629      	mov	r1, r5
 8016cae:	f105 0c10 	add.w	ip, r5, #16
 8016cb2:	f851 eb04 	ldr.w	lr, [r1], #4
 8016cb6:	f840 eb04 	str.w	lr, [r0], #4
 8016cba:	4561      	cmp	r1, ip
 8016cbc:	d1f9      	bne.n	8016cb2 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x15e>
 8016cbe:	e7e2      	b.n	8016c86 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x132>
 8016cc0:	462a      	mov	r2, r5
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	f105 0020 	add.w	r0, r5, #32
 8016cc8:	f852 cb04 	ldr.w	ip, [r2], #4
 8016ccc:	f841 cb04 	str.w	ip, [r1], #4
 8016cd0:	4282      	cmp	r2, r0
 8016cd2:	d1f9      	bne.n	8016cc8 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x174>
 8016cd4:	2100      	movs	r1, #0
 8016cd6:	2210      	movs	r2, #16
 8016cd8:	f10d 0035 	add.w	r0, sp, #53	; 0x35
 8016cdc:	9303      	str	r3, [sp, #12]
 8016cde:	f002 f94f 	bl	8018f80 <memset>
 8016ce2:	2205      	movs	r2, #5
 8016ce4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8016ce8:	692a      	ldr	r2, [r5, #16]
 8016cea:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8016cee:	696a      	ldr	r2, [r5, #20]
 8016cf0:	f8cd 2039 	str.w	r2, [sp, #57]	; 0x39
 8016cf4:	a80d      	add	r0, sp, #52	; 0x34
 8016cf6:	f7f1 fb5f 	bl	80083b8 <00481873317fdef387db1bb310377b408b8e47be>
 8016cfa:	786a      	ldrb	r2, [r5, #1]
 8016cfc:	9b03      	ldr	r3, [sp, #12]
 8016cfe:	1ab6      	subs	r6, r6, r2
 8016d00:	1c91      	adds	r1, r2, #2
 8016d02:	b2f6      	uxtb	r6, r6
 8016d04:	462a      	mov	r2, r5
 8016d06:	440d      	add	r5, r1
 8016d08:	e769      	b.n	8016bde <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x8a>
 8016d0a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8016d0e:	f7f1 fc87 	bl	8008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8016d12:	4843      	ldr	r0, [pc, #268]	; (8016e20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2cc>)
 8016d14:	2204      	movs	r2, #4
 8016d16:	4651      	mov	r1, sl
 8016d18:	f7f4 fcbe 	bl	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8016d1c:	f7ff fabe 	bl	801629c <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>
 8016d20:	e733      	b.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016d22:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8016d26:	f7f1 fc7b 	bl	8008620 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8016d2a:	e7f7      	b.n	8016d1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8016d2c:	683a      	ldr	r2, [r7, #0]
 8016d2e:	6863      	ldr	r3, [r4, #4]
 8016d30:	7065      	strb	r5, [r4, #1]
 8016d32:	7819      	ldrb	r1, [r3, #0]
 8016d34:	f892 22d1 	ldrb.w	r2, [r2, #721]	; 0x2d1
 8016d38:	4291      	cmp	r1, r2
 8016d3a:	d009      	beq.n	8016d50 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1fc>
 8016d3c:	2305      	movs	r3, #5
 8016d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8016d40:	4b35      	ldr	r3, [pc, #212]	; (8016e18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8016d42:	4a38      	ldr	r2, [pc, #224]	; (8016e24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d0>)
 8016d44:	930e      	str	r3, [sp, #56]	; 0x38
 8016d46:	4619      	mov	r1, r3
 8016d48:	2005      	movs	r0, #5
 8016d4a:	f7f6 fc6f 	bl	800d62c <LOGGER_PrintLine>
 8016d4e:	e71c      	b.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016d50:	1c5a      	adds	r2, r3, #1
 8016d52:	6062      	str	r2, [r4, #4]
 8016d54:	7a22      	ldrb	r2, [r4, #8]
 8016d56:	1e51      	subs	r1, r2, #1
 8016d58:	7221      	strb	r1, [r4, #8]
 8016d5a:	1c98      	adds	r0, r3, #2
 8016d5c:	7859      	ldrb	r1, [r3, #1]
 8016d5e:	6060      	str	r0, [r4, #4]
 8016d60:	1e90      	subs	r0, r2, #2
 8016d62:	7220      	strb	r0, [r4, #8]
 8016d64:	7898      	ldrb	r0, [r3, #2]
 8016d66:	1cdd      	adds	r5, r3, #3
 8016d68:	6065      	str	r5, [r4, #4]
 8016d6a:	1ed5      	subs	r5, r2, #3
 8016d6c:	7225      	strb	r5, [r4, #8]
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	f47f af0b 	bne.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016d74:	78d8      	ldrb	r0, [r3, #3]
 8016d76:	1d1d      	adds	r5, r3, #4
 8016d78:	6065      	str	r5, [r4, #4]
 8016d7a:	1f15      	subs	r5, r2, #4
 8016d7c:	7225      	strb	r5, [r4, #8]
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	f47f af03 	bne.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016d84:	0649      	lsls	r1, r1, #25
 8016d86:	bf41      	itttt	mi
 8016d88:	3314      	addmi	r3, #20
 8016d8a:	3a14      	submi	r2, #20
 8016d8c:	6063      	strmi	r3, [r4, #4]
 8016d8e:	7222      	strbmi	r2, [r4, #8]
 8016d90:	2600      	movs	r6, #0
 8016d92:	7a23      	ldrb	r3, [r4, #8]
 8016d94:	b973      	cbnz	r3, 8016db4 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x260>
 8016d96:	2e00      	cmp	r6, #0
 8016d98:	f43f aef7 	beq.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016d9c:	2305      	movs	r3, #5
 8016d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8016da0:	4b1d      	ldr	r3, [pc, #116]	; (8016e18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8016da2:	4a21      	ldr	r2, [pc, #132]	; (8016e28 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d4>)
 8016da4:	930e      	str	r3, [sp, #56]	; 0x38
 8016da6:	4619      	mov	r1, r3
 8016da8:	2005      	movs	r0, #5
 8016daa:	f7f6 fc3f 	bl	800d62c <LOGGER_PrintLine>
 8016dae:	f7ff fbc0 	bl	8016532 <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e>
 8016db2:	e6ea      	b.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016db4:	6863      	ldr	r3, [r4, #4]
 8016db6:	681d      	ldr	r5, [r3, #0]
 8016db8:	2104      	movs	r1, #4
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f001 f876 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8016dc0:	b2eb      	uxtb	r3, r5
 8016dc2:	2b05      	cmp	r3, #5
 8016dc4:	f47f aee1 	bne.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016dc8:	0eed      	lsrs	r5, r5, #27
 8016dca:	2d02      	cmp	r5, #2
 8016dcc:	d11a      	bne.n	8016e04 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2b0>
 8016dce:	6863      	ldr	r3, [r4, #4]
 8016dd0:	a808      	add	r0, sp, #32
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016dd8:	f000 f934 	bl	8017044 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2>
 8016ddc:	b928      	cbnz	r0, 8016dea <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x296>
 8016dde:	a808      	add	r0, sp, #32
 8016de0:	f000 f8e2 	bl	8016fa8 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	bf08      	it	eq
 8016de8:	2601      	moveq	r6, #1
 8016dea:	a808      	add	r0, sp, #32
 8016dec:	f000 f8fa 	bl	8016fe4 <725c72049a2e0b342530ba14f6642cfd9100dd16>
 8016df0:	b940      	cbnz	r0, 8016e04 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2b0>
 8016df2:	2303      	movs	r3, #3
 8016df4:	930d      	str	r3, [sp, #52]	; 0x34
 8016df6:	4b08      	ldr	r3, [pc, #32]	; (8016e18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8016df8:	4a0c      	ldr	r2, [pc, #48]	; (8016e2c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d8>)
 8016dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	2003      	movs	r0, #3
 8016e00:	f7f6 fc14 	bl	800d62c <LOGGER_PrintLine>
 8016e04:	6863      	ldr	r3, [r4, #4]
 8016e06:	442b      	add	r3, r5
 8016e08:	6063      	str	r3, [r4, #4]
 8016e0a:	7a23      	ldrb	r3, [r4, #8]
 8016e0c:	1b5b      	subs	r3, r3, r5
 8016e0e:	7223      	strb	r3, [r4, #8]
 8016e10:	e7bf      	b.n	8016d92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x23e>
 8016e12:	bf00      	nop
 8016e14:	20000034 	.word	0x20000034
 8016e18:	0801d34f 	.word	0x0801d34f
 8016e1c:	0801d638 	.word	0x0801d638
 8016e20:	08015951 	.word	0x08015951
 8016e24:	0801d656 	.word	0x0801d656
 8016e28:	0801d688 	.word	0x0801d688
 8016e2c:	0801d66c 	.word	0x0801d66c
 8016e30:	a908      	add	r1, sp, #32
 8016e32:	2000      	movs	r0, #0
 8016e34:	683d      	ldr	r5, [r7, #0]
 8016e36:	f7f1 feb7 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	f43f aea5 	beq.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016e40:	2208      	movs	r2, #8
 8016e42:	a908      	add	r1, sp, #32
 8016e44:	a806      	add	r0, sp, #24
 8016e46:	f7fe fd4d 	bl	80158e4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8016e4a:	2373      	movs	r3, #115	; 0x73
 8016e4c:	7063      	strb	r3, [r4, #1]
 8016e4e:	6863      	ldr	r3, [r4, #4]
 8016e50:	f895 22d1 	ldrb.w	r2, [r5, #721]	; 0x2d1
 8016e54:	7819      	ldrb	r1, [r3, #0]
 8016e56:	4291      	cmp	r1, r2
 8016e58:	f47f af70 	bne.w	8016d3c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1e8>
 8016e5c:	7a22      	ldrb	r2, [r4, #8]
 8016e5e:	1c99      	adds	r1, r3, #2
 8016e60:	6061      	str	r1, [r4, #4]
 8016e62:	1e91      	subs	r1, r2, #2
 8016e64:	7221      	strb	r1, [r4, #8]
 8016e66:	1cd9      	adds	r1, r3, #3
 8016e68:	7898      	ldrb	r0, [r3, #2]
 8016e6a:	6061      	str	r1, [r4, #4]
 8016e6c:	1ed1      	subs	r1, r2, #3
 8016e6e:	7221      	strb	r1, [r4, #8]
 8016e70:	f895 12d4 	ldrb.w	r1, [r5, #724]	; 0x2d4
 8016e74:	1a09      	subs	r1, r1, r0
 8016e76:	b2c9      	uxtb	r1, r1
 8016e78:	2902      	cmp	r1, #2
 8016e7a:	d907      	bls.n	8016e8c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x338>
 8016e7c:	2303      	movs	r3, #3
 8016e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8016e80:	4a24      	ldr	r2, [pc, #144]	; (8016f14 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c0>)
 8016e82:	4b25      	ldr	r3, [pc, #148]	; (8016f18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8016e84:	930e      	str	r3, [sp, #56]	; 0x38
 8016e86:	4619      	mov	r1, r3
 8016e88:	2003      	movs	r0, #3
 8016e8a:	e75e      	b.n	8016d4a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1f6>
 8016e8c:	78d9      	ldrb	r1, [r3, #3]
 8016e8e:	3a04      	subs	r2, #4
 8016e90:	3304      	adds	r3, #4
 8016e92:	6063      	str	r3, [r4, #4]
 8016e94:	7222      	strb	r2, [r4, #8]
 8016e96:	b129      	cbz	r1, 8016ea4 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x350>
 8016e98:	2303      	movs	r3, #3
 8016e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8016e9c:	4b1e      	ldr	r3, [pc, #120]	; (8016f18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8016e9e:	4a1f      	ldr	r2, [pc, #124]	; (8016f1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c8>)
 8016ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8016ea2:	e7f0      	b.n	8016e86 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x332>
 8016ea4:	f895 32f3 	ldrb.w	r3, [r5, #755]	; 0x2f3
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f43f ae6e 	beq.w	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016eae:	f895 32ef 	ldrb.w	r3, [r5, #751]	; 0x2ef
 8016eb2:	f885 12f3 	strb.w	r1, [r5, #755]	; 0x2f3
 8016eb6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8016eba:	b943      	cbnz	r3, 8016ece <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x37a>
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	f885 32ef 	strb.w	r3, [r5, #751]	; 0x2ef
 8016ec2:	f000 fccb 	bl	801785c <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	4639      	mov	r1, r7
 8016eca:	f000 fd8f 	bl	80179ec <b374fd28973c520694c78fab59b4df07772e0870>
 8016ece:	2302      	movs	r3, #2
 8016ed0:	f885 32f2 	strb.w	r3, [r5, #754]	; 0x2f2
 8016ed4:	f895 32f1 	ldrb.w	r3, [r5, #753]	; 0x2f1
 8016ed8:	b943      	cbnz	r3, 8016eec <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x398>
 8016eda:	2301      	movs	r3, #1
 8016edc:	4810      	ldr	r0, [pc, #64]	; (8016f20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3cc>)
 8016ede:	f885 32f1 	strb.w	r3, [r5, #753]	; 0x2f1
 8016ee2:	2204      	movs	r2, #4
 8016ee4:	f505 711c 	add.w	r1, r5, #624	; 0x270
 8016ee8:	f7f4 fbd6 	bl	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8016eec:	f7fe fdd8 	bl	8015aa0 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>
 8016ef0:	2305      	movs	r3, #5
 8016ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8016ef4:	4b08      	ldr	r3, [pc, #32]	; (8016f18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8016ef6:	4a0b      	ldr	r2, [pc, #44]	; (8016f24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3d0>)
 8016ef8:	930e      	str	r3, [sp, #56]	; 0x38
 8016efa:	e9cd 6700 	strd	r6, r7, [sp]
 8016efe:	4619      	mov	r1, r3
 8016f00:	2005      	movs	r0, #5
 8016f02:	f7f6 fb93 	bl	800d62c <LOGGER_PrintLine>
 8016f06:	e640      	b.n	8016b8a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8016f08:	2303      	movs	r3, #3
 8016f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8016f0c:	4b02      	ldr	r3, [pc, #8]	; (8016f18 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8016f0e:	4a06      	ldr	r2, [pc, #24]	; (8016f28 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3d4>)
 8016f10:	930e      	str	r3, [sp, #56]	; 0x38
 8016f12:	e7b8      	b.n	8016e86 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x332>
 8016f14:	0801d6bb 	.word	0x0801d6bb
 8016f18:	0801d34f 	.word	0x0801d34f
 8016f1c:	0801d6d5 	.word	0x0801d6d5
 8016f20:	08015951 	.word	0x08015951
 8016f24:	0801d6ee 	.word	0x0801d6ee
 8016f28:	0801d71f 	.word	0x0801d71f

08016f2c <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>:
 8016f2c:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8016f30:	89c3      	ldrh	r3, [r0, #14]
 8016f32:	b113      	cbz	r3, 8016f3a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xe>
 8016f34:	7c03      	ldrb	r3, [r0, #16]
 8016f36:	b923      	cbnz	r3, 8016f42 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x16>
 8016f38:	81c3      	strh	r3, [r0, #14]
 8016f3a:	3004      	adds	r0, #4
 8016f3c:	4290      	cmp	r0, r2
 8016f3e:	d1f7      	bne.n	8016f30 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4>
 8016f40:	4770      	bx	lr
 8016f42:	3b01      	subs	r3, #1
 8016f44:	7403      	strb	r3, [r0, #16]
 8016f46:	e7f8      	b.n	8016f3a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xe>

08016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 8016f48:	780b      	ldrb	r3, [r1, #0]
 8016f4a:	7043      	strb	r3, [r0, #1]
 8016f4c:	784b      	ldrb	r3, [r1, #1]
 8016f4e:	7003      	strb	r3, [r0, #0]
 8016f50:	4770      	bx	lr
	...

08016f54 <082eefb804d1e0ed7226bf17620f026c0888c274>:
 8016f54:	b510      	push	{r4, lr}
 8016f56:	4b04      	ldr	r3, [pc, #16]	; (8016f68 <082eefb804d1e0ed7226bf17620f026c0888c274+0x14>)
 8016f58:	2001      	movs	r0, #1
 8016f5a:	681c      	ldr	r4, [r3, #0]
 8016f5c:	f7f3 fb74 	bl	800a648 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8016f60:	f884 0ad2 	strb.w	r0, [r4, #2770]	; 0xad2
 8016f64:	bd10      	pop	{r4, pc}
 8016f66:	bf00      	nop
 8016f68:	20000034 	.word	0x20000034

08016f6c <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c>:
 8016f6c:	b507      	push	{r0, r1, r2, lr}
 8016f6e:	4b07      	ldr	r3, [pc, #28]	; (8016f8c <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x20>)
 8016f70:	4a07      	ldr	r2, [pc, #28]	; (8016f90 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x24>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f893 0ad2 	ldrb.w	r0, [r3, #2770]	; 0xad2
 8016f78:	f603 23d2 	addw	r3, r3, #2770	; 0xad2
 8016f7c:	9300      	str	r3, [sp, #0]
 8016f7e:	2100      	movs	r1, #0
 8016f80:	4b04      	ldr	r3, [pc, #16]	; (8016f94 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x28>)
 8016f82:	f7f3 fc71 	bl	800a868 <a146aa5c27211710221f7063067066079d66a071>
 8016f86:	b003      	add	sp, #12
 8016f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f8c:	20000034 	.word	0x20000034
 8016f90:	d693a400 	.word	0xd693a400
 8016f94:	08016f2d 	.word	0x08016f2d

08016f98 <7c27c3f80cc08068333c14ac1b724ab469f4969f>:
 8016f98:	4b02      	ldr	r3, [pc, #8]	; (8016fa4 <7c27c3f80cc08068333c14ac1b724ab469f4969f+0xc>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f893 0ad2 	ldrb.w	r0, [r3, #2770]	; 0xad2
 8016fa0:	f7f3 bc74 	b.w	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8016fa4:	20000034 	.word	0x20000034

08016fa8 <29fa8ed2960e61836c5411711158d1cb9cd67052>:
 8016fa8:	b507      	push	{r0, r1, r2, lr}
 8016faa:	4b0d      	ldr	r3, [pc, #52]	; (8016fe0 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x38>)
 8016fac:	4601      	mov	r1, r0
 8016fae:	f10d 0006 	add.w	r0, sp, #6
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	f7ff ffc8 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8016fb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016fbc:	b150      	cbz	r0, 8016fd4 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x2c>
 8016fbe:	f602 23d2 	addw	r3, r2, #2770	; 0xad2
 8016fc2:	f602 22de 	addw	r2, r2, #2782	; 0xade
 8016fc6:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8016fca:	4281      	cmp	r1, r0
 8016fcc:	d005      	beq.n	8016fda <29fa8ed2960e61836c5411711158d1cb9cd67052+0x32>
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	d1f9      	bne.n	8016fc6 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x1e>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	b003      	add	sp, #12
 8016fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fda:	2001      	movs	r0, #1
 8016fdc:	e7fa      	b.n	8016fd4 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x2c>
 8016fde:	bf00      	nop
 8016fe0:	20000034 	.word	0x20000034

08016fe4 <725c72049a2e0b342530ba14f6642cfd9100dd16>:
 8016fe4:	b513      	push	{r0, r1, r4, lr}
 8016fe6:	4b16      	ldr	r3, [pc, #88]	; (8017040 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x5c>)
 8016fe8:	4601      	mov	r1, r0
 8016fea:	f10d 0006 	add.w	r0, sp, #6
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	f7ff ffaa 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8016ff4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016ff8:	b160      	cbz	r0, 8017014 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x30>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	f502 612e 	add.w	r1, r2, #2784	; 0xae0
 8017000:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 8017004:	4284      	cmp	r4, r0
 8017006:	d107      	bne.n	8017018 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x34>
 8017008:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801700c:	2305      	movs	r3, #5
 801700e:	f882 3ae2 	strb.w	r3, [r2, #2786]	; 0xae2
 8017012:	2001      	movs	r0, #1
 8017014:	b002      	add	sp, #8
 8017016:	bd10      	pop	{r4, pc}
 8017018:	3301      	adds	r3, #1
 801701a:	2b0a      	cmp	r3, #10
 801701c:	d1f0      	bne.n	8017000 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x1c>
 801701e:	2300      	movs	r3, #0
 8017020:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 8017024:	b93c      	cbnz	r4, 8017036 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x52>
 8017026:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801702a:	2305      	movs	r3, #5
 801702c:	f882 3ae2 	strb.w	r3, [r2, #2786]	; 0xae2
 8017030:	f8a2 0ae0 	strh.w	r0, [r2, #2784]	; 0xae0
 8017034:	e7ed      	b.n	8017012 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x2e>
 8017036:	3301      	adds	r3, #1
 8017038:	2b0a      	cmp	r3, #10
 801703a:	d1f1      	bne.n	8017020 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x3c>
 801703c:	2000      	movs	r0, #0
 801703e:	e7e9      	b.n	8017014 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x30>
 8017040:	20000034 	.word	0x20000034

08017044 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2>:
 8017044:	b507      	push	{r0, r1, r2, lr}
 8017046:	4b0c      	ldr	r3, [pc, #48]	; (8017078 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x34>)
 8017048:	4601      	mov	r1, r0
 801704a:	f10d 0006 	add.w	r0, sp, #6
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	f7ff ff7a 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8017054:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017058:	b148      	cbz	r0, 801706e <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x2a>
 801705a:	4613      	mov	r3, r2
 801705c:	3228      	adds	r2, #40	; 0x28
 801705e:	f8b3 1ae0 	ldrh.w	r1, [r3, #2784]	; 0xae0
 8017062:	4281      	cmp	r1, r0
 8017064:	d006      	beq.n	8017074 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x30>
 8017066:	3304      	adds	r3, #4
 8017068:	4293      	cmp	r3, r2
 801706a:	d1f8      	bne.n	801705e <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x1a>
 801706c:	2000      	movs	r0, #0
 801706e:	b003      	add	sp, #12
 8017070:	f85d fb04 	ldr.w	pc, [sp], #4
 8017074:	2001      	movs	r0, #1
 8017076:	e7fa      	b.n	801706e <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x2a>
 8017078:	20000034 	.word	0x20000034

0801707c <84780c9f08e19cea1884da40f03f0c5650f281d0>:
 801707c:	4b06      	ldr	r3, [pc, #24]	; (8017098 <84780c9f08e19cea1884da40f03f0c5650f281d0+0x1c>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2000      	movs	r0, #0
 8017082:	f603 22d2 	addw	r2, r3, #2770	; 0xad2
 8017086:	f603 23de 	addw	r3, r3, #2782	; 0xade
 801708a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 801708e:	b101      	cbz	r1, 8017092 <84780c9f08e19cea1884da40f03f0c5650f281d0+0x16>
 8017090:	3001      	adds	r0, #1
 8017092:	429a      	cmp	r2, r3
 8017094:	d1f9      	bne.n	801708a <84780c9f08e19cea1884da40f03f0c5650f281d0+0xe>
 8017096:	4770      	bx	lr
 8017098:	20000034 	.word	0x20000034

0801709c <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	4b0d      	ldr	r3, [pc, #52]	; (80170d4 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x38>)
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	2300      	movs	r3, #0
 80170a4:	f602 22d2 	addw	r2, r2, #2770	; 0xad2
 80170a8:	4605      	mov	r5, r0
 80170aa:	461c      	mov	r4, r3
 80170ac:	4608      	mov	r0, r1
 80170ae:	4611      	mov	r1, r2
 80170b0:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 80170b4:	3301      	adds	r3, #1
 80170b6:	b146      	cbz	r6, 80170ca <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2e>
 80170b8:	42a5      	cmp	r5, r4
 80170ba:	d105      	bne.n	80170c8 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2c>
 80170bc:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80170c0:	f7ff ff42 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 80170c4:	2001      	movs	r0, #1
 80170c6:	bd70      	pop	{r4, r5, r6, pc}
 80170c8:	3401      	adds	r4, #1
 80170ca:	2b06      	cmp	r3, #6
 80170cc:	d1f0      	bne.n	80170b0 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x14>
 80170ce:	2000      	movs	r0, #0
 80170d0:	e7f9      	b.n	80170c6 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2a>
 80170d2:	bf00      	nop
 80170d4:	20000034 	.word	0x20000034

080170d8 <bdffef4226ee0110f60b8de23959aef3caa4ba4a>:
 80170d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170da:	4b10      	ldr	r3, [pc, #64]	; (801711c <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x44>)
 80170dc:	681e      	ldr	r6, [r3, #0]
 80170de:	2400      	movs	r4, #0
 80170e0:	f606 23d2 	addw	r3, r6, #2770	; 0xad2
 80170e4:	f606 22de 	addw	r2, r6, #2782	; 0xade
 80170e8:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 80170ec:	b101      	cbz	r1, 80170f0 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x18>
 80170ee:	3401      	adds	r4, #1
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d1f9      	bne.n	80170e8 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x10>
 80170f4:	f44f 652e 	mov.w	r5, #2784	; 0xae0
 80170f8:	f640 3708 	movw	r7, #2824	; 0xb08
 80170fc:	5b73      	ldrh	r3, [r6, r5]
 80170fe:	b13b      	cbz	r3, 8017110 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x38>
 8017100:	1971      	adds	r1, r6, r5
 8017102:	a801      	add	r0, sp, #4
 8017104:	f7ff ff20 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8017108:	f7ff ff4e 	bl	8016fa8 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 801710c:	b900      	cbnz	r0, 8017110 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x38>
 801710e:	3401      	adds	r4, #1
 8017110:	3504      	adds	r5, #4
 8017112:	42bd      	cmp	r5, r7
 8017114:	d1f2      	bne.n	80170fc <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x24>
 8017116:	4620      	mov	r0, r4
 8017118:	b003      	add	sp, #12
 801711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801711c:	20000034 	.word	0x20000034

08017120 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac>:
 8017120:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017124:	4b1a      	ldr	r3, [pc, #104]	; (8017190 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x70>)
 8017126:	f8d3 8000 	ldr.w	r8, [r3]
 801712a:	460f      	mov	r7, r1
 801712c:	2300      	movs	r3, #0
 801712e:	f608 21d2 	addw	r1, r8, #2770	; 0xad2
 8017132:	4606      	mov	r6, r0
 8017134:	460a      	mov	r2, r1
 8017136:	461c      	mov	r4, r3
 8017138:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801713c:	3301      	adds	r3, #1
 801713e:	b158      	cbz	r0, 8017158 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x38>
 8017140:	42a6      	cmp	r6, r4
 8017142:	d108      	bne.n	8017156 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x36>
 8017144:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8017148:	4638      	mov	r0, r7
 801714a:	f7ff fefd 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801714e:	2001      	movs	r0, #1
 8017150:	b002      	add	sp, #8
 8017152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017156:	3401      	adds	r4, #1
 8017158:	2b06      	cmp	r3, #6
 801715a:	d1ed      	bne.n	8017138 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x18>
 801715c:	f44f 652e 	mov.w	r5, #2784	; 0xae0
 8017160:	f640 3a08 	movw	sl, #2824	; 0xb08
 8017164:	f838 3005 	ldrh.w	r3, [r8, r5]
 8017168:	b16b      	cbz	r3, 8017186 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x66>
 801716a:	eb08 0905 	add.w	r9, r8, r5
 801716e:	4649      	mov	r1, r9
 8017170:	a801      	add	r0, sp, #4
 8017172:	f7ff fee9 	bl	8016f48 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8017176:	f7ff ff17 	bl	8016fa8 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 801717a:	b920      	cbnz	r0, 8017186 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x66>
 801717c:	42a6      	cmp	r6, r4
 801717e:	d101      	bne.n	8017184 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x64>
 8017180:	4649      	mov	r1, r9
 8017182:	e7e1      	b.n	8017148 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x28>
 8017184:	3401      	adds	r4, #1
 8017186:	3504      	adds	r5, #4
 8017188:	4555      	cmp	r5, sl
 801718a:	d1eb      	bne.n	8017164 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x44>
 801718c:	2000      	movs	r0, #0
 801718e:	e7df      	b.n	8017150 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x30>
 8017190:	20000034 	.word	0x20000034

08017194 <73cd113f0512e09e8865b1dc11046143bbfb5214>:
 8017194:	b508      	push	{r3, lr}
 8017196:	f7ef fafd 	bl	8006794 <EMBENET_RADIO_GetCapabilities>
 801719a:	4b03      	ldr	r3, [pc, #12]	; (80171a8 <73cd113f0512e09e8865b1dc11046143bbfb5214+0x14>)
 801719c:	f990 201c 	ldrsb.w	r2, [r0, #28]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 80171a6:	bd08      	pop	{r3, pc}
 80171a8:	20000034 	.word	0x20000034

080171ac <6607d1a8e0084dff834e59246aa78b5f6da467d9>:
 80171ac:	4770      	bx	lr

080171ae <ac88c013d0ed7f5b742e43c5288111c1f79c1a36>:
 80171ae:	4770      	bx	lr

080171b0 <0a971023c987bf5f21422714f0ff94b4a7c15529>:
 80171b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80171b4:	4770      	bx	lr

080171b6 <7a609a09e67535970a8503dff96b9de207d8fd88>:
 80171b6:	0a00      	lsrs	r0, r0, #8
 80171b8:	4770      	bx	lr
	...

080171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>:
 80171bc:	b570      	push	{r4, r5, r6, lr}
 80171be:	4d25      	ldr	r5, [pc, #148]	; (8017254 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x98>)
 80171c0:	9c04      	ldr	r4, [sp, #16]
 80171c2:	682d      	ldr	r5, [r5, #0]
 80171c4:	2918      	cmp	r1, #24
 80171c6:	d936      	bls.n	8017236 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x7a>
 80171c8:	4291      	cmp	r1, r2
 80171ca:	d332      	bcc.n	8017232 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x76>
 80171cc:	b3aa      	cbz	r2, 801723a <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x7e>
 80171ce:	f44f 7640 	mov.w	r6, #768	; 0x300
 80171d2:	4371      	muls	r1, r6
 80171d4:	fbb1 f1f2 	udiv	r1, r1, r2
 80171d8:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80171dc:	f3c1 0195 	ubfx	r1, r1, #2, #22
 80171e0:	293f      	cmp	r1, #63	; 0x3f
 80171e2:	d92d      	bls.n	8017240 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x84>
 80171e4:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
 80171e8:	bf28      	it	cs
 80171ea:	f44f 71c0 	movcs.w	r1, #384	; 0x180
 80171ee:	f995 2348 	ldrsb.w	r2, [r5, #840]	; 0x348
 80171f2:	4282      	cmp	r2, r0
 80171f4:	dc26      	bgt.n	8017244 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x88>
 80171f6:	f102 050e 	add.w	r5, r2, #14
 80171fa:	4285      	cmp	r5, r0
 80171fc:	db25      	blt.n	801724a <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x8e>
 80171fe:	1a82      	subs	r2, r0, r2
 8017200:	f1c2 020f 	rsb	r2, r2, #15
 8017204:	0392      	lsls	r2, r2, #14
 8017206:	f240 105d 	movw	r0, #349	; 0x15d
 801720a:	fb92 f2f0 	sdiv	r2, r2, r0
 801720e:	3240      	adds	r2, #64	; 0x40
 8017210:	b1ec      	cbz	r4, 801724e <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x92>
 8017212:	42a3      	cmp	r3, r4
 8017214:	bf28      	it	cs
 8017216:	4623      	movcs	r3, r4
 8017218:	f44f 30a0 	mov.w	r0, #81920	; 0x14000
 801721c:	4343      	muls	r3, r0
 801721e:	fbb3 f3f4 	udiv	r3, r3, r4
 8017222:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8017226:	0a1b      	lsrs	r3, r3, #8
 8017228:	3140      	adds	r1, #64	; 0x40
 801722a:	1888      	adds	r0, r1, r2
 801722c:	4418      	add	r0, r3
 801722e:	b280      	uxth	r0, r0
 8017230:	bd70      	pop	{r4, r5, r6, pc}
 8017232:	4611      	mov	r1, r2
 8017234:	e7cb      	b.n	80171ce <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x12>
 8017236:	2180      	movs	r1, #128	; 0x80
 8017238:	e7d4      	b.n	80171e4 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x28>
 801723a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801723e:	e7d1      	b.n	80171e4 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x28>
 8017240:	2140      	movs	r1, #64	; 0x40
 8017242:	e7d4      	b.n	80171ee <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x32>
 8017244:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017248:	e7e2      	b.n	8017210 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x54>
 801724a:	2240      	movs	r2, #64	; 0x40
 801724c:	e7e0      	b.n	8017210 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x54>
 801724e:	2380      	movs	r3, #128	; 0x80
 8017250:	e7ea      	b.n	8017228 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x6c>
 8017252:	bf00      	nop
 8017254:	20000034 	.word	0x20000034

08017258 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d>:
 8017258:	b507      	push	{r0, r1, r2, lr}
 801725a:	4b07      	ldr	r3, [pc, #28]	; (8017278 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d+0x20>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2264      	movs	r2, #100	; 0x64
 8017260:	f993 0348 	ldrsb.w	r0, [r3, #840]	; 0x348
 8017264:	2301      	movs	r3, #1
 8017266:	e9cd 3200 	strd	r3, r2, [sp]
 801726a:	2200      	movs	r2, #0
 801726c:	4611      	mov	r1, r2
 801726e:	f7ff ffa5 	bl	80171bc <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 8017272:	b003      	add	sp, #12
 8017274:	f85d fb04 	ldr.w	pc, [sp], #4
 8017278:	20000034 	.word	0x20000034

0801727c <dc0ee848a3d94ab51a590cd57f74390ab215fb95>:
 801727c:	2825      	cmp	r0, #37	; 0x25
 801727e:	d90e      	bls.n	801729e <dc0ee848a3d94ab51a590cd57f74390ab215fb95+0x22>
 8017280:	2364      	movs	r3, #100	; 0x64
 8017282:	4359      	muls	r1, r3
 8017284:	fbb1 f0f0 	udiv	r0, r1, r0
 8017288:	284a      	cmp	r0, #74	; 0x4a
 801728a:	d90b      	bls.n	80172a4 <dc0ee848a3d94ab51a590cd57f74390ab215fb95+0x28>
 801728c:	384b      	subs	r0, #75	; 0x4b
 801728e:	2319      	movs	r3, #25
 8017290:	0280      	lsls	r0, r0, #10
 8017292:	fbb0 f0f3 	udiv	r0, r0, r3
 8017296:	f500 7080 	add.w	r0, r0, #256	; 0x100
 801729a:	b280      	uxth	r0, r0
 801729c:	4770      	bx	lr
 801729e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80172a2:	4770      	bx	lr
 80172a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80172a8:	4770      	bx	lr
	...

080172ac <TOPOLOGY_IsAcceptable>:
 80172ac:	4b13      	ldr	r3, [pc, #76]	; (80172fc <TOPOLOGY_IsAcceptable+0x50>)
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b4:	4680      	mov	r8, r0
 80172b6:	460d      	mov	r5, r1
 80172b8:	b1eb      	cbz	r3, 80172f6 <TOPOLOGY_IsAcceptable+0x4a>
 80172ba:	4b11      	ldr	r3, [pc, #68]	; (8017300 <TOPOLOGY_IsAcceptable+0x54>)
 80172bc:	681e      	ldr	r6, [r3, #0]
 80172be:	b1d6      	cbz	r6, 80172f6 <TOPOLOGY_IsAcceptable+0x4a>
 80172c0:	2002      	movs	r0, #2
 80172c2:	f7f1 f857 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80172c6:	f7f1 ff59 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80172ca:	4b0e      	ldr	r3, [pc, #56]	; (8017304 <TOPOLOGY_IsAcceptable+0x58>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	e9d3 4700 	ldrd	r4, r7, [r3]
 80172d2:	428f      	cmp	r7, r1
 80172d4:	bf08      	it	eq
 80172d6:	4284      	cmpeq	r4, r0
 80172d8:	d105      	bne.n	80172e6 <TOPOLOGY_IsAcceptable+0x3a>
 80172da:	e9d3 4702 	ldrd	r4, r7, [r3, #8]
 80172de:	42af      	cmp	r7, r5
 80172e0:	bf08      	it	eq
 80172e2:	4544      	cmpeq	r4, r8
 80172e4:	d007      	beq.n	80172f6 <TOPOLOGY_IsAcceptable+0x4a>
 80172e6:	3201      	adds	r2, #1
 80172e8:	4296      	cmp	r6, r2
 80172ea:	f103 0310 	add.w	r3, r3, #16
 80172ee:	d1ee      	bne.n	80172ce <TOPOLOGY_IsAcceptable+0x22>
 80172f0:	2000      	movs	r0, #0
 80172f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172f6:	2001      	movs	r0, #1
 80172f8:	e7fb      	b.n	80172f2 <TOPOLOGY_IsAcceptable+0x46>
 80172fa:	bf00      	nop
 80172fc:	0801a65c 	.word	0x0801a65c
 8017300:	0801a670 	.word	0x0801a670
 8017304:	0801a660 	.word	0x0801a660

08017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 8017308:	780b      	ldrb	r3, [r1, #0]
 801730a:	7043      	strb	r3, [r0, #1]
 801730c:	784b      	ldrb	r3, [r1, #1]
 801730e:	7003      	strb	r3, [r0, #0]
 8017310:	4770      	bx	lr
	...

08017314 <9aa1c7f7136549b4c61c7ca6983f673760c5352f>:
 8017314:	4b02      	ldr	r3, [pc, #8]	; (8017320 <9aa1c7f7136549b4c61c7ca6983f673760c5352f+0xc>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	2200      	movs	r2, #0
 801731a:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
 801731e:	4770      	bx	lr
 8017320:	20000034 	.word	0x20000034

08017324 <76cd6211f2085e3d946bd747f2187c2e80301a64>:
 8017324:	4603      	mov	r3, r0
 8017326:	7880      	ldrb	r0, [r0, #2]
 8017328:	2802      	cmp	r0, #2
 801732a:	d814      	bhi.n	8017356 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x32>
 801732c:	2801      	cmp	r0, #1
 801732e:	d101      	bne.n	8017334 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x10>
 8017330:	889a      	ldrh	r2, [r3, #4]
 8017332:	b18a      	cbz	r2, 8017358 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x34>
 8017334:	4a09      	ldr	r2, [pc, #36]	; (801735c <76cd6211f2085e3d946bd747f2187c2e80301a64+0x38>)
 8017336:	6811      	ldr	r1, [r2, #0]
 8017338:	f8d1 25b0 	ldr.w	r2, [r1, #1456]	; 0x5b0
 801733c:	2000      	movs	r0, #0
 801733e:	6118      	str	r0, [r3, #16]
 8017340:	b132      	cbz	r2, 8017350 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x2c>
 8017342:	4611      	mov	r1, r2
 8017344:	6912      	ldr	r2, [r2, #16]
 8017346:	2a00      	cmp	r2, #0
 8017348:	d1fb      	bne.n	8017342 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x1e>
 801734a:	610b      	str	r3, [r1, #16]
 801734c:	2000      	movs	r0, #0
 801734e:	4770      	bx	lr
 8017350:	f8c1 35b0 	str.w	r3, [r1, #1456]	; 0x5b0
 8017354:	e7fa      	b.n	801734c <76cd6211f2085e3d946bd747f2187c2e80301a64+0x28>
 8017356:	2001      	movs	r0, #1
 8017358:	4770      	bx	lr
 801735a:	bf00      	nop
 801735c:	20000034 	.word	0x20000034

08017360 <008a3a43d97272e7b0f59f361a8c8969876e60dd>:
 8017360:	4b07      	ldr	r3, [pc, #28]	; (8017380 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x20>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8017368:	b90b      	cbnz	r3, 801736e <008a3a43d97272e7b0f59f361a8c8969876e60dd+0xe>
 801736a:	2003      	movs	r0, #3
 801736c:	4770      	bx	lr
 801736e:	691a      	ldr	r2, [r3, #16]
 8017370:	4282      	cmp	r2, r0
 8017372:	d103      	bne.n	801737c <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x1c>
 8017374:	6902      	ldr	r2, [r0, #16]
 8017376:	611a      	str	r2, [r3, #16]
 8017378:	2000      	movs	r0, #0
 801737a:	4770      	bx	lr
 801737c:	4613      	mov	r3, r2
 801737e:	e7f3      	b.n	8017368 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x8>
 8017380:	20000034 	.word	0x20000034

08017384 <09c9c31144d89e446fc56189171072a9b46992fd>:
 8017384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017388:	4699      	mov	r9, r3
 801738a:	4b6f      	ldr	r3, [pc, #444]	; (8017548 <09c9c31144d89e446fc56189171072a9b46992fd+0x1c4>)
 801738c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f8d3 55b0 	ldr.w	r5, [r3, #1456]	; 0x5b0
 8017396:	4606      	mov	r6, r0
 8017398:	4690      	mov	r8, r2
 801739a:	b95d      	cbnz	r5, 80173b4 <09c9c31144d89e446fc56189171072a9b46992fd+0x30>
 801739c:	2304      	movs	r3, #4
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	4b6a      	ldr	r3, [pc, #424]	; (801754c <09c9c31144d89e446fc56189171072a9b46992fd+0x1c8>)
 80173a2:	9301      	str	r3, [sp, #4]
 80173a4:	ab02      	add	r3, sp, #8
 80173a6:	e913 0003 	ldmdb	r3, {r0, r1}
 80173aa:	4a69      	ldr	r2, [pc, #420]	; (8017550 <09c9c31144d89e446fc56189171072a9b46992fd+0x1cc>)
 80173ac:	f7f6 f93e 	bl	800d62c <LOGGER_PrintLine>
 80173b0:	2003      	movs	r0, #3
 80173b2:	e0c6      	b.n	8017542 <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 80173b4:	428d      	cmp	r5, r1
 80173b6:	f000 80b6 	beq.w	8017526 <09c9c31144d89e446fc56189171072a9b46992fd+0x1a2>
 80173ba:	692d      	ldr	r5, [r5, #16]
 80173bc:	e7ed      	b.n	801739a <09c9c31144d89e446fc56189171072a9b46992fd+0x16>
 80173be:	20a0      	movs	r0, #160	; 0xa0
 80173c0:	f7f2 fb00 	bl	80099c4 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 80173c4:	4604      	mov	r4, r0
 80173c6:	2800      	cmp	r0, #0
 80173c8:	f000 80ab 	beq.w	8017522 <09c9c31144d89e446fc56189171072a9b46992fd+0x19e>
 80173cc:	2380      	movs	r3, #128	; 0x80
 80173ce:	7043      	strb	r3, [r0, #1]
 80173d0:	2311      	movs	r3, #17
 80173d2:	7403      	strb	r3, [r0, #16]
 80173d4:	882b      	ldrh	r3, [r5, #0]
 80173d6:	8283      	strh	r3, [r0, #20]
 80173d8:	2303      	movs	r3, #3
 80173da:	7743      	strb	r3, [r0, #29]
 80173dc:	f8a0 8012 	strh.w	r8, [r0, #18]
 80173e0:	f104 031e 	add.w	r3, r4, #30
 80173e4:	4630      	mov	r0, r6
 80173e6:	f106 0210 	add.w	r2, r6, #16
 80173ea:	f850 1b04 	ldr.w	r1, [r0], #4
 80173ee:	f843 1b04 	str.w	r1, [r3], #4
 80173f2:	4290      	cmp	r0, r2
 80173f4:	d1f9      	bne.n	80173ea <09c9c31144d89e446fc56189171072a9b46992fd+0x66>
 80173f6:	4639      	mov	r1, r7
 80173f8:	4620      	mov	r0, r4
 80173fa:	f000 fd17 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80173fe:	463a      	mov	r2, r7
 8017400:	6860      	ldr	r0, [r4, #4]
 8017402:	4649      	mov	r1, r9
 8017404:	f001 fe6f 	bl	80190e6 <memcpy>
 8017408:	2300      	movs	r3, #0
 801740a:	7463      	strb	r3, [r4, #17]
 801740c:	8aa3      	ldrh	r3, [r4, #20]
 801740e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8017412:	b292      	uxth	r2, r2
 8017414:	2aff      	cmp	r2, #255	; 0xff
 8017416:	d83e      	bhi.n	8017496 <09c9c31144d89e446fc56189171072a9b46992fd+0x112>
 8017418:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 801741c:	b29b      	uxth	r3, r3
 801741e:	2501      	movs	r5, #1
 8017420:	2b0f      	cmp	r3, #15
 8017422:	7465      	strb	r5, [r4, #17]
 8017424:	d805      	bhi.n	8017432 <09c9c31144d89e446fc56189171072a9b46992fd+0xae>
 8017426:	8a63      	ldrh	r3, [r4, #18]
 8017428:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 801742c:	b29b      	uxth	r3, r3
 801742e:	2b0f      	cmp	r3, #15
 8017430:	d91e      	bls.n	8017470 <09c9c31144d89e446fc56189171072a9b46992fd+0xec>
 8017432:	2101      	movs	r1, #1
 8017434:	4620      	mov	r0, r4
 8017436:	f000 fcf9 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801743a:	6863      	ldr	r3, [r4, #4]
 801743c:	8aa2      	ldrh	r2, [r4, #20]
 801743e:	701a      	strb	r2, [r3, #0]
 8017440:	2102      	movs	r1, #2
 8017442:	4620      	mov	r0, r4
 8017444:	f000 fcf2 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017448:	6860      	ldr	r0, [r4, #4]
 801744a:	f104 0112 	add.w	r1, r4, #18
 801744e:	f7ff ff5b 	bl	8017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8017452:	2101      	movs	r1, #1
 8017454:	4620      	mov	r0, r4
 8017456:	f000 fce9 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801745a:	6863      	ldr	r3, [r4, #4]
 801745c:	22f5      	movs	r2, #245	; 0xf5
 801745e:	701a      	strb	r2, [r3, #0]
 8017460:	4620      	mov	r0, r4
 8017462:	f7fd fb84 	bl	8014b6e <00af7f89235fe04a2b2b59d942644988487fcbf4>
 8017466:	2800      	cmp	r0, #0
 8017468:	bf0c      	ite	eq
 801746a:	2005      	moveq	r0, #5
 801746c:	2000      	movne	r0, #0
 801746e:	e068      	b.n	8017542 <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 8017470:	4629      	mov	r1, r5
 8017472:	4620      	mov	r0, r4
 8017474:	f000 fcda 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017478:	8aa3      	ldrh	r3, [r4, #20]
 801747a:	8a61      	ldrh	r1, [r4, #18]
 801747c:	6862      	ldr	r2, [r4, #4]
 801747e:	f003 030f 	and.w	r3, r3, #15
 8017482:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8017486:	7013      	strb	r3, [r2, #0]
 8017488:	4629      	mov	r1, r5
 801748a:	4620      	mov	r0, r4
 801748c:	f000 fcce 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017490:	6863      	ldr	r3, [r4, #4]
 8017492:	22f7      	movs	r2, #247	; 0xf7
 8017494:	e7e3      	b.n	801745e <09c9c31144d89e446fc56189171072a9b46992fd+0xda>
 8017496:	8a63      	ldrh	r3, [r4, #18]
 8017498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801749c:	b29b      	uxth	r3, r3
 801749e:	2bff      	cmp	r3, #255	; 0xff
 80174a0:	f104 0614 	add.w	r6, r4, #20
 80174a4:	d817      	bhi.n	80174d6 <09c9c31144d89e446fc56189171072a9b46992fd+0x152>
 80174a6:	2501      	movs	r5, #1
 80174a8:	2102      	movs	r1, #2
 80174aa:	7465      	strb	r5, [r4, #17]
 80174ac:	4620      	mov	r0, r4
 80174ae:	f000 fcbd 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80174b2:	6860      	ldr	r0, [r4, #4]
 80174b4:	4631      	mov	r1, r6
 80174b6:	f7ff ff27 	bl	8017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 80174ba:	4629      	mov	r1, r5
 80174bc:	4620      	mov	r0, r4
 80174be:	f000 fcb5 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80174c2:	6863      	ldr	r3, [r4, #4]
 80174c4:	8a62      	ldrh	r2, [r4, #18]
 80174c6:	701a      	strb	r2, [r3, #0]
 80174c8:	4629      	mov	r1, r5
 80174ca:	4620      	mov	r0, r4
 80174cc:	f000 fcae 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80174d0:	6863      	ldr	r3, [r4, #4]
 80174d2:	22f6      	movs	r2, #246	; 0xf6
 80174d4:	e7c3      	b.n	801745e <09c9c31144d89e446fc56189171072a9b46992fd+0xda>
 80174d6:	2108      	movs	r1, #8
 80174d8:	4620      	mov	r0, r4
 80174da:	f000 fca7 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80174de:	6860      	ldr	r0, [r4, #4]
 80174e0:	f104 0112 	add.w	r1, r4, #18
 80174e4:	f7ff ff10 	bl	8017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 80174e8:	6860      	ldr	r0, [r4, #4]
 80174ea:	4631      	mov	r1, r6
 80174ec:	3002      	adds	r0, #2
 80174ee:	f7ff ff0b 	bl	8017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 80174f2:	6860      	ldr	r0, [r4, #4]
 80174f4:	7a23      	ldrb	r3, [r4, #8]
 80174f6:	f8ad 3000 	strh.w	r3, [sp]
 80174fa:	4669      	mov	r1, sp
 80174fc:	3004      	adds	r0, #4
 80174fe:	f7ff ff03 	bl	8017308 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8017502:	6861      	ldr	r1, [r4, #4]
 8017504:	2005      	movs	r0, #5
 8017506:	1d8d      	adds	r5, r1, #6
 8017508:	f7f0 ff34 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801750c:	4606      	mov	r6, r0
 801750e:	2002      	movs	r0, #2
 8017510:	f7f0 ff30 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017514:	1c72      	adds	r2, r6, #1
 8017516:	1c43      	adds	r3, r0, #1
 8017518:	4629      	mov	r1, r5
 801751a:	4620      	mov	r0, r4
 801751c:	f000 fd42 	bl	8017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8017520:	e79e      	b.n	8017460 <09c9c31144d89e446fc56189171072a9b46992fd+0xdc>
 8017522:	2004      	movs	r0, #4
 8017524:	e00d      	b.n	8017542 <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 8017526:	2f7c      	cmp	r7, #124	; 0x7c
 8017528:	f67f af49 	bls.w	80173be <09c9c31144d89e446fc56189171072a9b46992fd+0x3a>
 801752c:	2304      	movs	r3, #4
 801752e:	9300      	str	r3, [sp, #0]
 8017530:	4b06      	ldr	r3, [pc, #24]	; (801754c <09c9c31144d89e446fc56189171072a9b46992fd+0x1c8>)
 8017532:	9301      	str	r3, [sp, #4]
 8017534:	ab02      	add	r3, sp, #8
 8017536:	e913 0003 	ldmdb	r3, {r0, r1}
 801753a:	4a06      	ldr	r2, [pc, #24]	; (8017554 <09c9c31144d89e446fc56189171072a9b46992fd+0x1d0>)
 801753c:	f7f6 f876 	bl	800d62c <LOGGER_PrintLine>
 8017540:	2002      	movs	r0, #2
 8017542:	b003      	add	sp, #12
 8017544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017548:	20000034 	.word	0x20000034
 801754c:	0801d734 	.word	0x0801d734
 8017550:	0801d753 	.word	0x0801d753
 8017554:	0801d738 	.word	0x0801d738

08017558 <32c59f113e62a8491f5b52f96af26c008a4f227e>:
 8017558:	2380      	movs	r3, #128	; 0x80
 801755a:	b513      	push	{r0, r1, r4, lr}
 801755c:	4604      	mov	r4, r0
 801755e:	7043      	strb	r3, [r0, #1]
 8017560:	b949      	cbnz	r1, 8017576 <32c59f113e62a8491f5b52f96af26c008a4f227e+0x1e>
 8017562:	2304      	movs	r3, #4
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	4b07      	ldr	r3, [pc, #28]	; (8017584 <32c59f113e62a8491f5b52f96af26c008a4f227e+0x2c>)
 8017568:	9301      	str	r3, [sp, #4]
 801756a:	ab02      	add	r3, sp, #8
 801756c:	e913 0003 	ldmdb	r3, {r0, r1}
 8017570:	4a05      	ldr	r2, [pc, #20]	; (8017588 <32c59f113e62a8491f5b52f96af26c008a4f227e+0x30>)
 8017572:	f7f6 f85b 	bl	800d62c <LOGGER_PrintLine>
 8017576:	4620      	mov	r0, r4
 8017578:	b002      	add	sp, #8
 801757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801757e:	f7f2 badf 	b.w	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017582:	bf00      	nop
 8017584:	0801d734 	.word	0x0801d734
 8017588:	0801d780 	.word	0x0801d780

0801758c <078582282b526a1ec1227869e1581c8a1811b440>:
 801758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017590:	2380      	movs	r3, #128	; 0x80
 8017592:	7043      	strb	r3, [r0, #1]
 8017594:	7c42      	ldrb	r2, [r0, #17]
 8017596:	6843      	ldr	r3, [r0, #4]
 8017598:	b088      	sub	sp, #32
 801759a:	781d      	ldrb	r5, [r3, #0]
 801759c:	4604      	mov	r4, r0
 801759e:	2700      	movs	r7, #0
 80175a0:	2a00      	cmp	r2, #0
 80175a2:	d06c      	beq.n	801767e <078582282b526a1ec1227869e1581c8a1811b440+0xf2>
 80175a4:	2101      	movs	r1, #1
 80175a6:	f000 fc81 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80175aa:	f005 0203 	and.w	r2, r5, #3
 80175ae:	2a02      	cmp	r2, #2
 80175b0:	6863      	ldr	r3, [r4, #4]
 80175b2:	d04e      	beq.n	8017652 <078582282b526a1ec1227869e1581c8a1811b440+0xc6>
 80175b4:	2a03      	cmp	r2, #3
 80175b6:	d055      	beq.n	8017664 <078582282b526a1ec1227869e1581c8a1811b440+0xd8>
 80175b8:	7819      	ldrb	r1, [r3, #0]
 80175ba:	2a01      	cmp	r2, #1
 80175bc:	785a      	ldrb	r2, [r3, #1]
 80175be:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80175c2:	8262      	strh	r2, [r4, #18]
 80175c4:	d03f      	beq.n	8017646 <078582282b526a1ec1227869e1581c8a1811b440+0xba>
 80175c6:	789a      	ldrb	r2, [r3, #2]
 80175c8:	78db      	ldrb	r3, [r3, #3]
 80175ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80175ce:	82a3      	strh	r3, [r4, #20]
 80175d0:	2104      	movs	r1, #4
 80175d2:	4620      	mov	r0, r4
 80175d4:	f104 051d 	add.w	r5, r4, #29
 80175d8:	f000 fc68 	bl	8017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80175dc:	4628      	mov	r0, r5
 80175de:	f7f1 fd9f 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80175e2:	4606      	mov	r6, r0
 80175e4:	b118      	cbz	r0, 80175ee <078582282b526a1ec1227869e1581c8a1811b440+0x62>
 80175e6:	4628      	mov	r0, r5
 80175e8:	f7f2 f8e2 	bl	80097b0 <f26cfbfa45ddc428fa93a21aa284ea921322a858>
 80175ec:	4607      	mov	r7, r0
 80175ee:	aa04      	add	r2, sp, #16
 80175f0:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 80175f4:	f104 0c3f 	add.w	ip, r4, #63	; 0x3f
 80175f8:	4690      	mov	r8, r2
 80175fa:	6818      	ldr	r0, [r3, #0]
 80175fc:	6859      	ldr	r1, [r3, #4]
 80175fe:	4615      	mov	r5, r2
 8017600:	c503      	stmia	r5!, {r0, r1}
 8017602:	3308      	adds	r3, #8
 8017604:	4563      	cmp	r3, ip
 8017606:	462a      	mov	r2, r5
 8017608:	d1f7      	bne.n	80175fa <078582282b526a1ec1227869e1581c8a1811b440+0x6e>
 801760a:	4b39      	ldr	r3, [pc, #228]	; (80176f0 <078582282b526a1ec1227869e1581c8a1811b440+0x164>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f8d3 55b0 	ldr.w	r5, [r3, #1456]	; 0x5b0
 8017612:	f04f 0900 	mov.w	r9, #0
 8017616:	2d00      	cmp	r5, #0
 8017618:	d13c      	bne.n	8017694 <078582282b526a1ec1227869e1581c8a1811b440+0x108>
 801761a:	f1b9 0f00 	cmp.w	r9, #0
 801761e:	d10c      	bne.n	801763a <078582282b526a1ec1227869e1581c8a1811b440+0xae>
 8017620:	2305      	movs	r3, #5
 8017622:	9302      	str	r3, [sp, #8]
 8017624:	4b33      	ldr	r3, [pc, #204]	; (80176f4 <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 8017626:	9303      	str	r3, [sp, #12]
 8017628:	2005      	movs	r0, #5
 801762a:	8aa3      	ldrh	r3, [r4, #20]
 801762c:	4a32      	ldr	r2, [pc, #200]	; (80176f8 <078582282b526a1ec1227869e1581c8a1811b440+0x16c>)
 801762e:	4931      	ldr	r1, [pc, #196]	; (80176f4 <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 8017630:	f7f5 fffc 	bl	800d62c <LOGGER_PrintLine>
 8017634:	8aa0      	ldrh	r0, [r4, #20]
 8017636:	f000 f963 	bl	8017900 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e>
 801763a:	4620      	mov	r0, r4
 801763c:	f7f2 fa80 	bl	8009b40 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017640:	b008      	add	sp, #32
 8017642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017646:	789b      	ldrb	r3, [r3, #2]
 8017648:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801764c:	82a3      	strh	r3, [r4, #20]
 801764e:	2103      	movs	r1, #3
 8017650:	e7bf      	b.n	80175d2 <078582282b526a1ec1227869e1581c8a1811b440+0x46>
 8017652:	781a      	ldrb	r2, [r3, #0]
 8017654:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8017658:	8262      	strh	r2, [r4, #18]
 801765a:	785a      	ldrb	r2, [r3, #1]
 801765c:	789b      	ldrb	r3, [r3, #2]
 801765e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017662:	e7f3      	b.n	801764c <078582282b526a1ec1227869e1581c8a1811b440+0xc0>
 8017664:	781a      	ldrb	r2, [r3, #0]
 8017666:	0912      	lsrs	r2, r2, #4
 8017668:	f5a2 6275 	sub.w	r2, r2, #3920	; 0xf50
 801766c:	8262      	strh	r2, [r4, #18]
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	f003 030f 	and.w	r3, r3, #15
 8017674:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 8017678:	82a3      	strh	r3, [r4, #20]
 801767a:	2101      	movs	r1, #1
 801767c:	e7a9      	b.n	80175d2 <078582282b526a1ec1227869e1581c8a1811b440+0x46>
 801767e:	785a      	ldrb	r2, [r3, #1]
 8017680:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8017684:	8242      	strh	r2, [r0, #18]
 8017686:	789a      	ldrb	r2, [r3, #2]
 8017688:	78db      	ldrb	r3, [r3, #3]
 801768a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801768e:	8283      	strh	r3, [r0, #20]
 8017690:	2108      	movs	r1, #8
 8017692:	e79f      	b.n	80175d4 <078582282b526a1ec1227869e1581c8a1811b440+0x48>
 8017694:	882a      	ldrh	r2, [r5, #0]
 8017696:	8aa3      	ldrh	r3, [r4, #20]
 8017698:	429a      	cmp	r2, r3
 801769a:	d11d      	bne.n	80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801769c:	78ab      	ldrb	r3, [r5, #2]
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d012      	beq.n	80176c8 <078582282b526a1ec1227869e1581c8a1811b440+0x13c>
 80176a2:	2b02      	cmp	r3, #2
 80176a4:	d001      	beq.n	80176aa <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 80176a6:	b9cb      	cbnz	r3, 80176dc <078582282b526a1ec1227869e1581c8a1811b440+0x150>
 80176a8:	b9b6      	cbnz	r6, 80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 80176aa:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80176ae:	f1ba 0f00 	cmp.w	sl, #0
 80176b2:	d011      	beq.n	80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 80176b4:	7a23      	ldrb	r3, [r4, #8]
 80176b6:	9300      	str	r3, [sp, #0]
 80176b8:	6863      	ldr	r3, [r4, #4]
 80176ba:	8a62      	ldrh	r2, [r4, #18]
 80176bc:	4641      	mov	r1, r8
 80176be:	4628      	mov	r0, r5
 80176c0:	47d0      	blx	sl
 80176c2:	f04f 0901 	mov.w	r9, #1
 80176c6:	e007      	b.n	80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 80176c8:	b136      	cbz	r6, 80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 80176ca:	88ab      	ldrh	r3, [r5, #4]
 80176cc:	42bb      	cmp	r3, r7
 80176ce:	d0ec      	beq.n	80176aa <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 80176d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d0e8      	beq.n	80176aa <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 80176d8:	692d      	ldr	r5, [r5, #16]
 80176da:	e79c      	b.n	8017616 <078582282b526a1ec1227869e1581c8a1811b440+0x8a>
 80176dc:	2303      	movs	r3, #3
 80176de:	9302      	str	r3, [sp, #8]
 80176e0:	4b04      	ldr	r3, [pc, #16]	; (80176f4 <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 80176e2:	4a06      	ldr	r2, [pc, #24]	; (80176fc <078582282b526a1ec1227869e1581c8a1811b440+0x170>)
 80176e4:	9303      	str	r3, [sp, #12]
 80176e6:	4619      	mov	r1, r3
 80176e8:	2003      	movs	r0, #3
 80176ea:	f7f5 ff9f 	bl	800d62c <LOGGER_PrintLine>
 80176ee:	e7f3      	b.n	80176d8 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 80176f0:	20000034 	.word	0x20000034
 80176f4:	0801d734 	.word	0x0801d734
 80176f8:	0801d7a9 	.word	0x0801d7a9
 80176fc:	0801d796 	.word	0x0801d796

08017700 <dfc328393dc363adf936780696ec1bbccb146c7c>:
 8017700:	b410      	push	{r4}
 8017702:	4b08      	ldr	r3, [pc, #32]	; (8017724 <dfc328393dc363adf936780696ec1bbccb146c7c+0x24>)
 8017704:	6819      	ldr	r1, [r3, #0]
 8017706:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 801770a:	f501 5147 	add.w	r1, r1, #12736	; 0x31c0
 801770e:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
 8017712:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8017716:	f8b3 01f8 	ldrh.w	r0, [r3, #504]	; 0x1f8
 801771a:	313c      	adds	r1, #60	; 0x3c
 801771c:	4623      	mov	r3, r4
 801771e:	bc10      	pop	{r4}
 8017720:	4718      	bx	r3
 8017722:	bf00      	nop
 8017724:	20000034 	.word	0x20000034

08017728 <b827d3e4788916e9a702935e78a76211b838ecbc>:
 8017728:	4b04      	ldr	r3, [pc, #16]	; (801773c <b827d3e4788916e9a702935e78a76211b838ecbc+0x14>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017730:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8017734:	b103      	cbz	r3, 8017738 <b827d3e4788916e9a702935e78a76211b838ecbc+0x10>
 8017736:	4718      	bx	r3
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop
 801773c:	20000034 	.word	0x20000034

08017740 <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2>:
 8017740:	4b05      	ldr	r3, [pc, #20]	; (8017758 <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2+0x18>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017748:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801774c:	b112      	cbz	r2, 8017754 <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2+0x14>
 801774e:	f8b3 0224 	ldrh.w	r0, [r3, #548]	; 0x224
 8017752:	4710      	bx	r2
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	20000034 	.word	0x20000034

0801775c <1fa7e28f7c375400df62198096d309590e03a8ff>:
 801775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801775e:	4b1b      	ldr	r3, [pc, #108]	; (80177cc <1fa7e28f7c375400df62198096d309590e03a8ff+0x70>)
 8017760:	681c      	ldr	r4, [r3, #0]
 8017762:	b08f      	sub	sp, #60	; 0x3c
 8017764:	2300      	movs	r3, #0
 8017766:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 801776a:	aa01      	add	r2, sp, #4
 801776c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017770:	f504 77f3 	add.w	r7, r4, #486	; 0x1e6
 8017774:	f504 73e3 	add.w	r3, r4, #454	; 0x1c6
 8017778:	4616      	mov	r6, r2
 801777a:	6818      	ldr	r0, [r3, #0]
 801777c:	6859      	ldr	r1, [r3, #4]
 801777e:	4615      	mov	r5, r2
 8017780:	c503      	stmia	r5!, {r0, r1}
 8017782:	3308      	adds	r3, #8
 8017784:	42bb      	cmp	r3, r7
 8017786:	462a      	mov	r2, r5
 8017788:	d1f7      	bne.n	801777a <1fa7e28f7c375400df62198096d309590e03a8ff+0x1e>
 801778a:	f504 73f3 	add.w	r3, r4, #486	; 0x1e6
 801778e:	aa09      	add	r2, sp, #36	; 0x24
 8017790:	f504 77fb 	add.w	r7, r4, #502	; 0x1f6
 8017794:	6818      	ldr	r0, [r3, #0]
 8017796:	6859      	ldr	r1, [r3, #4]
 8017798:	4615      	mov	r5, r2
 801779a:	c503      	stmia	r5!, {r0, r1}
 801779c:	3308      	adds	r3, #8
 801779e:	42bb      	cmp	r3, r7
 80177a0:	462a      	mov	r2, r5
 80177a2:	d1f7      	bne.n	8017794 <1fa7e28f7c375400df62198096d309590e03a8ff+0x38>
 80177a4:	881b      	ldrh	r3, [r3, #0]
 80177a6:	802b      	strh	r3, [r5, #0]
 80177a8:	f7f6 fcd2 	bl	800e150 <02aa084aaa87b61bfa00c296d0ea733e41c0e799>
 80177ac:	2132      	movs	r1, #50	; 0x32
 80177ae:	4602      	mov	r2, r0
 80177b0:	4630      	mov	r0, r6
 80177b2:	f7f6 fcdd 	bl	800e170 <f4e96df7a22571dfa32822f4af8ba70dac43b850>
 80177b6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80177ba:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 80177be:	4631      	mov	r1, r6
 80177c0:	f8b4 01f8 	ldrh.w	r0, [r4, #504]	; 0x1f8
 80177c4:	4798      	blx	r3
 80177c6:	b00f      	add	sp, #60	; 0x3c
 80177c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177ca:	bf00      	nop
 80177cc:	20000034 	.word	0x20000034

080177d0 <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc>:
 80177d0:	b570      	push	{r4, r5, r6, lr}
 80177d2:	4b0c      	ldr	r3, [pc, #48]	; (8017804 <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x34>)
 80177d4:	681d      	ldr	r5, [r3, #0]
 80177d6:	f505 5449 	add.w	r4, r5, #12864	; 0x3240
 80177da:	f505 564e 	add.w	r6, r5, #13184	; 0x3380
 80177de:	3404      	adds	r4, #4
 80177e0:	3624      	adds	r6, #36	; 0x24
 80177e2:	7a23      	ldrb	r3, [r4, #8]
 80177e4:	2b01      	cmp	r3, #1
 80177e6:	d102      	bne.n	80177ee <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x1e>
 80177e8:	7820      	ldrb	r0, [r4, #0]
 80177ea:	f7f3 f84f 	bl	800a88c <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 80177ee:	3420      	adds	r4, #32
 80177f0:	42b4      	cmp	r4, r6
 80177f2:	d1f6      	bne.n	80177e2 <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x12>
 80177f4:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 80177f8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80177fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017800:	4718      	bx	r3
 8017802:	bf00      	nop
 8017804:	20000034 	.word	0x20000034

08017808 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4>:
 8017808:	b410      	push	{r4}
 801780a:	4b0e      	ldr	r3, [pc, #56]	; (8017844 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x3c>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 8017812:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8017816:	f8a2 01f8 	strh.w	r0, [r2, #504]	; 0x1f8
 801781a:	333c      	adds	r3, #60	; 0x3c
 801781c:	f101 0014 	add.w	r0, r1, #20
 8017820:	f851 4b04 	ldr.w	r4, [r1], #4
 8017824:	f843 4b04 	str.w	r4, [r3], #4
 8017828:	4281      	cmp	r1, r0
 801782a:	d1f9      	bne.n	8017820 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x18>
 801782c:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8017830:	b12b      	cbz	r3, 801783e <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x36>
 8017832:	4805      	ldr	r0, [pc, #20]	; (8017848 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x40>)
 8017834:	bc10      	pop	{r4}
 8017836:	220d      	movs	r2, #13
 8017838:	2100      	movs	r1, #0
 801783a:	f7f3 bf2d 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801783e:	bc10      	pop	{r4}
 8017840:	4770      	bx	lr
 8017842:	bf00      	nop
 8017844:	20000034 	.word	0x20000034
 8017848:	08017701 	.word	0x08017701

0801784c <a59be9f028c32d03d0e01d3447553913a8330c11>:
 801784c:	4b02      	ldr	r3, [pc, #8]	; (8017858 <a59be9f028c32d03d0e01d3447553913a8330c11+0xc>)
 801784e:	6818      	ldr	r0, [r3, #0]
 8017850:	f500 5047 	add.w	r0, r0, #12736	; 0x31c0
 8017854:	303c      	adds	r0, #60	; 0x3c
 8017856:	4770      	bx	lr
 8017858:	20000034 	.word	0x20000034

0801785c <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>:
 801785c:	4b06      	ldr	r3, [pc, #24]	; (8017878 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x1c>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017864:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8017868:	b123      	cbz	r3, 8017874 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x18>
 801786a:	4804      	ldr	r0, [pc, #16]	; (801787c <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x20>)
 801786c:	220e      	movs	r2, #14
 801786e:	2100      	movs	r1, #0
 8017870:	f7f3 bf12 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	20000034 	.word	0x20000034
 801787c:	0801775d 	.word	0x0801775d

08017880 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc>:
 8017880:	b510      	push	{r4, lr}
 8017882:	4b08      	ldr	r3, [pc, #32]	; (80178a4 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x24>)
 8017884:	681c      	ldr	r4, [r3, #0]
 8017886:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 801788a:	f7f8 fe27 	bl	80104dc <f13b11cc0bbf49b03ea71d42a05b941abea0a520>
 801788e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8017892:	b133      	cbz	r3, 80178a2 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x22>
 8017894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017898:	4803      	ldr	r0, [pc, #12]	; (80178a8 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x28>)
 801789a:	2210      	movs	r2, #16
 801789c:	2100      	movs	r1, #0
 801789e:	f7f3 befb 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80178a2:	bd10      	pop	{r4, pc}
 80178a4:	20000034 	.word	0x20000034
 80178a8:	080177d1 	.word	0x080177d1

080178ac <6a7c8072467648b34afad307e6f084585ae97774>:
 80178ac:	4b0a      	ldr	r3, [pc, #40]	; (80178d8 <6a7c8072467648b34afad307e6f084585ae97774+0x2c>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 80178b4:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 80178b8:	b162      	cbz	r2, 80178d4 <6a7c8072467648b34afad307e6f084585ae97774+0x28>
 80178ba:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 80178be:	3326      	adds	r3, #38	; 0x26
 80178c0:	f100 0210 	add.w	r2, r0, #16
 80178c4:	f850 1b04 	ldr.w	r1, [r0], #4
 80178c8:	f843 1b04 	str.w	r1, [r3], #4
 80178cc:	4290      	cmp	r0, r2
 80178ce:	d1f9      	bne.n	80178c4 <6a7c8072467648b34afad307e6f084585ae97774+0x18>
 80178d0:	8802      	ldrh	r2, [r0, #0]
 80178d2:	801a      	strh	r2, [r3, #0]
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop
 80178d8:	20000034 	.word	0x20000034

080178dc <d6f04be9d8ad12cb38262f1bba36a144854d1588>:
 80178dc:	4b06      	ldr	r3, [pc, #24]	; (80178f8 <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x1c>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80178e8:	b123      	cbz	r3, 80178f4 <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x18>
 80178ea:	4804      	ldr	r0, [pc, #16]	; (80178fc <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x20>)
 80178ec:	220c      	movs	r2, #12
 80178ee:	2100      	movs	r1, #0
 80178f0:	f7f3 bed2 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80178f4:	4770      	bx	lr
 80178f6:	bf00      	nop
 80178f8:	20000034 	.word	0x20000034
 80178fc:	08017729 	.word	0x08017729

08017900 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e>:
 8017900:	4b07      	ldr	r3, [pc, #28]	; (8017920 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x20>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017908:	f8a3 0224 	strh.w	r0, [r3, #548]	; 0x224
 801790c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8017910:	b123      	cbz	r3, 801791c <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x1c>
 8017912:	4804      	ldr	r0, [pc, #16]	; (8017924 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x24>)
 8017914:	2212      	movs	r2, #18
 8017916:	2100      	movs	r1, #0
 8017918:	f7f3 bebe 	b.w	800b698 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801791c:	4770      	bx	lr
 801791e:	bf00      	nop
 8017920:	20000034 	.word	0x20000034
 8017924:	08017741 	.word	0x08017741

08017928 <658f5a28751601d813ae36c10ddb69a9ae00a793>:
 8017928:	4b04      	ldr	r3, [pc, #16]	; (801793c <658f5a28751601d813ae36c10ddb69a9ae00a793+0x14>)
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017930:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8017934:	b103      	cbz	r3, 8017938 <658f5a28751601d813ae36c10ddb69a9ae00a793+0x10>
 8017936:	4718      	bx	r3
 8017938:	4770      	bx	lr
 801793a:	bf00      	nop
 801793c:	20000034 	.word	0x20000034

08017940 <e9a40864df7737216396ae2e57c8bf2439468a7c>:
 8017940:	4b04      	ldr	r3, [pc, #16]	; (8017954 <e9a40864df7737216396ae2e57c8bf2439468a7c+0x14>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017948:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 801794c:	b103      	cbz	r3, 8017950 <e9a40864df7737216396ae2e57c8bf2439468a7c+0x10>
 801794e:	4718      	bx	r3
 8017950:	4770      	bx	lr
 8017952:	bf00      	nop
 8017954:	20000034 	.word	0x20000034

08017958 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d>:
 8017958:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801795c:	4b0d      	ldr	r3, [pc, #52]	; (8017994 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d+0x3c>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017964:	460f      	mov	r7, r1
 8017966:	f8d3 83bc 	ldr.w	r8, [r3, #956]	; 0x3bc
 801796a:	4616      	mov	r6, r2
 801796c:	f1b8 0f00 	cmp.w	r8, #0
 8017970:	d00c      	beq.n	801798c <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d+0x34>
 8017972:	f7f1 fc03 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8017976:	4605      	mov	r5, r0
 8017978:	4638      	mov	r0, r7
 801797a:	460c      	mov	r4, r1
 801797c:	f7f1 fbfe 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8017980:	9600      	str	r6, [sp, #0]
 8017982:	4602      	mov	r2, r0
 8017984:	460b      	mov	r3, r1
 8017986:	4628      	mov	r0, r5
 8017988:	4621      	mov	r1, r4
 801798a:	47c0      	blx	r8
 801798c:	b002      	add	sp, #8
 801798e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017992:	bf00      	nop
 8017994:	20000034 	.word	0x20000034

08017998 <e097653d016fa9f6f38b73037603a15c791aa10d>:
 8017998:	4b04      	ldr	r3, [pc, #16]	; (80179ac <e097653d016fa9f6f38b73037603a15c791aa10d+0x14>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80179a0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80179a4:	b103      	cbz	r3, 80179a8 <e097653d016fa9f6f38b73037603a15c791aa10d+0x10>
 80179a6:	4718      	bx	r3
 80179a8:	4770      	bx	lr
 80179aa:	bf00      	nop
 80179ac:	20000034 	.word	0x20000034

080179b0 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4b0c      	ldr	r3, [pc, #48]	; (80179e8 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc+0x38>)
 80179b6:	460f      	mov	r7, r1
 80179b8:	681e      	ldr	r6, [r3, #0]
 80179ba:	f7f1 fbdf 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80179be:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 80179c2:	4605      	mov	r5, r0
 80179c4:	4638      	mov	r0, r7
 80179c6:	460c      	mov	r4, r1
 80179c8:	f7f1 fbd8 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80179cc:	f8d6 63c4 	ldr.w	r6, [r6, #964]	; 0x3c4
 80179d0:	4602      	mov	r2, r0
 80179d2:	460b      	mov	r3, r1
 80179d4:	b12e      	cbz	r6, 80179e2 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc+0x32>
 80179d6:	4628      	mov	r0, r5
 80179d8:	4621      	mov	r1, r4
 80179da:	46b4      	mov	ip, r6
 80179dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179e0:	4760      	bx	ip
 80179e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e6:	bf00      	nop
 80179e8:	20000034 	.word	0x20000034

080179ec <b374fd28973c520694c78fab59b4df07772e0870>:
 80179ec:	4b04      	ldr	r3, [pc, #16]	; (8017a00 <b374fd28973c520694c78fab59b4df07772e0870+0x14>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80179f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80179f8:	b103      	cbz	r3, 80179fc <b374fd28973c520694c78fab59b4df07772e0870+0x10>
 80179fa:	4718      	bx	r3
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	20000034 	.word	0x20000034

08017a04 <174d137b644ccd4ef57a02826061d132a3dec310>:
 8017a04:	4b04      	ldr	r3, [pc, #16]	; (8017a18 <174d137b644ccd4ef57a02826061d132a3dec310+0x14>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017a10:	b103      	cbz	r3, 8017a14 <174d137b644ccd4ef57a02826061d132a3dec310+0x10>
 8017a12:	4718      	bx	r3
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	20000034 	.word	0x20000034

08017a1c <92a2aa0d77d83c323d033422c3070d3730d69fc2>:
 8017a1c:	4b04      	ldr	r3, [pc, #16]	; (8017a30 <92a2aa0d77d83c323d033422c3070d3730d69fc2+0x14>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8017a28:	b103      	cbz	r3, 8017a2c <92a2aa0d77d83c323d033422c3070d3730d69fc2+0x10>
 8017a2a:	4718      	bx	r3
 8017a2c:	4770      	bx	lr
 8017a2e:	bf00      	nop
 8017a30:	20000034 	.word	0x20000034

08017a34 <ed1ec3dc0708953023c494b9efb045669b41a337>:
 8017a34:	4b04      	ldr	r3, [pc, #16]	; (8017a48 <ed1ec3dc0708953023c494b9efb045669b41a337+0x14>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a3c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8017a40:	b103      	cbz	r3, 8017a44 <ed1ec3dc0708953023c494b9efb045669b41a337+0x10>
 8017a42:	4718      	bx	r3
 8017a44:	4770      	bx	lr
 8017a46:	bf00      	nop
 8017a48:	20000034 	.word	0x20000034

08017a4c <24da9999ddd48c4f3f286257592f6695f75e30ed>:
 8017a4c:	4b04      	ldr	r3, [pc, #16]	; (8017a60 <24da9999ddd48c4f3f286257592f6695f75e30ed+0x14>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a54:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8017a58:	b103      	cbz	r3, 8017a5c <24da9999ddd48c4f3f286257592f6695f75e30ed+0x10>
 8017a5a:	4718      	bx	r3
 8017a5c:	4770      	bx	lr
 8017a5e:	bf00      	nop
 8017a60:	20000034 	.word	0x20000034

08017a64 <6362cea72da2b827a19bfabd8f796b6337cbd199>:
 8017a64:	4b04      	ldr	r3, [pc, #16]	; (8017a78 <6362cea72da2b827a19bfabd8f796b6337cbd199+0x14>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8017a70:	b103      	cbz	r3, 8017a74 <6362cea72da2b827a19bfabd8f796b6337cbd199+0x10>
 8017a72:	4718      	bx	r3
 8017a74:	4770      	bx	lr
 8017a76:	bf00      	nop
 8017a78:	20000034 	.word	0x20000034

08017a7c <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>:
 8017a7c:	4b04      	ldr	r3, [pc, #16]	; (8017a90 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a+0x14>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a84:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8017a88:	b103      	cbz	r3, 8017a8c <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a+0x10>
 8017a8a:	4718      	bx	r3
 8017a8c:	4770      	bx	lr
 8017a8e:	bf00      	nop
 8017a90:	20000034 	.word	0x20000034

08017a94 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>:
 8017a94:	4b04      	ldr	r3, [pc, #16]	; (8017aa8 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6+0x14>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017a9c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8017aa0:	b103      	cbz	r3, 8017aa4 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6+0x10>
 8017aa2:	4718      	bx	r3
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop
 8017aa8:	20000034 	.word	0x20000034

08017aac <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>:
 8017aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab0:	4698      	mov	r8, r3
 8017ab2:	4b2b      	ldr	r3, [pc, #172]	; (8017b60 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xb4>)
 8017ab4:	681d      	ldr	r5, [r3, #0]
 8017ab6:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 8017aba:	b08e      	sub	sp, #56	; 0x38
 8017abc:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8017ac0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8017ac4:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 8017ac8:	4607      	mov	r7, r0
 8017aca:	460e      	mov	r6, r1
 8017acc:	4691      	mov	r9, r2
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d03b      	beq.n	8017b4a <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 8017ad2:	2238      	movs	r2, #56	; 0x38
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	4668      	mov	r0, sp
 8017ad8:	f001 fa52 	bl	8018f80 <memset>
 8017adc:	f99d 3060 	ldrsb.w	r3, [sp, #96]	; 0x60
 8017ae0:	f88d 300c 	strb.w	r3, [sp, #12]
 8017ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017ae6:	9304      	str	r3, [sp, #16]
 8017ae8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8017aec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017af0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017af4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017af8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017afc:	3b01      	subs	r3, #1
 8017afe:	e9cd 9801 	strd	r9, r8, [sp, #4]
 8017b02:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8017b06:	2b04      	cmp	r3, #4
 8017b08:	d81f      	bhi.n	8017b4a <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 8017b0a:	e8df f003 	tbb	[pc, r3]
 8017b0e:	0306      	.short	0x0306
 8017b10:	1e21      	.short	0x1e21
 8017b12:	23          	.byte	0x23
 8017b13:	00          	.byte	0x00
 8017b14:	2302      	movs	r3, #2
 8017b16:	f88d 3001 	strb.w	r3, [sp, #1]
 8017b1a:	2c01      	cmp	r4, #1
 8017b1c:	d01c      	beq.n	8017b58 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xac>
 8017b1e:	2c02      	cmp	r4, #2
 8017b20:	d01a      	beq.n	8017b58 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xac>
 8017b22:	b994      	cbnz	r4, 8017b4a <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 8017b24:	f1ba 0f00 	cmp.w	sl, #0
 8017b28:	d102      	bne.n	8017b30 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x84>
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	f88d 3000 	strb.w	r3, [sp]
 8017b30:	2002      	movs	r0, #2
 8017b32:	f7f0 fc1f 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017b36:	f7f1 fb21 	bl	800917c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8017b3a:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 8017b3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b42:	f8d5 33e8 	ldr.w	r3, [r5, #1000]	; 0x3e8
 8017b46:	4668      	mov	r0, sp
 8017b48:	4798      	blx	r3
 8017b4a:	b00e      	add	sp, #56	; 0x38
 8017b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b50:	2301      	movs	r3, #1
 8017b52:	e7e0      	b.n	8017b16 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x6a>
 8017b54:	2304      	movs	r3, #4
 8017b56:	e7de      	b.n	8017b16 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x6a>
 8017b58:	f88d 4002 	strb.w	r4, [sp, #2]
 8017b5c:	e7e2      	b.n	8017b24 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x78>
 8017b5e:	bf00      	nop
 8017b60:	20000034 	.word	0x20000034

08017b64 <EMBENET_INTERNAL_TRACE_OnFreeSlots>:
 8017b64:	b410      	push	{r4}
 8017b66:	4c06      	ldr	r4, [pc, #24]	; (8017b80 <EMBENET_INTERNAL_TRACE_OnFreeSlots+0x1c>)
 8017b68:	6824      	ldr	r4, [r4, #0]
 8017b6a:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 8017b6e:	f8d4 43ec 	ldr.w	r4, [r4, #1004]	; 0x3ec
 8017b72:	b114      	cbz	r4, 8017b7a <EMBENET_INTERNAL_TRACE_OnFreeSlots+0x16>
 8017b74:	46a4      	mov	ip, r4
 8017b76:	bc10      	pop	{r4}
 8017b78:	4760      	bx	ip
 8017b7a:	bc10      	pop	{r4}
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop
 8017b80:	20000034 	.word	0x20000034

08017b84 <46cd3075e82ff8b9ea43a88054ba0b7b067be91a>:
 8017b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017b86:	2200      	movs	r2, #0
 8017b88:	2300      	movs	r3, #0
 8017b8a:	a904      	add	r1, sp, #16
 8017b8c:	f10d 0007 	add.w	r0, sp, #7
 8017b90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017b94:	f7f1 f808 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017b98:	b138      	cbz	r0, 8017baa <46cd3075e82ff8b9ea43a88054ba0b7b067be91a+0x26>
 8017b9a:	ab04      	add	r3, sp, #16
 8017b9c:	2207      	movs	r2, #7
 8017b9e:	a902      	add	r1, sp, #8
 8017ba0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017ba4:	5450      	strb	r0, [r2, r1]
 8017ba6:	3a01      	subs	r2, #1
 8017ba8:	d2fa      	bcs.n	8017ba0 <46cd3075e82ff8b9ea43a88054ba0b7b067be91a+0x1c>
 8017baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bae:	b007      	add	sp, #28
 8017bb0:	f85d fb04 	ldr.w	pc, [sp], #4

08017bb4 <b91c6940dbb3047c4c296403649f7867d9870dca>:
 8017bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bb6:	2100      	movs	r1, #0
 8017bb8:	f10d 0007 	add.w	r0, sp, #7
 8017bbc:	f7f0 fff4 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017bc0:	b148      	cbz	r0, 8017bd6 <b91c6940dbb3047c4c296403649f7867d9870dca+0x22>
 8017bc2:	a802      	add	r0, sp, #8
 8017bc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017bc8:	f7f0 fd44 	bl	8008654 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 8017bcc:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 8017bd0:	b005      	add	sp, #20
 8017bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bd6:	207f      	movs	r0, #127	; 0x7f
 8017bd8:	e7fa      	b.n	8017bd0 <b91c6940dbb3047c4c296403649f7867d9870dca+0x1c>

08017bda <EMBENET_NODE_DIAG_GetParentPDR>:
 8017bda:	b507      	push	{r0, r1, r2, lr}
 8017bdc:	2100      	movs	r1, #0
 8017bde:	f10d 0007 	add.w	r0, sp, #7
 8017be2:	f7f0 ffe1 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017be6:	b118      	cbz	r0, 8017bf0 <EMBENET_NODE_DIAG_GetParentPDR+0x16>
 8017be8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8017bec:	f7f0 fd52 	bl	8008694 <5b63cb34daec6664391bfc943c457a7558e21261>
 8017bf0:	b003      	add	sp, #12
 8017bf2:	f85d fb04 	ldr.w	pc, [sp], #4

08017bf6 <e4a3f9918fe69f73b1cc4210ec318e3c426e72f5>:
 8017bf6:	f7fe ba97 	b.w	8016128 <eada7656be7f8681f934187ead57a12001632399>

08017bfa <4f511565cdbba62bf97753c767d47da43943d7f0>:
 8017bfa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017bfc:	2100      	movs	r1, #0
 8017bfe:	2210      	movs	r2, #16
 8017c00:	f10d 0005 	add.w	r0, sp, #5
 8017c04:	f001 f9bc 	bl	8018f80 <memset>
 8017c08:	2302      	movs	r3, #2
 8017c0a:	f10d 0105 	add.w	r1, sp, #5
 8017c0e:	2000      	movs	r0, #0
 8017c10:	f88d 3004 	strb.w	r3, [sp, #4]
 8017c14:	f7f0 ffc8 	bl	8008ba8 <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017c18:	b110      	cbz	r0, 8017c20 <4f511565cdbba62bf97753c767d47da43943d7f0+0x26>
 8017c1a:	a801      	add	r0, sp, #4
 8017c1c:	f7f9 fd8a 	bl	8011734 <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8017c20:	b007      	add	sp, #28
 8017c22:	f85d fb04 	ldr.w	pc, [sp], #4

08017c26 <88f59cfa8d275ffe37bfcd0f1db7f0dfbfb0545b>:
 8017c26:	b507      	push	{r0, r1, r2, lr}
 8017c28:	2100      	movs	r1, #0
 8017c2a:	f10d 0006 	add.w	r0, sp, #6
 8017c2e:	f7f9 f98f 	bl	8010f50 <a8d9689c957cda0372b2d720a687974af26c85d2>
 8017c32:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017c36:	b003      	add	sp, #12
 8017c38:	f85d fb04 	ldr.w	pc, [sp], #4

08017c3c <13e346e7537b84bcd52c3cf47fef4ef9086039ba>:
 8017c3c:	b508      	push	{r3, lr}
 8017c3e:	2000      	movs	r0, #0
 8017c40:	f7f9 fd9a 	bl	8011778 <ee504f8deafedb03386eec1c989207132bd15110>
 8017c44:	b2c0      	uxtb	r0, r0
 8017c46:	bd08      	pop	{r3, pc}

08017c48 <bba0525c833a77ea6266641935ef62cce330e9a7>:
 8017c48:	b507      	push	{r0, r1, r2, lr}
 8017c4a:	2000      	movs	r0, #0
 8017c4c:	f10d 0106 	add.w	r1, sp, #6
 8017c50:	f7f9 f97e 	bl	8010f50 <a8d9689c957cda0372b2d720a687974af26c85d2>
 8017c54:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017c58:	b003      	add	sp, #12
 8017c5a:	f85d fb04 	ldr.w	pc, [sp], #4

08017c5e <6bb34e807caa6654eefd3984c9aa6bde2b5f1294>:
 8017c5e:	f7f8 bb1f 	b.w	80102a0 <57d2957de5f8b1f87a34ecc897e93650c3f2e297>

08017c62 <ef56437d1bfbf379203966c0ca60ce860a9e4040>:
 8017c62:	f7f8 bb35 	b.w	80102d0 <430fd23aeea8952b7b416b6590815371f1106b85>

08017c66 <33cb78c5ebdf85a72531cdf9a2db5897a43e9d27>:
 8017c66:	f7f8 bb4b 	b.w	8010300 <2a6c61bbc29fcf617904472e829df358a186c125>

08017c6a <EMBENET_NODE_DIAG_GetQueueThresholdAndOverflowCounters>:
 8017c6a:	b513      	push	{r0, r1, r4, lr}
 8017c6c:	4604      	mov	r4, r0
 8017c6e:	4668      	mov	r0, sp
 8017c70:	f7f2 fc44 	bl	800a4fc <QUEUE_GetDiagnosticsCounters>
 8017c74:	9b00      	ldr	r3, [sp, #0]
 8017c76:	6023      	str	r3, [r4, #0]
 8017c78:	9b01      	ldr	r3, [sp, #4]
 8017c7a:	6063      	str	r3, [r4, #4]
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	b002      	add	sp, #8
 8017c80:	bd10      	pop	{r4, pc}

08017c82 <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>:
 8017c82:	b508      	push	{r3, lr}
 8017c84:	f7f0 fc5a 	bl	800853c <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 8017c88:	bd08      	pop	{r3, pc}

08017c8a <EMBENET_NODE_DIAG_GetNeighborInfo>:
 8017c8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	4668      	mov	r0, sp
 8017c90:	f7f0 fc64 	bl	800855c <NEIGHBORS_GetNeighborInfo>
 8017c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c98:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017c9c:	8123      	strh	r3, [r4, #8]
 8017c9e:	e9c4 0100 	strd	r0, r1, [r4]
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	b004      	add	sp, #16
 8017ca6:	bd10      	pop	{r4, pc}

08017ca8 <EMBENET_NODE_DIAG_GetCellsCount>:
 8017ca8:	f7fa b884 	b.w	8011db4 <SCHEDULE_GetCellsCount>

08017cac <EMBENET_NODE_DIAG_GetCellInfo>:
 8017cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cb0:	b08d      	sub	sp, #52	; 0x34
 8017cb2:	4689      	mov	r9, r1
 8017cb4:	4604      	mov	r4, r0
 8017cb6:	f7f9 fa77 	bl	80111a8 <8342496502f723d085ab3cae139cfe28db3db880>
 8017cba:	466d      	mov	r5, sp
 8017cbc:	4607      	mov	r7, r0
 8017cbe:	2210      	movs	r2, #16
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	f001 f95c 	bl	8018f80 <memset>
 8017cc8:	2600      	movs	r6, #0
 8017cca:	46b0      	mov	r8, r6
 8017ccc:	b2b1      	uxth	r1, r6
 8017cce:	428f      	cmp	r7, r1
 8017cd0:	d933      	bls.n	8017d3a <EMBENET_NODE_DIAG_GetCellInfo+0x8e>
 8017cd2:	a804      	add	r0, sp, #16
 8017cd4:	f7f9 fc80 	bl	80115d8 <SCHEDULE_GetCellInfo>
 8017cd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d036      	beq.n	8017d4e <EMBENET_NODE_DIAG_GetCellInfo+0xa2>
 8017ce0:	45c8      	cmp	r8, r9
 8017ce2:	d132      	bne.n	8017d4a <EMBENET_NODE_DIAG_GetCellInfo+0x9e>
 8017ce4:	a904      	add	r1, sp, #16
 8017ce6:	4608      	mov	r0, r1
 8017ce8:	2208      	movs	r2, #8
 8017cea:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8017cee:	f800 6d01 	strb.w	r6, [r0, #-1]!
 8017cf2:	3a01      	subs	r2, #1
 8017cf4:	d1f9      	bne.n	8017cea <EMBENET_NODE_DIAG_GetCellInfo+0x3e>
 8017cf6:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8017cfa:	f88d 2005 	strb.w	r2, [sp, #5]
 8017cfe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017d02:	f88d 2004 	strb.w	r2, [sp, #4]
 8017d06:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017d0a:	f8ad 2002 	strh.w	r2, [sp, #2]
 8017d0e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8017d12:	1e51      	subs	r1, r2, #1
 8017d14:	2905      	cmp	r1, #5
 8017d16:	d804      	bhi.n	8017d22 <EMBENET_NODE_DIAG_GetCellInfo+0x76>
 8017d18:	e8df f001 	tbb	[pc, r1]
 8017d1c:	04040404 	.word	0x04040404
 8017d20:	0404      	.short	0x0404
 8017d22:	2200      	movs	r2, #0
 8017d24:	2b02      	cmp	r3, #2
 8017d26:	f88d 2000 	strb.w	r2, [sp]
 8017d2a:	d004      	beq.n	8017d36 <EMBENET_NODE_DIAG_GetCellInfo+0x8a>
 8017d2c:	2b03      	cmp	r3, #3
 8017d2e:	d002      	beq.n	8017d36 <EMBENET_NODE_DIAG_GetCellInfo+0x8a>
 8017d30:	1e5a      	subs	r2, r3, #1
 8017d32:	4253      	negs	r3, r2
 8017d34:	4153      	adcs	r3, r2
 8017d36:	f88d 3001 	strb.w	r3, [sp, #1]
 8017d3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017d42:	4620      	mov	r0, r4
 8017d44:	b00d      	add	sp, #52	; 0x34
 8017d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d4a:	f108 0801 	add.w	r8, r8, #1
 8017d4e:	3601      	adds	r6, #1
 8017d50:	e7bc      	b.n	8017ccc <EMBENET_NODE_DIAG_GetCellInfo+0x20>

08017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>:
 8017d52:	8803      	ldrh	r3, [r0, #0]
 8017d54:	ba5b      	rev16	r3, r3
 8017d56:	b570      	push	{r4, r5, r6, lr}
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	4614      	mov	r4, r2
 8017d5c:	188e      	adds	r6, r1, r2
 8017d5e:	2c01      	cmp	r4, #1
 8017d60:	eba6 0504 	sub.w	r5, r6, r4
 8017d64:	d80c      	bhi.n	8017d80 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x2e>
 8017d66:	07d4      	lsls	r4, r2, #31
 8017d68:	d504      	bpl.n	8017d74 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x22>
 8017d6a:	0852      	lsrs	r2, r2, #1
 8017d6c:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8017d70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017d74:	0c1a      	lsrs	r2, r3, #16
 8017d76:	d109      	bne.n	8017d8c <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x3a>
 8017d78:	0a1a      	lsrs	r2, r3, #8
 8017d7a:	7002      	strb	r2, [r0, #0]
 8017d7c:	7043      	strb	r3, [r0, #1]
 8017d7e:	bd70      	pop	{r4, r5, r6, pc}
 8017d80:	882d      	ldrh	r5, [r5, #0]
 8017d82:	ba6d      	rev16	r5, r5
 8017d84:	fa13 f385 	uxtah	r3, r3, r5
 8017d88:	3c02      	subs	r4, #2
 8017d8a:	e7e8      	b.n	8017d5e <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0xc>
 8017d8c:	fa12 f383 	uxtah	r3, r2, r3
 8017d90:	e7f0      	b.n	8017d74 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x22>

08017d92 <ADDR_GetLength.isra.0>:
 8017d92:	2807      	cmp	r0, #7
 8017d94:	d80f      	bhi.n	8017db6 <ADDR_GetLength.isra.0+0x24>
 8017d96:	2301      	movs	r3, #1
 8017d98:	fa03 f000 	lsl.w	r0, r3, r0
 8017d9c:	f010 0f92 	tst.w	r0, #146	; 0x92
 8017da0:	d10b      	bne.n	8017dba <ADDR_GetLength.isra.0+0x28>
 8017da2:	f010 0f48 	tst.w	r0, #72	; 0x48
 8017da6:	d10a      	bne.n	8017dbe <ADDR_GetLength.isra.0+0x2c>
 8017da8:	f010 0f24 	tst.w	r0, #36	; 0x24
 8017dac:	bf14      	ite	ne
 8017dae:	4618      	movne	r0, r3
 8017db0:	2000      	moveq	r0, #0
 8017db2:	00c0      	lsls	r0, r0, #3
 8017db4:	4770      	bx	lr
 8017db6:	2000      	movs	r0, #0
 8017db8:	4770      	bx	lr
 8017dba:	2002      	movs	r0, #2
 8017dbc:	4770      	bx	lr
 8017dbe:	2010      	movs	r0, #16
 8017dc0:	4770      	bx	lr

08017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>:
 8017dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dc4:	b087      	sub	sp, #28
 8017dc6:	460c      	mov	r4, r1
 8017dc8:	4616      	mov	r6, r2
 8017dca:	2100      	movs	r1, #0
 8017dcc:	2210      	movs	r2, #16
 8017dce:	4605      	mov	r5, r0
 8017dd0:	f10d 0005 	add.w	r0, sp, #5
 8017dd4:	461f      	mov	r7, r3
 8017dd6:	f001 f8d3 	bl	8018f80 <memset>
 8017dda:	4630      	mov	r0, r6
 8017ddc:	f7ff ffd9 	bl	8017d92 <ADDR_GetLength.isra.0>
 8017de0:	ab01      	add	r3, sp, #4
 8017de2:	4621      	mov	r1, r4
 8017de4:	eb04 0c00 	add.w	ip, r4, r0
 8017de8:	461a      	mov	r2, r3
 8017dea:	4561      	cmp	r1, ip
 8017dec:	d111      	bne.n	8017e12 <b35bcee5624976b5f696cb546804f9909547b46c+0x50>
 8017dee:	f88d 6004 	strb.w	r6, [sp, #4]
 8017df2:	462a      	mov	r2, r5
 8017df4:	ae05      	add	r6, sp, #20
 8017df6:	461c      	mov	r4, r3
 8017df8:	cc03      	ldmia	r4!, {r0, r1}
 8017dfa:	42b4      	cmp	r4, r6
 8017dfc:	6010      	str	r0, [r2, #0]
 8017dfe:	6051      	str	r1, [r2, #4]
 8017e00:	4623      	mov	r3, r4
 8017e02:	f102 0208 	add.w	r2, r2, #8
 8017e06:	d1f6      	bne.n	8017df6 <b35bcee5624976b5f696cb546804f9909547b46c+0x34>
 8017e08:	7823      	ldrb	r3, [r4, #0]
 8017e0a:	7013      	strb	r3, [r2, #0]
 8017e0c:	4628      	mov	r0, r5
 8017e0e:	b007      	add	sp, #28
 8017e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e12:	2f01      	cmp	r7, #1
 8017e14:	bf08      	it	eq
 8017e16:	eba0 0e02 	subeq.w	lr, r0, r2
 8017e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e1e:	bf14      	ite	ne
 8017e20:	7054      	strbne	r4, [r2, #1]
 8017e22:	f80e 4013 	strbeq.w	r4, [lr, r3, lsl #1]
 8017e26:	3201      	adds	r2, #1
 8017e28:	e7df      	b.n	8017dea <b35bcee5624976b5f696cb546804f9909547b46c+0x28>
	...

08017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>:
 8017e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e2e:	7a02      	ldrb	r2, [r0, #8]
 8017e30:	460b      	mov	r3, r1
 8017e32:	1851      	adds	r1, r2, r1
 8017e34:	29c0      	cmp	r1, #192	; 0xc0
 8017e36:	d90e      	bls.n	8017e56 <2c8c667690c01bde438685a4c74ee211f27a3939+0x2a>
 8017e38:	2103      	movs	r1, #3
 8017e3a:	9102      	str	r1, [sp, #8]
 8017e3c:	4909      	ldr	r1, [pc, #36]	; (8017e64 <2c8c667690c01bde438685a4c74ee211f27a3939+0x38>)
 8017e3e:	9103      	str	r1, [sp, #12]
 8017e40:	9200      	str	r2, [sp, #0]
 8017e42:	a904      	add	r1, sp, #16
 8017e44:	e911 0003 	ldmdb	r1, {r0, r1}
 8017e48:	4a07      	ldr	r2, [pc, #28]	; (8017e68 <2c8c667690c01bde438685a4c74ee211f27a3939+0x3c>)
 8017e4a:	f7f5 fbef 	bl	800d62c <LOGGER_PrintLine>
 8017e4e:	2000      	movs	r0, #0
 8017e50:	b005      	add	sp, #20
 8017e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e56:	6842      	ldr	r2, [r0, #4]
 8017e58:	7201      	strb	r1, [r0, #8]
 8017e5a:	1ad2      	subs	r2, r2, r3
 8017e5c:	6042      	str	r2, [r0, #4]
 8017e5e:	2001      	movs	r0, #1
 8017e60:	e7f6      	b.n	8017e50 <2c8c667690c01bde438685a4c74ee211f27a3939+0x24>
 8017e62:	bf00      	nop
 8017e64:	0801d7cc 	.word	0x0801d7cc
 8017e68:	0801d7dc 	.word	0x0801d7dc

08017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	4606      	mov	r6, r0
 8017e70:	7808      	ldrb	r0, [r1, #0]
 8017e72:	f7ff ff8e 	bl	8017d92 <ADDR_GetLength.isra.0>
 8017e76:	460c      	mov	r4, r1
 8017e78:	4617      	mov	r7, r2
 8017e7a:	4605      	mov	r5, r0
 8017e7c:	b2c1      	uxtb	r1, r0
 8017e7e:	4630      	mov	r0, r6
 8017e80:	f7ff ffd4 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017e84:	b127      	cbz	r7, 8017e90 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x24>
 8017e86:	442c      	add	r4, r5
 8017e88:	2300      	movs	r3, #0
 8017e8a:	42ab      	cmp	r3, r5
 8017e8c:	d107      	bne.n	8017e9e <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x32>
 8017e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e90:	6870      	ldr	r0, [r6, #4]
 8017e92:	462a      	mov	r2, r5
 8017e94:	1c61      	adds	r1, r4, #1
 8017e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e9a:	f001 b924 	b.w	80190e6 <memcpy>
 8017e9e:	6872      	ldr	r2, [r6, #4]
 8017ea0:	f814 1901 	ldrb.w	r1, [r4], #-1
 8017ea4:	54d1      	strb	r1, [r2, r3]
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	e7ef      	b.n	8017e8a <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x1e>
	...

08017eac <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>:
 8017eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017eae:	7a02      	ldrb	r2, [r0, #8]
 8017eb0:	428a      	cmp	r2, r1
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	d20b      	bcs.n	8017ed0 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x24>
 8017eb8:	2104      	movs	r1, #4
 8017eba:	9102      	str	r1, [sp, #8]
 8017ebc:	4908      	ldr	r1, [pc, #32]	; (8017ee0 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x34>)
 8017ebe:	9103      	str	r1, [sp, #12]
 8017ec0:	9200      	str	r2, [sp, #0]
 8017ec2:	a904      	add	r1, sp, #16
 8017ec4:	e911 0003 	ldmdb	r1, {r0, r1}
 8017ec8:	4a06      	ldr	r2, [pc, #24]	; (8017ee4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x38>)
 8017eca:	f7f5 fbaf 	bl	800d62c <LOGGER_PrintLine>
 8017ece:	7a23      	ldrb	r3, [r4, #8]
 8017ed0:	6862      	ldr	r2, [r4, #4]
 8017ed2:	441a      	add	r2, r3
 8017ed4:	6062      	str	r2, [r4, #4]
 8017ed6:	7a22      	ldrb	r2, [r4, #8]
 8017ed8:	1ad2      	subs	r2, r2, r3
 8017eda:	7222      	strb	r2, [r4, #8]
 8017edc:	b004      	add	sp, #16
 8017ede:	bd10      	pop	{r4, pc}
 8017ee0:	0801d7cc 	.word	0x0801d7cc
 8017ee4:	0801d826 	.word	0x0801d826

08017ee8 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d>:
 8017ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017eea:	460b      	mov	r3, r1
 8017eec:	7a01      	ldrb	r1, [r0, #8]
 8017eee:	18ca      	adds	r2, r1, r3
 8017ef0:	2ac0      	cmp	r2, #192	; 0xc0
 8017ef2:	d90e      	bls.n	8017f12 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x2a>
 8017ef4:	2203      	movs	r2, #3
 8017ef6:	9202      	str	r2, [sp, #8]
 8017ef8:	4a07      	ldr	r2, [pc, #28]	; (8017f18 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x30>)
 8017efa:	9203      	str	r2, [sp, #12]
 8017efc:	9100      	str	r1, [sp, #0]
 8017efe:	a904      	add	r1, sp, #16
 8017f00:	e911 0003 	ldmdb	r1, {r0, r1}
 8017f04:	4a05      	ldr	r2, [pc, #20]	; (8017f1c <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x34>)
 8017f06:	f7f5 fb91 	bl	800d62c <LOGGER_PrintLine>
 8017f0a:	2000      	movs	r0, #0
 8017f0c:	b005      	add	sp, #20
 8017f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f12:	7202      	strb	r2, [r0, #8]
 8017f14:	2001      	movs	r0, #1
 8017f16:	e7f9      	b.n	8017f0c <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x24>
 8017f18:	0801d7cc 	.word	0x0801d7cc
 8017f1c:	0801d856 	.word	0x0801d856

08017f20 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d>:
 8017f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f22:	7a02      	ldrb	r2, [r0, #8]
 8017f24:	428a      	cmp	r2, r1
 8017f26:	4604      	mov	r4, r0
 8017f28:	460b      	mov	r3, r1
 8017f2a:	d20b      	bcs.n	8017f44 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x24>
 8017f2c:	2104      	movs	r1, #4
 8017f2e:	9102      	str	r1, [sp, #8]
 8017f30:	4907      	ldr	r1, [pc, #28]	; (8017f50 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x30>)
 8017f32:	9103      	str	r1, [sp, #12]
 8017f34:	9200      	str	r2, [sp, #0]
 8017f36:	a904      	add	r1, sp, #16
 8017f38:	e911 0003 	ldmdb	r1, {r0, r1}
 8017f3c:	4a05      	ldr	r2, [pc, #20]	; (8017f54 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x34>)
 8017f3e:	f7f5 fb75 	bl	800d62c <LOGGER_PrintLine>
 8017f42:	7a23      	ldrb	r3, [r4, #8]
 8017f44:	7a22      	ldrb	r2, [r4, #8]
 8017f46:	1ad2      	subs	r2, r2, r3
 8017f48:	7222      	strb	r2, [r4, #8]
 8017f4a:	b004      	add	sp, #16
 8017f4c:	bd10      	pop	{r4, pc}
 8017f4e:	bf00      	nop
 8017f50:	0801d7cc 	.word	0x0801d7cc
 8017f54:	0801d8a0 	.word	0x0801d8a0

08017f58 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>:
 8017f58:	b538      	push	{r3, r4, r5, lr}
 8017f5a:	460c      	mov	r4, r1
 8017f5c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8017f60:	4605      	mov	r5, r0
 8017f62:	f001 f8c0 	bl	80190e6 <memcpy>
 8017f66:	6863      	ldr	r3, [r4, #4]
 8017f68:	1b1b      	subs	r3, r3, r4
 8017f6a:	442b      	add	r3, r5
 8017f6c:	606b      	str	r3, [r5, #4]
 8017f6e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8017f72:	b122      	cbz	r2, 8017f7e <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x26>
 8017f74:	6861      	ldr	r1, [r4, #4]
 8017f76:	1a52      	subs	r2, r2, r1
 8017f78:	441a      	add	r2, r3
 8017f7a:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
 8017f7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017f80:	b11a      	cbz	r2, 8017f8a <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x32>
 8017f82:	6861      	ldr	r1, [r4, #4]
 8017f84:	1a52      	subs	r2, r2, r1
 8017f86:	441a      	add	r2, r3
 8017f88:	65ea      	str	r2, [r5, #92]	; 0x5c
 8017f8a:	69a2      	ldr	r2, [r4, #24]
 8017f8c:	b11a      	cbz	r2, 8017f96 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x3e>
 8017f8e:	6861      	ldr	r1, [r4, #4]
 8017f90:	1a52      	subs	r2, r2, r1
 8017f92:	441a      	add	r2, r3
 8017f94:	61aa      	str	r2, [r5, #24]
 8017f96:	68e2      	ldr	r2, [r4, #12]
 8017f98:	b11a      	cbz	r2, 8017fa2 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x4a>
 8017f9a:	6861      	ldr	r1, [r4, #4]
 8017f9c:	1a52      	subs	r2, r2, r1
 8017f9e:	4413      	add	r3, r2
 8017fa0:	60eb      	str	r3, [r5, #12]
 8017fa2:	bd38      	pop	{r3, r4, r5, pc}

08017fa4 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>:
 8017fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa8:	b088      	sub	sp, #32
 8017faa:	4604      	mov	r4, r0
 8017fac:	461e      	mov	r6, r3
 8017fae:	301d      	adds	r0, #29
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	460d      	mov	r5, r1
 8017fb4:	4617      	mov	r7, r2
 8017fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017fba:	f7f1 f8b1 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017fbe:	f104 081e 	add.w	r8, r4, #30
 8017fc2:	2800      	cmp	r0, #0
 8017fc4:	d040      	beq.n	8018048 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e+0xa4>
 8017fc6:	f7f1 fc1f 	bl	8009808 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 8017fca:	2208      	movs	r2, #8
 8017fcc:	4601      	mov	r1, r0
 8017fce:	a801      	add	r0, sp, #4
 8017fd0:	f7ff febf 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8017fd4:	2302      	movs	r3, #2
 8017fd6:	f88d 300c 	strb.w	r3, [sp, #12]
 8017fda:	6833      	ldr	r3, [r6, #0]
 8017fdc:	f8cd 300d 	str.w	r3, [sp, #13]
 8017fe0:	6873      	ldr	r3, [r6, #4]
 8017fe2:	f8cd 3011 	str.w	r3, [sp, #17]
 8017fe6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017fea:	f083 0302 	eor.w	r3, r3, #2
 8017fee:	f88d 300d 	strb.w	r3, [sp, #13]
 8017ff2:	2208      	movs	r2, #8
 8017ff4:	f10d 010d 	add.w	r1, sp, #13
 8017ff8:	f7ff feab 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8017ffc:	4641      	mov	r1, r8
 8017ffe:	2210      	movs	r2, #16
 8018000:	f7ff fea7 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8018004:	2600      	movs	r6, #0
 8018006:	7a23      	ldrb	r3, [r4, #8]
 8018008:	f88d 3009 	strb.w	r3, [sp, #9]
 801800c:	a902      	add	r1, sp, #8
 801800e:	a801      	add	r0, sp, #4
 8018010:	2202      	movs	r2, #2
 8018012:	f88d 6008 	strb.w	r6, [sp, #8]
 8018016:	f7ff fe9c 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801801a:	7c23      	ldrb	r3, [r4, #16]
 801801c:	f88d 3009 	strb.w	r3, [sp, #9]
 8018020:	2202      	movs	r2, #2
 8018022:	f7ff fe96 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8018026:	702e      	strb	r6, [r5, #0]
 8018028:	706e      	strb	r6, [r5, #1]
 801802a:	7a22      	ldrb	r2, [r4, #8]
 801802c:	6861      	ldr	r1, [r4, #4]
 801802e:	f7ff fe90 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8018032:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018036:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801803a:	43db      	mvns	r3, r3
 801803c:	43d2      	mvns	r2, r2
 801803e:	702a      	strb	r2, [r5, #0]
 8018040:	706b      	strb	r3, [r5, #1]
 8018042:	b008      	add	sp, #32
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018048:	2208      	movs	r2, #8
 801804a:	4639      	mov	r1, r7
 801804c:	a801      	add	r0, sp, #4
 801804e:	f7ff fe80 	bl	8017d52 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 8018052:	2208      	movs	r2, #8
 8018054:	4631      	mov	r1, r6
 8018056:	e7cf      	b.n	8017ff8 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e+0x54>

08018058 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9>:
 8018058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801805a:	461e      	mov	r6, r3
 801805c:	070b      	lsls	r3, r1, #28
 801805e:	4604      	mov	r4, r0
 8018060:	460d      	mov	r5, r1
 8018062:	4610      	mov	r0, r2
 8018064:	d11c      	bne.n	80180a0 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x48>
 8018066:	f7ee f817 	bl	8006098 <EMBENET_AES128_SetKey>
 801806a:	f025 050f 	bic.w	r5, r5, #15
 801806e:	4425      	add	r5, r4
 8018070:	42ac      	cmp	r4, r5
 8018072:	d101      	bne.n	8018078 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x20>
 8018074:	2001      	movs	r0, #1
 8018076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018078:	4627      	mov	r7, r4
 801807a:	1e63      	subs	r3, r4, #1
 801807c:	3e01      	subs	r6, #1
 801807e:	f104 010f 	add.w	r1, r4, #15
 8018082:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8018086:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 801808a:	428b      	cmp	r3, r1
 801808c:	ea82 0200 	eor.w	r2, r2, r0
 8018090:	701a      	strb	r2, [r3, #0]
 8018092:	d1f6      	bne.n	8018082 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x2a>
 8018094:	4620      	mov	r0, r4
 8018096:	f7ee f859 	bl	800614c <EMBENET_AES128_Encrypt>
 801809a:	3410      	adds	r4, #16
 801809c:	463e      	mov	r6, r7
 801809e:	e7e7      	b.n	8018070 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x18>
 80180a0:	2000      	movs	r0, #0
 80180a2:	e7e8      	b.n	8018076 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x1e>

080180a4 <7bd9c690a28739e5b569f505b868904b38eb748d>:
 80180a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180a8:	461d      	mov	r5, r3
 80180aa:	070b      	lsls	r3, r1, #28
 80180ac:	4604      	mov	r4, r0
 80180ae:	b089      	sub	sp, #36	; 0x24
 80180b0:	460e      	mov	r6, r1
 80180b2:	4610      	mov	r0, r2
 80180b4:	d139      	bne.n	801812a <7bd9c690a28739e5b569f505b868904b38eb748d+0x86>
 80180b6:	f7ed ffef 	bl	8006098 <EMBENET_AES128_SetKey>
 80180ba:	aa04      	add	r2, sp, #16
 80180bc:	462b      	mov	r3, r5
 80180be:	f105 0c10 	add.w	ip, r5, #16
 80180c2:	4615      	mov	r5, r2
 80180c4:	6818      	ldr	r0, [r3, #0]
 80180c6:	6859      	ldr	r1, [r3, #4]
 80180c8:	4617      	mov	r7, r2
 80180ca:	c703      	stmia	r7!, {r0, r1}
 80180cc:	3308      	adds	r3, #8
 80180ce:	4563      	cmp	r3, ip
 80180d0:	463a      	mov	r2, r7
 80180d2:	d1f7      	bne.n	80180c4 <7bd9c690a28739e5b569f505b868904b38eb748d+0x20>
 80180d4:	f026 060f 	bic.w	r6, r6, #15
 80180d8:	4426      	add	r6, r4
 80180da:	42b4      	cmp	r4, r6
 80180dc:	d103      	bne.n	80180e6 <7bd9c690a28739e5b569f505b868904b38eb748d+0x42>
 80180de:	2001      	movs	r0, #1
 80180e0:	b009      	add	sp, #36	; 0x24
 80180e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180e6:	466a      	mov	r2, sp
 80180e8:	4623      	mov	r3, r4
 80180ea:	f104 0810 	add.w	r8, r4, #16
 80180ee:	4691      	mov	r9, r2
 80180f0:	6818      	ldr	r0, [r3, #0]
 80180f2:	6859      	ldr	r1, [r3, #4]
 80180f4:	4617      	mov	r7, r2
 80180f6:	c703      	stmia	r7!, {r0, r1}
 80180f8:	3308      	adds	r3, #8
 80180fa:	4543      	cmp	r3, r8
 80180fc:	463a      	mov	r2, r7
 80180fe:	d1f7      	bne.n	80180f0 <7bd9c690a28739e5b569f505b868904b38eb748d+0x4c>
 8018100:	4620      	mov	r0, r4
 8018102:	f7ee f847 	bl	8006194 <EMBENET_AES128_Decrypt>
 8018106:	1e63      	subs	r3, r4, #1
 8018108:	4629      	mov	r1, r5
 801810a:	340f      	adds	r4, #15
 801810c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8018110:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018114:	42a3      	cmp	r3, r4
 8018116:	ea82 0200 	eor.w	r2, r2, r0
 801811a:	701a      	strb	r2, [r3, #0]
 801811c:	d1f6      	bne.n	801810c <7bd9c690a28739e5b569f505b868904b38eb748d+0x68>
 801811e:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8018122:	4644      	mov	r4, r8
 8018124:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018128:	e7d7      	b.n	80180da <7bd9c690a28739e5b569f505b868904b38eb748d+0x36>
 801812a:	2000      	movs	r0, #0
 801812c:	e7d8      	b.n	80180e0 <7bd9c690a28739e5b569f505b868904b38eb748d+0x3c>

0801812e <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4>:
 801812e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018130:	4604      	mov	r4, r0
 8018132:	4610      	mov	r0, r2
 8018134:	460d      	mov	r5, r1
 8018136:	461e      	mov	r6, r3
 8018138:	f7ed ffae 	bl	8006098 <EMBENET_AES128_SetKey>
 801813c:	092d      	lsrs	r5, r5, #4
 801813e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8018142:	42ac      	cmp	r4, r5
 8018144:	d100      	bne.n	8018148 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x1a>
 8018146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018148:	4627      	mov	r7, r4
 801814a:	1e63      	subs	r3, r4, #1
 801814c:	3e01      	subs	r6, #1
 801814e:	f104 010f 	add.w	r1, r4, #15
 8018152:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8018156:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 801815a:	428b      	cmp	r3, r1
 801815c:	ea82 0200 	eor.w	r2, r2, r0
 8018160:	701a      	strb	r2, [r3, #0]
 8018162:	d1f6      	bne.n	8018152 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x24>
 8018164:	4620      	mov	r0, r4
 8018166:	f7ed fff1 	bl	800614c <EMBENET_AES128_Encrypt>
 801816a:	3410      	adds	r4, #16
 801816c:	463e      	mov	r6, r7
 801816e:	e7e8      	b.n	8018142 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x14>

08018170 <afb1b47dde9ef14d9001b2fa6458685ea404320d>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	b0bf      	sub	sp, #252	; 0xfc
 8018176:	4682      	mov	sl, r0
 8018178:	f89d 712c 	ldrb.w	r7, [sp, #300]	; 0x12c
 801817c:	9201      	str	r2, [sp, #4]
 801817e:	2f10      	cmp	r7, #16
 8018180:	4689      	mov	r9, r1
 8018182:	461d      	mov	r5, r3
 8018184:	f200 808f 	bhi.w	80182a6 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 8018188:	4e48      	ldr	r6, [pc, #288]	; (80182ac <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x13c>)
 801818a:	40fe      	lsrs	r6, r7
 801818c:	f016 0601 	ands.w	r6, r6, #1
 8018190:	f000 8081 	beq.w	8018296 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x126>
 8018194:	29bf      	cmp	r1, #191	; 0xbf
 8018196:	f200 8086 	bhi.w	80182a6 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 801819a:	2bbf      	cmp	r3, #191	; 0xbf
 801819c:	f200 8083 	bhi.w	80182a6 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 80181a0:	440b      	add	r3, r1
 80181a2:	2bbf      	cmp	r3, #191	; 0xbf
 80181a4:	dc7f      	bgt.n	80182a6 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 80181a6:	2210      	movs	r2, #16
 80181a8:	2100      	movs	r1, #0
 80181aa:	a802      	add	r0, sp, #8
 80181ac:	f000 fee8 	bl	8018f80 <memset>
 80181b0:	2f00      	cmp	r7, #0
 80181b2:	d074      	beq.n	801829e <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x12e>
 80181b4:	1ebb      	subs	r3, r7, #2
 80181b6:	009b      	lsls	r3, r3, #2
 80181b8:	f003 031c 	and.w	r3, r3, #28
 80181bc:	f1b9 0200 	subs.w	r2, r9, #0
 80181c0:	bf18      	it	ne
 80181c2:	2201      	movne	r2, #1
 80181c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80181c8:	f043 0301 	orr.w	r3, r3, #1
 80181cc:	f88d 3018 	strb.w	r3, [sp, #24]
 80181d0:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80181d2:	f10d 0219 	add.w	r2, sp, #25
 80181d6:	f103 010c 	add.w	r1, r3, #12
 80181da:	f853 0b04 	ldr.w	r0, [r3], #4
 80181de:	f842 0b04 	str.w	r0, [r2], #4
 80181e2:	428b      	cmp	r3, r1
 80181e4:	d1f9      	bne.n	80181da <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x6a>
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	7013      	strb	r3, [r2, #0]
 80181ea:	2300      	movs	r3, #0
 80181ec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80181f0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 80181f4:	f1b9 0f00 	cmp.w	r9, #0
 80181f8:	d053      	beq.n	80182a2 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x132>
 80181fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80181fe:	f88d 9029 	strb.w	r9, [sp, #41]	; 0x29
 8018202:	2012      	movs	r0, #18
 8018204:	eb00 0809 	add.w	r8, r0, r9
 8018208:	f1a8 0410 	sub.w	r4, r8, #16
 801820c:	fa5f fb88 	uxtb.w	fp, r8
 8018210:	f024 040f 	bic.w	r4, r4, #15
 8018214:	eba4 040b 	sub.w	r4, r4, fp
 8018218:	3420      	adds	r4, #32
 801821a:	b2e4      	uxtb	r4, r4
 801821c:	ab06      	add	r3, sp, #24
 801821e:	2c10      	cmp	r4, #16
 8018220:	464a      	mov	r2, r9
 8018222:	4651      	mov	r1, sl
 8018224:	4418      	add	r0, r3
 8018226:	bf08      	it	eq
 8018228:	2400      	moveq	r4, #0
 801822a:	f000 ff5c 	bl	80190e6 <memcpy>
 801822e:	ab06      	add	r3, sp, #24
 8018230:	4622      	mov	r2, r4
 8018232:	2100      	movs	r1, #0
 8018234:	eb03 0008 	add.w	r0, r3, r8
 8018238:	f000 fea2 	bl	8018f80 <memset>
 801823c:	eb0b 0004 	add.w	r0, fp, r4
 8018240:	f005 04f0 	and.w	r4, r5, #240	; 0xf0
 8018244:	3410      	adds	r4, #16
 8018246:	1b64      	subs	r4, r4, r5
 8018248:	b2e4      	uxtb	r4, r4
 801824a:	ab06      	add	r3, sp, #24
 801824c:	2c10      	cmp	r4, #16
 801824e:	462a      	mov	r2, r5
 8018250:	9901      	ldr	r1, [sp, #4]
 8018252:	fa5f f980 	uxtb.w	r9, r0
 8018256:	fa53 f080 	uxtab	r0, r3, r0
 801825a:	bf08      	it	eq
 801825c:	2400      	moveq	r4, #0
 801825e:	f000 ff42 	bl	80190e6 <memcpy>
 8018262:	eb05 0009 	add.w	r0, r5, r9
 8018266:	b2c5      	uxtb	r5, r0
 8018268:	4622      	mov	r2, r4
 801826a:	ab06      	add	r3, sp, #24
 801826c:	442c      	add	r4, r5
 801826e:	2100      	movs	r1, #0
 8018270:	fa53 f080 	uxtab	r0, r3, r0
 8018274:	b2e4      	uxtb	r4, r4
 8018276:	f000 fe83 	bl	8018f80 <memset>
 801827a:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801827c:	ab02      	add	r3, sp, #8
 801827e:	4621      	mov	r1, r4
 8018280:	a806      	add	r0, sp, #24
 8018282:	f7ff ff54 	bl	801812e <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4>
 8018286:	f1a4 0110 	sub.w	r1, r4, #16
 801828a:	ab06      	add	r3, sp, #24
 801828c:	984a      	ldr	r0, [sp, #296]	; 0x128
 801828e:	463a      	mov	r2, r7
 8018290:	4419      	add	r1, r3
 8018292:	f000 ff28 	bl	80190e6 <memcpy>
 8018296:	4630      	mov	r0, r6
 8018298:	b03f      	add	sp, #252	; 0xfc
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	463b      	mov	r3, r7
 80182a0:	e78c      	b.n	80181bc <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x4c>
 80182a2:	2010      	movs	r0, #16
 80182a4:	e7ae      	b.n	8018204 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x94>
 80182a6:	2600      	movs	r6, #0
 80182a8:	e7f5      	b.n	8018296 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x126>
 80182aa:	bf00      	nop
 80182ac:	00010111 	.word	0x00010111

080182b0 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe>:
 80182b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80182b4:	4604      	mov	r4, r0
 80182b6:	4610      	mov	r0, r2
 80182b8:	460d      	mov	r5, r1
 80182ba:	461e      	mov	r6, r3
 80182bc:	f7ed feec 	bl	8006098 <EMBENET_AES128_SetKey>
 80182c0:	092d      	lsrs	r5, r5, #4
 80182c2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80182c6:	f106 0810 	add.w	r8, r6, #16
 80182ca:	42ac      	cmp	r4, r5
 80182cc:	d102      	bne.n	80182d4 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x24>
 80182ce:	b004      	add	sp, #16
 80182d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d4:	466a      	mov	r2, sp
 80182d6:	4633      	mov	r3, r6
 80182d8:	4617      	mov	r7, r2
 80182da:	6818      	ldr	r0, [r3, #0]
 80182dc:	6859      	ldr	r1, [r3, #4]
 80182de:	4694      	mov	ip, r2
 80182e0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80182e4:	3308      	adds	r3, #8
 80182e6:	4543      	cmp	r3, r8
 80182e8:	4662      	mov	r2, ip
 80182ea:	d1f6      	bne.n	80182da <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x2a>
 80182ec:	4638      	mov	r0, r7
 80182ee:	f7ed ff2d 	bl	800614c <EMBENET_AES128_Encrypt>
 80182f2:	4623      	mov	r3, r4
 80182f4:	3410      	adds	r4, #16
 80182f6:	781a      	ldrb	r2, [r3, #0]
 80182f8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80182fc:	404a      	eors	r2, r1
 80182fe:	f803 2b01 	strb.w	r2, [r3], #1
 8018302:	42a3      	cmp	r3, r4
 8018304:	d1f7      	bne.n	80182f6 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x46>
 8018306:	4643      	mov	r3, r8
 8018308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801830c:	3201      	adds	r2, #1
 801830e:	b2d2      	uxtb	r2, r2
 8018310:	701a      	strb	r2, [r3, #0]
 8018312:	2a00      	cmp	r2, #0
 8018314:	d1d9      	bne.n	80182ca <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x1a>
 8018316:	429e      	cmp	r6, r3
 8018318:	d1f6      	bne.n	8018308 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x58>
 801831a:	e7d6      	b.n	80182ca <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x1a>

0801831c <144f524432c105f7c5419591e43846e21bcf1b67>:
 801831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018320:	b0b9      	sub	sp, #228	; 0xe4
 8018322:	4680      	mov	r8, r0
 8018324:	f89d 710c 	ldrb.w	r7, [sp, #268]	; 0x10c
 8018328:	2f10      	cmp	r7, #16
 801832a:	460e      	mov	r6, r1
 801832c:	4699      	mov	r9, r3
 801832e:	d852      	bhi.n	80183d6 <144f524432c105f7c5419591e43846e21bcf1b67+0xba>
 8018330:	4d2a      	ldr	r5, [pc, #168]	; (80183dc <144f524432c105f7c5419591e43846e21bcf1b67+0xc0>)
 8018332:	40fd      	lsrs	r5, r7
 8018334:	f015 0501 	ands.w	r5, r5, #1
 8018338:	d049      	beq.n	80183ce <144f524432c105f7c5419591e43846e21bcf1b67+0xb2>
 801833a:	29bf      	cmp	r1, #191	; 0xbf
 801833c:	d84b      	bhi.n	80183d6 <144f524432c105f7c5419591e43846e21bcf1b67+0xba>
 801833e:	2301      	movs	r3, #1
 8018340:	f88d 3000 	strb.w	r3, [sp]
 8018344:	f102 010c 	add.w	r1, r2, #12
 8018348:	446b      	add	r3, sp
 801834a:	f852 0b04 	ldr.w	r0, [r2], #4
 801834e:	f843 0b04 	str.w	r0, [r3], #4
 8018352:	428a      	cmp	r2, r1
 8018354:	d1f9      	bne.n	801834a <144f524432c105f7c5419591e43846e21bcf1b67+0x2e>
 8018356:	7812      	ldrb	r2, [r2, #0]
 8018358:	701a      	strb	r2, [r3, #0]
 801835a:	f006 04f0 	and.w	r4, r6, #240	; 0xf0
 801835e:	f04f 0b00 	mov.w	fp, #0
 8018362:	9942      	ldr	r1, [sp, #264]	; 0x108
 8018364:	f8ad b00e 	strh.w	fp, [sp, #14]
 8018368:	463a      	mov	r2, r7
 801836a:	a804      	add	r0, sp, #16
 801836c:	3410      	adds	r4, #16
 801836e:	f000 feba 	bl	80190e6 <memcpy>
 8018372:	1ba4      	subs	r4, r4, r6
 8018374:	ab04      	add	r3, sp, #16
 8018376:	b2e4      	uxtb	r4, r4
 8018378:	19d8      	adds	r0, r3, r7
 801837a:	f1c7 0210 	rsb	r2, r7, #16
 801837e:	4659      	mov	r1, fp
 8018380:	f000 fdfe 	bl	8018f80 <memset>
 8018384:	2c10      	cmp	r4, #16
 8018386:	4632      	mov	r2, r6
 8018388:	4641      	mov	r1, r8
 801838a:	a808      	add	r0, sp, #32
 801838c:	bf08      	it	eq
 801838e:	465c      	moveq	r4, fp
 8018390:	f000 fea9 	bl	80190e6 <memcpy>
 8018394:	ab04      	add	r3, sp, #16
 8018396:	f106 0010 	add.w	r0, r6, #16
 801839a:	fa5f fa80 	uxtb.w	sl, r0
 801839e:	4622      	mov	r2, r4
 80183a0:	4659      	mov	r1, fp
 80183a2:	fa53 f080 	uxtab	r0, r3, r0
 80183a6:	f000 fdeb 	bl	8018f80 <memset>
 80183aa:	eb0a 0104 	add.w	r1, sl, r4
 80183ae:	466b      	mov	r3, sp
 80183b0:	464a      	mov	r2, r9
 80183b2:	b2c9      	uxtb	r1, r1
 80183b4:	a804      	add	r0, sp, #16
 80183b6:	f7ff ff7b 	bl	80182b0 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe>
 80183ba:	4632      	mov	r2, r6
 80183bc:	a908      	add	r1, sp, #32
 80183be:	4640      	mov	r0, r8
 80183c0:	f000 fe91 	bl	80190e6 <memcpy>
 80183c4:	9842      	ldr	r0, [sp, #264]	; 0x108
 80183c6:	463a      	mov	r2, r7
 80183c8:	a904      	add	r1, sp, #16
 80183ca:	f000 fe8c 	bl	80190e6 <memcpy>
 80183ce:	4628      	mov	r0, r5
 80183d0:	b039      	add	sp, #228	; 0xe4
 80183d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183d6:	2500      	movs	r5, #0
 80183d8:	e7f9      	b.n	80183ce <144f524432c105f7c5419591e43846e21bcf1b67+0xb2>
 80183da:	bf00      	nop
 80183dc:	00010111 	.word	0x00010111

080183e0 <71097e204b694049f5c66ccd9b138d3a4c93df13>:
 80183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e4:	b08d      	sub	sp, #52	; 0x34
 80183e6:	4681      	mov	r9, r0
 80183e8:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80183ec:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80183f0:	2d10      	cmp	r5, #16
 80183f2:	468a      	mov	sl, r1
 80183f4:	4616      	mov	r6, r2
 80183f6:	461f      	mov	r7, r3
 80183f8:	d903      	bls.n	8018402 <71097e204b694049f5c66ccd9b138d3a4c93df13+0x22>
 80183fa:	2000      	movs	r0, #0
 80183fc:	b00d      	add	sp, #52	; 0x34
 80183fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018402:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8018406:	2b02      	cmp	r3, #2
 8018408:	d1f7      	bne.n	80183fa <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 801840a:	783c      	ldrb	r4, [r7, #0]
 801840c:	1b64      	subs	r4, r4, r5
 801840e:	b2e4      	uxtb	r4, r4
 8018410:	f10d 0810 	add.w	r8, sp, #16
 8018414:	462a      	mov	r2, r5
 8018416:	1931      	adds	r1, r6, r4
 8018418:	703c      	strb	r4, [r7, #0]
 801841a:	4640      	mov	r0, r8
 801841c:	f000 fe63 	bl	80190e6 <memcpy>
 8018420:	e9cd 8500 	strd	r8, r5, [sp]
 8018424:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018426:	465b      	mov	r3, fp
 8018428:	4621      	mov	r1, r4
 801842a:	4630      	mov	r0, r6
 801842c:	f7ff ff76 	bl	801831c <144f524432c105f7c5419591e43846e21bcf1b67>
 8018430:	2800      	cmp	r0, #0
 8018432:	d0e2      	beq.n	80183fa <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 8018434:	ac08      	add	r4, sp, #32
 8018436:	e9cd b401 	strd	fp, r4, [sp, #4]
 801843a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801843c:	9503      	str	r5, [sp, #12]
 801843e:	9300      	str	r3, [sp, #0]
 8018440:	783b      	ldrb	r3, [r7, #0]
 8018442:	4632      	mov	r2, r6
 8018444:	4651      	mov	r1, sl
 8018446:	4648      	mov	r0, r9
 8018448:	f7ff fe92 	bl	8018170 <afb1b47dde9ef14d9001b2fa6458685ea404320d>
 801844c:	2800      	cmp	r0, #0
 801844e:	d0d4      	beq.n	80183fa <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 8018450:	462a      	mov	r2, r5
 8018452:	4621      	mov	r1, r4
 8018454:	4640      	mov	r0, r8
 8018456:	f000 fd69 	bl	8018f2c <memcmp>
 801845a:	fab0 f080 	clz	r0, r0
 801845e:	0940      	lsrs	r0, r0, #5
 8018460:	e7cc      	b.n	80183fc <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1c>

08018462 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d>:
 8018462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018466:	b089      	sub	sp, #36	; 0x24
 8018468:	4690      	mov	r8, r2
 801846a:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801846e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018470:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8018474:	2d10      	cmp	r5, #16
 8018476:	461c      	mov	r4, r3
 8018478:	d904      	bls.n	8018484 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x22>
 801847a:	2600      	movs	r6, #0
 801847c:	4630      	mov	r0, r6
 801847e:	b009      	add	sp, #36	; 0x24
 8018480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018484:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018488:	2b02      	cmp	r3, #2
 801848a:	d1f6      	bne.n	801847a <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 801848c:	af04      	add	r7, sp, #16
 801848e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8018492:	9503      	str	r5, [sp, #12]
 8018494:	9600      	str	r6, [sp, #0]
 8018496:	7823      	ldrb	r3, [r4, #0]
 8018498:	f7ff fe6a 	bl	8018170 <afb1b47dde9ef14d9001b2fa6458685ea404320d>
 801849c:	2800      	cmp	r0, #0
 801849e:	d0ec      	beq.n	801847a <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 80184a0:	e9cd 7500 	strd	r7, r5, [sp]
 80184a4:	4632      	mov	r2, r6
 80184a6:	7821      	ldrb	r1, [r4, #0]
 80184a8:	464b      	mov	r3, r9
 80184aa:	4640      	mov	r0, r8
 80184ac:	f7ff ff36 	bl	801831c <144f524432c105f7c5419591e43846e21bcf1b67>
 80184b0:	4606      	mov	r6, r0
 80184b2:	2800      	cmp	r0, #0
 80184b4:	d0e1      	beq.n	801847a <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 80184b6:	7820      	ldrb	r0, [r4, #0]
 80184b8:	462a      	mov	r2, r5
 80184ba:	4639      	mov	r1, r7
 80184bc:	4440      	add	r0, r8
 80184be:	f000 fe12 	bl	80190e6 <memcpy>
 80184c2:	7823      	ldrb	r3, [r4, #0]
 80184c4:	441d      	add	r5, r3
 80184c6:	7025      	strb	r5, [r4, #0]
 80184c8:	e7d8      	b.n	801847c <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x1a>
	...

080184cc <984b363f625cd8cdfbde20196ca1e6fa15d151b4>:
 80184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	b085      	sub	sp, #20
 80184d2:	2902      	cmp	r1, #2
 80184d4:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80184d8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80184dc:	9301      	str	r3, [sp, #4]
 80184de:	4604      	mov	r4, r0
 80184e0:	460e      	mov	r6, r1
 80184e2:	4692      	mov	sl, r2
 80184e4:	d065      	beq.n	80185b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xe6>
 80184e6:	f1b8 0900 	subs.w	r9, r8, #0
 80184ea:	bf18      	it	ne
 80184ec:	f04f 0901 	movne.w	r9, #1
 80184f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80184f2:	f7f0 fe15 	bl	8009120 <2de8c5d05f60c15cf061eba17324436038284da6>
 80184f6:	6863      	ldr	r3, [r4, #4]
 80184f8:	f894 50a1 	ldrb.w	r5, [r4, #161]	; 0xa1
 80184fc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80184fe:	4607      	mov	r7, r0
 8018500:	f1ba 0f00 	cmp.w	sl, #0
 8018504:	d058      	beq.n	80185b8 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xec>
 8018506:	2102      	movs	r1, #2
 8018508:	4620      	mov	r0, r4
 801850a:	f7ff fc8f 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801850e:	2800      	cmp	r0, #0
 8018510:	d04b      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 8018512:	6863      	ldr	r3, [r4, #4]
 8018514:	2200      	movs	r2, #0
 8018516:	701a      	strb	r2, [r3, #0]
 8018518:	6863      	ldr	r3, [r4, #4]
 801851a:	223f      	movs	r2, #63	; 0x3f
 801851c:	705a      	strb	r2, [r3, #1]
 801851e:	2e02      	cmp	r6, #2
 8018520:	d11a      	bne.n	8018558 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x8c>
 8018522:	4631      	mov	r1, r6
 8018524:	4620      	mov	r0, r4
 8018526:	f7ff fc81 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801852a:	2800      	cmp	r0, #0
 801852c:	d03d      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801852e:	f3cb 030b 	ubfx	r3, fp, #0, #12
 8018532:	f1bb 0f00 	cmp.w	fp, #0
 8018536:	bfb8      	it	lt
 8018538:	ea6f 4343 	mvnlt.w	r3, r3, lsl #17
 801853c:	6862      	ldr	r2, [r4, #4]
 801853e:	bfb8      	it	lt
 8018540:	ea6f 4353 	mvnlt.w	r3, r3, lsr #17
 8018544:	8013      	strh	r3, [r2, #0]
 8018546:	2102      	movs	r1, #2
 8018548:	4620      	mov	r0, r4
 801854a:	f7ff fc6f 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801854e:	b360      	cbz	r0, 80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 8018550:	6863      	ldr	r3, [r4, #4]
 8018552:	f640 7202 	movw	r2, #3842	; 0xf02
 8018556:	801a      	strh	r2, [r3, #0]
 8018558:	f1b8 0f00 	cmp.w	r8, #0
 801855c:	d016      	beq.n	801858c <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xc0>
 801855e:	f898 1010 	ldrb.w	r1, [r8, #16]
 8018562:	4620      	mov	r0, r4
 8018564:	f7ff fc62 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018568:	b1f8      	cbz	r0, 80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801856a:	4641      	mov	r1, r8
 801856c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018570:	6860      	ldr	r0, [r4, #4]
 8018572:	f000 fdb8 	bl	80190e6 <memcpy>
 8018576:	2102      	movs	r1, #2
 8018578:	4620      	mov	r0, r4
 801857a:	f7ff fc57 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801857e:	b1a0      	cbz	r0, 80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 8018580:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018584:	6862      	ldr	r2, [r4, #4]
 8018586:	f443 6378 	orr.w	r3, r3, #3968	; 0xf80
 801858a:	8013      	strh	r3, [r2, #0]
 801858c:	b31d      	cbz	r5, 80185d6 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x10a>
 801858e:	4620      	mov	r0, r4
 8018590:	f7f5 fe54 	bl	800e23c <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c>
 8018594:	b9f8      	cbnz	r0, 80185d6 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x10a>
 8018596:	2301      	movs	r3, #1
 8018598:	9302      	str	r3, [sp, #8]
 801859a:	4b50      	ldr	r3, [pc, #320]	; (80186dc <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x210>)
 801859c:	9303      	str	r3, [sp, #12]
 801859e:	ab04      	add	r3, sp, #16
 80185a0:	e913 0003 	ldmdb	r3, {r0, r1}
 80185a4:	4a4e      	ldr	r2, [pc, #312]	; (80186e0 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x214>)
 80185a6:	f7f5 f841 	bl	800d62c <LOGGER_PrintLine>
 80185aa:	2000      	movs	r0, #0
 80185ac:	b005      	add	sp, #20
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185b2:	f04f 0901 	mov.w	r9, #1
 80185b6:	e79b      	b.n	80184f0 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x24>
 80185b8:	7a23      	ldrb	r3, [r4, #8]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d0af      	beq.n	801851e <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x52>
 80185be:	f1b9 0f00 	cmp.w	r9, #0
 80185c2:	d0ac      	beq.n	801851e <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x52>
 80185c4:	2102      	movs	r1, #2
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7ff fc30 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185cc:	2800      	cmp	r0, #0
 80185ce:	d0ec      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 80185d0:	6863      	ldr	r3, [r4, #4]
 80185d2:	2280      	movs	r2, #128	; 0x80
 80185d4:	e79f      	b.n	8018516 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x4a>
 80185d6:	2002      	movs	r0, #2
 80185d8:	f7ef fecc 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80185dc:	2201      	movs	r2, #1
 80185de:	4601      	mov	r1, r0
 80185e0:	4620      	mov	r0, r4
 80185e2:	f7ff fc43 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80185e6:	2f00      	cmp	r7, #0
 80185e8:	d033      	beq.n	8018652 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x186>
 80185ea:	2101      	movs	r1, #1
 80185ec:	4620      	mov	r0, r4
 80185ee:	f7ff fc1d 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185f2:	2800      	cmp	r0, #0
 80185f4:	d0d9      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 80185f6:	6863      	ldr	r3, [r4, #4]
 80185f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80185fc:	f883 8000 	strb.w	r8, [r3]
 8018600:	2101      	movs	r1, #1
 8018602:	4620      	mov	r0, r4
 8018604:	f7ff fc12 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018608:	2800      	cmp	r0, #0
 801860a:	d0ce      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801860c:	6863      	ldr	r3, [r4, #4]
 801860e:	f883 8000 	strb.w	r8, [r3]
 8018612:	2004      	movs	r0, #4
 8018614:	f7ef feae 	bl	8008374 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018618:	2201      	movs	r2, #1
 801861a:	4601      	mov	r1, r0
 801861c:	4620      	mov	r0, r4
 801861e:	f7ff fc25 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018622:	2101      	movs	r1, #1
 8018624:	4620      	mov	r0, r4
 8018626:	f7ff fc01 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801862a:	2800      	cmp	r0, #0
 801862c:	d0bd      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801862e:	6863      	ldr	r3, [r4, #4]
 8018630:	9a01      	ldr	r2, [sp, #4]
 8018632:	701a      	strb	r2, [r3, #0]
 8018634:	2101      	movs	r1, #1
 8018636:	4620      	mov	r0, r4
 8018638:	f7ff fbf8 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 801863c:	2800      	cmp	r0, #0
 801863e:	d0b4      	beq.n	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 8018640:	bb07      	cbnz	r7, 8018684 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b8>
 8018642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	2b01      	cmp	r3, #1
 8018648:	d01c      	beq.n	8018684 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b8>
 801864a:	2b02      	cmp	r3, #2
 801864c:	d041      	beq.n	80186d2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x206>
 801864e:	22a1      	movs	r2, #161	; 0xa1
 8018650:	e014      	b.n	801867c <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b0>
 8018652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018654:	781b      	ldrb	r3, [r3, #0]
 8018656:	1e5a      	subs	r2, r3, #1
 8018658:	2a01      	cmp	r2, #1
 801865a:	d805      	bhi.n	8018668 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x19c>
 801865c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801865e:	2201      	movs	r2, #1
 8018660:	4620      	mov	r0, r4
 8018662:	f7ff fc03 	bl	8017e6c <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018666:	e7d4      	b.n	8018612 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x146>
 8018668:	4a1c      	ldr	r2, [pc, #112]	; (80186dc <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x210>)
 801866a:	9203      	str	r2, [sp, #12]
 801866c:	9702      	str	r7, [sp, #8]
 801866e:	a904      	add	r1, sp, #16
 8018670:	4a1c      	ldr	r2, [pc, #112]	; (80186e4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x218>)
 8018672:	e911 0003 	ldmdb	r1, {r0, r1}
 8018676:	f7f4 ffd9 	bl	800d62c <LOGGER_PrintLine>
 801867a:	2282      	movs	r2, #130	; 0x82
 801867c:	491a      	ldr	r1, [pc, #104]	; (80186e8 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x21c>)
 801867e:	481b      	ldr	r0, [pc, #108]	; (80186ec <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x220>)
 8018680:	f7e8 ff86 	bl	8001590 <EXPECT_OnAbortHandler>
 8018684:	f04f 0802 	mov.w	r8, #2
 8018688:	2308      	movs	r3, #8
 801868a:	f1ba 0f00 	cmp.w	sl, #0
 801868e:	bf18      	it	ne
 8018690:	f04f 0901 	movne.w	r9, #1
 8018694:	6862      	ldr	r2, [r4, #4]
 8018696:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
 801869a:	f063 031f 	orn	r3, r3, #31
 801869e:	7013      	strb	r3, [r2, #0]
 80186a0:	2101      	movs	r1, #1
 80186a2:	4620      	mov	r0, r4
 80186a4:	f7ff fbc2 	bl	8017e2c <2c8c667690c01bde438685a4c74ee211f27a3939>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	f43f af7e 	beq.w	80185aa <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 80186ae:	3d00      	subs	r5, #0
 80186b0:	bf18      	it	ne
 80186b2:	2501      	movne	r5, #1
 80186b4:	2e02      	cmp	r6, #2
 80186b6:	ea46 05c5 	orr.w	r5, r6, r5, lsl #3
 80186ba:	d002      	beq.n	80186c2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1f6>
 80186bc:	b90f      	cbnz	r7, 80186c2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1f6>
 80186be:	f045 0520 	orr.w	r5, r5, #32
 80186c2:	6863      	ldr	r3, [r4, #4]
 80186c4:	f1b8 0f02 	cmp.w	r8, #2
 80186c8:	bf08      	it	eq
 80186ca:	f045 0540 	orreq.w	r5, r5, #64	; 0x40
 80186ce:	701d      	strb	r5, [r3, #0]
 80186d0:	e76c      	b.n	80185ac <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xe0>
 80186d2:	f04f 0803 	mov.w	r8, #3
 80186d6:	230c      	movs	r3, #12
 80186d8:	e7d7      	b.n	801868a <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1be>
 80186da:	bf00      	nop
 80186dc:	0801d8d0 	.word	0x0801d8d0
 80186e0:	0801d8db 	.word	0x0801d8db
 80186e4:	0801d8fc 	.word	0x0801d8fc
 80186e8:	0801d913 	.word	0x0801d913
 80186ec:	0801a8f2 	.word	0x0801a8f2

080186f0 <93646682ea820ae310ba1b54d0fccca9d773749e>:
 80186f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186f2:	2300      	movs	r3, #0
 80186f4:	800b      	strh	r3, [r1, #0]
 80186f6:	650b      	str	r3, [r1, #80]	; 0x50
 80186f8:	6843      	ldr	r3, [r0, #4]
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	f003 0207 	and.w	r2, r3, #7
 8018700:	708a      	strb	r2, [r1, #2]
 8018702:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8018706:	70ca      	strb	r2, [r1, #3]
 8018708:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801870c:	710a      	strb	r2, [r1, #4]
 801870e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8018712:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018716:	718b      	strb	r3, [r1, #6]
 8018718:	2301      	movs	r3, #1
 801871a:	714a      	strb	r2, [r1, #5]
 801871c:	704b      	strb	r3, [r1, #1]
 801871e:	7a03      	ldrb	r3, [r0, #8]
 8018720:	b087      	sub	sp, #28
 8018722:	4605      	mov	r5, r0
 8018724:	460c      	mov	r4, r1
 8018726:	2b00      	cmp	r3, #0
 8018728:	f000 808b 	beq.w	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801872c:	6843      	ldr	r3, [r0, #4]
 801872e:	785b      	ldrb	r3, [r3, #1]
 8018730:	f3c3 0040 	ubfx	r0, r3, #1, #1
 8018734:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8018738:	71c8      	strb	r0, [r1, #7]
 801873a:	720a      	strb	r2, [r1, #8]
 801873c:	f003 0101 	and.w	r1, r3, #1
 8018740:	72a1      	strb	r1, [r4, #10]
 8018742:	b108      	cbz	r0, 8018748 <93646682ea820ae310ba1b54d0fccca9d773749e+0x58>
 8018744:	2a02      	cmp	r2, #2
 8018746:	d17c      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018748:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801874c:	2a02      	cmp	r2, #2
 801874e:	d056      	beq.n	80187fe <93646682ea820ae310ba1b54d0fccca9d773749e+0x10e>
 8018750:	2a03      	cmp	r2, #3
 8018752:	d056      	beq.n	8018802 <93646682ea820ae310ba1b54d0fccca9d773749e+0x112>
 8018754:	2a00      	cmp	r2, #0
 8018756:	d174      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018758:	099b      	lsrs	r3, r3, #6
 801875a:	2b02      	cmp	r3, #2
 801875c:	7722      	strb	r2, [r4, #28]
 801875e:	d052      	beq.n	8018806 <93646682ea820ae310ba1b54d0fccca9d773749e+0x116>
 8018760:	2b03      	cmp	r3, #3
 8018762:	d052      	beq.n	801880a <93646682ea820ae310ba1b54d0fccca9d773749e+0x11a>
 8018764:	2b00      	cmp	r3, #0
 8018766:	d16c      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018768:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801876c:	2302      	movs	r3, #2
 801876e:	7063      	strb	r3, [r4, #1]
 8018770:	b939      	cbnz	r1, 8018782 <93646682ea820ae310ba1b54d0fccca9d773749e+0x92>
 8018772:	7a2b      	ldrb	r3, [r5, #8]
 8018774:	2b01      	cmp	r3, #1
 8018776:	d964      	bls.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018778:	686b      	ldr	r3, [r5, #4]
 801877a:	789b      	ldrb	r3, [r3, #2]
 801877c:	7263      	strb	r3, [r4, #9]
 801877e:	2303      	movs	r3, #3
 8018780:	7063      	strb	r3, [r4, #1]
 8018782:	7861      	ldrb	r1, [r4, #1]
 8018784:	7a2b      	ldrb	r3, [r5, #8]
 8018786:	428b      	cmp	r3, r1
 8018788:	d35b      	bcc.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801878a:	6868      	ldr	r0, [r5, #4]
 801878c:	2301      	movs	r3, #1
 801878e:	2204      	movs	r2, #4
 8018790:	4401      	add	r1, r0
 8018792:	4668      	mov	r0, sp
 8018794:	f7ff fb15 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8018798:	ae04      	add	r6, sp, #16
 801879a:	466a      	mov	r2, sp
 801879c:	f104 030b 	add.w	r3, r4, #11
 80187a0:	f852 1b04 	ldr.w	r1, [r2], #4
 80187a4:	f843 1b04 	str.w	r1, [r3], #4
 80187a8:	42b2      	cmp	r2, r6
 80187aa:	d1f9      	bne.n	80187a0 <93646682ea820ae310ba1b54d0fccca9d773749e+0xb0>
 80187ac:	7832      	ldrb	r2, [r6, #0]
 80187ae:	701a      	strb	r2, [r3, #0]
 80187b0:	7861      	ldrb	r1, [r4, #1]
 80187b2:	3102      	adds	r1, #2
 80187b4:	b2c9      	uxtb	r1, r1
 80187b6:	7061      	strb	r1, [r4, #1]
 80187b8:	7a2b      	ldrb	r3, [r5, #8]
 80187ba:	428b      	cmp	r3, r1
 80187bc:	d341      	bcc.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80187be:	7f22      	ldrb	r2, [r4, #28]
 80187c0:	2a01      	cmp	r2, #1
 80187c2:	d024      	beq.n	801880e <93646682ea820ae310ba1b54d0fccca9d773749e+0x11e>
 80187c4:	2a02      	cmp	r2, #2
 80187c6:	d03e      	beq.n	8018846 <93646682ea820ae310ba1b54d0fccca9d773749e+0x156>
 80187c8:	2a00      	cmp	r2, #0
 80187ca:	d13a      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80187cc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80187d0:	2a01      	cmp	r2, #1
 80187d2:	d04e      	beq.n	8018872 <93646682ea820ae310ba1b54d0fccca9d773749e+0x182>
 80187d4:	2a02      	cmp	r2, #2
 80187d6:	d066      	beq.n	80188a6 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1b6>
 80187d8:	2a00      	cmp	r2, #0
 80187da:	d132      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80187dc:	79e3      	ldrb	r3, [r4, #7]
 80187de:	b113      	cbz	r3, 80187e6 <93646682ea820ae310ba1b54d0fccca9d773749e+0xf6>
 80187e0:	7a23      	ldrb	r3, [r4, #8]
 80187e2:	2b02      	cmp	r3, #2
 80187e4:	d12d      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80187e6:	78e3      	ldrb	r3, [r4, #3]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d171      	bne.n	80188d0 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1e0>
 80187ec:	79e3      	ldrb	r3, [r4, #7]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	f040 80b2 	bne.w	8018958 <93646682ea820ae310ba1b54d0fccca9d773749e+0x268>
 80187f4:	7862      	ldrb	r2, [r4, #1]
 80187f6:	686b      	ldr	r3, [r5, #4]
 80187f8:	4413      	add	r3, r2
 80187fa:	65eb      	str	r3, [r5, #92]	; 0x5c
 80187fc:	e0a7      	b.n	801894e <93646682ea820ae310ba1b54d0fccca9d773749e+0x25e>
 80187fe:	2201      	movs	r2, #1
 8018800:	e7aa      	b.n	8018758 <93646682ea820ae310ba1b54d0fccca9d773749e+0x68>
 8018802:	2202      	movs	r2, #2
 8018804:	e7a8      	b.n	8018758 <93646682ea820ae310ba1b54d0fccca9d773749e+0x68>
 8018806:	2301      	movs	r3, #1
 8018808:	e7ae      	b.n	8018768 <93646682ea820ae310ba1b54d0fccca9d773749e+0x78>
 801880a:	2302      	movs	r3, #2
 801880c:	e7ac      	b.n	8018768 <93646682ea820ae310ba1b54d0fccca9d773749e+0x78>
 801880e:	6868      	ldr	r0, [r5, #4]
 8018810:	4613      	mov	r3, r2
 8018812:	4401      	add	r1, r0
 8018814:	4668      	mov	r0, sp
 8018816:	f7ff fad4 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 801881a:	466b      	mov	r3, sp
 801881c:	f104 021c 	add.w	r2, r4, #28
 8018820:	6818      	ldr	r0, [r3, #0]
 8018822:	6859      	ldr	r1, [r3, #4]
 8018824:	4617      	mov	r7, r2
 8018826:	c703      	stmia	r7!, {r0, r1}
 8018828:	3308      	adds	r3, #8
 801882a:	42b3      	cmp	r3, r6
 801882c:	463a      	mov	r2, r7
 801882e:	d1f7      	bne.n	8018820 <93646682ea820ae310ba1b54d0fccca9d773749e+0x130>
 8018830:	7833      	ldrb	r3, [r6, #0]
 8018832:	703b      	strb	r3, [r7, #0]
 8018834:	7863      	ldrb	r3, [r4, #1]
 8018836:	3302      	adds	r3, #2
 8018838:	b2db      	uxtb	r3, r3
 801883a:	7063      	strb	r3, [r4, #1]
 801883c:	7a2a      	ldrb	r2, [r5, #8]
 801883e:	429a      	cmp	r2, r3
 8018840:	d2c4      	bcs.n	80187cc <93646682ea820ae310ba1b54d0fccca9d773749e+0xdc>
 8018842:	b007      	add	sp, #28
 8018844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018846:	6868      	ldr	r0, [r5, #4]
 8018848:	2301      	movs	r3, #1
 801884a:	4401      	add	r1, r0
 801884c:	4668      	mov	r0, sp
 801884e:	f7ff fab8 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8018852:	466b      	mov	r3, sp
 8018854:	f104 021c 	add.w	r2, r4, #28
 8018858:	6818      	ldr	r0, [r3, #0]
 801885a:	6859      	ldr	r1, [r3, #4]
 801885c:	4617      	mov	r7, r2
 801885e:	c703      	stmia	r7!, {r0, r1}
 8018860:	3308      	adds	r3, #8
 8018862:	42b3      	cmp	r3, r6
 8018864:	463a      	mov	r2, r7
 8018866:	d1f7      	bne.n	8018858 <93646682ea820ae310ba1b54d0fccca9d773749e+0x168>
 8018868:	7833      	ldrb	r3, [r6, #0]
 801886a:	703b      	strb	r3, [r7, #0]
 801886c:	7863      	ldrb	r3, [r4, #1]
 801886e:	3308      	adds	r3, #8
 8018870:	e7e2      	b.n	8018838 <93646682ea820ae310ba1b54d0fccca9d773749e+0x148>
 8018872:	6868      	ldr	r0, [r5, #4]
 8018874:	7861      	ldrb	r1, [r4, #1]
 8018876:	4613      	mov	r3, r2
 8018878:	4401      	add	r1, r0
 801887a:	4668      	mov	r0, sp
 801887c:	f7ff faa1 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 8018880:	466b      	mov	r3, sp
 8018882:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8018886:	f853 1b04 	ldr.w	r1, [r3], #4
 801888a:	f842 1b04 	str.w	r1, [r2], #4
 801888e:	42b3      	cmp	r3, r6
 8018890:	d1f9      	bne.n	8018886 <93646682ea820ae310ba1b54d0fccca9d773749e+0x196>
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	7013      	strb	r3, [r2, #0]
 8018896:	7863      	ldrb	r3, [r4, #1]
 8018898:	3302      	adds	r3, #2
 801889a:	b2db      	uxtb	r3, r3
 801889c:	7063      	strb	r3, [r4, #1]
 801889e:	7a2a      	ldrb	r2, [r5, #8]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d29b      	bcs.n	80187dc <93646682ea820ae310ba1b54d0fccca9d773749e+0xec>
 80188a4:	e7cd      	b.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80188a6:	6868      	ldr	r0, [r5, #4]
 80188a8:	7861      	ldrb	r1, [r4, #1]
 80188aa:	2301      	movs	r3, #1
 80188ac:	4401      	add	r1, r0
 80188ae:	4668      	mov	r0, sp
 80188b0:	f7ff fa87 	bl	8017dc2 <b35bcee5624976b5f696cb546804f9909547b46c>
 80188b4:	466b      	mov	r3, sp
 80188b6:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 80188ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80188be:	f842 1b04 	str.w	r1, [r2], #4
 80188c2:	42b3      	cmp	r3, r6
 80188c4:	d1f9      	bne.n	80188ba <93646682ea820ae310ba1b54d0fccca9d773749e+0x1ca>
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	7013      	strb	r3, [r2, #0]
 80188ca:	7863      	ldrb	r3, [r4, #1]
 80188cc:	3308      	adds	r3, #8
 80188ce:	e7e4      	b.n	801889a <93646682ea820ae310ba1b54d0fccca9d773749e+0x1aa>
 80188d0:	4621      	mov	r1, r4
 80188d2:	4628      	mov	r0, r5
 80188d4:	f7f5 fd6a 	bl	800e3ac <245bc706add2545900df78a3f141ff0f80e5adf9>
 80188d8:	2800      	cmp	r0, #0
 80188da:	d187      	bne.n	80187ec <93646682ea820ae310ba1b54d0fccca9d773749e+0xfc>
 80188dc:	e7b1      	b.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80188de:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 80188e2:	d101      	bne.n	80188e8 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1f8>
 80188e4:	2300      	movs	r3, #0
 80188e6:	e049      	b.n	801897c <93646682ea820ae310ba1b54d0fccca9d773749e+0x28c>
 80188e8:	2a00      	cmp	r2, #0
 80188ea:	dbaa      	blt.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80188ec:	f002 077f 	and.w	r7, r2, #127	; 0x7f
 80188f0:	11d2      	asrs	r2, r2, #7
 80188f2:	2a1e      	cmp	r2, #30
 80188f4:	d011      	beq.n	801891a <93646682ea820ae310ba1b54d0fccca9d773749e+0x22a>
 80188f6:	2a1f      	cmp	r2, #31
 80188f8:	d1a3      	bne.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80188fa:	2f10      	cmp	r7, #16
 80188fc:	dca1      	bgt.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 80188fe:	6869      	ldr	r1, [r5, #4]
 8018900:	4431      	add	r1, r6
 8018902:	443e      	add	r6, r7
 8018904:	b2f6      	uxtb	r6, r6
 8018906:	463a      	mov	r2, r7
 8018908:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801890c:	f000 fbeb 	bl	80190e6 <memcpy>
 8018910:	6527      	str	r7, [r4, #80]	; 0x50
 8018912:	7066      	strb	r6, [r4, #1]
 8018914:	686b      	ldr	r3, [r5, #4]
 8018916:	4433      	add	r3, r6
 8018918:	e011      	b.n	801893e <93646682ea820ae310ba1b54d0fccca9d773749e+0x24e>
 801891a:	686b      	ldr	r3, [r5, #4]
 801891c:	5b9b      	ldrh	r3, [r3, r6]
 801891e:	051a      	lsls	r2, r3, #20
 8018920:	bf44      	itt	mi
 8018922:	ea6f 5303 	mvnmi.w	r3, r3, lsl #20
 8018926:	ea6f 5313 	mvnmi.w	r3, r3, lsr #20
 801892a:	4437      	add	r7, r6
 801892c:	bf4c      	ite	mi
 801892e:	b21b      	sxthmi	r3, r3
 8018930:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 8018934:	b2ff      	uxtb	r7, r7
 8018936:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8018938:	7067      	strb	r7, [r4, #1]
 801893a:	686b      	ldr	r3, [r5, #4]
 801893c:	443b      	add	r3, r7
 801893e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8018940:	f895 10b5 	ldrb.w	r1, [r5, #181]	; 0xb5
 8018944:	7a2b      	ldrb	r3, [r5, #8]
 8018946:	7862      	ldrb	r2, [r4, #1]
 8018948:	1a5b      	subs	r3, r3, r1
 801894a:	429a      	cmp	r2, r3
 801894c:	d102      	bne.n	8018954 <93646682ea820ae310ba1b54d0fccca9d773749e+0x264>
 801894e:	2301      	movs	r3, #1
 8018950:	7023      	strb	r3, [r4, #0]
 8018952:	e776      	b.n	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018954:	f73f af75 	bgt.w	8018842 <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 8018958:	7866      	ldrb	r6, [r4, #1]
 801895a:	686b      	ldr	r3, [r5, #4]
 801895c:	1c72      	adds	r2, r6, #1
 801895e:	b2d2      	uxtb	r2, r2
 8018960:	5d9b      	ldrb	r3, [r3, r6]
 8018962:	7062      	strb	r2, [r4, #1]
 8018964:	6869      	ldr	r1, [r5, #4]
 8018966:	5c8a      	ldrb	r2, [r1, r2]
 8018968:	3602      	adds	r6, #2
 801896a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801896e:	b2f6      	uxtb	r6, r6
 8018970:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8018974:	b21a      	sxth	r2, r3
 8018976:	7066      	strb	r6, [r4, #1]
 8018978:	d1b1      	bne.n	80188de <93646682ea820ae310ba1b54d0fccca9d773749e+0x1ee>
 801897a:	2301      	movs	r3, #1
 801897c:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
 8018980:	e738      	b.n	80187f4 <93646682ea820ae310ba1b54d0fccca9d773749e+0x104>
	...

08018984 <sbrk_aligned>:
 8018984:	b570      	push	{r4, r5, r6, lr}
 8018986:	4e0e      	ldr	r6, [pc, #56]	; (80189c0 <sbrk_aligned+0x3c>)
 8018988:	460c      	mov	r4, r1
 801898a:	6831      	ldr	r1, [r6, #0]
 801898c:	4605      	mov	r5, r0
 801898e:	b911      	cbnz	r1, 8018996 <sbrk_aligned+0x12>
 8018990:	f000 fb58 	bl	8019044 <_sbrk_r>
 8018994:	6030      	str	r0, [r6, #0]
 8018996:	4621      	mov	r1, r4
 8018998:	4628      	mov	r0, r5
 801899a:	f000 fb53 	bl	8019044 <_sbrk_r>
 801899e:	1c43      	adds	r3, r0, #1
 80189a0:	d00a      	beq.n	80189b8 <sbrk_aligned+0x34>
 80189a2:	1cc4      	adds	r4, r0, #3
 80189a4:	f024 0403 	bic.w	r4, r4, #3
 80189a8:	42a0      	cmp	r0, r4
 80189aa:	d007      	beq.n	80189bc <sbrk_aligned+0x38>
 80189ac:	1a21      	subs	r1, r4, r0
 80189ae:	4628      	mov	r0, r5
 80189b0:	f000 fb48 	bl	8019044 <_sbrk_r>
 80189b4:	3001      	adds	r0, #1
 80189b6:	d101      	bne.n	80189bc <sbrk_aligned+0x38>
 80189b8:	f04f 34ff 	mov.w	r4, #4294967295
 80189bc:	4620      	mov	r0, r4
 80189be:	bd70      	pop	{r4, r5, r6, pc}
 80189c0:	2000419c 	.word	0x2000419c

080189c4 <_malloc_r>:
 80189c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c8:	1ccd      	adds	r5, r1, #3
 80189ca:	f025 0503 	bic.w	r5, r5, #3
 80189ce:	3508      	adds	r5, #8
 80189d0:	2d0c      	cmp	r5, #12
 80189d2:	bf38      	it	cc
 80189d4:	250c      	movcc	r5, #12
 80189d6:	2d00      	cmp	r5, #0
 80189d8:	4607      	mov	r7, r0
 80189da:	db01      	blt.n	80189e0 <_malloc_r+0x1c>
 80189dc:	42a9      	cmp	r1, r5
 80189de:	d905      	bls.n	80189ec <_malloc_r+0x28>
 80189e0:	230c      	movs	r3, #12
 80189e2:	603b      	str	r3, [r7, #0]
 80189e4:	2600      	movs	r6, #0
 80189e6:	4630      	mov	r0, r6
 80189e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018ac0 <_malloc_r+0xfc>
 80189f0:	f000 f868 	bl	8018ac4 <__malloc_lock>
 80189f4:	f8d8 3000 	ldr.w	r3, [r8]
 80189f8:	461c      	mov	r4, r3
 80189fa:	bb5c      	cbnz	r4, 8018a54 <_malloc_r+0x90>
 80189fc:	4629      	mov	r1, r5
 80189fe:	4638      	mov	r0, r7
 8018a00:	f7ff ffc0 	bl	8018984 <sbrk_aligned>
 8018a04:	1c43      	adds	r3, r0, #1
 8018a06:	4604      	mov	r4, r0
 8018a08:	d155      	bne.n	8018ab6 <_malloc_r+0xf2>
 8018a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8018a0e:	4626      	mov	r6, r4
 8018a10:	2e00      	cmp	r6, #0
 8018a12:	d145      	bne.n	8018aa0 <_malloc_r+0xdc>
 8018a14:	2c00      	cmp	r4, #0
 8018a16:	d048      	beq.n	8018aaa <_malloc_r+0xe6>
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	4631      	mov	r1, r6
 8018a1c:	4638      	mov	r0, r7
 8018a1e:	eb04 0903 	add.w	r9, r4, r3
 8018a22:	f000 fb0f 	bl	8019044 <_sbrk_r>
 8018a26:	4581      	cmp	r9, r0
 8018a28:	d13f      	bne.n	8018aaa <_malloc_r+0xe6>
 8018a2a:	6821      	ldr	r1, [r4, #0]
 8018a2c:	1a6d      	subs	r5, r5, r1
 8018a2e:	4629      	mov	r1, r5
 8018a30:	4638      	mov	r0, r7
 8018a32:	f7ff ffa7 	bl	8018984 <sbrk_aligned>
 8018a36:	3001      	adds	r0, #1
 8018a38:	d037      	beq.n	8018aaa <_malloc_r+0xe6>
 8018a3a:	6823      	ldr	r3, [r4, #0]
 8018a3c:	442b      	add	r3, r5
 8018a3e:	6023      	str	r3, [r4, #0]
 8018a40:	f8d8 3000 	ldr.w	r3, [r8]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d038      	beq.n	8018aba <_malloc_r+0xf6>
 8018a48:	685a      	ldr	r2, [r3, #4]
 8018a4a:	42a2      	cmp	r2, r4
 8018a4c:	d12b      	bne.n	8018aa6 <_malloc_r+0xe2>
 8018a4e:	2200      	movs	r2, #0
 8018a50:	605a      	str	r2, [r3, #4]
 8018a52:	e00f      	b.n	8018a74 <_malloc_r+0xb0>
 8018a54:	6822      	ldr	r2, [r4, #0]
 8018a56:	1b52      	subs	r2, r2, r5
 8018a58:	d41f      	bmi.n	8018a9a <_malloc_r+0xd6>
 8018a5a:	2a0b      	cmp	r2, #11
 8018a5c:	d917      	bls.n	8018a8e <_malloc_r+0xca>
 8018a5e:	1961      	adds	r1, r4, r5
 8018a60:	42a3      	cmp	r3, r4
 8018a62:	6025      	str	r5, [r4, #0]
 8018a64:	bf18      	it	ne
 8018a66:	6059      	strne	r1, [r3, #4]
 8018a68:	6863      	ldr	r3, [r4, #4]
 8018a6a:	bf08      	it	eq
 8018a6c:	f8c8 1000 	streq.w	r1, [r8]
 8018a70:	5162      	str	r2, [r4, r5]
 8018a72:	604b      	str	r3, [r1, #4]
 8018a74:	4638      	mov	r0, r7
 8018a76:	f104 060b 	add.w	r6, r4, #11
 8018a7a:	f000 f829 	bl	8018ad0 <__malloc_unlock>
 8018a7e:	f026 0607 	bic.w	r6, r6, #7
 8018a82:	1d23      	adds	r3, r4, #4
 8018a84:	1af2      	subs	r2, r6, r3
 8018a86:	d0ae      	beq.n	80189e6 <_malloc_r+0x22>
 8018a88:	1b9b      	subs	r3, r3, r6
 8018a8a:	50a3      	str	r3, [r4, r2]
 8018a8c:	e7ab      	b.n	80189e6 <_malloc_r+0x22>
 8018a8e:	42a3      	cmp	r3, r4
 8018a90:	6862      	ldr	r2, [r4, #4]
 8018a92:	d1dd      	bne.n	8018a50 <_malloc_r+0x8c>
 8018a94:	f8c8 2000 	str.w	r2, [r8]
 8018a98:	e7ec      	b.n	8018a74 <_malloc_r+0xb0>
 8018a9a:	4623      	mov	r3, r4
 8018a9c:	6864      	ldr	r4, [r4, #4]
 8018a9e:	e7ac      	b.n	80189fa <_malloc_r+0x36>
 8018aa0:	4634      	mov	r4, r6
 8018aa2:	6876      	ldr	r6, [r6, #4]
 8018aa4:	e7b4      	b.n	8018a10 <_malloc_r+0x4c>
 8018aa6:	4613      	mov	r3, r2
 8018aa8:	e7cc      	b.n	8018a44 <_malloc_r+0x80>
 8018aaa:	230c      	movs	r3, #12
 8018aac:	603b      	str	r3, [r7, #0]
 8018aae:	4638      	mov	r0, r7
 8018ab0:	f000 f80e 	bl	8018ad0 <__malloc_unlock>
 8018ab4:	e797      	b.n	80189e6 <_malloc_r+0x22>
 8018ab6:	6025      	str	r5, [r4, #0]
 8018ab8:	e7dc      	b.n	8018a74 <_malloc_r+0xb0>
 8018aba:	605b      	str	r3, [r3, #4]
 8018abc:	deff      	udf	#255	; 0xff
 8018abe:	bf00      	nop
 8018ac0:	20004198 	.word	0x20004198

08018ac4 <__malloc_lock>:
 8018ac4:	4801      	ldr	r0, [pc, #4]	; (8018acc <__malloc_lock+0x8>)
 8018ac6:	f000 bb04 	b.w	80190d2 <__retarget_lock_acquire_recursive>
 8018aca:	bf00      	nop
 8018acc:	200042e0 	.word	0x200042e0

08018ad0 <__malloc_unlock>:
 8018ad0:	4801      	ldr	r0, [pc, #4]	; (8018ad8 <__malloc_unlock+0x8>)
 8018ad2:	f000 baff 	b.w	80190d4 <__retarget_lock_release_recursive>
 8018ad6:	bf00      	nop
 8018ad8:	200042e0 	.word	0x200042e0

08018adc <std>:
 8018adc:	2300      	movs	r3, #0
 8018ade:	b510      	push	{r4, lr}
 8018ae0:	4604      	mov	r4, r0
 8018ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8018ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018aea:	6083      	str	r3, [r0, #8]
 8018aec:	8181      	strh	r1, [r0, #12]
 8018aee:	6643      	str	r3, [r0, #100]	; 0x64
 8018af0:	81c2      	strh	r2, [r0, #14]
 8018af2:	6183      	str	r3, [r0, #24]
 8018af4:	4619      	mov	r1, r3
 8018af6:	2208      	movs	r2, #8
 8018af8:	305c      	adds	r0, #92	; 0x5c
 8018afa:	f000 fa41 	bl	8018f80 <memset>
 8018afe:	4b0d      	ldr	r3, [pc, #52]	; (8018b34 <std+0x58>)
 8018b00:	6263      	str	r3, [r4, #36]	; 0x24
 8018b02:	4b0d      	ldr	r3, [pc, #52]	; (8018b38 <std+0x5c>)
 8018b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8018b06:	4b0d      	ldr	r3, [pc, #52]	; (8018b3c <std+0x60>)
 8018b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018b0a:	4b0d      	ldr	r3, [pc, #52]	; (8018b40 <std+0x64>)
 8018b0c:	6323      	str	r3, [r4, #48]	; 0x30
 8018b0e:	4b0d      	ldr	r3, [pc, #52]	; (8018b44 <std+0x68>)
 8018b10:	6224      	str	r4, [r4, #32]
 8018b12:	429c      	cmp	r4, r3
 8018b14:	d006      	beq.n	8018b24 <std+0x48>
 8018b16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018b1a:	4294      	cmp	r4, r2
 8018b1c:	d002      	beq.n	8018b24 <std+0x48>
 8018b1e:	33d0      	adds	r3, #208	; 0xd0
 8018b20:	429c      	cmp	r4, r3
 8018b22:	d105      	bne.n	8018b30 <std+0x54>
 8018b24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b2c:	f000 bad0 	b.w	80190d0 <__retarget_lock_init_recursive>
 8018b30:	bd10      	pop	{r4, pc}
 8018b32:	bf00      	nop
 8018b34:	08018d7d 	.word	0x08018d7d
 8018b38:	08018d9f 	.word	0x08018d9f
 8018b3c:	08018dd7 	.word	0x08018dd7
 8018b40:	08018dfb 	.word	0x08018dfb
 8018b44:	200041a0 	.word	0x200041a0

08018b48 <stdio_exit_handler>:
 8018b48:	4a02      	ldr	r2, [pc, #8]	; (8018b54 <stdio_exit_handler+0xc>)
 8018b4a:	4903      	ldr	r1, [pc, #12]	; (8018b58 <stdio_exit_handler+0x10>)
 8018b4c:	4803      	ldr	r0, [pc, #12]	; (8018b5c <stdio_exit_handler+0x14>)
 8018b4e:	f000 b869 	b.w	8018c24 <_fwalk_sglue>
 8018b52:	bf00      	nop
 8018b54:	20000038 	.word	0x20000038
 8018b58:	08019af1 	.word	0x08019af1
 8018b5c:	20000044 	.word	0x20000044

08018b60 <cleanup_stdio>:
 8018b60:	6841      	ldr	r1, [r0, #4]
 8018b62:	4b0c      	ldr	r3, [pc, #48]	; (8018b94 <cleanup_stdio+0x34>)
 8018b64:	4299      	cmp	r1, r3
 8018b66:	b510      	push	{r4, lr}
 8018b68:	4604      	mov	r4, r0
 8018b6a:	d001      	beq.n	8018b70 <cleanup_stdio+0x10>
 8018b6c:	f000 ffc0 	bl	8019af0 <_fflush_r>
 8018b70:	68a1      	ldr	r1, [r4, #8]
 8018b72:	4b09      	ldr	r3, [pc, #36]	; (8018b98 <cleanup_stdio+0x38>)
 8018b74:	4299      	cmp	r1, r3
 8018b76:	d002      	beq.n	8018b7e <cleanup_stdio+0x1e>
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f000 ffb9 	bl	8019af0 <_fflush_r>
 8018b7e:	68e1      	ldr	r1, [r4, #12]
 8018b80:	4b06      	ldr	r3, [pc, #24]	; (8018b9c <cleanup_stdio+0x3c>)
 8018b82:	4299      	cmp	r1, r3
 8018b84:	d004      	beq.n	8018b90 <cleanup_stdio+0x30>
 8018b86:	4620      	mov	r0, r4
 8018b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b8c:	f000 bfb0 	b.w	8019af0 <_fflush_r>
 8018b90:	bd10      	pop	{r4, pc}
 8018b92:	bf00      	nop
 8018b94:	200041a0 	.word	0x200041a0
 8018b98:	20004208 	.word	0x20004208
 8018b9c:	20004270 	.word	0x20004270

08018ba0 <global_stdio_init.part.0>:
 8018ba0:	b510      	push	{r4, lr}
 8018ba2:	4b0b      	ldr	r3, [pc, #44]	; (8018bd0 <global_stdio_init.part.0+0x30>)
 8018ba4:	4c0b      	ldr	r4, [pc, #44]	; (8018bd4 <global_stdio_init.part.0+0x34>)
 8018ba6:	4a0c      	ldr	r2, [pc, #48]	; (8018bd8 <global_stdio_init.part.0+0x38>)
 8018ba8:	601a      	str	r2, [r3, #0]
 8018baa:	4620      	mov	r0, r4
 8018bac:	2200      	movs	r2, #0
 8018bae:	2104      	movs	r1, #4
 8018bb0:	f7ff ff94 	bl	8018adc <std>
 8018bb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018bb8:	2201      	movs	r2, #1
 8018bba:	2109      	movs	r1, #9
 8018bbc:	f7ff ff8e 	bl	8018adc <std>
 8018bc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018bc4:	2202      	movs	r2, #2
 8018bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bca:	2112      	movs	r1, #18
 8018bcc:	f7ff bf86 	b.w	8018adc <std>
 8018bd0:	200042d8 	.word	0x200042d8
 8018bd4:	200041a0 	.word	0x200041a0
 8018bd8:	08018b49 	.word	0x08018b49

08018bdc <__sfp_lock_acquire>:
 8018bdc:	4801      	ldr	r0, [pc, #4]	; (8018be4 <__sfp_lock_acquire+0x8>)
 8018bde:	f000 ba78 	b.w	80190d2 <__retarget_lock_acquire_recursive>
 8018be2:	bf00      	nop
 8018be4:	200042e1 	.word	0x200042e1

08018be8 <__sfp_lock_release>:
 8018be8:	4801      	ldr	r0, [pc, #4]	; (8018bf0 <__sfp_lock_release+0x8>)
 8018bea:	f000 ba73 	b.w	80190d4 <__retarget_lock_release_recursive>
 8018bee:	bf00      	nop
 8018bf0:	200042e1 	.word	0x200042e1

08018bf4 <__sinit>:
 8018bf4:	b510      	push	{r4, lr}
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	f7ff fff0 	bl	8018bdc <__sfp_lock_acquire>
 8018bfc:	6a23      	ldr	r3, [r4, #32]
 8018bfe:	b11b      	cbz	r3, 8018c08 <__sinit+0x14>
 8018c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c04:	f7ff bff0 	b.w	8018be8 <__sfp_lock_release>
 8018c08:	4b04      	ldr	r3, [pc, #16]	; (8018c1c <__sinit+0x28>)
 8018c0a:	6223      	str	r3, [r4, #32]
 8018c0c:	4b04      	ldr	r3, [pc, #16]	; (8018c20 <__sinit+0x2c>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1f5      	bne.n	8018c00 <__sinit+0xc>
 8018c14:	f7ff ffc4 	bl	8018ba0 <global_stdio_init.part.0>
 8018c18:	e7f2      	b.n	8018c00 <__sinit+0xc>
 8018c1a:	bf00      	nop
 8018c1c:	08018b61 	.word	0x08018b61
 8018c20:	200042d8 	.word	0x200042d8

08018c24 <_fwalk_sglue>:
 8018c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c28:	4607      	mov	r7, r0
 8018c2a:	4688      	mov	r8, r1
 8018c2c:	4614      	mov	r4, r2
 8018c2e:	2600      	movs	r6, #0
 8018c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c34:	f1b9 0901 	subs.w	r9, r9, #1
 8018c38:	d505      	bpl.n	8018c46 <_fwalk_sglue+0x22>
 8018c3a:	6824      	ldr	r4, [r4, #0]
 8018c3c:	2c00      	cmp	r4, #0
 8018c3e:	d1f7      	bne.n	8018c30 <_fwalk_sglue+0xc>
 8018c40:	4630      	mov	r0, r6
 8018c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c46:	89ab      	ldrh	r3, [r5, #12]
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d907      	bls.n	8018c5c <_fwalk_sglue+0x38>
 8018c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c50:	3301      	adds	r3, #1
 8018c52:	d003      	beq.n	8018c5c <_fwalk_sglue+0x38>
 8018c54:	4629      	mov	r1, r5
 8018c56:	4638      	mov	r0, r7
 8018c58:	47c0      	blx	r8
 8018c5a:	4306      	orrs	r6, r0
 8018c5c:	3568      	adds	r5, #104	; 0x68
 8018c5e:	e7e9      	b.n	8018c34 <_fwalk_sglue+0x10>

08018c60 <iprintf>:
 8018c60:	b40f      	push	{r0, r1, r2, r3}
 8018c62:	b507      	push	{r0, r1, r2, lr}
 8018c64:	4906      	ldr	r1, [pc, #24]	; (8018c80 <iprintf+0x20>)
 8018c66:	ab04      	add	r3, sp, #16
 8018c68:	6808      	ldr	r0, [r1, #0]
 8018c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c6e:	6881      	ldr	r1, [r0, #8]
 8018c70:	9301      	str	r3, [sp, #4]
 8018c72:	f000 fc11 	bl	8019498 <_vfiprintf_r>
 8018c76:	b003      	add	sp, #12
 8018c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c7c:	b004      	add	sp, #16
 8018c7e:	4770      	bx	lr
 8018c80:	20000090 	.word	0x20000090

08018c84 <_puts_r>:
 8018c84:	6a03      	ldr	r3, [r0, #32]
 8018c86:	b570      	push	{r4, r5, r6, lr}
 8018c88:	6884      	ldr	r4, [r0, #8]
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	460e      	mov	r6, r1
 8018c8e:	b90b      	cbnz	r3, 8018c94 <_puts_r+0x10>
 8018c90:	f7ff ffb0 	bl	8018bf4 <__sinit>
 8018c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c96:	07db      	lsls	r3, r3, #31
 8018c98:	d405      	bmi.n	8018ca6 <_puts_r+0x22>
 8018c9a:	89a3      	ldrh	r3, [r4, #12]
 8018c9c:	0598      	lsls	r0, r3, #22
 8018c9e:	d402      	bmi.n	8018ca6 <_puts_r+0x22>
 8018ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ca2:	f000 fa16 	bl	80190d2 <__retarget_lock_acquire_recursive>
 8018ca6:	89a3      	ldrh	r3, [r4, #12]
 8018ca8:	0719      	lsls	r1, r3, #28
 8018caa:	d513      	bpl.n	8018cd4 <_puts_r+0x50>
 8018cac:	6923      	ldr	r3, [r4, #16]
 8018cae:	b18b      	cbz	r3, 8018cd4 <_puts_r+0x50>
 8018cb0:	3e01      	subs	r6, #1
 8018cb2:	68a3      	ldr	r3, [r4, #8]
 8018cb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018cb8:	3b01      	subs	r3, #1
 8018cba:	60a3      	str	r3, [r4, #8]
 8018cbc:	b9e9      	cbnz	r1, 8018cfa <_puts_r+0x76>
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	da2e      	bge.n	8018d20 <_puts_r+0x9c>
 8018cc2:	4622      	mov	r2, r4
 8018cc4:	210a      	movs	r1, #10
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	f000 f89b 	bl	8018e02 <__swbuf_r>
 8018ccc:	3001      	adds	r0, #1
 8018cce:	d007      	beq.n	8018ce0 <_puts_r+0x5c>
 8018cd0:	250a      	movs	r5, #10
 8018cd2:	e007      	b.n	8018ce4 <_puts_r+0x60>
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f000 f8d0 	bl	8018e7c <__swsetup_r>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	d0e7      	beq.n	8018cb0 <_puts_r+0x2c>
 8018ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8018ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018ce6:	07da      	lsls	r2, r3, #31
 8018ce8:	d405      	bmi.n	8018cf6 <_puts_r+0x72>
 8018cea:	89a3      	ldrh	r3, [r4, #12]
 8018cec:	059b      	lsls	r3, r3, #22
 8018cee:	d402      	bmi.n	8018cf6 <_puts_r+0x72>
 8018cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cf2:	f000 f9ef 	bl	80190d4 <__retarget_lock_release_recursive>
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	bd70      	pop	{r4, r5, r6, pc}
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	da04      	bge.n	8018d08 <_puts_r+0x84>
 8018cfe:	69a2      	ldr	r2, [r4, #24]
 8018d00:	429a      	cmp	r2, r3
 8018d02:	dc06      	bgt.n	8018d12 <_puts_r+0x8e>
 8018d04:	290a      	cmp	r1, #10
 8018d06:	d004      	beq.n	8018d12 <_puts_r+0x8e>
 8018d08:	6823      	ldr	r3, [r4, #0]
 8018d0a:	1c5a      	adds	r2, r3, #1
 8018d0c:	6022      	str	r2, [r4, #0]
 8018d0e:	7019      	strb	r1, [r3, #0]
 8018d10:	e7cf      	b.n	8018cb2 <_puts_r+0x2e>
 8018d12:	4622      	mov	r2, r4
 8018d14:	4628      	mov	r0, r5
 8018d16:	f000 f874 	bl	8018e02 <__swbuf_r>
 8018d1a:	3001      	adds	r0, #1
 8018d1c:	d1c9      	bne.n	8018cb2 <_puts_r+0x2e>
 8018d1e:	e7df      	b.n	8018ce0 <_puts_r+0x5c>
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	250a      	movs	r5, #10
 8018d24:	1c5a      	adds	r2, r3, #1
 8018d26:	6022      	str	r2, [r4, #0]
 8018d28:	701d      	strb	r5, [r3, #0]
 8018d2a:	e7db      	b.n	8018ce4 <_puts_r+0x60>

08018d2c <puts>:
 8018d2c:	4b02      	ldr	r3, [pc, #8]	; (8018d38 <puts+0xc>)
 8018d2e:	4601      	mov	r1, r0
 8018d30:	6818      	ldr	r0, [r3, #0]
 8018d32:	f7ff bfa7 	b.w	8018c84 <_puts_r>
 8018d36:	bf00      	nop
 8018d38:	20000090 	.word	0x20000090

08018d3c <siprintf>:
 8018d3c:	b40e      	push	{r1, r2, r3}
 8018d3e:	b500      	push	{lr}
 8018d40:	b09c      	sub	sp, #112	; 0x70
 8018d42:	ab1d      	add	r3, sp, #116	; 0x74
 8018d44:	9002      	str	r0, [sp, #8]
 8018d46:	9006      	str	r0, [sp, #24]
 8018d48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018d4c:	4809      	ldr	r0, [pc, #36]	; (8018d74 <siprintf+0x38>)
 8018d4e:	9107      	str	r1, [sp, #28]
 8018d50:	9104      	str	r1, [sp, #16]
 8018d52:	4909      	ldr	r1, [pc, #36]	; (8018d78 <siprintf+0x3c>)
 8018d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d58:	9105      	str	r1, [sp, #20]
 8018d5a:	6800      	ldr	r0, [r0, #0]
 8018d5c:	9301      	str	r3, [sp, #4]
 8018d5e:	a902      	add	r1, sp, #8
 8018d60:	f000 fa74 	bl	801924c <_svfiprintf_r>
 8018d64:	9b02      	ldr	r3, [sp, #8]
 8018d66:	2200      	movs	r2, #0
 8018d68:	701a      	strb	r2, [r3, #0]
 8018d6a:	b01c      	add	sp, #112	; 0x70
 8018d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d70:	b003      	add	sp, #12
 8018d72:	4770      	bx	lr
 8018d74:	20000090 	.word	0x20000090
 8018d78:	ffff0208 	.word	0xffff0208

08018d7c <__sread>:
 8018d7c:	b510      	push	{r4, lr}
 8018d7e:	460c      	mov	r4, r1
 8018d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d84:	f000 f94c 	bl	8019020 <_read_r>
 8018d88:	2800      	cmp	r0, #0
 8018d8a:	bfab      	itete	ge
 8018d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8018d90:	181b      	addge	r3, r3, r0
 8018d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d96:	bfac      	ite	ge
 8018d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d9a:	81a3      	strhlt	r3, [r4, #12]
 8018d9c:	bd10      	pop	{r4, pc}

08018d9e <__swrite>:
 8018d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da2:	461f      	mov	r7, r3
 8018da4:	898b      	ldrh	r3, [r1, #12]
 8018da6:	05db      	lsls	r3, r3, #23
 8018da8:	4605      	mov	r5, r0
 8018daa:	460c      	mov	r4, r1
 8018dac:	4616      	mov	r6, r2
 8018dae:	d505      	bpl.n	8018dbc <__swrite+0x1e>
 8018db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018db4:	2302      	movs	r3, #2
 8018db6:	2200      	movs	r2, #0
 8018db8:	f000 f920 	bl	8018ffc <_lseek_r>
 8018dbc:	89a3      	ldrh	r3, [r4, #12]
 8018dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018dc6:	81a3      	strh	r3, [r4, #12]
 8018dc8:	4632      	mov	r2, r6
 8018dca:	463b      	mov	r3, r7
 8018dcc:	4628      	mov	r0, r5
 8018dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dd2:	f000 b947 	b.w	8019064 <_write_r>

08018dd6 <__sseek>:
 8018dd6:	b510      	push	{r4, lr}
 8018dd8:	460c      	mov	r4, r1
 8018dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dde:	f000 f90d 	bl	8018ffc <_lseek_r>
 8018de2:	1c43      	adds	r3, r0, #1
 8018de4:	89a3      	ldrh	r3, [r4, #12]
 8018de6:	bf15      	itete	ne
 8018de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8018dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018df2:	81a3      	strheq	r3, [r4, #12]
 8018df4:	bf18      	it	ne
 8018df6:	81a3      	strhne	r3, [r4, #12]
 8018df8:	bd10      	pop	{r4, pc}

08018dfa <__sclose>:
 8018dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dfe:	f000 b8ed 	b.w	8018fdc <_close_r>

08018e02 <__swbuf_r>:
 8018e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e04:	460e      	mov	r6, r1
 8018e06:	4614      	mov	r4, r2
 8018e08:	4605      	mov	r5, r0
 8018e0a:	b118      	cbz	r0, 8018e14 <__swbuf_r+0x12>
 8018e0c:	6a03      	ldr	r3, [r0, #32]
 8018e0e:	b90b      	cbnz	r3, 8018e14 <__swbuf_r+0x12>
 8018e10:	f7ff fef0 	bl	8018bf4 <__sinit>
 8018e14:	69a3      	ldr	r3, [r4, #24]
 8018e16:	60a3      	str	r3, [r4, #8]
 8018e18:	89a3      	ldrh	r3, [r4, #12]
 8018e1a:	071a      	lsls	r2, r3, #28
 8018e1c:	d525      	bpl.n	8018e6a <__swbuf_r+0x68>
 8018e1e:	6923      	ldr	r3, [r4, #16]
 8018e20:	b31b      	cbz	r3, 8018e6a <__swbuf_r+0x68>
 8018e22:	6823      	ldr	r3, [r4, #0]
 8018e24:	6922      	ldr	r2, [r4, #16]
 8018e26:	1a98      	subs	r0, r3, r2
 8018e28:	6963      	ldr	r3, [r4, #20]
 8018e2a:	b2f6      	uxtb	r6, r6
 8018e2c:	4283      	cmp	r3, r0
 8018e2e:	4637      	mov	r7, r6
 8018e30:	dc04      	bgt.n	8018e3c <__swbuf_r+0x3a>
 8018e32:	4621      	mov	r1, r4
 8018e34:	4628      	mov	r0, r5
 8018e36:	f000 fe5b 	bl	8019af0 <_fflush_r>
 8018e3a:	b9e0      	cbnz	r0, 8018e76 <__swbuf_r+0x74>
 8018e3c:	68a3      	ldr	r3, [r4, #8]
 8018e3e:	3b01      	subs	r3, #1
 8018e40:	60a3      	str	r3, [r4, #8]
 8018e42:	6823      	ldr	r3, [r4, #0]
 8018e44:	1c5a      	adds	r2, r3, #1
 8018e46:	6022      	str	r2, [r4, #0]
 8018e48:	701e      	strb	r6, [r3, #0]
 8018e4a:	6962      	ldr	r2, [r4, #20]
 8018e4c:	1c43      	adds	r3, r0, #1
 8018e4e:	429a      	cmp	r2, r3
 8018e50:	d004      	beq.n	8018e5c <__swbuf_r+0x5a>
 8018e52:	89a3      	ldrh	r3, [r4, #12]
 8018e54:	07db      	lsls	r3, r3, #31
 8018e56:	d506      	bpl.n	8018e66 <__swbuf_r+0x64>
 8018e58:	2e0a      	cmp	r6, #10
 8018e5a:	d104      	bne.n	8018e66 <__swbuf_r+0x64>
 8018e5c:	4621      	mov	r1, r4
 8018e5e:	4628      	mov	r0, r5
 8018e60:	f000 fe46 	bl	8019af0 <_fflush_r>
 8018e64:	b938      	cbnz	r0, 8018e76 <__swbuf_r+0x74>
 8018e66:	4638      	mov	r0, r7
 8018e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e6a:	4621      	mov	r1, r4
 8018e6c:	4628      	mov	r0, r5
 8018e6e:	f000 f805 	bl	8018e7c <__swsetup_r>
 8018e72:	2800      	cmp	r0, #0
 8018e74:	d0d5      	beq.n	8018e22 <__swbuf_r+0x20>
 8018e76:	f04f 37ff 	mov.w	r7, #4294967295
 8018e7a:	e7f4      	b.n	8018e66 <__swbuf_r+0x64>

08018e7c <__swsetup_r>:
 8018e7c:	b538      	push	{r3, r4, r5, lr}
 8018e7e:	4b2a      	ldr	r3, [pc, #168]	; (8018f28 <__swsetup_r+0xac>)
 8018e80:	4605      	mov	r5, r0
 8018e82:	6818      	ldr	r0, [r3, #0]
 8018e84:	460c      	mov	r4, r1
 8018e86:	b118      	cbz	r0, 8018e90 <__swsetup_r+0x14>
 8018e88:	6a03      	ldr	r3, [r0, #32]
 8018e8a:	b90b      	cbnz	r3, 8018e90 <__swsetup_r+0x14>
 8018e8c:	f7ff feb2 	bl	8018bf4 <__sinit>
 8018e90:	89a3      	ldrh	r3, [r4, #12]
 8018e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e96:	0718      	lsls	r0, r3, #28
 8018e98:	d422      	bmi.n	8018ee0 <__swsetup_r+0x64>
 8018e9a:	06d9      	lsls	r1, r3, #27
 8018e9c:	d407      	bmi.n	8018eae <__swsetup_r+0x32>
 8018e9e:	2309      	movs	r3, #9
 8018ea0:	602b      	str	r3, [r5, #0]
 8018ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ea6:	81a3      	strh	r3, [r4, #12]
 8018ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8018eac:	e034      	b.n	8018f18 <__swsetup_r+0x9c>
 8018eae:	0758      	lsls	r0, r3, #29
 8018eb0:	d512      	bpl.n	8018ed8 <__swsetup_r+0x5c>
 8018eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018eb4:	b141      	cbz	r1, 8018ec8 <__swsetup_r+0x4c>
 8018eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018eba:	4299      	cmp	r1, r3
 8018ebc:	d002      	beq.n	8018ec4 <__swsetup_r+0x48>
 8018ebe:	4628      	mov	r0, r5
 8018ec0:	f000 f920 	bl	8019104 <_free_r>
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8018ec8:	89a3      	ldrh	r3, [r4, #12]
 8018eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ece:	81a3      	strh	r3, [r4, #12]
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	6063      	str	r3, [r4, #4]
 8018ed4:	6923      	ldr	r3, [r4, #16]
 8018ed6:	6023      	str	r3, [r4, #0]
 8018ed8:	89a3      	ldrh	r3, [r4, #12]
 8018eda:	f043 0308 	orr.w	r3, r3, #8
 8018ede:	81a3      	strh	r3, [r4, #12]
 8018ee0:	6923      	ldr	r3, [r4, #16]
 8018ee2:	b94b      	cbnz	r3, 8018ef8 <__swsetup_r+0x7c>
 8018ee4:	89a3      	ldrh	r3, [r4, #12]
 8018ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018eee:	d003      	beq.n	8018ef8 <__swsetup_r+0x7c>
 8018ef0:	4621      	mov	r1, r4
 8018ef2:	4628      	mov	r0, r5
 8018ef4:	f000 fe4a 	bl	8019b8c <__smakebuf_r>
 8018ef8:	89a0      	ldrh	r0, [r4, #12]
 8018efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018efe:	f010 0301 	ands.w	r3, r0, #1
 8018f02:	d00a      	beq.n	8018f1a <__swsetup_r+0x9e>
 8018f04:	2300      	movs	r3, #0
 8018f06:	60a3      	str	r3, [r4, #8]
 8018f08:	6963      	ldr	r3, [r4, #20]
 8018f0a:	425b      	negs	r3, r3
 8018f0c:	61a3      	str	r3, [r4, #24]
 8018f0e:	6923      	ldr	r3, [r4, #16]
 8018f10:	b943      	cbnz	r3, 8018f24 <__swsetup_r+0xa8>
 8018f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018f16:	d1c4      	bne.n	8018ea2 <__swsetup_r+0x26>
 8018f18:	bd38      	pop	{r3, r4, r5, pc}
 8018f1a:	0781      	lsls	r1, r0, #30
 8018f1c:	bf58      	it	pl
 8018f1e:	6963      	ldrpl	r3, [r4, #20]
 8018f20:	60a3      	str	r3, [r4, #8]
 8018f22:	e7f4      	b.n	8018f0e <__swsetup_r+0x92>
 8018f24:	2000      	movs	r0, #0
 8018f26:	e7f7      	b.n	8018f18 <__swsetup_r+0x9c>
 8018f28:	20000090 	.word	0x20000090

08018f2c <memcmp>:
 8018f2c:	b510      	push	{r4, lr}
 8018f2e:	3901      	subs	r1, #1
 8018f30:	4402      	add	r2, r0
 8018f32:	4290      	cmp	r0, r2
 8018f34:	d101      	bne.n	8018f3a <memcmp+0xe>
 8018f36:	2000      	movs	r0, #0
 8018f38:	e005      	b.n	8018f46 <memcmp+0x1a>
 8018f3a:	7803      	ldrb	r3, [r0, #0]
 8018f3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018f40:	42a3      	cmp	r3, r4
 8018f42:	d001      	beq.n	8018f48 <memcmp+0x1c>
 8018f44:	1b18      	subs	r0, r3, r4
 8018f46:	bd10      	pop	{r4, pc}
 8018f48:	3001      	adds	r0, #1
 8018f4a:	e7f2      	b.n	8018f32 <memcmp+0x6>

08018f4c <memmove>:
 8018f4c:	4288      	cmp	r0, r1
 8018f4e:	b510      	push	{r4, lr}
 8018f50:	eb01 0402 	add.w	r4, r1, r2
 8018f54:	d902      	bls.n	8018f5c <memmove+0x10>
 8018f56:	4284      	cmp	r4, r0
 8018f58:	4623      	mov	r3, r4
 8018f5a:	d807      	bhi.n	8018f6c <memmove+0x20>
 8018f5c:	1e43      	subs	r3, r0, #1
 8018f5e:	42a1      	cmp	r1, r4
 8018f60:	d008      	beq.n	8018f74 <memmove+0x28>
 8018f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f6a:	e7f8      	b.n	8018f5e <memmove+0x12>
 8018f6c:	4402      	add	r2, r0
 8018f6e:	4601      	mov	r1, r0
 8018f70:	428a      	cmp	r2, r1
 8018f72:	d100      	bne.n	8018f76 <memmove+0x2a>
 8018f74:	bd10      	pop	{r4, pc}
 8018f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f7e:	e7f7      	b.n	8018f70 <memmove+0x24>

08018f80 <memset>:
 8018f80:	4402      	add	r2, r0
 8018f82:	4603      	mov	r3, r0
 8018f84:	4293      	cmp	r3, r2
 8018f86:	d100      	bne.n	8018f8a <memset+0xa>
 8018f88:	4770      	bx	lr
 8018f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8018f8e:	e7f9      	b.n	8018f84 <memset+0x4>

08018f90 <strncmp>:
 8018f90:	b510      	push	{r4, lr}
 8018f92:	b16a      	cbz	r2, 8018fb0 <strncmp+0x20>
 8018f94:	3901      	subs	r1, #1
 8018f96:	1884      	adds	r4, r0, r2
 8018f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d103      	bne.n	8018fac <strncmp+0x1c>
 8018fa4:	42a0      	cmp	r0, r4
 8018fa6:	d001      	beq.n	8018fac <strncmp+0x1c>
 8018fa8:	2a00      	cmp	r2, #0
 8018faa:	d1f5      	bne.n	8018f98 <strncmp+0x8>
 8018fac:	1ad0      	subs	r0, r2, r3
 8018fae:	bd10      	pop	{r4, pc}
 8018fb0:	4610      	mov	r0, r2
 8018fb2:	e7fc      	b.n	8018fae <strncmp+0x1e>

08018fb4 <strncpy>:
 8018fb4:	b510      	push	{r4, lr}
 8018fb6:	3901      	subs	r1, #1
 8018fb8:	4603      	mov	r3, r0
 8018fba:	b132      	cbz	r2, 8018fca <strncpy+0x16>
 8018fbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018fc0:	f803 4b01 	strb.w	r4, [r3], #1
 8018fc4:	3a01      	subs	r2, #1
 8018fc6:	2c00      	cmp	r4, #0
 8018fc8:	d1f7      	bne.n	8018fba <strncpy+0x6>
 8018fca:	441a      	add	r2, r3
 8018fcc:	2100      	movs	r1, #0
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	d100      	bne.n	8018fd4 <strncpy+0x20>
 8018fd2:	bd10      	pop	{r4, pc}
 8018fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8018fd8:	e7f9      	b.n	8018fce <strncpy+0x1a>
	...

08018fdc <_close_r>:
 8018fdc:	b538      	push	{r3, r4, r5, lr}
 8018fde:	4d06      	ldr	r5, [pc, #24]	; (8018ff8 <_close_r+0x1c>)
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	4608      	mov	r0, r1
 8018fe6:	602b      	str	r3, [r5, #0]
 8018fe8:	f000 fe66 	bl	8019cb8 <_close>
 8018fec:	1c43      	adds	r3, r0, #1
 8018fee:	d102      	bne.n	8018ff6 <_close_r+0x1a>
 8018ff0:	682b      	ldr	r3, [r5, #0]
 8018ff2:	b103      	cbz	r3, 8018ff6 <_close_r+0x1a>
 8018ff4:	6023      	str	r3, [r4, #0]
 8018ff6:	bd38      	pop	{r3, r4, r5, pc}
 8018ff8:	200042dc 	.word	0x200042dc

08018ffc <_lseek_r>:
 8018ffc:	b538      	push	{r3, r4, r5, lr}
 8018ffe:	4d07      	ldr	r5, [pc, #28]	; (801901c <_lseek_r+0x20>)
 8019000:	4604      	mov	r4, r0
 8019002:	4608      	mov	r0, r1
 8019004:	4611      	mov	r1, r2
 8019006:	2200      	movs	r2, #0
 8019008:	602a      	str	r2, [r5, #0]
 801900a:	461a      	mov	r2, r3
 801900c:	f000 fe6c 	bl	8019ce8 <_lseek>
 8019010:	1c43      	adds	r3, r0, #1
 8019012:	d102      	bne.n	801901a <_lseek_r+0x1e>
 8019014:	682b      	ldr	r3, [r5, #0]
 8019016:	b103      	cbz	r3, 801901a <_lseek_r+0x1e>
 8019018:	6023      	str	r3, [r4, #0]
 801901a:	bd38      	pop	{r3, r4, r5, pc}
 801901c:	200042dc 	.word	0x200042dc

08019020 <_read_r>:
 8019020:	b538      	push	{r3, r4, r5, lr}
 8019022:	4d07      	ldr	r5, [pc, #28]	; (8019040 <_read_r+0x20>)
 8019024:	4604      	mov	r4, r0
 8019026:	4608      	mov	r0, r1
 8019028:	4611      	mov	r1, r2
 801902a:	2200      	movs	r2, #0
 801902c:	602a      	str	r2, [r5, #0]
 801902e:	461a      	mov	r2, r3
 8019030:	f000 fe62 	bl	8019cf8 <_read>
 8019034:	1c43      	adds	r3, r0, #1
 8019036:	d102      	bne.n	801903e <_read_r+0x1e>
 8019038:	682b      	ldr	r3, [r5, #0]
 801903a:	b103      	cbz	r3, 801903e <_read_r+0x1e>
 801903c:	6023      	str	r3, [r4, #0]
 801903e:	bd38      	pop	{r3, r4, r5, pc}
 8019040:	200042dc 	.word	0x200042dc

08019044 <_sbrk_r>:
 8019044:	b538      	push	{r3, r4, r5, lr}
 8019046:	4d06      	ldr	r5, [pc, #24]	; (8019060 <_sbrk_r+0x1c>)
 8019048:	2300      	movs	r3, #0
 801904a:	4604      	mov	r4, r0
 801904c:	4608      	mov	r0, r1
 801904e:	602b      	str	r3, [r5, #0]
 8019050:	f000 fe5a 	bl	8019d08 <_sbrk>
 8019054:	1c43      	adds	r3, r0, #1
 8019056:	d102      	bne.n	801905e <_sbrk_r+0x1a>
 8019058:	682b      	ldr	r3, [r5, #0]
 801905a:	b103      	cbz	r3, 801905e <_sbrk_r+0x1a>
 801905c:	6023      	str	r3, [r4, #0]
 801905e:	bd38      	pop	{r3, r4, r5, pc}
 8019060:	200042dc 	.word	0x200042dc

08019064 <_write_r>:
 8019064:	b538      	push	{r3, r4, r5, lr}
 8019066:	4d07      	ldr	r5, [pc, #28]	; (8019084 <_write_r+0x20>)
 8019068:	4604      	mov	r4, r0
 801906a:	4608      	mov	r0, r1
 801906c:	4611      	mov	r1, r2
 801906e:	2200      	movs	r2, #0
 8019070:	602a      	str	r2, [r5, #0]
 8019072:	461a      	mov	r2, r3
 8019074:	f7e8 fa9c 	bl	80015b0 <_write>
 8019078:	1c43      	adds	r3, r0, #1
 801907a:	d102      	bne.n	8019082 <_write_r+0x1e>
 801907c:	682b      	ldr	r3, [r5, #0]
 801907e:	b103      	cbz	r3, 8019082 <_write_r+0x1e>
 8019080:	6023      	str	r3, [r4, #0]
 8019082:	bd38      	pop	{r3, r4, r5, pc}
 8019084:	200042dc 	.word	0x200042dc

08019088 <__libc_init_array>:
 8019088:	b570      	push	{r4, r5, r6, lr}
 801908a:	4d0d      	ldr	r5, [pc, #52]	; (80190c0 <__libc_init_array+0x38>)
 801908c:	4c0d      	ldr	r4, [pc, #52]	; (80190c4 <__libc_init_array+0x3c>)
 801908e:	1b64      	subs	r4, r4, r5
 8019090:	10a4      	asrs	r4, r4, #2
 8019092:	2600      	movs	r6, #0
 8019094:	42a6      	cmp	r6, r4
 8019096:	d109      	bne.n	80190ac <__libc_init_array+0x24>
 8019098:	4d0b      	ldr	r5, [pc, #44]	; (80190c8 <__libc_init_array+0x40>)
 801909a:	4c0c      	ldr	r4, [pc, #48]	; (80190cc <__libc_init_array+0x44>)
 801909c:	f000 fe42 	bl	8019d24 <_init>
 80190a0:	1b64      	subs	r4, r4, r5
 80190a2:	10a4      	asrs	r4, r4, #2
 80190a4:	2600      	movs	r6, #0
 80190a6:	42a6      	cmp	r6, r4
 80190a8:	d105      	bne.n	80190b6 <__libc_init_array+0x2e>
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80190b0:	4798      	blx	r3
 80190b2:	3601      	adds	r6, #1
 80190b4:	e7ee      	b.n	8019094 <__libc_init_array+0xc>
 80190b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80190ba:	4798      	blx	r3
 80190bc:	3601      	adds	r6, #1
 80190be:	e7f2      	b.n	80190a6 <__libc_init_array+0x1e>
 80190c0:	0801d9b0 	.word	0x0801d9b0
 80190c4:	0801d9b0 	.word	0x0801d9b0
 80190c8:	0801d9b0 	.word	0x0801d9b0
 80190cc:	0801d9b4 	.word	0x0801d9b4

080190d0 <__retarget_lock_init_recursive>:
 80190d0:	4770      	bx	lr

080190d2 <__retarget_lock_acquire_recursive>:
 80190d2:	4770      	bx	lr

080190d4 <__retarget_lock_release_recursive>:
 80190d4:	4770      	bx	lr

080190d6 <strcpy>:
 80190d6:	4603      	mov	r3, r0
 80190d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190dc:	f803 2b01 	strb.w	r2, [r3], #1
 80190e0:	2a00      	cmp	r2, #0
 80190e2:	d1f9      	bne.n	80190d8 <strcpy+0x2>
 80190e4:	4770      	bx	lr

080190e6 <memcpy>:
 80190e6:	440a      	add	r2, r1
 80190e8:	4291      	cmp	r1, r2
 80190ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80190ee:	d100      	bne.n	80190f2 <memcpy+0xc>
 80190f0:	4770      	bx	lr
 80190f2:	b510      	push	{r4, lr}
 80190f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190fc:	4291      	cmp	r1, r2
 80190fe:	d1f9      	bne.n	80190f4 <memcpy+0xe>
 8019100:	bd10      	pop	{r4, pc}
	...

08019104 <_free_r>:
 8019104:	b538      	push	{r3, r4, r5, lr}
 8019106:	4605      	mov	r5, r0
 8019108:	2900      	cmp	r1, #0
 801910a:	d041      	beq.n	8019190 <_free_r+0x8c>
 801910c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019110:	1f0c      	subs	r4, r1, #4
 8019112:	2b00      	cmp	r3, #0
 8019114:	bfb8      	it	lt
 8019116:	18e4      	addlt	r4, r4, r3
 8019118:	f7ff fcd4 	bl	8018ac4 <__malloc_lock>
 801911c:	4a1d      	ldr	r2, [pc, #116]	; (8019194 <_free_r+0x90>)
 801911e:	6813      	ldr	r3, [r2, #0]
 8019120:	b933      	cbnz	r3, 8019130 <_free_r+0x2c>
 8019122:	6063      	str	r3, [r4, #4]
 8019124:	6014      	str	r4, [r2, #0]
 8019126:	4628      	mov	r0, r5
 8019128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801912c:	f7ff bcd0 	b.w	8018ad0 <__malloc_unlock>
 8019130:	42a3      	cmp	r3, r4
 8019132:	d908      	bls.n	8019146 <_free_r+0x42>
 8019134:	6820      	ldr	r0, [r4, #0]
 8019136:	1821      	adds	r1, r4, r0
 8019138:	428b      	cmp	r3, r1
 801913a:	bf01      	itttt	eq
 801913c:	6819      	ldreq	r1, [r3, #0]
 801913e:	685b      	ldreq	r3, [r3, #4]
 8019140:	1809      	addeq	r1, r1, r0
 8019142:	6021      	streq	r1, [r4, #0]
 8019144:	e7ed      	b.n	8019122 <_free_r+0x1e>
 8019146:	461a      	mov	r2, r3
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	b10b      	cbz	r3, 8019150 <_free_r+0x4c>
 801914c:	42a3      	cmp	r3, r4
 801914e:	d9fa      	bls.n	8019146 <_free_r+0x42>
 8019150:	6811      	ldr	r1, [r2, #0]
 8019152:	1850      	adds	r0, r2, r1
 8019154:	42a0      	cmp	r0, r4
 8019156:	d10b      	bne.n	8019170 <_free_r+0x6c>
 8019158:	6820      	ldr	r0, [r4, #0]
 801915a:	4401      	add	r1, r0
 801915c:	1850      	adds	r0, r2, r1
 801915e:	4283      	cmp	r3, r0
 8019160:	6011      	str	r1, [r2, #0]
 8019162:	d1e0      	bne.n	8019126 <_free_r+0x22>
 8019164:	6818      	ldr	r0, [r3, #0]
 8019166:	685b      	ldr	r3, [r3, #4]
 8019168:	6053      	str	r3, [r2, #4]
 801916a:	4408      	add	r0, r1
 801916c:	6010      	str	r0, [r2, #0]
 801916e:	e7da      	b.n	8019126 <_free_r+0x22>
 8019170:	d902      	bls.n	8019178 <_free_r+0x74>
 8019172:	230c      	movs	r3, #12
 8019174:	602b      	str	r3, [r5, #0]
 8019176:	e7d6      	b.n	8019126 <_free_r+0x22>
 8019178:	6820      	ldr	r0, [r4, #0]
 801917a:	1821      	adds	r1, r4, r0
 801917c:	428b      	cmp	r3, r1
 801917e:	bf04      	itt	eq
 8019180:	6819      	ldreq	r1, [r3, #0]
 8019182:	685b      	ldreq	r3, [r3, #4]
 8019184:	6063      	str	r3, [r4, #4]
 8019186:	bf04      	itt	eq
 8019188:	1809      	addeq	r1, r1, r0
 801918a:	6021      	streq	r1, [r4, #0]
 801918c:	6054      	str	r4, [r2, #4]
 801918e:	e7ca      	b.n	8019126 <_free_r+0x22>
 8019190:	bd38      	pop	{r3, r4, r5, pc}
 8019192:	bf00      	nop
 8019194:	20004198 	.word	0x20004198

08019198 <__ssputs_r>:
 8019198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801919c:	688e      	ldr	r6, [r1, #8]
 801919e:	461f      	mov	r7, r3
 80191a0:	42be      	cmp	r6, r7
 80191a2:	680b      	ldr	r3, [r1, #0]
 80191a4:	4682      	mov	sl, r0
 80191a6:	460c      	mov	r4, r1
 80191a8:	4690      	mov	r8, r2
 80191aa:	d82c      	bhi.n	8019206 <__ssputs_r+0x6e>
 80191ac:	898a      	ldrh	r2, [r1, #12]
 80191ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80191b2:	d026      	beq.n	8019202 <__ssputs_r+0x6a>
 80191b4:	6965      	ldr	r5, [r4, #20]
 80191b6:	6909      	ldr	r1, [r1, #16]
 80191b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191bc:	eba3 0901 	sub.w	r9, r3, r1
 80191c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80191c4:	1c7b      	adds	r3, r7, #1
 80191c6:	444b      	add	r3, r9
 80191c8:	106d      	asrs	r5, r5, #1
 80191ca:	429d      	cmp	r5, r3
 80191cc:	bf38      	it	cc
 80191ce:	461d      	movcc	r5, r3
 80191d0:	0553      	lsls	r3, r2, #21
 80191d2:	d527      	bpl.n	8019224 <__ssputs_r+0x8c>
 80191d4:	4629      	mov	r1, r5
 80191d6:	f7ff fbf5 	bl	80189c4 <_malloc_r>
 80191da:	4606      	mov	r6, r0
 80191dc:	b360      	cbz	r0, 8019238 <__ssputs_r+0xa0>
 80191de:	6921      	ldr	r1, [r4, #16]
 80191e0:	464a      	mov	r2, r9
 80191e2:	f7ff ff80 	bl	80190e6 <memcpy>
 80191e6:	89a3      	ldrh	r3, [r4, #12]
 80191e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80191ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191f0:	81a3      	strh	r3, [r4, #12]
 80191f2:	6126      	str	r6, [r4, #16]
 80191f4:	6165      	str	r5, [r4, #20]
 80191f6:	444e      	add	r6, r9
 80191f8:	eba5 0509 	sub.w	r5, r5, r9
 80191fc:	6026      	str	r6, [r4, #0]
 80191fe:	60a5      	str	r5, [r4, #8]
 8019200:	463e      	mov	r6, r7
 8019202:	42be      	cmp	r6, r7
 8019204:	d900      	bls.n	8019208 <__ssputs_r+0x70>
 8019206:	463e      	mov	r6, r7
 8019208:	6820      	ldr	r0, [r4, #0]
 801920a:	4632      	mov	r2, r6
 801920c:	4641      	mov	r1, r8
 801920e:	f7ff fe9d 	bl	8018f4c <memmove>
 8019212:	68a3      	ldr	r3, [r4, #8]
 8019214:	1b9b      	subs	r3, r3, r6
 8019216:	60a3      	str	r3, [r4, #8]
 8019218:	6823      	ldr	r3, [r4, #0]
 801921a:	4433      	add	r3, r6
 801921c:	6023      	str	r3, [r4, #0]
 801921e:	2000      	movs	r0, #0
 8019220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019224:	462a      	mov	r2, r5
 8019226:	f000 fd0f 	bl	8019c48 <_realloc_r>
 801922a:	4606      	mov	r6, r0
 801922c:	2800      	cmp	r0, #0
 801922e:	d1e0      	bne.n	80191f2 <__ssputs_r+0x5a>
 8019230:	6921      	ldr	r1, [r4, #16]
 8019232:	4650      	mov	r0, sl
 8019234:	f7ff ff66 	bl	8019104 <_free_r>
 8019238:	230c      	movs	r3, #12
 801923a:	f8ca 3000 	str.w	r3, [sl]
 801923e:	89a3      	ldrh	r3, [r4, #12]
 8019240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019244:	81a3      	strh	r3, [r4, #12]
 8019246:	f04f 30ff 	mov.w	r0, #4294967295
 801924a:	e7e9      	b.n	8019220 <__ssputs_r+0x88>

0801924c <_svfiprintf_r>:
 801924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019250:	4698      	mov	r8, r3
 8019252:	898b      	ldrh	r3, [r1, #12]
 8019254:	061b      	lsls	r3, r3, #24
 8019256:	b09d      	sub	sp, #116	; 0x74
 8019258:	4607      	mov	r7, r0
 801925a:	460d      	mov	r5, r1
 801925c:	4614      	mov	r4, r2
 801925e:	d50e      	bpl.n	801927e <_svfiprintf_r+0x32>
 8019260:	690b      	ldr	r3, [r1, #16]
 8019262:	b963      	cbnz	r3, 801927e <_svfiprintf_r+0x32>
 8019264:	2140      	movs	r1, #64	; 0x40
 8019266:	f7ff fbad 	bl	80189c4 <_malloc_r>
 801926a:	6028      	str	r0, [r5, #0]
 801926c:	6128      	str	r0, [r5, #16]
 801926e:	b920      	cbnz	r0, 801927a <_svfiprintf_r+0x2e>
 8019270:	230c      	movs	r3, #12
 8019272:	603b      	str	r3, [r7, #0]
 8019274:	f04f 30ff 	mov.w	r0, #4294967295
 8019278:	e0d0      	b.n	801941c <_svfiprintf_r+0x1d0>
 801927a:	2340      	movs	r3, #64	; 0x40
 801927c:	616b      	str	r3, [r5, #20]
 801927e:	2300      	movs	r3, #0
 8019280:	9309      	str	r3, [sp, #36]	; 0x24
 8019282:	2320      	movs	r3, #32
 8019284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019288:	f8cd 800c 	str.w	r8, [sp, #12]
 801928c:	2330      	movs	r3, #48	; 0x30
 801928e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019434 <_svfiprintf_r+0x1e8>
 8019292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019296:	f04f 0901 	mov.w	r9, #1
 801929a:	4623      	mov	r3, r4
 801929c:	469a      	mov	sl, r3
 801929e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192a2:	b10a      	cbz	r2, 80192a8 <_svfiprintf_r+0x5c>
 80192a4:	2a25      	cmp	r2, #37	; 0x25
 80192a6:	d1f9      	bne.n	801929c <_svfiprintf_r+0x50>
 80192a8:	ebba 0b04 	subs.w	fp, sl, r4
 80192ac:	d00b      	beq.n	80192c6 <_svfiprintf_r+0x7a>
 80192ae:	465b      	mov	r3, fp
 80192b0:	4622      	mov	r2, r4
 80192b2:	4629      	mov	r1, r5
 80192b4:	4638      	mov	r0, r7
 80192b6:	f7ff ff6f 	bl	8019198 <__ssputs_r>
 80192ba:	3001      	adds	r0, #1
 80192bc:	f000 80a9 	beq.w	8019412 <_svfiprintf_r+0x1c6>
 80192c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192c2:	445a      	add	r2, fp
 80192c4:	9209      	str	r2, [sp, #36]	; 0x24
 80192c6:	f89a 3000 	ldrb.w	r3, [sl]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f000 80a1 	beq.w	8019412 <_svfiprintf_r+0x1c6>
 80192d0:	2300      	movs	r3, #0
 80192d2:	f04f 32ff 	mov.w	r2, #4294967295
 80192d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192da:	f10a 0a01 	add.w	sl, sl, #1
 80192de:	9304      	str	r3, [sp, #16]
 80192e0:	9307      	str	r3, [sp, #28]
 80192e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192e6:	931a      	str	r3, [sp, #104]	; 0x68
 80192e8:	4654      	mov	r4, sl
 80192ea:	2205      	movs	r2, #5
 80192ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192f0:	4850      	ldr	r0, [pc, #320]	; (8019434 <_svfiprintf_r+0x1e8>)
 80192f2:	f7e6 ff55 	bl	80001a0 <memchr>
 80192f6:	9a04      	ldr	r2, [sp, #16]
 80192f8:	b9d8      	cbnz	r0, 8019332 <_svfiprintf_r+0xe6>
 80192fa:	06d0      	lsls	r0, r2, #27
 80192fc:	bf44      	itt	mi
 80192fe:	2320      	movmi	r3, #32
 8019300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019304:	0711      	lsls	r1, r2, #28
 8019306:	bf44      	itt	mi
 8019308:	232b      	movmi	r3, #43	; 0x2b
 801930a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801930e:	f89a 3000 	ldrb.w	r3, [sl]
 8019312:	2b2a      	cmp	r3, #42	; 0x2a
 8019314:	d015      	beq.n	8019342 <_svfiprintf_r+0xf6>
 8019316:	9a07      	ldr	r2, [sp, #28]
 8019318:	4654      	mov	r4, sl
 801931a:	2000      	movs	r0, #0
 801931c:	f04f 0c0a 	mov.w	ip, #10
 8019320:	4621      	mov	r1, r4
 8019322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019326:	3b30      	subs	r3, #48	; 0x30
 8019328:	2b09      	cmp	r3, #9
 801932a:	d94d      	bls.n	80193c8 <_svfiprintf_r+0x17c>
 801932c:	b1b0      	cbz	r0, 801935c <_svfiprintf_r+0x110>
 801932e:	9207      	str	r2, [sp, #28]
 8019330:	e014      	b.n	801935c <_svfiprintf_r+0x110>
 8019332:	eba0 0308 	sub.w	r3, r0, r8
 8019336:	fa09 f303 	lsl.w	r3, r9, r3
 801933a:	4313      	orrs	r3, r2
 801933c:	9304      	str	r3, [sp, #16]
 801933e:	46a2      	mov	sl, r4
 8019340:	e7d2      	b.n	80192e8 <_svfiprintf_r+0x9c>
 8019342:	9b03      	ldr	r3, [sp, #12]
 8019344:	1d19      	adds	r1, r3, #4
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	9103      	str	r1, [sp, #12]
 801934a:	2b00      	cmp	r3, #0
 801934c:	bfbb      	ittet	lt
 801934e:	425b      	neglt	r3, r3
 8019350:	f042 0202 	orrlt.w	r2, r2, #2
 8019354:	9307      	strge	r3, [sp, #28]
 8019356:	9307      	strlt	r3, [sp, #28]
 8019358:	bfb8      	it	lt
 801935a:	9204      	strlt	r2, [sp, #16]
 801935c:	7823      	ldrb	r3, [r4, #0]
 801935e:	2b2e      	cmp	r3, #46	; 0x2e
 8019360:	d10c      	bne.n	801937c <_svfiprintf_r+0x130>
 8019362:	7863      	ldrb	r3, [r4, #1]
 8019364:	2b2a      	cmp	r3, #42	; 0x2a
 8019366:	d134      	bne.n	80193d2 <_svfiprintf_r+0x186>
 8019368:	9b03      	ldr	r3, [sp, #12]
 801936a:	1d1a      	adds	r2, r3, #4
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	9203      	str	r2, [sp, #12]
 8019370:	2b00      	cmp	r3, #0
 8019372:	bfb8      	it	lt
 8019374:	f04f 33ff 	movlt.w	r3, #4294967295
 8019378:	3402      	adds	r4, #2
 801937a:	9305      	str	r3, [sp, #20]
 801937c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8019438 <_svfiprintf_r+0x1ec>
 8019380:	7821      	ldrb	r1, [r4, #0]
 8019382:	2203      	movs	r2, #3
 8019384:	4650      	mov	r0, sl
 8019386:	f7e6 ff0b 	bl	80001a0 <memchr>
 801938a:	b138      	cbz	r0, 801939c <_svfiprintf_r+0x150>
 801938c:	9b04      	ldr	r3, [sp, #16]
 801938e:	eba0 000a 	sub.w	r0, r0, sl
 8019392:	2240      	movs	r2, #64	; 0x40
 8019394:	4082      	lsls	r2, r0
 8019396:	4313      	orrs	r3, r2
 8019398:	3401      	adds	r4, #1
 801939a:	9304      	str	r3, [sp, #16]
 801939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193a0:	4826      	ldr	r0, [pc, #152]	; (801943c <_svfiprintf_r+0x1f0>)
 80193a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193a6:	2206      	movs	r2, #6
 80193a8:	f7e6 fefa 	bl	80001a0 <memchr>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	d038      	beq.n	8019422 <_svfiprintf_r+0x1d6>
 80193b0:	4b23      	ldr	r3, [pc, #140]	; (8019440 <_svfiprintf_r+0x1f4>)
 80193b2:	bb1b      	cbnz	r3, 80193fc <_svfiprintf_r+0x1b0>
 80193b4:	9b03      	ldr	r3, [sp, #12]
 80193b6:	3307      	adds	r3, #7
 80193b8:	f023 0307 	bic.w	r3, r3, #7
 80193bc:	3308      	adds	r3, #8
 80193be:	9303      	str	r3, [sp, #12]
 80193c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193c2:	4433      	add	r3, r6
 80193c4:	9309      	str	r3, [sp, #36]	; 0x24
 80193c6:	e768      	b.n	801929a <_svfiprintf_r+0x4e>
 80193c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80193cc:	460c      	mov	r4, r1
 80193ce:	2001      	movs	r0, #1
 80193d0:	e7a6      	b.n	8019320 <_svfiprintf_r+0xd4>
 80193d2:	2300      	movs	r3, #0
 80193d4:	3401      	adds	r4, #1
 80193d6:	9305      	str	r3, [sp, #20]
 80193d8:	4619      	mov	r1, r3
 80193da:	f04f 0c0a 	mov.w	ip, #10
 80193de:	4620      	mov	r0, r4
 80193e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193e4:	3a30      	subs	r2, #48	; 0x30
 80193e6:	2a09      	cmp	r2, #9
 80193e8:	d903      	bls.n	80193f2 <_svfiprintf_r+0x1a6>
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d0c6      	beq.n	801937c <_svfiprintf_r+0x130>
 80193ee:	9105      	str	r1, [sp, #20]
 80193f0:	e7c4      	b.n	801937c <_svfiprintf_r+0x130>
 80193f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80193f6:	4604      	mov	r4, r0
 80193f8:	2301      	movs	r3, #1
 80193fa:	e7f0      	b.n	80193de <_svfiprintf_r+0x192>
 80193fc:	ab03      	add	r3, sp, #12
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	462a      	mov	r2, r5
 8019402:	4b10      	ldr	r3, [pc, #64]	; (8019444 <_svfiprintf_r+0x1f8>)
 8019404:	a904      	add	r1, sp, #16
 8019406:	4638      	mov	r0, r7
 8019408:	f3af 8000 	nop.w
 801940c:	1c42      	adds	r2, r0, #1
 801940e:	4606      	mov	r6, r0
 8019410:	d1d6      	bne.n	80193c0 <_svfiprintf_r+0x174>
 8019412:	89ab      	ldrh	r3, [r5, #12]
 8019414:	065b      	lsls	r3, r3, #25
 8019416:	f53f af2d 	bmi.w	8019274 <_svfiprintf_r+0x28>
 801941a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801941c:	b01d      	add	sp, #116	; 0x74
 801941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019422:	ab03      	add	r3, sp, #12
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	462a      	mov	r2, r5
 8019428:	4b06      	ldr	r3, [pc, #24]	; (8019444 <_svfiprintf_r+0x1f8>)
 801942a:	a904      	add	r1, sp, #16
 801942c:	4638      	mov	r0, r7
 801942e:	f000 f9bb 	bl	80197a8 <_printf_i>
 8019432:	e7eb      	b.n	801940c <_svfiprintf_r+0x1c0>
 8019434:	0801d974 	.word	0x0801d974
 8019438:	0801d97a 	.word	0x0801d97a
 801943c:	0801d97e 	.word	0x0801d97e
 8019440:	00000000 	.word	0x00000000
 8019444:	08019199 	.word	0x08019199

08019448 <__sfputc_r>:
 8019448:	6893      	ldr	r3, [r2, #8]
 801944a:	3b01      	subs	r3, #1
 801944c:	2b00      	cmp	r3, #0
 801944e:	b410      	push	{r4}
 8019450:	6093      	str	r3, [r2, #8]
 8019452:	da07      	bge.n	8019464 <__sfputc_r+0x1c>
 8019454:	6994      	ldr	r4, [r2, #24]
 8019456:	42a3      	cmp	r3, r4
 8019458:	db01      	blt.n	801945e <__sfputc_r+0x16>
 801945a:	290a      	cmp	r1, #10
 801945c:	d102      	bne.n	8019464 <__sfputc_r+0x1c>
 801945e:	bc10      	pop	{r4}
 8019460:	f7ff bccf 	b.w	8018e02 <__swbuf_r>
 8019464:	6813      	ldr	r3, [r2, #0]
 8019466:	1c58      	adds	r0, r3, #1
 8019468:	6010      	str	r0, [r2, #0]
 801946a:	7019      	strb	r1, [r3, #0]
 801946c:	4608      	mov	r0, r1
 801946e:	bc10      	pop	{r4}
 8019470:	4770      	bx	lr

08019472 <__sfputs_r>:
 8019472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019474:	4606      	mov	r6, r0
 8019476:	460f      	mov	r7, r1
 8019478:	4614      	mov	r4, r2
 801947a:	18d5      	adds	r5, r2, r3
 801947c:	42ac      	cmp	r4, r5
 801947e:	d101      	bne.n	8019484 <__sfputs_r+0x12>
 8019480:	2000      	movs	r0, #0
 8019482:	e007      	b.n	8019494 <__sfputs_r+0x22>
 8019484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019488:	463a      	mov	r2, r7
 801948a:	4630      	mov	r0, r6
 801948c:	f7ff ffdc 	bl	8019448 <__sfputc_r>
 8019490:	1c43      	adds	r3, r0, #1
 8019492:	d1f3      	bne.n	801947c <__sfputs_r+0xa>
 8019494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019498 <_vfiprintf_r>:
 8019498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801949c:	460d      	mov	r5, r1
 801949e:	b09d      	sub	sp, #116	; 0x74
 80194a0:	4614      	mov	r4, r2
 80194a2:	4698      	mov	r8, r3
 80194a4:	4606      	mov	r6, r0
 80194a6:	b118      	cbz	r0, 80194b0 <_vfiprintf_r+0x18>
 80194a8:	6a03      	ldr	r3, [r0, #32]
 80194aa:	b90b      	cbnz	r3, 80194b0 <_vfiprintf_r+0x18>
 80194ac:	f7ff fba2 	bl	8018bf4 <__sinit>
 80194b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194b2:	07d9      	lsls	r1, r3, #31
 80194b4:	d405      	bmi.n	80194c2 <_vfiprintf_r+0x2a>
 80194b6:	89ab      	ldrh	r3, [r5, #12]
 80194b8:	059a      	lsls	r2, r3, #22
 80194ba:	d402      	bmi.n	80194c2 <_vfiprintf_r+0x2a>
 80194bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194be:	f7ff fe08 	bl	80190d2 <__retarget_lock_acquire_recursive>
 80194c2:	89ab      	ldrh	r3, [r5, #12]
 80194c4:	071b      	lsls	r3, r3, #28
 80194c6:	d501      	bpl.n	80194cc <_vfiprintf_r+0x34>
 80194c8:	692b      	ldr	r3, [r5, #16]
 80194ca:	b99b      	cbnz	r3, 80194f4 <_vfiprintf_r+0x5c>
 80194cc:	4629      	mov	r1, r5
 80194ce:	4630      	mov	r0, r6
 80194d0:	f7ff fcd4 	bl	8018e7c <__swsetup_r>
 80194d4:	b170      	cbz	r0, 80194f4 <_vfiprintf_r+0x5c>
 80194d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194d8:	07dc      	lsls	r4, r3, #31
 80194da:	d504      	bpl.n	80194e6 <_vfiprintf_r+0x4e>
 80194dc:	f04f 30ff 	mov.w	r0, #4294967295
 80194e0:	b01d      	add	sp, #116	; 0x74
 80194e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e6:	89ab      	ldrh	r3, [r5, #12]
 80194e8:	0598      	lsls	r0, r3, #22
 80194ea:	d4f7      	bmi.n	80194dc <_vfiprintf_r+0x44>
 80194ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194ee:	f7ff fdf1 	bl	80190d4 <__retarget_lock_release_recursive>
 80194f2:	e7f3      	b.n	80194dc <_vfiprintf_r+0x44>
 80194f4:	2300      	movs	r3, #0
 80194f6:	9309      	str	r3, [sp, #36]	; 0x24
 80194f8:	2320      	movs	r3, #32
 80194fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8019502:	2330      	movs	r3, #48	; 0x30
 8019504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80196b8 <_vfiprintf_r+0x220>
 8019508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801950c:	f04f 0901 	mov.w	r9, #1
 8019510:	4623      	mov	r3, r4
 8019512:	469a      	mov	sl, r3
 8019514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019518:	b10a      	cbz	r2, 801951e <_vfiprintf_r+0x86>
 801951a:	2a25      	cmp	r2, #37	; 0x25
 801951c:	d1f9      	bne.n	8019512 <_vfiprintf_r+0x7a>
 801951e:	ebba 0b04 	subs.w	fp, sl, r4
 8019522:	d00b      	beq.n	801953c <_vfiprintf_r+0xa4>
 8019524:	465b      	mov	r3, fp
 8019526:	4622      	mov	r2, r4
 8019528:	4629      	mov	r1, r5
 801952a:	4630      	mov	r0, r6
 801952c:	f7ff ffa1 	bl	8019472 <__sfputs_r>
 8019530:	3001      	adds	r0, #1
 8019532:	f000 80a9 	beq.w	8019688 <_vfiprintf_r+0x1f0>
 8019536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019538:	445a      	add	r2, fp
 801953a:	9209      	str	r2, [sp, #36]	; 0x24
 801953c:	f89a 3000 	ldrb.w	r3, [sl]
 8019540:	2b00      	cmp	r3, #0
 8019542:	f000 80a1 	beq.w	8019688 <_vfiprintf_r+0x1f0>
 8019546:	2300      	movs	r3, #0
 8019548:	f04f 32ff 	mov.w	r2, #4294967295
 801954c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019550:	f10a 0a01 	add.w	sl, sl, #1
 8019554:	9304      	str	r3, [sp, #16]
 8019556:	9307      	str	r3, [sp, #28]
 8019558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801955c:	931a      	str	r3, [sp, #104]	; 0x68
 801955e:	4654      	mov	r4, sl
 8019560:	2205      	movs	r2, #5
 8019562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019566:	4854      	ldr	r0, [pc, #336]	; (80196b8 <_vfiprintf_r+0x220>)
 8019568:	f7e6 fe1a 	bl	80001a0 <memchr>
 801956c:	9a04      	ldr	r2, [sp, #16]
 801956e:	b9d8      	cbnz	r0, 80195a8 <_vfiprintf_r+0x110>
 8019570:	06d1      	lsls	r1, r2, #27
 8019572:	bf44      	itt	mi
 8019574:	2320      	movmi	r3, #32
 8019576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801957a:	0713      	lsls	r3, r2, #28
 801957c:	bf44      	itt	mi
 801957e:	232b      	movmi	r3, #43	; 0x2b
 8019580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019584:	f89a 3000 	ldrb.w	r3, [sl]
 8019588:	2b2a      	cmp	r3, #42	; 0x2a
 801958a:	d015      	beq.n	80195b8 <_vfiprintf_r+0x120>
 801958c:	9a07      	ldr	r2, [sp, #28]
 801958e:	4654      	mov	r4, sl
 8019590:	2000      	movs	r0, #0
 8019592:	f04f 0c0a 	mov.w	ip, #10
 8019596:	4621      	mov	r1, r4
 8019598:	f811 3b01 	ldrb.w	r3, [r1], #1
 801959c:	3b30      	subs	r3, #48	; 0x30
 801959e:	2b09      	cmp	r3, #9
 80195a0:	d94d      	bls.n	801963e <_vfiprintf_r+0x1a6>
 80195a2:	b1b0      	cbz	r0, 80195d2 <_vfiprintf_r+0x13a>
 80195a4:	9207      	str	r2, [sp, #28]
 80195a6:	e014      	b.n	80195d2 <_vfiprintf_r+0x13a>
 80195a8:	eba0 0308 	sub.w	r3, r0, r8
 80195ac:	fa09 f303 	lsl.w	r3, r9, r3
 80195b0:	4313      	orrs	r3, r2
 80195b2:	9304      	str	r3, [sp, #16]
 80195b4:	46a2      	mov	sl, r4
 80195b6:	e7d2      	b.n	801955e <_vfiprintf_r+0xc6>
 80195b8:	9b03      	ldr	r3, [sp, #12]
 80195ba:	1d19      	adds	r1, r3, #4
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	9103      	str	r1, [sp, #12]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	bfbb      	ittet	lt
 80195c4:	425b      	neglt	r3, r3
 80195c6:	f042 0202 	orrlt.w	r2, r2, #2
 80195ca:	9307      	strge	r3, [sp, #28]
 80195cc:	9307      	strlt	r3, [sp, #28]
 80195ce:	bfb8      	it	lt
 80195d0:	9204      	strlt	r2, [sp, #16]
 80195d2:	7823      	ldrb	r3, [r4, #0]
 80195d4:	2b2e      	cmp	r3, #46	; 0x2e
 80195d6:	d10c      	bne.n	80195f2 <_vfiprintf_r+0x15a>
 80195d8:	7863      	ldrb	r3, [r4, #1]
 80195da:	2b2a      	cmp	r3, #42	; 0x2a
 80195dc:	d134      	bne.n	8019648 <_vfiprintf_r+0x1b0>
 80195de:	9b03      	ldr	r3, [sp, #12]
 80195e0:	1d1a      	adds	r2, r3, #4
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	9203      	str	r2, [sp, #12]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	bfb8      	it	lt
 80195ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80195ee:	3402      	adds	r4, #2
 80195f0:	9305      	str	r3, [sp, #20]
 80195f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80196bc <_vfiprintf_r+0x224>
 80195f6:	7821      	ldrb	r1, [r4, #0]
 80195f8:	2203      	movs	r2, #3
 80195fa:	4650      	mov	r0, sl
 80195fc:	f7e6 fdd0 	bl	80001a0 <memchr>
 8019600:	b138      	cbz	r0, 8019612 <_vfiprintf_r+0x17a>
 8019602:	9b04      	ldr	r3, [sp, #16]
 8019604:	eba0 000a 	sub.w	r0, r0, sl
 8019608:	2240      	movs	r2, #64	; 0x40
 801960a:	4082      	lsls	r2, r0
 801960c:	4313      	orrs	r3, r2
 801960e:	3401      	adds	r4, #1
 8019610:	9304      	str	r3, [sp, #16]
 8019612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019616:	482a      	ldr	r0, [pc, #168]	; (80196c0 <_vfiprintf_r+0x228>)
 8019618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801961c:	2206      	movs	r2, #6
 801961e:	f7e6 fdbf 	bl	80001a0 <memchr>
 8019622:	2800      	cmp	r0, #0
 8019624:	d03f      	beq.n	80196a6 <_vfiprintf_r+0x20e>
 8019626:	4b27      	ldr	r3, [pc, #156]	; (80196c4 <_vfiprintf_r+0x22c>)
 8019628:	bb1b      	cbnz	r3, 8019672 <_vfiprintf_r+0x1da>
 801962a:	9b03      	ldr	r3, [sp, #12]
 801962c:	3307      	adds	r3, #7
 801962e:	f023 0307 	bic.w	r3, r3, #7
 8019632:	3308      	adds	r3, #8
 8019634:	9303      	str	r3, [sp, #12]
 8019636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019638:	443b      	add	r3, r7
 801963a:	9309      	str	r3, [sp, #36]	; 0x24
 801963c:	e768      	b.n	8019510 <_vfiprintf_r+0x78>
 801963e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019642:	460c      	mov	r4, r1
 8019644:	2001      	movs	r0, #1
 8019646:	e7a6      	b.n	8019596 <_vfiprintf_r+0xfe>
 8019648:	2300      	movs	r3, #0
 801964a:	3401      	adds	r4, #1
 801964c:	9305      	str	r3, [sp, #20]
 801964e:	4619      	mov	r1, r3
 8019650:	f04f 0c0a 	mov.w	ip, #10
 8019654:	4620      	mov	r0, r4
 8019656:	f810 2b01 	ldrb.w	r2, [r0], #1
 801965a:	3a30      	subs	r2, #48	; 0x30
 801965c:	2a09      	cmp	r2, #9
 801965e:	d903      	bls.n	8019668 <_vfiprintf_r+0x1d0>
 8019660:	2b00      	cmp	r3, #0
 8019662:	d0c6      	beq.n	80195f2 <_vfiprintf_r+0x15a>
 8019664:	9105      	str	r1, [sp, #20]
 8019666:	e7c4      	b.n	80195f2 <_vfiprintf_r+0x15a>
 8019668:	fb0c 2101 	mla	r1, ip, r1, r2
 801966c:	4604      	mov	r4, r0
 801966e:	2301      	movs	r3, #1
 8019670:	e7f0      	b.n	8019654 <_vfiprintf_r+0x1bc>
 8019672:	ab03      	add	r3, sp, #12
 8019674:	9300      	str	r3, [sp, #0]
 8019676:	462a      	mov	r2, r5
 8019678:	4b13      	ldr	r3, [pc, #76]	; (80196c8 <_vfiprintf_r+0x230>)
 801967a:	a904      	add	r1, sp, #16
 801967c:	4630      	mov	r0, r6
 801967e:	f3af 8000 	nop.w
 8019682:	4607      	mov	r7, r0
 8019684:	1c78      	adds	r0, r7, #1
 8019686:	d1d6      	bne.n	8019636 <_vfiprintf_r+0x19e>
 8019688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801968a:	07d9      	lsls	r1, r3, #31
 801968c:	d405      	bmi.n	801969a <_vfiprintf_r+0x202>
 801968e:	89ab      	ldrh	r3, [r5, #12]
 8019690:	059a      	lsls	r2, r3, #22
 8019692:	d402      	bmi.n	801969a <_vfiprintf_r+0x202>
 8019694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019696:	f7ff fd1d 	bl	80190d4 <__retarget_lock_release_recursive>
 801969a:	89ab      	ldrh	r3, [r5, #12]
 801969c:	065b      	lsls	r3, r3, #25
 801969e:	f53f af1d 	bmi.w	80194dc <_vfiprintf_r+0x44>
 80196a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196a4:	e71c      	b.n	80194e0 <_vfiprintf_r+0x48>
 80196a6:	ab03      	add	r3, sp, #12
 80196a8:	9300      	str	r3, [sp, #0]
 80196aa:	462a      	mov	r2, r5
 80196ac:	4b06      	ldr	r3, [pc, #24]	; (80196c8 <_vfiprintf_r+0x230>)
 80196ae:	a904      	add	r1, sp, #16
 80196b0:	4630      	mov	r0, r6
 80196b2:	f000 f879 	bl	80197a8 <_printf_i>
 80196b6:	e7e4      	b.n	8019682 <_vfiprintf_r+0x1ea>
 80196b8:	0801d974 	.word	0x0801d974
 80196bc:	0801d97a 	.word	0x0801d97a
 80196c0:	0801d97e 	.word	0x0801d97e
 80196c4:	00000000 	.word	0x00000000
 80196c8:	08019473 	.word	0x08019473

080196cc <_printf_common>:
 80196cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196d0:	4616      	mov	r6, r2
 80196d2:	4699      	mov	r9, r3
 80196d4:	688a      	ldr	r2, [r1, #8]
 80196d6:	690b      	ldr	r3, [r1, #16]
 80196d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196dc:	4293      	cmp	r3, r2
 80196de:	bfb8      	it	lt
 80196e0:	4613      	movlt	r3, r2
 80196e2:	6033      	str	r3, [r6, #0]
 80196e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196e8:	4607      	mov	r7, r0
 80196ea:	460c      	mov	r4, r1
 80196ec:	b10a      	cbz	r2, 80196f2 <_printf_common+0x26>
 80196ee:	3301      	adds	r3, #1
 80196f0:	6033      	str	r3, [r6, #0]
 80196f2:	6823      	ldr	r3, [r4, #0]
 80196f4:	0699      	lsls	r1, r3, #26
 80196f6:	bf42      	ittt	mi
 80196f8:	6833      	ldrmi	r3, [r6, #0]
 80196fa:	3302      	addmi	r3, #2
 80196fc:	6033      	strmi	r3, [r6, #0]
 80196fe:	6825      	ldr	r5, [r4, #0]
 8019700:	f015 0506 	ands.w	r5, r5, #6
 8019704:	d106      	bne.n	8019714 <_printf_common+0x48>
 8019706:	f104 0a19 	add.w	sl, r4, #25
 801970a:	68e3      	ldr	r3, [r4, #12]
 801970c:	6832      	ldr	r2, [r6, #0]
 801970e:	1a9b      	subs	r3, r3, r2
 8019710:	42ab      	cmp	r3, r5
 8019712:	dc26      	bgt.n	8019762 <_printf_common+0x96>
 8019714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019718:	1e13      	subs	r3, r2, #0
 801971a:	6822      	ldr	r2, [r4, #0]
 801971c:	bf18      	it	ne
 801971e:	2301      	movne	r3, #1
 8019720:	0692      	lsls	r2, r2, #26
 8019722:	d42b      	bmi.n	801977c <_printf_common+0xb0>
 8019724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019728:	4649      	mov	r1, r9
 801972a:	4638      	mov	r0, r7
 801972c:	47c0      	blx	r8
 801972e:	3001      	adds	r0, #1
 8019730:	d01e      	beq.n	8019770 <_printf_common+0xa4>
 8019732:	6823      	ldr	r3, [r4, #0]
 8019734:	6922      	ldr	r2, [r4, #16]
 8019736:	f003 0306 	and.w	r3, r3, #6
 801973a:	2b04      	cmp	r3, #4
 801973c:	bf02      	ittt	eq
 801973e:	68e5      	ldreq	r5, [r4, #12]
 8019740:	6833      	ldreq	r3, [r6, #0]
 8019742:	1aed      	subeq	r5, r5, r3
 8019744:	68a3      	ldr	r3, [r4, #8]
 8019746:	bf0c      	ite	eq
 8019748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801974c:	2500      	movne	r5, #0
 801974e:	4293      	cmp	r3, r2
 8019750:	bfc4      	itt	gt
 8019752:	1a9b      	subgt	r3, r3, r2
 8019754:	18ed      	addgt	r5, r5, r3
 8019756:	2600      	movs	r6, #0
 8019758:	341a      	adds	r4, #26
 801975a:	42b5      	cmp	r5, r6
 801975c:	d11a      	bne.n	8019794 <_printf_common+0xc8>
 801975e:	2000      	movs	r0, #0
 8019760:	e008      	b.n	8019774 <_printf_common+0xa8>
 8019762:	2301      	movs	r3, #1
 8019764:	4652      	mov	r2, sl
 8019766:	4649      	mov	r1, r9
 8019768:	4638      	mov	r0, r7
 801976a:	47c0      	blx	r8
 801976c:	3001      	adds	r0, #1
 801976e:	d103      	bne.n	8019778 <_printf_common+0xac>
 8019770:	f04f 30ff 	mov.w	r0, #4294967295
 8019774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019778:	3501      	adds	r5, #1
 801977a:	e7c6      	b.n	801970a <_printf_common+0x3e>
 801977c:	18e1      	adds	r1, r4, r3
 801977e:	1c5a      	adds	r2, r3, #1
 8019780:	2030      	movs	r0, #48	; 0x30
 8019782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019786:	4422      	add	r2, r4
 8019788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801978c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019790:	3302      	adds	r3, #2
 8019792:	e7c7      	b.n	8019724 <_printf_common+0x58>
 8019794:	2301      	movs	r3, #1
 8019796:	4622      	mov	r2, r4
 8019798:	4649      	mov	r1, r9
 801979a:	4638      	mov	r0, r7
 801979c:	47c0      	blx	r8
 801979e:	3001      	adds	r0, #1
 80197a0:	d0e6      	beq.n	8019770 <_printf_common+0xa4>
 80197a2:	3601      	adds	r6, #1
 80197a4:	e7d9      	b.n	801975a <_printf_common+0x8e>
	...

080197a8 <_printf_i>:
 80197a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80197ac:	7e0f      	ldrb	r7, [r1, #24]
 80197ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80197b0:	2f78      	cmp	r7, #120	; 0x78
 80197b2:	4691      	mov	r9, r2
 80197b4:	4680      	mov	r8, r0
 80197b6:	460c      	mov	r4, r1
 80197b8:	469a      	mov	sl, r3
 80197ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80197be:	d807      	bhi.n	80197d0 <_printf_i+0x28>
 80197c0:	2f62      	cmp	r7, #98	; 0x62
 80197c2:	d80a      	bhi.n	80197da <_printf_i+0x32>
 80197c4:	2f00      	cmp	r7, #0
 80197c6:	f000 80d4 	beq.w	8019972 <_printf_i+0x1ca>
 80197ca:	2f58      	cmp	r7, #88	; 0x58
 80197cc:	f000 80c0 	beq.w	8019950 <_printf_i+0x1a8>
 80197d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80197d8:	e03a      	b.n	8019850 <_printf_i+0xa8>
 80197da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80197de:	2b15      	cmp	r3, #21
 80197e0:	d8f6      	bhi.n	80197d0 <_printf_i+0x28>
 80197e2:	a101      	add	r1, pc, #4	; (adr r1, 80197e8 <_printf_i+0x40>)
 80197e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197e8:	08019841 	.word	0x08019841
 80197ec:	08019855 	.word	0x08019855
 80197f0:	080197d1 	.word	0x080197d1
 80197f4:	080197d1 	.word	0x080197d1
 80197f8:	080197d1 	.word	0x080197d1
 80197fc:	080197d1 	.word	0x080197d1
 8019800:	08019855 	.word	0x08019855
 8019804:	080197d1 	.word	0x080197d1
 8019808:	080197d1 	.word	0x080197d1
 801980c:	080197d1 	.word	0x080197d1
 8019810:	080197d1 	.word	0x080197d1
 8019814:	08019959 	.word	0x08019959
 8019818:	08019881 	.word	0x08019881
 801981c:	08019913 	.word	0x08019913
 8019820:	080197d1 	.word	0x080197d1
 8019824:	080197d1 	.word	0x080197d1
 8019828:	0801997b 	.word	0x0801997b
 801982c:	080197d1 	.word	0x080197d1
 8019830:	08019881 	.word	0x08019881
 8019834:	080197d1 	.word	0x080197d1
 8019838:	080197d1 	.word	0x080197d1
 801983c:	0801991b 	.word	0x0801991b
 8019840:	682b      	ldr	r3, [r5, #0]
 8019842:	1d1a      	adds	r2, r3, #4
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	602a      	str	r2, [r5, #0]
 8019848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801984c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019850:	2301      	movs	r3, #1
 8019852:	e09f      	b.n	8019994 <_printf_i+0x1ec>
 8019854:	6820      	ldr	r0, [r4, #0]
 8019856:	682b      	ldr	r3, [r5, #0]
 8019858:	0607      	lsls	r7, r0, #24
 801985a:	f103 0104 	add.w	r1, r3, #4
 801985e:	6029      	str	r1, [r5, #0]
 8019860:	d501      	bpl.n	8019866 <_printf_i+0xbe>
 8019862:	681e      	ldr	r6, [r3, #0]
 8019864:	e003      	b.n	801986e <_printf_i+0xc6>
 8019866:	0646      	lsls	r6, r0, #25
 8019868:	d5fb      	bpl.n	8019862 <_printf_i+0xba>
 801986a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801986e:	2e00      	cmp	r6, #0
 8019870:	da03      	bge.n	801987a <_printf_i+0xd2>
 8019872:	232d      	movs	r3, #45	; 0x2d
 8019874:	4276      	negs	r6, r6
 8019876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801987a:	485a      	ldr	r0, [pc, #360]	; (80199e4 <_printf_i+0x23c>)
 801987c:	230a      	movs	r3, #10
 801987e:	e012      	b.n	80198a6 <_printf_i+0xfe>
 8019880:	682b      	ldr	r3, [r5, #0]
 8019882:	6820      	ldr	r0, [r4, #0]
 8019884:	1d19      	adds	r1, r3, #4
 8019886:	6029      	str	r1, [r5, #0]
 8019888:	0605      	lsls	r5, r0, #24
 801988a:	d501      	bpl.n	8019890 <_printf_i+0xe8>
 801988c:	681e      	ldr	r6, [r3, #0]
 801988e:	e002      	b.n	8019896 <_printf_i+0xee>
 8019890:	0641      	lsls	r1, r0, #25
 8019892:	d5fb      	bpl.n	801988c <_printf_i+0xe4>
 8019894:	881e      	ldrh	r6, [r3, #0]
 8019896:	4853      	ldr	r0, [pc, #332]	; (80199e4 <_printf_i+0x23c>)
 8019898:	2f6f      	cmp	r7, #111	; 0x6f
 801989a:	bf0c      	ite	eq
 801989c:	2308      	moveq	r3, #8
 801989e:	230a      	movne	r3, #10
 80198a0:	2100      	movs	r1, #0
 80198a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80198a6:	6865      	ldr	r5, [r4, #4]
 80198a8:	60a5      	str	r5, [r4, #8]
 80198aa:	2d00      	cmp	r5, #0
 80198ac:	bfa2      	ittt	ge
 80198ae:	6821      	ldrge	r1, [r4, #0]
 80198b0:	f021 0104 	bicge.w	r1, r1, #4
 80198b4:	6021      	strge	r1, [r4, #0]
 80198b6:	b90e      	cbnz	r6, 80198bc <_printf_i+0x114>
 80198b8:	2d00      	cmp	r5, #0
 80198ba:	d04b      	beq.n	8019954 <_printf_i+0x1ac>
 80198bc:	4615      	mov	r5, r2
 80198be:	fbb6 f1f3 	udiv	r1, r6, r3
 80198c2:	fb03 6711 	mls	r7, r3, r1, r6
 80198c6:	5dc7      	ldrb	r7, [r0, r7]
 80198c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80198cc:	4637      	mov	r7, r6
 80198ce:	42bb      	cmp	r3, r7
 80198d0:	460e      	mov	r6, r1
 80198d2:	d9f4      	bls.n	80198be <_printf_i+0x116>
 80198d4:	2b08      	cmp	r3, #8
 80198d6:	d10b      	bne.n	80198f0 <_printf_i+0x148>
 80198d8:	6823      	ldr	r3, [r4, #0]
 80198da:	07de      	lsls	r6, r3, #31
 80198dc:	d508      	bpl.n	80198f0 <_printf_i+0x148>
 80198de:	6923      	ldr	r3, [r4, #16]
 80198e0:	6861      	ldr	r1, [r4, #4]
 80198e2:	4299      	cmp	r1, r3
 80198e4:	bfde      	ittt	le
 80198e6:	2330      	movle	r3, #48	; 0x30
 80198e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80198f0:	1b52      	subs	r2, r2, r5
 80198f2:	6122      	str	r2, [r4, #16]
 80198f4:	f8cd a000 	str.w	sl, [sp]
 80198f8:	464b      	mov	r3, r9
 80198fa:	aa03      	add	r2, sp, #12
 80198fc:	4621      	mov	r1, r4
 80198fe:	4640      	mov	r0, r8
 8019900:	f7ff fee4 	bl	80196cc <_printf_common>
 8019904:	3001      	adds	r0, #1
 8019906:	d14a      	bne.n	801999e <_printf_i+0x1f6>
 8019908:	f04f 30ff 	mov.w	r0, #4294967295
 801990c:	b004      	add	sp, #16
 801990e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	f043 0320 	orr.w	r3, r3, #32
 8019918:	6023      	str	r3, [r4, #0]
 801991a:	4833      	ldr	r0, [pc, #204]	; (80199e8 <_printf_i+0x240>)
 801991c:	2778      	movs	r7, #120	; 0x78
 801991e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019922:	6823      	ldr	r3, [r4, #0]
 8019924:	6829      	ldr	r1, [r5, #0]
 8019926:	061f      	lsls	r7, r3, #24
 8019928:	f851 6b04 	ldr.w	r6, [r1], #4
 801992c:	d402      	bmi.n	8019934 <_printf_i+0x18c>
 801992e:	065f      	lsls	r7, r3, #25
 8019930:	bf48      	it	mi
 8019932:	b2b6      	uxthmi	r6, r6
 8019934:	07df      	lsls	r7, r3, #31
 8019936:	bf48      	it	mi
 8019938:	f043 0320 	orrmi.w	r3, r3, #32
 801993c:	6029      	str	r1, [r5, #0]
 801993e:	bf48      	it	mi
 8019940:	6023      	strmi	r3, [r4, #0]
 8019942:	b91e      	cbnz	r6, 801994c <_printf_i+0x1a4>
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	f023 0320 	bic.w	r3, r3, #32
 801994a:	6023      	str	r3, [r4, #0]
 801994c:	2310      	movs	r3, #16
 801994e:	e7a7      	b.n	80198a0 <_printf_i+0xf8>
 8019950:	4824      	ldr	r0, [pc, #144]	; (80199e4 <_printf_i+0x23c>)
 8019952:	e7e4      	b.n	801991e <_printf_i+0x176>
 8019954:	4615      	mov	r5, r2
 8019956:	e7bd      	b.n	80198d4 <_printf_i+0x12c>
 8019958:	682b      	ldr	r3, [r5, #0]
 801995a:	6826      	ldr	r6, [r4, #0]
 801995c:	6961      	ldr	r1, [r4, #20]
 801995e:	1d18      	adds	r0, r3, #4
 8019960:	6028      	str	r0, [r5, #0]
 8019962:	0635      	lsls	r5, r6, #24
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	d501      	bpl.n	801996c <_printf_i+0x1c4>
 8019968:	6019      	str	r1, [r3, #0]
 801996a:	e002      	b.n	8019972 <_printf_i+0x1ca>
 801996c:	0670      	lsls	r0, r6, #25
 801996e:	d5fb      	bpl.n	8019968 <_printf_i+0x1c0>
 8019970:	8019      	strh	r1, [r3, #0]
 8019972:	2300      	movs	r3, #0
 8019974:	6123      	str	r3, [r4, #16]
 8019976:	4615      	mov	r5, r2
 8019978:	e7bc      	b.n	80198f4 <_printf_i+0x14c>
 801997a:	682b      	ldr	r3, [r5, #0]
 801997c:	1d1a      	adds	r2, r3, #4
 801997e:	602a      	str	r2, [r5, #0]
 8019980:	681d      	ldr	r5, [r3, #0]
 8019982:	6862      	ldr	r2, [r4, #4]
 8019984:	2100      	movs	r1, #0
 8019986:	4628      	mov	r0, r5
 8019988:	f7e6 fc0a 	bl	80001a0 <memchr>
 801998c:	b108      	cbz	r0, 8019992 <_printf_i+0x1ea>
 801998e:	1b40      	subs	r0, r0, r5
 8019990:	6060      	str	r0, [r4, #4]
 8019992:	6863      	ldr	r3, [r4, #4]
 8019994:	6123      	str	r3, [r4, #16]
 8019996:	2300      	movs	r3, #0
 8019998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801999c:	e7aa      	b.n	80198f4 <_printf_i+0x14c>
 801999e:	6923      	ldr	r3, [r4, #16]
 80199a0:	462a      	mov	r2, r5
 80199a2:	4649      	mov	r1, r9
 80199a4:	4640      	mov	r0, r8
 80199a6:	47d0      	blx	sl
 80199a8:	3001      	adds	r0, #1
 80199aa:	d0ad      	beq.n	8019908 <_printf_i+0x160>
 80199ac:	6823      	ldr	r3, [r4, #0]
 80199ae:	079b      	lsls	r3, r3, #30
 80199b0:	d413      	bmi.n	80199da <_printf_i+0x232>
 80199b2:	68e0      	ldr	r0, [r4, #12]
 80199b4:	9b03      	ldr	r3, [sp, #12]
 80199b6:	4298      	cmp	r0, r3
 80199b8:	bfb8      	it	lt
 80199ba:	4618      	movlt	r0, r3
 80199bc:	e7a6      	b.n	801990c <_printf_i+0x164>
 80199be:	2301      	movs	r3, #1
 80199c0:	4632      	mov	r2, r6
 80199c2:	4649      	mov	r1, r9
 80199c4:	4640      	mov	r0, r8
 80199c6:	47d0      	blx	sl
 80199c8:	3001      	adds	r0, #1
 80199ca:	d09d      	beq.n	8019908 <_printf_i+0x160>
 80199cc:	3501      	adds	r5, #1
 80199ce:	68e3      	ldr	r3, [r4, #12]
 80199d0:	9903      	ldr	r1, [sp, #12]
 80199d2:	1a5b      	subs	r3, r3, r1
 80199d4:	42ab      	cmp	r3, r5
 80199d6:	dcf2      	bgt.n	80199be <_printf_i+0x216>
 80199d8:	e7eb      	b.n	80199b2 <_printf_i+0x20a>
 80199da:	2500      	movs	r5, #0
 80199dc:	f104 0619 	add.w	r6, r4, #25
 80199e0:	e7f5      	b.n	80199ce <_printf_i+0x226>
 80199e2:	bf00      	nop
 80199e4:	0801d985 	.word	0x0801d985
 80199e8:	0801d996 	.word	0x0801d996

080199ec <__sflush_r>:
 80199ec:	898a      	ldrh	r2, [r1, #12]
 80199ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199f0:	4605      	mov	r5, r0
 80199f2:	0710      	lsls	r0, r2, #28
 80199f4:	460c      	mov	r4, r1
 80199f6:	d457      	bmi.n	8019aa8 <__sflush_r+0xbc>
 80199f8:	684b      	ldr	r3, [r1, #4]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	dc04      	bgt.n	8019a08 <__sflush_r+0x1c>
 80199fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	dc01      	bgt.n	8019a08 <__sflush_r+0x1c>
 8019a04:	2000      	movs	r0, #0
 8019a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a0a:	2e00      	cmp	r6, #0
 8019a0c:	d0fa      	beq.n	8019a04 <__sflush_r+0x18>
 8019a0e:	2300      	movs	r3, #0
 8019a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a14:	682f      	ldr	r7, [r5, #0]
 8019a16:	6a21      	ldr	r1, [r4, #32]
 8019a18:	602b      	str	r3, [r5, #0]
 8019a1a:	d032      	beq.n	8019a82 <__sflush_r+0x96>
 8019a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a1e:	89a3      	ldrh	r3, [r4, #12]
 8019a20:	075a      	lsls	r2, r3, #29
 8019a22:	d505      	bpl.n	8019a30 <__sflush_r+0x44>
 8019a24:	6863      	ldr	r3, [r4, #4]
 8019a26:	1ac0      	subs	r0, r0, r3
 8019a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a2a:	b10b      	cbz	r3, 8019a30 <__sflush_r+0x44>
 8019a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a2e:	1ac0      	subs	r0, r0, r3
 8019a30:	2300      	movs	r3, #0
 8019a32:	4602      	mov	r2, r0
 8019a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a36:	6a21      	ldr	r1, [r4, #32]
 8019a38:	4628      	mov	r0, r5
 8019a3a:	47b0      	blx	r6
 8019a3c:	1c43      	adds	r3, r0, #1
 8019a3e:	89a3      	ldrh	r3, [r4, #12]
 8019a40:	d106      	bne.n	8019a50 <__sflush_r+0x64>
 8019a42:	6829      	ldr	r1, [r5, #0]
 8019a44:	291d      	cmp	r1, #29
 8019a46:	d82b      	bhi.n	8019aa0 <__sflush_r+0xb4>
 8019a48:	4a28      	ldr	r2, [pc, #160]	; (8019aec <__sflush_r+0x100>)
 8019a4a:	410a      	asrs	r2, r1
 8019a4c:	07d6      	lsls	r6, r2, #31
 8019a4e:	d427      	bmi.n	8019aa0 <__sflush_r+0xb4>
 8019a50:	2200      	movs	r2, #0
 8019a52:	6062      	str	r2, [r4, #4]
 8019a54:	04d9      	lsls	r1, r3, #19
 8019a56:	6922      	ldr	r2, [r4, #16]
 8019a58:	6022      	str	r2, [r4, #0]
 8019a5a:	d504      	bpl.n	8019a66 <__sflush_r+0x7a>
 8019a5c:	1c42      	adds	r2, r0, #1
 8019a5e:	d101      	bne.n	8019a64 <__sflush_r+0x78>
 8019a60:	682b      	ldr	r3, [r5, #0]
 8019a62:	b903      	cbnz	r3, 8019a66 <__sflush_r+0x7a>
 8019a64:	6560      	str	r0, [r4, #84]	; 0x54
 8019a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a68:	602f      	str	r7, [r5, #0]
 8019a6a:	2900      	cmp	r1, #0
 8019a6c:	d0ca      	beq.n	8019a04 <__sflush_r+0x18>
 8019a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a72:	4299      	cmp	r1, r3
 8019a74:	d002      	beq.n	8019a7c <__sflush_r+0x90>
 8019a76:	4628      	mov	r0, r5
 8019a78:	f7ff fb44 	bl	8019104 <_free_r>
 8019a7c:	2000      	movs	r0, #0
 8019a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8019a80:	e7c1      	b.n	8019a06 <__sflush_r+0x1a>
 8019a82:	2301      	movs	r3, #1
 8019a84:	4628      	mov	r0, r5
 8019a86:	47b0      	blx	r6
 8019a88:	1c41      	adds	r1, r0, #1
 8019a8a:	d1c8      	bne.n	8019a1e <__sflush_r+0x32>
 8019a8c:	682b      	ldr	r3, [r5, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d0c5      	beq.n	8019a1e <__sflush_r+0x32>
 8019a92:	2b1d      	cmp	r3, #29
 8019a94:	d001      	beq.n	8019a9a <__sflush_r+0xae>
 8019a96:	2b16      	cmp	r3, #22
 8019a98:	d101      	bne.n	8019a9e <__sflush_r+0xb2>
 8019a9a:	602f      	str	r7, [r5, #0]
 8019a9c:	e7b2      	b.n	8019a04 <__sflush_r+0x18>
 8019a9e:	89a3      	ldrh	r3, [r4, #12]
 8019aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aa4:	81a3      	strh	r3, [r4, #12]
 8019aa6:	e7ae      	b.n	8019a06 <__sflush_r+0x1a>
 8019aa8:	690f      	ldr	r7, [r1, #16]
 8019aaa:	2f00      	cmp	r7, #0
 8019aac:	d0aa      	beq.n	8019a04 <__sflush_r+0x18>
 8019aae:	0793      	lsls	r3, r2, #30
 8019ab0:	680e      	ldr	r6, [r1, #0]
 8019ab2:	bf08      	it	eq
 8019ab4:	694b      	ldreq	r3, [r1, #20]
 8019ab6:	600f      	str	r7, [r1, #0]
 8019ab8:	bf18      	it	ne
 8019aba:	2300      	movne	r3, #0
 8019abc:	1bf6      	subs	r6, r6, r7
 8019abe:	608b      	str	r3, [r1, #8]
 8019ac0:	2e00      	cmp	r6, #0
 8019ac2:	dd9f      	ble.n	8019a04 <__sflush_r+0x18>
 8019ac4:	6a21      	ldr	r1, [r4, #32]
 8019ac6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8019aca:	4633      	mov	r3, r6
 8019acc:	463a      	mov	r2, r7
 8019ace:	4628      	mov	r0, r5
 8019ad0:	47e0      	blx	ip
 8019ad2:	2800      	cmp	r0, #0
 8019ad4:	dc06      	bgt.n	8019ae4 <__sflush_r+0xf8>
 8019ad6:	89a3      	ldrh	r3, [r4, #12]
 8019ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019adc:	81a3      	strh	r3, [r4, #12]
 8019ade:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae2:	e790      	b.n	8019a06 <__sflush_r+0x1a>
 8019ae4:	4407      	add	r7, r0
 8019ae6:	1a36      	subs	r6, r6, r0
 8019ae8:	e7ea      	b.n	8019ac0 <__sflush_r+0xd4>
 8019aea:	bf00      	nop
 8019aec:	dfbffffe 	.word	0xdfbffffe

08019af0 <_fflush_r>:
 8019af0:	b538      	push	{r3, r4, r5, lr}
 8019af2:	690b      	ldr	r3, [r1, #16]
 8019af4:	4605      	mov	r5, r0
 8019af6:	460c      	mov	r4, r1
 8019af8:	b913      	cbnz	r3, 8019b00 <_fflush_r+0x10>
 8019afa:	2500      	movs	r5, #0
 8019afc:	4628      	mov	r0, r5
 8019afe:	bd38      	pop	{r3, r4, r5, pc}
 8019b00:	b118      	cbz	r0, 8019b0a <_fflush_r+0x1a>
 8019b02:	6a03      	ldr	r3, [r0, #32]
 8019b04:	b90b      	cbnz	r3, 8019b0a <_fflush_r+0x1a>
 8019b06:	f7ff f875 	bl	8018bf4 <__sinit>
 8019b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d0f3      	beq.n	8019afa <_fflush_r+0xa>
 8019b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b14:	07d0      	lsls	r0, r2, #31
 8019b16:	d404      	bmi.n	8019b22 <_fflush_r+0x32>
 8019b18:	0599      	lsls	r1, r3, #22
 8019b1a:	d402      	bmi.n	8019b22 <_fflush_r+0x32>
 8019b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b1e:	f7ff fad8 	bl	80190d2 <__retarget_lock_acquire_recursive>
 8019b22:	4628      	mov	r0, r5
 8019b24:	4621      	mov	r1, r4
 8019b26:	f7ff ff61 	bl	80199ec <__sflush_r>
 8019b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b2c:	07da      	lsls	r2, r3, #31
 8019b2e:	4605      	mov	r5, r0
 8019b30:	d4e4      	bmi.n	8019afc <_fflush_r+0xc>
 8019b32:	89a3      	ldrh	r3, [r4, #12]
 8019b34:	059b      	lsls	r3, r3, #22
 8019b36:	d4e1      	bmi.n	8019afc <_fflush_r+0xc>
 8019b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b3a:	f7ff facb 	bl	80190d4 <__retarget_lock_release_recursive>
 8019b3e:	e7dd      	b.n	8019afc <_fflush_r+0xc>

08019b40 <__swhatbuf_r>:
 8019b40:	b570      	push	{r4, r5, r6, lr}
 8019b42:	460c      	mov	r4, r1
 8019b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b48:	2900      	cmp	r1, #0
 8019b4a:	b096      	sub	sp, #88	; 0x58
 8019b4c:	4615      	mov	r5, r2
 8019b4e:	461e      	mov	r6, r3
 8019b50:	da0d      	bge.n	8019b6e <__swhatbuf_r+0x2e>
 8019b52:	89a3      	ldrh	r3, [r4, #12]
 8019b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019b58:	f04f 0100 	mov.w	r1, #0
 8019b5c:	bf0c      	ite	eq
 8019b5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019b62:	2340      	movne	r3, #64	; 0x40
 8019b64:	2000      	movs	r0, #0
 8019b66:	6031      	str	r1, [r6, #0]
 8019b68:	602b      	str	r3, [r5, #0]
 8019b6a:	b016      	add	sp, #88	; 0x58
 8019b6c:	bd70      	pop	{r4, r5, r6, pc}
 8019b6e:	466a      	mov	r2, sp
 8019b70:	f000 f848 	bl	8019c04 <_fstat_r>
 8019b74:	2800      	cmp	r0, #0
 8019b76:	dbec      	blt.n	8019b52 <__swhatbuf_r+0x12>
 8019b78:	9901      	ldr	r1, [sp, #4]
 8019b7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019b7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019b82:	4259      	negs	r1, r3
 8019b84:	4159      	adcs	r1, r3
 8019b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b8a:	e7eb      	b.n	8019b64 <__swhatbuf_r+0x24>

08019b8c <__smakebuf_r>:
 8019b8c:	898b      	ldrh	r3, [r1, #12]
 8019b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019b90:	079d      	lsls	r5, r3, #30
 8019b92:	4606      	mov	r6, r0
 8019b94:	460c      	mov	r4, r1
 8019b96:	d507      	bpl.n	8019ba8 <__smakebuf_r+0x1c>
 8019b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019b9c:	6023      	str	r3, [r4, #0]
 8019b9e:	6123      	str	r3, [r4, #16]
 8019ba0:	2301      	movs	r3, #1
 8019ba2:	6163      	str	r3, [r4, #20]
 8019ba4:	b002      	add	sp, #8
 8019ba6:	bd70      	pop	{r4, r5, r6, pc}
 8019ba8:	ab01      	add	r3, sp, #4
 8019baa:	466a      	mov	r2, sp
 8019bac:	f7ff ffc8 	bl	8019b40 <__swhatbuf_r>
 8019bb0:	9900      	ldr	r1, [sp, #0]
 8019bb2:	4605      	mov	r5, r0
 8019bb4:	4630      	mov	r0, r6
 8019bb6:	f7fe ff05 	bl	80189c4 <_malloc_r>
 8019bba:	b948      	cbnz	r0, 8019bd0 <__smakebuf_r+0x44>
 8019bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bc0:	059a      	lsls	r2, r3, #22
 8019bc2:	d4ef      	bmi.n	8019ba4 <__smakebuf_r+0x18>
 8019bc4:	f023 0303 	bic.w	r3, r3, #3
 8019bc8:	f043 0302 	orr.w	r3, r3, #2
 8019bcc:	81a3      	strh	r3, [r4, #12]
 8019bce:	e7e3      	b.n	8019b98 <__smakebuf_r+0xc>
 8019bd0:	89a3      	ldrh	r3, [r4, #12]
 8019bd2:	6020      	str	r0, [r4, #0]
 8019bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bd8:	81a3      	strh	r3, [r4, #12]
 8019bda:	9b00      	ldr	r3, [sp, #0]
 8019bdc:	6163      	str	r3, [r4, #20]
 8019bde:	9b01      	ldr	r3, [sp, #4]
 8019be0:	6120      	str	r0, [r4, #16]
 8019be2:	b15b      	cbz	r3, 8019bfc <__smakebuf_r+0x70>
 8019be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019be8:	4630      	mov	r0, r6
 8019bea:	f000 f81d 	bl	8019c28 <_isatty_r>
 8019bee:	b128      	cbz	r0, 8019bfc <__smakebuf_r+0x70>
 8019bf0:	89a3      	ldrh	r3, [r4, #12]
 8019bf2:	f023 0303 	bic.w	r3, r3, #3
 8019bf6:	f043 0301 	orr.w	r3, r3, #1
 8019bfa:	81a3      	strh	r3, [r4, #12]
 8019bfc:	89a3      	ldrh	r3, [r4, #12]
 8019bfe:	431d      	orrs	r5, r3
 8019c00:	81a5      	strh	r5, [r4, #12]
 8019c02:	e7cf      	b.n	8019ba4 <__smakebuf_r+0x18>

08019c04 <_fstat_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d07      	ldr	r5, [pc, #28]	; (8019c24 <_fstat_r+0x20>)
 8019c08:	2300      	movs	r3, #0
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	4608      	mov	r0, r1
 8019c0e:	4611      	mov	r1, r2
 8019c10:	602b      	str	r3, [r5, #0]
 8019c12:	f000 f859 	bl	8019cc8 <_fstat>
 8019c16:	1c43      	adds	r3, r0, #1
 8019c18:	d102      	bne.n	8019c20 <_fstat_r+0x1c>
 8019c1a:	682b      	ldr	r3, [r5, #0]
 8019c1c:	b103      	cbz	r3, 8019c20 <_fstat_r+0x1c>
 8019c1e:	6023      	str	r3, [r4, #0]
 8019c20:	bd38      	pop	{r3, r4, r5, pc}
 8019c22:	bf00      	nop
 8019c24:	200042dc 	.word	0x200042dc

08019c28 <_isatty_r>:
 8019c28:	b538      	push	{r3, r4, r5, lr}
 8019c2a:	4d06      	ldr	r5, [pc, #24]	; (8019c44 <_isatty_r+0x1c>)
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	4604      	mov	r4, r0
 8019c30:	4608      	mov	r0, r1
 8019c32:	602b      	str	r3, [r5, #0]
 8019c34:	f000 f850 	bl	8019cd8 <_isatty>
 8019c38:	1c43      	adds	r3, r0, #1
 8019c3a:	d102      	bne.n	8019c42 <_isatty_r+0x1a>
 8019c3c:	682b      	ldr	r3, [r5, #0]
 8019c3e:	b103      	cbz	r3, 8019c42 <_isatty_r+0x1a>
 8019c40:	6023      	str	r3, [r4, #0]
 8019c42:	bd38      	pop	{r3, r4, r5, pc}
 8019c44:	200042dc 	.word	0x200042dc

08019c48 <_realloc_r>:
 8019c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c4c:	4680      	mov	r8, r0
 8019c4e:	4614      	mov	r4, r2
 8019c50:	460e      	mov	r6, r1
 8019c52:	b921      	cbnz	r1, 8019c5e <_realloc_r+0x16>
 8019c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c58:	4611      	mov	r1, r2
 8019c5a:	f7fe beb3 	b.w	80189c4 <_malloc_r>
 8019c5e:	b92a      	cbnz	r2, 8019c6c <_realloc_r+0x24>
 8019c60:	f7ff fa50 	bl	8019104 <_free_r>
 8019c64:	4625      	mov	r5, r4
 8019c66:	4628      	mov	r0, r5
 8019c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c6c:	f000 f81b 	bl	8019ca6 <_malloc_usable_size_r>
 8019c70:	4284      	cmp	r4, r0
 8019c72:	4607      	mov	r7, r0
 8019c74:	d802      	bhi.n	8019c7c <_realloc_r+0x34>
 8019c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019c7a:	d812      	bhi.n	8019ca2 <_realloc_r+0x5a>
 8019c7c:	4621      	mov	r1, r4
 8019c7e:	4640      	mov	r0, r8
 8019c80:	f7fe fea0 	bl	80189c4 <_malloc_r>
 8019c84:	4605      	mov	r5, r0
 8019c86:	2800      	cmp	r0, #0
 8019c88:	d0ed      	beq.n	8019c66 <_realloc_r+0x1e>
 8019c8a:	42bc      	cmp	r4, r7
 8019c8c:	4622      	mov	r2, r4
 8019c8e:	4631      	mov	r1, r6
 8019c90:	bf28      	it	cs
 8019c92:	463a      	movcs	r2, r7
 8019c94:	f7ff fa27 	bl	80190e6 <memcpy>
 8019c98:	4631      	mov	r1, r6
 8019c9a:	4640      	mov	r0, r8
 8019c9c:	f7ff fa32 	bl	8019104 <_free_r>
 8019ca0:	e7e1      	b.n	8019c66 <_realloc_r+0x1e>
 8019ca2:	4635      	mov	r5, r6
 8019ca4:	e7df      	b.n	8019c66 <_realloc_r+0x1e>

08019ca6 <_malloc_usable_size_r>:
 8019ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019caa:	1f18      	subs	r0, r3, #4
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	bfbc      	itt	lt
 8019cb0:	580b      	ldrlt	r3, [r1, r0]
 8019cb2:	18c0      	addlt	r0, r0, r3
 8019cb4:	4770      	bx	lr
	...

08019cb8 <_close>:
 8019cb8:	4b02      	ldr	r3, [pc, #8]	; (8019cc4 <_close+0xc>)
 8019cba:	2258      	movs	r2, #88	; 0x58
 8019cbc:	601a      	str	r2, [r3, #0]
 8019cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc2:	4770      	bx	lr
 8019cc4:	200042dc 	.word	0x200042dc

08019cc8 <_fstat>:
 8019cc8:	4b02      	ldr	r3, [pc, #8]	; (8019cd4 <_fstat+0xc>)
 8019cca:	2258      	movs	r2, #88	; 0x58
 8019ccc:	601a      	str	r2, [r3, #0]
 8019cce:	f04f 30ff 	mov.w	r0, #4294967295
 8019cd2:	4770      	bx	lr
 8019cd4:	200042dc 	.word	0x200042dc

08019cd8 <_isatty>:
 8019cd8:	4b02      	ldr	r3, [pc, #8]	; (8019ce4 <_isatty+0xc>)
 8019cda:	2258      	movs	r2, #88	; 0x58
 8019cdc:	601a      	str	r2, [r3, #0]
 8019cde:	2000      	movs	r0, #0
 8019ce0:	4770      	bx	lr
 8019ce2:	bf00      	nop
 8019ce4:	200042dc 	.word	0x200042dc

08019ce8 <_lseek>:
 8019ce8:	4b02      	ldr	r3, [pc, #8]	; (8019cf4 <_lseek+0xc>)
 8019cea:	2258      	movs	r2, #88	; 0x58
 8019cec:	601a      	str	r2, [r3, #0]
 8019cee:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf2:	4770      	bx	lr
 8019cf4:	200042dc 	.word	0x200042dc

08019cf8 <_read>:
 8019cf8:	4b02      	ldr	r3, [pc, #8]	; (8019d04 <_read+0xc>)
 8019cfa:	2258      	movs	r2, #88	; 0x58
 8019cfc:	601a      	str	r2, [r3, #0]
 8019cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8019d02:	4770      	bx	lr
 8019d04:	200042dc 	.word	0x200042dc

08019d08 <_sbrk>:
 8019d08:	4a04      	ldr	r2, [pc, #16]	; (8019d1c <_sbrk+0x14>)
 8019d0a:	6811      	ldr	r1, [r2, #0]
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	b909      	cbnz	r1, 8019d14 <_sbrk+0xc>
 8019d10:	4903      	ldr	r1, [pc, #12]	; (8019d20 <_sbrk+0x18>)
 8019d12:	6011      	str	r1, [r2, #0]
 8019d14:	6810      	ldr	r0, [r2, #0]
 8019d16:	4403      	add	r3, r0
 8019d18:	6013      	str	r3, [r2, #0]
 8019d1a:	4770      	bx	lr
 8019d1c:	200042e4 	.word	0x200042e4
 8019d20:	200042e8 	.word	0x200042e8

08019d24 <_init>:
 8019d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d26:	bf00      	nop
 8019d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d2a:	bc08      	pop	{r3}
 8019d2c:	469e      	mov	lr, r3
 8019d2e:	4770      	bx	lr

08019d30 <_fini>:
 8019d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d32:	bf00      	nop
 8019d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d36:	bc08      	pop	{r3}
 8019d38:	469e      	mov	lr, r3
 8019d3a:	4770      	bx	lr
