
embenet_node_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cbfc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005370  0801cd40  0801cd40  0002cd40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080220b0  080220b0  000400a0  2**0
                  CONTENTS
  4 .ARM          00000008  080220b0  080220b0  000320b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080220b8  080220b8  000400a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080220b8  080220b8  000320b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080220bc  080220bc  000320bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080220c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  200000a0  08022160  000400a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003fa8  08022160  00043fa8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000400a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000088  00000000  00000000  000400ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e11  00000000  00000000  00040152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000632c  00000000  00000000  00062f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d80  00000000  00000000  00069290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000161f  00000000  00000000  0006b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002335e  00000000  00000000  0006c62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c37  00000000  00000000  0008f98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2db5  00000000  00000000  000b55c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008464  00000000  00000000  0017837c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001807e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a0 	.word	0x200000a0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801cd24 	.word	0x0801cd24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a4 	.word	0x200000a4
 800017c:	0801cd24 	.word	0x0801cd24

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_ldivmod>:
 8000b6c:	b97b      	cbnz	r3, 8000b8e <__aeabi_ldivmod+0x22>
 8000b6e:	b972      	cbnz	r2, 8000b8e <__aeabi_ldivmod+0x22>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bfbe      	ittt	lt
 8000b74:	2000      	movlt	r0, #0
 8000b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b7a:	e006      	blt.n	8000b8a <__aeabi_ldivmod+0x1e>
 8000b7c:	bf08      	it	eq
 8000b7e:	2800      	cmpeq	r0, #0
 8000b80:	bf1c      	itt	ne
 8000b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b86:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8a:	f000 b9bb 	b.w	8000f04 <__aeabi_idiv0>
 8000b8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b96:	2900      	cmp	r1, #0
 8000b98:	db09      	blt.n	8000bae <__aeabi_ldivmod+0x42>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db1a      	blt.n	8000bd4 <__aeabi_ldivmod+0x68>
 8000b9e:	f000 f84d 	bl	8000c3c <__udivmoddi4>
 8000ba2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000baa:	b004      	add	sp, #16
 8000bac:	4770      	bx	lr
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db1b      	blt.n	8000bf0 <__aeabi_ldivmod+0x84>
 8000bb8:	f000 f840 	bl	8000c3c <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	4770      	bx	lr
 8000bd4:	4252      	negs	r2, r2
 8000bd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bda:	f000 f82f 	bl	8000c3c <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4240      	negs	r0, r0
 8000bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f821 	bl	8000c3c <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b970 	b.w	8000f04 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	460d      	mov	r5, r1
 8000c44:	4604      	mov	r4, r0
 8000c46:	460f      	mov	r7, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14a      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4694      	mov	ip, r2
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0xe2>
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	b143      	cbz	r3, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	f1c3 0220 	rsb	r2, r3, #32
 8000c60:	409f      	lsls	r7, r3
 8000c62:	fa20 f202 	lsr.w	r2, r0, r2
 8000c66:	4317      	orrs	r7, r2
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6e:	fa1f f58c 	uxth.w	r5, ip
 8000c72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	fb01 f005 	mul.w	r0, r1, r5
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x62>
 8000c88:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c90:	f080 811b 	bcs.w	8000eca <__udivmoddi4+0x28e>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f240 8118 	bls.w	8000eca <__udivmoddi4+0x28e>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	4462      	add	r2, ip
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	b2a4      	uxth	r4, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cae:	fb00 f505 	mul.w	r5, r0, r5
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x90>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbe:	f080 8106 	bcs.w	8000ece <__udivmoddi4+0x292>
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	f240 8103 	bls.w	8000ece <__udivmoddi4+0x292>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11e      	cbz	r6, 8000cde <__udivmoddi4+0xa2>
 8000cd6:	40dc      	lsrs	r4, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e9c6 4300 	strd	r4, r3, [r6]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0xbc>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80ec 	beq.w	8000ec4 <__udivmoddi4+0x288>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d149      	bne.n	8000d94 <__udivmoddi4+0x158>
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d302      	bcc.n	8000d0a <__udivmoddi4+0xce>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	f200 80f7 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d0a:	1a84      	subs	r4, r0, r2
 8000d0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d10:	2001      	movs	r0, #1
 8000d12:	4617      	mov	r7, r2
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d0e2      	beq.n	8000cde <__udivmoddi4+0xa2>
 8000d18:	e9c6 4700 	strd	r4, r7, [r6]
 8000d1c:	e7df      	b.n	8000cde <__udivmoddi4+0xa2>
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xe6>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f382 	clz	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 808f 	bne.w	8000e4a <__udivmoddi4+0x20e>
 8000d2c:	1a8a      	subs	r2, r1, r2
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2101      	movs	r1, #1
 8000d38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d40:	0c22      	lsrs	r2, r4, #16
 8000d42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d46:	fb0e f005 	mul.w	r0, lr, r5
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f200 80ca 	bhi.w	8000ef2 <__udivmoddi4+0x2b6>
 8000d5e:	4645      	mov	r5, r8
 8000d60:	1a12      	subs	r2, r2, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d68:	fb07 2210 	mls	r2, r7, r0, r2
 8000d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x14e>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x14c>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80ba 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d88:	4610      	mov	r0, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d92:	e79f      	b.n	8000cd4 <__udivmoddi4+0x98>
 8000d94:	f1c1 0720 	rsb	r7, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa05 f401 	lsl.w	r4, r5, r1
 8000da6:	fa20 f307 	lsr.w	r3, r0, r7
 8000daa:	40fd      	lsrs	r5, r7
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fa00 f901 	lsl.w	r9, r0, r1
 8000db2:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	fbb5 f8f0 	udiv	r8, r5, r0
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb00 5518 	mls	r5, r0, r8, r5
 8000dc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc8:	fb08 f50e 	mul.w	r5, r8, lr
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8087 	bcs.w	8000eee <__udivmoddi4+0x2b2>
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	f240 8084 	bls.w	8000eee <__udivmoddi4+0x2b2>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4464      	add	r4, ip
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	b29d      	uxth	r5, r3
 8000df0:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df4:	fb00 4413 	mls	r4, r0, r3, r4
 8000df8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e0c:	d26b      	bcs.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	d969      	bls.n	8000ee6 <__udivmoddi4+0x2aa>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000e1a:	fba0 8302 	umull	r8, r3, r0, r2
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	429c      	cmp	r4, r3
 8000e24:	46c6      	mov	lr, r8
 8000e26:	461d      	mov	r5, r3
 8000e28:	d355      	bcc.n	8000ed6 <__udivmoddi4+0x29a>
 8000e2a:	d052      	beq.n	8000ed2 <__udivmoddi4+0x296>
 8000e2c:	b156      	cbz	r6, 8000e44 <__udivmoddi4+0x208>
 8000e2e:	ebb9 030e 	subs.w	r3, r9, lr
 8000e32:	eb64 0405 	sbc.w	r4, r4, r5
 8000e36:	fa04 f707 	lsl.w	r7, r4, r7
 8000e3a:	40cb      	lsrs	r3, r1
 8000e3c:	40cc      	lsrs	r4, r1
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	e9c6 7400 	strd	r7, r4, [r6]
 8000e44:	2100      	movs	r1, #0
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	f1c3 0120 	rsb	r1, r3, #32
 8000e4e:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e52:	fa20 f201 	lsr.w	r2, r0, r1
 8000e56:	fa25 f101 	lsr.w	r1, r5, r1
 8000e5a:	409d      	lsls	r5, r3
 8000e5c:	432a      	orrs	r2, r5
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6a:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6e:	0c11      	lsrs	r1, r2, #16
 8000e70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e74:	fb00 f50e 	mul.w	r5, r0, lr
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x256>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e88:	d22f      	bcs.n	8000eea <__udivmoddi4+0x2ae>
 8000e8a:	428d      	cmp	r5, r1
 8000e8c:	d92d      	bls.n	8000eea <__udivmoddi4+0x2ae>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1b49      	subs	r1, r1, r5
 8000e94:	b292      	uxth	r2, r2
 8000e96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea2:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x280>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d216      	bcs.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d914      	bls.n	8000ee2 <__udivmoddi4+0x2a6>
 8000eb8:	3d02      	subs	r5, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	1a52      	subs	r2, r2, r1
 8000ebe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec2:	e739      	b.n	8000d38 <__udivmoddi4+0xfc>
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xa2>
 8000eca:	4639      	mov	r1, r7
 8000ecc:	e6e7      	b.n	8000c9e <__udivmoddi4+0x62>
 8000ece:	4610      	mov	r0, r2
 8000ed0:	e6fc      	b.n	8000ccc <__udivmoddi4+0x90>
 8000ed2:	45c1      	cmp	r9, r8
 8000ed4:	d2aa      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eda:	eb63 050c 	sbc.w	r5, r3, ip
 8000ede:	3801      	subs	r0, #1
 8000ee0:	e7a4      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee2:	4645      	mov	r5, r8
 8000ee4:	e7ea      	b.n	8000ebc <__udivmoddi4+0x280>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	e795      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eea:	4640      	mov	r0, r8
 8000eec:	e7d1      	b.n	8000e92 <__udivmoddi4+0x256>
 8000eee:	46d0      	mov	r8, sl
 8000ef0:	e77c      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef2:	3d02      	subs	r5, #2
 8000ef4:	4462      	add	r2, ip
 8000ef6:	e733      	b.n	8000d60 <__udivmoddi4+0x124>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70b      	b.n	8000d14 <__udivmoddi4+0xd8>
 8000efc:	4464      	add	r4, ip
 8000efe:	3802      	subs	r0, #2
 8000f00:	e743      	b.n	8000d8a <__udivmoddi4+0x14e>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <generateRandom>:
const NetEp_t serverEp = { .NetType = IPV4, .NetPort = 5683, .NetAddr = { .IPv4 = { .u8 = { 224, 0, 1, 187 } } } };
//const NetEp_t serverEp = { .NetType = IPV4, .NetPort = 1234, .NetAddr = { .IPv6 = { .u8 = { 224, 0, 1, 187 } } } };
//const NetEp_t NetEp_IPv6_mulitcast = { .NetType = IPV6, .NetPort = 5683, .NetAddr = { .IPv6 = {.u8 = {0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } } } };

int generateRandom()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	return (int)EMBENET_NODE_GetRandomValue(0, UINT32_MAX);
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	2000      	movs	r0, #0
 8000f12:	f00b fb19 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <debugPuts>:

void debugPuts(const char* s)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	printf("%s", s);
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <debugPuts+0x18>)
 8000f28:	f01a feae 	bl	801bc88 <iprintf>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	0801cd40 	.word	0x0801cd40

08000f38 <elapsedTime_seconds>:

uint32_t elapsedTime_seconds()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	uint64_t current_time = EMBENET_NODE_GetLocalTime(); // returns time in ms
 8000f3e:	f00b f803 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 8000f42:	e9c7 0100 	strd	r0, r1, [r7]
	return (uint32_t)(current_time/1000);
 8000f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	f7ff fe5b 	bl	8000c0c <__aeabi_uldivmod>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4613      	mov	r3, r2
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <CoAP_Posix_SendDatagram>:

// Function to send a packet to the network interface
bool CoAP_Posix_SendDatagram(SocketHandle_t socketHandle, NetPacket_t *pckt)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	 // prepare destination IPv6 address
	//EMBENET_IPV6 destinationAddress = EMBENET_AssembleUnicastIpv6(0x20010db800000000, 0x0000000012345678);

	EMBENET_UDP_SocketDescriptor *socket_ptr = (EMBENET_UDP_SocketDescriptor *)socketHandle;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	61fb      	str	r3, [r7, #28]

	// get border router address
	EMBENET_IPV6 borderRouterAddress;
	EMBENET_NODE_GetBorderRouterAddress(&borderRouterAddress);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00b fa7a 	bl	800c470 <EMBENET_NODE_GetBorderRouterAddress>
	// send UDP packet using port 1234
	if (EMBENET_RESULT_OK != EMBENET_UDP_Send(socket_ptr, &borderRouterAddress, 5683, pckt->pData, pckt->size)) {
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	f107 010c 	add.w	r1, r7, #12
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	f241 6233 	movw	r2, #5683	; 0x1633
 8000f90:	69f8      	ldr	r0, [r7, #28]
 8000f92:	f00a ffc1 	bl	800bf18 <EMBENET_UDP_Send>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <CoAP_Posix_SendDatagram+0x42>
		printf("CUSTOM_SERVICE: Failed to send UDP packet\n");
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <CoAP_Posix_SendDatagram+0x4c>)
 8000f9e:	f01a fed9 	bl	801bd54 <puts>
		return false;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <CoAP_Posix_SendDatagram+0x44>
	}
	return true;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0801cd44 	.word	0x0801cd44

08000fb4 <CoAP_RespHandler_fn>:

// Response handler function
CoAP_Result_t CoAP_RespHandler_fn(CoAP_Message_t* pRespMsg, CoAP_Message_t* pReqMsg, NetEp_t* sender)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	if(pRespMsg == NULL) {
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <CoAP_RespHandler_fn+0x22>
		printf("CoAP message transmission failed after all retries (timeout) for MessageId %d", pReqMsg->MessageID);
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	88db      	ldrh	r3, [r3, #6]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <CoAP_RespHandler_fn+0x40>)
 8000fce:	f01a fe5b 	bl	801bc88 <iprintf>
		return COAP_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e009      	b.n	8000fea <CoAP_RespHandler_fn+0x36>
	}

	printf("Got a reply for MiD: %d", pRespMsg->MessageID);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	88db      	ldrh	r3, [r3, #6]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <CoAP_RespHandler_fn+0x44>)
 8000fde:	f01a fe53 	bl	801bc88 <iprintf>
	CoAP_PrintMsg(pRespMsg);
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f008 fea6 	bl	8009d34 <CoAP_PrintMsg>

	return COAP_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0801cd70 	.word	0x0801cd70
 8000ff8:	0801cdc0 	.word	0x0801cdc0

08000ffc <customServiceTask>:
 * @param[in] taskId id of the task
 * @param[in] timeSource time source (local time or network time)
 * @param[in] t time at which the task was scheduled to run
 * @param[in] context generic, user-defined context
 */
static void customServiceTask(EMBENET_TaskId taskId, EMBENET_NODE_TimeSource timeSource, uint64_t t, void *context) {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	e9c7 2300 	strd	r2, r3, [r7]
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
    // Process any pending work
    CoAP_doWork();
 800100c:	f008 f8b2 	bl	8009174 <CoAP_doWork>

    uint8_t* data = "Test Coap";
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <customServiceTask+0x60>)
 8001012:	61fb      	str	r3, [r7, #28]
    size_t length = strlen(data);
 8001014:	69f8      	ldr	r0, [r7, #28]
 8001016:	f7ff f903 	bl	8000220 <strlen>
 800101a:	61b8      	str	r0, [r7, #24]

	// Send a CoAP message
	CoAP_Result_t result = CoAP_StartNewRequest(
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <customServiceTask+0x64>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <customServiceTask+0x68>)
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <customServiceTask+0x6c>)
 800102c:	490f      	ldr	r1, [pc, #60]	; (800106c <customServiceTask+0x70>)
 800102e:	2003      	movs	r0, #3
 8001030:	f006 fdde 	bl	8007bf0 <CoAP_StartNewRequest>
 8001034:	4603      	mov	r3, r0
 8001036:	75fb      	strb	r3, [r7, #23]
		data,					// Message data buffer (uint8_t *)
		length					// Message data length (size_t)
	);

    // Schedule next invocation of this task after 100 miliseconds
    EMBENET_NODE_TaskSchedule(taskId, timeSource, t + 5000);
 8001038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800103c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001040:	1854      	adds	r4, r2, r1
 8001042:	f143 0500 	adc.w	r5, r3, #0
 8001046:	7af9      	ldrb	r1, [r7, #11]
 8001048:	4622      	mov	r2, r4
 800104a:	462b      	mov	r3, r5
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f00b f933 	bl	800c2b8 <EMBENET_NODE_TaskSchedule>
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bdb0      	pop	{r4, r5, r7, pc}
 800105a:	bf00      	nop
 800105c:	0801cdd8 	.word	0x0801cdd8
 8001060:	08000fb5 	.word	0x08000fb5
 8001064:	0801eedc 	.word	0x0801eedc
 8001068:	200000bc 	.word	0x200000bc
 800106c:	0801cde4 	.word	0x0801cde4

08001070 <customServiceReceptionHandler>:
 * @param[in] data pointer to datagram's payload
 * @param[in] dataSize size of datagram's payload
 */
static void customServiceReceptionHandler(EMBENET_UDP_SocketDescriptor const *socket,
        EMBENET_IPV6 const *sourceAddress, uint16_t sourcePort,
        void const *data, size_t dataSize) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4613      	mov	r3, r2
 800107e:	80fb      	strh	r3, [r7, #6]

	printf("New packet received on interface, bytes read = %d", dataSize);
 8001080:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001082:	4819      	ldr	r0, [pc, #100]	; (80010e8 <customServiceReceptionHandler+0x78>)
 8001084:	f01a fe00 	bl	801bc88 <iprintf>

	// Format the packet to the proper structure
	NetPacket_t pckt;
	memset(&pckt, 0, sizeof(pckt));
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	222c      	movs	r2, #44	; 0x2c
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f01a ff89 	bl	801bfa8 <memset>
	pckt.pData = data;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	617b      	str	r3, [r7, #20]
	pckt.size = dataSize;
 800109a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800109c:	b29b      	uxth	r3, r3
 800109e:	833b      	strh	r3, [r7, #24]
	pckt.remoteEp = serverEp;
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	2302      	movs	r3, #2
 80010b4:	773b      	strb	r3, [r7, #28]
 80010b6:	23e0      	movs	r3, #224	; 0xe0
 80010b8:	f887 3020 	strb.w	r3, [r7, #32]
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010c2:	23bb      	movs	r3, #187	; 0xbb
 80010c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80010c8:	f241 6333 	movw	r3, #5683	; 0x1633
 80010cc:	863b      	strh	r3, [r7, #48]	; 0x30
	CoAP_HandleIncomingPacket(&socket, &pckt); 	// Feed the received packet to the CoAP library
 80010ce:	f107 0214 	add.w	r2, r7, #20
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 ffb9 	bl	8008050 <CoAP_HandleIncomingPacket>
													// Note: this will copy the data to a new
													// buffer (we can reuse the rxBuffer)
}
 80010de:	bf00      	nop
 80010e0:	3740      	adds	r7, #64	; 0x40
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0801cdf8 	.word	0x0801cdf8

080010ec <custom_service_init>:

void custom_service_init(void) {
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af02      	add	r7, sp, #8
	// Bind system functions to the CoAP library
	CoAP_API_t api = {
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <custom_service_init+0xe4>)
 80010f4:	f107 0414 	add.w	r4, r7, #20
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	6023      	str	r3, [r4, #0]
		.rtc1HzCnt = elapsedTime_seconds,	// Function that returns a time in seconds
		.rand = generateRandom,				// Function to generate random numbers
		.debugPuts = debugPuts,				// Function to print info for debugging
	};

	CoAP_Init(api);
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	f00a f9be 	bl	800b48c <CoAP_Init>
	printf("CUSTOM_SERVICE: CoAP Initialized\n");
 8001110:	4830      	ldr	r0, [pc, #192]	; (80011d4 <custom_service_init+0xe8>)
 8001112:	f01a fe1f 	bl	801bd54 <puts>

//    // Initialize UDP socket on node's unicast address, and port 1234. Upon datagram reception, customServiceReceptionHandler will be called)
    customServiceSocket = (EMBENET_UDP_SocketDescriptor ) {
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <custom_service_init+0xec>)
 8001118:	461a      	mov	r2, r3
 800111a:	2300      	movs	r3, #0
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	6053      	str	r3, [r2, #4]
 8001120:	6093      	str	r3, [r2, #8]
 8001122:	60d3      	str	r3, [r2, #12]
 8001124:	6113      	str	r3, [r2, #16]
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <custom_service_init+0xec>)
 8001128:	f241 6233 	movw	r2, #5683	; 0x1633
 800112c:	801a      	strh	r2, [r3, #0]
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <custom_service_init+0xec>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <custom_service_init+0xf0>)
 8001132:	609a      	str	r2, [r3, #8]
        .rxDataHandler = customServiceReceptionHandler,
        .userContext = NULL // userContext is not needed in this example, however user may pass it to callback invocation
    };

    // Register UDP socket. Registering socket enables datagram reception/transmission
    EMBENET_Result customServiceSocketRegistrationStatus = EMBENET_UDP_RegisterSocket(&customServiceSocket);
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <custom_service_init+0xec>)
 8001136:	f00a fed7 	bl	800bee8 <EMBENET_UDP_RegisterSocket>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (EMBENET_RESULT_OK == customServiceSocketRegistrationStatus) {
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10c      	bne.n	8001162 <custom_service_init+0x76>
        printf("CUSTOM_SERVICE: Socket %d registered successfully\n", (int)customServiceSocket.port);
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <custom_service_init+0xec>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <custom_service_init+0xf4>)
 8001150:	f01a fd9a 	bl	801bc88 <iprintf>
        printf("CUSTOM_SERVICE: Registering socket failed with status %d\n", (int)customServiceSocketRegistrationStatus);
        return;
    }

	// Allocate a new CoAP_Socket_t space for this socket
	CoAP_Socket_t *newSocket = AllocSocket();
 8001154:	f00a fa80 	bl	800b658 <AllocSocket>
 8001158:	62b8      	str	r0, [r7, #40]	; 0x28

	if(newSocket == NULL) {
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	d118      	bne.n	8001192 <custom_service_init+0xa6>
 8001160:	e006      	b.n	8001170 <custom_service_init+0x84>
        printf("CUSTOM_SERVICE: Registering socket failed with status %d\n", (int)customServiceSocketRegistrationStatus);
 8001162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001166:	4619      	mov	r1, r3
 8001168:	481e      	ldr	r0, [pc, #120]	; (80011e4 <custom_service_init+0xf8>)
 800116a:	f01a fd8d 	bl	801bc88 <iprintf>
 800116e:	e02c      	b.n	80011ca <custom_service_init+0xde>
		ERROR("Could not allocate memory for new socket");
 8001170:	491d      	ldr	r1, [pc, #116]	; (80011e8 <custom_service_init+0xfc>)
 8001172:	481e      	ldr	r0, [pc, #120]	; (80011ec <custom_service_init+0x100>)
 8001174:	f01a fdf6 	bl	801bd64 <siprintf>
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <custom_service_init+0x100>)
 800117a:	f006 ff57 	bl	800802c <hal_debug_puts>
 800117e:	491c      	ldr	r1, [pc, #112]	; (80011f0 <custom_service_init+0x104>)
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <custom_service_init+0x100>)
 8001182:	f01a fdef 	bl	801bd64 <siprintf>
 8001186:	4819      	ldr	r0, [pc, #100]	; (80011ec <custom_service_init+0x100>)
 8001188:	f006 ff50 	bl	800802c <hal_debug_puts>
		EMBENET_UDP_UnregisterSocket(&customServiceSocket);
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <custom_service_init+0xec>)
 800118e:	f00a feb7 	bl	800bf00 <EMBENET_UDP_UnregisterSocket>
	}

	newSocket->Handle = &customServiceSocket;
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <custom_service_init+0xec>)
 8001196:	601a      	str	r2, [r3, #0]
	newSocket->Tx = CoAP_Posix_SendDatagram; // Function to transmit packets
 8001198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <custom_service_init+0x108>)
 800119c:	605a      	str	r2, [r3, #4]
	newSocket->Alive = true; // UDP sockets don't need to be connected
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	2201      	movs	r2, #1
 80011a2:	721a      	strb	r2, [r3, #8]

	// Create a task using built-in scheduler
	customServiceTaskId = EMBENET_NODE_TaskCreate(customServiceTask, NULL);
 80011a4:	2100      	movs	r1, #0
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <custom_service_init+0x10c>)
 80011a8:	f00a ff94 	bl	800c0d4 <EMBENET_NODE_TaskCreate>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <custom_service_init+0x110>)
 80011b0:	6013      	str	r3, [r2, #0]
	if (EMBENET_TASKID_INVALID == customServiceTaskId) {
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <custom_service_init+0x110>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d103      	bne.n	80011c4 <custom_service_init+0xd8>
		printf("CUSTOM_SERVICE: Unable to create task\n");
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <custom_service_init+0x114>)
 80011be:	f01a fdc9 	bl	801bd54 <puts>
 80011c2:	e002      	b.n	80011ca <custom_service_init+0xde>
	} else {
		printf("CUSTOM_SERVICE: Service initialized, task created\n");
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <custom_service_init+0x118>)
 80011c6:	f01a fdc5 	bl	801bd54 <puts>
	}
}
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	0801cf54 	.word	0x0801cf54
 80011d4:	0801ce2c 	.word	0x0801ce2c
 80011d8:	200000bc 	.word	0x200000bc
 80011dc:	08001071 	.word	0x08001071
 80011e0:	0801ce50 	.word	0x0801ce50
 80011e4:	0801ce84 	.word	0x0801ce84
 80011e8:	0801cec0 	.word	0x0801cec0
 80011ec:	200007d8 	.word	0x200007d8
 80011f0:	0801cecc 	.word	0x0801cecc
 80011f4:	08000f65 	.word	0x08000f65
 80011f8:	08000ffd 	.word	0x08000ffd
 80011fc:	20000000 	.word	0x20000000
 8001200:	0801cef8 	.word	0x0801cef8
 8001204:	0801cf20 	.word	0x0801cf20

08001208 <custom_service_start>:

void custom_service_start(void) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    printf("CUSTOM_SERVICE: Starting CoAP Task\n");
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <custom_service_start+0x38>)
 8001210:	f01a fda0 	bl	801bd54 <puts>
    // Get current time
    uint64_t current_time = EMBENET_NODE_GetLocalTime();
 8001214:	f00a fe98 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 8001218:	e9c7 0100 	strd	r0, r1, [r7]
    // Schedule task using node's local time (invoke it after 2 seconds)
    EMBENET_NODE_TaskSchedule(customServiceTaskId, EMBENET_NODE_TIME_SOURCE_LOCAL, current_time + 2000);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <custom_service_start+0x3c>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001224:	f512 64fa 	adds.w	r4, r2, #2000	; 0x7d0
 8001228:	f143 0500 	adc.w	r5, r3, #0
 800122c:	4622      	mov	r2, r4
 800122e:	462b      	mov	r3, r5
 8001230:	2100      	movs	r1, #0
 8001232:	f00b f841 	bl	800c2b8 <EMBENET_NODE_TaskSchedule>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	0801cf68 	.word	0x0801cf68
 8001244:	20000000 	.word	0x20000000

08001248 <custom_service_stop>:

void custom_service_stop(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    printf("CUSTOM_SERVICE: Stopping service\n");
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <custom_service_stop+0x18>)
 800124e:	f01a fd81 	bl	801bd54 <puts>
    // Cancel scheduled task
    EMBENET_NODE_TaskCancel(customServiceTaskId);
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <custom_service_stop+0x1c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f00b f8f6 	bl	800c448 <EMBENET_NODE_TaskCancel>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0801cf8c 	.word	0x0801cf8c
 8001264:	20000000 	.word	0x20000000

08001268 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff ffcc 	bl	8001268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff ffc9 	bl	8001268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80012d6:	2004      	movs	r0, #4
 80012d8:	f7ff ffc6 	bl	8001268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80012dc:	2080      	movs	r0, #128	; 0x80
 80012de:	f7ff ffc3 	bl	8001268 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin);
 80012e2:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80012e6:	482f      	ldr	r0, [pc, #188]	; (80013a4 <MX_GPIO_Init+0xf0>)
 80012e8:	f7ff ffd6 	bl	8001298 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_15|LL_GPIO_PIN_11|LL_GPIO_PIN_10
 80012ec:	f649 73f0 	movw	r3, #40944	; 0x9ff0
 80012f0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f003 fb2c 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001306:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800130a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800130c:	2301      	movs	r3, #1
 800130e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_GPIO_Init+0xf0>)
 8001322:	f003 fb1c 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_14|LL_GPIO_PIN_5|LL_GPIO_PIN_8
 8001326:	f247 5336 	movw	r3, #30006	; 0x7536
 800132a:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_12|LL_GPIO_PIN_1
                          |LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_GPIO_Init+0xf0>)
 800133a:	f003 fb10 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_2|LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 800133e:	f242 0307 	movw	r3, #8199	; 0x2007
 8001342:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001352:	f003 fb04 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8001356:	2303      	movs	r3, #3
 8001358:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800135e:	2301      	movs	r3, #1
 8001360:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f003 faf8 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B3_Pin;
 800136e:	2340      	movs	r3, #64	; 0x40
 8001370:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001376:	2301      	movs	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001380:	f003 faed 	bl	800495e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001384:	2308      	movs	r3, #8
 8001386:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001388:	2303      	movs	r3, #3
 800138a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0xf8>)
 8001396:	f003 fae2 	bl	800495e <LL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48001c00 	.word	0x48001c00

080013b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b4:	f3bf 8f4f 	dsb	sy
}
 80013b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <__NVIC_SystemReset+0x24>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013c2:	4904      	ldr	r1, [pc, #16]	; (80013d4 <__NVIC_SystemReset+0x24>)
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_SystemReset+0x28>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ca:	f3bf 8f4f 	dsb	sy
}
 80013ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <__NVIC_SystemReset+0x20>
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0004 	.word	0x05fa0004

080013dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	58000400 	.word	0x58000400

08001404 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800144e:	d101      	bne.n	8001454 <LL_RCC_HSE_IsReady+0x18>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <LL_RCC_HSE_IsReady+0x1a>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f023 0203 	bic.w	r2, r3, #3
 8001470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014d0:	f023 020f 	bic.w	r2, r3, #15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014dc:	4313      	orrs	r3, r2
 80014de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001566:	d101      	bne.n	800156c <LL_RCC_PLL_IsReady+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_RCC_PLL_IsReady+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800158e:	4013      	ands	r3, r2
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	0212      	lsls	r2, r2, #8
 800159a:	4311      	orrs	r1, r2
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	1fff808c 	.word	0x1fff808c

080015b8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_FLASH_SetLatency+0x24>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 0207 	bic.w	r2, r3, #7
 80015e4:	4904      	ldr	r1, [pc, #16]	; (80015f8 <LL_FLASH_SetLatency+0x24>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	58004000 	.word	0x58004000

080015fc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <LL_FLASH_GetLatency+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	58004000 	.word	0x58004000

08001614 <onJoined>:
/**
 * User-defined callback that will be called, when the node joins the network.
 * @param[in] panId Identifier of the Network that node joined
 * @param[in] quickJoinCredentials pointer to the Quick Join Credentials that MAY be stored by the user to facilitate rejoining process.
 */
static void onJoined(EMBENET_PANID panId, const EMBENET_NODE_QuickJoinCredentials *quickJoinCredentials) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	80fb      	strh	r3, [r7, #6]
    printf("Joined network with PANID: 0x%04" PRIx16 "\n", panId);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <onJoined+0x44>)
 8001626:	f01a fb2f 	bl	801bc88 <iprintf>

    // Start ENMS Service that provides network-wide telemetry information
    EnmsNodeResult enmsStartStatus = ENMS_NODE_Start(&enmsNode);
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <onJoined+0x48>)
 800162c:	f00e ff04 	bl	8010438 <ENMS_NODE_Start>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
    if (ENMS_NODE_RESULT_OK == enmsStartStatus) {
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <onJoined+0x2e>
        printf("ENMS service started\n");
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <onJoined+0x4c>)
 800163c:	f01a fb8a 	bl	801bd54 <puts>
 8001640:	e004      	b.n	800164c <onJoined+0x38>
    } else {
        printf("ENMS service failed to start with status: %d\n", (int)enmsStartStatus);
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <onJoined+0x50>)
 8001648:	f01a fb1e 	bl	801bc88 <iprintf>
    }

#if 1 != IS_ROOT
    // Start exemplary, user-defined custom service
    custom_service_start();
 800164c:	f7ff fddc 	bl	8001208 <custom_service_start>
    //lwm2m_service_start();
    // Start MQTT-SN demo service
    //mqttsn_client_service_start();
#endif
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	0801cfb0 	.word	0x0801cfb0
 800165c:	200000d0 	.word	0x200000d0
 8001660:	0801cfd4 	.word	0x0801cfd4
 8001664:	0801cfec 	.word	0x0801cfec

08001668 <onLeft>:

/**
 * @brief User-defined callback, that will be called after the node leaves the network
 */
static void onLeft(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
    printf("Node has left the network\n");
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <onLeft+0x3c>)
 8001670:	f01a fb70 	bl	801bd54 <puts>
    // Stop ENMS service
    EnmsNodeResult enmsStopStatus = ENMS_NODE_Stop(&enmsNode);
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <onLeft+0x40>)
 8001676:	f00e ff7b 	bl	8010570 <ENMS_NODE_Stop>
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
    if (ENMS_NODE_RESULT_OK == enmsStopStatus) {
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <onLeft+0x24>
        printf("ENMS service stopped\n");
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <onLeft+0x44>)
 8001686:	f01a fb65 	bl	801bd54 <puts>
 800168a:	e004      	b.n	8001696 <onLeft+0x2e>
    } else {
        printf("ENMS service failed to stop with status: %d\n", (int)enmsStopStatus);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4619      	mov	r1, r3
 8001690:	4807      	ldr	r0, [pc, #28]	; (80016b0 <onLeft+0x48>)
 8001692:	f01a faf9 	bl	801bc88 <iprintf>
    }

#if 1 != IS_ROOT
    // Stop exemplary, user-defined custom service
    custom_service_stop();
 8001696:	f7ff fdd7 	bl	8001248 <custom_service_stop>
    // Stop MQTT-SN demo service
    //mqttsn_client_service_stop();
#endif

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0801d01c 	.word	0x0801d01c
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	0801d038 	.word	0x0801d038
 80016b0:	0801d050 	.word	0x0801d050

080016b4 <onJoinAttempt>:
/**
 * @brief User-defined callback, that will be called when node tries to join the network
 *
 * NOTE: This callback is included in this demo only for debugging purposes
 */
static void onJoinAttempt(EMBENET_PANID panId, const void *panData, size_t panDataSize) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	81fb      	strh	r3, [r7, #14]
    printf("Node is attempting to join the network with PANID 0x%04" PRIx16 "\n", panId);
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <onJoinAttempt+0x28>)
 80016c8:	f01a fade 	bl	801bc88 <iprintf>
    printf("Network-wide data (%uB)\n", (unsigned)panDataSize);
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <onJoinAttempt+0x2c>)
 80016d0:	f01a fada 	bl	801bc88 <iprintf>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0801d080 	.word	0x0801d080
 80016e0:	0801d0bc 	.word	0x0801d0bc

080016e4 <dataOnUregisteredPort>:
/**
 * @brief User-defined callback, that will be called when the node receives UDP datagram on closed port
 *
 * NOTE: This callback is included for purely debugging purposes. It should be Never used as a method of reliable data transfer
 */
static void dataOnUregisteredPort(uint16_t port) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
    printf("Got UDP datagram on unregistered port no: %" PRIu16 "\n", port);
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <dataOnUregisteredPort+0x1c>)
 80016f4:	f01a fac8 	bl	801bc88 <iprintf>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	0801d0d8 	.word	0x0801d0d8

08001704 <onQuickJoinCredentialsObsolete>:
 * @brief User-defined callback, that will be called when provided quick join credentials become obsolete.
 *
 * If the quick join feature is used, user should delete the stored data and store new data, when onJoined callback will be called again.
 * This demo application does not use the quick join feature.
 */
static void onQuickJoinCredentialsObsolete(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    printf("Quick join credentials became obsolete\n");
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <onQuickJoinCredentialsObsolete+0x10>)
 800170a:	f01a fb23 	bl	801bd54 <puts>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0801d108 	.word	0x0801d108

08001718 <main>:

/**
  * @brief  The application entry point.
  */
int main(void)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b092      	sub	sp, #72	; 0x48
 800171c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800171e:	f000 fd65 	bl	80021ec <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001722:	f000 f88b 	bl	800183c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001726:	f7ff fdc5 	bl	80012b4 <MX_GPIO_Init>
    /* USER CODE BEGIN 2 */

    LOGGER_UART_Init();
 800172a:	f000 fc97 	bl	800205c <LOGGER_UART_Init>
    printf("\n"
 800172e:	4836      	ldr	r0, [pc, #216]	; (8001808 <main+0xf0>)
 8001730:	f01a fb10 	bl	801bd54 <puts>
            "+---------------------------------------------+\n"
            "   embeNET Node demo for nucleo-wl55jc board   \n"
            "+---------------------------------------------+\n");

    // Initialize structure with user-defined event handlers
    EMBENET_NODE_EventHandlers handlers = {
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <main+0xf4>)
 8001736:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800173a:	461d      	mov	r5, r3
 800173c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	6023      	str	r3, [r4, #0]
        .onQuickJoinCredentialsObsolete = onQuickJoinCredentialsObsolete,
        .onDataOnUnregisteredPort = dataOnUregisteredPort
    };

    // Initialize network stack
    if (EMBENET_RESULT_OK == EMBENET_NODE_Init(&handlers)) {
 8001744:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001748:	4618      	mov	r0, r3
 800174a:	f00a fd17 	bl	800c17c <EMBENET_NODE_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d103      	bne.n	800175c <main+0x44>
        printf("embeNET Node initialized\n");
 8001754:	482e      	ldr	r0, [pc, #184]	; (8001810 <main+0xf8>)
 8001756:	f01a fafd 	bl	801bd54 <puts>
 800175a:	e002      	b.n	8001762 <main+0x4a>
    } else {
        printf("Failed to initialize embeNET Node\n");
 800175c:	482d      	ldr	r0, [pc, #180]	; (8001814 <main+0xfc>)
 800175e:	f01a faf9 	bl	801bd54 <puts>
    }
    
    // Get hardware ID using 96-bit CPU uid
    uint8_t hardwareId[16] = { 0x00 };
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
    memcpy(hardwareId, (void const*) UID_BASE, 12);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	220c      	movs	r2, #12
 8001778:	4927      	ldr	r1, [pc, #156]	; (8001818 <main+0x100>)
 800177a:	4618      	mov	r0, r3
 800177c:	f01a fcb3 	bl	801c0e6 <memcpy>
    // Initialize ENMS service on its default port. You may specify custom Hardware Identifier
    if (ENMS_NODE_RESULT_OK == ENMS_NODE_Init(&enmsNode, ENMS_DEFAULT_PORT, hardwareId, NULL)) {
 8001780:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001784:	2300      	movs	r3, #0
 8001786:	f24f 01b1 	movw	r1, #61617	; 0xf0b1
 800178a:	4824      	ldr	r0, [pc, #144]	; (800181c <main+0x104>)
 800178c:	f00e fd54 	bl	8010238 <ENMS_NODE_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <main+0x86>
        printf("ENMS service initialized\n");
 8001796:	4822      	ldr	r0, [pc, #136]	; (8001820 <main+0x108>)
 8001798:	f01a fadc 	bl	801bd54 <puts>
 800179c:	e002      	b.n	80017a4 <main+0x8c>
    } else {
        printf("Failed to initialize ENMS service!\n");
 800179e:	4821      	ldr	r0, [pc, #132]	; (8001824 <main+0x10c>)
 80017a0:	f01a fad8 	bl	801bd54 <puts>
#if 1 == IS_ROOT
    printf("Acting as root with UID: 0x%x%08x\n", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
    // When the application is built for Root node, start as root instead of joining the network
    EMBENET_NODE_RootStart(NULL, 0);
#else
    printf("Acting as node with UID: 0x%x%08x\n", (unsigned)(EMBENET_NODE_GetUID()>>32), (unsigned)(EMBENET_NODE_GetUID()));
 80017a4:	f00a fe6b 	bl	800c47e <EMBENET_NODE_GetUID>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	000a      	movs	r2, r1
 80017b2:	2300      	movs	r3, #0
 80017b4:	4614      	mov	r4, r2
 80017b6:	f00a fe62 	bl	800c47e <EMBENET_NODE_GetUID>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4613      	mov	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4621      	mov	r1, r4
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <main+0x110>)
 80017c6:	f01a fa5f 	bl	801bc88 <iprintf>

    // Initialize exemplary, user-defined custom service
    custom_service_init();
 80017ca:	f7ff fc8f 	bl	80010ec <custom_service_init>
    //lwm2m_service_init();
    // Initialize MQTT-SN service
    //mqttsn_client_service_init();

    // Additionally tell the ENMS what services are running
    (void) ENMS_NODE_RegisterService(&enmsNode, "custom", 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <main+0x114>)
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <main+0x104>)
 80017d4:	f00e fcbe 	bl	8010154 <ENMS_NODE_RegisterService>
    (void) ENMS_NODE_RegisterService(&enmsNode, "mqttsn", 1);
 80017d8:	2201      	movs	r2, #1
 80017da:	4915      	ldr	r1, [pc, #84]	; (8001830 <main+0x118>)
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <main+0x104>)
 80017de:	f00e fcb9 	bl	8010154 <ENMS_NODE_RegisterService>

    // embeNET network configuration:
    // K1 key, used to authenticate the network node should join and
    // PSK - Node's secret key.
    // Note that the psk value should be preferably stored in secure memory, or be preloaded using custom bootloader.
    EMBENET_NODE_Config config = {
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <main+0x11c>)
 80017e4:	1d3c      	adds	r4, r7, #4
 80017e6:	461d      	mov	r5, r3
 80017e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .k1.val = { 0xc0, 0x8b, 0x76, 0x62, 0x77, 0x09, 0x9e, 0x7d, 0x7e, 0x9c, 0x02, 0x22, 0xf1, 0x68, 0xcc, 0x9e },
        .psk.val = {0x46, 0xd7, 0xdc, 0x94, 0xe8, 0xee, 0x74, 0x96, 0xce, 0xaf, 0x54, 0xa3, 0xab, 0x64, 0xcb, 0xeb },
    };

    printf("Trying to join a network...\n");
 80017f4:	4810      	ldr	r0, [pc, #64]	; (8001838 <main+0x120>)
 80017f6:	f01a faad 	bl	801bd54 <puts>
    // Make the node join the network
    EMBENET_NODE_Join(&config);
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fe73 	bl	800c4e8 <EMBENET_NODE_Join>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        // Periodically call embeNET Node process function
        EMBENET_NODE_Proc();
 8001802:	f00a fc2d 	bl	800c060 <EMBENET_NODE_Proc>
 8001806:	e7fc      	b.n	8001802 <main+0xea>
 8001808:	0801d130 	.word	0x0801d130
 800180c:	0801d294 	.word	0x0801d294
 8001810:	0801d1c4 	.word	0x0801d1c4
 8001814:	0801d1e0 	.word	0x0801d1e0
 8001818:	1fff7590 	.word	0x1fff7590
 800181c:	200000d0 	.word	0x200000d0
 8001820:	0801d204 	.word	0x0801d204
 8001824:	0801d220 	.word	0x0801d220
 8001828:	0801d244 	.word	0x0801d244
 800182c:	0801d268 	.word	0x0801d268
 8001830:	0801d270 	.word	0x0801d270
 8001834:	0801d2a8 	.word	0x0801d2a8
 8001838:	0801d278 	.word	0x0801d278

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff fec7 	bl	80015d4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8001846:	bf00      	nop
 8001848:	f7ff fed8 	bl	80015fc <LL_FLASH_GetLatency>
 800184c:	4603      	mov	r3, r0
 800184e:	2b02      	cmp	r3, #2
 8001850:	d1fa      	bne.n	8001848 <SystemClock_Config+0xc>
  {
  }

  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001856:	f7ff fdc1 	bl	80013dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableTcxo();
 800185a:	f7ff fdd3 	bl	8001404 <LL_RCC_HSE_EnableTcxo>
  LL_RCC_HSE_Enable();
 800185e:	f7ff fddf 	bl	8001420 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001862:	bf00      	nop
 8001864:	f7ff fdea 	bl	800143c <LL_RCC_HSE_IsReady>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	d1fa      	bne.n	8001864 <SystemClock_Config+0x28>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_2, 12, LL_RCC_PLLR_DIV_4);
 800186e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001872:	220c      	movs	r2, #12
 8001874:	2110      	movs	r1, #16
 8001876:	2003      	movs	r0, #3
 8001878:	f7ff fe7e 	bl	8001578 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800187c:	f7ff fe9c 	bl	80015b8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001880:	f7ff fe5a 	bl	8001538 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001884:	bf00      	nop
 8001886:	f7ff fe65 	bl	8001554 <LL_RCC_PLL_IsReady>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d1fa      	bne.n	8001886 <SystemClock_Config+0x4a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001890:	2003      	movs	r0, #3
 8001892:	f7ff fde4 	bl	800145e <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001896:	bf00      	nop
 8001898:	f7ff fdf4 	bl	8001484 <LL_RCC_GetSysClkSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d1fa      	bne.n	8001898 <SystemClock_Config+0x5c>
  {
  }

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fdf9 	bl	800149a <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fe09 	bl	80014c0 <LL_RCC_SetAHB3Prescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fe1c 	bl	80014ec <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fe2c 	bl	8001512 <LL_RCC_SetAPB2Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <SystemClock_Config+0x98>)
 80018bc:	f004 f8f4 	bl	8005aa8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80018c0:	200f      	movs	r0, #15
 80018c2:	f000 fcb3 	bl	800222c <HAL_InitTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018cc:	f000 f823 	bl	8001916 <Error_Handler>
  }
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	02dc6c00 	.word	0x02dc6c00

080018d8 <EXPECT_OnAbortHandler>:
/* USER CODE BEGIN 4 */

/**
 * This hander is called by the embeNET stack when a critical error aborts operation.
 */
__attribute__((noreturn)) void EXPECT_OnAbortHandler(char const *why, char const *file, int line) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
    printf("Program aborted: %s %s:%i\n", why, file, line);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4802      	ldr	r0, [pc, #8]	; (80018f4 <EXPECT_OnAbortHandler+0x1c>)
 80018ec:	f01a f9cc 	bl	801bc88 <iprintf>
    while(1) {
 80018f0:	e7fe      	b.n	80018f0 <EXPECT_OnAbortHandler+0x18>
 80018f2:	bf00      	nop
 80018f4:	0801d2c8 	.word	0x0801d2c8

080018f8 <_write>:
        ;
    }
    __builtin_unreachable();
}

_ssize_t _write(int file, const void *ptr, size_t len) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
    (void) file; /* Not used, avoid warning */
    LOGGER_UART_Write(ptr, len);
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 fbae 	bl	8002068 <LOGGER_UART_Write>
    return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800191a:	b672      	cpsid	i
}
 800191c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
        NVIC_SystemReset();
 800191e:	f7ff fd47 	bl	80013b0 <__NVIC_SystemReset>

08001922 <RingBuffer_Init>:
This module implements a basic, general-purpose ring buffer.
*/

#include "ring_buffer.h"

bool RingBuffer_Init(RingBuffer* ringBuffer, uint8_t* dataBuffer, size_t dataBufferSize) {
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
    if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d016      	beq.n	8001962 <RingBuffer_Init+0x40>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d013      	beq.n	8001962 <RingBuffer_Init+0x40>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <RingBuffer_Init+0x40>
        ringBuffer->dataBuffer     = dataBuffer;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	601a      	str	r2, [r3, #0]
        ringBuffer->dataBufferSize = dataBufferSize;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
        ringBuffer->count          = 0;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
        ringBuffer->head           = dataBuffer;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	60da      	str	r2, [r3, #12]
        ringBuffer->tail           = dataBuffer;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	611a      	str	r2, [r3, #16]
        return true;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <RingBuffer_Init+0x42>
    }

    return false;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <RingBuffer_PutChar>:
        return ringBuffer->dataBufferSize - ringBuffer->count;
    }
    return 0;
}

bool RingBuffer_PutChar(RingBuffer* ringBuffer, uint8_t c) {
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
    if ((ringBuffer) && (ringBuffer->count < ringBuffer->dataBufferSize)) {
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d022      	beq.n	80019c6 <RingBuffer_PutChar+0x58>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d21c      	bcs.n	80019c6 <RingBuffer_PutChar+0x58>
        *ringBuffer->head = c;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	701a      	strb	r2, [r3, #0]
        ringBuffer->count++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
        ringBuffer->head++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
        if (ringBuffer->head >= ringBuffer->dataBuffer + ringBuffer->dataBufferSize) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	440b      	add	r3, r1
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d303      	bcc.n	80019c2 <RingBuffer_PutChar+0x54>
            ringBuffer->head = ringBuffer->dataBuffer;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
        }
        return true;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <RingBuffer_PutChar+0x5a>
    }
    return false;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer* ringBuffer, uint8_t* c) {
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
    if ((ringBuffer) && (c) && (ringBuffer->count)) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d024      	beq.n	8001a2c <RingBuffer_GetChar+0x5a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d021      	beq.n	8001a2c <RingBuffer_GetChar+0x5a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01d      	beq.n	8001a2c <RingBuffer_GetChar+0x5a>
        *c = *ringBuffer->tail;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	701a      	strb	r2, [r3, #0]
        ringBuffer->count--;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	1e5a      	subs	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
        ringBuffer->tail++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
        if (ringBuffer->tail >= ringBuffer->dataBuffer + ringBuffer->dataBufferSize) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d303      	bcc.n	8001a28 <RingBuffer_GetChar+0x56>
            ringBuffer->tail = ringBuffer->dataBuffer;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
        }
        return true;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <RingBuffer_GetChar+0x5c>
    }
    return false;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001a48:	224b      	movs	r2, #75	; 0x4b
 8001a4a:	4902      	ldr	r1, [pc, #8]	; (8001a54 <NMI_Handler+0x10>)
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <NMI_Handler+0x14>)
 8001a4e:	f7ff ff43 	bl	80018d8 <EXPECT_OnAbortHandler>
 8001a52:	bf00      	nop
 8001a54:	0801d2e4 	.word	0x0801d2e4
 8001a58:	0801eef4 	.word	0x0801eef4

08001a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001a60:	2255      	movs	r2, #85	; 0x55
 8001a62:	4902      	ldr	r1, [pc, #8]	; (8001a6c <HardFault_Handler+0x10>)
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <HardFault_Handler+0x14>)
 8001a66:	f7ff ff37 	bl	80018d8 <EXPECT_OnAbortHandler>
 8001a6a:	bf00      	nop
 8001a6c:	0801d2e4 	.word	0x0801d2e4
 8001a70:	0801ef00 	.word	0x0801ef00

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	4902      	ldr	r1, [pc, #8]	; (8001a84 <MemManage_Handler+0x10>)
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <MemManage_Handler+0x14>)
 8001a7e:	f7ff ff2b 	bl	80018d8 <EXPECT_OnAbortHandler>
 8001a82:	bf00      	nop
 8001a84:	0801d2e4 	.word	0x0801d2e4
 8001a88:	0801ef14 	.word	0x0801ef14

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001a90:	2273      	movs	r2, #115	; 0x73
 8001a92:	4902      	ldr	r1, [pc, #8]	; (8001a9c <BusFault_Handler+0x10>)
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <BusFault_Handler+0x14>)
 8001a96:	f7ff ff1f 	bl	80018d8 <EXPECT_OnAbortHandler>
 8001a9a:	bf00      	nop
 8001a9c:	0801d2e4 	.word	0x0801d2e4
 8001aa0:	0801ef28 	.word	0x0801ef28

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	EXPECT_OnAbortHandler(__func__, __FILE__, __LINE__);
 8001aa8:	2282      	movs	r2, #130	; 0x82
 8001aaa:	4902      	ldr	r1, [pc, #8]	; (8001ab4 <UsageFault_Handler+0x10>)
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <UsageFault_Handler+0x14>)
 8001aae:	f7ff ff13 	bl	80018d8 <EXPECT_OnAbortHandler>
 8001ab2:	bf00      	nop
 8001ab4:	0801d2e4 	.word	0x0801d2e4
 8001ab8:	0801ef3c 	.word	0x0801ef3c

08001abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <__NVIC_GetPriorityGrouping>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_SetLPUARTClockSource>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <LL_AHB2_GRP1_EnableClock>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	e853 3f00 	ldrex	r3, [r3]
 8001cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	075b      	lsls	r3, r3, #29
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	61ba      	str	r2, [r7, #24]
 8001cda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cdc:	6979      	ldr	r1, [r7, #20]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	e841 2300 	strex	r3, r2, [r1]
 8001ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e4      	bne.n	8001cb6 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3308      	adds	r3, #8
 8001d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	e853 3f00 	ldrex	r3, [r3]
 8001d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	065b      	lsls	r3, r3, #25
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3308      	adds	r3, #8
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	61ba      	str	r2, [r7, #24]
 8001d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	e841 2300 	strex	r3, r2, [r1]
 8001d30:	613b      	str	r3, [r7, #16]
   return(result);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e4      	bne.n	8001d02 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_LPUART_EnableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_EnableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableOverrunDetect(USART_TypeDef *LPUARTx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <LL_LPUART_IsActiveFlag_PE>:
  * @rmtoll ISR          PE            LL_LPUART_IsActiveFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_PE(const USART_TypeDef *LPUARTx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <LL_LPUART_IsActiveFlag_PE+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_LPUART_IsActiveFlag_PE+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <LL_LPUART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_LPUART_IsActiveFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_FE(const USART_TypeDef *LPUARTx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d101      	bne.n	8001d9e <LL_LPUART_IsActiveFlag_FE+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_LPUART_IsActiveFlag_FE+0x1a>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_LPUART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_LPUART_IsActiveFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_NE(const USART_TypeDef *LPUARTx)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d101      	bne.n	8001dc2 <LL_LPUART_IsActiveFlag_NE+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_LPUART_IsActiveFlag_NE+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_LPUART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_LPUART_IsActiveFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_ORE(const USART_TypeDef *LPUARTx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d101      	bne.n	8001de6 <LL_LPUART_IsActiveFlag_ORE+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_LPUART_IsActiveFlag_ORE+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d101      	bne.n	8001e0a <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e2a:	d101      	bne.n	8001e30 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	621a      	str	r2, [r3, #32]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	621a      	str	r2, [r3, #32]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	621a      	str	r2, [r3, #32]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2208      	movs	r2, #8
 8001e90:	621a      	str	r2, [r3, #32]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <LL_LPUART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_LPUART_EnableIT_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	e853 3f00 	ldrex	r3, [r3]
 8001eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	61ba      	str	r2, [r7, #24]
 8001ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	e841 2300 	strex	r3, r2, [r1]
 8001ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e9      	bne.n	8001ea4 <LL_LPUART_EnableIT_TXE_TXFNF+0x8>
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <LL_LPUART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_LPUART_DisableIT_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	e853 3f00 	ldrex	r3, [r3]
 8001eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	61ba      	str	r2, [r7, #24]
 8001efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f00:	6979      	ldr	r1, [r7, #20]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	e841 2300 	strex	r3, r2, [r1]
 8001f08:	613b      	str	r3, [r7, #16]
   return(result);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e9      	bne.n	8001ee4 <LL_LPUART_DisableIT_TXE_TXFNF+0x8>
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <LL_LPUART_EnableDMADeactOnRxErr>:
  * @rmtoll CR3          DDRE          LL_LPUART_EnableDMADeactOnRxErr
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMADeactOnRxErr(USART_TypeDef *LPUARTx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_DDRE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */
	RingBuffer_Init(&txRingBuffer, txRingBufferSpace, sizeof(txRingBufferSpace));
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	493a      	ldr	r1, [pc, #232]	; (800204c <MX_LPUART1_UART_Init+0xf4>)
 8001f64:	483a      	ldr	r0, [pc, #232]	; (8002050 <MX_LPUART1_UART_Init+0xf8>)
 8001f66:	f7ff fcdc 	bl	8001922 <RingBuffer_Init>
  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fe38 	bl	8001c04 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff fe62 	bl	8001c5e <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff fe47 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA3   ------> LPUART1_RX
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_2;
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc0:	f002 fccd 	bl	800495e <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 8001fc8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fcc:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX;
 8001fda:	2308      	movs	r3, #8
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	481a      	ldr	r0, [pc, #104]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8001fea:	f002 fdc1 	bl	8004b70 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_8_8);
 8001fee:	2105      	movs	r1, #5
 8001ff0:	4818      	ldr	r0, [pc, #96]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8001ff2:	f7ff fe5b 	bl	8001cac <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_8_8);
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	4816      	ldr	r0, [pc, #88]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8001ffa:	f7ff fe7d 	bl	8001cf8 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_EnableOverrunDetect(LPUART1);
 8001ffe:	4815      	ldr	r0, [pc, #84]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8002000:	f7ff fea0 	bl	8001d44 <LL_LPUART_EnableOverrunDetect>
  LL_LPUART_EnableDMADeactOnRxErr(LPUART1);
 8002004:	4813      	ldr	r0, [pc, #76]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8002006:	f7ff ff89 	bl	8001f1c <LL_LPUART_EnableDMADeactOnRxErr>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800200a:	4812      	ldr	r0, [pc, #72]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 800200c:	f7ff fe3f 	bl	8001c8e <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while(!(LL_LPUART_IsActiveFlag_TEACK(LPUART1)))
 8002010:	bf00      	nop
 8002012:	4810      	ldr	r0, [pc, #64]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8002014:	f7ff feff 	bl	8001e16 <LL_LPUART_IsActiveFlag_TEACK>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f9      	beq.n	8002012 <MX_LPUART1_UART_Init+0xba>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

	/* USART1 interrupt Init */
	NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 4, 0));
 800201e:	f7ff fd6b 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8002022:	4603      	mov	r3, r0
 8002024:	2200      	movs	r2, #0
 8002026:	2104      	movs	r1, #4
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdb9 	bl	8001ba0 <NVIC_EncodePriority>
 800202e:	4603      	mov	r3, r0
 8002030:	4619      	mov	r1, r3
 8002032:	2026      	movs	r0, #38	; 0x26
 8002034:	f7ff fd8a 	bl	8001b4c <__NVIC_SetPriority>
	NVIC_EnableIRQ(LPUART1_IRQn);
 8002038:	2026      	movs	r0, #38	; 0x26
 800203a:	f7ff fd6b 	bl	8001b14 <__NVIC_EnableIRQ>
	uart = LPUART1;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_LPUART1_UART_Init+0x100>)
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <MX_LPUART1_UART_Init+0xfc>)
 8002042:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3738      	adds	r7, #56	; 0x38
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000021c 	.word	0x2000021c
 8002050:	20000208 	.word	0x20000208
 8002054:	40008000 	.word	0x40008000
 8002058:	2000061c 	.word	0x2000061c

0800205c <LOGGER_UART_Init>:

}

/* USER CODE BEGIN 1 */

void LOGGER_UART_Init() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
#if 1 == IS_ROOT
	MX_USART1_UART_Init();
#else
	MX_LPUART1_UART_Init();
 8002060:	f7ff ff7a 	bl	8001f58 <MX_LPUART1_UART_Init>
#endif
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <LOGGER_UART_Write>:

void LOGGER_UART_Write(const void *ptr, size_t len) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
	if (ptr && len) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d026      	beq.n	80020c6 <LOGGER_UART_Write+0x5e>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d023      	beq.n	80020c6 <LOGGER_UART_Write+0x5e>
		for (size_t l = 0; l < len; ++l) {
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e01c      	b.n	80020be <LOGGER_UART_Write+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002084:	f3ef 8310 	mrs	r3, PRIMASK
 8002088:	60bb      	str	r3, [r7, #8]
  return(result);
 800208a:	68bb      	ldr	r3, [r7, #8]
			// enter critical section
			uint32_t primaskBit = __get_PRIMASK();
 800208c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800208e:	b672      	cpsid	i
}
 8002090:	bf00      	nop
			__disable_irq();
			// put data to ring buffer
			RingBuffer_PutChar(&txRingBuffer, ((const uint8_t*) ptr)[l]);
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	480c      	ldr	r0, [pc, #48]	; (80020d0 <LOGGER_UART_Write+0x68>)
 800209e:	f7ff fc66 	bl	800196e <RingBuffer_PutChar>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f383 8810 	msr	PRIMASK, r3
}
 80020ac:	bf00      	nop
			__set_PRIMASK(primaskBit);
			// trigger IRQ-driven transmission
#if 1 == IS_ROOT
			LL_USART_EnableIT_TXE(uart);
#else
			LL_LPUART_EnableIT_TXE(uart);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <LOGGER_UART_Write+0x6c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fef2 	bl	8001e9c <LL_LPUART_EnableIT_TXE_TXFNF>
		for (size_t l = 0; l < len; ++l) {
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3de      	bcc.n	8002084 <LOGGER_UART_Write+0x1c>
#endif
		}
	}
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000208 	.word	0x20000208
 80020d4:	2000061c 	.word	0x2000061c

080020d8 <LPUART1_IRQHandler>:
}
#else
/**
 * @brief This function handles LPUART1 Interrupt.
 */
void LPUART1_IRQHandler(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPUART1_IRQn 0 */
	if (LL_LPUART_IsActiveFlag_TXE(uart)) {
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe85 	bl	8001df2 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <LPUART1_IRQHandler+0x42>
		uint8_t c;
		if (true == RingBuffer_GetChar(&txRingBuffer, &c)) {
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	4619      	mov	r1, r3
 80020f2:	4828      	ldr	r0, [pc, #160]	; (8002194 <LPUART1_IRQHandler+0xbc>)
 80020f4:	f7ff fc6d 	bl	80019d2 <RingBuffer_GetChar>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <LPUART1_IRQHandler+0x36>
			LL_LPUART_TransmitData8(uart, c);
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff17 	bl	8001f3a <LL_LPUART_TransmitData8>

	/* USER CODE END LPUART1_IRQn 0 */
	/* USER CODE BEGIN LPUART1_IRQn 1 */

	/* USER CODE END LPUART1_IRQn 1 */
}
 800210c:	e03c      	b.n	8002188 <LPUART1_IRQHandler+0xb0>
			LL_LPUART_DisableIT_TXE(uart);
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fee2 	bl	8001edc <LL_LPUART_DisableIT_TXE_TXFNF>
}
 8002118:	e036      	b.n	8002188 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_PE(uart)) {
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fe1f 	bl	8001d62 <LL_LPUART_IsActiveFlag_PE>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <LPUART1_IRQHandler+0x5e>
		LL_LPUART_ClearFlag_PE(uart);
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fe84 	bl	8001e3c <LL_LPUART_ClearFlag_PE>
}
 8002134:	e028      	b.n	8002188 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_FE(uart)) {
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe23 	bl	8001d86 <LL_LPUART_IsActiveFlag_FE>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <LPUART1_IRQHandler+0x7a>
		LL_LPUART_ClearFlag_FE(uart);
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fe82 	bl	8001e54 <LL_LPUART_ClearFlag_FE>
}
 8002150:	e01a      	b.n	8002188 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_NE(uart)) {
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fe27 	bl	8001daa <LL_LPUART_IsActiveFlag_NE>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <LPUART1_IRQHandler+0x96>
		LL_LPUART_ClearFlag_NE(uart);
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fe80 	bl	8001e6c <LL_LPUART_ClearFlag_NE>
}
 800216c:	e00c      	b.n	8002188 <LPUART1_IRQHandler+0xb0>
	} else if (LL_LPUART_IsActiveFlag_ORE(uart)) {
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe2b 	bl	8001dce <LL_LPUART_IsActiveFlag_ORE>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <LPUART1_IRQHandler+0xb0>
		LL_LPUART_ClearFlag_ORE(uart);
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <LPUART1_IRQHandler+0xb8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fe7e 	bl	8001e84 <LL_LPUART_ClearFlag_ORE>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000061c 	.word	0x2000061c
 8002194:	20000208 	.word	0x20000208

08002198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800219a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800219c:	f7ff fca6 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021c6:	f019 ff5f 	bl	801c088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ca:	f7ff faa5 	bl	8001718 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
  ldr   r0, =_estack
 80021d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80021dc:	080220c0 	.word	0x080220c0
  ldr r2, =_sbss
 80021e0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80021e4:	20003fa8 	.word	0x20003fa8

080021e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f6:	2003      	movs	r0, #3
 80021f8:	f000 f94c 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021fc:	f001 fe10 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8002200:	4603      	mov	r3, r0
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_Init+0x3c>)
 8002204:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002206:	200f      	movs	r0, #15
 8002208:	f000 f810 	bl	800222c <HAL_InitTick>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	71fb      	strb	r3, [r7, #7]
 8002216:	e001      	b.n	800221c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002218:	f7ff fc0e 	bl	8001a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800221c:	79fb      	ldrb	r3, [r7, #7]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_InitTick+0x6c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d024      	beq.n	800228a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002240:	f001 fdee 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_InitTick+0x6c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002250:	fbb3 f3f1 	udiv	r3, r3, r1
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f95c 	bl	8002516 <HAL_SYSTICK_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d809      	bhi.n	800227e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226a:	2200      	movs	r2, #0
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	f04f 30ff 	mov.w	r0, #4294967295
 8002272:	f000 f91a 	bl	80024aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_InitTick+0x70>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e007      	b.n	800228e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	e004      	b.n	800228e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e001      	b.n	800228e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <HAL_GetTick+0x10>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000620 	.word	0x20000620

080022b4 <__NVIC_SetPriorityGrouping>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <__NVIC_EnableIRQ+0x34>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_DisableIRQ>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db12      	blt.n	8002388 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	490a      	ldr	r1, [pc, #40]	; (8002394 <__NVIC_DisableIRQ+0x44>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	3320      	adds	r3, #32
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800237c:	f3bf 8f4f 	dsb	sy
}
 8002380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002382:	f3bf 8f6f 	isb	sy
}
 8002386:	bf00      	nop
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff90 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff09 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff20 	bl	80022fc <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff92 	bl	80023ec <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff61 	bl	8002398 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff13 	bl	8002318 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff21 	bl	8002350 <__NVIC_DisableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff96 	bl	8002450 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e02d      	b.n	800259c <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f003 fb95 	bl	8005c84 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8002564:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6851      	ldr	r1, [r2, #4]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6892      	ldr	r2, [r2, #8]
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6952      	ldr	r2, [r2, #20]
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e020      	b.n	80025f8 <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f003 fb6b 	bl	8005cbc <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d17c      	bne.n	8002716 <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_CRYP_Encrypt+0x32>
 800262e:	2302      	movs	r3, #2
 8002630:	e07a      	b.n	8002728 <HAL_CRYP_Encrypt+0x128>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002668:	e003      	b.n	8002672 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0218 	bic.w	r2, r2, #24
 8002680:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_CRYP_Encrypt+0x130>)
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]

    switch (algo)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d023      	beq.n	80026de <HAL_CRYP_Encrypt+0xde>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d826      	bhi.n	80026ec <HAL_CRYP_Encrypt+0xec>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b60      	cmp	r3, #96	; 0x60
 80026a2:	d015      	beq.n	80026d0 <HAL_CRYP_Encrypt+0xd0>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b60      	cmp	r3, #96	; 0x60
 80026a8:	d820      	bhi.n	80026ec <HAL_CRYP_Encrypt+0xec>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d008      	beq.n	80026c2 <HAL_CRYP_Encrypt+0xc2>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d81a      	bhi.n	80026ec <HAL_CRYP_Encrypt+0xec>
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_CRYP_Encrypt+0xc2>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d114      	bne.n	80026ec <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80026c2:	6a39      	ldr	r1, [r7, #32]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f8da 	bl	800287e <CRYP_AES_Encrypt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]
        break;
 80026ce:	e016      	b.n	80026fe <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fbc1 	bl	8002e5a <CRYP_AESGCM_Process>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]
        break;
 80026dc:	e00f      	b.n	80026fe <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80026de:	6a39      	ldr	r1, [r7, #32]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fd62 	bl	80031aa <CRYP_AESCCM_Process>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
        break;
 80026ea:	e008      	b.n	80026fe <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
        break;
 80026fc:	bf00      	nop
    }

    if (status == HAL_OK)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d110      	bne.n	8002726 <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002714:	e007      	b.n	8002726 <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00010060 	.word	0x00010060

08002734 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d17e      	bne.n	800284e <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_CRYP_Decrypt+0x32>
 8002762:	2302      	movs	r3, #2
 8002764:	e07c      	b.n	8002860 <HAL_CRYP_Decrypt+0x12c>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800279c:	e003      	b.n	80027a6 <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0218 	bic.w	r2, r3, #24
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0210 	orr.w	r2, r2, #16
 80027b8:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_CRYP_Decrypt+0x134>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]

    switch (algo)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027cc:	d023      	beq.n	8002816 <HAL_CRYP_Decrypt+0xe2>
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d826      	bhi.n	8002824 <HAL_CRYP_Decrypt+0xf0>
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b60      	cmp	r3, #96	; 0x60
 80027da:	d015      	beq.n	8002808 <HAL_CRYP_Decrypt+0xd4>
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b60      	cmp	r3, #96	; 0x60
 80027e0:	d820      	bhi.n	8002824 <HAL_CRYP_Decrypt+0xf0>
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d008      	beq.n	80027fa <HAL_CRYP_Decrypt+0xc6>
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d81a      	bhi.n	8002824 <HAL_CRYP_Decrypt+0xf0>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_CRYP_Decrypt+0xc6>
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d114      	bne.n	8002824 <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f8c6 	bl	800298e <CRYP_AES_Decrypt>
 8002802:	4603      	mov	r3, r0
 8002804:	75fb      	strb	r3, [r7, #23]
        break;
 8002806:	e016      	b.n	8002836 <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb25 	bl	8002e5a <CRYP_AESGCM_Process>
 8002810:	4603      	mov	r3, r0
 8002812:	75fb      	strb	r3, [r7, #23]
        break;
 8002814:	e00f      	b.n	8002836 <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fcc6 	bl	80031aa <CRYP_AESCCM_Process>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]
        break;
 8002822:	e008      	b.n	8002836 <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	75fb      	strb	r3, [r7, #23]
        break;
 8002834:	bf00      	nop
    }

    if (status == HAL_OK)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d110      	bne.n	800285e <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800284c:	e007      	b.n	800285e <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0208 	orr.w	r2, r3, #8
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010060 	.word	0x00010060

0800286c <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002888:	2301      	movs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d003      	beq.n	800289c <CRYP_AES_Encrypt+0x1e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2b04      	cmp	r3, #4
 800289a:	d109      	bne.n	80028b0 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	e002      	b.n	80028b0 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d122      	bne.n	80028fc <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fa6c 	bl	8002d9a <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d022      	beq.n	8002910 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6852      	ldr	r2, [r2, #4]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68d2      	ldr	r2, [r2, #12]
 80028f8:	621a      	str	r2, [r3, #32]
 80028fa:	e009      	b.n	8002910 <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2b04      	cmp	r3, #4
 8002902:	d105      	bne.n	8002910 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fa45 	bl	8002d9a <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002932:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002934:	e00a      	b.n	800294c <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002936:	6839      	ldr	r1, [r7, #0]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f976 	bl	8002c2a <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002942:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800294a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	b29b      	uxth	r3, r3
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <CRYP_AES_Encrypt+0xee>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	b29b      	uxth	r3, r3
 8002966:	89ba      	ldrh	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d3e4      	bcc.n	8002936 <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002998:	2301      	movs	r3, #1
 800299a:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d003      	beq.n	80029ac <CRYP_AES_Decrypt+0x1e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d109      	bne.n	80029c0 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	e002      	b.n	80029c0 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 8086 	bne.w	8002ad4 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d05d      	beq.n	8002a8c <CRYP_AES_Decrypt+0xfe>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d149      	bne.n	8002a6e <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 0218 	bic.w	r2, r3, #24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0208 	orr.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9d0 	bl	8002d9a <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 ff4f 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <CRYP_AES_Decrypt+0xba>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0ec      	b.n	8002c22 <CRYP_AES_Decrypt+0x294>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a56:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 0218 	bic.w	r2, r3, #24
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0210 	orr.w	r2, r2, #16
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e014      	b.n	8002a98 <CRYP_AES_Decrypt+0x10a>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f990 	bl	8002d9a <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0218 	orr.w	r2, r2, #24
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e005      	b.n	8002a98 <CRYP_AES_Decrypt+0x10a>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f981 	bl	8002d9a <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8085 	beq.w	8002bac <CRYP_AES_Decrypt+0x21e>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68d2      	ldr	r2, [r2, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
 8002ad2:	e06b      	b.n	8002bac <CRYP_AES_Decrypt+0x21e>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d167      	bne.n	8002bac <CRYP_AES_Decrypt+0x21e>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d05d      	beq.n	8002ba0 <CRYP_AES_Decrypt+0x212>
      {
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d149      	bne.n	8002b82 <CRYP_AES_Decrypt+0x1f4>
        {
          /* Set key preparation for decryption operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0218 	bic.w	r2, r3, #24
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0208 	orr.w	r2, r2, #8
 8002b00:	601a      	str	r2, [r3, #0]
          
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f946 	bl	8002d9a <CRYP_SetKey>
          
          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
          
          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fec5 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <CRYP_AES_Decrypt+0x1ce>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
            
            /* Change state & error code*/
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e062      	b.n	8002c22 <CRYP_AES_Decrypt+0x294>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b6a:	601a      	str	r2, [r3, #0]
          
          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0218 	bic.w	r2, r3, #24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0210 	orr.w	r2, r2, #16
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e014      	b.n	8002bac <CRYP_AES_Decrypt+0x21e>
        }
        else /*Mode 4 : decryption & Key preparation*/
        {
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4619      	mov	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f906 	bl	8002d9a <CRYP_SetKey>
          
          /* Set decryption & Key preparation operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0218 	orr.w	r2, r2, #24
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	e005      	b.n	8002bac <CRYP_AES_Decrypt+0x21e>
        }
      }
      else  /*Algorithm CTR */
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8f7 	bl	8002d9a <CRYP_SetKey>
      }
    }
  }
 
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc6:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bce:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002bd0:	e00a      	b.n	8002be8 <CRYP_AES_Decrypt+0x25a>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f828 	bl	8002c2a <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bde:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002be6:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <CRYP_AES_Decrypt+0x27a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	89ba      	ldrh	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3e4      	bcc.n	8002bd2 <CRYP_AES_Decrypt+0x244>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b088      	sub	sp, #32
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fdf2 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d018      	beq.n	8002d04 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fdb4 	bl	800286c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d12:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	e00b      	b.n	8002d32 <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3320      	adds	r3, #32
 8002d26:	443b      	add	r3, r7
 8002d28:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d9f0      	bls.n	8002d1a <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002d3c:	e01a      	b.n	8002d74 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3320      	adds	r3, #32
 8002d54:	443b      	add	r3, r7
 8002d56:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002d5a:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002d84:	3303      	adds	r3, #3
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d202      	bcs.n	8002d92 <CRYP_AES_ProcessData+0x168>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d9d5      	bls.n	8002d3e <CRYP_AES_ProcessData+0x114>
  }
}
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d051      	beq.n	8002e50 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d034      	beq.n	8002e1c <CRYP_SetKey+0x82>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db8:	d149      	bne.n	8002e4e <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6852      	ldr	r2, [r2, #4]
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68d2      	ldr	r2, [r2, #12]
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6912      	ldr	r2, [r2, #16]
 8002df4:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6952      	ldr	r2, [r2, #20]
 8002e00:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6992      	ldr	r2, [r2, #24]
 8002e0c:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69d2      	ldr	r2, [r2, #28]
 8002e18:	611a      	str	r2, [r3, #16]
        break;
 8002e1a:	e019      	b.n	8002e50 <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	611a      	str	r2, [r3, #16]

        break;
 8002e4c:	e000      	b.n	8002e50 <CRYP_SetKey+0xb6>
      default:
        break;
 8002e4e:	bf00      	nop
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b08e      	sub	sp, #56	; 0x38
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002e70:	2301      	movs	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d118      	bne.n	8002eae <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10a      	bne.n	8002e9a <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8002e92:	441a      	add	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e98:	e00f      	b.n	8002eba <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eac:	e005      	b.n	8002eba <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d16d      	bne.n	8002f9c <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff5c 	bl	8002d9a <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d2      	ldr	r2, [r2, #12]
 8002f10:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fcc3 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e128      	b.n	80031a2 <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f5e:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 face 	bl	8003504 <CRYP_GCMCCM_SetHeaderPhase>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e117      	b.n	80031a2 <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f9a:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb4:	f7ff f974 	bl	80022a0 <HAL_GetTick>
 8002fb8:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002fcc:	e033      	b.n	8003036 <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fe2a 	bl	8002c2a <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d022      	beq.n	8003024 <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7ff f95f 	bl	80022a0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <CRYP_AESGCM_Process+0x19a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d117      	bne.n	8003024 <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0210 	orr.w	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0be      	b.n	80031a2 <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003032:	b29b      	uxth	r3, r3
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	429a      	cmp	r2, r3
 800303c:	d203      	bcs.n	8003046 <CRYP_AESGCM_Process+0x1ec>
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	429a      	cmp	r2, r3
 8003044:	d3c3      	bcc.n	8002fce <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a4 	beq.w	80031a0 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	b29b      	uxth	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0318 	and.w	r3, r3, #24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	051a      	lsls	r2, r3, #20
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f1c3 0310 	rsb	r3, r3, #16
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a8:	e005      	b.n	80030b6 <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f1c3 0310 	rsb	r3, r3, #16
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3301      	adds	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ba:	e014      	b.n	80030e6 <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3301      	adds	r3, #1
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
 80030e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3e6      	bcc.n	80030bc <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 80030ee:	e006      	b.n	80030fe <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
      index++;
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	3301      	adds	r3, #1
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2b03      	cmp	r3, #3
 8003102:	d9f5      	bls.n	80030f0 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fbd2 	bl	80038b0 <CRYP_WaitOnCCFlag>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fba2 	bl	800286c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003136:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
 800313c:	e00b      	b.n	8003156 <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	443b      	add	r3, r7
 800314c:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	3301      	adds	r3, #1
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2b03      	cmp	r3, #3
 800315a:	d9f0      	bls.n	800313e <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 800315c:	2300      	movs	r3, #0
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
 8003160:	e01a      	b.n	8003198 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800316c:	b29b      	uxth	r3, r3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3338      	adds	r3, #56	; 0x38
 8003178:	443b      	add	r3, r7
 800317a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800317e:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003186:	b29b      	uxth	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	3301      	adds	r3, #1
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	429a      	cmp	r2, r3
 800319e:	d3e0      	bcc.n	8003162 <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3738      	adds	r7, #56	; 0x38
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b08e      	sub	sp, #56	; 0x38
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80031c0:	2301      	movs	r3, #1
 80031c2:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d118      	bne.n	80031fe <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d10a      	bne.n	80031ea <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80031e8:	e00f      	b.n	800320a <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80031fc:	e005      	b.n	800320a <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d16d      	bne.n	80032ec <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003224:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fdb4 	bl	8002d9a <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6852      	ldr	r2, [r2, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d2      	ldr	r2, [r2, #12]
 8003260:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fb1b 	bl	80038b0 <CRYP_WaitOnCCFlag>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00f      	beq.n	80032a0 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e12d      	b.n	80034fc <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ae:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f926 	bl	8003504 <CRYP_GCMCCM_SetHeaderPhase>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e11c      	b.n	80034fc <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032da:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ea:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003304:	f7fe ffcc 	bl	80022a0 <HAL_GetTick>
 8003308:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003318:	b29b      	uxth	r3, r3
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800331c:	e033      	b.n	8003386 <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fc82 	bl	8002c2a <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d022      	beq.n	8003374 <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 800332e:	f7fe ffb7 	bl	80022a0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <CRYP_AESCCM_Process+0x19a>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d117      	bne.n	8003374 <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0c3      	b.n	80034fc <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003382:	b29b      	uxth	r3, r3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	429a      	cmp	r2, r3
 800338c:	d203      	bcs.n	8003396 <CRYP_AESCCM_Process+0x1ec>
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	429a      	cmp	r2, r3
 8003394:	d3c3      	bcc.n	800331e <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a9 	beq.w	80034fa <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0318 	and.w	r3, r3, #24
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d10a      	bne.n	80033e4 <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	051a      	lsls	r2, r3, #20
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f1c3 0310 	rsb	r3, r3, #16
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f8:	e005      	b.n	8003406 <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f1c3 0310 	rsb	r3, r3, #16
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3301      	adds	r3, #1
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003406:	2300      	movs	r3, #0
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	e014      	b.n	8003436 <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	3301      	adds	r3, #1
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	429a      	cmp	r2, r3
 800343c:	d3e6      	bcc.n	800340c <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 800343e:	e006      	b.n	800344e <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	3301      	adds	r3, #1
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	2b03      	cmp	r3, #3
 8003452:	d9f5      	bls.n	8003440 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa2a 	bl	80038b0 <CRYP_WaitOnCCFlag>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00f      	beq.n	8003482 <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e03c      	b.n	80034fc <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003490:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003492:	2300      	movs	r3, #0
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
 8003496:	e00b      	b.n	80034b0 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3338      	adds	r3, #56	; 0x38
 80034a4:	443b      	add	r3, r7
 80034a6:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	3301      	adds	r3, #1
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d9f0      	bls.n	8003498 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
 80034ba:	e01a      	b.n	80034f2 <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	3338      	adds	r3, #56	; 0x38
 80034d2:	443b      	add	r3, r7
 80034d4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80034d8:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	3301      	adds	r3, #1
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
 80034f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d3e0      	bcc.n	80034bc <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3738      	adds	r7, #56	; 0x38
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b092      	sub	sp, #72	; 0x48
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 800350e:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8003510:	f107 040c 	add.w	r4, r7, #12
 8003514:	461d      	mov	r5, r3
 8003516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800351a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800351c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800351e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	643b      	str	r3, [r7, #64]	; 0x40
 8003536:	e002      	b.n	800353e <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8192 	beq.w	800386a <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003558:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 800356a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	2b00      	cmp	r3, #0
 8003572:	d17a      	bne.n	800366a <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003574:	2300      	movs	r3, #0
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
 8003578:	e071      	b.n	800365e <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003582:	b29b      	uxth	r3, r3
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	441a      	add	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003594:	b29b      	uxth	r3, r3
 8003596:	3301      	adds	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003600:	b29b      	uxth	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800360a:	6839      	ldr	r1, [r7, #0]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f94f 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0210 	orr.w	r2, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e12e      	b.n	80038a6 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003656:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	3304      	adds	r3, #4
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
 800365e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003664:	429a      	cmp	r2, r3
 8003666:	d388      	bcc.n	800357a <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8003668:	e11c      	b.n	80038a4 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800366a:	2300      	movs	r3, #0
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
 800366e:	e074      	b.n	800375a <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699a      	ldr	r2, [r3, #24]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003678:	b29b      	uxth	r3, r3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800368a:	b29b      	uxth	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800369c:	b29b      	uxth	r3, r3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8d4 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01a      	beq.n	8003744 <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f043 0210 	orr.w	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0b3      	b.n	80038a6 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 800373e:	bf00      	nop
 8003740:	0801d300 	.word	0x0801d300
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003752:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	3304      	adds	r3, #4
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003762:	429a      	cmp	r2, r3
 8003764:	d384      	bcc.n	8003670 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003766:	2300      	movs	r3, #0
 8003768:	647b      	str	r3, [r7, #68]	; 0x44
 800376a:	e014      	b.n	8003796 <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003774:	b29b      	uxth	r3, r3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003786:	b29b      	uxth	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	3301      	adds	r3, #1
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
 8003796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3e3      	bcc.n	800376c <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80037a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80037ae:	e006      	b.n	80037be <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80037b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ba:	3301      	adds	r3, #1
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 80037be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d9f5      	bls.n	80037b0 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 80037c4:	e029      	b.n	800381a <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	005a      	lsls	r2, r3, #1
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3348      	adds	r3, #72	; 0x48
 80037ea:	443b      	add	r3, r7
 80037ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80037f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037f2:	4013      	ands	r3, r2
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037fc:	609a      	str	r2, [r3, #8]
         loopcounter++;
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	3301      	adds	r3, #1
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8003804:	e006      	b.n	8003814 <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
           loopcounter++;
 800380e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003810:	3301      	adds	r3, #1
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 8003814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003816:	2b03      	cmp	r3, #3
 8003818:	d9f5      	bls.n	8003806 <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f847 	bl	80038b0 <CRYP_WaitOnCCFlag>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0210 	orr.w	r2, r3, #16
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e026      	b.n	80038a6 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e01c      	b.n	80038a4 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 0106 	bic.w	r1, r3, #6
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003892:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3748      	adds	r7, #72	; 0x48
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}
 80038ae:	bf00      	nop

080038b0 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80038ba:	f7fe fcf1 	bl	80022a0 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80038c0:	e010      	b.n	80038e4 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d00c      	beq.n	80038e4 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fce9 	bl	80022a0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <CRYP_WaitOnCCFlag+0x30>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0e7      	beq.n	80038c2 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390a:	e140      	b.n	8003b8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8132 	beq.w	8003b88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d005      	beq.n	800393c <HAL_GPIO_Init+0x40>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d130      	bne.n	800399e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003972:	2201      	movs	r2, #1
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 0201 	and.w	r2, r3, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d017      	beq.n	80039da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d123      	bne.n	8003a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	08da      	lsrs	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3208      	adds	r2, #8
 80039ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	220f      	movs	r2, #15
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	6939      	ldr	r1, [r7, #16]
 8003a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2203      	movs	r2, #3
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0203 	and.w	r2, r3, #3
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 808c 	beq.w	8003b88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a70:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <HAL_GPIO_Init+0x2b0>)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	3302      	adds	r3, #2
 8003a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	2207      	movs	r2, #7
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_GPIO_Init+0x1bc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a44      	ldr	r2, [pc, #272]	; (8003bb0 <HAL_GPIO_Init+0x2b4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <HAL_GPIO_Init+0x1b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a43      	ldr	r2, [pc, #268]	; (8003bb4 <HAL_GPIO_Init+0x2b8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_GPIO_Init+0x1b4>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e004      	b.n	8003aba <HAL_GPIO_Init+0x1be>
 8003ab0:	2307      	movs	r3, #7
 8003ab2:	e002      	b.n	8003aba <HAL_GPIO_Init+0x1be>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_GPIO_Init+0x1be>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	f002 0203 	and.w	r2, r2, #3
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	4093      	lsls	r3, r2
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aca:	4938      	ldr	r1, [pc, #224]	; (8003bac <HAL_GPIO_Init+0x2b0>)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad8:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b02:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b26:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003b52:	4a19      	ldr	r2, [pc, #100]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003b5a:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003b80:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <HAL_GPIO_Init+0x2bc>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f aeb7 	bne.w	800390c <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	58000800 	.word	0x58000800

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd8:	e002      	b.n	8003be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfc:	d101      	bne.n	8003c02 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d101      	bne.n	8003c22 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_MSI_GetRange>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_GetSysClkSource>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_GetAHBPrescaler>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_PLL_GetN>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <LL_RCC_PLL_GetR>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_PLL_GetDivider>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cee:	f7ff ffb4 	bl	8003c5a <LL_RCC_GetSysClkSource>
 8003cf2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf4:	f7ff ffe9 	bl	8003cca <LL_RCC_PLL_GetMainSource>
 8003cf8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x2c>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d139      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d136      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d0c:	f7ff ff7e 	bl	8003c0c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d115      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x62>
 8003d16:	f7ff ff79 	bl	8003c0c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_GetSysClockFreq+0x4e>
 8003d20:	f7ff ff84 	bl	8003c2c <LL_RCC_MSI_GetRange>
 8003d24:	4603      	mov	r3, r0
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	e005      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x5a>
 8003d2e:	f7ff ff88 	bl	8003c42 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d32:	4603      	mov	r3, r0
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	e014      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x8c>
 8003d42:	f7ff ff63 	bl	8003c0c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x7a>
 8003d4c:	f7ff ff6e 	bl	8003c2c <LL_RCC_MSI_GetRange>
 8003d50:	4603      	mov	r3, r0
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	e005      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x86>
 8003d5a:	f7ff ff72 	bl	8003c42 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d115      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d78:	e012      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00c      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d109      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d8c:	f7ff ff2d 	bl	8003bea <LL_RCC_HSE_IsEnabledDiv2>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	e001      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d9e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da0:	f7ff ff5b 	bl	8003c5a <LL_RCC_GetSysClkSource>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d12f      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003daa:	f7ff ff8e 	bl	8003cca <LL_RCC_PLL_GetMainSource>
 8003dae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0xde>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xe4>
 8003dbc:	e00d      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dc0:	60fb      	str	r3, [r7, #12]
        break;
 8003dc2:	e00d      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dc4:	f7ff ff11 	bl	8003bea <LL_RCC_HSE_IsEnabledDiv2>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003dd0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003dd2:	e005      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003dd6:	60fb      	str	r3, [r7, #12]
        break;
 8003dd8:	e002      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	60fb      	str	r3, [r7, #12]
        break;
 8003dde:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003de0:	f7ff ff51 	bl	8003c86 <LL_RCC_PLL_GetN>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	fb03 f402 	mul.w	r4, r3, r2
 8003dec:	f7ff ff62 	bl	8003cb4 <LL_RCC_PLL_GetDivider>
 8003df0:	4603      	mov	r3, r0
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	3301      	adds	r3, #1
 8003df6:	fbb4 f4f3 	udiv	r4, r4, r3
 8003dfa:	f7ff ff50 	bl	8003c9e <LL_RCC_PLL_GetR>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	0f5b      	lsrs	r3, r3, #29
 8003e02:	3301      	adds	r3, #1
 8003e04:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e0a:	697b      	ldr	r3, [r7, #20]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	0801efb0 	.word	0x0801efb0
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	01e84800 	.word	0x01e84800

08003e20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b598      	push	{r3, r4, r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e24:	f7ff ff5c 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	f7ff ff21 	bl	8003c70 <LL_RCC_GetAHBPrescaler>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd98      	pop	{r3, r4, r7, pc}
 8003e44:	0801ef50 	.word	0x0801ef50

08003e48 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	58000400 	.word	0x58000400

08003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	58000400 	.word	0x58000400

08003e90 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a04      	ldr	r2, [pc, #16]	; (8003eac <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	58000400 	.word	0x58000400

08003eb0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eba:	619a      	str	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	58000400 	.word	0x58000400

08003ec8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d101      	bne.n	8003edc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	58000400 	.word	0x58000400

08003eec <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d101      	bne.n	8003f00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	58000400 	.word	0x58000400

08003f10 <LL_RCC_RF_DisableReset>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_IsRFUnderReset>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f44:	d101      	bne.n	8003f4a <LL_RCC_IsRFUnderReset+0x1a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <LL_RCC_IsRFUnderReset+0x1c>
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <LL_EXTI_EnableIT_32_63+0x24>)
 8003f5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003f62:	4905      	ldr	r1, [pc, #20]	; (8003f78 <LL_EXTI_EnableIT_32_63+0x24>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58000800 	.word	0x58000800

08003f7c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
    return status;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	e052      	b.n	8004038 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	799b      	ldrb	r3, [r3, #6]
 8003f9a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SUBGHZ_Init+0x2c>
 8003fa2:	7bbb      	ldrb	r3, [r7, #14]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d109      	bne.n	8003fbc <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f848 	bl	8004044 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fb8:	f7ff ffcc 	bl	8003f54 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d126      	bne.n	8004010 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003fc8:	f7ff ffa2 	bl	8003f10 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fcc:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <HAL_SUBGHZ_Init+0xc4>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	0cdb      	lsrs	r3, r3, #19
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	609a      	str	r2, [r3, #8]
        break;
 8003ff2:	e007      	b.n	8004004 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003ffa:	f7ff ff99 	bl	8003f30 <LL_RCC_IsRFUnderReset>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ee      	bne.n	8003fe2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004004:	f7ff ff34 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004008:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800400c:	f7ff ff1c 	bl	8003e48 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004010:	f7ff ff4e 	bl	8003eb0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa38 	bl	8004494 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	719a      	strb	r2, [r3, #6]

  return status;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000004 	.word	0x20000004

08004044 <HAL_SUBGHZ_MspInit>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval None
  */
__weak void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
            the HAL_SUBGHZ_MspInit should be implemented in the user file
   */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsubghz);
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	461a      	mov	r2, r3
 8004062:	460b      	mov	r3, r1
 8004064:	817b      	strh	r3, [r7, #10]
 8004066:	4613      	mov	r3, r2
 8004068:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	799b      	ldrb	r3, [r3, #6]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d14a      	bne.n	800410a <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	795b      	ldrb	r3, [r3, #5]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800407c:	2302      	movs	r3, #2
 800407e:	e045      	b.n	800410c <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 facf 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004092:	f7ff fefd 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004096:	210d      	movs	r1, #13
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa1b 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fa13 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa0d 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	82bb      	strh	r3, [r7, #20]
 80040be:	e00a      	b.n	80040d6 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80040c0:	8abb      	ldrh	r3, [r7, #20]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa02 	bl	80044d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040d0:	8abb      	ldrh	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	82bb      	strh	r3, [r7, #20]
 80040d6:	8aba      	ldrh	r2, [r7, #20]
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d3f0      	bcc.n	80040c0 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040de:	f7ff fec7 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fac8 	bl	8004678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
 80040f4:	e001      	b.n	80040fa <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	715a      	strb	r2, [r3, #5]

    return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	e000      	b.n	800410c <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	461a      	mov	r2, r3
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
 8004124:	4613      	mov	r3, r2
 8004126:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	799b      	ldrb	r3, [r3, #6]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d14a      	bne.n	80041cc <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	795b      	ldrb	r3, [r3, #5]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800413e:	2302      	movs	r3, #2
 8004140:	e045      	b.n	80041ce <HAL_SUBGHZ_ReadRegisters+0xba>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa71 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800414e:	f7ff fe9f 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004152:	211d      	movs	r1, #29
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f9bd 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800415a:	897b      	ldrh	r3, [r7, #10]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f9b5 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	4619      	mov	r1, r3
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9af 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004176:	2100      	movs	r1, #0
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9ab 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800417e:	2300      	movs	r3, #0
 8004180:	82fb      	strh	r3, [r7, #22]
 8004182:	e009      	b.n	8004198 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f9fa 	bl	8004580 <SUBGHZSPI_Receive>
      pData++;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	3301      	adds	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004192:	8afb      	ldrh	r3, [r7, #22]
 8004194:	3301      	adds	r3, #1
 8004196:	82fb      	strh	r3, [r7, #22]
 8004198:	8afa      	ldrh	r2, [r7, #22]
 800419a:	893b      	ldrh	r3, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3f1      	bcc.n	8004184 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041a0:	f7ff fe66 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa67 	bl	8004678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	e001      	b.n	80041bc <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	715a      	strb	r2, [r3, #5]

    return status;
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
 80041ca:	e000      	b.n	80041ce <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	461a      	mov	r2, r3
 80041e2:	460b      	mov	r3, r1
 80041e4:	72fb      	strb	r3, [r7, #11]
 80041e6:	4613      	mov	r3, r2
 80041e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d14a      	bne.n	800428a <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	795b      	ldrb	r3, [r3, #5]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e045      	b.n	800428c <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fa12 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	2b84      	cmp	r3, #132	; 0x84
 8004210:	d002      	beq.n	8004218 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	2b94      	cmp	r3, #148	; 0x94
 8004216:	d103      	bne.n	8004220 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	711a      	strb	r2, [r3, #4]
 800421e:	e002      	b.n	8004226 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004226:	f7ff fe33 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	4619      	mov	r1, r3
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f950 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	82bb      	strh	r3, [r7, #20]
 8004238:	e00a      	b.n	8004250 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800423a:	8abb      	ldrh	r3, [r7, #20]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4413      	add	r3, r2
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f945 	bl	80044d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800424a:	8abb      	ldrh	r3, [r7, #20]
 800424c:	3301      	adds	r3, #1
 800424e:	82bb      	strh	r3, [r7, #20]
 8004250:	8aba      	ldrh	r2, [r7, #20]
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3f0      	bcc.n	800423a <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004258:	f7ff fe0a 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b84      	cmp	r3, #132	; 0x84
 8004260:	d002      	beq.n	8004268 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa08 	bl	8004678 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
 8004274:	e001      	b.n	800427a <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	715a      	strb	r2, [r3, #5]

    return status;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	e000      	b.n	800428c <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	461a      	mov	r2, r3
 80042a0:	460b      	mov	r3, r1
 80042a2:	72fb      	strb	r3, [r7, #11]
 80042a4:	4613      	mov	r3, r2
 80042a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	799b      	ldrb	r3, [r3, #6]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d13d      	bne.n	8004332 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	795b      	ldrb	r3, [r3, #5]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e038      	b.n	8004334 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f9b1 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042ce:	f7ff fddf 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	4619      	mov	r1, r3
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8fc 	bl	80044d4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80042dc:	2100      	movs	r1, #0
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f8f8 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	82fb      	strh	r3, [r7, #22]
 80042e8:	e009      	b.n	80042fe <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f947 	bl	8004580 <SUBGHZSPI_Receive>
      pData++;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80042f8:	8afb      	ldrh	r3, [r7, #22]
 80042fa:	3301      	adds	r3, #1
 80042fc:	82fb      	strh	r3, [r7, #22]
 80042fe:	8afa      	ldrh	r2, [r7, #22]
 8004300:	893b      	ldrh	r3, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d3f1      	bcc.n	80042ea <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004306:	f7ff fdb3 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f9b4 	bl	8004678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e001      	b.n	8004322 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	715a      	strb	r2, [r3, #5]

    return status;
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	e000      	b.n	8004334 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	461a      	mov	r2, r3
 8004348:	460b      	mov	r3, r1
 800434a:	72fb      	strb	r3, [r7, #11]
 800434c:	4613      	mov	r3, r2
 800434e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	799b      	ldrb	r3, [r3, #6]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d13e      	bne.n	80043d8 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	795b      	ldrb	r3, [r3, #5]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004362:	2302      	movs	r3, #2
 8004364:	e039      	b.n	80043da <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f95f 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004372:	f7ff fd8d 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004376:	210e      	movs	r1, #14
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f8ab 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	4619      	mov	r1, r3
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8a6 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	82bb      	strh	r3, [r7, #20]
 800438c:	e00a      	b.n	80043a4 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800438e:	8abb      	ldrh	r3, [r7, #20]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f89b 	bl	80044d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800439e:	8abb      	ldrh	r3, [r7, #20]
 80043a0:	3301      	adds	r3, #1
 80043a2:	82bb      	strh	r3, [r7, #20]
 80043a4:	8aba      	ldrh	r2, [r7, #20]
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3f0      	bcc.n	800438e <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043ac:	f7ff fd60 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f961 	bl	8004678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
 80043c2:	e001      	b.n	80043c8 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	715a      	strb	r2, [r3, #5]

    return status;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	e000      	b.n	80043da <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b088      	sub	sp, #32
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	461a      	mov	r2, r3
 80043ee:	460b      	mov	r3, r1
 80043f0:	72fb      	strb	r3, [r7, #11]
 80043f2:	4613      	mov	r3, r2
 80043f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	799b      	ldrb	r3, [r3, #6]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d141      	bne.n	8004488 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	795b      	ldrb	r3, [r3, #5]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800440c:	2302      	movs	r3, #2
 800440e:	e03c      	b.n	800448a <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f90a 	bl	8004630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800441c:	f7ff fd38 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004420:	211e      	movs	r1, #30
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f856 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	4619      	mov	r1, r3
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f851 	bl	80044d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004432:	2100      	movs	r1, #0
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f84d 	bl	80044d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	82fb      	strh	r3, [r7, #22]
 800443e:	e009      	b.n	8004454 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f89c 	bl	8004580 <SUBGHZSPI_Receive>
      pData++;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3301      	adds	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	3301      	adds	r3, #1
 8004452:	82fb      	strh	r3, [r7, #22]
 8004454:	8afa      	ldrh	r2, [r7, #22]
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d3f1      	bcc.n	8004440 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800445c:	f7ff fd08 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f909 	bl	8004678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e001      	b.n	8004478 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	715a      	strb	r2, [r3, #5]

    return status;
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	e000      	b.n	800448a <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 80044a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80044b0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 80044b4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80044b8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <SUBGHZSPI_Init+0x3c>)
 80044c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c4:	6013      	str	r3, [r2, #0]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	58010000 	.word	0x58010000

080044d4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80044e4:	4b23      	ldr	r3, [pc, #140]	; (8004574 <SUBGHZSPI_Transmit+0xa0>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	0cdb      	lsrs	r3, r3, #19
 80044f2:	2264      	movs	r2, #100	; 0x64
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	609a      	str	r2, [r3, #8]
      break;
 800450a:	e008      	b.n	800451e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <SUBGHZSPI_Transmit+0xa4>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d1ed      	bne.n	80044fa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <SUBGHZSPI_Transmit+0xa8>)
 8004520:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <SUBGHZSPI_Transmit+0xa0>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	0cdb      	lsrs	r3, r3, #19
 8004536:	2264      	movs	r2, #100	; 0x64
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	609a      	str	r2, [r3, #8]
      break;
 800454e:	e008      	b.n	8004562 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <SUBGHZSPI_Transmit+0xa4>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d1ed      	bne.n	800453e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <SUBGHZSPI_Transmit+0xa4>)
 8004564:	68db      	ldr	r3, [r3, #12]

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000004 	.word	0x20000004
 8004578:	58010000 	.word	0x58010000
 800457c:	5801000c 	.word	0x5801000c

08004580 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <SUBGHZSPI_Receive+0xa4>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	0cdb      	lsrs	r3, r3, #19
 800459c:	2264      	movs	r2, #100	; 0x64
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	609a      	str	r2, [r3, #8]
      break;
 80045b4:	e008      	b.n	80045c8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <SUBGHZSPI_Receive+0xa8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d1ed      	bne.n	80045a4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80045c8:	4b18      	ldr	r3, [pc, #96]	; (800462c <SUBGHZSPI_Receive+0xac>)
 80045ca:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	22ff      	movs	r2, #255	; 0xff
 80045d0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <SUBGHZSPI_Receive+0xa4>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	0cdb      	lsrs	r3, r3, #19
 80045e0:	2264      	movs	r2, #100	; 0x64
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e008      	b.n	800460c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <SUBGHZSPI_Receive+0xa8>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d1ed      	bne.n	80045e8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <SUBGHZSPI_Receive+0xa8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	701a      	strb	r2, [r3, #0]

  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004
 8004628:	58010000 	.word	0x58010000
 800462c:	5801000c 	.word	0x5801000c

08004630 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	791b      	ldrb	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d111      	bne.n	8004664 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <SUBGHZ_CheckDeviceReady+0x44>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004650:	f7ff fc1e 	bl	8003e90 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004660:	f7ff fc06 	bl	8003e70 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f807 	bl	8004678 <SUBGHZ_WaitOnBusy>
 800466a:	4603      	mov	r3, r0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000004 	.word	0x20000004

08004678 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <SUBGHZ_WaitOnBusy+0x58>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	2264      	movs	r2, #100	; 0x64
 8004694:	fb02 f303 	mul.w	r3, r2, r3
 8004698:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800469a:	f7ff fc27 	bl	8003eec <LL_PWR_IsActiveFlag_RFBUSYMS>
 800469e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	609a      	str	r2, [r3, #8]
      break;
 80046b0:	e009      	b.n	80046c6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80046b8:	f7ff fc06 	bl	8003ec8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d0e9      	beq.n	800469a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000004 	.word	0x20000004

080046d4 <LL_GPIO_SetPinMode>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	b08b      	sub	sp, #44	; 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	613b      	str	r3, [r7, #16]
  return result;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e003      	b.n	8004706 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2103      	movs	r1, #3
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	401a      	ands	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	61fb      	str	r3, [r7, #28]
  return result;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004728:	2320      	movs	r3, #32
 800472a:	e003      	b.n	8004734 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	372c      	adds	r7, #44	; 0x2c
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <LL_GPIO_SetPinOutputType>:
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	43db      	mvns	r3, r3
 8004760:	401a      	ands	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	431a      	orrs	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <LL_GPIO_SetPinSpeed>:
{
 800477a:	b480      	push	{r7}
 800477c:	b08b      	sub	sp, #44	; 0x2c
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	613b      	str	r3, [r7, #16]
  return result;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e003      	b.n	80047ac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2103      	movs	r1, #3
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	61fb      	str	r3, [r7, #28]
  return result;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80047ce:	2320      	movs	r3, #32
 80047d0:	e003      	b.n	80047da <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	431a      	orrs	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	372c      	adds	r7, #44	; 0x2c
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <LL_GPIO_SetPinPull>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b08b      	sub	sp, #44	; 0x2c
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	613b      	str	r3, [r7, #16]
  return result;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004818:	2320      	movs	r3, #32
 800481a:	e003      	b.n	8004824 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	fab3 f383 	clz	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2103      	movs	r1, #3
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	401a      	ands	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
  return result;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e003      	b.n	8004852 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	431a      	orrs	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	60da      	str	r2, [r3, #12]
}
 8004860:	bf00      	nop
 8004862:	372c      	adds	r7, #44	; 0x2c
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <LL_GPIO_SetAFPin_0_7>:
{
 800486a:	b480      	push	{r7}
 800486c:	b08b      	sub	sp, #44	; 0x2c
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	613b      	str	r3, [r7, #16]
  return result;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	210f      	movs	r1, #15
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	61fb      	str	r3, [r7, #28]
  return result;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80048be:	2320      	movs	r3, #32
 80048c0:	e003      	b.n	80048ca <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	431a      	orrs	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	372c      	adds	r7, #44	; 0x2c
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <LL_GPIO_SetAFPin_8_15>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	b08b      	sub	sp, #44	; 0x2c
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	613b      	str	r3, [r7, #16]
  return result;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e003      	b.n	8004916 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	210f      	movs	r1, #15
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	401a      	ands	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	61fb      	str	r3, [r7, #28]
  return result;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800493a:	2320      	movs	r3, #32
 800493c:	e003      	b.n	8004946 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004954:	bf00      	nop
 8004956:	372c      	adds	r7, #44	; 0x2c
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b088      	sub	sp, #32
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	60fb      	str	r3, [r7, #12]
  return result;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <LL_GPIO_Init+0x26>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e003      	b.n	800498c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800498e:	e04e      	b.n	8004a2e <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d040      	beq.n	8004a28 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	461a      	mov	r2, r3
 80049ac:	69b9      	ldr	r1, [r7, #24]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fe90 	bl	80046d4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d003      	beq.n	80049c4 <LL_GPIO_Init+0x66>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d10d      	bne.n	80049e0 <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	461a      	mov	r2, r3
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fed4 	bl	800477a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff feb6 	bl	800474c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	461a      	mov	r2, r3
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff02 	bl	80047f2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d111      	bne.n	8004a1a <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2bff      	cmp	r3, #255	; 0xff
 80049fa:	d807      	bhi.n	8004a0c <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	461a      	mov	r2, r3
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff30 	bl	800486a <LL_GPIO_SetAFPin_0_7>
 8004a0a:	e006      	b.n	8004a1a <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	461a      	mov	r2, r3
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff64 	bl	80048e2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff fe56 	bl	80046d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1a9      	bne.n	8004990 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8004a3c:	2301      	movs	r3, #1
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <LL_LPUART_IsEnabled>:
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <LL_LPUART_IsEnabled+0x18>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_LPUART_IsEnabled+0x1a>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <LL_LPUART_SetPrescaler>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	b292      	uxth	r2, r2
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <LL_LPUART_SetStopBitsLength>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <LL_LPUART_SetHWFlowCtrl>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <LL_LPUART_SetBaudRate>:
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b088      	sub	sp, #32
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	61f8      	str	r0, [r7, #28]
 8004ae2:	61b9      	str	r1, [r7, #24]
 8004ae4:	617a      	str	r2, [r7, #20]
 8004ae6:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d039      	beq.n	8004b62 <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2200      	movs	r2, #0
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	60fa      	str	r2, [r7, #12]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <LL_LPUART_SetBaudRate+0x94>)
 8004afe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b12:	f7fc f87b 	bl	8000c0c <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	020b      	lsls	r3, r1, #8
 8004b28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b2c:	0202      	lsls	r2, r0, #8
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	0849      	lsrs	r1, r1, #1
 8004b32:	2000      	movs	r0, #0
 8004b34:	460c      	mov	r4, r1
 8004b36:	4605      	mov	r5, r0
 8004b38:	eb12 0804 	adds.w	r8, r2, r4
 8004b3c:	eb43 0905 	adc.w	r9, r3, r5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2200      	movs	r2, #0
 8004b44:	469a      	mov	sl, r3
 8004b46:	4693      	mov	fp, r2
 8004b48:	4652      	mov	r2, sl
 8004b4a:	465b      	mov	r3, fp
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fc f85c 	bl	8000c0c <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	60da      	str	r2, [r3, #12]
}
 8004b62:	bf00      	nop
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6c:	0801eff0 	.word	0x0801eff0

08004b70 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff61 	bl	8004a46 <LL_LPUART_IsEnabled>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d136      	bne.n	8004bf8 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <LL_LPUART_Init+0x94>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	6891      	ldr	r1, [r2, #8]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	6912      	ldr	r2, [r2, #16]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	6952      	ldr	r2, [r2, #20]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ff6e 	bl	8004a90 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ff7a 	bl	8004ab4 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8004bc0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004bc4:	f000 f930 	bl	8004e28 <LL_RCC_GetLPUARTClockFreq>
 8004bc8:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff76 	bl	8004ad8 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff39 	bl	8004a6a <LL_LPUART_SetPrescaler>
  }

  return (status);
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	efffe9f3 	.word	0xefffe9f3

08004c08 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1a:	d101      	bne.n	8004c20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <LL_RCC_HSI_IsReady>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d101      	bne.n	8004c42 <LL_RCC_HSI_IsReady+0x18>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <LL_RCC_HSI_IsReady+0x1a>
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_LSE_IsReady>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d101      	bne.n	8004c64 <LL_RCC_LSE_IsReady+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <LL_RCC_LSE_IsReady+0x1a>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d101      	bne.n	8004c84 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <LL_RCC_MSI_GetRange>:
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_GetSysClkSource>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_GetAHBPrescaler>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_GetAHB3Prescaler>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <LL_RCC_GetAPB1Prescaler>:
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <LL_RCC_GetAPB2Prescaler>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <LL_RCC_GetLPUARTClockSource>:
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4013      	ands	r3, r2
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_PLL_GetN>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_PLL_GetR>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr

08004d92 <LL_RCC_PLL_GetDivider>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <LL_RCC_PLL_GetMainSource>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0303 	and.w	r3, r3, #3
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004dc6:	f000 f871 	bl	8004eac <RCC_GetSystemClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]

  /* HCLK1 clock frequency */
  RCC_Clocks->HCLK1_Frequency   = RCC_GetHCLK1ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f911 	bl	8004ffc <RCC_GetHCLK1ClockFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	605a      	str	r2, [r3, #4]

#if defined(DUAL_CORE)
  /* HCLK2 clock frequency */
  RCC_Clocks->HCLK2_Frequency   = RCC_GetHCLK2ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f91f 	bl	8005028 <RCC_GetHCLK2ClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]
#endif /* DUAL_CORE */

  /* HCLK3 clock frequency */
  RCC_Clocks->HCLK3_Frequency   = RCC_GetHCLK3ClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f92d 	bl	8005054 <RCC_GetHCLK3ClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK1_Frequency);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f93b 	bl	8005080 <RCC_GetPCLK1ClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	611a      	str	r2, [r3, #16]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK1_Frequency);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f947 	bl	80050a8 <RCC_GetPCLK2ClockFreq>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	615a      	str	r2, [r3, #20]
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff ff86 	bl	8004d46 <LL_RCC_GetLPUARTClockSource>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e40:	d015      	beq.n	8004e6e <LL_RCC_GetLPUARTClockFreq+0x46>
 8004e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e46:	d81b      	bhi.n	8004e80 <LL_RCC_GetLPUARTClockFreq+0x58>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d003      	beq.n	8004e56 <LL_RCC_GetLPUARTClockFreq+0x2e>
 8004e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e52:	d004      	beq.n	8004e5e <LL_RCC_GetLPUARTClockFreq+0x36>
 8004e54:	e014      	b.n	8004e80 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 8004e56:	f000 f829 	bl	8004eac <RCC_GetSystemClockFreq>
 8004e5a:	60f8      	str	r0, [r7, #12]
      break;
 8004e5c:	e01f      	b.n	8004e9e <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8004e5e:	f7ff fee4 	bl	8004c2a <LL_RCC_HSI_IsReady>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d117      	bne.n	8004e98 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <LL_RCC_GetLPUARTClockFreq+0x80>)
 8004e6a:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004e6c:	e014      	b.n	8004e98 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8004e6e:	f7ff feed 	bl	8004c4c <LL_RCC_LSE_IsReady>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d111      	bne.n	8004e9c <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 8004e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004e7e:	e00d      	b.n	8004e9c <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8004e80:	f000 f814 	bl	8004eac <RCC_GetSystemClockFreq>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f8b8 	bl	8004ffc <RCC_GetHCLK1ClockFreq>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f8f6 	bl	8005080 <RCC_GetPCLK1ClockFreq>
 8004e94:	60f8      	str	r0, [r7, #12]
      break;
 8004e96:	e002      	b.n	8004e9e <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8004e9c:	bf00      	nop
  }

  return lpuart_frequency;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004eb2:	f7ff ff03 	bl	8004cbc <LL_RCC_GetSysClkSource>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d861      	bhi.n	8004f80 <RCC_GetSystemClockFreq+0xd4>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <RCC_GetSystemClockFreq+0x18>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f81 	.word	0x08004f81
 8004ecc:	08004f81 	.word	0x08004f81
 8004ed0:	08004f81 	.word	0x08004f81
 8004ed4:	08004f5d 	.word	0x08004f5d
 8004ed8:	08004f81 	.word	0x08004f81
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08004f81 	.word	0x08004f81
 8004ee4:	08004f63 	.word	0x08004f63
 8004ee8:	08004f81 	.word	0x08004f81
 8004eec:	08004f81 	.word	0x08004f81
 8004ef0:	08004f81 	.word	0x08004f81
 8004ef4:	08004f79 	.word	0x08004f79
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004ef8:	f7ff feb9 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d115      	bne.n	8004f2e <RCC_GetSystemClockFreq+0x82>
 8004f02:	f7ff feb4 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <RCC_GetSystemClockFreq+0x6e>
 8004f0c:	f7ff febf 	bl	8004c8e <LL_RCC_MSI_GetRange>
 8004f10:	4603      	mov	r3, r0
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	e005      	b.n	8004f26 <RCC_GetSystemClockFreq+0x7a>
 8004f1a:	f7ff fec3 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	4a32      	ldr	r2, [pc, #200]	; (8004ff0 <RCC_GetSystemClockFreq+0x144>)
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	e014      	b.n	8004f58 <RCC_GetSystemClockFreq+0xac>
 8004f2e:	f7ff fe9e 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <RCC_GetSystemClockFreq+0x9a>
 8004f38:	f7ff fea9 	bl	8004c8e <LL_RCC_MSI_GetRange>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	e005      	b.n	8004f52 <RCC_GetSystemClockFreq+0xa6>
 8004f46:	f7ff fead 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <RCC_GetSystemClockFreq+0x144>)
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004f5a:	e043      	b.n	8004fe4 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <RCC_GetSystemClockFreq+0x148>)
 8004f5e:	607b      	str	r3, [r7, #4]
      break;
 8004f60:	e040      	b.n	8004fe4 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f62:	f7ff fe51 	bl	8004c08 <LL_RCC_HSE_IsEnabledDiv2>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <RCC_GetSystemClockFreq+0x148>)
 8004f6e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 8004f70:	e038      	b.n	8004fe4 <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <RCC_GetSystemClockFreq+0x14c>)
 8004f74:	607b      	str	r3, [r7, #4]
      break;
 8004f76:	e035      	b.n	8004fe4 <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004f78:	f000 f8aa 	bl	80050d0 <RCC_PLL_GetFreqDomain_SYS>
 8004f7c:	6078      	str	r0, [r7, #4]
      break;
 8004f7e:	e031      	b.n	8004fe4 <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f80:	f7ff fe75 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d115      	bne.n	8004fb6 <RCC_GetSystemClockFreq+0x10a>
 8004f8a:	f7ff fe70 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <RCC_GetSystemClockFreq+0xf6>
 8004f94:	f7ff fe7b 	bl	8004c8e <LL_RCC_MSI_GetRange>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	e005      	b.n	8004fae <RCC_GetSystemClockFreq+0x102>
 8004fa2:	f7ff fe7f 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	0a1b      	lsrs	r3, r3, #8
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <RCC_GetSystemClockFreq+0x144>)
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	e014      	b.n	8004fe0 <RCC_GetSystemClockFreq+0x134>
 8004fb6:	f7ff fe5a 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d106      	bne.n	8004fce <RCC_GetSystemClockFreq+0x122>
 8004fc0:	f7ff fe65 	bl	8004c8e <LL_RCC_MSI_GetRange>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	e005      	b.n	8004fda <RCC_GetSystemClockFreq+0x12e>
 8004fce:	f7ff fe69 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <RCC_GetSystemClockFreq+0x144>)
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004fe2:	bf00      	nop
  }

  return frequency;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	0801efb0 	.word	0x0801efb0
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	01e84800 	.word	0x01e84800

08004ffc <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005004:	f7ff fe65 	bl	8004cd2 <LL_RCC_GetAHBPrescaler>
 8005008:	4603      	mov	r3, r0
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <RCC_GetHCLK1ClockFreq+0x28>)
 8005012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	0801ef50 	.word	0x0801ef50

08005028 <RCC_GetHCLK2ClockFreq>:
  * @brief  Return HCLK2 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK2ClockFreq(uint32_t SYSCLK_Frequency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, LL_C2_RCC_GetAHBPrescaler());
 8005030:	f7ff fe5a 	bl	8004ce8 <LL_C2_RCC_GetAHBPrescaler>
 8005034:	4603      	mov	r3, r0
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <RCC_GetHCLK2ClockFreq+0x28>)
 800503e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	0801ef50 	.word	0x0801ef50

08005054 <RCC_GetHCLK3ClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK3 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK3ClockFreq(uint32_t SYSCLK_Frequency)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, LL_RCC_GetAHB3Prescaler());
 800505c:	f7ff fe50 	bl	8004d00 <LL_RCC_GetAHB3Prescaler>
 8005060:	4603      	mov	r3, r0
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <RCC_GetHCLK3ClockFreq+0x28>)
 800506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	0801ef50 	.word	0x0801ef50

08005080 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005088:	f7ff fe47 	bl	8004d1a <LL_RCC_GetAPB1Prescaler>
 800508c:	4603      	mov	r3, r0
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8005092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	0801ef90 	.word	0x0801ef90

080050a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80050b0:	f7ff fe3e 	bl	8004d30 <LL_RCC_GetAPB2Prescaler>
 80050b4:	4603      	mov	r3, r0
 80050b6:	0adb      	lsrs	r3, r3, #11
 80050b8:	4a04      	ldr	r2, [pc, #16]	; (80050cc <RCC_GetPCLK2ClockFreq+0x24>)
 80050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	0801ef90 	.word	0x0801ef90

080050d0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80050d6:	f7ff fe67 	bl	8004da8 <LL_RCC_PLL_GetMainSource>
 80050da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d03e      	beq.n	8005160 <RCC_PLL_GetFreqDomain_SYS+0x90>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d846      	bhi.n	8005176 <RCC_PLL_GetFreqDomain_SYS+0xa6>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d003      	beq.n	80050f6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d032      	beq.n	800515a <RCC_PLL_GetFreqDomain_SYS+0x8a>
 80050f4:	e03f      	b.n	8005176 <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80050f6:	f7ff fdba 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d115      	bne.n	800512c <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8005100:	f7ff fdb5 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005104:	4603      	mov	r3, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d106      	bne.n	8005118 <RCC_PLL_GetFreqDomain_SYS+0x48>
 800510a:	f7ff fdc0 	bl	8004c8e <LL_RCC_MSI_GetRange>
 800510e:	4603      	mov	r3, r0
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	e005      	b.n	8005124 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8005118:	f7ff fdc4 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 800511c:	4603      	mov	r3, r0
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	4a39      	ldr	r2, [pc, #228]	; (800520c <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8005126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512a:	e014      	b.n	8005156 <RCC_PLL_GetFreqDomain_SYS+0x86>
 800512c:	f7ff fd9f 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d106      	bne.n	8005144 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8005136:	f7ff fdaa 	bl	8004c8e <LL_RCC_MSI_GetRange>
 800513a:	4603      	mov	r3, r0
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	e005      	b.n	8005150 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8005144:	f7ff fdae 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005148:	4603      	mov	r3, r0
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	4a2e      	ldr	r2, [pc, #184]	; (800520c <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8005152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005156:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8005158:	e03f      	b.n	80051da <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800515a:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 800515c:	607b      	str	r3, [r7, #4]
      break;
 800515e:	e03c      	b.n	80051da <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005160:	f7ff fd52 	bl	8004c08 <LL_RCC_HSE_IsEnabledDiv2>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <RCC_PLL_GetFreqDomain_SYS+0x140>)
 800516c:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800516e:	e034      	b.n	80051da <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <RCC_PLL_GetFreqDomain_SYS+0x144>)
 8005172:	607b      	str	r3, [r7, #4]
      break;
 8005174:	e031      	b.n	80051da <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005176:	f7ff fd7a 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d115      	bne.n	80051ac <RCC_PLL_GetFreqDomain_SYS+0xdc>
 8005180:	f7ff fd75 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005184:	4603      	mov	r3, r0
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800518a:	f7ff fd80 	bl	8004c8e <LL_RCC_MSI_GetRange>
 800518e:	4603      	mov	r3, r0
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	e005      	b.n	80051a4 <RCC_PLL_GetFreqDomain_SYS+0xd4>
 8005198:	f7ff fd84 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 800519c:	4603      	mov	r3, r0
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a19      	ldr	r2, [pc, #100]	; (800520c <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	e014      	b.n	80051d6 <RCC_PLL_GetFreqDomain_SYS+0x106>
 80051ac:	f7ff fd5f 	bl	8004c6e <LL_RCC_MSI_IsEnabledRangeSelect>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d106      	bne.n	80051c4 <RCC_PLL_GetFreqDomain_SYS+0xf4>
 80051b6:	f7ff fd6a 	bl	8004c8e <LL_RCC_MSI_GetRange>
 80051ba:	4603      	mov	r3, r0
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	e005      	b.n	80051d0 <RCC_PLL_GetFreqDomain_SYS+0x100>
 80051c4:	f7ff fd6e 	bl	8004ca4 <LL_RCC_MSI_GetRangeAfterStandby>
 80051c8:	4603      	mov	r3, r0
 80051ca:	091b      	lsrs	r3, r3, #4
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	4a0e      	ldr	r2, [pc, #56]	; (800520c <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 80051d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d6:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80051d8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80051da:	f7ff fdc3 	bl	8004d64 <LL_RCC_PLL_GetN>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	fb03 f402 	mul.w	r4, r3, r2
 80051e6:	f7ff fdd4 	bl	8004d92 <LL_RCC_PLL_GetDivider>
 80051ea:	4603      	mov	r3, r0
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	3301      	adds	r3, #1
 80051f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80051f4:	f7ff fdc2 	bl	8004d7c <LL_RCC_PLL_GetR>
 80051f8:	4603      	mov	r3, r0
 80051fa:	0f5b      	lsrs	r3, r3, #29
 80051fc:	3301      	adds	r3, #1
 80051fe:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bd90      	pop	{r4, r7, pc}
 800520a:	bf00      	nop
 800520c:	0801efb0 	.word	0x0801efb0
 8005210:	00f42400 	.word	0x00f42400
 8005214:	01e84800 	.word	0x01e84800

08005218 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4313      	orrs	r3, r2
 800522e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	43db      	mvns	r3, r3
 800524c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005250:	4013      	ands	r3, r2
 8005252:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800526c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4313      	orrs	r3, r2
 8005274:	640b      	str	r3, [r1, #64]	; 0x40
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	43db      	mvns	r3, r3
 8005292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005296:	4013      	ands	r3, r2
 8005298:	640b      	str	r3, [r1, #64]	; 0x40
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr

080052d8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr

08005326 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	615a      	str	r2, [r3, #20]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
	...

080053b8 <LL_TIM_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: invalid TIMx instance
  */
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  ErrorStatus result = SUCCESS;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));

  if (TIMx == TIM1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <LL_TIM_DeInit+0x80>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <LL_TIM_DeInit+0x26>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 80053cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053d0:	f7ff ff45 	bl	800525e <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 80053d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053d8:	f7ff ff52 	bl	8005280 <LL_APB2_GRP1_ReleaseReset>
 80053dc:	e026      	b.n	800542c <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d106      	bne.n	80053f4 <LL_TIM_DeInit+0x3c>
  {
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_TIM2);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7ff ff16 	bl	8005218 <LL_APB1_GRP1_ForceReset>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_TIM2);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7ff ff24 	bl	800523a <LL_APB1_GRP1_ReleaseReset>
 80053f2:	e01b      	b.n	800542c <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM16)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <LL_TIM_DeInit+0x84>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <LL_TIM_DeInit+0x56>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM16);
 80053fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005400:	f7ff ff2d 	bl	800525e <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM16);
 8005404:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005408:	f7ff ff3a 	bl	8005280 <LL_APB2_GRP1_ReleaseReset>
 800540c:	e00e      	b.n	800542c <LL_TIM_DeInit+0x74>
  }
  else if (TIMx == TIM17)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <LL_TIM_DeInit+0x88>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <LL_TIM_DeInit+0x70>
  {
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM17);
 8005416:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800541a:	f7ff ff20 	bl	800525e <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM17);
 800541e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005422:	f7ff ff2d 	bl	8005280 <LL_APB2_GRP1_ReleaseReset>
 8005426:	e001      	b.n	800542c <LL_TIM_DeInit+0x74>
  }
  else
  {
    result = ERROR;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]
  }

  return result;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <LL_TIM_Init+0xb0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <LL_TIM_Init+0x20>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d106      	bne.n	8005472 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <LL_TIM_Init+0xb0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <LL_TIM_Init+0x4e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d007      	beq.n	8005492 <LL_TIM_Init+0x4e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <LL_TIM_Init+0xb4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <LL_TIM_Init+0x4e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <LL_TIM_Init+0xb8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d106      	bne.n	80054a0 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff06 	bl	80052be <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fef3 	bl	80052a4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <LL_TIM_Init+0xb0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <LL_TIM_Init+0x92>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a0b      	ldr	r2, [pc, #44]	; (80054f8 <LL_TIM_Init+0xb4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <LL_TIM_Init+0x92>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <LL_TIM_Init+0xb8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d105      	bne.n	80054e2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fefb 	bl	80052d8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ff58 	bl	8005398 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80054e8:	2301      	movs	r3, #1
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005516:	d045      	beq.n	80055a4 <LL_TIM_OC_Init+0xa4>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d848      	bhi.n	80055b2 <LL_TIM_OC_Init+0xb2>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005526:	d036      	beq.n	8005596 <LL_TIM_OC_Init+0x96>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552e:	d840      	bhi.n	80055b2 <LL_TIM_OC_Init+0xb2>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d027      	beq.n	8005588 <LL_TIM_OC_Init+0x88>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d838      	bhi.n	80055b2 <LL_TIM_OC_Init+0xb2>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d018      	beq.n	800557a <LL_TIM_OC_Init+0x7a>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d830      	bhi.n	80055b2 <LL_TIM_OC_Init+0xb2>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d003      	beq.n	800555e <LL_TIM_OC_Init+0x5e>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d007      	beq.n	800556c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800555c:	e029      	b.n	80055b2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f82d 	bl	80055c0 <OC1Config>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
      break;
 800556a:	e023      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f89a 	bl	80056a8 <OC2Config>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]
      break;
 8005578:	e01c      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f90b 	bl	8005798 <OC3Config>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	e015      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f97c 	bl	8005888 <OC4Config>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	e00e      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f9d5 	bl	8005948 <OC5Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]
      break;
 80055a2:	e007      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fa26 	bl	80059f8 <OC6Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]
      break;
 80055b0:	e000      	b.n	80055b4 <LL_TIM_OC_Init+0xb4>
      break;
 80055b2:	bf00      	nop
  }

  return result;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0202 	bic.w	r2, r3, #2
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0201 	bic.w	r2, r3, #1
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1e      	ldr	r2, [pc, #120]	; (800569c <OC1Config+0xdc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <OC1Config+0x76>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <OC1Config+0xe0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <OC1Config+0x76>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <OC1Config+0xe4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d11e      	bne.n	8005674 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 0208 	bic.w	r2, r3, #8
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0204 	bic.w	r2, r3, #4
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fe33 	bl	80052f2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005692:	2301      	movs	r3, #1
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0210 	bic.w	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	0212      	lsls	r2, r2, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0220 	bic.w	r2, r3, #32
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1f      	ldr	r2, [pc, #124]	; (800578c <OC2Config+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <OC2Config+0x7c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <OC2Config+0xe8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <OC2Config+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <OC2Config+0xec>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d11f      	bne.n	8005764 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	019b      	lsls	r3, r3, #6
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	019b      	lsls	r3, r3, #6
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fdc8 	bl	800530c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005782:	2301      	movs	r3, #1
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <OC3Config+0xe4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <OC3Config+0x7a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <OC3Config+0xe8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <OC3Config+0x7a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <OC3Config+0xec>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d11f      	bne.n	8005852 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	029b      	lsls	r3, r3, #10
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	015b      	lsls	r3, r3, #5
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fd5e 	bl	8005326 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005870:	2301      	movs	r3, #1
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	0212      	lsls	r2, r2, #8
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	031b      	lsls	r3, r3, #12
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	031b      	lsls	r3, r3, #12
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <OC4Config+0xb4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <OC4Config+0x7c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <OC4Config+0xb8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <OC4Config+0x7c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a11      	ldr	r2, [pc, #68]	; (8005944 <OC4Config+0xbc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d107      	bne.n	8005914 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	019b      	lsls	r3, r3, #6
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fd0a 	bl	8005340 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005932:	2301      	movs	r3, #1
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	4313      	orrs	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a13      	ldr	r2, [pc, #76]	; (80059ec <OC5Config+0xa4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <OC5Config+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a12      	ldr	r2, [pc, #72]	; (80059f0 <OC5Config+0xa8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <OC5Config+0x6c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <OC5Config+0xac>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d109      	bne.n	80059c8 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff fcc0 	bl	800535a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80059e0:	2301      	movs	r3, #1
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800

080059f8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	0212      	lsls	r2, r2, #8
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	051b      	lsls	r3, r3, #20
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <OC6Config+0xa4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <OC6Config+0x6e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <OC6Config+0xa8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <OC6Config+0x6e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a10      	ldr	r2, [pc, #64]	; (8005aa4 <OC6Config+0xac>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d109      	bne.n	8005a7a <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	029b      	lsls	r3, r3, #10
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff fc79 	bl	800537e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005a92:	2301      	movs	r3, #1
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <LL_SetSystemCoreClock+0x18>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6013      	str	r3, [r2, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	20000004 	.word	0x20000004

08005ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <EMBENET_NODE_BSP_RBI_Init>:
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
    }
}

/// @brief Initialize RF Switch
void EMBENET_NODE_BSP_RBI_Init(void) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_structure = {0};
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	611a      	str	r2, [r3, #16]

    /* Enable the Radio Switch Clock */
    RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8005b08:	2004      	movs	r0, #4
 8005b0a:	f7ff ffdb 	bl	8005ac4 <LL_AHB2_GRP1_EnableClock>
    RF_SW_CTRL2_GPIO_CLK_ENABLE();
 8005b0e:	2004      	movs	r0, #4
 8005b10:	f7ff ffd8 	bl	8005ac4 <LL_AHB2_GRP1_EnableClock>

    /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8005b14:	2310      	movs	r3, #16
 8005b16:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b20:	2303      	movs	r3, #3
 8005b22:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	480b      	ldr	r0, [pc, #44]	; (8005b58 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005b2a:	f7fd fee7 	bl	80038fc <HAL_GPIO_Init>

    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8005b2e:	2320      	movs	r3, #32
 8005b30:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4808      	ldr	r0, [pc, #32]	; (8005b58 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005b38:	f7fd fee0 	bl	80038fc <HAL_GPIO_Init>

    gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <EMBENET_NODE_BSP_RBI_Init+0x64>)
 8005b46:	f7fd fed9 	bl	80038fc <HAL_GPIO_Init>

    EMBENET_NODE_BSP_ConfigRFSwitch(EMBENET_NODE_BSP_RF_SWITCH_OFF);
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f000 f80e 	bl	8005b6c <EMBENET_NODE_BSP_ConfigRFSwitch>
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	48000800 	.word	0x48000800

08005b5c <EMBENET_NODE_BSP_GetTxOffset>:
    HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL3_PIN);
}


/// @brief Return TX offset for given RF Path
int8_t EMBENET_NODE_BSP_GetTxOffset(void) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
    return 0;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
	...

08005b6c <EMBENET_NODE_BSP_ConfigRFSwitch>:


void EMBENET_NODE_BSP_ConfigRFSwitch(EMBENET_NODE_BSP_RfSwitch pos) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
    switch (pos) {
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d84b      	bhi.n	8005c14 <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <EMBENET_NODE_BSP_ConfigRFSwitch+0x18>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005bf5 	.word	0x08005bf5
        case EMBENET_NODE_BSP_RF_SWITCH_OFF:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8005b94:	2200      	movs	r2, #0
 8005b96:	2108      	movs	r1, #8
 8005b98:	4820      	ldr	r0, [pc, #128]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005b9a:	f7fe f80f 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	481e      	ldr	r0, [pc, #120]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005ba4:	f7fe f80a 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2120      	movs	r1, #32
 8005bac:	481b      	ldr	r0, [pc, #108]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bae:	f7fe f805 	bl	8003bbc <HAL_GPIO_WritePin>
            break;
 8005bb2:	e02f      	b.n	8005c14 <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_RX:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2108      	movs	r1, #8
 8005bb8:	4818      	ldr	r0, [pc, #96]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bba:	f7fd ffff 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2110      	movs	r1, #16
 8005bc2:	4816      	ldr	r0, [pc, #88]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bc4:	f7fd fffa 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2120      	movs	r1, #32
 8005bcc:	4813      	ldr	r0, [pc, #76]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bce:	f7fd fff5 	bl	8003bbc <HAL_GPIO_WritePin>
            break;
 8005bd2:	e01f      	b.n	8005c14 <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_TX_LP:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	2108      	movs	r1, #8
 8005bd8:	4810      	ldr	r0, [pc, #64]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bda:	f7fd ffef 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8005bde:	2201      	movs	r2, #1
 8005be0:	2110      	movs	r1, #16
 8005be2:	480e      	ldr	r0, [pc, #56]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005be4:	f7fd ffea 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8005be8:	2201      	movs	r2, #1
 8005bea:	2120      	movs	r1, #32
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bee:	f7fd ffe5 	bl	8003bbc <HAL_GPIO_WritePin>
            break;
 8005bf2:	e00f      	b.n	8005c14 <EMBENET_NODE_BSP_ConfigRFSwitch+0xa8>
        case EMBENET_NODE_BSP_RF_SWITCH_TX_HP:
            HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	2108      	movs	r1, #8
 8005bf8:	4808      	ldr	r0, [pc, #32]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005bfa:	f7fd ffdf 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2110      	movs	r1, #16
 8005c02:	4806      	ldr	r0, [pc, #24]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005c04:	f7fd ffda 	bl	8003bbc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8005c08:	2201      	movs	r2, #1
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	4803      	ldr	r0, [pc, #12]	; (8005c1c <EMBENET_NODE_BSP_ConfigRFSwitch+0xb0>)
 8005c0e:	f7fd ffd5 	bl	8003bbc <HAL_GPIO_WritePin>
            break;
 8005c12:	bf00      	nop
    }
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	48000800 	.word	0x48000800

08005c20 <EMBENET_NODE_BSP_GetTxConfig>:


EMBENET_NODE_BSP_TxConfig EMBENET_NODE_BSP_GetTxConfig(void) {
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
    return EMBENET_NODE_BSP_TX_CONFIG_LP_HP;
 8005c24:	2302      	movs	r3, #2
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <LL_AHB3_GRP1_EnableClock>:
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <LL_AHB3_GRP1_DisableClock>:
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c74:	4013      	ands	r3, r2
 8005c76:	650b      	str	r3, [r1, #80]	; 0x50
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
	...

08005c84 <HAL_CRYP_MspInit>:
 * @brief CRYP MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcryp: CRYP handle pointer
 * @retval None
 */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    if (hcryp->Instance == AES) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <HAL_CRYP_MspInit+0x34>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10b      	bne.n	8005cae <HAL_CRYP_MspInit+0x2a>
        /* USER CODE BEGIN AES_MspInit 0 */

        /* USER CODE END AES_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_AES_CLK_ENABLE();
 8005c96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005c9a:	f7ff ffc8 	bl	8005c2e <LL_AHB3_GRP1_EnableClock>
        /* AES interrupt Init */
        HAL_NVIC_SetPriority(AES_IRQn, 0, 0);
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	2033      	movs	r0, #51	; 0x33
 8005ca4:	f7fc fc01 	bl	80024aa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(AES_IRQn);
 8005ca8:	2033      	movs	r0, #51	; 0x33
 8005caa:	f7fc fc18 	bl	80024de <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN AES_MspInit 1 */
        /* USER CODE END AES_MspInit 1 */
    }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	58001800 	.word	0x58001800

08005cbc <HAL_CRYP_MspDeInit>:
 * @brief CRYP MSP De-Initialization
 * This function freeze the hardware resources used in this example
 * @param hcryp: CRYP handle pointer
 * @retval None
 */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* hcryp) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
    if (hcryp->Instance == AES) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <HAL_CRYP_MspDeInit+0x28>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d106      	bne.n	8005cdc <HAL_CRYP_MspDeInit+0x20>
        /* USER CODE BEGIN AES_MspDeInit 0 */

        /* USER CODE END AES_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_AES_CLK_DISABLE();
 8005cce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005cd2:	f7ff ffc4 	bl	8005c5e <LL_AHB3_GRP1_DisableClock>

        /* AES interrupt DeInit */
        HAL_NVIC_DisableIRQ(AES_IRQn);
 8005cd6:	2033      	movs	r0, #51	; 0x33
 8005cd8:	f7fc fc0f 	bl	80024fa <HAL_NVIC_DisableIRQ>
        /* USER CODE BEGIN AES_MspDeInit 1 */
        /* Disable CRYP Interrupt */
        /* USER CODE END AES_MspDeInit 1 */
    }
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	58001800 	.word	0x58001800

08005ce8 <EMBENET_AES128_Init>:

void EMBENET_AES128_Init(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
    hcryp.Instance             = AES;
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <EMBENET_AES128_Init+0x50>)
 8005cf0:	601a      	str	r2, [r3, #0]
    hcryp.Init.DataType        = CRYP_DATATYPE_8B;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	605a      	str	r2, [r3, #4]
    hcryp.Init.KeySize         = CRYP_KEYSIZE_128B;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
    hcryp.Init.pKey            = aesKey;
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d00:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <EMBENET_AES128_Init+0x54>)
 8005d02:	60da      	str	r2, [r3, #12]
    hcryp.Init.pInitVect       = NULL;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
    hcryp.Init.Algorithm       = CRYP_AES_ECB;
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	615a      	str	r2, [r3, #20]
    hcryp.Init.DataWidthUnit   = CRYP_DATAWIDTHUNIT_BYTE;
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	62da      	str	r2, [r3, #44]	; 0x2c

    HAL_CRYP_DeInit(&hcryp);
 8005d22:	4804      	ldr	r0, [pc, #16]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d24:	f7fc fc3e 	bl	80025a4 <HAL_CRYP_DeInit>
    HAL_CRYP_Init(&hcryp);
 8005d28:	4802      	ldr	r0, [pc, #8]	; (8005d34 <EMBENET_AES128_Init+0x4c>)
 8005d2a:	f7fc fc00 	bl	800252e <HAL_CRYP_Init>
}
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000624 	.word	0x20000624
 8005d38:	58001800 	.word	0x58001800
 8005d3c:	20000730 	.word	0x20000730

08005d40 <EMBENET_AES128_SetKey>:

void EMBENET_AES128_Deinit(void) {
    HAL_CRYP_DeInit(&hcryp);
}

void EMBENET_AES128_SetKey(uint8_t const key[16U]) {
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    // HAL obtains key in native endianess (as 4 4B words)
    aesKey[0] = ((uint32_t)key[0] << 24) + ((uint32_t)key[1] << 16) + ((uint32_t)key[2] << 8) + ((uint32_t)key[3]);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	061a      	lsls	r2, r3, #24
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3301      	adds	r3, #1
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	441a      	add	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	4413      	add	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	3203      	adds	r2, #3
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <EMBENET_AES128_SetKey+0xb0>)
 8005d6c:	6013      	str	r3, [r2, #0]
    aesKey[1] = ((uint32_t)key[4] << 24) + ((uint32_t)key[5] << 16) + ((uint32_t)key[6] << 8) + ((uint32_t)key[7]);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	061a      	lsls	r2, r3, #24
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3305      	adds	r3, #5
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	441a      	add	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3306      	adds	r3, #6
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	4413      	add	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	3207      	adds	r2, #7
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <EMBENET_AES128_SetKey+0xb0>)
 8005d94:	6053      	str	r3, [r2, #4]
    aesKey[2] = ((uint32_t)key[8] << 24) + ((uint32_t)key[9] << 16) + ((uint32_t)key[10] << 8) + ((uint32_t)key[11]);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	061a      	lsls	r2, r3, #24
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3309      	adds	r3, #9
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	041b      	lsls	r3, r3, #16
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	330a      	adds	r3, #10
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	4413      	add	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	320b      	adds	r2, #11
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <EMBENET_AES128_SetKey+0xb0>)
 8005dbc:	6093      	str	r3, [r2, #8]
    aesKey[3] = ((uint32_t)key[12] << 24) + ((uint32_t)key[13] << 16) + ((uint32_t)key[14] << 8) + ((uint32_t)key[15]);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	061a      	lsls	r2, r3, #24
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	330d      	adds	r3, #13
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	441a      	add	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	330e      	adds	r3, #14
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	4413      	add	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	320f      	adds	r2, #15
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	4413      	add	r3, r2
 8005de2:	4a03      	ldr	r2, [pc, #12]	; (8005df0 <EMBENET_AES128_SetKey+0xb0>)
 8005de4:	60d3      	str	r3, [r2, #12]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	20000730 	.word	0x20000730

08005df4 <EMBENET_AES128_Encrypt>:

void EMBENET_AES128_Encrypt(uint8_t data[16U]) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	; 0x30
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
    uint32_t in[4];
    memcpy(in, data, 16);
 8005dfc:	f107 0318 	add.w	r3, r7, #24
 8005e00:	2210      	movs	r2, #16
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f016 f96e 	bl	801c0e6 <memcpy>
    uint32_t out[4];
    HAL_CRYP_Encrypt(&hcryp, in, (uint16_t)16, out, 10000);
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	f107 0118 	add.w	r1, r7, #24
 8005e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e16:	9200      	str	r2, [sp, #0]
 8005e18:	2210      	movs	r2, #16
 8005e1a:	4807      	ldr	r0, [pc, #28]	; (8005e38 <EMBENET_AES128_Encrypt+0x44>)
 8005e1c:	f7fc fbf0 	bl	8002600 <HAL_CRYP_Encrypt>
    memcpy(data, out, 16);
 8005e20:	f107 0308 	add.w	r3, r7, #8
 8005e24:	2210      	movs	r2, #16
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f016 f95c 	bl	801c0e6 <memcpy>
}
 8005e2e:	bf00      	nop
 8005e30:	3728      	adds	r7, #40	; 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000624 	.word	0x20000624

08005e3c <EMBENET_AES128_Decrypt>:

void EMBENET_AES128_Decrypt(uint8_t data[16U]) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	; 0x30
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
    uint32_t in[4];
    memcpy(in, data, 16);
 8005e44:	f107 0318 	add.w	r3, r7, #24
 8005e48:	2210      	movs	r2, #16
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f016 f94a 	bl	801c0e6 <memcpy>
    uint32_t out[4];
    HAL_CRYP_Decrypt(&hcryp, in, (uint16_t)16, out, 10000);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	f107 0118 	add.w	r1, r7, #24
 8005e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e5e:	9200      	str	r2, [sp, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	4807      	ldr	r0, [pc, #28]	; (8005e80 <EMBENET_AES128_Decrypt+0x44>)
 8005e64:	f7fc fc66 	bl	8002734 <HAL_CRYP_Decrypt>
    memcpy(data, out, 16);
 8005e68:	f107 0308 	add.w	r3, r7, #8
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f016 f938 	bl	801c0e6 <memcpy>
}
 8005e76:	bf00      	nop
 8005e78:	3728      	adds	r7, #40	; 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000624 	.word	0x20000624

08005e84 <EMBENET_CRITICAL_SECTION_Enter>:
#pragma GCC diagnostic pop

static volatile int      irqNestCounter;
static volatile uint32_t previousIrqState;

void EMBENET_CRITICAL_SECTION_Enter(void) {
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e90:	683b      	ldr	r3, [r7, #0]
    uint32_t irqState = __get_PRIMASK();
 8005e92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e94:	b672      	cpsid	i
}
 8005e96:	bf00      	nop
    __disable_irq();
    if (0 == irqNestCounter) {
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <EMBENET_CRITICAL_SECTION_Enter+0x22>
        previousIrqState = irqState;
 8005ea0:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <EMBENET_CRITICAL_SECTION_Enter+0x3c>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6013      	str	r3, [r2, #0]
    }
    ++irqNestCounter;
 8005ea6:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a03      	ldr	r2, [pc, #12]	; (8005ebc <EMBENET_CRITICAL_SECTION_Enter+0x38>)
 8005eae:	6013      	str	r3, [r2, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000740 	.word	0x20000740
 8005ec0:	20000744 	.word	0x20000744

08005ec4 <EMBENET_CRITICAL_SECTION_Exit>:


void EMBENET_CRITICAL_SECTION_Exit(void) {
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
    --irqNestCounter;
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8005ed0:	6013      	str	r3, [r2, #0]
    if (irqNestCounter < 0) {
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da02      	bge.n	8005ee0 <EMBENET_CRITICAL_SECTION_Exit+0x1c>
        irqNestCounter = 0;
 8005eda:	4b08      	ldr	r3, [pc, #32]	; (8005efc <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
    }
    if (0 == irqNestCounter && 0 == previousIrqState) {
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <EMBENET_CRITICAL_SECTION_Exit+0x38>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <EMBENET_CRITICAL_SECTION_Exit+0x30>
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <EMBENET_CRITICAL_SECTION_Exit+0x3c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <EMBENET_CRITICAL_SECTION_Exit+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 8005ef0:	b662      	cpsie	i
}
 8005ef2:	bf00      	nop
        __enable_irq();
    }
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr
 8005efc:	20000740 	.word	0x20000740
 8005f00:	20000744 	.word	0x20000744

08005f04 <EMBENET_EUI64_Get>:
#pragma GCC diagnostic pop

#include <string.h>


uint64_t EMBENET_EUI64_Get(void) {
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <EMBENET_EUI64_Get+0x20>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    uint64_t native;
    memcpy(&native, (uint8_t*)UID64_BASE, sizeof(native));
 8005f10:	e9c7 2300 	strd	r2, r3, [r7]
    return native;
 8005f14:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr
 8005f24:	1fff7580 	.word	0x1fff7580

08005f28 <__NVIC_GetPriorityGrouping>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__NVIC_GetPriorityGrouping+0x18>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	f003 0307 	and.w	r3, r3, #7
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000ed00 	.word	0xe000ed00

08005f44 <__NVIC_EnableIRQ>:
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db0b      	blt.n	8005f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	f003 021f 	and.w	r2, r3, #31
 8005f5c:	4906      	ldr	r1, [pc, #24]	; (8005f78 <__NVIC_EnableIRQ+0x34>)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2001      	movs	r0, #1
 8005f66:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr
 8005f78:	e000e100 	.word	0xe000e100

08005f7c <__NVIC_SetPriority>:
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db0a      	blt.n	8005fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	490c      	ldr	r1, [pc, #48]	; (8005fc8 <__NVIC_SetPriority+0x4c>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fa4:	e00a      	b.n	8005fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <__NVIC_SetPriority+0x50>)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	0112      	lsls	r2, r2, #4
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	440b      	add	r3, r1
 8005fba:	761a      	strb	r2, [r3, #24]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	e000e100 	.word	0xe000e100
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <NVIC_EncodePriority>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f1c3 0307 	rsb	r3, r3, #7
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	bf28      	it	cs
 8005fee:	2304      	movcs	r3, #4
 8005ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d902      	bls.n	8006000 <NVIC_EncodePriority+0x30>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3b03      	subs	r3, #3
 8005ffe:	e000      	b.n	8006002 <NVIC_EncodePriority+0x32>
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	401a      	ands	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006018:	f04f 31ff 	mov.w	r1, #4294967295
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	43d9      	mvns	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006028:	4313      	orrs	r3, r2
}
 800602a:	4618      	mov	r0, r3
 800602c:	3724      	adds	r7, #36	; 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr

08006034 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006040:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4313      	orrs	r3, r2
 800604a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006050:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4313      	orrs	r3, r2
 800607a:	644b      	str	r3, [r1, #68]	; 0x44
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	43db      	mvns	r3, r3
 8006098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800609c:	4013      	ands	r3, r2
 800609e:	644b      	str	r3, [r1, #68]	; 0x44
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
	...

080060ac <calculateFrequency>:
    RxEndOffset     = (70),
    RxStartOffset   = (1700),
};


static inline uint32_t calculateFrequency(EMBENET_RADIO_Channel channel) {
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
    uint32_t calculatedFrequency = ((uint32_t)channel * (uint32_t)Bandwidth) + (uint32_t)BaseFrequency;
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	4a05      	ldr	r2, [pc, #20]	; (80060d0 <calculateFrequency+0x24>)
 80060ba:	fb03 f202 	mul.w	r2, r3, r2
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <calculateFrequency+0x28>)
 80060c0:	4413      	add	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
    return calculatedFrequency;
 80060c4:	68fb      	ldr	r3, [r7, #12]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr
 80060d0:	000186a0 	.word	0x000186a0
 80060d4:	3371dc60 	.word	0x3371dc60

080060d8 <EMBENET_RADIO_Init>:
    {4800, 0x1F},  {5800, 0x17},  {7300, 0x0F},  {9700, 0x1E},   {11700, 0x16},  {14600, 0x0E},  {19500, 0x1D},  {23400, 0x15},  {29300, 0x0D},  {39000, 0x1C},  {46900, 0x14},
    {58600, 0x0C}, {78200, 0x1B}, {93800, 0x13}, {117300, 0x0B}, {156200, 0x1A}, {187200, 0x12}, {234300, 0x0A}, {312000, 0x19}, {373600, 0x11}, {467000, 0x09}, {500000, 0x00}, // Invalid Bandwidth
};


EMBENET_RADIO_Status EMBENET_RADIO_Init(void) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b092      	sub	sp, #72	; 0x48
 80060dc:	af00      	add	r7, sp, #0
    embenetRadioDescr = (EMBENET_RADIO_Descriptor){0};
 80060de:	4b45      	ldr	r3, [pc, #276]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80060e0:	4618      	mov	r0, r3
 80060e2:	2324      	movs	r3, #36	; 0x24
 80060e4:	461a      	mov	r2, r3
 80060e6:	2100      	movs	r1, #0
 80060e8:	f015 ff5e 	bl	801bfa8 <memset>
    __HAL_RCC_SUBGHZ_CLK_ENABLE();
 80060ec:	2001      	movs	r0, #1
 80060ee:	f7ff ffa1 	bl	8006034 <LL_APB3_GRP1_EnableClock>

    /* Force the SUBGHZ Periheral Clock Reset */
    __HAL_RCC_SUBGHZ_FORCE_RESET();
 80060f2:	2001      	movs	r0, #1
 80060f4:	f7ff ffb6 	bl	8006064 <LL_APB3_GRP1_ForceReset>

    /* Release the SUBGHZ Periheral Clock Reset */
    __HAL_RCC_SUBGHZ_RELEASE_RESET();
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7ff ffc4 	bl	8006086 <LL_APB3_GRP1_ReleaseReset>

    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_2;
 80060fe:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <EMBENET_RADIO_Init+0x120>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8006104:	483c      	ldr	r0, [pc, #240]	; (80061f8 <EMBENET_RADIO_Init+0x120>)
 8006106:	f7fd ff39 	bl	8003f7c <HAL_SUBGHZ_Init>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d000      	beq.n	8006112 <EMBENET_RADIO_Init+0x3a>
        while (1)
 8006110:	e7fe      	b.n	8006110 <EMBENET_RADIO_Init+0x38>
            ;
    }

    SUBGRF_Init(NULL);
 8006112:	2000      	movs	r0, #0
 8006114:	f000 fd18 	bl	8006b48 <SUBGRF_Init>

    // Enable SUBGHZ Radio NVIC Interrupt (it is enabled inside the radio driver, but redo this again with proper priority setting)
    NVIC_SetPriority(SUBGHZ_Radio_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), INTERRUPT_PRIORITY_RADIO, INTERRUPT_SUBPRIORITY_RADIO));
 8006118:	f7ff ff06 	bl	8005f28 <__NVIC_GetPriorityGrouping>
 800611c:	4603      	mov	r3, r0
 800611e:	2200      	movs	r2, #0
 8006120:	2103      	movs	r1, #3
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff ff54 	bl	8005fd0 <NVIC_EncodePriority>
 8006128:	4603      	mov	r3, r0
 800612a:	4619      	mov	r1, r3
 800612c:	2032      	movs	r0, #50	; 0x32
 800612e:	f7ff ff25 	bl	8005f7c <__NVIC_SetPriority>
    NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8006132:	2032      	movs	r0, #50	; 0x32
 8006134:	f7ff ff06 	bl	8005f44 <__NVIC_EnableIRQ>

    SUBGRF_SetRegulatorMode();
 8006138:	f000 fe62 	bl	8006e00 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800613c:	2100      	movs	r1, #0
 800613e:	2000      	movs	r0, #0
 8006140:	f001 f9dc 	bl	80074fc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8006144:	2204      	movs	r2, #4
 8006146:	2100      	movs	r1, #0
 8006148:	2001      	movs	r0, #1
 800614a:	f000 fff9 	bl	8007140 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_DONE | IRQ_SYNCWORD_VALID, IRQ_TX_DONE | IRQ_RX_DONE | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800614e:	2300      	movs	r3, #0
 8006150:	2200      	movs	r2, #0
 8006152:	210b      	movs	r1, #11
 8006154:	200b      	movs	r0, #11
 8006156:	f000 ff28 	bl	8006faa <SUBGRF_SetDioIrqParams>
    SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800615a:	2000      	movs	r0, #0
 800615c:	f000 fe40 	bl	8006de0 <SUBGRF_SetStopRxTimerOnPreambleDetect>

    embenetRadioDescr.packetParams.PacketType = PACKET_TYPE_GFSK;
 8006160:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 8006162:	2200      	movs	r2, #0
 8006164:	731a      	strb	r2, [r3, #12]

    SUBGRF_SetPacketType(embenetRadioDescr.packetParams.PacketType);
 8006166:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 8006168:	7b1b      	ldrb	r3, [r3, #12]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 ffc2 	bl	80070f4 <SUBGRF_SetPacketType>

    uint8_t syncWordBuffer[8] = {(uint8_t)(SYNC_WORD >> 8U), (uint8_t)(SYNC_WORD)};
 8006170:	f644 6390 	movw	r3, #20112	; 0x4e90
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	2300      	movs	r3, #0
 8006178:	623b      	str	r3, [r7, #32]
    SUBGRF_SetSyncWord(syncWordBuffer);
 800617a:	f107 031c 	add.w	r3, r7, #28
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fd2e 	bl	8006be0 <SUBGRF_SetSyncWord>


    ModulationParams_t modulationParams;
    modulationParams.PacketType                    = PACKET_TYPE_GFSK;
 8006184:	2300      	movs	r3, #0
 8006186:	703b      	strb	r3, [r7, #0]
    modulationParams.Params.Gfsk.BitRate           = BITRATE;
 8006188:	f24c 3350 	movw	r3, #50000	; 0xc350
 800618c:	607b      	str	r3, [r7, #4]
    modulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_OFF;
 800618e:	2300      	movs	r3, #0
 8006190:	733b      	strb	r3, [r7, #12]
    modulationParams.Params.Gfsk.Bandwidth         = getFskBandwidthRegValue(Bandwidth);
 8006192:	481a      	ldr	r0, [pc, #104]	; (80061fc <EMBENET_RADIO_Init+0x124>)
 8006194:	f000 f978 	bl	8006488 <getFskBandwidthRegValue>
 8006198:	4603      	mov	r3, r0
 800619a:	737b      	strb	r3, [r7, #13]
    modulationParams.Params.Gfsk.Fdev              = FREQ_DEVIATION;
 800619c:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80061a0:	60bb      	str	r3, [r7, #8]
    SUBGRF_SetModulationParams(&modulationParams);
 80061a2:	463b      	mov	r3, r7
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 f831 	bl	800720c <SUBGRF_SetModulationParams>

    embenetRadioDescr.packetParams.Params.Gfsk.PreambleLength    = PREAMBLE_LENGTH_BITS;
 80061aa:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	81da      	strh	r2, [r3, #14]
    embenetRadioDescr.packetParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_16_BITS;
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061b2:	2205      	movs	r2, #5
 80061b4:	741a      	strb	r2, [r3, #16]
    embenetRadioDescr.packetParams.Params.Gfsk.SyncWordLength    = SYNCWORD_LENGTH_BITS;
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061b8:	2210      	movs	r2, #16
 80061ba:	745a      	strb	r2, [r3, #17]
    embenetRadioDescr.packetParams.Params.Gfsk.AddrComp          = RADIO_ADDRESSCOMP_FILT_OFF;
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	749a      	strb	r2, [r3, #18]
    embenetRadioDescr.packetParams.Params.Gfsk.HeaderType        = RADIO_PACKET_VARIABLE_LENGTH;
 80061c2:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	74da      	strb	r2, [r3, #19]
    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength     = EMBENET_RADIO_MAX_PSDU_LENGTH;
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061ca:	22c0      	movs	r2, #192	; 0xc0
 80061cc:	751a      	strb	r2, [r3, #20]
    embenetRadioDescr.packetParams.Params.Gfsk.CrcLength         = RADIO_CRC_2_BYTES_CCIT;
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061d0:	22f2      	movs	r2, #242	; 0xf2
 80061d2:	755a      	strb	r2, [r3, #21]
    embenetRadioDescr.packetParams.Params.Gfsk.DcFree            = RADIO_DC_FREEWHITENING;
 80061d4:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <EMBENET_RADIO_Init+0x11c>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	759a      	strb	r2, [r3, #22]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 80061da:	4809      	ldr	r0, [pc, #36]	; (8006200 <EMBENET_RADIO_Init+0x128>)
 80061dc:	f001 f8f0 	bl	80073c0 <SUBGRF_SetPacketParams>

    // Fall-back mode after successfull packet transmission or packet reception
    // 0x20 - Standby mode entry (default)
    // 0x30 - Standby with HSE32 enabled mode entry
    // 0x40 - FS mode entry
    SUBGRF_SetRxTxFallbackMode(0x40);
 80061e0:	2040      	movs	r0, #64	; 0x40
 80061e2:	f000 fed3 	bl	8006f8c <SUBGRF_SetRxTxFallbackMode>

    EMBENET_RADIO_Idle();
 80061e6:	f000 f823 	bl	8006230 <EMBENET_RADIO_Idle>

    return EMBENET_RADIO_STATUS_SUCCESS;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3748      	adds	r7, #72	; 0x48
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000754 	.word	0x20000754
 80061f8:	20000748 	.word	0x20000748
 80061fc:	000186a0 	.word	0x000186a0
 8006200:	20000760 	.word	0x20000760

08006204 <EMBENET_RADIO_SetCallbacks>:

void EMBENET_RADIO_SetCallbacks(EMBENET_RADIO_CaptureCbt onStartFrame, EMBENET_RADIO_CaptureCbt onEndFrame, void* cbtContext) {
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
    embenetRadioDescr.onFrameStart    = onStartFrame;
 8006210:	4a06      	ldr	r2, [pc, #24]	; (800622c <EMBENET_RADIO_SetCallbacks+0x28>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6013      	str	r3, [r2, #0]
    embenetRadioDescr.onFrameEnd      = onEndFrame;
 8006216:	4a05      	ldr	r2, [pc, #20]	; (800622c <EMBENET_RADIO_SetCallbacks+0x28>)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6053      	str	r3, [r2, #4]
    embenetRadioDescr.handlersContext = cbtContext;
 800621c:	4a03      	ldr	r2, [pc, #12]	; (800622c <EMBENET_RADIO_SetCallbacks+0x28>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6093      	str	r3, [r2, #8]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	20000754 	.word	0x20000754

08006230 <EMBENET_RADIO_Idle>:
void EMBENET_RADIO_Deinit(void) {
    embenetRadioDescr.onFrameStart = NULL;
    embenetRadioDescr.onFrameEnd   = NULL;
}

EMBENET_RADIO_Status EMBENET_RADIO_Idle(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
    SUBGRF_SetFs();
 8006234:	f000 fd86 	bl	8006d44 <SUBGRF_SetFs>

    // SUBGRF_SetStandby(STDBY_RC);
    SUBGRF_SetStandby(STDBY_XOSC);
 8006238:	2001      	movs	r0, #1
 800623a:	f000 fd67 	bl	8006d0c <SUBGRF_SetStandby>


    return EMBENET_RADIO_STATUS_SUCCESS;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}

08006244 <EMBENET_RADIO_TxEnable>:

EMBENET_RADIO_Status EMBENET_RADIO_TxEnable(EMBENET_RADIO_Channel channel, EMBENET_RADIO_Power txp, uint8_t const* psdu, size_t psduLen) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60ba      	str	r2, [r7, #8]
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	460b      	mov	r3, r1
 8006254:	73bb      	strb	r3, [r7, #14]
    SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	f240 2101 	movw	r1, #513	; 0x201
 800625e:	f240 2001 	movw	r0, #513	; 0x201
 8006262:	f000 fea2 	bl	8006faa <SUBGRF_SetDioIrqParams>
    setPower(txp);
 8006266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 f8f0 	bl	8006450 <setPower>
    SUBGRF_SetRfFrequency(calculateFrequency(channel));
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff ff1a 	bl	80060ac <calculateFrequency>
 8006278:	4603      	mov	r3, r0
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fef0 	bl	8007060 <SUBGRF_SetRfFrequency>

    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength = (uint8_t)psduLen;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <EMBENET_RADIO_TxEnable+0x64>)
 8006286:	751a      	strb	r2, [r3, #20]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 8006288:	4808      	ldr	r0, [pc, #32]	; (80062ac <EMBENET_RADIO_TxEnable+0x68>)
 800628a:	f001 f899 	bl	80073c0 <SUBGRF_SetPacketParams>

    // warning suppress with casting
    SUBGRF_WriteBuffer(0x00, (uint8_t*)psdu, (uint8_t)psduLen);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	2000      	movs	r0, #0
 8006298:	f001 fa16 	bl	80076c8 <SUBGRF_WriteBuffer>
    return EMBENET_RADIO_STATUS_SUCCESS;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000754 	.word	0x20000754
 80062ac:	20000760 	.word	0x20000760

080062b0 <EMBENET_RADIO_TxNow>:

EMBENET_RADIO_Status EMBENET_RADIO_TxNow(void) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
    EMBENET_TimeUs timestamp = EMBENET_TIMER_ReadCounter() + TxStartOffset;
 80062b6:	f000 fc13 	bl	8006ae0 <EMBENET_TIMER_ReadCounter>
 80062ba:	4603      	mov	r3, r0
 80062bc:	33c8      	adds	r3, #200	; 0xc8
 80062be:	607b      	str	r3, [r7, #4]


    SUBGRF_SetTx(0);
 80062c0:	2000      	movs	r0, #0
 80062c2:	f000 fd4d 	bl	8006d60 <SUBGRF_SetTx>

    if (embenetRadioDescr.onFrameStart) {
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <EMBENET_RADIO_TxNow+0x38>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <EMBENET_RADIO_TxNow+0x2c>
        embenetRadioDescr.onFrameStart(embenetRadioDescr.handlersContext, timestamp);
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <EMBENET_RADIO_TxNow+0x38>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a05      	ldr	r2, [pc, #20]	; (80062e8 <EMBENET_RADIO_TxNow+0x38>)
 80062d4:	6892      	ldr	r2, [r2, #8]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
    }


    return EMBENET_RADIO_STATUS_SUCCESS;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000754 	.word	0x20000754

080062ec <EMBENET_RADIO_RxEnable>:

EMBENET_RADIO_Status EMBENET_RADIO_RxEnable(EMBENET_RADIO_Channel channel) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
    embenetRadioDescr.frameReady      = false;
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <EMBENET_RADIO_RxEnable+0x48>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2020 	strb.w	r2, [r3, #32]
    embenetRadioDescr.frameCrcIsValid = false;
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <EMBENET_RADIO_RxEnable+0x48>)
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    embenetRadioDescr.packetParams.Params.Gfsk.PayloadLength = (uint8_t)EMBENET_RADIO_MAX_PSDU_LENGTH;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <EMBENET_RADIO_RxEnable+0x48>)
 8006308:	22c0      	movs	r2, #192	; 0xc0
 800630a:	751a      	strb	r2, [r3, #20]
    SUBGRF_SetPacketParams(&embenetRadioDescr.packetParams);
 800630c:	480a      	ldr	r0, [pc, #40]	; (8006338 <EMBENET_RADIO_RxEnable+0x4c>)
 800630e:	f001 f857 	bl	80073c0 <SUBGRF_SetPacketParams>
    SUBGRF_SetSwitch(0, RFSWITCH_RX);
 8006312:	2100      	movs	r1, #0
 8006314:	2000      	movs	r0, #0
 8006316:	f001 fa2b 	bl	8007770 <SUBGRF_SetSwitch>
    SUBGRF_SetRfFrequency(calculateFrequency(channel));
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fec5 	bl	80060ac <calculateFrequency>
 8006322:	4603      	mov	r3, r0
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fe9b 	bl	8007060 <SUBGRF_SetRfFrequency>
    return EMBENET_RADIO_STATUS_SUCCESS;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000754 	.word	0x20000754
 8006338:	20000760 	.word	0x20000760

0800633c <EMBENET_RADIO_RxNow>:

EMBENET_RADIO_Status EMBENET_RADIO_RxNow(void) {
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
    /* Radio IRQ is set to DIO1 by default */
    SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_SYNCWORD_VALID | IRQ_CRC_ERROR, IRQ_RX_DONE | IRQ_SYNCWORD_VALID | IRQ_CRC_ERROR, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8006340:	2300      	movs	r3, #0
 8006342:	2200      	movs	r2, #0
 8006344:	214a      	movs	r1, #74	; 0x4a
 8006346:	204a      	movs	r0, #74	; 0x4a
 8006348:	f000 fe2f 	bl	8006faa <SUBGRF_SetDioIrqParams>
    SUBGRF_SetRx(0xFFFFFF);
 800634c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006350:	f000 fd26 	bl	8006da0 <SUBGRF_SetRx>

    return EMBENET_RADIO_STATUS_SUCCESS;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <EMBENET_RADIO_GetReceivedFrame>:

EMBENET_RADIO_RxInfo EMBENET_RADIO_GetReceivedFrame(uint8_t* buffer, size_t bufferLength) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	; 0x38
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
    EMBENET_RADIO_RxInfo info = {.crcValid = false, .lqi = 0, .mpduLength = 0, .rssi = INT8_MIN};
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800636e:	2300      	movs	r3, #0
 8006370:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006374:	2300      	movs	r3, #0
 8006376:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800637a:	2300      	movs	r3, #0
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
    if (embenetRadioDescr.frameReady) {
 800637e:	4b2e      	ldr	r3, [pc, #184]	; (8006438 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 8006380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d04a      	beq.n	800641e <EMBENET_RADIO_GetReceivedFrame+0xc2>
        PacketStatus_t radioPktStatus;
        SUBGRF_GetPacketStatus(&radioPktStatus);
 8006388:	f107 0318 	add.w	r3, r7, #24
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f8f9 	bl	8007584 <SUBGRF_GetPacketStatus>
        info.lqi      = radioPktStatus.Params.Gfsk.RxStatus;
 8006392:	7f3b      	ldrb	r3, [r7, #28]
 8006394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        info.rssi     = radioPktStatus.Params.Gfsk.RssiAvg;
 8006398:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800639c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        info.crcValid = embenetRadioDescr.frameCrcIsValid;
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 80063a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        uint8_t offset = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
        uint8_t length = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75bb      	strb	r3, [r7, #22]
        SUBGRF_GetRxBufferStatus(&length, &offset);
 80063b2:	f107 0217 	add.w	r2, r7, #23
 80063b6:	f107 0316 	add.w	r3, r7, #22
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f8b5 	bl	800752c <SUBGRF_GetRxBufferStatus>
        info.mpduLength = length;
 80063c2:	7dbb      	ldrb	r3, [r7, #22]
 80063c4:	633b      	str	r3, [r7, #48]	; 0x30

        uint8_t bytesCountToCopy = length; // best case, no error
 80063c6:	7dbb      	ldrb	r3, [r7, #22]
 80063c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (length > EMBENET_RADIO_MAX_PSDU_LENGTH) {
 80063cc:	7dbb      	ldrb	r3, [r7, #22]
 80063ce:	2bc0      	cmp	r3, #192	; 0xc0
 80063d0:	d905      	bls.n	80063de <EMBENET_RADIO_GetReceivedFrame+0x82>
            // frame too long
            info.crcValid    = false;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            bytesCountToCopy = EMBENET_RADIO_MAX_PSDU_LENGTH;
 80063d8:	23c0      	movs	r3, #192	; 0xc0
 80063da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (length > bufferLength) {
 80063de:	7dbb      	ldrb	r3, [r7, #22]
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d205      	bcs.n	80063f4 <EMBENET_RADIO_GetReceivedFrame+0x98>
            // frame wont fit into buffer
            info.crcValid    = false;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            bytesCountToCopy = (uint8_t)bufferLength; // uint8_t overflow not possible
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (length < EMBENET_RADIO_MIN_PSDU_LENGTH) {
 80063f4:	7dbb      	ldrb	r3, [r7, #22]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <EMBENET_RADIO_GetReceivedFrame+0xa4>
            // frame too short
            info.crcValid = false;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        SUBGRF_ReadBuffer(offset, buffer, bytesCountToCopy);
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f973 	bl	80076f4 <SUBGRF_ReadBuffer>
        // no buffering, frame may be obtained only once
        embenetRadioDescr.frameReady      = false;
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2020 	strb.w	r2, [r3, #32]
        embenetRadioDescr.frameCrcIsValid = false;
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <EMBENET_RADIO_GetReceivedFrame+0xdc>)
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    return info;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	461a      	mov	r2, r3
 8006422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800642a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	3738      	adds	r7, #56	; 0x38
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000754 	.word	0x20000754

0800643c <EMBENET_RADIO_GetCapabilities>:
        default: return EMBENET_RADIO_STATUS_GENERAL_ERROR;
    }
    return EMBENET_RADIO_STATUS_SUCCESS;
}

EMBENET_RADIO_Capabilities const* EMBENET_RADIO_GetCapabilities(void) {
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
                                                 .rxDelay         = RxDelay,
                                                 .txRxStartDelay  = RxStartOffset,
                                                 .sensitivity     = Sensitivity,
                                                 .maxOutputPower  = MaxTxp,
                                                 .minOutputPower  = MinTxp};
    return &timings;
 8006440:	4b02      	ldr	r3, [pc, #8]	; (800644c <EMBENET_RADIO_GetCapabilities+0x10>)
}
 8006442:	4618      	mov	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000010 	.word	0x20000010

08006450 <setPower>:


static void setPower(EMBENET_RADIO_Power powerDbm) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect = SUBGRF_SetRfTxPower((int8_t)(powerDbm + EMBENET_NODE_BSP_GetTxOffset()));
 800645a:	f7ff fb7f 	bl	8005b5c <EMBENET_NODE_BSP_GetTxOffset>
 800645e:	4603      	mov	r3, r0
 8006460:	b2da      	uxtb	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4413      	add	r3, r2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	b25b      	sxtb	r3, r3
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f9a8 	bl	80077c0 <SUBGRF_SetRfTxPower>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch(paSelect, RFSWITCH_TX);
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2101      	movs	r1, #1
 8006478:	4618      	mov	r0, r3
 800647a:	f001 f979 	bl	8007770 <SUBGRF_SetSwitch>
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <getFskBandwidthRegValue>:

static uint8_t getFskBandwidthRegValue(uint32_t bandwidth) {
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (bandwidth == 0) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <getFskBandwidthRegValue+0x12>
        return (0x1FU);
 8006496:	231f      	movs	r3, #31
 8006498:	e023      	b.n	80064e2 <getFskBandwidthRegValue+0x5a>
    }
    uint32_t delta = 1;
 800649a:	2301      	movs	r3, #1
 800649c:	60bb      	str	r3, [r7, #8]
    while (delta < 20000) {
 800649e:	e01a      	b.n	80064d6 <getFskBandwidthRegValue+0x4e>
        for (i = 0; i < (sizeof(fskBandwidths) / sizeof(FskBandwidth)); i++) {
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e011      	b.n	80064ca <getFskBandwidthRegValue+0x42>
            if (bandwidth - fskBandwidths[i].bandwidth < delta) {
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	4a10      	ldr	r2, [pc, #64]	; (80064ec <getFskBandwidthRegValue+0x64>)
 80064aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d905      	bls.n	80064c4 <getFskBandwidthRegValue+0x3c>
                return fskBandwidths[i].RegValue;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	4a0c      	ldr	r2, [pc, #48]	; (80064ec <getFskBandwidthRegValue+0x64>)
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	791b      	ldrb	r3, [r3, #4]
 80064c2:	e00e      	b.n	80064e2 <getFskBandwidthRegValue+0x5a>
        for (i = 0; i < (sizeof(fskBandwidths) / sizeof(FskBandwidth)); i++) {
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	3301      	adds	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	2b15      	cmp	r3, #21
 80064ce:	d9ea      	bls.n	80064a6 <getFskBandwidthRegValue+0x1e>
            }
        }
        delta++;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60bb      	str	r3, [r7, #8]
    while (delta < 20000) {
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80064dc:	4293      	cmp	r3, r2
 80064de:	d9df      	bls.n	80064a0 <getFskBandwidthRegValue+0x18>
    }
    return 0x1FU;
 80064e0:	231f      	movs	r3, #31
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	0801f0ac 	.word	0x0801f0ac

080064f0 <SUBGHZ_Radio_IRQHandler>:


void SUBGHZ_Radio_IRQHandler(void) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
    EMBENET_TimeUs timestamp = EMBENET_TIMER_ReadCounter();
 80064f6:	f000 faf3 	bl	8006ae0 <EMBENET_TIMER_ReadCounter>
 80064fa:	6078      	str	r0, [r7, #4]

    uint8_t tmpisr[2];
    // Retrieve Interrupts from SUBGHZ Irq Register
    (void)HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80064fc:	463a      	mov	r2, r7
 80064fe:	2302      	movs	r3, #2
 8006500:	2112      	movs	r1, #18
 8006502:	483d      	ldr	r0, [pc, #244]	; (80065f8 <SUBGHZ_Radio_IRQHandler+0x108>)
 8006504:	f7fd fec6 	bl	8004294 <HAL_SUBGHZ_ExecGetCmd>

    uint16_t itsource = (uint16_t)((tmpisr[0] << 8) | tmpisr[1]);
 8006508:	783b      	ldrb	r3, [r7, #0]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	b21a      	sxth	r2, r3
 800650e:	787b      	ldrb	r3, [r7, #1]
 8006510:	b21b      	sxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b21b      	sxth	r3, r3
 8006516:	807b      	strh	r3, [r7, #2]
    (void)HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006518:	463a      	mov	r2, r7
 800651a:	2302      	movs	r3, #2
 800651c:	2102      	movs	r1, #2
 800651e:	4836      	ldr	r0, [pc, #216]	; (80065f8 <SUBGHZ_Radio_IRQHandler+0x108>)
 8006520:	f7fd fe59 	bl	80041d6 <HAL_SUBGHZ_ExecSetCmd>


    // sync word detection has an utmost priority
    if (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID)) {
 8006524:	887b      	ldrh	r3, [r7, #2]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <SUBGHZ_Radio_IRQHandler+0x5c>
        if (embenetRadioDescr.onFrameStart != NULL) {
 800652e:	4b33      	ldr	r3, [pc, #204]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <SUBGHZ_Radio_IRQHandler+0x5c>
            timestamp = timestamp - (EMBENET_TimeUs)RxStartOffset;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 800653c:	607b      	str	r3, [r7, #4]
            embenetRadioDescr.onFrameStart(embenetRadioDescr.handlersContext, timestamp);
 800653e:	4b2f      	ldr	r3, [pc, #188]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2e      	ldr	r2, [pc, #184]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006544:	6892      	ldr	r2, [r2, #8]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
        }
    }
    if (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT)) {
 800654c:	887b      	ldrh	r3, [r7, #2]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <SUBGHZ_Radio_IRQHandler+0x7c>
        if (embenetRadioDescr.onFrameEnd != NULL) {
 8006556:	4b29      	ldr	r3, [pc, #164]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <SUBGHZ_Radio_IRQHandler+0x7c>
            embenetRadioDescr.onFrameEnd(embenetRadioDescr.handlersContext, timestamp);
 800655e:	4b27      	ldr	r3, [pc, #156]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a26      	ldr	r2, [pc, #152]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006564:	6892      	ldr	r2, [r2, #8]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
        }
    }
    if ((SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR)) || (SET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT))) {
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <SUBGHZ_Radio_IRQHandler+0x90>
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d036      	beq.n	80065ee <SUBGHZ_Radio_IRQHandler+0xfe>
        if (false == embenetRadioDescr.frameReady) {
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 8006582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02e      	beq.n	80065ee <SUBGHZ_Radio_IRQHandler+0xfe>
            embenetRadioDescr.frameCrcIsValid = (RESET == SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR));
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	4b16      	ldr	r3, [pc, #88]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 80065a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            embenetRadioDescr.frameReady      = true;
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2020 	strb.w	r2, [r3, #32]

            if (embenetRadioDescr.onFrameEnd != NULL) {
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <SUBGHZ_Radio_IRQHandler+0xda>
                timestamp = timestamp - (EMBENET_TimeUs)RxEndOffset;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3b46      	subs	r3, #70	; 0x46
 80065ba:	607b      	str	r3, [r7, #4]
                embenetRadioDescr.onFrameEnd(embenetRadioDescr.handlersContext, timestamp);
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <SUBGHZ_Radio_IRQHandler+0x10c>)
 80065c2:	6892      	ldr	r2, [r2, #8]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
            }
            // WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2
            // datasheet chapter 15.3 RegRtcControl = @address 0x0902
            SUBGRF_WriteRegister(0x0902, 0x00);
 80065ca:	2100      	movs	r1, #0
 80065cc:	f640 1002 	movw	r0, #2306	; 0x902
 80065d0:	f001 f82a 	bl	8007628 <SUBGRF_WriteRegister>
            // RegEventMask = @address 0x0944
            SUBGRF_WriteRegister(0x0944, SUBGRF_ReadRegister(0x0944) | (1 << 1));
 80065d4:	f640 1044 	movw	r0, #2372	; 0x944
 80065d8:	f001 f83a 	bl	8007650 <SUBGRF_ReadRegister>
 80065dc:	4603      	mov	r3, r0
 80065de:	f043 0302 	orr.w	r3, r3, #2
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	4619      	mov	r1, r3
 80065e6:	f640 1044 	movw	r0, #2372	; 0x944
 80065ea:	f001 f81d 	bl	8007628 <SUBGRF_WriteRegister>
            // WORKAROUND END
        }
    }
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000748 	.word	0x20000748
 80065fc:	20000754 	.word	0x20000754

08006600 <EMBENET_RANDOM_Get>:
#include "radio_driver.h"

#pragma GCC diagnostic pop


uint32_t EMBENET_RANDOM_Get(void) {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
    // Get random value from radio transceiver. This function is guaranteed to be invoked AFTER radio initialization
    return SUBGRF_GetRandom(); 
 8006604:	f000 fb3b 	bl	8006c7e <SUBGRF_GetRandom>
 8006608:	4603      	mov	r3, r0
}
 800660a:	4618      	mov	r0, r3
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <__NVIC_GetPriorityGrouping>:
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <__NVIC_GetPriorityGrouping+0x18>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	f003 0307 	and.w	r3, r3, #7
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	e000ed00 	.word	0xe000ed00

0800662c <__NVIC_EnableIRQ>:
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663a:	2b00      	cmp	r3, #0
 800663c:	db0b      	blt.n	8006656 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	f003 021f 	and.w	r2, r3, #31
 8006644:	4906      	ldr	r1, [pc, #24]	; (8006660 <__NVIC_EnableIRQ+0x34>)
 8006646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	2001      	movs	r0, #1
 800664e:	fa00 f202 	lsl.w	r2, r0, r2
 8006652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	e000e100 	.word	0xe000e100

08006664 <__NVIC_ClearPendingIRQ>:
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	2b00      	cmp	r3, #0
 8006674:	db0c      	blt.n	8006690 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	f003 021f 	and.w	r2, r3, #31
 800667c:	4907      	ldr	r1, [pc, #28]	; (800669c <__NVIC_ClearPendingIRQ+0x38>)
 800667e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2001      	movs	r0, #1
 8006686:	fa00 f202 	lsl.w	r2, r0, r2
 800668a:	3360      	adds	r3, #96	; 0x60
 800668c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	e000e100 	.word	0xe000e100

080066a0 <__NVIC_SetPriority>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	db0a      	blt.n	80066ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	490c      	ldr	r1, [pc, #48]	; (80066ec <__NVIC_SetPriority+0x4c>)
 80066ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066be:	0112      	lsls	r2, r2, #4
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	440b      	add	r3, r1
 80066c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066c8:	e00a      	b.n	80066e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4908      	ldr	r1, [pc, #32]	; (80066f0 <__NVIC_SetPriority+0x50>)
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	3b04      	subs	r3, #4
 80066d8:	0112      	lsls	r2, r2, #4
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	440b      	add	r3, r1
 80066de:	761a      	strb	r2, [r3, #24]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	e000e100 	.word	0xe000e100
 80066f0:	e000ed00 	.word	0xe000ed00

080066f4 <NVIC_EncodePriority>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b089      	sub	sp, #36	; 0x24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f1c3 0307 	rsb	r3, r3, #7
 800670e:	2b04      	cmp	r3, #4
 8006710:	bf28      	it	cs
 8006712:	2304      	movcs	r3, #4
 8006714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3304      	adds	r3, #4
 800671a:	2b06      	cmp	r3, #6
 800671c:	d902      	bls.n	8006724 <NVIC_EncodePriority+0x30>
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	3b03      	subs	r3, #3
 8006722:	e000      	b.n	8006726 <NVIC_EncodePriority+0x32>
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43da      	mvns	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	401a      	ands	r2, r3
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800673c:	f04f 31ff 	mov.w	r1, #4294967295
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	43d9      	mvns	r1, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800674c:	4313      	orrs	r3, r2
}
 800674e:	4618      	mov	r0, r3
 8006750:	3724      	adds	r7, #36	; 0x24
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <LL_APB1_GRP1_EnableClock>:
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006764:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4313      	orrs	r3, r2
 800676e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <LL_TIM_EnableCounter>:
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f043 0201 	orr.w	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	601a      	str	r2, [r3, #0]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <LL_TIM_DisableARRPreload>:
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <LL_TIM_GetCounter>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
	...

080067dc <LL_TIM_OC_DisableFast>:
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d028      	beq.n	800683e <LL_TIM_OC_DisableFast+0x62>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d023      	beq.n	800683a <LL_TIM_OC_DisableFast+0x5e>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d01e      	beq.n	8006836 <LL_TIM_OC_DisableFast+0x5a>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d019      	beq.n	8006832 <LL_TIM_OC_DisableFast+0x56>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006804:	d013      	beq.n	800682e <LL_TIM_OC_DisableFast+0x52>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680c:	d00d      	beq.n	800682a <LL_TIM_OC_DisableFast+0x4e>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006814:	d007      	beq.n	8006826 <LL_TIM_OC_DisableFast+0x4a>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d101      	bne.n	8006822 <LL_TIM_OC_DisableFast+0x46>
 800681e:	2307      	movs	r3, #7
 8006820:	e00e      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 8006822:	2308      	movs	r3, #8
 8006824:	e00c      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 8006826:	2306      	movs	r3, #6
 8006828:	e00a      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 800682a:	2305      	movs	r3, #5
 800682c:	e008      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 800682e:	2304      	movs	r3, #4
 8006830:	e006      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 8006832:	2303      	movs	r3, #3
 8006834:	e004      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 8006836:	2302      	movs	r3, #2
 8006838:	e002      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <LL_TIM_OC_DisableFast+0x64>
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3318      	adds	r3, #24
 8006846:	4619      	mov	r1, r3
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <LL_TIM_OC_DisableFast+0x98>)
 800684c:	5cd3      	ldrb	r3, [r2, r3]
 800684e:	440b      	add	r3, r1
 8006850:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <LL_TIM_OC_DisableFast+0x9c>)
 800685a:	5ccb      	ldrb	r3, [r1, r3]
 800685c:	4619      	mov	r1, r3
 800685e:	2304      	movs	r3, #4
 8006860:	408b      	lsls	r3, r1
 8006862:	43db      	mvns	r3, r3
 8006864:	401a      	ands	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	0801f15c 	.word	0x0801f15c
 8006878:	0801f168 	.word	0x0801f168

0800687c <LL_TIM_OC_SetCompareCH1>:
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <LL_TIM_SetClockSource>:
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	609a      	str	r2, [r3, #8]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <LL_TIM_SetTriggerOutput>:
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	605a      	str	r2, [r3, #4]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <LL_TIM_DisableMasterSlaveMode>:
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <LL_TIM_ClearFlag_CC1>:
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f06f 0202 	mvn.w	r2, #2
 800690e:	611a      	str	r2, [r3, #16]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	bc80      	pop	{r7}
 8006918:	4770      	bx	lr

0800691a <LL_TIM_IsActiveFlag_CC1>:
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d101      	bne.n	8006932 <LL_TIM_IsActiveFlag_CC1+0x18>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <LL_TIM_EnableIT_CC1>:
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f043 0202 	orr.w	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60da      	str	r2, [r3, #12]
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <LL_TIM_DisableIT_CC1>:
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f023 0202 	bic.w	r2, r3, #2
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <LL_TIM_GenerateEvent_CC1>:
  * @rmtoll EGR          CC1G          LL_TIM_GenerateEvent_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f043 0202 	orr.w	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	615a      	str	r2, [r3, #20]
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr

08006998 <EMBENET_TIMER_Init>:
};

static EMBENET_TIMER_CompareCallback callback;
static void*                         callbackContext;

void EMBENET_TIMER_Init(EMBENET_TIMER_CompareCallback compareCallback, void* context) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b096      	sub	sp, #88	; 0x58
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
    LL_TIM_DeInit(TIM2); // Make sure the timer is deinitialized and reset to default values
 80069a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80069a6:	f7fe fd07 	bl	80053b8 <LL_TIM_DeInit>

    callback        = compareCallback;
 80069aa:	4a32      	ldr	r2, [pc, #200]	; (8006a74 <EMBENET_TIMER_Init+0xdc>)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6013      	str	r3, [r2, #0]
    callbackContext = context;
 80069b0:	4a31      	ldr	r2, [pc, #196]	; (8006a78 <EMBENET_TIMER_Init+0xe0>)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6013      	str	r3, [r2, #0]

    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80069b6:	2001      	movs	r0, #1
 80069b8:	f7ff fece 	bl	8006758 <LL_APB1_GRP1_EnableClock>
    NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), INTERRUPT_PRIORITY_TIMER, INTERRUPT_SUBPRIORITY_TIMER));
 80069bc:	f7ff fe28 	bl	8006610 <__NVIC_GetPriorityGrouping>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2201      	movs	r2, #1
 80069c4:	2103      	movs	r1, #3
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fe94 	bl	80066f4 <NVIC_EncodePriority>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4619      	mov	r1, r3
 80069d0:	201b      	movs	r0, #27
 80069d2:	f7ff fe65 	bl	80066a0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 80069d6:	201b      	movs	r0, #27
 80069d8:	f7ff fe28 	bl	800662c <__NVIC_EnableIRQ>

    LL_RCC_ClocksTypeDef clocks;
    LL_RCC_GetSystemClocksFreq(&clocks);
 80069dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe f9ec 	bl	8004dbe <LL_RCC_GetSystemClocksFreq>
    LL_TIM_InitTypeDef TIM_InitStruct = {.CounterMode       = LL_TIM_COUNTERMODE_UP,
                                         .Prescaler         = (uint16_t)(clocks.SYSCLK_Frequency / TICKS_PER_S - 1U),
 80069e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e8:	4a24      	ldr	r2, [pc, #144]	; (8006a7c <EMBENET_TIMER_Init+0xe4>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0bdb      	lsrs	r3, r3, #15
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29b      	uxth	r3, r3
    LL_TIM_InitTypeDef TIM_InitStruct = {.CounterMode       = LL_TIM_COUNTERMODE_UP,
 80069f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80069f8:	2300      	movs	r3, #0
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
 80069fc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	2300      	movs	r3, #0
 8006a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
                                         .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
                                         .Autoreload        = (0xFFFFFFFFU >> 3U),
                                         .RepetitionCounter = 0};
    LL_TIM_Init(TIM2, &TIM_InitStruct);
 8006a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a14:	f7fe fd16 	bl	8005444 <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM2);
 8006a18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a1c:	f7ff fec3 	bl	80067a6 <LL_TIM_DisableARRPreload>
    LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006a20:	2100      	movs	r1, #0
 8006a22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a26:	f7ff ff36 	bl	8006896 <LL_TIM_SetClockSource>

    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {.OCMode = LL_TIM_OCMODE_FROZEN, .OCState = LL_TIM_OCSTATE_DISABLE, .CompareValue = 0, .OCPolarity = LL_TIM_OCPOLARITY_HIGH};
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	2220      	movs	r2, #32
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f015 fab8 	bl	801bfa8 <memset>
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2101      	movs	r1, #1
 8006a40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a44:	f7fe fd5c 	bl	8005500 <LL_TIM_OC_Init>

    LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8006a48:	2101      	movs	r1, #1
 8006a4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a4e:	f7ff fec5 	bl	80067dc <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8006a52:	2100      	movs	r1, #0
 8006a54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a58:	f7ff ff31 	bl	80068be <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM2);
 8006a5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a60:	f7ff ff3f 	bl	80068e2 <LL_TIM_DisableMasterSlaveMode>

    LL_TIM_EnableCounter(TIM2);
 8006a64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a68:	f7ff fe8e 	bl	8006788 <LL_TIM_EnableCounter>
}
 8006a6c:	bf00      	nop
 8006a6e:	3758      	adds	r7, #88	; 0x58
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000778 	.word	0x20000778
 8006a78:	2000077c 	.word	0x2000077c
 8006a7c:	431bde83 	.word	0x431bde83

08006a80 <EMBENET_TIMER_SetCompare>:
    LL_TIM_DeInit(TIM2);
    LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_TIM2);
}


void EMBENET_TIMER_SetCompare(EMBENET_TimeUs compareValue) {
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
    EMBENET_CRITICAL_SECTION_Enter();
 8006a88:	f7ff f9fc 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
    EMBENET_TimeUs currentValue = EMBENET_TIMER_ReadCounter();
 8006a8c:	f000 f828 	bl	8006ae0 <EMBENET_TIMER_ReadCounter>
 8006a90:	60f8      	str	r0, [r7, #12]
    LL_TIM_EnableIT_CC1(TIM2);
 8006a92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a96:	f7ff ff52 	bl	800693e <LL_TIM_EnableIT_CC1>
    LL_TIM_ClearFlag_CC1(TIM2);
 8006a9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a9e:	f7ff ff2f 	bl	8006900 <LL_TIM_ClearFlag_CC1>
    NVIC_ClearPendingIRQ(TIM2_IRQn);
 8006aa2:	201b      	movs	r0, #27
 8006aa4:	f7ff fdde 	bl	8006664 <__NVIC_ClearPendingIRQ>
    if ((EMBENET_TimeUs)(compareValue - SET_COMPARE_GUARD_US - currentValue) < (EMBENET_TimeUs)(EMBENET_TIMER_GetMaxCompareDuration())) {
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f1a3 0414 	sub.w	r4, r3, #20
 8006ab2:	f000 f81f 	bl	8006af4 <EMBENET_TIMER_GetMaxCompareDuration>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d207      	bcs.n	8006acc <EMBENET_TIMER_SetCompare+0x4c>
        LL_TIM_OC_SetCompareCH1(TIM2, compareValue / US_PER_TICK);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	08db      	lsrs	r3, r3, #3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ac6:	f7ff fed9 	bl	800687c <LL_TIM_OC_SetCompareCH1>
 8006aca:	e003      	b.n	8006ad4 <EMBENET_TIMER_SetCompare+0x54>
    } else {
        // compareValue is too close to current value and timer will be late, interrupt is triggered immediately
        LL_TIM_GenerateEvent_CC1(TIM2);
 8006acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ad0:	f7ff ff53 	bl	800697a <LL_TIM_GenerateEvent_CC1>
    }
    EMBENET_CRITICAL_SECTION_Exit();
 8006ad4:	f7ff f9f6 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd90      	pop	{r4, r7, pc}

08006ae0 <EMBENET_TIMER_ReadCounter>:


EMBENET_TimeUs EMBENET_TIMER_ReadCounter(void) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
    return (LL_TIM_GetCounter(TIM2) * US_PER_TICK);
 8006ae4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006ae8:	f7ff fe6c 	bl	80067c4 <LL_TIM_GetCounter>
 8006aec:	4603      	mov	r3, r0
 8006aee:	00db      	lsls	r3, r3, #3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <EMBENET_TIMER_GetMaxCompareDuration>:


EMBENET_TimeUs EMBENET_TIMER_GetMaxCompareDuration(void) {
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
    return (EMBENET_TimeUs)0x7FFFFFFFU;
 8006af8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_CC1(TIM2)) {
 8006b08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b0c:	f7ff ff05 	bl	800691a <LL_TIM_IsActiveFlag_CC1>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <TIM2_IRQHandler+0x36>
        LL_TIM_ClearFlag_CC1(TIM2);
 8006b16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b1a:	f7ff fef1 	bl	8006900 <LL_TIM_ClearFlag_CC1>
        LL_TIM_DisableIT_CC1(TIM2);
 8006b1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006b22:	f7ff ff1b 	bl	800695c <LL_TIM_DisableIT_CC1>

        if (callback != NULL) {
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <TIM2_IRQHandler+0x3c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <TIM2_IRQHandler+0x36>
            callback(callbackContext);
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <TIM2_IRQHandler+0x3c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <TIM2_IRQHandler+0x40>)
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	4610      	mov	r0, r2
 8006b38:	4798      	blx	r3
        }
    }
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000778 	.word	0x20000778
 8006b44:	2000077c 	.word	0x2000077c

08006b48 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006b56:	4a1c      	ldr	r2, [pc, #112]	; (8006bc8 <SUBGRF_Init+0x80>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006b5c:	2002      	movs	r0, #2
 8006b5e:	f000 fe65 	bl	800782c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <SUBGRF_Init+0x84>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f000 f8cf 	bl	8006d0c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <SUBGRF_Init+0x88>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <SUBGRF_Init+0x50>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006b76:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <SUBGRF_Init+0x8c>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fa4e 	bl	800701e <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006b82:	2100      	movs	r1, #0
 8006b84:	f640 1011 	movw	r0, #2321	; 0x911
 8006b88:	f000 fd4e 	bl	8007628 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006b8c:	237f      	movs	r3, #127	; 0x7f
 8006b8e:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006b90:	7b38      	ldrb	r0, [r7, #12]
 8006b92:	f000 f94d 	bl	8006e30 <SUBGRF_Calibrate>
 8006b96:	e00d      	b.n	8006bb4 <SUBGRF_Init+0x6c>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <SUBGRF_Init+0x90>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f640 1011 	movw	r0, #2321	; 0x911
 8006ba2:	f000 fd41 	bl	8007628 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <SUBGRF_Init+0x90>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	4619      	mov	r1, r3
 8006bac:	f640 1012 	movw	r0, #2322	; 0x912
 8006bb0:	f000 fd3a 	bl	8007628 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8006bb4:	f7fe ff9e 	bl	8005af4 <EMBENET_NODE_BSP_RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <SUBGRF_Init+0x94>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000078c 	.word	0x2000078c
 8006bcc:	20000788 	.word	0x20000788
 8006bd0:	0801f011 	.word	0x0801f011
 8006bd4:	0801f008 	.word	0x0801f008
 8006bd8:	0801f010 	.word	0x0801f010
 8006bdc:	20000780 	.word	0x20000780

08006be0 <SUBGRF_SetSyncWord>:
    SUBGRF_SetPayload( payload, size );
    SUBGRF_SetTx( timeout );
}

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006be8:	2208      	movs	r2, #8
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006bf0:	f000 fd42 	bl	8007678 <SUBGRF_WriteRegisters>
    return 0;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	4603      	mov	r3, r0
 8006c06:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006c18:	f000 fa88 	bl	800712c <SUBGRF_GetPacketType>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006c22:	f107 030c 	add.w	r3, r7, #12
 8006c26:	2202      	movs	r2, #2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006c2e:	f000 fd23 	bl	8007678 <SUBGRF_WriteRegisters>
            break;
 8006c32:	e000      	b.n	8006c36 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8006c34:	bf00      	nop
    }
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	4603      	mov	r3, r0
 8006c46:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8006c58:	f000 fa68 	bl	800712c <SUBGRF_GetPacketType>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d108      	bne.n	8006c74 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006c62:	f107 030c 	add.w	r3, r7, #12
 8006c66:	2202      	movs	r2, #2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f240 60be 	movw	r0, #1726	; 0x6be
 8006c6e:	f000 fd03 	bl	8007678 <SUBGRF_WriteRegisters>
            break;
 8006c72:	e000      	b.n	8006c76 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8006c74:	bf00      	nop
    }
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006c90:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006c94:	f000 fcdc 	bl	8007650 <SUBGRF_ReadRegister>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006caa:	f000 fcbd 	bl	8007628 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006cae:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006cb2:	f000 fccd 	bl	8007650 <SUBGRF_ReadRegister>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006cba:	79bb      	ldrb	r3, [r7, #6]
 8006cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006cc8:	f000 fcae 	bl	8007628 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006ccc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006cd0:	f000 f866 	bl	8006da0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006cd4:	463b      	mov	r3, r7
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f640 0019 	movw	r0, #2073	; 0x819
 8006cde:	f000 fcdf 	bl	80076a0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f000 f812 	bl	8006d0c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4619      	mov	r1, r3
 8006cec:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006cf0:	f000 fc9a 	bl	8007628 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006cf4:	79bb      	ldrb	r3, [r7, #6]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006cfc:	f000 fc94 	bl	8007628 <SUBGRF_WriteRegister>

    return number;
 8006d00:	683b      	ldr	r3, [r7, #0]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006d16:	1dfb      	adds	r3, r7, #7
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	2080      	movs	r0, #128	; 0x80
 8006d1e:	f000 fcff 	bl	8007720 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <SUBGRF_SetStandby+0x34>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8006d2e:	e002      	b.n	8006d36 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <SUBGRF_SetStandby+0x34>)
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000780 	.word	0x20000780

08006d44 <SUBGRF_SetFs>:

void SUBGRF_SetFs( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	20c1      	movs	r0, #193	; 0xc1
 8006d4e:	f000 fce7 	bl	8007720 <SUBGRF_WriteCommand>
    OperatingMode = MODE_FS;
 8006d52:	4b02      	ldr	r3, [pc, #8]	; (8006d5c <SUBGRF_SetFs+0x18>)
 8006d54:	2203      	movs	r2, #3
 8006d56:	701a      	strb	r2, [r3, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000780 	.word	0x20000780

08006d60 <SUBGRF_SetTx>:

void SUBGRF_SetTx( uint32_t timeout )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <SUBGRF_SetTx+0x3c>)
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	0c1b      	lsrs	r3, r3, #16
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006d84:	f107 030c 	add.w	r3, r7, #12
 8006d88:	2203      	movs	r2, #3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	2083      	movs	r0, #131	; 0x83
 8006d8e:	f000 fcc7 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000780 	.word	0x20000780

08006da0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <SUBGRF_SetRx+0x3c>)
 8006daa:	2205      	movs	r2, #5
 8006dac:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0c1b      	lsrs	r3, r3, #16
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	2203      	movs	r2, #3
 8006dca:	4619      	mov	r1, r3
 8006dcc:	2082      	movs	r0, #130	; 0x82
 8006dce:	f000 fca7 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000780 	.word	0x20000780

08006de0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006dea:	1dfb      	adds	r3, r7, #7
 8006dec:	2201      	movs	r2, #1
 8006dee:	4619      	mov	r1, r3
 8006df0:	209f      	movs	r0, #159	; 0x9f
 8006df2:	f000 fc95 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
	...

08006e00 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <SUBGRF_SetRegulatorMode+0x2c>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <SUBGRF_SetRegulatorMode+0x14>
    {
        mode = USE_DCDC ;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	71fb      	strb	r3, [r7, #7]
 8006e12:	e001      	b.n	8006e18 <SUBGRF_SetRegulatorMode+0x18>
    }
    else
    {
        mode = USE_LDO ;
 8006e14:	2300      	movs	r3, #0
 8006e16:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	2096      	movs	r0, #150	; 0x96
 8006e20:	f000 fc7e 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	0801f012 	.word	0x0801f012

08006e30 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006e38:	793b      	ldrb	r3, [r7, #4]
 8006e3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006e44:	793b      	ldrb	r3, [r7, #4]
 8006e46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006e54:	793b      	ldrb	r3, [r7, #4]
 8006e56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006e5e:	b25b      	sxtb	r3, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006e64:	793b      	ldrb	r3, [r7, #4]
 8006e66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006e74:	793b      	ldrb	r3, [r7, #4]
 8006e76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	4313      	orrs	r3, r2
 8006e82:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006e84:	793b      	ldrb	r3, [r7, #4]
 8006e86:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006e94:	793b      	ldrb	r3, [r7, #4]
 8006e96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006ea4:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006ea6:	f107 030f 	add.w	r3, r7, #15
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4619      	mov	r1, r3
 8006eae:	2089      	movs	r0, #137	; 0x89
 8006eb0:	f000 fc36 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <SUBGRF_CalibrateImage+0x78>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d904      	bls.n	8006ed6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006ecc:	23e1      	movs	r3, #225	; 0xe1
 8006ece:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8006ed0:	23e9      	movs	r3, #233	; 0xe9
 8006ed2:	737b      	strb	r3, [r7, #13]
 8006ed4:	e022      	b.n	8006f1c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <SUBGRF_CalibrateImage+0x7c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d904      	bls.n	8006ee8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8006ede:	23d7      	movs	r3, #215	; 0xd7
 8006ee0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8006ee2:	23db      	movs	r3, #219	; 0xdb
 8006ee4:	737b      	strb	r3, [r7, #13]
 8006ee6:	e019      	b.n	8006f1c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <SUBGRF_CalibrateImage+0x80>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d904      	bls.n	8006efa <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8006ef0:	23c1      	movs	r3, #193	; 0xc1
 8006ef2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8006ef4:	23c5      	movs	r3, #197	; 0xc5
 8006ef6:	737b      	strb	r3, [r7, #13]
 8006ef8:	e010      	b.n	8006f1c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <SUBGRF_CalibrateImage+0x84>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d904      	bls.n	8006f0c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8006f02:	2375      	movs	r3, #117	; 0x75
 8006f04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8006f06:	2381      	movs	r3, #129	; 0x81
 8006f08:	737b      	strb	r3, [r7, #13]
 8006f0a:	e007      	b.n	8006f1c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <SUBGRF_CalibrateImage+0x88>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d903      	bls.n	8006f1c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8006f14:	236b      	movs	r3, #107	; 0x6b
 8006f16:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8006f18:	236f      	movs	r3, #111	; 0x6f
 8006f1a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	2202      	movs	r2, #2
 8006f22:	4619      	mov	r1, r3
 8006f24:	2098      	movs	r0, #152	; 0x98
 8006f26:	f000 fbfb 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	35a4e900 	.word	0x35a4e900
 8006f38:	32a9f880 	.word	0x32a9f880
 8006f3c:	2de54480 	.word	0x2de54480
 8006f40:	1b6b0b00 	.word	0x1b6b0b00
 8006f44:	1954fc40 	.word	0x1954fc40

08006f48 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	71fb      	strb	r3, [r7, #7]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	71bb      	strb	r3, [r7, #6]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	717b      	strb	r3, [r7, #5]
 8006f62:	4613      	mov	r3, r2
 8006f64:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8006f6a:	79bb      	ldrb	r3, [r7, #6]
 8006f6c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8006f6e:	797b      	ldrb	r3, [r7, #5]
 8006f70:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8006f72:	793b      	ldrb	r3, [r7, #4]
 8006f74:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	2095      	movs	r0, #149	; 0x95
 8006f80:	f000 fbce 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd90      	pop	{r4, r7, pc}

08006f8c <SUBGRF_SetRxTxFallbackMode>:

void SUBGRF_SetRxTxFallbackMode( uint8_t fallbackMode )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
 8006f96:	1dfb      	adds	r3, r7, #7
 8006f98:	2201      	movs	r2, #1
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	2093      	movs	r0, #147	; 0x93
 8006f9e:	f000 fbbf 	bl	8007720 <SUBGRF_WriteCommand>
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <SUBGRF_SetDioIrqParams>:

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8006faa:	b590      	push	{r4, r7, lr}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4623      	mov	r3, r4
 8006fba:	80fb      	strh	r3, [r7, #6]
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	80bb      	strh	r3, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	807b      	strh	r3, [r7, #2]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006fd8:	88bb      	ldrh	r3, [r7, #4]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006fe2:	88bb      	ldrh	r3, [r7, #4]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006fe8:	887b      	ldrh	r3, [r7, #2]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8006ff8:	883b      	ldrh	r3, [r7, #0]
 8006ffa:	0a1b      	lsrs	r3, r3, #8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007002:	883b      	ldrh	r3, [r7, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007008:	f107 0308 	add.w	r3, r7, #8
 800700c:	2208      	movs	r2, #8
 800700e:	4619      	mov	r1, r3
 8007010:	2008      	movs	r0, #8
 8007012:	f000 fb85 	bl	8007720 <SUBGRF_WriteCommand>
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	bd90      	pop	{r4, r7, pc}

0800701e <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	4603      	mov	r3, r0
 8007026:	6039      	str	r1, [r7, #0]
 8007028:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	b2db      	uxtb	r3, r3
 8007032:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	0c1b      	lsrs	r3, r3, #16
 8007038:	b2db      	uxtb	r3, r3
 800703a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	b2db      	uxtb	r3, r3
 8007042:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	2204      	movs	r2, #4
 8007050:	4619      	mov	r1, r3
 8007052:	2097      	movs	r0, #151	; 0x97
 8007054:	f000 fb64 	bl	8007720 <SUBGRF_WriteCommand>
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800706e:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <SUBGRF_SetRfFrequency+0x8c>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f083 0301 	eor.w	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ff1d 	bl	8006ebc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007082:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <SUBGRF_SetRfFrequency+0x8c>)
 8007084:	2201      	movs	r2, #1
 8007086:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	461c      	mov	r4, r3
 800708e:	4615      	mov	r5, r2
 8007090:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007094:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <SUBGRF_SetRfFrequency+0x90>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	469a      	mov	sl, r3
 80070a0:	4693      	mov	fp, r2
 80070a2:	4652      	mov	r2, sl
 80070a4:	465b      	mov	r3, fp
 80070a6:	4640      	mov	r0, r8
 80070a8:	4649      	mov	r1, r9
 80070aa:	f7f9 fdaf 	bl	8000c0c <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4613      	mov	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	0c1b      	lsrs	r3, r3, #16
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	2204      	movs	r2, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	2086      	movs	r0, #134	; 0x86
 80070de:	f000 fb1f 	bl	8007720 <SUBGRF_WriteCommand>
}
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ec:	20000788 	.word	0x20000788
 80070f0:	0801f00c 	.word	0x0801f00c

080070f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80070fe:	79fa      	ldrb	r2, [r7, #7]
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <SUBGRF_SetPacketType+0x34>)
 8007102:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800710a:	2100      	movs	r1, #0
 800710c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007110:	f000 fa8a 	bl	8007628 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	2201      	movs	r2, #1
 8007118:	4619      	mov	r1, r3
 800711a:	208a      	movs	r0, #138	; 0x8a
 800711c:	f000 fb00 	bl	8007720 <SUBGRF_WriteCommand>
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000781 	.word	0x20000781

0800712c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
    return PacketType;
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <SUBGRF_GetPacketType+0x10>)
 8007132:	781b      	ldrb	r3, [r3, #0]
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr
 800713c:	20000781 	.word	0x20000781

08007140 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
 800714a:	460b      	mov	r3, r1
 800714c:	71bb      	strb	r3, [r7, #6]
 800714e:	4613      	mov	r3, r2
 8007150:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d124      	bne.n	80071a2 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8007158:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800715c:	2b0f      	cmp	r3, #15
 800715e:	d106      	bne.n	800716e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8007160:	2301      	movs	r3, #1
 8007162:	2201      	movs	r2, #1
 8007164:	2100      	movs	r1, #0
 8007166:	2006      	movs	r0, #6
 8007168:	f7ff feee 	bl	8006f48 <SUBGRF_SetPaConfig>
 800716c:	e005      	b.n	800717a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800716e:	2301      	movs	r3, #1
 8007170:	2201      	movs	r2, #1
 8007172:	2100      	movs	r1, #0
 8007174:	2004      	movs	r0, #4
 8007176:	f7ff fee7 	bl	8006f48 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800717a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800717e:	2b0d      	cmp	r3, #13
 8007180:	dd02      	ble.n	8007188 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8007182:	230e      	movs	r3, #14
 8007184:	71bb      	strb	r3, [r7, #6]
 8007186:	e006      	b.n	8007196 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8007188:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800718c:	f113 0f11 	cmn.w	r3, #17
 8007190:	da01      	bge.n	8007196 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8007192:	23ef      	movs	r3, #239	; 0xef
 8007194:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8007196:	2118      	movs	r1, #24
 8007198:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800719c:	f000 fa44 	bl	8007628 <SUBGRF_WriteRegister>
 80071a0:	e025      	b.n	80071ee <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80071a2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80071a6:	f000 fa53 	bl	8007650 <SUBGRF_ReadRegister>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f043 031e 	orr.w	r3, r3, #30
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	4619      	mov	r1, r3
 80071b4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80071b8:	f000 fa36 	bl	8007628 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80071bc:	2301      	movs	r3, #1
 80071be:	2200      	movs	r2, #0
 80071c0:	2107      	movs	r1, #7
 80071c2:	2004      	movs	r0, #4
 80071c4:	f7ff fec0 	bl	8006f48 <SUBGRF_SetPaConfig>
        if( power > 22 )
 80071c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80071cc:	2b16      	cmp	r3, #22
 80071ce:	dd02      	ble.n	80071d6 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 80071d0:	2316      	movs	r3, #22
 80071d2:	71bb      	strb	r3, [r7, #6]
 80071d4:	e006      	b.n	80071e4 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 80071d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80071da:	f113 0f09 	cmn.w	r3, #9
 80071de:	da01      	bge.n	80071e4 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 80071e0:	23f7      	movs	r3, #247	; 0xf7
 80071e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 80071e4:	2138      	movs	r1, #56	; 0x38
 80071e6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80071ea:	f000 fa1d 	bl	8007628 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80071ee:	79bb      	ldrb	r3, [r7, #6]
 80071f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 80071f2:	797b      	ldrb	r3, [r7, #5]
 80071f4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	2202      	movs	r2, #2
 80071fc:	4619      	mov	r1, r3
 80071fe:	208e      	movs	r0, #142	; 0x8e
 8007200:	f000 fa8e 	bl	8007720 <SUBGRF_WriteCommand>
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800721a:	4a66      	ldr	r2, [pc, #408]	; (80073b4 <SUBGRF_SetModulationParams+0x1a8>)
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007224:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	4b62      	ldr	r3, [pc, #392]	; (80073b8 <SUBGRF_SetModulationParams+0x1ac>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d004      	beq.n	800723e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff ff5b 	bl	80070f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b03      	cmp	r3, #3
 8007244:	f200 80af 	bhi.w	80073a6 <SUBGRF_SetModulationParams+0x19a>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <SUBGRF_SetModulationParams+0x44>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007261 	.word	0x08007261
 8007254:	08007331 	.word	0x08007331
 8007258:	080072ef 	.word	0x080072ef
 800725c:	0800735f 	.word	0x0800735f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8007260:	2308      	movs	r3, #8
 8007262:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007264:	4b55      	ldr	r3, [pc, #340]	; (80073bc <SUBGRF_SetModulationParams+0x1b0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	b2db      	uxtb	r3, r3
 800727a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	b2db      	uxtb	r3, r3
 8007282:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7b1b      	ldrb	r3, [r3, #12]
 800728e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	7b5b      	ldrb	r3, [r3, #13]
 8007294:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	461c      	mov	r4, r3
 800729e:	4615      	mov	r5, r2
 80072a0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80072a4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80072a8:	4b44      	ldr	r3, [pc, #272]	; (80073bc <SUBGRF_SetModulationParams+0x1b0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2200      	movs	r2, #0
 80072ae:	469a      	mov	sl, r3
 80072b0:	4693      	mov	fp, r2
 80072b2:	4652      	mov	r2, sl
 80072b4:	465b      	mov	r3, fp
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f9 fca7 	bl	8000c0c <__aeabi_uldivmod>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4613      	mov	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	0a1b      	lsrs	r3, r3, #8
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80072dc:	7cfb      	ldrb	r3, [r7, #19]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4619      	mov	r1, r3
 80072e6:	208b      	movs	r0, #139	; 0x8b
 80072e8:	f000 fa1a 	bl	8007720 <SUBGRF_WriteCommand>
        break;
 80072ec:	e05c      	b.n	80073a8 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_BPSK:
        n = 4;
 80072ee:	2304      	movs	r3, #4
 80072f0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80072f2:	4b32      	ldr	r3, [pc, #200]	; (80073bc <SUBGRF_SetModulationParams+0x1b0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	b2db      	uxtb	r3, r3
 8007308:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	b2db      	uxtb	r3, r3
 8007310:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7d1b      	ldrb	r3, [r3, #20]
 800731c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800731e:	7cfb      	ldrb	r3, [r7, #19]
 8007320:	b29a      	uxth	r2, r3
 8007322:	f107 0308 	add.w	r3, r7, #8
 8007326:	4619      	mov	r1, r3
 8007328:	208b      	movs	r0, #139	; 0x8b
 800732a:	f000 f9f9 	bl	8007720 <SUBGRF_WriteCommand>
        break;
 800732e:	e03b      	b.n	80073a8 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_LORA:
        n = 4;
 8007330:	2304      	movs	r3, #4
 8007332:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7e1b      	ldrb	r3, [r3, #24]
 8007338:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7e5b      	ldrb	r3, [r3, #25]
 800733e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7e9b      	ldrb	r3, [r3, #26]
 8007344:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7edb      	ldrb	r3, [r3, #27]
 800734a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800734c:	7cfb      	ldrb	r3, [r7, #19]
 800734e:	b29a      	uxth	r2, r3
 8007350:	f107 0308 	add.w	r3, r7, #8
 8007354:	4619      	mov	r1, r3
 8007356:	208b      	movs	r0, #139	; 0x8b
 8007358:	f000 f9e2 	bl	8007720 <SUBGRF_WriteCommand>

        break;
 800735c:	e024      	b.n	80073a8 <SUBGRF_SetModulationParams+0x19c>
    case PACKET_TYPE_GMSK:
        n = 5;
 800735e:	2305      	movs	r3, #5
 8007360:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007362:	4b16      	ldr	r3, [pc, #88]	; (80073bc <SUBGRF_SetModulationParams+0x1b0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b2db      	uxtb	r3, r3
 8007378:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	0a1b      	lsrs	r3, r3, #8
 800737e:	b2db      	uxtb	r3, r3
 8007380:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	7b1b      	ldrb	r3, [r3, #12]
 800738c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7b5b      	ldrb	r3, [r3, #13]
 8007392:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007394:	7cfb      	ldrb	r3, [r7, #19]
 8007396:	b29a      	uxth	r2, r3
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	4619      	mov	r1, r3
 800739e:	208b      	movs	r0, #139	; 0x8b
 80073a0:	f000 f9be 	bl	8007720 <SUBGRF_WriteCommand>
        break;
 80073a4:	e000      	b.n	80073a8 <SUBGRF_SetModulationParams+0x19c>
    default:
    case PACKET_TYPE_NONE:
      break;
 80073a6:	bf00      	nop
    }
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073b2:	bf00      	nop
 80073b4:	0801d330 	.word	0x0801d330
 80073b8:	20000781 	.word	0x20000781
 80073bc:	0801f00c 	.word	0x0801f00c

080073c0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80073cc:	4a48      	ldr	r2, [pc, #288]	; (80074f0 <SUBGRF_SetPacketParams+0x130>)
 80073ce:	f107 030c 	add.w	r3, r7, #12
 80073d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80073d4:	c303      	stmia	r3!, {r0, r1}
 80073d6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	4b45      	ldr	r3, [pc, #276]	; (80074f4 <SUBGRF_SetPacketParams+0x134>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d004      	beq.n	80073ee <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fe83 	bl	80070f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d878      	bhi.n	80074e8 <SUBGRF_SetPacketParams+0x128>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <SUBGRF_SetPacketParams+0x3c>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	0800749d 	.word	0x0800749d
 8007404:	08007491 	.word	0x08007491
 8007408:	0800740d 	.word	0x0800740d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7a5b      	ldrb	r3, [r3, #9]
 8007410:	2bf1      	cmp	r3, #241	; 0xf1
 8007412:	d10a      	bne.n	800742a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007414:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007418:	f7ff fbf1 	bl	8006bfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800741c:	f248 0005 	movw	r0, #32773	; 0x8005
 8007420:	f7ff fc0d 	bl	8006c3e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007424:	2302      	movs	r3, #2
 8007426:	75bb      	strb	r3, [r7, #22]
 8007428:	e011      	b.n	800744e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7a5b      	ldrb	r3, [r3, #9]
 800742e:	2bf2      	cmp	r3, #242	; 0xf2
 8007430:	d10a      	bne.n	8007448 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007432:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007436:	f7ff fbe2 	bl	8006bfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800743a:	f241 0021 	movw	r0, #4129	; 0x1021
 800743e:	f7ff fbfe 	bl	8006c3e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007442:	2306      	movs	r3, #6
 8007444:	75bb      	strb	r3, [r7, #22]
 8007446:	e002      	b.n	800744e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7a5b      	ldrb	r3, [r3, #9]
 800744c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800744e:	2309      	movs	r3, #9
 8007450:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	b2db      	uxtb	r3, r3
 800745c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	795b      	ldrb	r3, [r3, #5]
 8007470:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	799b      	ldrb	r3, [r3, #6]
 8007476:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	79db      	ldrb	r3, [r3, #7]
 800747c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7a1b      	ldrb	r3, [r3, #8]
 8007482:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007484:	7dbb      	ldrb	r3, [r7, #22]
 8007486:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	7a9b      	ldrb	r3, [r3, #10]
 800748c:	753b      	strb	r3, [r7, #20]
        break;
 800748e:	e022      	b.n	80074d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007490:	2301      	movs	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	733b      	strb	r3, [r7, #12]
        break;
 800749a:	e01c      	b.n	80074d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800749c:	2306      	movs	r3, #6
 800749e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	89db      	ldrh	r3, [r3, #14]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	89db      	ldrh	r3, [r3, #14]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7c1a      	ldrb	r2, [r3, #16]
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <SUBGRF_SetPacketParams+0x138>)
 80074ba:	4611      	mov	r1, r2
 80074bc:	7019      	strb	r1, [r3, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7c5b      	ldrb	r3, [r3, #17]
 80074c6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7c9b      	ldrb	r3, [r3, #18]
 80074cc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7cdb      	ldrb	r3, [r3, #19]
 80074d2:	747b      	strb	r3, [r7, #17]
        break;
 80074d4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	4619      	mov	r1, r3
 80074e0:	208c      	movs	r0, #140	; 0x8c
 80074e2:	f000 f91d 	bl	8007720 <SUBGRF_WriteCommand>
 80074e6:	e000      	b.n	80074ea <SUBGRF_SetPacketParams+0x12a>
        return;
 80074e8:	bf00      	nop
}
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	0801d338 	.word	0x0801d338
 80074f4:	20000781 	.word	0x20000781
 80074f8:	20000782 	.word	0x20000782

080074fc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	460a      	mov	r2, r1
 8007506:	71fb      	strb	r3, [r7, #7]
 8007508:	4613      	mov	r3, r2
 800750a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007510:	79bb      	ldrb	r3, [r7, #6]
 8007512:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007514:	f107 030c 	add.w	r3, r7, #12
 8007518:	2202      	movs	r2, #2
 800751a:	4619      	mov	r1, r3
 800751c:	208f      	movs	r0, #143	; 0x8f
 800751e:	f000 f8ff 	bl	8007720 <SUBGRF_WriteCommand>
}
 8007522:	bf00      	nop
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007536:	f107 030c 	add.w	r3, r7, #12
 800753a:	2202      	movs	r2, #2
 800753c:	4619      	mov	r1, r3
 800753e:	2013      	movs	r0, #19
 8007540:	f000 f902 	bl	8007748 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007544:	f7ff fdf2 	bl	800712c <SUBGRF_GetPacketType>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d10d      	bne.n	800756a <SUBGRF_GetRxBufferStatus+0x3e>
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <SUBGRF_GetRxBufferStatus+0x54>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d108      	bne.n	800756a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007558:	f240 7002 	movw	r0, #1794	; 0x702
 800755c:	f000 f878 	bl	8007650 <SUBGRF_ReadRegister>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e002      	b.n	8007570 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800756a:	7b3a      	ldrb	r2, [r7, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007570:	7b7a      	ldrb	r2, [r7, #13]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	701a      	strb	r2, [r3, #0]
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000782 	.word	0x20000782

08007584 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	2203      	movs	r2, #3
 8007592:	4619      	mov	r1, r3
 8007594:	2014      	movs	r0, #20
 8007596:	f000 f8d7 	bl	8007748 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800759a:	f7ff fdc7 	bl	800712c <SUBGRF_GetPacketType>
 800759e:	4603      	mov	r3, r0
 80075a0:	461a      	mov	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <SUBGRF_GetPacketStatus+0x30>
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d013      	beq.n	80075da <SUBGRF_GetPacketStatus+0x56>
 80075b2:	e02a      	b.n	800760a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80075b4:	7b3a      	ldrb	r2, [r7, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80075ba:	7b7b      	ldrb	r3, [r7, #13]
 80075bc:	425b      	negs	r3, r3
 80075be:	105b      	asrs	r3, r3, #1
 80075c0:	b25a      	sxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	425b      	negs	r3, r3
 80075ca:	105b      	asrs	r3, r3, #1
 80075cc:	b25a      	sxtb	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
            break;
 80075d8:	e020      	b.n	800761c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80075da:	7b3b      	ldrb	r3, [r7, #12]
 80075dc:	425b      	negs	r3, r3
 80075de:	105b      	asrs	r3, r3, #1
 80075e0:	b25a      	sxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80075e6:	7b7b      	ldrb	r3, [r7, #13]
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	3302      	adds	r3, #2
 80075ec:	109b      	asrs	r3, r3, #2
 80075ee:	b25a      	sxtb	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	425b      	negs	r3, r3
 80075f8:	105b      	asrs	r3, r3, #1
 80075fa:	b25a      	sxtb	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <SUBGRF_GetPacketStatus+0xa0>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	611a      	str	r2, [r3, #16]
            break;
 8007608:	e008      	b.n	800761c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800760a:	2214      	movs	r2, #20
 800760c:	2100      	movs	r1, #0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f014 fcca 	bl	801bfa8 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	220f      	movs	r2, #15
 8007618:	701a      	strb	r2, [r3, #0]
            break;
 800761a:	bf00      	nop
    }
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000784 	.word	0x20000784

08007628 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	460a      	mov	r2, r1
 8007632:	80fb      	strh	r3, [r7, #6]
 8007634:	4613      	mov	r3, r2
 8007636:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007638:	1d7a      	adds	r2, r7, #5
 800763a:	88f9      	ldrh	r1, [r7, #6]
 800763c:	2301      	movs	r3, #1
 800763e:	4803      	ldr	r0, [pc, #12]	; (800764c <SUBGRF_WriteRegister+0x24>)
 8007640:	f7fc fd09 	bl	8004056 <HAL_SUBGHZ_WriteRegisters>
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000748 	.word	0x20000748

08007650 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800765a:	f107 020f 	add.w	r2, r7, #15
 800765e:	88f9      	ldrh	r1, [r7, #6]
 8007660:	2301      	movs	r3, #1
 8007662:	4804      	ldr	r0, [pc, #16]	; (8007674 <SUBGRF_ReadRegister+0x24>)
 8007664:	f7fc fd56 	bl	8004114 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20000748 	.word	0x20000748

08007678 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	80fb      	strh	r3, [r7, #6]
 8007684:	4613      	mov	r3, r2
 8007686:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007688:	88bb      	ldrh	r3, [r7, #4]
 800768a:	88f9      	ldrh	r1, [r7, #6]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	4803      	ldr	r0, [pc, #12]	; (800769c <SUBGRF_WriteRegisters+0x24>)
 8007690:	f7fc fce1 	bl	8004056 <HAL_SUBGHZ_WriteRegisters>
    CRITICAL_SECTION_END();
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000748 	.word	0x20000748

080076a0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	80fb      	strh	r3, [r7, #6]
 80076ac:	4613      	mov	r3, r2
 80076ae:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80076b0:	88bb      	ldrh	r3, [r7, #4]
 80076b2:	88f9      	ldrh	r1, [r7, #6]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	4803      	ldr	r0, [pc, #12]	; (80076c4 <SUBGRF_ReadRegisters+0x24>)
 80076b8:	f7fc fd2c 	bl	8004114 <HAL_SUBGHZ_ReadRegisters>
    CRITICAL_SECTION_END();
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000748 	.word	0x20000748

080076c8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
 80076d4:	4613      	mov	r3, r2
 80076d6:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80076d8:	79bb      	ldrb	r3, [r7, #6]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	79f9      	ldrb	r1, [r7, #7]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4803      	ldr	r0, [pc, #12]	; (80076f0 <SUBGRF_WriteBuffer+0x28>)
 80076e2:	f7fc fe2b 	bl	800433c <HAL_SUBGHZ_WriteBuffer>
    CRITICAL_SECTION_END();
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000748 	.word	0x20000748

080076f4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	6039      	str	r1, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
 8007700:	4613      	mov	r3, r2
 8007702:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007704:	79bb      	ldrb	r3, [r7, #6]
 8007706:	b29b      	uxth	r3, r3
 8007708:	79f9      	ldrb	r1, [r7, #7]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <SUBGRF_ReadBuffer+0x28>)
 800770e:	f7fc fe68 	bl	80043e2 <HAL_SUBGHZ_ReadBuffer>
    CRITICAL_SECTION_END();
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000748 	.word	0x20000748

08007720 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
 800772c:	4613      	mov	r3, r2
 800772e:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007730:	88bb      	ldrh	r3, [r7, #4]
 8007732:	79f9      	ldrb	r1, [r7, #7]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	4803      	ldr	r0, [pc, #12]	; (8007744 <SUBGRF_WriteCommand+0x24>)
 8007738:	f7fc fd4d 	bl	80041d6 <HAL_SUBGHZ_ExecSetCmd>
    CRITICAL_SECTION_END();
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000748 	.word	0x20000748

08007748 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
 8007754:	4613      	mov	r3, r2
 8007756:	80bb      	strh	r3, [r7, #4]
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007758:	88bb      	ldrh	r3, [r7, #4]
 800775a:	79f9      	ldrb	r1, [r7, #7]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	4803      	ldr	r0, [pc, #12]	; (800776c <SUBGRF_ReadCommand+0x24>)
 8007760:	f7fc fd98 	bl	8004294 <HAL_SUBGHZ_ExecGetCmd>
    CRITICAL_SECTION_END();
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000748 	.word	0x20000748

08007770 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	460a      	mov	r2, r1
 800777a:	71fb      	strb	r3, [r7, #7]
 800777c:	4613      	mov	r3, r2
 800777e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007784:	79bb      	ldrb	r3, [r7, #6]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10d      	bne.n	80077a6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d104      	bne.n	800779a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007790:	2302      	movs	r3, #2
 8007792:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007794:	2004      	movs	r0, #4
 8007796:	f000 f849 	bl	800782c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d107      	bne.n	80077b0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80077a0:	2303      	movs	r3, #3
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e004      	b.n	80077b0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80077a6:	79bb      	ldrb	r3, [r7, #6]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe f9da 	bl	8005b6c <EMBENET_NODE_BSP_ConfigRFSwitch>
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80077ce:	f7fe fa27 	bl	8005c20 <EMBENET_NODE_BSP_GetTxConfig>
 80077d2:	4603      	mov	r3, r0
 80077d4:	60bb      	str	r3, [r7, #8]

    switch (TxConfig)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d009      	beq.n	80077f0 <SUBGRF_SetRfTxPower+0x30>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	dc16      	bgt.n	8007810 <SUBGRF_SetRfTxPower+0x50>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <SUBGRF_SetRfTxPower+0x44>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d00d      	beq.n	800780a <SUBGRF_SetRfTxPower+0x4a>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80077ee:	e00f      	b.n	8007810 <SUBGRF_SetRfTxPower+0x50>
            if (power > 15)
 80077f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f4:	2b0f      	cmp	r3, #15
 80077f6:	dd02      	ble.n	80077fe <SUBGRF_SetRfTxPower+0x3e>
                paSelect = RFO_HP;
 80077f8:	2302      	movs	r3, #2
 80077fa:	73fb      	strb	r3, [r7, #15]
            break;
 80077fc:	e009      	b.n	8007812 <SUBGRF_SetRfTxPower+0x52>
                paSelect = RFO_LP;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
            break;
 8007802:	e006      	b.n	8007812 <SUBGRF_SetRfTxPower+0x52>
            paSelect = RFO_LP;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
            break;
 8007808:	e003      	b.n	8007812 <SUBGRF_SetRfTxPower+0x52>
            paSelect = RFO_HP;
 800780a:	2302      	movs	r3, #2
 800780c:	73fb      	strb	r3, [r7, #15]
            break;
 800780e:	e000      	b.n	8007812 <SUBGRF_SetRfTxPower+0x52>
            break;
 8007810:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007812:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2202      	movs	r2, #2
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fc90 	bl	8007140 <SUBGRF_SetTxParams>

    return paSelect;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <Radio_SMPS_Set+0x40>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d012      	beq.n	8007864 <Radio_SMPS_Set+0x38>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800783e:	f640 1023 	movw	r0, #2339	; 0x923
 8007842:	f7ff ff05 	bl	8007650 <SUBGRF_ReadRegister>
 8007846:	4603      	mov	r3, r0
 8007848:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	f023 0306 	bic.w	r3, r3, #6
 8007850:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8007852:	7bfa      	ldrb	r2, [r7, #15]
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	4313      	orrs	r3, r2
 8007858:	b2db      	uxtb	r3, r3
 800785a:	4619      	mov	r1, r3
 800785c:	f640 1023 	movw	r0, #2339	; 0x923
 8007860:	f7ff fee2 	bl	8007628 <SUBGRF_WriteRegister>
  }
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	0801f012 	.word	0x0801f012

08007870 <CoAP_AllocNewInteraction>:
#include "liblobaro_coap.h"
#include "coap_mem.h"

CoAP_Result_t CoAP_HandleObservationInReq(CoAP_Interaction_t* pIA);

static CoAP_Interaction_t* _rom CoAP_AllocNewInteraction() {
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
	CoAP_Interaction_t* newInteraction = (CoAP_Interaction_t*) (CoAP_malloc0(sizeof(CoAP_Interaction_t)));
 8007876:	2064      	movs	r0, #100	; 0x64
 8007878:	f001 fce8 	bl	800924c <CoAP_malloc0>
 800787c:	6078      	str	r0, [r7, #4]
	if (newInteraction == NULL) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <CoAP_AllocNewInteraction+0x28>
		// coap_mem_stats();
		INFO("- (!!!) CoAP_AllocNewInteraction() Out of Memory (Needed %zu bytes) !!!\r\n", sizeof(CoAP_Interaction_t));
 8007884:	2264      	movs	r2, #100	; 0x64
 8007886:	4910      	ldr	r1, [pc, #64]	; (80078c8 <CoAP_AllocNewInteraction+0x58>)
 8007888:	4810      	ldr	r0, [pc, #64]	; (80078cc <CoAP_AllocNewInteraction+0x5c>)
 800788a:	f014 fa6b 	bl	801bd64 <siprintf>
 800788e:	480f      	ldr	r0, [pc, #60]	; (80078cc <CoAP_AllocNewInteraction+0x5c>)
 8007890:	f000 fbcc 	bl	800802c <hal_debug_puts>
		return NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	e012      	b.n	80078be <CoAP_AllocNewInteraction+0x4e>
	}

	memset(newInteraction, 0, sizeof(CoAP_Interaction_t));
 8007898:	2264      	movs	r2, #100	; 0x64
 800789a:	2100      	movs	r1, #0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f014 fb83 	bl	801bfa8 <memset>
	assert_coap(newInteraction->pObserver == NULL);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <CoAP_AllocNewInteraction+0x4c>
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <CoAP_AllocNewInteraction+0x60>)
 80078ac:	2226      	movs	r2, #38	; 0x26
 80078ae:	4909      	ldr	r1, [pc, #36]	; (80078d4 <CoAP_AllocNewInteraction+0x64>)
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <CoAP_AllocNewInteraction+0x5c>)
 80078b2:	f014 fa57 	bl	801bd64 <siprintf>
 80078b6:	4805      	ldr	r0, [pc, #20]	; (80078cc <CoAP_AllocNewInteraction+0x5c>)
 80078b8:	f000 fbb8 	bl	800802c <hal_debug_puts>
	return newInteraction;
 80078bc:	687b      	ldr	r3, [r7, #4]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	0801d344 	.word	0x0801d344
 80078cc:	200007d8 	.word	0x200007d8
 80078d0:	0801d390 	.word	0x0801d390
 80078d4:	0801d3e8 	.word	0x0801d3e8

080078d8 <CoAP_FreeInteraction>:

CoAP_Result_t _rom CoAP_FreeInteraction(CoAP_Interaction_t** pInteraction) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	DEBUG_COAP("Releasing Interaction...\r\n");
	// coap_mem_stats();
	CoAP_free_Message(&(*pInteraction)->pReqMsg);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3338      	adds	r3, #56	; 0x38
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fd5e 	bl	80093a8 <CoAP_free_Message>
	CoAP_free_Message(&(*pInteraction)->pRespMsg);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	334c      	adds	r3, #76	; 0x4c
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fd58 	bl	80093a8 <CoAP_free_Message>
	CoAP_free((void*) (*pInteraction));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fc87 	bl	8009210 <CoAP_free>
	// coap_mem_stats();
	*pInteraction = NULL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
	return COAP_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <CoAP_UnlinkInteractionFromList>:

static CoAP_Result_t _rom CoAP_UnlinkInteractionFromList(CoAP_Interaction_t** pListStart, CoAP_Interaction_t* pInteractionToRemove, bool FreeUnlinked) {
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
	CoAP_Interaction_t* currP;
	CoAP_Interaction_t* prevP;

	// For 1st node, indicate there is no previous.
	prevP = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]

	//Visit each node, maintaining a pointer to
	//the previous node we just visited.
	for (currP = *pListStart; currP != NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	e01e      	b.n	800796a <CoAP_UnlinkInteractionFromList+0x58>
			prevP = currP, currP = currP->next) {

		if (currP == pInteractionToRemove) {  // Found it.
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	d115      	bne.n	8007960 <CoAP_UnlinkInteractionFromList+0x4e>
			if (prevP == NULL) {
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <CoAP_UnlinkInteractionFromList+0x32>
				//Fix beginning pointer.
				*pListStart = currP->next;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e003      	b.n	800794c <CoAP_UnlinkInteractionFromList+0x3a>
			} else {
				//Fix previous node's next to
				//skip over the removed node.
				prevP->next = currP->next;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	601a      	str	r2, [r3, #0]
			}

			// Deallocate the node.
			if (FreeUnlinked) {
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <CoAP_UnlinkInteractionFromList+0x4a>
				CoAP_FreeInteraction(&currP);
 8007952:	f107 0310 	add.w	r3, r7, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff ffbe 	bl	80078d8 <CoAP_FreeInteraction>
			}
			//Done searching.
			return COAP_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e008      	b.n	8007972 <CoAP_UnlinkInteractionFromList+0x60>
			prevP = currP, currP = currP->next) {
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	613b      	str	r3, [r7, #16]
	for (currP = *pListStart; currP != NULL;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1dd      	bne.n	800792c <CoAP_UnlinkInteractionFromList+0x1a>
		}
	}
	return COAP_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <CoAP_AppendInteractionToList>:
		}
	}
	return COAP_NOT_FOUND;
}

static CoAP_Result_t _rom CoAP_AppendInteractionToList(CoAP_Interaction_t** pListStart, CoAP_Interaction_t* pInteractionToAdd) {
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
	if (pInteractionToAdd == NULL)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <CoAP_AppendInteractionToList+0x14>
		return COAP_ERR_ARGUMENT;
 800798a:	230a      	movs	r3, #10
 800798c:	e020      	b.n	80079d0 <CoAP_AppendInteractionToList+0x56>

	if (*pListStart == NULL) //List empty? create new first element
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d107      	bne.n	80079a6 <CoAP_AppendInteractionToList+0x2c>
	{
		*pListStart = pInteractionToAdd;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	601a      	str	r2, [r3, #0]
		(*pListStart)->next = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e013      	b.n	80079ce <CoAP_AppendInteractionToList+0x54>
	} else //append new element at end
	{
		CoAP_Interaction_t* pTrans = *pListStart;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
		while (pTrans->next != NULL)
 80079ac:	e002      	b.n	80079b4 <CoAP_AppendInteractionToList+0x3a>
			pTrans = pTrans->next;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
		while (pTrans->next != NULL)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f8      	bne.n	80079ae <CoAP_AppendInteractionToList+0x34>

		pTrans->next = pInteractionToAdd;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	601a      	str	r2, [r3, #0]
		pTrans = pTrans->next;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
		pTrans->next = NULL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
	}
	return COAP_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr

080079da <CoAP_MoveInteractionToListEnd>:

static CoAP_Result_t _rom CoAP_MoveInteractionToListEnd(CoAP_Interaction_t** pListStart, CoAP_Interaction_t* pInteractionToMove) {
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
	CoAP_Interaction_t* currP;
	CoAP_Interaction_t* prevP;

	// For 1st node, indicate there is no previous.
	prevP = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60bb      	str	r3, [r7, #8]

	//is interaction in List? if so delete it temporarily and add it to the back then

	//Visit each node, maintaining a pointer to
	//the previous node we just visited.
	for (currP = *pListStart;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e014      	b.n	8007a1a <CoAP_MoveInteractionToListEnd+0x40>
			currP != NULL;
			prevP = currP, currP = currP->next) {

		if (currP == pInteractionToMove) {  // Found it.
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d10b      	bne.n	8007a10 <CoAP_MoveInteractionToListEnd+0x36>
			if (prevP == NULL) {
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <CoAP_MoveInteractionToListEnd+0x2e>
				//Fix beginning pointer.
				*pListStart = currP->next;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e003      	b.n	8007a10 <CoAP_MoveInteractionToListEnd+0x36>
			} else {
				//Fix previous node's next to
				//skip over the removed node.
				prevP->next = currP->next;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	601a      	str	r2, [r3, #0]
			prevP = currP, currP = currP->next) {
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
			currP != NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e7      	bne.n	80079f0 <CoAP_MoveInteractionToListEnd+0x16>
			}
		}
	}
	//node removed now put it at end of list
	CoAP_AppendInteractionToList(pListStart, pInteractionToMove);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff ffa9 	bl	800797a <CoAP_AppendInteractionToList>

	return COAP_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <CoAP_SetSleepInteraction>:

CoAP_Result_t _rom CoAP_SetSleepInteraction(CoAP_Interaction_t* pIA, uint32_t seconds) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
	pIA->SleepUntil = CoAP.api.rtc1HzCnt() + seconds;
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <CoAP_SetSleepInteraction+0x24>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4798      	blx	r3
 8007a44:	4602      	mov	r2, r0
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	441a      	add	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	635a      	str	r2, [r3, #52]	; 0x34
	return COAP_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000790 	.word	0x20000790

08007a5c <CoAP_EnableAckTimeout>:

#ifdef COAP_EXPLICIT_TIMEOUT0
const uint8_t TIMEOUTS[] = {COAP_EXPLICIT_TIMEOUT0,COAP_EXPLICIT_TIMEOUT1,COAP_EXPLICIT_TIMEOUT2};
#endif

CoAP_Result_t _rom CoAP_EnableAckTimeout(CoAP_Interaction_t* pIA, uint8_t retryNum) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
    }
    INFO("CoAP timeout: %lus\n", waitTime);
    pIA->AckTimeout = CoAP.api.rtc1HzCnt() + waitTime;
    return COAP_OK;
#else
	uint32_t waitTime = ACK_TIMEOUT;
 8007a68:	2308      	movs	r3, #8
 8007a6a:	60fb      	str	r3, [r7, #12]
	int i;
	for (i = 0; i < retryNum; i++) { //"exponential backoff"
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	e005      	b.n	8007a7e <CoAP_EnableAckTimeout+0x22>
		waitTime *= 2;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < retryNum; i++) { //"exponential backoff"
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	dbf5      	blt.n	8007a72 <CoAP_EnableAckTimeout+0x16>
	}
    INFO("CoAP timeout: %lus\n", waitTime);
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4909      	ldr	r1, [pc, #36]	; (8007ab0 <CoAP_EnableAckTimeout+0x54>)
 8007a8a:	480a      	ldr	r0, [pc, #40]	; (8007ab4 <CoAP_EnableAckTimeout+0x58>)
 8007a8c:	f014 f96a 	bl	801bd64 <siprintf>
 8007a90:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <CoAP_EnableAckTimeout+0x58>)
 8007a92:	f000 facb 	bl	800802c <hal_debug_puts>
	pIA->AckTimeout = CoAP.api.rtc1HzCnt() + waitTime;
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <CoAP_EnableAckTimeout+0x5c>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	441a      	add	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
	return COAP_OK;
 8007aa6:	2300      	movs	r3, #0
#endif
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	0801d410 	.word	0x0801d410
 8007ab4:	200007d8 	.word	0x200007d8
 8007ab8:	20000790 	.word	0x20000790

08007abc <CoAP_GetLongestPendingInteraction>:

CoAP_Interaction_t* _rom CoAP_GetLongestPendingInteraction() {
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
	return CoAP.pInteractions;
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <CoAP_GetLongestPendingInteraction+0x10>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr
 8007acc:	20000790 	.word	0x20000790

08007ad0 <CoAP_FindInteractionByMessageIdAndEp>:

// Each incoming message belongs to an interaction
// CON <-> ACK/RST are matched by id and endpoint
CoAP_Interaction_t* _rom CoAP_FindInteractionByMessageIdAndEp(CoAP_Interaction_t* pList, uint16_t mID, NetEp_t* fromEp) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	817b      	strh	r3, [r7, #10]

	// A received RST message rejects a former send CON message or (optional) NON message send by us
	// A received ACK message acknowledges a former send CON message or (optional) NON message send by us
	// servers and notificators use CON only in responses, clients in requests
	while (pList != NULL) {
 8007ade:	e021      	b.n	8007b24 <CoAP_FindInteractionByMessageIdAndEp+0x54>
		if (((pList->pRespMsg != NULL && pList->pRespMsg->MessageID == mID) || (pList->pReqMsg != NULL && pList->pReqMsg->MessageID == mID)) && EpAreEqual(fromEp, &(pList->RemoteEp))) {
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <CoAP_FindInteractionByMessageIdAndEp+0x24>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	897a      	ldrh	r2, [r7, #10]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d009      	beq.n	8007b08 <CoAP_FindInteractionByMessageIdAndEp+0x38>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d010      	beq.n	8007b1e <CoAP_FindInteractionByMessageIdAndEp+0x4e>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	88db      	ldrh	r3, [r3, #6]
 8007b02:	897a      	ldrh	r2, [r7, #10]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d10a      	bne.n	8007b1e <CoAP_FindInteractionByMessageIdAndEp+0x4e>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 fd1e 	bl	800b550 <EpAreEqual>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <CoAP_FindInteractionByMessageIdAndEp+0x4e>
			return pList;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	e006      	b.n	8007b2c <CoAP_FindInteractionByMessageIdAndEp+0x5c>
		}
		pList = pList->next;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
	while (pList != NULL) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1da      	bne.n	8007ae0 <CoAP_FindInteractionByMessageIdAndEp+0x10>
	}

	return NULL;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <CoAP_DeleteInteraction>:

CoAP_Result_t _rom CoAP_DeleteInteraction(CoAP_Interaction_t* pInteractionToDelete) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	return CoAP_UnlinkInteractionFromList(&(CoAP.pInteractions), pInteractionToDelete, true);
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4803      	ldr	r0, [pc, #12]	; (8007b50 <CoAP_DeleteInteraction+0x1c>)
 8007b42:	f7ff fee6 	bl	8007912 <CoAP_UnlinkInteractionFromList>
 8007b46:	4603      	mov	r3, r0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000790 	.word	0x20000790

08007b54 <CoAP_EnqueueLastInteraction>:

CoAP_Result_t _rom CoAP_ResetInteractionByHandle(uint16_t MsgID, SocketHandle_t socketHandle, NetEp_t* RstEp) {
	return CoAP_UnlinkInteractionFromListByHandle(&(CoAP.pInteractions), MsgID, socketHandle, RstEp, true);
}

CoAP_Result_t _rom CoAP_EnqueueLastInteraction(CoAP_Interaction_t* pInteractionToEnqueue) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	return CoAP_MoveInteractionToListEnd(&(CoAP.pInteractions), pInteractionToEnqueue);
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4804      	ldr	r0, [pc, #16]	; (8007b70 <CoAP_EnqueueLastInteraction+0x1c>)
 8007b60:	f7ff ff3b 	bl	80079da <CoAP_MoveInteractionToListEnd>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000790 	.word	0x20000790

08007b74 <CoAP_StartNewClientInteraction>:

//we act as a CoAP Client (sending requests) in this interaction
CoAP_Result_t _rom CoAP_StartNewClientInteraction(CoAP_Message_t* pMsgReq, SocketHandle_t socketHandle, NetEp_t* ServerEp, CoAP_RespHandler_fn_t cb) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
	if (pMsgReq == NULL || CoAP_MsgIsRequest(pMsgReq) == false)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <CoAP_StartNewClientInteraction+0x26>
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 fbde 	bl	800934a <CoAP_MsgIsRequest>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f083 0301 	eor.w	r3, r3, #1
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <CoAP_StartNewClientInteraction+0x2a>
		return COAP_ERR_ARGUMENT;
 8007b9a:	230a      	movs	r3, #10
 8007b9c:	e021      	b.n	8007be2 <CoAP_StartNewClientInteraction+0x6e>

	CoAP_Interaction_t* newIA = CoAP_AllocNewInteraction();
 8007b9e:	f7ff fe67 	bl	8007870 <CoAP_AllocNewInteraction>
 8007ba2:	6178      	str	r0, [r7, #20]
	if (newIA == NULL)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <CoAP_StartNewClientInteraction+0x3a>
		return COAP_ERR_OUT_OF_MEMORY;
 8007baa:	230d      	movs	r3, #13
 8007bac:	e019      	b.n	8007be2 <CoAP_StartNewClientInteraction+0x6e>

	//attach request message
	newIA->pReqMsg = pMsgReq;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38

	newIA->socketHandle = socketHandle;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28
	CopyEndpoints(&(newIA->RemoteEp), ServerEp);
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f003 fd3b 	bl	800b63c <CopyEndpoints>
	newIA->RespCB = cb;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	661a      	str	r2, [r3, #96]	; 0x60

	newIA->Role = COAP_ROLE_CLIENT;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	711a      	strb	r2, [r3, #4]
	newIA->State = COAP_STATE_READY_TO_REQUEST;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	715a      	strb	r2, [r3, #5]

	CoAP_AppendInteractionToList(&(CoAP.pInteractions), newIA);
 8007bd8:	6979      	ldr	r1, [r7, #20]
 8007bda:	4804      	ldr	r0, [pc, #16]	; (8007bec <CoAP_StartNewClientInteraction+0x78>)
 8007bdc:	f7ff fecd 	bl	800797a <CoAP_AppendInteractionToList>

	return COAP_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000790 	.word	0x20000790

08007bf0 <CoAP_StartNewRequest>:
	INFO("- New GetRequest failed: Out of Memory\r\n");

	return COAP_ERR_OUT_OF_MEMORY;
}

CoAP_Result_t _rom CoAP_StartNewRequest(CoAP_MessageCode_t type, const char* UriString, SocketHandle_t socketHandle, NetEp_t* ServerEp, CoAP_RespHandler_fn_t cb, uint8_t *buf, size_t size) {
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf4:	b08e      	sub	sp, #56	; 0x38
 8007bf6:	af06      	add	r7, sp, #24
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
	if (type == EMPTY || type > REQ_LAST) {
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <CoAP_StartNewRequest+0x1e>
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	d90f      	bls.n	8007c2e <CoAP_StartNewRequest+0x3e>
		ERROR("- Invalid request type\r\n");
 8007c0e:	4925      	ldr	r1, [pc, #148]	; (8007ca4 <CoAP_StartNewRequest+0xb4>)
 8007c10:	4825      	ldr	r0, [pc, #148]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c12:	f014 f8a7 	bl	801bd64 <siprintf>
 8007c16:	4824      	ldr	r0, [pc, #144]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c18:	f000 fa08 	bl	800802c <hal_debug_puts>
 8007c1c:	4923      	ldr	r1, [pc, #140]	; (8007cac <CoAP_StartNewRequest+0xbc>)
 8007c1e:	4822      	ldr	r0, [pc, #136]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c20:	f014 f8a0 	bl	801bd64 <siprintf>
 8007c24:	4820      	ldr	r0, [pc, #128]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c26:	f000 fa01 	bl	800802c <hal_debug_puts>
		return COAP_ERR_ARGUMENT;
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	e035      	b.n	8007c9a <CoAP_StartNewRequest+0xaa>
	}

	CoAP_Message_t* pReqMsg = CoAP_CreateMessage(CON, type, CoAP_GetNextMid(), buf, size, size, CoAP_GenerateToken());
 8007c2e:	f002 f843 	bl	8009cb8 <CoAP_GetNextMid>
 8007c32:	4603      	mov	r3, r0
 8007c34:	4698      	mov	r8, r3
 8007c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c38:	b29c      	uxth	r4, r3
 8007c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3c:	b29d      	uxth	r5, r3
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 f848 	bl	8009cd8 <CoAP_GenerateToken>
 8007c48:	7bfe      	ldrb	r6, [r7, #15]
 8007c4a:	ab02      	add	r3, sp, #8
 8007c4c:	f107 0210 	add.w	r2, r7, #16
 8007c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c52:	c303      	stmia	r3!, {r0, r1}
 8007c54:	701a      	strb	r2, [r3, #0]
 8007c56:	9501      	str	r5, [sp, #4]
 8007c58:	9400      	str	r4, [sp, #0]
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	4631      	mov	r1, r6
 8007c60:	2000      	movs	r0, #0
 8007c62:	f001 fc19 	bl	8009498 <CoAP_CreateMessage>
 8007c66:	61f8      	str	r0, [r7, #28]

	if (pReqMsg != NULL) {
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00d      	beq.n	8007c8a <CoAP_StartNewRequest+0x9a>
		CoAP_AppendUriOptionsFromString(&(pReqMsg->pOptionsList), UriString);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	3318      	adds	r3, #24
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f004 f86b 	bl	800bd50 <CoAP_AppendUriOptionsFromString>
		return CoAP_StartNewClientInteraction(pReqMsg, socketHandle, ServerEp, cb);
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	69f8      	ldr	r0, [r7, #28]
 8007c82:	f7ff ff77 	bl	8007b74 <CoAP_StartNewClientInteraction>
 8007c86:	4603      	mov	r3, r0
 8007c88:	e007      	b.n	8007c9a <CoAP_StartNewRequest+0xaa>
	}

	INFO("- New GetRequest failed: Out of Memory\r\n");
 8007c8a:	4909      	ldr	r1, [pc, #36]	; (8007cb0 <CoAP_StartNewRequest+0xc0>)
 8007c8c:	4806      	ldr	r0, [pc, #24]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c8e:	f014 f869 	bl	801bd64 <siprintf>
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <CoAP_StartNewRequest+0xb8>)
 8007c94:	f000 f9ca 	bl	800802c <hal_debug_puts>

	return COAP_ERR_OUT_OF_MEMORY;
 8007c98:	230d      	movs	r3, #13
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	0801d450 	.word	0x0801d450
 8007ca8:	200007d8 	.word	0x200007d8
 8007cac:	0801d45c 	.word	0x0801d45c
 8007cb0:	0801d424 	.word	0x0801d424

08007cb4 <CoAP_StartNewServerInteraction>:
	}
	return COAP_OK;
}

//we act as a CoAP Server (receiving requests) in this interaction
CoAP_Result_t _rom CoAP_StartNewServerInteraction(CoAP_Message_t* pMsgReq, CoAP_Res_t* pRes, SocketHandle_t socketHandle, NetPacket_t* pPacket) {
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	b08f      	sub	sp, #60	; 0x3c
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	6178      	str	r0, [r7, #20]
 8007cbc:	6139      	str	r1, [r7, #16]
 8007cbe:	60fa      	str	r2, [r7, #12]
 8007cc0:	60bb      	str	r3, [r7, #8]
	if (!CoAP_MsgIsRequest(pMsgReq))
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	f001 fb41 	bl	800934a <CoAP_MsgIsRequest>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f083 0301 	eor.w	r3, r3, #1
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <CoAP_StartNewServerInteraction+0x24>
		return COAP_ERR_ARGUMENT;
 8007cd4:	230a      	movs	r3, #10
 8007cd6:	e07e      	b.n	8007dd6 <CoAP_StartNewServerInteraction+0x122>

	//NON or CON request
	NetEp_t* pReqEp = &(pPacket->remoteEp);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	623b      	str	r3, [r7, #32]
	CoAP_Interaction_t* pIA;

	//Set the CoAP resource to the requst message
	pMsgReq->pResource = pRes;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	621a      	str	r2, [r3, #32]

	//duplicate detection:
	//same request already received before?
	//iterate over all interactions
	for (pIA = CoAP.pInteractions; pIA != NULL; pIA = pIA->next) {
 8007ce4:	4b3e      	ldr	r3, [pc, #248]	; (8007de0 <CoAP_StartNewServerInteraction+0x12c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cea:	e03a      	b.n	8007d62 <CoAP_StartNewServerInteraction+0xae>
		if (pIA->Role == COAP_ROLE_SERVER && pIA->socketHandle == socketHandle && pIA->pReqMsg->MessageID == pMsgReq->MessageID && EpAreEqual(&(pIA->RemoteEp), pReqEp)) {
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d133      	bne.n	8007d5c <CoAP_StartNewServerInteraction+0xa8>
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d12e      	bne.n	8007d5c <CoAP_StartNewServerInteraction+0xa8>
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	88da      	ldrh	r2, [r3, #6]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	88db      	ldrh	r3, [r3, #6]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d127      	bne.n	8007d5c <CoAP_StartNewServerInteraction+0xa8>
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	3310      	adds	r3, #16
 8007d10:	6a39      	ldr	r1, [r7, #32]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f003 fc1c 	bl	800b550 <EpAreEqual>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01e      	beq.n	8007d5c <CoAP_StartNewServerInteraction+0xa8>
			//implements 4.5. "SHOULD"s
			if (pIA->pReqMsg->Type == CON && pIA->State == COAP_STATE_RESOURCE_POSTPONE_EMPTY_ACK_SENT) { //=> must be postponed resource with empty ack already sent, send it again
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	791b      	ldrb	r3, [r3, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d117      	bne.n	8007d58 <CoAP_StartNewServerInteraction+0xa4>
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	795b      	ldrb	r3, [r3, #5]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d113      	bne.n	8007d58 <CoAP_StartNewServerInteraction+0xa4>
				CoAP_SendEmptyAck(pIA->pReqMsg->MessageID, pIA->socketHandle, pPacket->remoteEp); //send another empty ack
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	88de      	ldrh	r6, [r3, #6]
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	607b      	str	r3, [r7, #4]
 8007d3c:	68bc      	ldr	r4, [r7, #8]
 8007d3e:	466d      	mov	r5, sp
 8007d40:	f104 0310 	add.w	r3, r4, #16
 8007d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007d4a:	f104 0308 	add.w	r3, r4, #8
 8007d4e:	cb0c      	ldmia	r3, {r2, r3}
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4630      	mov	r0, r6
 8007d54:	f001 fe00 	bl	8009958 <CoAP_SendEmptyAck>
			}

			//pIA->ReqReliabilityState

			return COAP_ERR_EXISTING;
 8007d58:	2311      	movs	r3, #17
 8007d5a:	e03c      	b.n	8007dd6 <CoAP_StartNewServerInteraction+0x122>
	for (pIA = CoAP.pInteractions; pIA != NULL; pIA = pIA->next) {
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1c1      	bne.n	8007cec <CoAP_StartNewServerInteraction+0x38>
		}
	}

	//no duplicate request found-> create a new interaction for this new request
	CoAP_Interaction_t* newIA = CoAP_AllocNewInteraction();
 8007d68:	f7ff fd82 	bl	8007870 <CoAP_AllocNewInteraction>
 8007d6c:	61f8      	str	r0, [r7, #28]

	if (newIA == NULL) {
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10f      	bne.n	8007d94 <CoAP_StartNewServerInteraction+0xe0>
		ERROR("(!) can't create new interaction - out of memory!\r\n");
 8007d74:	491b      	ldr	r1, [pc, #108]	; (8007de4 <CoAP_StartNewServerInteraction+0x130>)
 8007d76:	481c      	ldr	r0, [pc, #112]	; (8007de8 <CoAP_StartNewServerInteraction+0x134>)
 8007d78:	f013 fff4 	bl	801bd64 <siprintf>
 8007d7c:	481a      	ldr	r0, [pc, #104]	; (8007de8 <CoAP_StartNewServerInteraction+0x134>)
 8007d7e:	f000 f955 	bl	800802c <hal_debug_puts>
 8007d82:	491a      	ldr	r1, [pc, #104]	; (8007dec <CoAP_StartNewServerInteraction+0x138>)
 8007d84:	4818      	ldr	r0, [pc, #96]	; (8007de8 <CoAP_StartNewServerInteraction+0x134>)
 8007d86:	f013 ffed 	bl	801bd64 <siprintf>
 8007d8a:	4817      	ldr	r0, [pc, #92]	; (8007de8 <CoAP_StartNewServerInteraction+0x134>)
 8007d8c:	f000 f94e 	bl	800802c <hal_debug_puts>
		return COAP_ERR_OUT_OF_MEMORY;
 8007d90:	230d      	movs	r3, #13
 8007d92:	e020      	b.n	8007dd6 <CoAP_StartNewServerInteraction+0x122>
	}

	newIA->socketHandle = socketHandle;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	629a      	str	r2, [r3, #40]	; 0x28
	newIA->pRes = pRes;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	609a      	str	r2, [r3, #8]
	newIA->Role = COAP_ROLE_SERVER;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2201      	movs	r2, #1
 8007da4:	711a      	strb	r2, [r3, #4]
	newIA->State = COAP_STATE_HANDLE_REQUEST;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2201      	movs	r2, #1
 8007daa:	715a      	strb	r2, [r3, #5]
	newIA->ReqMetaInfo = pPacket->metaInfo;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	3340      	adds	r3, #64	; 0x40
 8007db2:	3220      	adds	r2, #32
 8007db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	newIA->pReqMsg = pMsgReq;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38

	CopyEndpoints(&(newIA->RemoteEp), pReqEp);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	6a39      	ldr	r1, [r7, #32]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f003 fc38 	bl	800b63c <CopyEndpoints>
	CoAP_AppendInteractionToList(&(CoAP.pInteractions), newIA);
 8007dcc:	69f9      	ldr	r1, [r7, #28]
 8007dce:	4804      	ldr	r0, [pc, #16]	; (8007de0 <CoAP_StartNewServerInteraction+0x12c>)
 8007dd0:	f7ff fdd3 	bl	800797a <CoAP_AppendInteractionToList>
	return COAP_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	372c      	adds	r7, #44	; 0x2c
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000790 	.word	0x20000790
 8007de4:	0801d450 	.word	0x0801d450
 8007de8:	200007d8 	.word	0x200007d8
 8007dec:	0801d4b0 	.word	0x0801d4b0

08007df0 <CoAP_RemoveInteractionsObserver>:

CoAP_Result_t _rom CoAP_RemoveInteractionsObserver(CoAP_Interaction_t* pIA, CoAP_Token_t token) {
 8007df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	4638      	mov	r0, r7
 8007dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	return CoAP_RemoveObserverFromResource(&((pIA->pRes)->pListObservers), pIA->socketHandle, &(pIA->RemoteEp), token);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f103 0418 	add.w	r4, r3, #24
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f103 0610 	add.w	r6, r3, #16
 8007e10:	466b      	mov	r3, sp
 8007e12:	1d3a      	adds	r2, r7, #4
 8007e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e18:	6018      	str	r0, [r3, #0]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	7019      	strb	r1, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	4632      	mov	r2, r6
 8007e22:	4629      	mov	r1, r5
 8007e24:	4620      	mov	r0, r4
 8007e26:	f003 f941 	bl	800b0ac <CoAP_RemoveObserverFromResource>
 8007e2a:	4603      	mov	r3, r0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e34 <CoAP_HandleObservationInReq>:

CoAP_Result_t _rom CoAP_HandleObservationInReq(CoAP_Interaction_t* pIA) {
 8007e34:	b5b0      	push	{r4, r5, r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	6078      	str	r0, [r7, #4]
	if (pIA == NULL || pIA->pReqMsg == NULL) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <CoAP_HandleObservationInReq+0x16>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <CoAP_HandleObservationInReq+0x1a>
		return COAP_ERR_ARGUMENT;    //safety checks
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e0e4      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
	}

	CoAP_Result_t res;
	uint32_t obsVal = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
	CoAP_Observer_t* pObserver = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60bb      	str	r3, [r7, #8]
	CoAP_Observer_t* pExistingObserver = (pIA->pRes)->pListObservers;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	61fb      	str	r3, [r7, #28]

	if (pIA->pRes->Notifier == NULL) {
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <CoAP_HandleObservationInReq+0x38>
		return COAP_ERR_NOT_FOUND;            //resource does not support observe
 8007e68:	230f      	movs	r3, #15
 8007e6a:	e0d5      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
	}
	if ((res = GetObserveOptionFromMsg(pIA->pReqMsg, &obsVal)) != COAP_OK) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	f107 020c 	add.w	r2, r7, #12
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f003 fe19 	bl	800baae <GetObserveOptionFromMsg>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	74fb      	strb	r3, [r7, #19]
 8007e80:	7cfb      	ldrb	r3, [r7, #19]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <CoAP_HandleObservationInReq+0x56>
		return res; //if no observe option in req function can't do anything
 8007e86:	7cfb      	ldrb	r3, [r7, #19]
 8007e88:	e0c6      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
	}

	//Client registers
	if (obsVal == OBSERVE_OPT_REGISTER) { // val == 0
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d176      	bne.n	8007f7e <CoAP_HandleObservationInReq+0x14a>

		//Alloc memory for new Observer
		pObserver = CoAP_AllocNewObserver();
 8007e90:	f003 fe6c 	bl	800bb6c <CoAP_AllocNewObserver>
 8007e94:	4603      	mov	r3, r0
 8007e96:	60bb      	str	r3, [r7, #8]
		if (pObserver == NULL) {
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <CoAP_HandleObservationInReq+0x6e>
			return COAP_ERR_OUT_OF_MEMORY;
 8007e9e:	230d      	movs	r3, #13
 8007ea0:	e0ba      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
		}

		//Copy relevant information for observation from current interaction
		pObserver->Ep = pIA->RemoteEp;
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4615      	mov	r5, r2
 8007ea8:	f103 0410 	add.w	r4, r3, #16
 8007eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007eb4:	e885 0003 	stmia.w	r5, {r0, r1}
		pObserver->socketHandle = pIA->socketHandle;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007ebe:	619a      	str	r2, [r3, #24]
		pObserver->Token = pIA->pReqMsg->Token;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	321d      	adds	r2, #29
 8007ec8:	330c      	adds	r3, #12
 8007eca:	cb03      	ldmia	r3!, {r0, r1}
 8007ecc:	6010      	str	r0, [r2, #0]
 8007ece:	6051      	str	r1, [r2, #4]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	7213      	strb	r3, [r2, #8]
		pObserver->next = NULL;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

		//Copy relevant Options from Request (uri-query, observe)
		//Note: uri-path is not relevant since observers are fixed to its resource
		CoAP_option_t* pOption = pIA->pReqMsg->pOptionsList;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	61bb      	str	r3, [r7, #24]
		while (pOption != NULL) {
 8007ee2:	e01f      	b.n	8007f24 <CoAP_HandleObservationInReq+0xf0>
			if (pOption->Number == OPT_NUM_URI_QUERY || pOption->Number == OPT_NUM_OBSERVE) {
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	889b      	ldrh	r3, [r3, #4]
 8007ee8:	2b0f      	cmp	r3, #15
 8007eea:	d003      	beq.n	8007ef4 <CoAP_HandleObservationInReq+0xc0>
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	889b      	ldrh	r3, [r3, #4]
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	d114      	bne.n	8007f1e <CoAP_HandleObservationInReq+0xea>
				//create copy from volatile Iinteraction msg options
				if (CoAP_AppendOptionToList(&(pObserver->pOptList), pOption->Number, pOption->Value, pOption->Length) != COAP_OK) {
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	8899      	ldrh	r1, [r3, #4]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	f002 fd79 	bl	800a9fc <CoAP_AppendOptionToList>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <CoAP_HandleObservationInReq+0xea>
					CoAP_FreeObserver(&pObserver);
 8007f10:	f107 0308 	add.w	r3, r7, #8
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fe3f 	bl	800bb98 <CoAP_FreeObserver>
					return COAP_ERR_OUT_OF_MEMORY;
 8007f1a:	230d      	movs	r3, #13
 8007f1c:	e07c      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
				}
			}
			pOption = pOption->next;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	61bb      	str	r3, [r7, #24]
		while (pOption != NULL) {
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1dc      	bne.n	8007ee4 <CoAP_HandleObservationInReq+0xb0>
		}

		//delete eventually existing same observer
		while (pExistingObserver != NULL) { //found right existing observation -> delete it
 8007f2a:	e01b      	b.n	8007f64 <CoAP_HandleObservationInReq+0x130>
			// Changed: Do NOT check the token. if socket and EP are the same, it's the same observer
			// We do NOT allow to observe the same resource twice from the same observer
			// CoAP_TokenEqual(pIA->pReqMsg->Token, pExistingObserver->Token) &&
			if (pIA->socketHandle == pExistingObserver->socketHandle && EpAreEqual(&(pIA->RemoteEp), &(pExistingObserver->Ep))) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d112      	bne.n	8007f5e <CoAP_HandleObservationInReq+0x12a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3310      	adds	r3, #16
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f003 fb05 	bl	800b550 <EpAreEqual>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <CoAP_HandleObservationInReq+0x12a>
				CoAP_UnlinkObserverFromList(&((pIA->pRes)->pListObservers), pExistingObserver, true);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	3318      	adds	r3, #24
 8007f52:	2201      	movs	r2, #1
 8007f54:	69f9      	ldr	r1, [r7, #28]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f003 fe70 	bl	800bc3c <CoAP_UnlinkObserverFromList>
				break;
 8007f5c:	e005      	b.n	8007f6a <CoAP_HandleObservationInReq+0x136>
			}
			pExistingObserver = pExistingObserver->next;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	61fb      	str	r3, [r7, #28]
		while (pExistingObserver != NULL) { //found right existing observation -> delete it
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e0      	bne.n	8007f2c <CoAP_HandleObservationInReq+0xf8>
		}

		//attach/update observer to resource
		return CoAP_AppendObserverToList(&((pIA->pRes)->pListObservers), pObserver);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	3318      	adds	r3, #24
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f003 fe31 	bl	800bbdc <CoAP_AppendObserverToList>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	e04c      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>

		//Client cancels observation actively (this is an alternative to simply forget the req token and send rst on next notification)
	} else if (obsVal == OBSERVE_OPT_DEREGISTER) { // val == 1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d146      	bne.n	8008012 <CoAP_HandleObservationInReq+0x1de>
		//find matching observer in resource observers-list
		CoAP_RemoveInteractionsObserver(pIA, pIA->pReqMsg->Token); //remove observer identified by token, socketHandle and remote EP from resource
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	330c      	adds	r3, #12
 8007f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ff2f 	bl	8007df0 <CoAP_RemoveInteractionsObserver>

		//delete/abort any pending notification interaction
		CoAP_Interaction_t* pIApending;
		for (pIApending = CoAP.pInteractions; pIApending != NULL; pIApending = pIApending->next) {
 8007f92:	4b23      	ldr	r3, [pc, #140]	; (8008020 <CoAP_HandleObservationInReq+0x1ec>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	e037      	b.n	800800a <CoAP_HandleObservationInReq+0x1d6>
			if (pIApending->Role == COAP_ROLE_NOTIFICATION) {
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	791b      	ldrb	r3, [r3, #4]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d130      	bne.n	8008004 <CoAP_HandleObservationInReq+0x1d0>
				if (CoAP_TokenEqual(pIApending->pRespMsg->Token, pIA->pReqMsg->Token)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007faa:	466b      	mov	r3, sp
 8007fac:	f102 0110 	add.w	r1, r2, #16
 8007fb0:	c903      	ldmia	r1, {r0, r1}
 8007fb2:	6018      	str	r0, [r3, #0]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	7019      	strb	r1, [r3, #0]
 8007fb8:	68d3      	ldr	r3, [r2, #12]
 8007fba:	f104 020c 	add.w	r2, r4, #12
 8007fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fc0:	f001 f98c 	bl	80092dc <CoAP_TokenEqual>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01c      	beq.n	8008004 <CoAP_HandleObservationInReq+0x1d0>
						&& pIApending->socketHandle == pIA->socketHandle
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d116      	bne.n	8008004 <CoAP_HandleObservationInReq+0x1d0>
						&& EpAreEqual(&(pIApending->RemoteEp), &(pIA->RemoteEp))) {
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f103 0210 	add.w	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3310      	adds	r3, #16
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f003 fab4 	bl	800b550 <EpAreEqual>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <CoAP_HandleObservationInReq+0x1d0>
					INFO("Abort of pending notification interaction\r\n");
 8007fee:	490d      	ldr	r1, [pc, #52]	; (8008024 <CoAP_HandleObservationInReq+0x1f0>)
 8007ff0:	480d      	ldr	r0, [pc, #52]	; (8008028 <CoAP_HandleObservationInReq+0x1f4>)
 8007ff2:	f013 feb7 	bl	801bd64 <siprintf>
 8007ff6:	480c      	ldr	r0, [pc, #48]	; (8008028 <CoAP_HandleObservationInReq+0x1f4>)
 8007ff8:	f000 f818 	bl	800802c <hal_debug_puts>
					CoAP_DeleteInteraction(pIApending);
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	f7ff fd99 	bl	8007b34 <CoAP_DeleteInteraction>
					break;
 8008002:	e008      	b.n	8008016 <CoAP_HandleObservationInReq+0x1e2>
		for (pIApending = CoAP.pInteractions; pIApending != NULL; pIApending = pIApending->next) {
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1c4      	bne.n	8007f9a <CoAP_HandleObservationInReq+0x166>
 8008010:	e001      	b.n	8008016 <CoAP_HandleObservationInReq+0x1e2>
				}
			}
		}

	} else {
		return COAP_BAD_OPTION_VAL;
 8008012:	2315      	movs	r3, #21
 8008014:	e000      	b.n	8008018 <CoAP_HandleObservationInReq+0x1e4>
	}

	return COAP_ERR_NOT_FOUND;
 8008016:	230f      	movs	r3, #15
}
 8008018:	4618      	mov	r0, r3
 800801a:	3720      	adds	r7, #32
 800801c:	46bd      	mov	sp, r7
 800801e:	bdb0      	pop	{r4, r5, r7, pc}
 8008020:	20000790 	.word	0x20000790
 8008024:	0801d4e4 	.word	0x0801d4e4
 8008028:	200007d8 	.word	0x200007d8

0800802c <hal_debug_puts>:
#include "coap.h"
#include "liblobaro_coap.h"

CoAP_t CoAP = { .pInteractions = NULL, .api = { 0 } };

void hal_debug_puts(char* s) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	if (CoAP.api.debugPuts != NULL) {
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <hal_debug_puts+0x20>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <hal_debug_puts+0x18>
		CoAP.api.debugPuts(s);
 800803c:	4b03      	ldr	r3, [pc, #12]	; (800804c <hal_debug_puts+0x20>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
	}
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20000790 	.word	0x20000790

08008050 <CoAP_HandleIncomingPacket>:

// Called by network interfaces to pass rawData which is parsed to CoAP messages.
// lifetime of pckt only during function invoke
// can be called from irq since more expensive work is done in CoAP_doWork loop
void _ram CoAP_HandleIncomingPacket(SocketHandle_t socketHandle, NetPacket_t* pPacket) {
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	b091      	sub	sp, #68	; 0x44
 8008054:	af0a      	add	r7, sp, #40	; 0x28
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	CoAP_Message_t* pMsg = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	60bb      	str	r3, [r7, #8]
	bool isRequest = false;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
	CoAP_Res_t* pRes = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
	CoAP_Result_t res = COAP_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73bb      	strb	r3, [r7, #14]

	// Try to parse packet of bytes into CoAP message
	INFO("\r\no<<<<<<<<<<<<<<<<<<<<<<\r\nNew Datagram received [%d Bytes], Interface #%p\r\n", pPacket->size, socketHandle); //PrintRawPacket(pckt);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	49a9      	ldr	r1, [pc, #676]	; (8008318 <CoAP_HandleIncomingPacket+0x2c8>)
 8008074:	48a9      	ldr	r0, [pc, #676]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008076:	f013 fe75 	bl	801bd64 <siprintf>
 800807a:	48a8      	ldr	r0, [pc, #672]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 800807c:	f7ff ffd6 	bl	800802c <hal_debug_puts>
	INFO("Sending Endpoint: ");
 8008080:	49a7      	ldr	r1, [pc, #668]	; (8008320 <CoAP_HandleIncomingPacket+0x2d0>)
 8008082:	48a6      	ldr	r0, [pc, #664]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008084:	f013 fe6e 	bl	801bd64 <siprintf>
 8008088:	48a4      	ldr	r0, [pc, #656]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 800808a:	f7ff ffcf 	bl	800802c <hal_debug_puts>
	PrintEndpoint(&(pPacket->remoteEp));
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	4618      	mov	r0, r3
 8008094:	f003 f924 	bl	800b2e0 <PrintEndpoint>
	INFO("\n");
 8008098:	49a2      	ldr	r1, [pc, #648]	; (8008324 <CoAP_HandleIncomingPacket+0x2d4>)
 800809a:	48a0      	ldr	r0, [pc, #640]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 800809c:	f013 fe62 	bl	801bd64 <siprintf>
 80080a0:	489e      	ldr	r0, [pc, #632]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 80080a2:	f7ff ffc3 	bl	800802c <hal_debug_puts>

	if ((res = CoAP_ParseMessageFromDatagram(pPacket->pData, pPacket->size, &pMsg)) == COAP_OK) {
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	f107 0208 	add.w	r2, r7, #8
 80080b2:	4619      	mov	r1, r3
 80080b4:	f001 fa5c 	bl	8009570 <CoAP_ParseMessageFromDatagram>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d115      	bne.n	80080ee <CoAP_HandleIncomingPacket+0x9e>
		CoAP_PrintMsg(pMsg); // allocates the needed amount of ram
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fe35 	bl	8009d34 <CoAP_PrintMsg>
		INFO("o<<<<<<<<<<<<<<<<<<<<<<\r\n");
 80080ca:	4997      	ldr	r1, [pc, #604]	; (8008328 <CoAP_HandleIncomingPacket+0x2d8>)
 80080cc:	4893      	ldr	r0, [pc, #588]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 80080ce:	f013 fe49 	bl	801bd64 <siprintf>
 80080d2:	4892      	ldr	r0, [pc, #584]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 80080d4:	f7ff ffaa 	bl	800802c <hal_debug_puts>
		CoAP_free_Message(&pMsg);
		return;
	}
#endif

	isRequest = CoAP_MsgIsRequest(pMsg);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4618      	mov	r0, r3
 80080dc:	f001 f935 	bl	800934a <CoAP_MsgIsRequest>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]

	DEBUG_COAP("Filter out bad CODE/TYPE combinations\r\n");
	// Filter out bad CODE/TYPE combinations (Table 1, RFC7252 4.3.) by silently ignoring them
	if (pMsg->Type == CON && pMsg->Code == EMPTY) {
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	791b      	ldrb	r3, [r3, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d134      	bne.n	8008156 <CoAP_HandleIncomingPacket+0x106>
 80080ec:	e019      	b.n	8008122 <CoAP_HandleIncomingPacket+0xd2>
		ERROR("ParseResult: ");
 80080ee:	498f      	ldr	r1, [pc, #572]	; (800832c <CoAP_HandleIncomingPacket+0x2dc>)
 80080f0:	488a      	ldr	r0, [pc, #552]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 80080f2:	f013 fe37 	bl	801bd64 <siprintf>
 80080f6:	4889      	ldr	r0, [pc, #548]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 80080f8:	f7ff ff98 	bl	800802c <hal_debug_puts>
 80080fc:	498c      	ldr	r1, [pc, #560]	; (8008330 <CoAP_HandleIncomingPacket+0x2e0>)
 80080fe:	4887      	ldr	r0, [pc, #540]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008100:	f013 fe30 	bl	801bd64 <siprintf>
 8008104:	4885      	ldr	r0, [pc, #532]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008106:	f7ff ff91 	bl	800802c <hal_debug_puts>
		CoAP_PrintResultValue(res);
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4618      	mov	r0, r3
 800810e:	f002 f891 	bl	800a234 <CoAP_PrintResultValue>
		INFO("o<<<<<<<<<<<<<<<<<<<<<<\r\n");
 8008112:	4985      	ldr	r1, [pc, #532]	; (8008328 <CoAP_HandleIncomingPacket+0x2d8>)
 8008114:	4881      	ldr	r0, [pc, #516]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008116:	f013 fe25 	bl	801bd64 <siprintf>
 800811a:	4880      	ldr	r0, [pc, #512]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 800811c:	f7ff ff86 	bl	800802c <hal_debug_puts>
		return; //very early parsing fail, coap parse was a total fail can't do anything for remote user, complete ignore of packet
 8008120:	e24d      	b.n	80085be <CoAP_HandleIncomingPacket+0x56e>
	if (pMsg->Type == CON && pMsg->Code == EMPTY) {
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d115      	bne.n	8008156 <CoAP_HandleIncomingPacket+0x106>
		CoAP_SendEmptyRST(pMsg->MessageID, socketHandle, pPacket->remoteEp); //a.k.a "CoAP Ping"
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	88de      	ldrh	r6, [r3, #6]
 800812e:	683c      	ldr	r4, [r7, #0]
 8008130:	466d      	mov	r5, sp
 8008132:	f104 0310 	add.w	r3, r4, #16
 8008136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008138:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800813c:	f104 0308 	add.w	r3, r4, #8
 8008140:	cb0c      	ldmia	r3, {r2, r3}
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4630      	mov	r0, r6
 8008146:	f001 fc66 	bl	8009a16 <CoAP_SendEmptyRST>
		CoAP_free_Message(&pMsg); //free if not used inside interaction
 800814a:	f107 0308 	add.w	r3, r7, #8
 800814e:	4618      	mov	r0, r3
 8008150:	f001 f92a 	bl	80093a8 <CoAP_free_Message>
		// coap_mem_stats();
		return;
 8008154:	e233      	b.n	80085be <CoAP_HandleIncomingPacket+0x56e>
	} else if (pMsg->Type == ACK && isRequest) {
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d103      	bne.n	8008166 <CoAP_HandleIncomingPacket+0x116>
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 8210 	bne.w	8008586 <CoAP_HandleIncomingPacket+0x536>
		goto END;
	} else if (pMsg->Type == RST && pMsg->Code != EMPTY) {
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	791b      	ldrb	r3, [r3, #4]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d104      	bne.n	8008178 <CoAP_HandleIncomingPacket+0x128>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	795b      	ldrb	r3, [r3, #5]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f040 8209 	bne.w	800858a <CoAP_HandleIncomingPacket+0x53a>
		goto END;
	} else if (pMsg->Type == NON && pMsg->Code == EMPTY) {
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	791b      	ldrb	r3, [r3, #4]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d104      	bne.n	800818a <CoAP_HandleIncomingPacket+0x13a>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	795b      	ldrb	r3, [r3, #5]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 8202 	beq.w	800858e <CoAP_HandleIncomingPacket+0x53e>
	}

	//INFO("Find the request handler or send 4.04\r\n");
	// Requested uri present?
	// Then find the handler, else send 4.04 response
	if (isRequest) {
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d050      	beq.n	8008232 <CoAP_HandleIncomingPacket+0x1e2>
		pRes = CoAP_FindResourceByUri(NULL, pMsg->pOptionsList);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4619      	mov	r1, r3
 8008196:	2000      	movs	r0, #0
 8008198:	f002 feaa 	bl	800aef0 <CoAP_FindResourceByUri>
 800819c:	6178      	str	r0, [r7, #20]
		if (pRes == NULL || pRes->Handler == NULL) { //unknown resource requested
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <CoAP_HandleIncomingPacket+0x15c>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d142      	bne.n	8008232 <CoAP_HandleIncomingPacket+0x1e2>
			if (pMsg->Type == CON) {
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	791b      	ldrb	r3, [r3, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11e      	bne.n	80081f2 <CoAP_HandleIncomingPacket+0x1a2>
				CoAP_SendShortResp(ACK, RESP_NOT_FOUND_4_04, pMsg->MessageID, pMsg->Token, socketHandle, pPacket->remoteEp);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 80081ba:	68be      	ldr	r6, [r7, #8]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	ad03      	add	r5, sp, #12
 80081c0:	f103 0408 	add.w	r4, r3, #8
 80081c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	466b      	mov	r3, sp
 80081d6:	f106 0210 	add.w	r2, r6, #16
 80081da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081de:	6018      	str	r0, [r3, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	7019      	strb	r1, [r3, #0]
 80081e4:	68f3      	ldr	r3, [r6, #12]
 80081e6:	4662      	mov	r2, ip
 80081e8:	2184      	movs	r1, #132	; 0x84
 80081ea:	2002      	movs	r0, #2
 80081ec:	f001 fbdf 	bl	80099ae <CoAP_SendShortResp>
			} else { // usually NON, but we better catch all
				CoAP_SendShortResp(NON, RESP_NOT_FOUND_4_04, CoAP_GetNextMid(), pMsg->Token, socketHandle, pPacket->remoteEp);
			}
			goto END;
 80081f0:	e1dc      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
				CoAP_SendShortResp(NON, RESP_NOT_FOUND_4_04, CoAP_GetNextMid(), pMsg->Token, socketHandle, pPacket->remoteEp);
 80081f2:	f001 fd61 	bl	8009cb8 <CoAP_GetNextMid>
 80081f6:	4603      	mov	r3, r0
 80081f8:	469c      	mov	ip, r3
 80081fa:	68be      	ldr	r6, [r7, #8]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	ad03      	add	r5, sp, #12
 8008200:	f103 0408 	add.w	r4, r3, #8
 8008204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008208:	e894 0003 	ldmia.w	r4, {r0, r1}
 800820c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	466b      	mov	r3, sp
 8008216:	f106 0210 	add.w	r2, r6, #16
 800821a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800821e:	6018      	str	r0, [r3, #0]
 8008220:	3304      	adds	r3, #4
 8008222:	7019      	strb	r1, [r3, #0]
 8008224:	68f3      	ldr	r3, [r6, #12]
 8008226:	4662      	mov	r2, ip
 8008228:	2184      	movs	r1, #132	; 0x84
 800822a:	2001      	movs	r0, #1
 800822c:	f001 fbbf 	bl	80099ae <CoAP_SendShortResp>
			goto END;
 8008230:	e1bc      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		}
	}

	//INFO("Check for critical options\r\n");
	// Unknown critical Option check
	uint16_t criticalOptNum = CoAP_CheckForUnknownCriticalOption(pMsg->pOptionsList); // !=0 if at least one unknown option found
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	4618      	mov	r0, r3
 8008238:	f002 fca8 	bl	800ab8c <CoAP_CheckForUnknownCriticalOption>
 800823c:	4603      	mov	r3, r0
 800823e:	81bb      	strh	r3, [r7, #12]
	if (criticalOptNum) {
 8008240:	89bb      	ldrh	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d048      	beq.n	80082d8 <CoAP_HandleIncomingPacket+0x288>
		INFO("- (!) Received msg has unknown critical option!!!\r\n");
 8008246:	493b      	ldr	r1, [pc, #236]	; (8008334 <CoAP_HandleIncomingPacket+0x2e4>)
 8008248:	4834      	ldr	r0, [pc, #208]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 800824a:	f013 fd8b 	bl	801bd64 <siprintf>
 800824e:	4833      	ldr	r0, [pc, #204]	; (800831c <CoAP_HandleIncomingPacket+0x2cc>)
 8008250:	f7ff feec 	bl	800802c <hal_debug_puts>
		if (pMsg->Type == NON || pMsg->Type == ACK) {
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	791b      	ldrb	r3, [r3, #4]
 8008258:	2b01      	cmp	r3, #1
 800825a:	f000 819a 	beq.w	8008592 <CoAP_HandleIncomingPacket+0x542>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	791b      	ldrb	r3, [r3, #4]
 8008262:	2b02      	cmp	r3, #2
 8008264:	f000 8195 	beq.w	8008592 <CoAP_HandleIncomingPacket+0x542>
			// NON messages are just silently ignored
			goto END;
		} else if (pMsg->Type == CON) {
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	791b      	ldrb	r3, [r3, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8192 	bne.w	8008596 <CoAP_HandleIncomingPacket+0x546>
			if (isRequest) {
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01e      	beq.n	80082b6 <CoAP_HandleIncomingPacket+0x266>
				//todo: add diagnostic payload which option rejectet
				CoAP_SendShortResp(ACK, RESP_BAD_OPTION_4_02, pMsg->MessageID, pMsg->Token, socketHandle, pPacket->remoteEp);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800827e:	68be      	ldr	r6, [r7, #8]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	ad03      	add	r5, sp, #12
 8008284:	f103 0408 	add.w	r4, r3, #8
 8008288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800828a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800828c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008290:	e885 0003 	stmia.w	r5, {r0, r1}
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	9302      	str	r3, [sp, #8]
 8008298:	466b      	mov	r3, sp
 800829a:	f106 0210 	add.w	r2, r6, #16
 800829e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082a2:	6018      	str	r0, [r3, #0]
 80082a4:	3304      	adds	r3, #4
 80082a6:	7019      	strb	r1, [r3, #0]
 80082a8:	68f3      	ldr	r3, [r6, #12]
 80082aa:	4662      	mov	r2, ip
 80082ac:	2182      	movs	r1, #130	; 0x82
 80082ae:	2002      	movs	r0, #2
 80082b0:	f001 fb7d 	bl	80099ae <CoAP_SendShortResp>
			} else {
				//reject externals servers response
				CoAP_SendEmptyRST(pMsg->MessageID, socketHandle, pPacket->remoteEp);
			}
		}
		goto END;
 80082b4:	e16f      	b.n	8008596 <CoAP_HandleIncomingPacket+0x546>
				CoAP_SendEmptyRST(pMsg->MessageID, socketHandle, pPacket->remoteEp);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	88de      	ldrh	r6, [r3, #6]
 80082ba:	683c      	ldr	r4, [r7, #0]
 80082bc:	466d      	mov	r5, sp
 80082be:	f104 0310 	add.w	r3, r4, #16
 80082c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80082c8:	f104 0308 	add.w	r3, r4, #8
 80082cc:	cb0c      	ldmia	r3, {r2, r3}
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	4630      	mov	r0, r6
 80082d2:	f001 fba0 	bl	8009a16 <CoAP_SendEmptyRST>
		goto END;
 80082d6:	e15e      	b.n	8008596 <CoAP_HandleIncomingPacket+0x546>
	//*****************

	//INFO("Prechecks done. Handle message by type\r\n");
	// try to include message into new or existing server/client interaction

	CoAP_Interaction_t* pIA = CoAP_FindInteractionByMessageIdAndEp(CoAP.pInteractions, pMsg->MessageID, &(pPacket->remoteEp));
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <CoAP_HandleIncomingPacket+0x2e8>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	88d9      	ldrh	r1, [r3, #6]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	461a      	mov	r2, r3
 80082e6:	f7ff fbf3 	bl	8007ad0 <CoAP_FindInteractionByMessageIdAndEp>
 80082ea:	6138      	str	r0, [r7, #16]

	if (pIA != NULL) {
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <CoAP_HandleIncomingPacket+0x2a8>
		pIA->SleepUntil = 0; // Wakeup interaction
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2200      	movs	r2, #0
 80082f6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	switch (pMsg->Type) {
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d01d      	beq.n	800833c <CoAP_HandleIncomingPacket+0x2ec>
 8008300:	2b03      	cmp	r3, #3
 8008302:	f300 814a 	bgt.w	800859a <CoAP_HandleIncomingPacket+0x54a>
 8008306:	2b01      	cmp	r3, #1
 8008308:	dc02      	bgt.n	8008310 <CoAP_HandleIncomingPacket+0x2c0>
 800830a:	2b00      	cmp	r3, #0
 800830c:	da73      	bge.n	80083f6 <CoAP_HandleIncomingPacket+0x3a6>
		}

		break;
	}
	default: {
		goto END;
 800830e:	e144      	b.n	800859a <CoAP_HandleIncomingPacket+0x54a>
	switch (pMsg->Type) {
 8008310:	2b02      	cmp	r3, #2
 8008312:	d026      	beq.n	8008362 <CoAP_HandleIncomingPacket+0x312>
		goto END;
 8008314:	e141      	b.n	800859a <CoAP_HandleIncomingPacket+0x54a>
 8008316:	bf00      	nop
 8008318:	0801d530 	.word	0x0801d530
 800831c:	200007d8 	.word	0x200007d8
 8008320:	0801d580 	.word	0x0801d580
 8008324:	0801d594 	.word	0x0801d594
 8008328:	0801d598 	.word	0x0801d598
 800832c:	0801d5b4 	.word	0x0801d5b4
 8008330:	0801d5c0 	.word	0x0801d5c0
 8008334:	0801d5d0 	.word	0x0801d5d0
 8008338:	20000790 	.word	0x20000790
		if (pIA == NULL) {
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <CoAP_HandleIncomingPacket+0x308>
			INFO("- (?) Got Reset on (no more?) existing message id: %d\r\n", pMsg->MessageID);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	88db      	ldrh	r3, [r3, #6]
 8008346:	461a      	mov	r2, r3
 8008348:	499e      	ldr	r1, [pc, #632]	; (80085c4 <CoAP_HandleIncomingPacket+0x574>)
 800834a:	489f      	ldr	r0, [pc, #636]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 800834c:	f013 fd0a 	bl	801bd64 <siprintf>
 8008350:	489d      	ldr	r0, [pc, #628]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 8008352:	f7ff fe6b 	bl	800802c <hal_debug_puts>
			goto END;
 8008356:	e129      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		pIA->ResConfirmState = RST_SEND;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		goto END;
 8008360:	e124      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		if (pIA == NULL) {
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <CoAP_HandleIncomingPacket+0x32e>
			INFO("- (?) Got ACK on (no more?) existing message id: %d\r\n", pMsg->MessageID);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	88db      	ldrh	r3, [r3, #6]
 800836c:	461a      	mov	r2, r3
 800836e:	4997      	ldr	r1, [pc, #604]	; (80085cc <CoAP_HandleIncomingPacket+0x57c>)
 8008370:	4895      	ldr	r0, [pc, #596]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 8008372:	f013 fcf7 	bl	801bd64 <siprintf>
 8008376:	4894      	ldr	r0, [pc, #592]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 8008378:	f7ff fe58 	bl	800802c <hal_debug_puts>
			goto END;
 800837c:	e116      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		pIA->ResConfirmState = ACK_SEND;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		if (pMsg->Code != EMPTY) {
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	795b      	ldrb	r3, [r3, #5]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8107 	beq.w	800859e <CoAP_HandleIncomingPacket+0x54e>
			if (pIA->Role == COAP_ROLE_CLIENT && CoAP_TokenEqual(pIA->pReqMsg->Token, pMsg->Token) && pIA->State == COAP_STATE_WAITING_RESPONSE) {
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	791b      	ldrb	r3, [r3, #4]
 8008394:	2b03      	cmp	r3, #3
 8008396:	d126      	bne.n	80083e6 <CoAP_HandleIncomingPacket+0x396>
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	466b      	mov	r3, sp
 80083a0:	f102 0110 	add.w	r1, r2, #16
 80083a4:	c903      	ldmia	r1, {r0, r1}
 80083a6:	6018      	str	r0, [r3, #0]
 80083a8:	3304      	adds	r3, #4
 80083aa:	7019      	strb	r1, [r3, #0]
 80083ac:	68d3      	ldr	r3, [r2, #12]
 80083ae:	f104 020c 	add.w	r2, r4, #12
 80083b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80083b4:	f000 ff92 	bl	80092dc <CoAP_TokenEqual>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <CoAP_HandleIncomingPacket+0x396>
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	d10f      	bne.n	80083e6 <CoAP_HandleIncomingPacket+0x396>
				if (pIA->pRespMsg != NULL) {
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <CoAP_HandleIncomingPacket+0x388>
					CoAP_free_Message(&(pIA->pRespMsg)); //free eventually present older response (todo: check if this is possible!?)
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	334c      	adds	r3, #76	; 0x4c
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 ffe8 	bl	80093a8 <CoAP_free_Message>
				pIA->pRespMsg = pMsg; //attach just received message for further actions in IA [client] state-machine & return
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	64da      	str	r2, [r3, #76]	; 0x4c
				pIA->State = COAP_STATE_HANDLE_RESPONSE;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2209      	movs	r2, #9
 80083e2:	715a      	strb	r2, [r3, #5]
				return;
 80083e4:	e0eb      	b.n	80085be <CoAP_HandleIncomingPacket+0x56e>
				INFO("- could not piggybacked response to any request!\r\n");
 80083e6:	497a      	ldr	r1, [pc, #488]	; (80085d0 <CoAP_HandleIncomingPacket+0x580>)
 80083e8:	4877      	ldr	r0, [pc, #476]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 80083ea:	f013 fcbb 	bl	801bd64 <siprintf>
 80083ee:	4876      	ldr	r0, [pc, #472]	; (80085c8 <CoAP_HandleIncomingPacket+0x578>)
 80083f0:	f7ff fe1c 	bl	800802c <hal_debug_puts>
		break;
 80083f4:	e0d3      	b.n	800859e <CoAP_HandleIncomingPacket+0x54e>
		if (isRequest) {
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d037      	beq.n	800846c <CoAP_HandleIncomingPacket+0x41c>
			res = CoAP_StartNewServerInteraction(pMsg, pRes, socketHandle, pPacket);
 80083fc:	68b8      	ldr	r0, [r7, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6979      	ldr	r1, [r7, #20]
 8008404:	f7ff fc56 	bl	8007cb4 <CoAP_StartNewServerInteraction>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]
			if (res == COAP_OK) {
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80d2 	beq.w	80085b8 <CoAP_HandleIncomingPacket+0x568>
			} else if (res == COAP_ERR_EXISTING) {
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b11      	cmp	r3, #17
 8008418:	f000 80c3 	beq.w	80085a2 <CoAP_HandleIncomingPacket+0x552>
			} else if (res == COAP_ERR_OUT_OF_MEMORY) {
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b0d      	cmp	r3, #13
 8008420:	f040 80c1 	bne.w	80085a6 <CoAP_HandleIncomingPacket+0x556>
				if (pMsg->Type == CON) {
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	791b      	ldrb	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 80be 	bne.w	80085aa <CoAP_HandleIncomingPacket+0x55a>
					CoAP_SendShortResp(ACK, RESP_INTERNAL_SERVER_ERROR_5_00, pMsg->MessageID, pMsg->Token, socketHandle, pPacket->remoteEp);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8008434:	68be      	ldr	r6, [r7, #8]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	ad03      	add	r5, sp, #12
 800843a:	f103 0408 	add.w	r4, r3, #8
 800843e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008446:	e885 0003 	stmia.w	r5, {r0, r1}
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	466b      	mov	r3, sp
 8008450:	f106 0210 	add.w	r2, r6, #16
 8008454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	3304      	adds	r3, #4
 800845c:	7019      	strb	r1, [r3, #0]
 800845e:	68f3      	ldr	r3, [r6, #12]
 8008460:	4662      	mov	r2, ip
 8008462:	21a0      	movs	r1, #160	; 0xa0
 8008464:	2002      	movs	r0, #2
 8008466:	f001 faa2 	bl	80099ae <CoAP_SendShortResp>
				goto END;
 800846a:	e09e      	b.n	80085aa <CoAP_HandleIncomingPacket+0x55a>
			for (pIA = CoAP.pInteractions; pIA != NULL; pIA = pIA->next) {
 800846c:	4b59      	ldr	r3, [pc, #356]	; (80085d4 <CoAP_HandleIncomingPacket+0x584>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	e066      	b.n	8008542 <CoAP_HandleIncomingPacket+0x4f2>
				if (pIA->Role == COAP_ROLE_CLIENT && CoAP_TokenEqual(pIA->pReqMsg->Token, pMsg->Token) && EpAreEqual(&(pPacket->remoteEp), &(pIA->RemoteEp))) {
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	2b03      	cmp	r3, #3
 800847a:	d15f      	bne.n	800853c <CoAP_HandleIncomingPacket+0x4ec>
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	466b      	mov	r3, sp
 8008484:	f102 0110 	add.w	r1, r2, #16
 8008488:	c903      	ldmia	r1, {r0, r1}
 800848a:	6018      	str	r0, [r3, #0]
 800848c:	3304      	adds	r3, #4
 800848e:	7019      	strb	r1, [r3, #0]
 8008490:	68d3      	ldr	r3, [r2, #12]
 8008492:	f104 020c 	add.w	r2, r4, #12
 8008496:	ca07      	ldmia	r2, {r0, r1, r2}
 8008498:	f000 ff20 	bl	80092dc <CoAP_TokenEqual>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d04c      	beq.n	800853c <CoAP_HandleIncomingPacket+0x4ec>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f103 0208 	add.w	r2, r3, #8
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	3310      	adds	r3, #16
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f003 f84e 	bl	800b550 <EpAreEqual>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d040      	beq.n	800853c <CoAP_HandleIncomingPacket+0x4ec>
					if (pIA->State == COAP_STATE_WAITING_RESPONSE || pIA->State == COAP_STATE_HANDLE_RESPONSE) {
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	795b      	ldrb	r3, [r3, #5]
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d003      	beq.n	80084ca <CoAP_HandleIncomingPacket+0x47a>
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d10e      	bne.n	80084e8 <CoAP_HandleIncomingPacket+0x498>
						if (pIA->pRespMsg != NULL) {
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <CoAP_HandleIncomingPacket+0x48c>
							CoAP_free_Message(&(pIA->pRespMsg)); //free eventually present older response (todo: check if this is possible!?)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	334c      	adds	r3, #76	; 0x4c
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 ff66 	bl	80093a8 <CoAP_free_Message>
						pIA->pRespMsg = pMsg; //attach just received message for further actions in IA [client] state-machine & return
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	64da      	str	r2, [r3, #76]	; 0x4c
						pIA->State = COAP_STATE_HANDLE_RESPONSE;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2209      	movs	r2, #9
 80084e6:	715a      	strb	r2, [r3, #5]
					if (pMsg->Type == CON) {
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	791b      	ldrb	r3, [r3, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d165      	bne.n	80085bc <CoAP_HandleIncomingPacket+0x56c>
						if (CoAP_SendShortResp(ACK, EMPTY, pMsg->MessageID, pMsg->Token, socketHandle, pPacket->remoteEp) == COAP_OK) {
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 80084f6:	68be      	ldr	r6, [r7, #8]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	ad03      	add	r5, sp, #12
 80084fc:	f103 0408 	add.w	r4, r3, #8
 8008500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008508:	e885 0003 	stmia.w	r5, {r0, r1}
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	9302      	str	r3, [sp, #8]
 8008510:	466b      	mov	r3, sp
 8008512:	f106 0210 	add.w	r2, r6, #16
 8008516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800851a:	6018      	str	r0, [r3, #0]
 800851c:	3304      	adds	r3, #4
 800851e:	7019      	strb	r1, [r3, #0]
 8008520:	68f3      	ldr	r3, [r6, #12]
 8008522:	4662      	mov	r2, ip
 8008524:	2100      	movs	r1, #0
 8008526:	2002      	movs	r0, #2
 8008528:	f001 fa41 	bl	80099ae <CoAP_SendShortResp>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d144      	bne.n	80085bc <CoAP_HandleIncomingPacket+0x56c>
							pIA->ResConfirmState = ACK_SEND;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					return;
 800853a:	e03f      	b.n	80085bc <CoAP_HandleIncomingPacket+0x56c>
			for (pIA = CoAP.pInteractions; pIA != NULL; pIA = pIA->next) {
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d195      	bne.n	8008474 <CoAP_HandleIncomingPacket+0x424>
			CoAP_SendShortResp(RST, EMPTY, pMsg->MessageID, pMsg->Token, socketHandle, pPacket->remoteEp);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 800854e:	68be      	ldr	r6, [r7, #8]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	ad03      	add	r5, sp, #12
 8008554:	f103 0408 	add.w	r4, r3, #8
 8008558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800855a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800855c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008560:	e885 0003 	stmia.w	r5, {r0, r1}
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	466b      	mov	r3, sp
 800856a:	f106 0210 	add.w	r2, r6, #16
 800856e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008572:	6018      	str	r0, [r3, #0]
 8008574:	3304      	adds	r3, #4
 8008576:	7019      	strb	r1, [r3, #0]
 8008578:	68f3      	ldr	r3, [r6, #12]
 800857a:	4662      	mov	r2, ip
 800857c:	2100      	movs	r1, #0
 800857e:	2003      	movs	r0, #3
 8008580:	f001 fa15 	bl	80099ae <CoAP_SendShortResp>
			goto END;
 8008584:	e012      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		goto END;
 8008586:	bf00      	nop
 8008588:	e010      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		goto END;
 800858a:	bf00      	nop
 800858c:	e00e      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		goto END;
 800858e:	bf00      	nop
 8008590:	e00c      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
			goto END;
 8008592:	bf00      	nop
 8008594:	e00a      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		goto END;
 8008596:	bf00      	nop
 8008598:	e008      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		goto END;
 800859a:	bf00      	nop
 800859c:	e006      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		break;
 800859e:	bf00      	nop
 80085a0:	e004      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
				goto END;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
		break;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <CoAP_HandleIncomingPacket+0x55c>
				goto END;
 80085aa:	bf00      	nop
	}
	}
	END: // only reached if no interaction has been started (return statement)
	CoAP_free_Message(&pMsg); // free if not used inside interaction
 80085ac:	f107 0308 	add.w	r3, r7, #8
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fef9 	bl	80093a8 <CoAP_free_Message>
 80085b6:	e002      	b.n	80085be <CoAP_HandleIncomingPacket+0x56e>
				return;
 80085b8:	bf00      	nop
 80085ba:	e000      	b.n	80085be <CoAP_HandleIncomingPacket+0x56e>
					return;
 80085bc:	bf00      	nop
}
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c4:	0801d604 	.word	0x0801d604
 80085c8:	200007d8 	.word	0x200007d8
 80085cc:	0801d63c 	.word	0x0801d63c
 80085d0:	0801d674 	.word	0x0801d674
 80085d4:	20000790 	.word	0x20000790

080085d8 <SendResp>:

static CoAP_Result_t _rom SendResp(CoAP_Interaction_t* pIA, CoAP_InteractionState_t nextIAState) {
 80085d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085da:	b08b      	sub	sp, #44	; 0x2c
 80085dc:	af04      	add	r7, sp, #16
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	460b      	mov	r3, r1
 80085e2:	72fb      	strb	r3, [r7, #11]
	CoAP_Result_t res = CoAP_SendMsg(pIA->pRespMsg, pIA->socketHandle, pIA->RemoteEp);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	68fc      	ldr	r4, [r7, #12]
 80085f0:	466d      	mov	r5, sp
 80085f2:	f104 0318 	add.w	r3, r4, #24
 80085f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80085fc:	f104 0310 	add.w	r3, r4, #16
 8008600:	cb0c      	ldmia	r3, {r2, r3}
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4630      	mov	r0, r6
 8008606:	f001 fa2f 	bl	8009a68 <CoAP_SendMsg>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]
	if (res == COAP_OK) {
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11d      	bne.n	8008650 <SendResp+0x78>

		if (pIA->pRespMsg->Type == ACK) { //piggy back resp
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008618:	791b      	ldrb	r3, [r3, #4]
 800861a:	2b02      	cmp	r3, #2
 800861c:	d104      	bne.n	8008628 <SendResp+0x50>
			pIA->ReqConfirmState = ACK_SEND;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008626:	e00b      	b.n	8008640 <SendResp+0x68>
		} else if (pIA->pRespMsg->Type == CON) {
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <SendResp+0x68>
			CoAP_EnableAckTimeout(pIA, pIA->RetransCounter); //enable timeout on waiting for ack
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fa0e 	bl	8007a5c <CoAP_EnableAckTimeout>
		} //else NON (no special handling)

		pIA->State = nextIAState; //move to next state
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	7afa      	ldrb	r2, [r7, #11]
 8008644:	715a      	strb	r2, [r3, #5]

		CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing//todo: in die äußere statemachine
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff fa84 	bl	8007b54 <CoAP_EnqueueLastInteraction>
		INFO("(!!!) SendResp(): Internal socket error on sending response! MiD: %d, CoapResult: %d", pIA->pRespMsg->MessageID, res);
		CoAP_DeleteInteraction(pIA);
		return COAP_ERR_SOCKET;
	}

	return COAP_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e00f      	b.n	8008670 <SendResp+0x98>
		INFO("(!!!) SendResp(): Internal socket error on sending response! MiD: %d, CoapResult: %d", pIA->pRespMsg->MessageID, res);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	461a      	mov	r2, r3
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	4907      	ldr	r1, [pc, #28]	; (8008678 <SendResp+0xa0>)
 800865c:	4807      	ldr	r0, [pc, #28]	; (800867c <SendResp+0xa4>)
 800865e:	f013 fb81 	bl	801bd64 <siprintf>
 8008662:	4806      	ldr	r0, [pc, #24]	; (800867c <SendResp+0xa4>)
 8008664:	f7ff fce2 	bl	800802c <hal_debug_puts>
		CoAP_DeleteInteraction(pIA);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fa63 	bl	8007b34 <CoAP_DeleteInteraction>
		return COAP_ERR_SOCKET;
 800866e:	230b      	movs	r3, #11
}
 8008670:	4618      	mov	r0, r3
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008678:	0801d6a8 	.word	0x0801d6a8
 800867c:	200007d8 	.word	0x200007d8

08008680 <SendReq>:

static CoAP_Result_t _rom SendReq(CoAP_Interaction_t* pIA, CoAP_InteractionState_t nextIAState) {
 8008680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008682:	b08b      	sub	sp, #44	; 0x2c
 8008684:	af04      	add	r7, sp, #16
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	460b      	mov	r3, r1
 800868a:	72fb      	strb	r3, [r7, #11]
	CoAP_Result_t res = CoAP_SendMsg(pIA->pReqMsg, pIA->socketHandle, pIA->RemoteEp);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	68fc      	ldr	r4, [r7, #12]
 8008698:	466d      	mov	r5, sp
 800869a:	f104 0318 	add.w	r3, r4, #24
 800869e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80086a4:	f104 0310 	add.w	r3, r4, #16
 80086a8:	cb0c      	ldmia	r3, {r2, r3}
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	4630      	mov	r0, r6
 80086ae:	f001 f9db 	bl	8009a68 <CoAP_SendMsg>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
	if (res == COAP_OK) {
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d113      	bne.n	80086e4 <SendReq+0x64>

		if (pIA->pReqMsg->Type == CON) {
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	791b      	ldrb	r3, [r3, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <SendReq+0x54>
			CoAP_EnableAckTimeout(pIA, pIA->RetransCounter); //enable timeout on waiting for ack
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086cc:	4619      	mov	r1, r3
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff f9c4 	bl	8007a5c <CoAP_EnableAckTimeout>
		} //else NON (no special handling=

		pIA->State = nextIAState; //move to next state
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	7afa      	ldrb	r2, [r7, #11]
 80086d8:	715a      	strb	r2, [r3, #5]

		CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing//todo: in die äußere statemachine
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff fa3a 	bl	8007b54 <CoAP_EnqueueLastInteraction>
		INFO("(!!!) SendReq(): Internal socket error on sending response! MiD: %d, CoapResult: %d\r\n", pIA->pReqMsg->MessageID, res);
		CoAP_DeleteInteraction(pIA);
		return COAP_ERR_SOCKET;
	}

	return COAP_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e00f      	b.n	8008704 <SendReq+0x84>
		INFO("(!!!) SendReq(): Internal socket error on sending response! MiD: %d, CoapResult: %d\r\n", pIA->pReqMsg->MessageID, res);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	88db      	ldrh	r3, [r3, #6]
 80086ea:	461a      	mov	r2, r3
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	4907      	ldr	r1, [pc, #28]	; (800870c <SendReq+0x8c>)
 80086f0:	4807      	ldr	r0, [pc, #28]	; (8008710 <SendReq+0x90>)
 80086f2:	f013 fb37 	bl	801bd64 <siprintf>
 80086f6:	4806      	ldr	r0, [pc, #24]	; (8008710 <SendReq+0x90>)
 80086f8:	f7ff fc98 	bl	800802c <hal_debug_puts>
		CoAP_DeleteInteraction(pIA);
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fa19 	bl	8007b34 <CoAP_DeleteInteraction>
		return COAP_ERR_SOCKET;
 8008702:	230b      	movs	r3, #11
}
 8008704:	4618      	mov	r0, r3
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870c:	0801d700 	.word	0x0801d700
 8008710:	200007d8 	.word	0x200007d8

08008714 <CheckRespStatus>:

//used on [server]
static CoAP_Result_t _rom CheckRespStatus(CoAP_Interaction_t* pIA) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

	if (pIA->ResConfirmState == RST_SEND) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008722:	2b02      	cmp	r3, #2
 8008724:	d108      	bne.n	8008738 <CheckRespStatus+0x24>
		INFO("- Response reset by remote client -> Interaction aborted\r\n");
 8008726:	4937      	ldr	r1, [pc, #220]	; (8008804 <CheckRespStatus+0xf0>)
 8008728:	4837      	ldr	r0, [pc, #220]	; (8008808 <CheckRespStatus+0xf4>)
 800872a:	f013 fb1b 	bl	801bd64 <siprintf>
 800872e:	4836      	ldr	r0, [pc, #216]	; (8008808 <CheckRespStatus+0xf4>)
 8008730:	f7ff fc7c 	bl	800802c <hal_debug_puts>
		//todo: call failure callback to user
		return COAP_ERR_REMOTE_RST;
 8008734:	2319      	movs	r3, #25
 8008736:	e061      	b.n	80087fc <CheckRespStatus+0xe8>
	}

	if (pIA->pRespMsg->Type == NON || pIA->pRespMsg->Type == ACK) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d004      	beq.n	800874c <CheckRespStatus+0x38>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d10c      	bne.n	8008766 <CheckRespStatus+0x52>
		//if(CoAP_MsgIsOlderThan(pIA->pRespMsg, HOLDTIME_AFTER_TRANSACTION_END)) CoAP_DeleteInteraction(pIA); //hold if new request with same token occurs, e.g. response was lost
		//else CoAP_SetSleepInteraction(pIA, 2); //check back in 2 sec. todo: would it be better to sleep for total holdtime?
		if (CoAP_MsgIsOlderThan(pIA->pRespMsg, HOLDTIME_AFTER_NON_TRANSACTION_END)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fe0e 	bl	8009374 <CoAP_MsgIsOlderThan>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <CheckRespStatus+0x4e>
			return COAP_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e04c      	b.n	80087fc <CheckRespStatus+0xe8>
		}
		return COAP_HOLDING_BACK;
 8008762:	231d      	movs	r3, #29
 8008764:	e04a      	b.n	80087fc <CheckRespStatus+0xe8>

	} else if (pIA->pRespMsg->Type == CON) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876a:	791b      	ldrb	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d13d      	bne.n	80087ec <CheckRespStatus+0xd8>
		if (pIA->ResConfirmState == ACK_SEND) { //everything fine!
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008776:	2b01      	cmp	r3, #1
 8008778:	d108      	bne.n	800878c <CheckRespStatus+0x78>
			INFO("- Response ACKed by Client -> Transaction ended successfully\r\n");
 800877a:	4924      	ldr	r1, [pc, #144]	; (800880c <CheckRespStatus+0xf8>)
 800877c:	4822      	ldr	r0, [pc, #136]	; (8008808 <CheckRespStatus+0xf4>)
 800877e:	f013 faf1 	bl	801bd64 <siprintf>
 8008782:	4821      	ldr	r0, [pc, #132]	; (8008808 <CheckRespStatus+0xf4>)
 8008784:	f7ff fc52 	bl	800802c <hal_debug_puts>
			//todo: call success callback to user
			return COAP_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	e037      	b.n	80087fc <CheckRespStatus+0xe8>
		} else { //check ACK/RST timeout of our CON response
			if (timeAfter(CoAP.api.rtc1HzCnt(), pIA->AckTimeout)) {
 800878c:	4b20      	ldr	r3, [pc, #128]	; (8008810 <CheckRespStatus+0xfc>)
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	db1f      	blt.n	80087e0 <CheckRespStatus+0xcc>
				if (pIA->RetransCounter + 1 > MAX_RETRANSMIT) { //give up
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d90c      	bls.n	80087c4 <CheckRespStatus+0xb0>
					INFO("- (!) ACK timeout on sending response, giving up! Resp.MiD: %d\r\n",
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ae:	88db      	ldrh	r3, [r3, #6]
 80087b0:	461a      	mov	r2, r3
 80087b2:	4918      	ldr	r1, [pc, #96]	; (8008814 <CheckRespStatus+0x100>)
 80087b4:	4814      	ldr	r0, [pc, #80]	; (8008808 <CheckRespStatus+0xf4>)
 80087b6:	f013 fad5 	bl	801bd64 <siprintf>
 80087ba:	4813      	ldr	r0, [pc, #76]	; (8008808 <CheckRespStatus+0xf4>)
 80087bc:	f7ff fc36 	bl	800802c <hal_debug_puts>
							pIA->pRespMsg->MessageID);
					return COAP_ERR_OUT_OF_ATTEMPTS;
 80087c0:	231a      	movs	r3, #26
 80087c2:	e01b      	b.n	80087fc <CheckRespStatus+0xe8>
				} else {
					INFO("- (!) Retry num %d\r\n", pIA->RetransCounter + 1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087ca:	3301      	adds	r3, #1
 80087cc:	461a      	mov	r2, r3
 80087ce:	4912      	ldr	r1, [pc, #72]	; (8008818 <CheckRespStatus+0x104>)
 80087d0:	480d      	ldr	r0, [pc, #52]	; (8008808 <CheckRespStatus+0xf4>)
 80087d2:	f013 fac7 	bl	801bd64 <siprintf>
 80087d6:	480c      	ldr	r0, [pc, #48]	; (8008808 <CheckRespStatus+0xf4>)
 80087d8:	f7ff fc28 	bl	800802c <hal_debug_puts>
					return COAP_RETRY;
 80087dc:	231e      	movs	r3, #30
 80087de:	e00d      	b.n	80087fc <CheckRespStatus+0xe8>
				}
			} else {
				pIA->SleepUntil = pIA->AckTimeout; // Let the interaction sleep till the ACK timeout
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	635a      	str	r2, [r3, #52]	; 0x34
				return COAP_WAITING;
 80087e8:	231c      	movs	r3, #28
 80087ea:	e007      	b.n	80087fc <CheckRespStatus+0xe8>
			}
		}
	}

	INFO("(!!!) CheckRespStatus(...) COAP_ERR_ARGUMENT !?!?\r\n");
 80087ec:	490b      	ldr	r1, [pc, #44]	; (800881c <CheckRespStatus+0x108>)
 80087ee:	4806      	ldr	r0, [pc, #24]	; (8008808 <CheckRespStatus+0xf4>)
 80087f0:	f013 fab8 	bl	801bd64 <siprintf>
 80087f4:	4804      	ldr	r0, [pc, #16]	; (8008808 <CheckRespStatus+0xf4>)
 80087f6:	f7ff fc19 	bl	800802c <hal_debug_puts>
	return COAP_ERR_ARGUMENT;
 80087fa:	230a      	movs	r3, #10
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	0801d758 	.word	0x0801d758
 8008808:	200007d8 	.word	0x200007d8
 800880c:	0801d794 	.word	0x0801d794
 8008810:	20000790 	.word	0x20000790
 8008814:	0801d7d4 	.word	0x0801d7d4
 8008818:	0801d818 	.word	0x0801d818
 800881c:	0801d830 	.word	0x0801d830

08008820 <CheckReqStatus>:

//used on [CLIENT] side request to check progress of interaction
static CoAP_Result_t _rom CheckReqStatus(CoAP_Interaction_t* pIA) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]

	if (pIA->ReqConfirmState == RST_SEND) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800882e:	2b02      	cmp	r3, #2
 8008830:	d108      	bne.n	8008844 <CheckReqStatus+0x24>
		INFO("- Response reset by remote server -> Interaction aborted\r\n");
 8008832:	4938      	ldr	r1, [pc, #224]	; (8008914 <CheckReqStatus+0xf4>)
 8008834:	4838      	ldr	r0, [pc, #224]	; (8008918 <CheckReqStatus+0xf8>)
 8008836:	f013 fa95 	bl	801bd64 <siprintf>
 800883a:	4837      	ldr	r0, [pc, #220]	; (8008918 <CheckReqStatus+0xf8>)
 800883c:	f7ff fbf6 	bl	800802c <hal_debug_puts>
		//todo: call failure callback to user
		return COAP_ERR_REMOTE_RST;
 8008840:	2319      	movs	r3, #25
 8008842:	e063      	b.n	800890c <CheckReqStatus+0xec>
	}

	if (pIA->pReqMsg->Type == CON) { // We send a CON
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	791b      	ldrb	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d14b      	bne.n	80088e6 <CheckReqStatus+0xc6>
		if (pIA->ReqConfirmState == ACK_SEND) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008854:	2b01      	cmp	r3, #1
 8008856:	d11a      	bne.n	800888e <CheckReqStatus+0x6e>
			if (CoAP_MsgIsOlderThan(pIA->pReqMsg, CLIENT_MAX_RESP_WAIT_TIME)) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	212d      	movs	r1, #45	; 0x2d
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fd88 	bl	8009374 <CoAP_MsgIsOlderThan>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <CheckReqStatus+0x5c>
				INFO("- Request ACKed separate by server, but giving up to wait for actual response data\r\n");
 800886a:	492c      	ldr	r1, [pc, #176]	; (800891c <CheckReqStatus+0xfc>)
 800886c:	482a      	ldr	r0, [pc, #168]	; (8008918 <CheckReqStatus+0xf8>)
 800886e:	f013 fa79 	bl	801bd64 <siprintf>
 8008872:	4829      	ldr	r0, [pc, #164]	; (8008918 <CheckReqStatus+0xf8>)
 8008874:	f7ff fbda 	bl	800802c <hal_debug_puts>
				return COAP_ERR_TIMEOUT;
 8008878:	231b      	movs	r3, #27
 800887a:	e047      	b.n	800890c <CheckReqStatus+0xec>
			}

			INFO("- Request ACKed separate by server -> Waiting for actual response\r\n");
 800887c:	4928      	ldr	r1, [pc, #160]	; (8008920 <CheckReqStatus+0x100>)
 800887e:	4826      	ldr	r0, [pc, #152]	; (8008918 <CheckReqStatus+0xf8>)
 8008880:	f013 fa70 	bl	801bd64 <siprintf>
 8008884:	4824      	ldr	r0, [pc, #144]	; (8008918 <CheckReqStatus+0xf8>)
 8008886:	f7ff fbd1 	bl	800802c <hal_debug_puts>
			return COAP_WAITING;
 800888a:	231c      	movs	r3, #28
 800888c:	e03e      	b.n	800890c <CheckReqStatus+0xec>
		} else { //check ACK/RST timeout of our CON request
			if (timeAfter(CoAP.api.rtc1HzCnt(), pIA->AckTimeout)) {
 800888e:	4b25      	ldr	r3, [pc, #148]	; (8008924 <CheckReqStatus+0x104>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4798      	blx	r3
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db1f      	blt.n	80088e2 <CheckReqStatus+0xc2>
				if (pIA->RetransCounter + 1 > MAX_RETRANSMIT) { //give up
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d90c      	bls.n	80088c6 <CheckReqStatus+0xa6>
					INFO("- (!) ACK timeout on sending request, giving up! MiD: %d\r\n", pIA->pReqMsg->MessageID);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	88db      	ldrh	r3, [r3, #6]
 80088b2:	461a      	mov	r2, r3
 80088b4:	491c      	ldr	r1, [pc, #112]	; (8008928 <CheckReqStatus+0x108>)
 80088b6:	4818      	ldr	r0, [pc, #96]	; (8008918 <CheckReqStatus+0xf8>)
 80088b8:	f013 fa54 	bl	801bd64 <siprintf>
 80088bc:	4816      	ldr	r0, [pc, #88]	; (8008918 <CheckReqStatus+0xf8>)
 80088be:	f7ff fbb5 	bl	800802c <hal_debug_puts>
					return COAP_ERR_OUT_OF_ATTEMPTS;
 80088c2:	231a      	movs	r3, #26
 80088c4:	e022      	b.n	800890c <CheckReqStatus+0xec>
				} else {
					INFO("- (!) Retry num %d\r\n", pIA->RetransCounter + 1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088cc:	3301      	adds	r3, #1
 80088ce:	461a      	mov	r2, r3
 80088d0:	4916      	ldr	r1, [pc, #88]	; (800892c <CheckReqStatus+0x10c>)
 80088d2:	4811      	ldr	r0, [pc, #68]	; (8008918 <CheckReqStatus+0xf8>)
 80088d4:	f013 fa46 	bl	801bd64 <siprintf>
 80088d8:	480f      	ldr	r0, [pc, #60]	; (8008918 <CheckReqStatus+0xf8>)
 80088da:	f7ff fba7 	bl	800802c <hal_debug_puts>
					return COAP_RETRY;
 80088de:	231e      	movs	r3, #30
 80088e0:	e014      	b.n	800890c <CheckReqStatus+0xec>
				}
			} else {
				return COAP_WAITING;
 80088e2:	231c      	movs	r3, #28
 80088e4:	e012      	b.n	800890c <CheckReqStatus+0xec>
			}
		}
	} else { // request type = NON
		if (CoAP_MsgIsOlderThan(pIA->pReqMsg, CLIENT_MAX_RESP_WAIT_TIME)) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	212d      	movs	r1, #45	; 0x2d
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fd41 	bl	8009374 <CoAP_MsgIsOlderThan>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d008      	beq.n	800890a <CheckReqStatus+0xea>
			INFO("- [NON request]: Giving up to wait for actual response data\r\n");
 80088f8:	490d      	ldr	r1, [pc, #52]	; (8008930 <CheckReqStatus+0x110>)
 80088fa:	4807      	ldr	r0, [pc, #28]	; (8008918 <CheckReqStatus+0xf8>)
 80088fc:	f013 fa32 	bl	801bd64 <siprintf>
 8008900:	4805      	ldr	r0, [pc, #20]	; (8008918 <CheckReqStatus+0xf8>)
 8008902:	f7ff fb93 	bl	800802c <hal_debug_puts>
			return COAP_ERR_TIMEOUT;
 8008906:	231b      	movs	r3, #27
 8008908:	e000      	b.n	800890c <CheckReqStatus+0xec>
		} else
			return COAP_WAITING;
 800890a:	231c      	movs	r3, #28
	}

	INFO("(!!!) CheckReqStatus(...) COAP_ERR_ARGUMENT !?!?\r\n");
	return COAP_ERR_ARGUMENT;
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	0801d864 	.word	0x0801d864
 8008918:	200007d8 	.word	0x200007d8
 800891c:	0801d8a0 	.word	0x0801d8a0
 8008920:	0801d8f8 	.word	0x0801d8f8
 8008924:	20000790 	.word	0x20000790
 8008928:	0801d93c 	.word	0x0801d93c
 800892c:	0801d818 	.word	0x0801d818
 8008930:	0801d978 	.word	0x0801d978

08008934 <handleServerInteraction>:
	CoAP_Socket_t* socket = AllocSocket();
	socket->Handle = handle;
	return socket;
}

static void handleServerInteraction(CoAP_Interaction_t* pIA) {
 8008934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008936:	b089      	sub	sp, #36	; 0x24
 8008938:	af04      	add	r7, sp, #16
 800893a:	6078      	str	r0, [r7, #4]
	if (pIA->State == COAP_STATE_HANDLE_REQUEST ||
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	795b      	ldrb	r3, [r3, #5]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d008      	beq.n	8008956 <handleServerInteraction+0x22>
			pIA->State == COAP_STATE_RESOURCE_POSTPONE_EMPTY_ACK_SENT ||
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	795b      	ldrb	r3, [r3, #5]
	if (pIA->State == COAP_STATE_HANDLE_REQUEST ||
 8008948:	2b02      	cmp	r3, #2
 800894a:	d004      	beq.n	8008956 <handleServerInteraction+0x22>
			pIA->State == COAP_STATE_RESPONSE_WAITING_LEISURE) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	795b      	ldrb	r3, [r3, #5]
			pIA->State == COAP_STATE_RESOURCE_POSTPONE_EMPTY_ACK_SENT ||
 8008950:	2b04      	cmp	r3, #4
 8008952:	f040 81b8 	bne.w	8008cc6 <handleServerInteraction+0x392>

		if (pIA->ReqMetaInfo.Type == META_INFO_MULTICAST) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800895c:	2b02      	cmp	r3, #2
 800895e:	d128      	bne.n	80089b2 <handleServerInteraction+0x7e>
			// Messages sent via multicast MUST be NON-confirmable.
			if (pIA->pReqMsg->Type == CON) {
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <handleServerInteraction+0x4c>
				INFO("Request received from multicast endpoint is not allowed");
 800896a:	4999      	ldr	r1, [pc, #612]	; (8008bd0 <handleServerInteraction+0x29c>)
 800896c:	4899      	ldr	r0, [pc, #612]	; (8008bd4 <handleServerInteraction+0x2a0>)
 800896e:	f013 f9f9 	bl	801bd64 <siprintf>
 8008972:	4898      	ldr	r0, [pc, #608]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008974:	f7ff fb5a 	bl	800802c <hal_debug_puts>
				CoAP_DeleteInteraction(pIA);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff f8db 	bl	8007b34 <CoAP_DeleteInteraction>
				return;
 800897e:	e1ee      	b.n	8008d5e <handleServerInteraction+0x42a>
			}
			// Multicast messages get a response after a leisure period.
			if (pIA->State == COAP_STATE_HANDLE_REQUEST) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	795b      	ldrb	r3, [r3, #5]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d114      	bne.n	80089b2 <handleServerInteraction+0x7e>
				pIA->State = COAP_STATE_RESPONSE_WAITING_LEISURE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	715a      	strb	r2, [r3, #5]

				// Todo: Pick a random leisure period (See section 8.2 of [RFC7252])
				CoAP_SetSleepInteraction(pIA, DEFAULT_LEISURE); // Don't respond right away'
 800898e:	2105      	movs	r1, #5
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff f84f 	bl	8007a34 <CoAP_SetSleepInteraction>
				CoAP_EnqueueLastInteraction(pIA);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff f8dc 	bl	8007b54 <CoAP_EnqueueLastInteraction>
				INFO("Multicast request postponed processing until %" PRIu32 "\r\n", pIA->SleepUntil);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a0:	461a      	mov	r2, r3
 80089a2:	498d      	ldr	r1, [pc, #564]	; (8008bd8 <handleServerInteraction+0x2a4>)
 80089a4:	488b      	ldr	r0, [pc, #556]	; (8008bd4 <handleServerInteraction+0x2a0>)
 80089a6:	f013 f9dd 	bl	801bd64 <siprintf>
 80089aa:	488a      	ldr	r0, [pc, #552]	; (8008bd4 <handleServerInteraction+0x2a0>)
 80089ac:	f7ff fb3e 	bl	800802c <hal_debug_puts>
				return;
 80089b0:	e1d5      	b.n	8008d5e <handleServerInteraction+0x42a>
			}
		}

		if (((pIA->pReqMsg->Code == REQ_GET) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_GET))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	795b      	ldrb	r3, [r3, #5]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <handleServerInteraction+0x96>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	89db      	ldrh	r3, [r3, #14]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d047      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_POST) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_POST))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	795b      	ldrb	r3, [r3, #5]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d106      	bne.n	80089e2 <handleServerInteraction+0xae>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	89db      	ldrh	r3, [r3, #14]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03b      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_PUT) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_PUT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	795b      	ldrb	r3, [r3, #5]
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d106      	bne.n	80089fa <handleServerInteraction+0xc6>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	89db      	ldrh	r3, [r3, #14]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d02f      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_DELETE) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_DELETE))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	795b      	ldrb	r3, [r3, #5]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d106      	bne.n	8008a12 <handleServerInteraction+0xde>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	89db      	ldrh	r3, [r3, #14]
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d023      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_FETCH) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_FETCH))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	795b      	ldrb	r3, [r3, #5]
 8008a18:	2b05      	cmp	r3, #5
 8008a1a:	d106      	bne.n	8008a2a <handleServerInteraction+0xf6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	89db      	ldrh	r3, [r3, #14]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d017      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_PATCH) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_PATCH))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	795b      	ldrb	r3, [r3, #5]
 8008a30:	2b06      	cmp	r3, #6
 8008a32:	d106      	bne.n	8008a42 <handleServerInteraction+0x10e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	89db      	ldrh	r3, [r3, #14]
 8008a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <handleServerInteraction+0x126>
				|| ((pIA->pReqMsg->Code == REQ_IPATCH) && !((pIA->pRes->Options).AllowedMethods & RES_OPT_IPATCH))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	795b      	ldrb	r3, [r3, #5]
 8008a48:	2b07      	cmp	r3, #7
 8008a4a:	d115      	bne.n	8008a78 <handleServerInteraction+0x144>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	89db      	ldrh	r3, [r3, #14]
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10e      	bne.n	8008a78 <handleServerInteraction+0x144>
				) {
			pIA->pRespMsg = CoAP_AllocRespMsg(pIA->pReqMsg, RESP_METHOD_NOT_ALLOWED_4_05, 0); //matches also TYPE + TOKEN to request
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2185      	movs	r1, #133	; 0x85
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fcf0 	bl	8009448 <CoAP_AllocRespMsg>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	64da      	str	r2, [r3, #76]	; 0x4c

			//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			//transmit response & move to next state
			SendResp(pIA, COAP_STATE_RESPONSE_SENT);
 8008a6e:	2103      	movs	r1, #3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff fdb1 	bl	80085d8 <SendResp>
			//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			return;
 8008a76:	e172      	b.n	8008d5e <handleServerInteraction+0x42a>
		// (else) request method supported by resource...:

		// Allocate new msg with payload buffer which can be directly used OR overwritten
		// by resource handler with (ownstatic memory OR  "com_mem_get(...)" memory areas.
		// Any non static memory will be freed along with message! see free_Payload(...) function, even if user overwrites payload pointer!
		if (pIA->pRespMsg == NULL) { //if postponed before it would have been already allocated
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <handleServerInteraction+0x160>
			pIA->pRespMsg = CoAP_AllocRespMsg(pIA->pReqMsg, EMPTY, PREFERED_PAYLOAD_SIZE); //matches also TYPE + TOKEN to request
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	2240      	movs	r2, #64	; 0x40
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fcdd 	bl	8009448 <CoAP_AllocRespMsg>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		// Call of external set resource handler
		// could change type and code of message (ACK & EMPTY above only a guess!)
		CoAP_HandlerResult_t Res = pIA->pRes->Handler(pIA->pReqMsg, pIA->pRespMsg);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]

		// make sure the handler returned valid response (either already allocated OR allocated by handler itself)
		if (pIA->pRespMsg == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <handleServerInteraction+0x194>
		{
			INFO("Resource handler returned NULLed response message (removing interaction)\r\n");
 8008ab2:	494a      	ldr	r1, [pc, #296]	; (8008bdc <handleServerInteraction+0x2a8>)
 8008ab4:	4847      	ldr	r0, [pc, #284]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008ab6:	f013 f955 	bl	801bd64 <siprintf>
 8008aba:	4846      	ldr	r0, [pc, #280]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008abc:	f7ff fab6 	bl	800802c <hal_debug_puts>
			CoAP_DeleteInteraction(pIA);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff f837 	bl	8007b34 <CoAP_DeleteInteraction>
			return;
 8008ac6:	e14a      	b.n	8008d5e <handleServerInteraction+0x42a>
		}

		// Check return value of handler:
		// a) everything fine - we got an response to send
		if (Res == HANDLER_OK && pIA->pRespMsg->Code == EMPTY) {
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <handleServerInteraction+0x1ae>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	795b      	ldrb	r3, [r3, #5]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <handleServerInteraction+0x1ae>
			pIA->pRespMsg->Code = RESP_SUCCESS_CONTENT_2_05; //handler forgot to set code?
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008adc:	2245      	movs	r2, #69	; 0x45
 8008ade:	715a      	strb	r2, [r3, #5]
 8008ae0:	e082      	b.n	8008be8 <handleServerInteraction+0x2b4>

			// b) handler has no result and will not deliver	in the future
		} else if (Res == HANDLER_ERROR && pIA->pRespMsg->Code == EMPTY) {
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d111      	bne.n	8008b0c <handleServerInteraction+0x1d8>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aec:	795b      	ldrb	r3, [r3, #5]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <handleServerInteraction+0x1d8>
			pIA->pRespMsg->Code = RESP_INTERNAL_SERVER_ERROR_5_00; //handler forgot to set code?
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af6:	22a0      	movs	r2, #160	; 0xa0
 8008af8:	715a      	strb	r2, [r3, #5]

			// Don't respond with reset or empty messages to requests originating from multicast enpoints
			if (pIA->ReqMetaInfo.Type == META_INFO_MULTICAST) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d171      	bne.n	8008be8 <handleServerInteraction+0x2b4>
				CoAP_DeleteInteraction(pIA);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff f815 	bl	8007b34 <CoAP_DeleteInteraction>
				return;
 8008b0a:	e128      	b.n	8008d5e <handleServerInteraction+0x42a>
			}

			// c) handler needs some more time
		} else if (Res == HANDLER_POSTPONE) { // Handler needs more time to fulfill request, send ACK and separate response
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d16a      	bne.n	8008be8 <handleServerInteraction+0x2b4>
			if (pIA->pReqMsg->Type == CON && pIA->ReqConfirmState != ACK_SEND) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	791b      	ldrb	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d143      	bne.n	8008ba4 <handleServerInteraction+0x270>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d03e      	beq.n	8008ba4 <handleServerInteraction+0x270>
				if (CoAP_SendEmptyAck(pIA->pReqMsg->MessageID, pIA->socketHandle, pIA->RemoteEp) == COAP_OK) {
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	88de      	ldrh	r6, [r3, #6]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	603b      	str	r3, [r7, #0]
 8008b32:	687c      	ldr	r4, [r7, #4]
 8008b34:	466d      	mov	r5, sp
 8008b36:	f104 0318 	add.w	r3, r4, #24
 8008b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008b40:	f104 0310 	add.w	r3, r4, #16
 8008b44:	cb0c      	ldmia	r3, {r2, r3}
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 ff05 	bl	8009958 <CoAP_SendEmptyAck>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d118      	bne.n	8008b86 <handleServerInteraction+0x252>

					pIA->ReqConfirmState = ACK_SEND;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					pIA->State = COAP_STATE_RESOURCE_POSTPONE_EMPTY_ACK_SENT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	715a      	strb	r2, [r3, #5]
					// give resource some time to become ready
					CoAP_SetSleepInteraction(pIA, POSTPONE_WAIT_TIME_SEK);
 8008b62:	2103      	movs	r1, #3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fe ff65 	bl	8007a34 <CoAP_SetSleepInteraction>

					CoAP_EnqueueLastInteraction(pIA);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fe fff2 	bl	8007b54 <CoAP_EnqueueLastInteraction>
					INFO("Resource not ready, postponed response until %" PRIu32 "\r\n", pIA->SleepUntil);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	461a      	mov	r2, r3
 8008b76:	491a      	ldr	r1, [pc, #104]	; (8008be0 <handleServerInteraction+0x2ac>)
 8008b78:	4816      	ldr	r0, [pc, #88]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008b7a:	f013 f8f3 	bl	801bd64 <siprintf>
 8008b7e:	4815      	ldr	r0, [pc, #84]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008b80:	f7ff fa54 	bl	800802c <hal_debug_puts>
					return;
 8008b84:	e0eb      	b.n	8008d5e <handleServerInteraction+0x42a>
				} else { // unexspected internal failure todo: try at least to send 4 byte RESP_INTERNAL_SERVER_ERROR_5_00
					INFO("(!!!) Send Error on empty ack, MiD: %d", pIA->pReqMsg->MessageID);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4915      	ldr	r1, [pc, #84]	; (8008be4 <handleServerInteraction+0x2b0>)
 8008b90:	4810      	ldr	r0, [pc, #64]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008b92:	f013 f8e7 	bl	801bd64 <siprintf>
 8008b96:	480f      	ldr	r0, [pc, #60]	; (8008bd4 <handleServerInteraction+0x2a0>)
 8008b98:	f7ff fa48 	bl	800802c <hal_debug_puts>
					CoAP_DeleteInteraction(pIA);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7fe ffc9 	bl	8007b34 <CoAP_DeleteInteraction>
					return;
 8008ba2:	e0dc      	b.n	8008d5e <handleServerInteraction+0x42a>
				}
			}

			//Timeout on postpone?
			if (CoAP_MsgIsOlderThan(pIA->pReqMsg, POSTPONE_MAX_WAIT_TIME)) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	211e      	movs	r1, #30
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fbe2 	bl	8009374 <CoAP_MsgIsOlderThan>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <handleServerInteraction+0x28c>
				pIA->pRespMsg->Code = RESP_SERVICE_UNAVAILABLE_5_03;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bba:	22a3      	movs	r2, #163	; 0xa3
 8008bbc:	715a      	strb	r2, [r3, #5]
 8008bbe:	e013      	b.n	8008be8 <handleServerInteraction+0x2b4>
			} else {
				CoAP_SetSleepInteraction(pIA, POSTPONE_WAIT_TIME_SEK);
 8008bc0:	2103      	movs	r1, #3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fe ff36 	bl	8007a34 <CoAP_SetSleepInteraction>
				CoAP_EnqueueLastInteraction(pIA); //give resource some time to become ready
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fe ffc3 	bl	8007b54 <CoAP_EnqueueLastInteraction>
				return;
 8008bce:	e0c6      	b.n	8008d5e <handleServerInteraction+0x42a>
 8008bd0:	0801d9b8 	.word	0x0801d9b8
 8008bd4:	200007d8 	.word	0x200007d8
 8008bd8:	0801d9f0 	.word	0x0801d9f0
 8008bdc:	0801da24 	.word	0x0801da24
 8008be0:	0801da70 	.word	0x0801da70
 8008be4:	0801daa4 	.word	0x0801daa4
			}
		}

		//Set response TYPE correctly if CON request, regardless of what the handler did to this resp msg field, it can't know it better :-)
		//on NON requests the handler can decide if use CON or NON in response (default is also using NON in response)
		if (pIA->pReqMsg->Type == CON) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d113      	bne.n	8008c1a <handleServerInteraction+0x2e6>
			if (pIA->ReqConfirmState ==
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d10a      	bne.n	8008c12 <handleServerInteraction+0x2de>
					ACK_SEND) { //separate empty ACK has been sent before (piggyback-ack no more possible)
				pIA->pRespMsg->Type = CON;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c00:	2200      	movs	r2, #0
 8008c02:	711a      	strb	r2, [r3, #4]
				pIA->pRespMsg->MessageID = CoAP_GetNextMid(); //we must use/generate a new messageID;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008c08:	f001 f856 	bl	8009cb8 <CoAP_GetNextMid>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	80e3      	strh	r3, [r4, #6]
 8008c10:	e003      	b.n	8008c1a <handleServerInteraction+0x2e6>
			} else
				pIA->pRespMsg->Type = ACK; //"piggybacked ack"
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c16:	2202      	movs	r2, #2
 8008c18:	711a      	strb	r2, [r3, #4]
		}

		//Add custom option #10000 with hopcount and rssi of request to response
		if (pIA->ReqMetaInfo.Type == META_INFO_RF_PATH) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d114      	bne.n	8008c4e <handleServerInteraction+0x31a>
			uint8_t buf_temp[2];
			buf_temp[0] = pIA->ReqMetaInfo.Dat.RfPath.HopCount;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c2a:	733b      	strb	r3, [r7, #12]
			buf_temp[1] = pIA->ReqMetaInfo.Dat.RfPath.RSSI * -1;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	425b      	negs	r3, r3
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	737b      	strb	r3, [r7, #13]
			CoAP_AppendOptionToList(&(pIA->pRespMsg->pOptionsList), 10000, buf_temp, 2); //custom option #10000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3c:	f103 0018 	add.w	r0, r3, #24
 8008c40:	f107 020c 	add.w	r2, r7, #12
 8008c44:	2302      	movs	r3, #2
 8008c46:	f242 7110 	movw	r1, #10000	; 0x2710
 8008c4a:	f001 fed7 	bl	800a9fc <CoAP_AppendOptionToList>
		}

		//handle for GET observe option
		if ((pIA->pReqMsg->Code == REQ_GET || pIA->pReqMsg->Code == REQ_FETCH) && pIA->pRespMsg->Code == RESP_SUCCESS_CONTENT_2_05) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	795b      	ldrb	r3, [r3, #5]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d004      	beq.n	8008c62 <handleServerInteraction+0x32e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	795b      	ldrb	r3, [r3, #5]
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d12c      	bne.n	8008cbc <handleServerInteraction+0x388>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c66:	795b      	ldrb	r3, [r3, #5]
 8008c68:	2b45      	cmp	r3, #69	; 0x45
 8008c6a:	d127      	bne.n	8008cbc <handleServerInteraction+0x388>
			CoAP_Result_t result = CoAP_HandleObservationInReq(pIA);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff f8e1 	bl	8007e34 <CoAP_HandleObservationInReq>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]
			if (result == COAP_OK) { //<---- attach OBSERVER to resource
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10d      	bne.n	8008c98 <handleServerInteraction+0x364>
				AddObserveOptionToMsg(pIA->pRespMsg, 0);  //= ACK observation to client
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 fe86 	bl	800b994 <AddObserveOptionToMsg>
				INFO("- Observation activated\r\n");
 8008c88:	4936      	ldr	r1, [pc, #216]	; (8008d64 <handleServerInteraction+0x430>)
 8008c8a:	4837      	ldr	r0, [pc, #220]	; (8008d68 <handleServerInteraction+0x434>)
 8008c8c:	f013 f86a 	bl	801bd64 <siprintf>
 8008c90:	4835      	ldr	r0, [pc, #212]	; (8008d68 <handleServerInteraction+0x434>)
 8008c92:	f7ff f9cb 	bl	800802c <hal_debug_puts>
 8008c96:	e011      	b.n	8008cbc <handleServerInteraction+0x388>
			} else if (result == COAP_REMOVED) {
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b17      	cmp	r3, #23
 8008c9c:	d107      	bne.n	8008cae <handleServerInteraction+0x37a>
				INFO("- Observation actively removed by client\r\n");
 8008c9e:	4933      	ldr	r1, [pc, #204]	; (8008d6c <handleServerInteraction+0x438>)
 8008ca0:	4831      	ldr	r0, [pc, #196]	; (8008d68 <handleServerInteraction+0x434>)
 8008ca2:	f013 f85f 	bl	801bd64 <siprintf>
 8008ca6:	4830      	ldr	r0, [pc, #192]	; (8008d68 <handleServerInteraction+0x434>)
 8008ca8:	f7ff f9c0 	bl	800802c <hal_debug_puts>
 8008cac:	e006      	b.n	8008cbc <handleServerInteraction+0x388>
			} else {
				INFO("- Observation failed\r\n");
 8008cae:	4930      	ldr	r1, [pc, #192]	; (8008d70 <handleServerInteraction+0x43c>)
 8008cb0:	482d      	ldr	r0, [pc, #180]	; (8008d68 <handleServerInteraction+0x434>)
 8008cb2:	f013 f857 	bl	801bd64 <siprintf>
 8008cb6:	482c      	ldr	r0, [pc, #176]	; (8008d68 <handleServerInteraction+0x434>)
 8008cb8:	f7ff f9b8 	bl	800802c <hal_debug_puts>
			}

		}

		//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		SendResp(pIA, COAP_STATE_RESPONSE_SENT); //transmit response & move to next state
 8008cbc:	2103      	movs	r1, #3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff fc8a 	bl	80085d8 <SendResp>
		//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		return;
 8008cc4:	e04b      	b.n	8008d5e <handleServerInteraction+0x42a>
		//--------------------------------------------------
	} else if (pIA->State == COAP_STATE_RESPONSE_SENT) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	795b      	ldrb	r3, [r3, #5]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d147      	bne.n	8008d5e <handleServerInteraction+0x42a>
		//--------------------------------------------------
		switch (CheckRespStatus(pIA)) {
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fd20 	bl	8008714 <CheckRespStatus>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b1d      	cmp	r3, #29
 8008cd8:	dc02      	bgt.n	8008ce0 <handleServerInteraction+0x3ac>
 8008cda:	2b1c      	cmp	r3, #28
 8008cdc:	da03      	bge.n	8008ce6 <handleServerInteraction+0x3b2>
 8008cde:	e03b      	b.n	8008d58 <handleServerInteraction+0x424>
 8008ce0:	2b1e      	cmp	r3, #30
 8008ce2:	d004      	beq.n	8008cee <handleServerInteraction+0x3ba>
 8008ce4:	e038      	b.n	8008d58 <handleServerInteraction+0x424>
		case COAP_WAITING:
			case COAP_HOLDING_BACK:
			CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7fe ff34 	bl	8007b54 <CoAP_EnqueueLastInteraction>
			break;
 8008cec:	e037      	b.n	8008d5e <handleServerInteraction+0x42a>

		case COAP_RETRY:
			if (CoAP_SendMsg(pIA->pRespMsg, pIA->socketHandle, pIA->RemoteEp) == COAP_OK) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	687c      	ldr	r4, [r7, #4]
 8008cfa:	466d      	mov	r5, sp
 8008cfc:	f104 0318 	add.w	r3, r4, #24
 8008d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008d06:	f104 0310 	add.w	r3, r4, #16
 8008d0a:	cb0c      	ldmia	r3, {r2, r3}
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 feaa 	bl	8009a68 <CoAP_SendMsg>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10f      	bne.n	8008d3a <handleServerInteraction+0x406>
				pIA->RetransCounter++;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d20:	3301      	adds	r3, #1
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				CoAP_EnableAckTimeout(pIA, pIA->RetransCounter);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe fe92 	bl	8007a5c <CoAP_EnableAckTimeout>
			} else {
				INFO("(!!!) Internal socket error on sending response! MiD: %d", pIA->pReqMsg->MessageID);
				CoAP_DeleteInteraction(pIA);
			}
			break;
 8008d38:	e011      	b.n	8008d5e <handleServerInteraction+0x42a>
				INFO("(!!!) Internal socket error on sending response! MiD: %d", pIA->pReqMsg->MessageID);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	461a      	mov	r2, r3
 8008d42:	490c      	ldr	r1, [pc, #48]	; (8008d74 <handleServerInteraction+0x440>)
 8008d44:	4808      	ldr	r0, [pc, #32]	; (8008d68 <handleServerInteraction+0x434>)
 8008d46:	f013 f80d 	bl	801bd64 <siprintf>
 8008d4a:	4807      	ldr	r0, [pc, #28]	; (8008d68 <handleServerInteraction+0x434>)
 8008d4c:	f7ff f96e 	bl	800802c <hal_debug_puts>
				CoAP_DeleteInteraction(pIA);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7fe feef 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 8008d56:	e002      	b.n	8008d5e <handleServerInteraction+0x42a>

		case COAP_ERR_OUT_OF_ATTEMPTS:
			case COAP_ERR_REMOTE_RST:
			default:
			CoAP_DeleteInteraction(pIA);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe feeb 	bl	8007b34 <CoAP_DeleteInteraction>
		}
	}
}
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	0801dacc 	.word	0x0801dacc
 8008d68:	200007d8 	.word	0x200007d8
 8008d6c:	0801dae8 	.word	0x0801dae8
 8008d70:	0801db14 	.word	0x0801db14
 8008d74:	0801db2c 	.word	0x0801db2c

08008d78 <handleNotifyInteraction>:

static void handleNotifyInteraction(CoAP_Interaction_t* pIA) {
 8008d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d7a:	b089      	sub	sp, #36	; 0x24
 8008d7c:	af04      	add	r7, sp, #16
 8008d7e:	6078      	str	r0, [r7, #4]
	if (pIA->State == COAP_STATE_READY_TO_NOTIFY) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	795b      	ldrb	r3, [r3, #5]
 8008d84:	2b05      	cmp	r3, #5
 8008d86:	d10b      	bne.n	8008da0 <handleNotifyInteraction+0x28>
		//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		INFO("Sending Notification\n");
 8008d88:	49a4      	ldr	r1, [pc, #656]	; (800901c <handleNotifyInteraction+0x2a4>)
 8008d8a:	48a5      	ldr	r0, [pc, #660]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008d8c:	f012 ffea 	bl	801bd64 <siprintf>
 8008d90:	48a3      	ldr	r0, [pc, #652]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008d92:	f7ff f94b 	bl	800802c <hal_debug_puts>
		SendResp(pIA, COAP_STATE_NOTIFICATION_SENT); //transmit response & move to next state
 8008d96:	2106      	movs	r1, #6
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fc1d 	bl	80085d8 <SendResp>
 8008d9e:	e139      	b.n	8009014 <handleNotifyInteraction+0x29c>
		//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		//--------------------------------------------------
	} else if (pIA->State == COAP_STATE_NOTIFICATION_SENT) {
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	795b      	ldrb	r3, [r3, #5]
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	f040 8135 	bne.w	8009014 <handleNotifyInteraction+0x29c>
		CoAP_Result_t respStatus = CheckRespStatus(pIA);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fcb2 	bl	8008714 <CheckRespStatus>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
		INFO("Response Status: %s\n", ResultToString(respStatus));
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 f9c4 	bl	800b144 <ResultToString>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4998      	ldr	r1, [pc, #608]	; (8009024 <handleNotifyInteraction+0x2ac>)
 8008dc2:	4897      	ldr	r0, [pc, #604]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008dc4:	f012 ffce 	bl	801bd64 <siprintf>
 8008dc8:	4895      	ldr	r0, [pc, #596]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008dca:	f7ff f92f 	bl	800802c <hal_debug_puts>

		switch (respStatus) {
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b1e      	cmp	r3, #30
 8008dd2:	f200 811b 	bhi.w	800900c <handleNotifyInteraction+0x294>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <handleNotifyInteraction+0x64>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008f61 	.word	0x08008f61
 8008de0:	0800900d 	.word	0x0800900d
 8008de4:	0800900d 	.word	0x0800900d
 8008de8:	0800900d 	.word	0x0800900d
 8008dec:	0800900d 	.word	0x0800900d
 8008df0:	0800900d 	.word	0x0800900d
 8008df4:	0800900d 	.word	0x0800900d
 8008df8:	0800900d 	.word	0x0800900d
 8008dfc:	0800900d 	.word	0x0800900d
 8008e00:	0800900d 	.word	0x0800900d
 8008e04:	0800900d 	.word	0x0800900d
 8008e08:	0800900d 	.word	0x0800900d
 8008e0c:	0800900d 	.word	0x0800900d
 8008e10:	0800900d 	.word	0x0800900d
 8008e14:	0800900d 	.word	0x0800900d
 8008e18:	0800900d 	.word	0x0800900d
 8008e1c:	0800900d 	.word	0x0800900d
 8008e20:	0800900d 	.word	0x0800900d
 8008e24:	0800900d 	.word	0x0800900d
 8008e28:	0800900d 	.word	0x0800900d
 8008e2c:	0800900d 	.word	0x0800900d
 8008e30:	0800900d 	.word	0x0800900d
 8008e34:	0800900d 	.word	0x0800900d
 8008e38:	0800900d 	.word	0x0800900d
 8008e3c:	0800900d 	.word	0x0800900d
 8008e40:	08008ff7 	.word	0x08008ff7
 8008e44:	08008ff7 	.word	0x08008ff7
 8008e48:	0800900d 	.word	0x0800900d
 8008e4c:	08008e59 	.word	0x08008e59
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e69 	.word	0x08008e69
		case COAP_WAITING:
			CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7fe fe7b 	bl	8007b54 <CoAP_EnqueueLastInteraction>
			break;
 8008e5e:	e0d9      	b.n	8009014 <handleNotifyInteraction+0x29c>
		case COAP_HOLDING_BACK:
			CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fe fe77 	bl	8007b54 <CoAP_EnqueueLastInteraction>
			break;
 8008e66:	e0d5      	b.n	8009014 <handleNotifyInteraction+0x29c>
		case COAP_RETRY:
#if USE_RFC7641_ADVANCED_TRANSMISSION == 1
			//Implement RFC7641 (observe) "4.5.2.  Advanced Transmission"
			//Effectively abort previous notification and send a fresher one
			//retain transmission parameters of "pending" interaction
			if (pIA->UpdatePendingNotification) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d03a      	beq.n	8008ee8 <handleNotifyInteraction+0x170>
				CoAP_MessageType_t TypeSave = pIA->pRespMsg->Type;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e76:	791b      	ldrb	r3, [r3, #4]
 8008e78:	73bb      	strb	r3, [r7, #14]
				INFO("in retry: update pending IA\r\n");
 8008e7a:	496b      	ldr	r1, [pc, #428]	; (8009028 <handleNotifyInteraction+0x2b0>)
 8008e7c:	4868      	ldr	r0, [pc, #416]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008e7e:	f012 ff71 	bl	801bd64 <siprintf>
 8008e82:	4867      	ldr	r0, [pc, #412]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008e84:	f7ff f8d2 	bl	800802c <hal_debug_puts>
				pIA->UpdatePendingNotification = false;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				pIA->pRespMsg->MessageID = CoAP_GetNextMid();
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e94:	f000 ff10 	bl	8009cb8 <CoAP_GetNextMid>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	80e3      	strh	r3, [r4, #6]
				//call notifier
				if (pIA->pRes->Notifier(pIA->pObserver, pIA->pRespMsg) == HANDLER_ERROR) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68d0      	ldr	r0, [r2, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d10c      	bne.n	8008ece <handleNotifyInteraction+0x156>
					RemoveObserveOptionFromMsg(pIA->pRespMsg);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f002 fdc8 	bl	800ba4e <RemoveObserveOptionFromMsg>
					CoAP_RemoveInteractionsObserver(pIA, pIA->pRespMsg->Token);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec2:	330c      	adds	r3, #12
 8008ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fe ff92 	bl	8007df0 <CoAP_RemoveInteractionsObserver>
 8008ecc:	e008      	b.n	8008ee0 <handleNotifyInteraction+0x168>
				} else { //good response
					UpdateObserveOptionInMsg(pIA->pRespMsg, pIA->pRes->UpdateCnt);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f002 fdd6 	bl	800ba8c <UpdateObserveOptionInMsg>
				}
				// The pIA->pRes->Notifier might have change the response from CON -> NON
				// On the interaction we like to preserve the original value
				// e.g. one CON between many NON messages should be preserved
				pIA->pRespMsg->Type = TypeSave;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee4:	7bba      	ldrb	r2, [r7, #14]
 8008ee6:	711a      	strb	r2, [r3, #4]
			}
#endif

			if (CoAP_SendMsg(pIA->pRespMsg, pIA->socketHandle, pIA->RemoteEp) == COAP_OK) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef0:	603b      	str	r3, [r7, #0]
 8008ef2:	687c      	ldr	r4, [r7, #4]
 8008ef4:	466d      	mov	r5, sp
 8008ef6:	f104 0318 	add.w	r3, r4, #24
 8008efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008efc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008f00:	f104 0310 	add.w	r3, r4, #16
 8008f04:	cb0c      	ldmia	r3, {r2, r3}
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 fdad 	bl	8009a68 <CoAP_SendMsg>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d116      	bne.n	8008f42 <handleNotifyInteraction+0x1ca>
				pIA->RetransCounter++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				CoAP_EnableAckTimeout(pIA, pIA->RetransCounter);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fe fd95 	bl	8007a5c <CoAP_EnableAckTimeout>
				INFO("- Changed notification body during retry\r\n");
 8008f32:	493e      	ldr	r1, [pc, #248]	; (800902c <handleNotifyInteraction+0x2b4>)
 8008f34:	483a      	ldr	r0, [pc, #232]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008f36:	f012 ff15 	bl	801bd64 <siprintf>
 8008f3a:	4839      	ldr	r0, [pc, #228]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008f3c:	f7ff f876 	bl	800802c <hal_debug_puts>
			} else {
				INFO("(!!!) Internal socket error on sending response! MiD: %d\r\n", pIA->pRespMsg->MessageID);
				CoAP_DeleteInteraction(pIA);
			}
			break;
 8008f40:	e068      	b.n	8009014 <handleNotifyInteraction+0x29c>
				INFO("(!!!) Internal socket error on sending response! MiD: %d\r\n", pIA->pRespMsg->MessageID);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f46:	88db      	ldrh	r3, [r3, #6]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4939      	ldr	r1, [pc, #228]	; (8009030 <handleNotifyInteraction+0x2b8>)
 8008f4c:	4834      	ldr	r0, [pc, #208]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008f4e:	f012 ff09 	bl	801bd64 <siprintf>
 8008f52:	4833      	ldr	r0, [pc, #204]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008f54:	f7ff f86a 	bl	800802c <hal_debug_puts>
				CoAP_DeleteInteraction(pIA);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fe fdeb 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 8008f5e:	e059      	b.n	8009014 <handleNotifyInteraction+0x29c>

		case COAP_OK:

#if USE_RFC7641_ADVANCED_TRANSMISSION == 1
			if (pIA->UpdatePendingNotification) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d041      	beq.n	8008fee <handleNotifyInteraction+0x276>
				//Implement RFC7641 (observe) "4.5.2.  Advanced Transmission" and send a fresher representation
				//also reset transmission parameters (since previous transfer ended successfully)
				pIA->State = COAP_STATE_READY_TO_NOTIFY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	715a      	strb	r2, [r3, #5]
				pIA->RetransCounter = 0;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				pIA->UpdatePendingNotification = false;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				pIA->pRespMsg->MessageID = CoAP_GetNextMid();
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008f84:	f000 fe98 	bl	8009cb8 <CoAP_GetNextMid>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	80e3      	strh	r3, [r4, #6]
				pIA->ResConfirmState = NOT_SET;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				//call notifier
				if (pIA->pRes->Notifier(pIA->pObserver, pIA->pRespMsg) == HANDLER_ERROR) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68d0      	ldr	r0, [r2, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4798      	blx	r3
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d10c      	bne.n	8008fc6 <handleNotifyInteraction+0x24e>
					RemoveObserveOptionFromMsg(pIA->pRespMsg);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f002 fd4c 	bl	800ba4e <RemoveObserveOptionFromMsg>
					CoAP_RemoveInteractionsObserver(pIA, pIA->pRespMsg->Token);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	330c      	adds	r3, #12
 8008fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fe ff16 	bl	8007df0 <CoAP_RemoveInteractionsObserver>
 8008fc4:	e008      	b.n	8008fd8 <handleNotifyInteraction+0x260>
				} else { //good response
					UpdateObserveOptionInMsg(pIA->pRespMsg, pIA->pRes->UpdateCnt);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f002 fd5a 	bl	800ba8c <UpdateObserveOptionInMsg>
				}
				INFO("- Started new notification since resource has been updated!\r\n");
 8008fd8:	4916      	ldr	r1, [pc, #88]	; (8009034 <handleNotifyInteraction+0x2bc>)
 8008fda:	4811      	ldr	r0, [pc, #68]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008fdc:	f012 fec2 	bl	801bd64 <siprintf>
 8008fe0:	480f      	ldr	r0, [pc, #60]	; (8009020 <handleNotifyInteraction+0x2a8>)
 8008fe2:	f7ff f823 	bl	800802c <hal_debug_puts>
				CoAP_EnqueueLastInteraction(pIA);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe fdb4 	bl	8007b54 <CoAP_EnqueueLastInteraction>
				return;
 8008fec:	e012      	b.n	8009014 <handleNotifyInteraction+0x29c>
			}
#endif
			CoAP_DeleteInteraction(pIA); //done!
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fe fda0 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 8008ff4:	e00e      	b.n	8009014 <handleNotifyInteraction+0x29c>

		case COAP_ERR_OUT_OF_ATTEMPTS: //check is resource is a lazy observe delete one
		case COAP_ERR_REMOTE_RST:
			CoAP_RemoveInteractionsObserver(pIA, pIA->pRespMsg->Token);  //remove observer from resource
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fe fef6 	bl	8007df0 <CoAP_RemoveInteractionsObserver>
			CoAP_DeleteInteraction(pIA);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fe fd95 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 800900a:	e003      	b.n	8009014 <handleNotifyInteraction+0x29c>
		default:
			CoAP_DeleteInteraction(pIA);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7fe fd91 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 8009012:	bf00      	nop
		}
	}
}
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901a:	bf00      	nop
 800901c:	0801db68 	.word	0x0801db68
 8009020:	200007d8 	.word	0x200007d8
 8009024:	0801db80 	.word	0x0801db80
 8009028:	0801db98 	.word	0x0801db98
 800902c:	0801dbb8 	.word	0x0801dbb8
 8009030:	0801dbe4 	.word	0x0801dbe4
 8009034:	0801dc20 	.word	0x0801dc20

08009038 <handleClientInteraction>:

static void handleClientInteraction(CoAP_Interaction_t* pIA) {
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	b089      	sub	sp, #36	; 0x24
 800903c:	af04      	add	r7, sp, #16
 800903e:	6078      	str	r0, [r7, #4]

	//------------------------------------------
	if (pIA->State == COAP_STATE_READY_TO_REQUEST) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	2b07      	cmp	r3, #7
 8009046:	d104      	bne.n	8009052 <handleClientInteraction+0x1a>
		//------------------------------------------
		//o>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		SendReq(pIA, COAP_STATE_WAITING_RESPONSE); //transmit response & move to next state
 8009048:	2108      	movs	r1, #8
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fb18 	bl	8008680 <SendReq>
		if (pIA->RespCB != NULL) {
			pIA->RespCB(NULL, pIA->pReqMsg, &pIA->RemoteEp);
		}
		CoAP_DeleteInteraction(pIA); //unknown state, should not go here
	}
}
 8009050:	e088      	b.n	8009164 <handleClientInteraction+0x12c>
	} else if (pIA->State == COAP_STATE_WAITING_RESPONSE) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	795b      	ldrb	r3, [r3, #5]
 8009056:	2b08      	cmp	r3, #8
 8009058:	d15f      	bne.n	800911a <handleClientInteraction+0xe2>
		CoAP_Result_t reqStatus = CheckReqStatus(pIA);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff fbe0 	bl	8008820 <CheckReqStatus>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]
		switch (reqStatus) {
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	2b1c      	cmp	r3, #28
 8009068:	d002      	beq.n	8009070 <handleClientInteraction+0x38>
 800906a:	2b1e      	cmp	r3, #30
 800906c:	d004      	beq.n	8009078 <handleClientInteraction+0x40>
 800906e:	e044      	b.n	80090fa <handleClientInteraction+0xc2>
			CoAP_EnqueueLastInteraction(pIA); //(re)enqueue interaction for further processing
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7fe fd6f 	bl	8007b54 <CoAP_EnqueueLastInteraction>
			break;
 8009076:	e075      	b.n	8009164 <handleClientInteraction+0x12c>
			if (CoAP_SendMsg(pIA->pReqMsg, pIA->socketHandle, pIA->RemoteEp) == COAP_OK) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	687c      	ldr	r4, [r7, #4]
 8009084:	466d      	mov	r5, sp
 8009086:	f104 0318 	add.w	r3, r4, #24
 800908a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800908c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009090:	f104 0310 	add.w	r3, r4, #16
 8009094:	cb0c      	ldmia	r3, {r2, r3}
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	4630      	mov	r0, r6
 800909a:	f000 fce5 	bl	8009a68 <CoAP_SendMsg>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10f      	bne.n	80090c4 <handleClientInteraction+0x8c>
				pIA->RetransCounter++;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				CoAP_EnableAckTimeout(pIA, pIA->RetransCounter);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7fe fccd 	bl	8007a5c <CoAP_EnableAckTimeout>
			break;
 80090c2:	e04f      	b.n	8009164 <handleClientInteraction+0x12c>
				INFO("(!!!) Internal socket error on sending request retry! MiD: %d\r\n",
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	88db      	ldrh	r3, [r3, #6]
 80090ca:	461a      	mov	r2, r3
 80090cc:	4927      	ldr	r1, [pc, #156]	; (800916c <handleClientInteraction+0x134>)
 80090ce:	4828      	ldr	r0, [pc, #160]	; (8009170 <handleClientInteraction+0x138>)
 80090d0:	f012 fe48 	bl	801bd64 <siprintf>
 80090d4:	4826      	ldr	r0, [pc, #152]	; (8009170 <handleClientInteraction+0x138>)
 80090d6:	f7fe ffa9 	bl	800802c <hal_debug_puts>
				if (pIA->RespCB != NULL) {
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <handleClientInteraction+0xba>
					pIA->RespCB(NULL, pIA->pReqMsg, &pIA->RemoteEp);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	3210      	adds	r2, #16
 80090ee:	2000      	movs	r0, #0
 80090f0:	4798      	blx	r3
				CoAP_DeleteInteraction(pIA);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fe fd1e 	bl	8007b34 <CoAP_DeleteInteraction>
			break;
 80090f8:	e034      	b.n	8009164 <handleClientInteraction+0x12c>
			if (pIA->RespCB != NULL) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <handleClientInteraction+0xda>
				pIA->RespCB(NULL, pIA->pReqMsg, &pIA->RemoteEp);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	3210      	adds	r2, #16
 800910e:	2000      	movs	r0, #0
 8009110:	4798      	blx	r3
			CoAP_DeleteInteraction(pIA);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fe fd0e 	bl	8007b34 <CoAP_DeleteInteraction>
}
 8009118:	e024      	b.n	8009164 <handleClientInteraction+0x12c>
	} else if (pIA->State == COAP_STATE_HANDLE_RESPONSE) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	795b      	ldrb	r3, [r3, #5]
 800911e:	2b09      	cmp	r3, #9
 8009120:	d110      	bne.n	8009144 <handleClientInteraction+0x10c>
		if (pIA->RespCB != NULL) {
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <handleClientInteraction+0x104>
			pIA->RespCB(pIA->pRespMsg, pIA->pReqMsg, &(pIA->RemoteEp)); //call callback
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	3210      	adds	r2, #16
 800913a:	4798      	blx	r3
		CoAP_DeleteInteraction(
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7fe fcf9 	bl	8007b34 <CoAP_DeleteInteraction>
}
 8009142:	e00f      	b.n	8009164 <handleClientInteraction+0x12c>
		if (pIA->RespCB != NULL) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009148:	2b00      	cmp	r3, #0
 800914a:	d007      	beq.n	800915c <handleClientInteraction+0x124>
			pIA->RespCB(NULL, pIA->pReqMsg, &pIA->RemoteEp);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	3210      	adds	r2, #16
 8009158:	2000      	movs	r0, #0
 800915a:	4798      	blx	r3
		CoAP_DeleteInteraction(pIA); //unknown state, should not go here
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe fce9 	bl	8007b34 <CoAP_DeleteInteraction>
}
 8009162:	e7ff      	b.n	8009164 <handleClientInteraction+0x12c>
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916c:	0801dc60 	.word	0x0801dc60
 8009170:	200007d8 	.word	0x200007d8

08009174 <CoAP_doWork>:

//must be called regularly
void _rom CoAP_doWork() {
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
	CoAP_Interaction_t* pIA = CoAP_GetLongestPendingInteraction();
 800917a:	f7fe fc9f 	bl	8007abc <CoAP_GetLongestPendingInteraction>
 800917e:	6078      	str	r0, [r7, #4]

	if (pIA == NULL) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d037      	beq.n	80091f6 <CoAP_doWork+0x82>
		return;
	}



	uint32_t now = CoAP.api.rtc1HzCnt();
 8009186:	4b1e      	ldr	r3, [pc, #120]	; (8009200 <CoAP_doWork+0x8c>)
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	4798      	blx	r3
 800918c:	6038      	str	r0, [r7, #0]

	if (timeAfter(pIA->SleepUntil, now)) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009192:	461a      	mov	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	db03      	blt.n	80091a4 <CoAP_doWork+0x30>
		//INFO("Interaction paused till %lu (remaining: %lu)\n",pIA->SleepUntil, pIA->SleepUntil - now);
		CoAP_EnqueueLastInteraction(pIA);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7fe fcd9 	bl	8007b54 <CoAP_EnqueueLastInteraction>
		return;
 80091a2:	e029      	b.n	80091f8 <CoAP_doWork+0x84>
	//INFO("Now: %lu\n", now);

	//	INFO("pending Transaction found! ReqTime: %u\r\n", pIA->ReqTime);
	//	com_mem_stats();

	switch (pIA->Role) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	791b      	ldrb	r3, [r3, #4]
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d00e      	beq.n	80091ca <CoAP_doWork+0x56>
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	dc10      	bgt.n	80091d2 <CoAP_doWork+0x5e>
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d002      	beq.n	80091ba <CoAP_doWork+0x46>
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d004      	beq.n	80091c2 <CoAP_doWork+0x4e>
 80091b8:	e00b      	b.n	80091d2 <CoAP_doWork+0x5e>
	case COAP_ROLE_SERVER:
		handleServerInteraction(pIA);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fbba 	bl	8008934 <handleServerInteraction>
		break;
 80091c0:	e01a      	b.n	80091f8 <CoAP_doWork+0x84>
	case COAP_ROLE_NOTIFICATION:
		handleNotifyInteraction(pIA);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff fdd8 	bl	8008d78 <handleNotifyInteraction>
		break;
 80091c8:	e016      	b.n	80091f8 <CoAP_doWork+0x84>
	case COAP_ROLE_CLIENT:
		handleClientInteraction(pIA);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff ff34 	bl	8009038 <handleClientInteraction>
		break;
 80091d0:	e012      	b.n	80091f8 <CoAP_doWork+0x84>
	default:
		ERROR("Unknown Notification Role: %d", pIA->Role);
 80091d2:	490c      	ldr	r1, [pc, #48]	; (8009204 <CoAP_doWork+0x90>)
 80091d4:	480c      	ldr	r0, [pc, #48]	; (8009208 <CoAP_doWork+0x94>)
 80091d6:	f012 fdc5 	bl	801bd64 <siprintf>
 80091da:	480b      	ldr	r0, [pc, #44]	; (8009208 <CoAP_doWork+0x94>)
 80091dc:	f7fe ff26 	bl	800802c <hal_debug_puts>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	791b      	ldrb	r3, [r3, #4]
 80091e4:	461a      	mov	r2, r3
 80091e6:	4909      	ldr	r1, [pc, #36]	; (800920c <CoAP_doWork+0x98>)
 80091e8:	4807      	ldr	r0, [pc, #28]	; (8009208 <CoAP_doWork+0x94>)
 80091ea:	f012 fdbb 	bl	801bd64 <siprintf>
 80091ee:	4806      	ldr	r0, [pc, #24]	; (8009208 <CoAP_doWork+0x94>)
 80091f0:	f7fe ff1c 	bl	800802c <hal_debug_puts>
 80091f4:	e000      	b.n	80091f8 <CoAP_doWork+0x84>
		return;
 80091f6:	bf00      	nop
	}
}
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000790 	.word	0x20000790
 8009204:	0801d5b4 	.word	0x0801d5b4
 8009208:	200007d8 	.word	0x200007d8
 800920c:	0801dca0 	.word	0x0801dca0

08009210 <CoAP_free>:
#include "coap.h"
#include "coap_mem.h"

void CoAP_free(void *a) {
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	CoAP.api.free(a);
 8009218:	4b03      	ldr	r3, [pc, #12]	; (8009228 <CoAP_free+0x18>)
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	4798      	blx	r3
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000790 	.word	0x20000790

0800922c <CoAP_malloc>:

void *CoAP_malloc(size_t size) {
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	return CoAP.api.malloc(size);
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <CoAP_malloc+0x1c>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
 800923c:	4603      	mov	r3, r0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000790 	.word	0x20000790

0800924c <CoAP_malloc0>:

void *CoAP_malloc0(size_t size) {
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	void *a = CoAP.api.malloc(size);
 8009254:	4b08      	ldr	r3, [pc, #32]	; (8009278 <CoAP_malloc0+0x2c>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
	if (a != NULL) {
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <CoAP_malloc0+0x22>
		memset(a, 0, size);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f012 fe9d 	bl	801bfa8 <memset>
	}
	return a;
 800926e:	68fb      	ldr	r3, [r7, #12]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000790 	.word	0x20000790

0800927c <CoAP_InitToEmptyResetMsg>:
#include <inttypes.h>
#include "coap.h"
#include "liblobaro_coap.h"
#include "coap_mem.h"

static void _rom CoAP_InitToEmptyResetMsg(CoAP_Message_t* msg) {
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	msg->Type = RST;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2203      	movs	r2, #3
 8009288:	711a      	strb	r2, [r3, #4]
	msg->Code = EMPTY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	715a      	strb	r2, [r3, #5]
	msg->PayloadLength = 0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	811a      	strh	r2, [r3, #8]
	msg->PayloadBufSize = 0;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	815a      	strh	r2, [r3, #10]
	msg->MessageID = 0;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	80da      	strh	r2, [r3, #6]
	msg->pOptionsList = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	619a      	str	r2, [r3, #24]
	msg->Payload = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	61da      	str	r2, [r3, #28]
	CoAP_Token_t tok = {.Token= {0,0,0,0,0,0,0,0}, .Length = 0};
 80092ae:	4a0a      	ldr	r2, [pc, #40]	; (80092d8 <CoAP_InitToEmptyResetMsg+0x5c>)
 80092b0:	f107 030c 	add.w	r3, r7, #12
 80092b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80092b6:	c303      	stmia	r3!, {r0, r1}
 80092b8:	701a      	strb	r2, [r3, #0]
	msg->Token = tok;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	330c      	adds	r3, #12
 80092be:	f107 020c 	add.w	r2, r7, #12
 80092c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80092c4:	c303      	stmia	r3!, {r0, r1}
 80092c6:	701a      	strb	r2, [r3, #0]
	msg->Timestamp = 0;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr
 80092d8:	0801dcc0 	.word	0x0801dcc0

080092dc <CoAP_TokenEqual>:


bool CoAP_TokenEqual(CoAP_Token_t a, CoAP_Token_t b) {
 80092dc:	b082      	sub	sp, #8
 80092de:	b490      	push	{r4, r7}
 80092e0:	b086      	sub	sp, #24
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	1d3c      	adds	r4, r7, #4
 80092e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (a.Length != b.Length) {
 80092ec:	793a      	ldrb	r2, [r7, #4]
 80092ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d001      	beq.n	80092fa <CoAP_TokenEqual+0x1e>
		return false;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e018      	b.n	800932c <CoAP_TokenEqual+0x50>
	}
	for (int i = 0; i < a.Length; i++) {
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e00f      	b.n	8009320 <CoAP_TokenEqual+0x44>
		if (a.Token[i] != b.Token[i]) {
 8009300:	1d7a      	adds	r2, r7, #5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	f107 0125 	add.w	r1, r7, #37	; 0x25
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	440b      	add	r3, r1
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d001      	beq.n	800931a <CoAP_TokenEqual+0x3e>
			return false;
 8009316:	2300      	movs	r3, #0
 8009318:	e008      	b.n	800932c <CoAP_TokenEqual+0x50>
	for (int i = 0; i < a.Length; i++) {
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	3301      	adds	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	793b      	ldrb	r3, [r7, #4]
 8009322:	461a      	mov	r2, r3
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4293      	cmp	r3, r2
 8009328:	dbea      	blt.n	8009300 <CoAP_TokenEqual+0x24>
		}
	}
	return true;
 800932a:	2301      	movs	r3, #1
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bc90      	pop	{r4, r7}
 8009334:	b002      	add	sp, #8
 8009336:	4770      	bx	lr

08009338 <CoAP_free_MsgPayload>:

void _rom CoAP_free_MsgPayload(CoAP_Message_t** Msg) {
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	return;
 8009340:	bf00      	nop
	// TODO: this will break us!!!
	CoAP.api.free((void*) (*Msg)->Payload);
	(*Msg)->Payload = NULL;
	(*Msg)->PayloadBufSize = 0;
	*/
}
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <CoAP_MsgIsRequest>:

bool _rom CoAP_MsgIsRequest(CoAP_Message_t* pMsg) {
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
	if (pMsg->Code != EMPTY && pMsg->Code <= REQ_LAST)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	795b      	ldrb	r3, [r3, #5]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <CoAP_MsgIsRequest+0x1c>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	795b      	ldrb	r3, [r3, #5]
 800935e:	2b07      	cmp	r3, #7
 8009360:	d801      	bhi.n	8009366 <CoAP_MsgIsRequest+0x1c>
		return true;
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <CoAP_MsgIsRequest+0x1e>
	return false;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
	...

08009374 <CoAP_MsgIsOlderThan>:
	if (pMsg->Code != EMPTY && pMsg->Code >= RESP_FIRST_2_00)
		return true;
	return false;
}

bool _rom CoAP_MsgIsOlderThan(CoAP_Message_t* pMsg, uint32_t timespan) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	if (timeAfter(CoAP.api.rtc1HzCnt(), pMsg->Timestamp + timespan)) {
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <CoAP_MsgIsOlderThan+0x30>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4798      	blx	r3
 8009384:	4603      	mov	r3, r0
 8009386:	4619      	mov	r1, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	4413      	add	r3, r2
 8009390:	1acb      	subs	r3, r1, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	db01      	blt.n	800939a <CoAP_MsgIsOlderThan+0x26>
		return true;
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <CoAP_MsgIsOlderThan+0x28>
	}
	else {
		return false;
 800939a:	2300      	movs	r3, #0
	}
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000790 	.word	0x20000790

080093a8 <CoAP_free_Message>:

CoAP_Result_t _rom CoAP_free_Message(CoAP_Message_t** Msg) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	DEBUG_COAP("Free message %p\n", *Msg);
	if (*Msg == NULL) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <CoAP_free_Message+0x14>
		return COAP_OK; //nothing to free
 80093b8:	2300      	movs	r3, #0
 80093ba:	e01f      	b.n	80093fc <CoAP_free_Message+0x54>
	}

	if ((*Msg)->Type == CON) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	791b      	ldrb	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <CoAP_free_Message+0x30>
		DEBUG_COAP("- Message memory freed! (CON, MID: %d):\r\n", (*Msg)->MessageID);
	}
	else if ((*Msg)->Type == NON) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	791b      	ldrb	r3, [r3, #4]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d003      	beq.n	80093d8 <CoAP_free_Message+0x30>
		DEBUG_COAP("- Message memory freed! (NON, MID: %d):\r\n", (*Msg)->MessageID);
	}
	else if ((*Msg)->Type == ACK) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	791b      	ldrb	r3, [r3, #4]
 80093d6:	2b02      	cmp	r3, #2
	}
	else if ((*Msg)->Type == RST) {
		DEBUG_COAP("- Message memory freed! (RST, MID: %d):\r\n", (*Msg)->MessageID);
	}

	CoAP_FreeOptionList(&((*Msg)->pOptionsList));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3318      	adds	r3, #24
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fba2 	bl	800ab28 <CoAP_FreeOptionList>
	CoAP_free_MsgPayload(Msg);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ffa7 	bl	8009338 <CoAP_free_MsgPayload>

	//finally delete msg body
	CoAP_free((void*) (*Msg));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff ff0e 	bl	8009210 <CoAP_free>
	*Msg = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]

	return COAP_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <CoAP_getRespMsgType>:

static CoAP_MessageType_t _rom CoAP_getRespMsgType(CoAP_Message_t* ReqMsg) { //todo inline it
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	if (ReqMsg->Type == CON)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	791b      	ldrb	r3, [r3, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <CoAP_getRespMsgType+0x14>
		return ACK; //for piggybacked responses
 8009414:	2302      	movs	r3, #2
 8009416:	e000      	b.n	800941a <CoAP_getRespMsgType+0x16>
	else
		return NON;
 8009418:	2301      	movs	r3, #1
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr

08009424 <CoAP_getRespMsgID>:

static uint16_t _rom CoAP_getRespMsgID(CoAP_Message_t* ReqMsg) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	if (ReqMsg->Type == CON)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	791b      	ldrb	r3, [r3, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <CoAP_getRespMsgID+0x16>
		return ReqMsg->MessageID; //for piggybacked responses
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	e002      	b.n	8009440 <CoAP_getRespMsgID+0x1c>
	else
		return CoAP_GetNextMid();
 800943a:	f000 fc3d 	bl	8009cb8 <CoAP_GetNextMid>
 800943e:	4603      	mov	r3, r0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <CoAP_AllocRespMsg>:

CoAP_Message_t* _rom CoAP_AllocRespMsg(CoAP_Message_t* ReqMsg, CoAP_MessageCode_t Code, uint16_t PayloadMaxSize) {
 8009448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944a:	b089      	sub	sp, #36	; 0x24
 800944c:	af06      	add	r7, sp, #24
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
 8009454:	4613      	mov	r3, r2
 8009456:	803b      	strh	r3, [r7, #0]
	return CoAP_CreateMessage(CoAP_getRespMsgType(ReqMsg), Code, CoAP_getRespMsgID(ReqMsg), NULL, 0, PayloadMaxSize, ReqMsg->Token);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ffd3 	bl	8009404 <CoAP_getRespMsgType>
 800945e:	4603      	mov	r3, r0
 8009460:	461d      	mov	r5, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ffde 	bl	8009424 <CoAP_getRespMsgID>
 8009468:	4603      	mov	r3, r0
 800946a:	461e      	mov	r6, r3
 800946c:	78fc      	ldrb	r4, [r7, #3]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	ab02      	add	r3, sp, #8
 8009472:	320c      	adds	r2, #12
 8009474:	ca07      	ldmia	r2, {r0, r1, r2}
 8009476:	c303      	stmia	r3!, {r0, r1}
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	883b      	ldrh	r3, [r7, #0]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	2300      	movs	r3, #0
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	4632      	mov	r2, r6
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f805 	bl	8009498 <CoAP_CreateMessage>
 800948e:	4603      	mov	r3, r0
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009498 <CoAP_CreateMessage>:
		CoAP_MessageCode_t Code,
		uint16_t MessageID,
		const uint8_t* pPayloadInitialContent,
		uint16_t PayloadInitialContentLength,
		uint16_t PayloadMaxSize,
		CoAP_Token_t Token) {
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	71fb      	strb	r3, [r7, #7]
 80094a4:	460b      	mov	r3, r1
 80094a6:	71bb      	strb	r3, [r7, #6]
 80094a8:	4613      	mov	r3, r2
 80094aa:	80bb      	strh	r3, [r7, #4]

	//safety checks
	if (PayloadInitialContentLength > PayloadMaxSize) {
 80094ac:	8b3a      	ldrh	r2, [r7, #24]
 80094ae:	8bbb      	ldrh	r3, [r7, #28]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d90f      	bls.n	80094d4 <CoAP_CreateMessage+0x3c>
		ERROR("Initial Content bigger than field size!");
 80094b4:	492a      	ldr	r1, [pc, #168]	; (8009560 <CoAP_CreateMessage+0xc8>)
 80094b6:	482b      	ldr	r0, [pc, #172]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094b8:	f012 fc54 	bl	801bd64 <siprintf>
 80094bc:	4829      	ldr	r0, [pc, #164]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094be:	f7fe fdb5 	bl	800802c <hal_debug_puts>
 80094c2:	4929      	ldr	r1, [pc, #164]	; (8009568 <CoAP_CreateMessage+0xd0>)
 80094c4:	4827      	ldr	r0, [pc, #156]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094c6:	f012 fc4d 	bl	801bd64 <siprintf>
 80094ca:	4826      	ldr	r0, [pc, #152]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094cc:	f7fe fdae 	bl	800802c <hal_debug_puts>
		return NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e041      	b.n	8009558 <CoAP_CreateMessage+0xc0>
	}

	CoAP_Message_t* pMsg = (CoAP_Message_t*) CoAP_malloc0(sizeof(CoAP_Message_t) + PayloadMaxSize); //malloc space
 80094d4:	8bbb      	ldrh	r3, [r7, #28]
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff feb7 	bl	800924c <CoAP_malloc0>
 80094de:	60f8      	str	r0, [r7, #12]
	if (pMsg == NULL) {
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <CoAP_CreateMessage+0x52>
		return NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e036      	b.n	8009558 <CoAP_CreateMessage+0xc0>
	}
	INFO("Created message %p\n", pMsg);
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	491f      	ldr	r1, [pc, #124]	; (800956c <CoAP_CreateMessage+0xd4>)
 80094ee:	481d      	ldr	r0, [pc, #116]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094f0:	f012 fc38 	bl	801bd64 <siprintf>
 80094f4:	481b      	ldr	r0, [pc, #108]	; (8009564 <CoAP_CreateMessage+0xcc>)
 80094f6:	f7fe fd99 	bl	800802c <hal_debug_puts>

	CoAP_InitToEmptyResetMsg(pMsg); //init
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff febe 	bl	800927c <CoAP_InitToEmptyResetMsg>

	pMsg->Type = Type;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	79fa      	ldrb	r2, [r7, #7]
 8009504:	711a      	strb	r2, [r3, #4]
	pMsg->Code = Code;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	79ba      	ldrb	r2, [r7, #6]
 800950a:	715a      	strb	r2, [r3, #5]
	pMsg->MessageID = MessageID;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88ba      	ldrh	r2, [r7, #4]
 8009510:	80da      	strh	r2, [r3, #6]
	pMsg->Token = Token;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	330c      	adds	r3, #12
 8009516:	f107 0220 	add.w	r2, r7, #32
 800951a:	ca07      	ldmia	r2, {r0, r1, r2}
 800951c:	c303      	stmia	r3!, {r0, r1}
 800951e:	701a      	strb	r2, [r3, #0]
	pMsg->Timestamp = 0;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]

	pMsg->PayloadLength = PayloadInitialContentLength;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8b3a      	ldrh	r2, [r7, #24]
 800952a:	811a      	strh	r2, [r3, #8]
	if (PayloadMaxSize) {
 800952c:	8bbb      	ldrh	r3, [r7, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d011      	beq.n	8009556 <CoAP_CreateMessage+0xbe>
		pMsg->PayloadBufSize = PayloadMaxSize;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8bba      	ldrh	r2, [r7, #28]
 8009536:	815a      	strh	r2, [r3, #10]
		pMsg->Payload = ((uint8_t*) (pMsg)) + sizeof(CoAP_Message_t); //set pointer
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	61da      	str	r2, [r3, #28]
		if (pPayloadInitialContent != NULL) {
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d006      	beq.n	8009556 <CoAP_CreateMessage+0xbe>
			coap_memcpy((void*) ((pMsg)->Payload), (void*) pPayloadInitialContent, PayloadInitialContentLength);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	8b3a      	ldrh	r2, [r7, #24]
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f012 fdc8 	bl	801c0e6 <memcpy>
		}
	}

	return pMsg;
 8009556:	68fb      	ldr	r3, [r7, #12]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	0801dccc 	.word	0x0801dccc
 8009564:	200007d8 	.word	0x200007d8
 8009568:	0801dcd8 	.word	0x0801dcd8
 800956c:	0801dd00 	.word	0x0801dd00

08009570 <CoAP_ParseMessageFromDatagram>:

CoAP_Result_t _rom CoAP_ParseMessageFromDatagram(uint8_t* srcArr, uint16_t srcArrLength, CoAP_Message_t** rxedMsg) {
 8009570:	b590      	push	{r4, r7, lr}
 8009572:	b08b      	sub	sp, #44	; 0x2c
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	460b      	mov	r3, r1
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	817b      	strh	r3, [r7, #10]
	//we use local mem and copy afterwards because we dont know yet the size of payload buffer
	//but want to allocate one block for complete final "rxedMsg" memory without realloc the buf size later.
	static CoAP_Message_t Msg;

	uint8_t TokenLength = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	*rxedMsg = NULL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]

	if (srcArrLength < 4)
 800958a:	897b      	ldrh	r3, [r7, #10]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d801      	bhi.n	8009594 <CoAP_ParseMessageFromDatagram+0x24>
		return COAP_PARSE_DATAGRAM_TOO_SHORT; // Minimum Size of CoAP Message = 4 Bytes
 8009590:	2302      	movs	r3, #2
 8009592:	e102      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>

	CoAP_InitToEmptyResetMsg(&Msg);
 8009594:	4883      	ldr	r0, [pc, #524]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009596:	f7ff fe71 	bl	800927c <CoAP_InitToEmptyResetMsg>

//1st Header Byte
	uint8_t Version = srcArr[0] >> 6u;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	099b      	lsrs	r3, r3, #6
 80095a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if (Version != COAP_VERSION)
 80095a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d001      	beq.n	80095b0 <CoAP_ParseMessageFromDatagram+0x40>
		return COAP_PARSE_UNKOWN_COAP_VERSION;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e0f4      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>

	Msg.Type = (srcArr[0] & 0x30u) >> 4u;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	4b79      	ldr	r3, [pc, #484]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 80095c0:	711a      	strb	r2, [r3, #4]
	TokenLength = srcArr[0] & 0xFu;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (TokenLength > 8) {
 80095ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d908      	bls.n	80095e8 <CoAP_ParseMessageFromDatagram+0x78>
		INFO("CoAP-Parse Byte1 Error\r\n");
 80095d6:	4974      	ldr	r1, [pc, #464]	; (80097a8 <CoAP_ParseMessageFromDatagram+0x238>)
 80095d8:	4874      	ldr	r0, [pc, #464]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 80095da:	f012 fbc3 	bl	801bd64 <siprintf>
 80095de:	4873      	ldr	r0, [pc, #460]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 80095e0:	f7fe fd24 	bl	800802c <hal_debug_puts>
		return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 80095e4:	2304      	movs	r3, #4
 80095e6:	e0d8      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>
	} // return COAP_PARSE_MESSAGE_FORMAT_ERROR;

//2nd & 3rd Header Byte
	Msg.Code = srcArr[1];
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3301      	adds	r3, #1
 80095ec:	781a      	ldrb	r2, [r3, #0]
 80095ee:	4b6d      	ldr	r3, [pc, #436]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 80095f0:	715a      	strb	r2, [r3, #5]

	//"Hack" to support early version of "myCoAP" iOS app which sends malformed "CoAP-pings" containing a token...
	//if(Msg.Code == EMPTY && (TokenLength != 0 || srcArrLength != 4))	{INFO("err2\r\n");return COAP_PARSE_MESSAGE_FORMAT_ERROR;}// return COAP_PARSE_MESSAGE_FORMAT_ERROR;

	uint8_t codeClass = ((uint8_t) Msg.Code) >> 5u;
 80095f2:	4b6c      	ldr	r3, [pc, #432]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 80095f4:	795b      	ldrb	r3, [r3, #5]
 80095f6:	095b      	lsrs	r3, r3, #5
 80095f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (codeClass == 1 || codeClass == 6 || codeClass == 7) {
 80095fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009600:	2b01      	cmp	r3, #1
 8009602:	d007      	beq.n	8009614 <CoAP_ParseMessageFromDatagram+0xa4>
 8009604:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009608:	2b06      	cmp	r3, #6
 800960a:	d003      	beq.n	8009614 <CoAP_ParseMessageFromDatagram+0xa4>
 800960c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009610:	2b07      	cmp	r3, #7
 8009612:	d108      	bne.n	8009626 <CoAP_ParseMessageFromDatagram+0xb6>
		INFO("CoAP-Parse Byte2/3 Error\r\n");
 8009614:	4966      	ldr	r1, [pc, #408]	; (80097b0 <CoAP_ParseMessageFromDatagram+0x240>)
 8009616:	4865      	ldr	r0, [pc, #404]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 8009618:	f012 fba4 	bl	801bd64 <siprintf>
 800961c:	4863      	ldr	r0, [pc, #396]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 800961e:	f7fe fd05 	bl	800802c <hal_debug_puts>
		return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 8009622:	2304      	movs	r3, #4
 8009624:	e0b9      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>
	}	//  return COAP_PARSE_MESSAGE_FORMAT_ERROR; //reserved classes

//4th Header Byte
	Msg.MessageID = (uint16_t) srcArr[2] << 8u | srcArr[3];
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3302      	adds	r3, #2
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	b21a      	sxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3303      	adds	r3, #3
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b21b      	sxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b21b      	sxth	r3, r3
 800963c:	b29a      	uxth	r2, r3
 800963e:	4b59      	ldr	r3, [pc, #356]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009640:	80da      	strh	r2, [r3, #6]

//further parsing locations depend on parsed 4Byte CoAP Header -> use of offset addressing
	uint16_t offset = 4;
 8009642:	2304      	movs	r3, #4
 8009644:	83fb      	strh	r3, [r7, #30]
	if (srcArrLength == offset) //no more data -> maybe a CoAP Ping
 8009646:	897a      	ldrh	r2, [r7, #10]
 8009648:	8bfb      	ldrh	r3, [r7, #30]
 800964a:	429a      	cmp	r2, r3
 800964c:	d06e      	beq.n	800972c <CoAP_ParseMessageFromDatagram+0x1bc>
		goto START_MSG_COPY_LABEL;
		//quick end of parsing...
	}

//Token (if any)
	CoAP_Token_t tok = {.Token = {0,0,0,0,0,0,0,0}, .Length = TokenLength};
 800964e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009652:	753b      	strb	r3, [r7, #20]
 8009654:	4b57      	ldr	r3, [pc, #348]	; (80097b4 <CoAP_ParseMessageFromDatagram+0x244>)
 8009656:	f107 0215 	add.w	r2, r7, #21
 800965a:	cb03      	ldmia	r3!, {r0, r1}
 800965c:	6010      	str	r0, [r2, #0]
 800965e:	6051      	str	r1, [r2, #4]
	Msg.Token = tok;
 8009660:	4b50      	ldr	r3, [pc, #320]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009662:	330c      	adds	r3, #12
 8009664:	f107 0214 	add.w	r2, r7, #20
 8009668:	ca07      	ldmia	r2, {r0, r1, r2}
 800966a:	c303      	stmia	r3!, {r0, r1}
 800966c:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i < TokenLength; i++) {
 800966e:	2300      	movs	r3, #0
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
 8009672:	e00f      	b.n	8009694 <CoAP_ParseMessageFromDatagram+0x124>
		Msg.Token.Token[i] = srcArr[offset + i];
 8009674:	8bfa      	ldrh	r2, [r7, #30]
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	4413      	add	r3, r2
 800967a:	461a      	mov	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	7819      	ldrb	r1, [r3, #0]
 8009682:	4a48      	ldr	r2, [pc, #288]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	4413      	add	r3, r2
 8009688:	330d      	adds	r3, #13
 800968a:	460a      	mov	r2, r1
 800968c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TokenLength; i++) {
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	3301      	adds	r3, #1
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	429a      	cmp	r2, r3
 800969c:	dbea      	blt.n	8009674 <CoAP_ParseMessageFromDatagram+0x104>
	}

	offset += TokenLength;
 800969e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	8bfb      	ldrh	r3, [r7, #30]
 80096a6:	4413      	add	r3, r2
 80096a8:	83fb      	strh	r3, [r7, #30]
	if (srcArrLength == offset)
 80096aa:	897a      	ldrh	r2, [r7, #10]
 80096ac:	8bfb      	ldrh	r3, [r7, #30]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d03e      	beq.n	8009730 <CoAP_ParseMessageFromDatagram+0x1c0>
		goto START_MSG_COPY_LABEL;

//Options (if any)
	uint8_t* pPayloadBegin = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]

	//this allocates memory for every option and puts it in die pOptionsList linked list
	//start address of payload also given back
	CoAP_Result_t ParseOptionsResult = parse_OptionsFromRaw(&(srcArr[offset]), srcArrLength - offset, &pPayloadBegin, &(Msg.pOptionsList));
 80096b6:	8bfb      	ldrh	r3, [r7, #30]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	18d0      	adds	r0, r2, r3
 80096bc:	897a      	ldrh	r2, [r7, #10]
 80096be:	8bfb      	ldrh	r3, [r7, #30]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	b299      	uxth	r1, r3
 80096c4:	f107 0210 	add.w	r2, r7, #16
 80096c8:	4b3b      	ldr	r3, [pc, #236]	; (80097b8 <CoAP_ParseMessageFromDatagram+0x248>)
 80096ca:	f000 ff7d 	bl	800a5c8 <parse_OptionsFromRaw>
 80096ce:	4603      	mov	r3, r0
 80096d0:	777b      	strb	r3, [r7, #29]

	if (ParseOptionsResult != COAP_OK) {
 80096d2:	7f7b      	ldrb	r3, [r7, #29]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <CoAP_ParseMessageFromDatagram+0x180>
		CoAP_FreeOptionList(&(Msg.pOptionsList));
 80096d8:	4837      	ldr	r0, [pc, #220]	; (80097b8 <CoAP_ParseMessageFromDatagram+0x248>)
 80096da:	f001 fa25 	bl	800ab28 <CoAP_FreeOptionList>
		INFO("CoAP-Parse Options Error\r\n");
 80096de:	4937      	ldr	r1, [pc, #220]	; (80097bc <CoAP_ParseMessageFromDatagram+0x24c>)
 80096e0:	4832      	ldr	r0, [pc, #200]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 80096e2:	f012 fb3f 	bl	801bd64 <siprintf>
 80096e6:	4831      	ldr	r0, [pc, #196]	; (80097ac <CoAP_ParseMessageFromDatagram+0x23c>)
 80096e8:	f7fe fca0 	bl	800802c <hal_debug_puts>
		return ParseOptionsResult;
 80096ec:	7f7b      	ldrb	r3, [r7, #29]
 80096ee:	e054      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>
	}

//Payload (if any)
	if (pPayloadBegin != NULL) {
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d012      	beq.n	800971c <CoAP_ParseMessageFromDatagram+0x1ac>
		Msg.PayloadLength = srcArrLength - (pPayloadBegin - srcArr);
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	897a      	ldrh	r2, [r7, #10]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	b29a      	uxth	r2, r3
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009706:	811a      	strh	r2, [r3, #8]
		if (Msg.PayloadLength > MAX_PAYLOAD_SIZE) {
 8009708:	4b26      	ldr	r3, [pc, #152]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009710:	d907      	bls.n	8009722 <CoAP_ParseMessageFromDatagram+0x1b2>
			CoAP_FreeOptionList(&(Msg.pOptionsList));
 8009712:	4829      	ldr	r0, [pc, #164]	; (80097b8 <CoAP_ParseMessageFromDatagram+0x248>)
 8009714:	f001 fa08 	bl	800ab28 <CoAP_FreeOptionList>
			return COAP_PARSE_TOO_MUCH_PAYLOAD;
 8009718:	2307      	movs	r3, #7
 800971a:	e03e      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>
		}
	} else
		Msg.PayloadLength = 0;
 800971c:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 800971e:	2200      	movs	r2, #0
 8009720:	811a      	strh	r2, [r3, #8]

	Msg.PayloadBufSize = Msg.PayloadLength;
 8009722:	4b20      	ldr	r3, [pc, #128]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009724:	891a      	ldrh	r2, [r3, #8]
 8009726:	4b1f      	ldr	r3, [pc, #124]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009728:	815a      	strh	r2, [r3, #10]
 800972a:	e002      	b.n	8009732 <CoAP_ParseMessageFromDatagram+0x1c2>
		goto START_MSG_COPY_LABEL;
 800972c:	bf00      	nop
 800972e:	e000      	b.n	8009732 <CoAP_ParseMessageFromDatagram+0x1c2>
		goto START_MSG_COPY_LABEL;
 8009730:	bf00      	nop

//Get memory for total message data and copy parsed data
//Payload Buffers MUST located at end of CoAP_Message_t to let this work!
	START_MSG_COPY_LABEL:
	*rxedMsg = (CoAP_Message_t*) CoAP_malloc(sizeof(CoAP_Message_t) + Msg.PayloadLength);
 8009732:	4b1c      	ldr	r3, [pc, #112]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009734:	891b      	ldrh	r3, [r3, #8]
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fd77 	bl	800922c <CoAP_malloc>
 800973e:	4602      	mov	r2, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	601a      	str	r2, [r3, #0]

	if (*rxedMsg == NULL)	//out of memory
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <CoAP_ParseMessageFromDatagram+0x1e6>
	{
		CoAP_FreeOptionList(&(Msg.pOptionsList));
 800974c:	481a      	ldr	r0, [pc, #104]	; (80097b8 <CoAP_ParseMessageFromDatagram+0x248>)
 800974e:	f001 f9eb 	bl	800ab28 <CoAP_FreeOptionList>
		return COAP_ERR_OUT_OF_MEMORY;
 8009752:	230d      	movs	r3, #13
 8009754:	e021      	b.n	800979a <CoAP_ParseMessageFromDatagram+0x22a>
	}

	coap_memcpy((void*) (*rxedMsg), (void*) &Msg, sizeof(CoAP_Message_t));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2224      	movs	r2, #36	; 0x24
 800975c:	4911      	ldr	r1, [pc, #68]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 800975e:	4618      	mov	r0, r3
 8009760:	f012 fcc1 	bl	801c0e6 <memcpy>

	if (Msg.PayloadLength) {
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00e      	beq.n	800978a <CoAP_ParseMessageFromDatagram+0x21a>
		(*rxedMsg)->Payload = ((uint8_t*) (*rxedMsg)) + sizeof(CoAP_Message_t);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3224      	adds	r2, #36	; 0x24
 8009776:	61da      	str	r2, [r3, #28]
		coap_memcpy((void*) ((*rxedMsg)->Payload), (void*) pPayloadBegin, Msg.PayloadLength);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	6939      	ldr	r1, [r7, #16]
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <CoAP_ParseMessageFromDatagram+0x234>)
 8009782:	8912      	ldrh	r2, [r2, #8]
 8009784:	4618      	mov	r0, r3
 8009786:	f012 fcae 	bl	801c0e6 <memcpy>
	}

	(*rxedMsg)->Timestamp = CoAP.api.rtc1HzCnt();
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <CoAP_ParseMessageFromDatagram+0x250>)
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6814      	ldr	r4, [r2, #0]
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	6023      	str	r3, [r4, #0]

	return COAP_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	372c      	adds	r7, #44	; 0x2c
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd90      	pop	{r4, r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200007ac 	.word	0x200007ac
 80097a8:	0801dd14 	.word	0x0801dd14
 80097ac:	200007d8 	.word	0x200007d8
 80097b0:	0801dd30 	.word	0x0801dd30
 80097b4:	0801dd68 	.word	0x0801dd68
 80097b8:	200007c4 	.word	0x200007c4
 80097bc:	0801dd4c 	.word	0x0801dd4c
 80097c0:	20000790 	.word	0x20000790

080097c4 <CoAP_GetRawSizeOfMessage>:

int CoAP_GetRawSizeOfMessage(CoAP_Message_t* Msg) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	int TotalMsgBytes = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

	TotalMsgBytes += 4; //Header
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3304      	adds	r3, #4
 80097d4:	60fb      	str	r3, [r7, #12]

	TotalMsgBytes += CoAP_NeededMem4PackOptions(Msg->pOptionsList);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fe9b 	bl	800a516 <CoAP_NeededMem4PackOptions>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	4413      	add	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]

	if (Msg->Code != EMPTY) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	795b      	ldrb	r3, [r3, #5]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00f      	beq.n	8009812 <CoAP_GetRawSizeOfMessage+0x4e>

		if (Msg->PayloadLength) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	891b      	ldrh	r3, [r3, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <CoAP_GetRawSizeOfMessage+0x42>
			TotalMsgBytes += Msg->PayloadLength + 1; //+1 = PayloadMarker
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	891b      	ldrh	r3, [r3, #8]
 80097fe:	3301      	adds	r3, #1
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
		}

		TotalMsgBytes += Msg->Token.Length;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7b1b      	ldrb	r3, [r3, #12]
 800980a:	461a      	mov	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]
	}

	return TotalMsgBytes;
 8009812:	68fb      	ldr	r3, [r7, #12]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <CoAP_BuildDatagram>:

static CoAP_Result_t _rom CoAP_BuildDatagram(uint8_t* destArr, uint16_t* pDestArrSize, CoAP_Message_t* Msg) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
	uint16_t offset = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	83fb      	strh	r3, [r7, #30]
	uint8_t TokenLength;

	if (Msg->Code == EMPTY) { //must send only 4 byte header overwrite upper layer in any case!
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	795b      	ldrb	r3, [r3, #5]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <CoAP_BuildDatagram+0x24>
		Msg->PayloadLength = 0;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	811a      	strh	r2, [r3, #8]
		TokenLength = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	777b      	strb	r3, [r7, #29]
 800983e:	e002      	b.n	8009846 <CoAP_BuildDatagram+0x2a>
	} else {
		TokenLength = Msg->Token.Length;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7b1b      	ldrb	r3, [r3, #12]
 8009844:	777b      	strb	r3, [r7, #29]
	}

// 4Byte Header (see p.16 RFC7252)
	destArr[0] = 0;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
	destArr[0] |= (COAP_VERSION & 3u) << 6u;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009854:	b2da      	uxtb	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	701a      	strb	r2, [r3, #0]
	destArr[0] |= (Msg->Type & 3u) << 4u;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800986a:	b2db      	uxtb	r3, r3
 800986c:	4313      	orrs	r3, r2
 800986e:	b2da      	uxtb	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	701a      	strb	r2, [r3, #0]
	destArr[0] |= (TokenLength & 15u);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	781a      	ldrb	r2, [r3, #0]
 8009878:	7f7b      	ldrb	r3, [r7, #29]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	b2db      	uxtb	r3, r3
 8009880:	4313      	orrs	r3, r2
 8009882:	b2da      	uxtb	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	701a      	strb	r2, [r3, #0]
	destArr[1] = (uint8_t) Msg->Code;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	7952      	ldrb	r2, [r2, #5]
 8009890:	701a      	strb	r2, [r3, #0]
	destArr[2] = (uint8_t) (Msg->MessageID >> 8u);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	88db      	ldrh	r3, [r3, #6]
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3302      	adds	r3, #2
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]
	destArr[3] = (uint8_t) (Msg->MessageID & 0xffu);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	88da      	ldrh	r2, [r3, #6]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3303      	adds	r3, #3
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]

	offset += 4;
 80098ae:	8bfb      	ldrh	r3, [r7, #30]
 80098b0:	3304      	adds	r3, #4
 80098b2:	83fb      	strh	r3, [r7, #30]

// Token (0 to 8 Bytes)
	int i;
	for (i = 0; i < TokenLength; i++) {
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e00e      	b.n	80098d8 <CoAP_BuildDatagram+0xbc>
		destArr[offset + i] = Msg->Token.Token[i];
 80098ba:	8bfa      	ldrh	r2, [r7, #30]
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	4413      	add	r3, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	440a      	add	r2, r1
 80098cc:	320d      	adds	r2, #13
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TokenLength; i++) {
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	3301      	adds	r3, #1
 80098d6:	61bb      	str	r3, [r7, #24]
 80098d8:	7f7b      	ldrb	r3, [r7, #29]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	429a      	cmp	r2, r3
 80098de:	dbec      	blt.n	80098ba <CoAP_BuildDatagram+0x9e>
	}
	offset += TokenLength;
 80098e0:	7f7b      	ldrb	r3, [r7, #29]
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	8bfb      	ldrh	r3, [r7, #30]
 80098e6:	4413      	add	r3, r2
 80098e8:	83fb      	strh	r3, [r7, #30]

// Options
	if (Msg->pOptionsList != NULL) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00f      	beq.n	8009912 <CoAP_BuildDatagram+0xf6>
		uint16_t OptionsRawByteCount = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	82fb      	strh	r3, [r7, #22]
		//iterates through (ascending sorted!) list of options and encodes them in CoAPs compact binary representation
		pack_OptionsFromList(&(destArr[offset]), &OptionsRawByteCount, Msg->pOptionsList);
 80098f6:	8bfb      	ldrh	r3, [r7, #30]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	18d0      	adds	r0, r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	f107 0316 	add.w	r3, r7, #22
 8009904:	4619      	mov	r1, r3
 8009906:	f000 fd11 	bl	800a32c <pack_OptionsFromList>

		offset += OptionsRawByteCount;
 800990a:	8afa      	ldrh	r2, [r7, #22]
 800990c:	8bfb      	ldrh	r3, [r7, #30]
 800990e:	4413      	add	r3, r2
 8009910:	83fb      	strh	r3, [r7, #30]
	}

//Payload
	if (Msg->PayloadLength != 0) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	891b      	ldrh	r3, [r3, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d016      	beq.n	8009948 <CoAP_BuildDatagram+0x12c>
		destArr[offset] = 0xff; //Payload Marker
 800991a:	8bfb      	ldrh	r3, [r7, #30]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	22ff      	movs	r2, #255	; 0xff
 8009922:	701a      	strb	r2, [r3, #0]
		offset++;
 8009924:	8bfb      	ldrh	r3, [r7, #30]
 8009926:	3301      	adds	r3, #1
 8009928:	83fb      	strh	r3, [r7, #30]

		coap_memcpy((void*) &(destArr[offset]), (void*) (Msg->Payload), Msg->PayloadLength);
 800992a:	8bfb      	ldrh	r3, [r7, #30]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	18d0      	adds	r0, r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	69d9      	ldr	r1, [r3, #28]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	891b      	ldrh	r3, [r3, #8]
 8009938:	461a      	mov	r2, r3
 800993a:	f012 fbd4 	bl	801c0e6 <memcpy>

		offset += Msg->PayloadLength;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	891a      	ldrh	r2, [r3, #8]
 8009942:	8bfb      	ldrh	r3, [r7, #30]
 8009944:	4413      	add	r3, r2
 8009946:	83fb      	strh	r3, [r7, #30]
	}

	*pDestArrSize = offset; // => Size of Datagram array
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	8bfa      	ldrh	r2, [r7, #30]
 800994c:	801a      	strh	r2, [r3, #0]
	return COAP_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3720      	adds	r7, #32
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <CoAP_SendEmptyAck>:

//send minimal 4Byte header CoAP empty ACK message
CoAP_Result_t _rom CoAP_SendEmptyAck(uint16_t MessageID, SocketHandle_t socketHandle, NetEp_t receiver) {
 8009958:	b082      	sub	sp, #8
 800995a:	b5b0      	push	{r4, r5, r7, lr}
 800995c:	b090      	sub	sp, #64	; 0x40
 800995e:	af04      	add	r7, sp, #16
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009966:	e881 000c 	stmia.w	r1, {r2, r3}
 800996a:	4603      	mov	r3, r0
 800996c:	80fb      	strh	r3, [r7, #6]
	CoAP_Message_t Msg; //put on stack (no need to free)

	CoAP_InitToEmptyResetMsg(&Msg);
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff fc82 	bl	800927c <CoAP_InitToEmptyResetMsg>
	Msg.Type = ACK;
 8009978:	2302      	movs	r3, #2
 800997a:	743b      	strb	r3, [r7, #16]
	Msg.MessageID = MessageID;
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	827b      	strh	r3, [r7, #18]
	return CoAP_SendMsg(&Msg, socketHandle, receiver);
 8009980:	f107 050c 	add.w	r5, r7, #12
 8009984:	466c      	mov	r4, sp
 8009986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800998a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800998c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009994:	cb0c      	ldmia	r3, {r2, r3}
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	4628      	mov	r0, r5
 800999a:	f000 f865 	bl	8009a68 <CoAP_SendMsg>
 800999e:	4603      	mov	r3, r0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3730      	adds	r7, #48	; 0x30
 80099a4:	46bd      	mov	sp, r7
 80099a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80099aa:	b002      	add	sp, #8
 80099ac:	4770      	bx	lr

080099ae <CoAP_SendShortResp>:

//send short response
CoAP_Result_t _rom CoAP_SendShortResp(CoAP_MessageType_t Type, CoAP_MessageCode_t Code, uint16_t MessageID, CoAP_Token_t token, SocketHandle_t socketHandle, NetEp_t receiver) {
 80099ae:	b082      	sub	sp, #8
 80099b0:	b5b0      	push	{r4, r5, r7, lr}
 80099b2:	b090      	sub	sp, #64	; 0x40
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	647b      	str	r3, [r7, #68]	; 0x44
 80099b8:	4603      	mov	r3, r0
 80099ba:	71fb      	strb	r3, [r7, #7]
 80099bc:	460b      	mov	r3, r1
 80099be:	71bb      	strb	r3, [r7, #6]
 80099c0:	4613      	mov	r3, r2
 80099c2:	80bb      	strh	r3, [r7, #4]
	CoAP_Message_t Msg; //put on stack (no need to free)
	CoAP_InitToEmptyResetMsg(&Msg);
 80099c4:	f107 030c 	add.w	r3, r7, #12
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fc57 	bl	800927c <CoAP_InitToEmptyResetMsg>
	Msg.Type = Type;
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	743b      	strb	r3, [r7, #16]
	Msg.MessageID = MessageID;
 80099d2:	88bb      	ldrh	r3, [r7, #4]
 80099d4:	827b      	strh	r3, [r7, #18]
	Msg.Code = Code;
 80099d6:	79bb      	ldrb	r3, [r7, #6]
 80099d8:	747b      	strb	r3, [r7, #17]
	Msg.Token = token;
 80099da:	f107 0318 	add.w	r3, r7, #24
 80099de:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80099e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80099e4:	c303      	stmia	r3!, {r0, r1}
 80099e6:	701a      	strb	r2, [r3, #0]
	return CoAP_SendMsg(&Msg, socketHandle, receiver);
 80099e8:	f107 050c 	add.w	r5, r7, #12
 80099ec:	466c      	mov	r4, sp
 80099ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80099f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80099f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80099f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80099fc:	cb0c      	ldmia	r3, {r2, r3}
 80099fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 f831 	bl	8009a68 <CoAP_SendMsg>
 8009a06:	4603      	mov	r3, r0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3730      	adds	r7, #48	; 0x30
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009a12:	b002      	add	sp, #8
 8009a14:	4770      	bx	lr

08009a16 <CoAP_SendEmptyRST>:

//send minimal 4Byte header CoAP empty RST message
CoAP_Result_t _rom CoAP_SendEmptyRST(uint16_t MessageID, SocketHandle_t socketHandle, NetEp_t receiver) {
 8009a16:	b082      	sub	sp, #8
 8009a18:	b5b0      	push	{r4, r5, r7, lr}
 8009a1a:	b090      	sub	sp, #64	; 0x40
 8009a1c:	af04      	add	r7, sp, #16
 8009a1e:	6039      	str	r1, [r7, #0]
 8009a20:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8009a24:	e881 000c 	stmia.w	r1, {r2, r3}
 8009a28:	4603      	mov	r3, r0
 8009a2a:	80fb      	strh	r3, [r7, #6]
	CoAP_Message_t Msg; //put on stack (no need to free)
	CoAP_InitToEmptyResetMsg(&Msg);
 8009a2c:	f107 030c 	add.w	r3, r7, #12
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff fc23 	bl	800927c <CoAP_InitToEmptyResetMsg>
	Msg.MessageID = MessageID;
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	827b      	strh	r3, [r7, #18]
	return CoAP_SendMsg(&Msg, socketHandle, receiver);
 8009a3a:	f107 050c 	add.w	r5, r7, #12
 8009a3e:	466c      	mov	r4, sp
 8009a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009a4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a4e:	cb0c      	ldmia	r3, {r2, r3}
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f808 	bl	8009a68 <CoAP_SendMsg>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3730      	adds	r7, #48	; 0x30
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009a64:	b002      	add	sp, #8
 8009a66:	4770      	bx	lr

08009a68 <CoAP_SendMsg>:

CoAP_Result_t _rom CoAP_SendMsg(CoAP_Message_t* Msg, SocketHandle_t socketHandle, NetEp_t receiver) {
 8009a68:	b082      	sub	sp, #8
 8009a6a:	b5b0      	push	{r4, r5, r7, lr}
 8009a6c:	b096      	sub	sp, #88	; 0x58
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
 8009a74:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009a78:	e881 000c 	stmia.w	r1, {r2, r3}
	INFO("Sending CoAP msg\r\n");
 8009a7c:	4976      	ldr	r1, [pc, #472]	; (8009c58 <CoAP_SendMsg+0x1f0>)
 8009a7e:	4877      	ldr	r0, [pc, #476]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009a80:	f012 f970 	bl	801bd64 <siprintf>
 8009a84:	4875      	ldr	r0, [pc, #468]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009a86:	f7fe fad1 	bl	800802c <hal_debug_puts>
	int i;
	uint16_t bytesToSend = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	CoAP_Socket_t* pSocket = RetrieveSocket(socketHandle);
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f001 fe2d 	bl	800b6f0 <RetrieveSocket>
 8009a96:	6538      	str	r0, [r7, #80]	; 0x50

	if (pSocket == NULL) {
 8009a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d110      	bne.n	8009ac0 <CoAP_SendMsg+0x58>
		ERROR("Socket not found! handle: %p\r\n", socketHandle);
 8009a9e:	4970      	ldr	r1, [pc, #448]	; (8009c60 <CoAP_SendMsg+0x1f8>)
 8009aa0:	486e      	ldr	r0, [pc, #440]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009aa2:	f012 f95f 	bl	801bd64 <siprintf>
 8009aa6:	486d      	ldr	r0, [pc, #436]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009aa8:	f7fe fac0 	bl	800802c <hal_debug_puts>
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	496d      	ldr	r1, [pc, #436]	; (8009c64 <CoAP_SendMsg+0x1fc>)
 8009ab0:	486a      	ldr	r0, [pc, #424]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ab2:	f012 f957 	bl	801bd64 <siprintf>
 8009ab6:	4869      	ldr	r0, [pc, #420]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ab8:	f7fe fab8 	bl	800802c <hal_debug_puts>
		return COAP_NOT_FOUND;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e0c4      	b.n	8009c4a <CoAP_SendMsg+0x1e2>
	}

	NetTransmit_fn SendPacket = pSocket->Tx;
 8009ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t quickBuf[16]; //speed up sending of tiny messages

	if (SendPacket == NULL) {
 8009ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d110      	bne.n	8009aee <CoAP_SendMsg+0x86>
		ERROR("SendPacket function not found! handle: %p\r\n", socketHandle);
 8009acc:	4964      	ldr	r1, [pc, #400]	; (8009c60 <CoAP_SendMsg+0x1f8>)
 8009ace:	4863      	ldr	r0, [pc, #396]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ad0:	f012 f948 	bl	801bd64 <siprintf>
 8009ad4:	4861      	ldr	r0, [pc, #388]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ad6:	f7fe faa9 	bl	800802c <hal_debug_puts>
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4962      	ldr	r1, [pc, #392]	; (8009c68 <CoAP_SendMsg+0x200>)
 8009ade:	485f      	ldr	r0, [pc, #380]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ae0:	f012 f940 	bl	801bd64 <siprintf>
 8009ae4:	485d      	ldr	r0, [pc, #372]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ae6:	f7fe faa1 	bl	800802c <hal_debug_puts>
		return COAP_NOT_FOUND;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e0ad      	b.n	8009c4a <CoAP_SendMsg+0x1e2>
	}

	// build generic packet
	NetPacket_t pked;
	pked.remoteEp = receiver;
 8009aee:	f107 0414 	add.w	r4, r7, #20
 8009af2:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8009af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009afa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009afe:	e884 0003 	stmia.w	r4, {r0, r1}

	//Alloc raw memory
	pked.size = CoAP_GetRawSizeOfMessage(Msg);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fe5e 	bl	80097c4 <CoAP_GetRawSizeOfMessage>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	823b      	strh	r3, [r7, #16]
	if (pked.size <= 16) { //for small messages don't take overhead of mem allocation
 8009b0e:	8a3b      	ldrh	r3, [r7, #16]
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d803      	bhi.n	8009b1c <CoAP_SendMsg+0xb4>
		pked.pData = quickBuf;
 8009b14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e00a      	b.n	8009b32 <CoAP_SendMsg+0xca>
	} else {
		pked.pData = (uint8_t*) CoAP_malloc(pked.size);
 8009b1c:	8a3b      	ldrh	r3, [r7, #16]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fb84 	bl	800922c <CoAP_malloc>
 8009b24:	4603      	mov	r3, r0
 8009b26:	60fb      	str	r3, [r7, #12]
		if (pked.pData == NULL)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <CoAP_SendMsg+0xca>
			return COAP_ERR_OUT_OF_MEMORY;
 8009b2e:	230d      	movs	r3, #13
 8009b30:	e08b      	b.n	8009c4a <CoAP_SendMsg+0x1e2>
	}

	// serialize msg
	CoAP_BuildDatagram((pked.pData), &bytesToSend, Msg);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fe6e 	bl	800981c <CoAP_BuildDatagram>

	if (bytesToSend != pked.size) {
 8009b40:	8a3a      	ldrh	r2, [r7, #16]
 8009b42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d00e      	beq.n	8009b68 <CoAP_SendMsg+0x100>
		INFO("(!!!) Bytes to Send = %d estimated = %d\r\n", bytesToSend, CoAP_GetRawSizeOfMessage(Msg));
 8009b4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009b4e:	461c      	mov	r4, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fe37 	bl	80097c4 <CoAP_GetRawSizeOfMessage>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4944      	ldr	r1, [pc, #272]	; (8009c6c <CoAP_SendMsg+0x204>)
 8009b5c:	483f      	ldr	r0, [pc, #252]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b5e:	f012 f901 	bl	801bd64 <siprintf>
 8009b62:	483e      	ldr	r0, [pc, #248]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b64:	f7fe fa62 	bl	800802c <hal_debug_puts>
	}

	INFO("\r\no>>>>>>>>>>>>>>>>>>>>>>\r\nSend Message [%d Bytes], Interface #%p\r\n", bytesToSend, socketHandle);
 8009b68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	493f      	ldr	r1, [pc, #252]	; (8009c70 <CoAP_SendMsg+0x208>)
 8009b72:	483a      	ldr	r0, [pc, #232]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b74:	f012 f8f6 	bl	801bd64 <siprintf>
 8009b78:	4838      	ldr	r0, [pc, #224]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b7a:	f7fe fa57 	bl	800802c <hal_debug_puts>
	INFO("Receiving Endpoint: ");
 8009b7e:	493d      	ldr	r1, [pc, #244]	; (8009c74 <CoAP_SendMsg+0x20c>)
 8009b80:	4836      	ldr	r0, [pc, #216]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b82:	f012 f8ef 	bl	801bd64 <siprintf>
 8009b86:	4835      	ldr	r0, [pc, #212]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b88:	f7fe fa50 	bl	800802c <hal_debug_puts>
	PrintEndpoint(&(pked.remoteEp));
 8009b8c:	f107 030c 	add.w	r3, r7, #12
 8009b90:	3308      	adds	r3, #8
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fba4 	bl	800b2e0 <PrintEndpoint>
	INFO("\n");
 8009b98:	4937      	ldr	r1, [pc, #220]	; (8009c78 <CoAP_SendMsg+0x210>)
 8009b9a:	4830      	ldr	r0, [pc, #192]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009b9c:	f012 f8e2 	bl	801bd64 <siprintf>
 8009ba0:	482e      	ldr	r0, [pc, #184]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009ba2:	f7fe fa43 	bl	800802c <hal_debug_puts>

	DEBUG_COAP("Hex: ");
	for (i = 0; i < pked.size; i++) {
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8009baa:	e002      	b.n	8009bb2 <CoAP_SendMsg+0x14a>
 8009bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bae:	3301      	adds	r3, #1
 8009bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8009bb2:	8a3b      	ldrh	r3, [r7, #16]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	dbf7      	blt.n	8009bac <CoAP_SendMsg+0x144>
		DEBUG_COAP("%02x ", pked.pData[i]);
	}
	DEBUG_COAP("\r\nRaw: \"");
	for (i = 0; i < pked.size; i++) {
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8009bc0:	e002      	b.n	8009bc8 <CoAP_SendMsg+0x160>
 8009bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8009bc8:	8a3b      	ldrh	r3, [r7, #16]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	dbf7      	blt.n	8009bc2 <CoAP_SendMsg+0x15a>
		sendResult = true;  // make stack think it sent message, to simulate loss of UDP packet in network
	} else {
		sendResult = SendPacket(socketHandle, &pked);
	}
#else
	sendResult = SendPacket(socketHandle, &pked);
 8009bd2:	f107 020c 	add.w	r2, r7, #12
 8009bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd8:	4611      	mov	r1, r2
 8009bda:	6838      	ldr	r0, [r7, #0]
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif

	if (sendResult == true) { // send COAP_OK!
 8009be4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01a      	beq.n	8009c22 <CoAP_SendMsg+0x1ba>
		Msg->Timestamp = CoAP.api.rtc1HzCnt();
 8009bec:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <CoAP_SendMsg+0x214>)
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	4798      	blx	r3
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	601a      	str	r2, [r3, #0]
		CoAP_PrintMsg(Msg);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f89b 	bl	8009d34 <CoAP_PrintMsg>
		INFO("o>>>>>>>>>>OK>>>>>>>>>>\r\n");
 8009bfe:	4920      	ldr	r1, [pc, #128]	; (8009c80 <CoAP_SendMsg+0x218>)
 8009c00:	4816      	ldr	r0, [pc, #88]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009c02:	f012 f8af 	bl	801bd64 <siprintf>
 8009c06:	4815      	ldr	r0, [pc, #84]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009c08:	f7fe fa10 	bl	800802c <hal_debug_puts>
		if (pked.pData != quickBuf) {
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d003      	beq.n	8009c1e <CoAP_SendMsg+0x1b6>
			CoAP_free(pked.pData);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff faf9 	bl	8009210 <CoAP_free>
		}
		return COAP_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e013      	b.n	8009c4a <CoAP_SendMsg+0x1e2>
	} else {
		CoAP_PrintMsg(Msg);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f886 	bl	8009d34 <CoAP_PrintMsg>
		INFO("o>>>>>>>>>>FAIL>>>>>>>>>>\r\n");
 8009c28:	4916      	ldr	r1, [pc, #88]	; (8009c84 <CoAP_SendMsg+0x21c>)
 8009c2a:	480c      	ldr	r0, [pc, #48]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009c2c:	f012 f89a 	bl	801bd64 <siprintf>
 8009c30:	480a      	ldr	r0, [pc, #40]	; (8009c5c <CoAP_SendMsg+0x1f4>)
 8009c32:	f7fe f9fb 	bl	800802c <hal_debug_puts>
		if (pked.pData != quickBuf) {
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d003      	beq.n	8009c48 <CoAP_SendMsg+0x1e0>
			CoAP_free(pked.pData);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff fae4 	bl	8009210 <CoAP_free>
		}
		return COAP_ERR_NETWORK;
 8009c48:	230c      	movs	r3, #12
	}

}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3758      	adds	r7, #88	; 0x58
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009c54:	b002      	add	sp, #8
 8009c56:	4770      	bx	lr
 8009c58:	0801dd70 	.word	0x0801dd70
 8009c5c:	200007d8 	.word	0x200007d8
 8009c60:	0801dccc 	.word	0x0801dccc
 8009c64:	0801dd84 	.word	0x0801dd84
 8009c68:	0801dda4 	.word	0x0801dda4
 8009c6c:	0801ddd0 	.word	0x0801ddd0
 8009c70:	0801ddfc 	.word	0x0801ddfc
 8009c74:	0801de40 	.word	0x0801de40
 8009c78:	0801de58 	.word	0x0801de58
 8009c7c:	20000790 	.word	0x20000790
 8009c80:	0801de5c 	.word	0x0801de5c
 8009c84:	0801de78 	.word	0x0801de78

08009c88 <CoAP_InitIds>:

static uint16_t MId = 0;
static uint8_t currToken = 0;

void _rom CoAP_InitIds() {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
	// Initialise Message-ID and Token with random values:
	MId = CoAP.api.rand() & 0xffffu;
 8009c8c:	4b07      	ldr	r3, [pc, #28]	; (8009cac <CoAP_InitIds+0x24>)
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	4798      	blx	r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <CoAP_InitIds+0x28>)
 8009c98:	801a      	strh	r2, [r3, #0]
	currToken = CoAP.api.rand() & 0xffu;
 8009c9a:	4b04      	ldr	r3, [pc, #16]	; (8009cac <CoAP_InitIds+0x24>)
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	4798      	blx	r3
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b03      	ldr	r3, [pc, #12]	; (8009cb4 <CoAP_InitIds+0x2c>)
 8009ca6:	701a      	strb	r2, [r3, #0]
}
 8009ca8:	bf00      	nop
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000790 	.word	0x20000790
 8009cb0:	200007a8 	.word	0x200007a8
 8009cb4:	200007aa 	.word	0x200007aa

08009cb8 <CoAP_GetNextMid>:

uint16_t _rom CoAP_GetNextMid() {
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
	MId++;
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <CoAP_GetNextMid+0x1c>)
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <CoAP_GetNextMid+0x1c>)
 8009cc6:	801a      	strh	r2, [r3, #0]
	return MId;
 8009cc8:	4b02      	ldr	r3, [pc, #8]	; (8009cd4 <CoAP_GetNextMid+0x1c>)
 8009cca:	881b      	ldrh	r3, [r3, #0]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr
 8009cd4:	200007a8 	.word	0x200007a8

08009cd8 <CoAP_GenerateToken>:

// TODO: Improove generated tokens
CoAP_Token_t _rom CoAP_GenerateToken() {
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	currToken++;
 8009ce0:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <CoAP_GenerateToken+0x58>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <CoAP_GenerateToken+0x58>)
 8009cea:	701a      	strb	r2, [r3, #0]
	CoAP_Token_t tok = {.Token = {currToken, 0,0,0,0,0,0,0}, .Length = 1};
 8009cec:	2301      	movs	r3, #1
 8009cee:	733b      	strb	r3, [r7, #12]
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <CoAP_GenerateToken+0x58>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	737b      	strb	r3, [r7, #13]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73bb      	strb	r3, [r7, #14]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	743b      	strb	r3, [r7, #16]
 8009d02:	2300      	movs	r3, #0
 8009d04:	747b      	strb	r3, [r7, #17]
 8009d06:	2300      	movs	r3, #0
 8009d08:	74bb      	strb	r3, [r7, #18]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	74fb      	strb	r3, [r7, #19]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	753b      	strb	r3, [r7, #20]
	return tok;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	461a      	mov	r2, r3
 8009d16:	f107 030c 	add.w	r3, r7, #12
 8009d1a:	cb03      	ldmia	r3!, {r0, r1}
 8009d1c:	6010      	str	r0, [r2, #0]
 8009d1e:	6051      	str	r1, [r2, #4]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	7213      	strb	r3, [r2, #8]
}
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	200007aa 	.word	0x200007aa

08009d34 <CoAP_PrintMsg>:

CoAP_Result_t _rom CoAP_addTextPayload(CoAP_Message_t* Msg, char* PayloadStr) {
	return CoAP_addNewPayloadToMessage(Msg, (uint8_t*) PayloadStr, (uint16_t) (strlen(PayloadStr)));
}

void _rom CoAP_PrintMsg(CoAP_Message_t* msg) {
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]

	if(COAP_LOG_LEVEL < COAP_LOG_LEVEL_DEBUG)
	{
		// Short version
		LOG_INFO("CoAP msg: Type=");
 8009d3c:	4941      	ldr	r1, [pc, #260]	; (8009e44 <CoAP_PrintMsg+0x110>)
 8009d3e:	4842      	ldr	r0, [pc, #264]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d40:	f012 f810 	bl	801bd64 <siprintf>
 8009d44:	4840      	ldr	r0, [pc, #256]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d46:	f7fe f971 	bl	800802c <hal_debug_puts>
		
		switch(msg->Type)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d836      	bhi.n	8009dc0 <CoAP_PrintMsg+0x8c>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <CoAP_PrintMsg+0x24>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009d69 	.word	0x08009d69
 8009d5c:	08009d7f 	.word	0x08009d7f
 8009d60:	08009d95 	.word	0x08009d95
 8009d64:	08009dab 	.word	0x08009dab
		{
			case CON: LOG_INFO("CON(0x%02x)", msg->Type); break;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	791b      	ldrb	r3, [r3, #4]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4937      	ldr	r1, [pc, #220]	; (8009e4c <CoAP_PrintMsg+0x118>)
 8009d70:	4835      	ldr	r0, [pc, #212]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d72:	f011 fff7 	bl	801bd64 <siprintf>
 8009d76:	4834      	ldr	r0, [pc, #208]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d78:	f7fe f958 	bl	800802c <hal_debug_puts>
 8009d7c:	e02b      	b.n	8009dd6 <CoAP_PrintMsg+0xa2>
			case NON: LOG_INFO("NON(0x%02x)", msg->Type); break;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	791b      	ldrb	r3, [r3, #4]
 8009d82:	461a      	mov	r2, r3
 8009d84:	4932      	ldr	r1, [pc, #200]	; (8009e50 <CoAP_PrintMsg+0x11c>)
 8009d86:	4830      	ldr	r0, [pc, #192]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d88:	f011 ffec 	bl	801bd64 <siprintf>
 8009d8c:	482e      	ldr	r0, [pc, #184]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d8e:	f7fe f94d 	bl	800802c <hal_debug_puts>
 8009d92:	e020      	b.n	8009dd6 <CoAP_PrintMsg+0xa2>
			case ACK: LOG_INFO("ACK(0x%02x)", msg->Type); break;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	492e      	ldr	r1, [pc, #184]	; (8009e54 <CoAP_PrintMsg+0x120>)
 8009d9c:	482a      	ldr	r0, [pc, #168]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009d9e:	f011 ffe1 	bl	801bd64 <siprintf>
 8009da2:	4829      	ldr	r0, [pc, #164]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009da4:	f7fe f942 	bl	800802c <hal_debug_puts>
 8009da8:	e015      	b.n	8009dd6 <CoAP_PrintMsg+0xa2>
			case RST: LOG_INFO("RST(0x%02x)", msg->Type); break;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	461a      	mov	r2, r3
 8009db0:	4929      	ldr	r1, [pc, #164]	; (8009e58 <CoAP_PrintMsg+0x124>)
 8009db2:	4825      	ldr	r0, [pc, #148]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009db4:	f011 ffd6 	bl	801bd64 <siprintf>
 8009db8:	4823      	ldr	r0, [pc, #140]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009dba:	f7fe f937 	bl	800802c <hal_debug_puts>
 8009dbe:	e00a      	b.n	8009dd6 <CoAP_PrintMsg+0xa2>
			default: LOG_INFO("UNKNOWN (0x%02x)", msg->Type); break;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4925      	ldr	r1, [pc, #148]	; (8009e5c <CoAP_PrintMsg+0x128>)
 8009dc8:	481f      	ldr	r0, [pc, #124]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009dca:	f011 ffcb 	bl	801bd64 <siprintf>
 8009dce:	481e      	ldr	r0, [pc, #120]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009dd0:	f7fe f92c 	bl	800802c <hal_debug_puts>
 8009dd4:	bf00      	nop
		}

		LOG_INFO(" Code=%s", CoAP_CodeName(msg->Code));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	795b      	ldrb	r3, [r3, #5]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f84a 	bl	8009e74 <CoAP_CodeName>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	491e      	ldr	r1, [pc, #120]	; (8009e60 <CoAP_PrintMsg+0x12c>)
 8009de6:	4818      	ldr	r0, [pc, #96]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009de8:	f011 ffbc 	bl	801bd64 <siprintf>
 8009dec:	4816      	ldr	r0, [pc, #88]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009dee:	f7fe f91d 	bl	800802c <hal_debug_puts>
		LOG_INFO(" MsgId=%"PRIu16, msg->MessageID);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	88db      	ldrh	r3, [r3, #6]
 8009df6:	461a      	mov	r2, r3
 8009df8:	491a      	ldr	r1, [pc, #104]	; (8009e64 <CoAP_PrintMsg+0x130>)
 8009dfa:	4813      	ldr	r0, [pc, #76]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009dfc:	f011 ffb2 	bl	801bd64 <siprintf>
 8009e00:	4811      	ldr	r0, [pc, #68]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e02:	f7fe f913 	bl	800802c <hal_debug_puts>
		LOG_INFO(" Timestamp=%"PRIu32, msg->Timestamp);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4916      	ldr	r1, [pc, #88]	; (8009e68 <CoAP_PrintMsg+0x134>)
 8009e0e:	480e      	ldr	r0, [pc, #56]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e10:	f011 ffa8 	bl	801bd64 <siprintf>
 8009e14:	480c      	ldr	r0, [pc, #48]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e16:	f7fe f909 	bl	800802c <hal_debug_puts>
		LOG_INFO(" PayloadLen=%"PRIu16, msg->PayloadLength);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	891b      	ldrh	r3, [r3, #8]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4912      	ldr	r1, [pc, #72]	; (8009e6c <CoAP_PrintMsg+0x138>)
 8009e22:	4809      	ldr	r0, [pc, #36]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e24:	f011 ff9e 	bl	801bd64 <siprintf>
 8009e28:	4807      	ldr	r0, [pc, #28]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e2a:	f7fe f8ff 	bl	800802c <hal_debug_puts>
		LOG_INFO("\n");
 8009e2e:	4910      	ldr	r1, [pc, #64]	; (8009e70 <CoAP_PrintMsg+0x13c>)
 8009e30:	4805      	ldr	r0, [pc, #20]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e32:	f011 ff97 	bl	801bd64 <siprintf>
 8009e36:	4804      	ldr	r0, [pc, #16]	; (8009e48 <CoAP_PrintMsg+0x114>)
 8009e38:	f7fe f8f8 	bl	800802c <hal_debug_puts>
		return;
 8009e3c:	bf00      	nop
		}
	}

	INFO("*Timestamp: %"PRIu32"\r\n", msg->Timestamp);
	INFO("----------------------------\r\n");
}
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	0801deb0 	.word	0x0801deb0
 8009e48:	200007d8 	.word	0x200007d8
 8009e4c:	0801dec0 	.word	0x0801dec0
 8009e50:	0801decc 	.word	0x0801decc
 8009e54:	0801ded8 	.word	0x0801ded8
 8009e58:	0801dee4 	.word	0x0801dee4
 8009e5c:	0801def0 	.word	0x0801def0
 8009e60:	0801df04 	.word	0x0801df04
 8009e64:	0801df10 	.word	0x0801df10
 8009e68:	0801df1c 	.word	0x0801df1c
 8009e6c:	0801df2c 	.word	0x0801df2c
 8009e70:	0801de58 	.word	0x0801de58

08009e74 <CoAP_CodeName>:

const char _rom *CoAP_CodeName(CoAP_MessageCode_t code) {
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
	switch (code) {
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	2ba5      	cmp	r3, #165	; 0xa5
 8009e82:	f200 818f 	bhi.w	800a1a4 <CoAP_CodeName+0x330>
 8009e86:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <CoAP_CodeName+0x18>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	0800a125 	.word	0x0800a125
 8009e90:	0800a129 	.word	0x0800a129
 8009e94:	0800a12d 	.word	0x0800a12d
 8009e98:	0800a131 	.word	0x0800a131
 8009e9c:	0800a135 	.word	0x0800a135
 8009ea0:	0800a139 	.word	0x0800a139
 8009ea4:	0800a13d 	.word	0x0800a13d
 8009ea8:	0800a141 	.word	0x0800a141
 8009eac:	0800a1a5 	.word	0x0800a1a5
 8009eb0:	0800a1a5 	.word	0x0800a1a5
 8009eb4:	0800a1a5 	.word	0x0800a1a5
 8009eb8:	0800a1a5 	.word	0x0800a1a5
 8009ebc:	0800a1a5 	.word	0x0800a1a5
 8009ec0:	0800a1a5 	.word	0x0800a1a5
 8009ec4:	0800a1a5 	.word	0x0800a1a5
 8009ec8:	0800a1a5 	.word	0x0800a1a5
 8009ecc:	0800a1a5 	.word	0x0800a1a5
 8009ed0:	0800a1a5 	.word	0x0800a1a5
 8009ed4:	0800a1a5 	.word	0x0800a1a5
 8009ed8:	0800a1a5 	.word	0x0800a1a5
 8009edc:	0800a1a5 	.word	0x0800a1a5
 8009ee0:	0800a1a5 	.word	0x0800a1a5
 8009ee4:	0800a1a5 	.word	0x0800a1a5
 8009ee8:	0800a1a5 	.word	0x0800a1a5
 8009eec:	0800a1a5 	.word	0x0800a1a5
 8009ef0:	0800a1a5 	.word	0x0800a1a5
 8009ef4:	0800a1a5 	.word	0x0800a1a5
 8009ef8:	0800a1a5 	.word	0x0800a1a5
 8009efc:	0800a1a5 	.word	0x0800a1a5
 8009f00:	0800a1a5 	.word	0x0800a1a5
 8009f04:	0800a1a5 	.word	0x0800a1a5
 8009f08:	0800a1a5 	.word	0x0800a1a5
 8009f0c:	0800a1a5 	.word	0x0800a1a5
 8009f10:	0800a1a5 	.word	0x0800a1a5
 8009f14:	0800a1a5 	.word	0x0800a1a5
 8009f18:	0800a1a5 	.word	0x0800a1a5
 8009f1c:	0800a1a5 	.word	0x0800a1a5
 8009f20:	0800a1a5 	.word	0x0800a1a5
 8009f24:	0800a1a5 	.word	0x0800a1a5
 8009f28:	0800a1a5 	.word	0x0800a1a5
 8009f2c:	0800a1a5 	.word	0x0800a1a5
 8009f30:	0800a1a5 	.word	0x0800a1a5
 8009f34:	0800a1a5 	.word	0x0800a1a5
 8009f38:	0800a1a5 	.word	0x0800a1a5
 8009f3c:	0800a1a5 	.word	0x0800a1a5
 8009f40:	0800a1a5 	.word	0x0800a1a5
 8009f44:	0800a1a5 	.word	0x0800a1a5
 8009f48:	0800a1a5 	.word	0x0800a1a5
 8009f4c:	0800a1a5 	.word	0x0800a1a5
 8009f50:	0800a1a5 	.word	0x0800a1a5
 8009f54:	0800a1a5 	.word	0x0800a1a5
 8009f58:	0800a1a5 	.word	0x0800a1a5
 8009f5c:	0800a1a5 	.word	0x0800a1a5
 8009f60:	0800a1a5 	.word	0x0800a1a5
 8009f64:	0800a1a5 	.word	0x0800a1a5
 8009f68:	0800a1a5 	.word	0x0800a1a5
 8009f6c:	0800a1a5 	.word	0x0800a1a5
 8009f70:	0800a1a5 	.word	0x0800a1a5
 8009f74:	0800a1a5 	.word	0x0800a1a5
 8009f78:	0800a1a5 	.word	0x0800a1a5
 8009f7c:	0800a1a5 	.word	0x0800a1a5
 8009f80:	0800a1a5 	.word	0x0800a1a5
 8009f84:	0800a1a5 	.word	0x0800a1a5
 8009f88:	0800a1a5 	.word	0x0800a1a5
 8009f8c:	0800a145 	.word	0x0800a145
 8009f90:	0800a149 	.word	0x0800a149
 8009f94:	0800a14d 	.word	0x0800a14d
 8009f98:	0800a151 	.word	0x0800a151
 8009f9c:	0800a155 	.word	0x0800a155
 8009fa0:	0800a159 	.word	0x0800a159
 8009fa4:	0800a1a5 	.word	0x0800a1a5
 8009fa8:	0800a1a5 	.word	0x0800a1a5
 8009fac:	0800a1a5 	.word	0x0800a1a5
 8009fb0:	0800a1a5 	.word	0x0800a1a5
 8009fb4:	0800a1a5 	.word	0x0800a1a5
 8009fb8:	0800a1a5 	.word	0x0800a1a5
 8009fbc:	0800a1a5 	.word	0x0800a1a5
 8009fc0:	0800a1a5 	.word	0x0800a1a5
 8009fc4:	0800a1a5 	.word	0x0800a1a5
 8009fc8:	0800a1a5 	.word	0x0800a1a5
 8009fcc:	0800a1a5 	.word	0x0800a1a5
 8009fd0:	0800a1a5 	.word	0x0800a1a5
 8009fd4:	0800a1a5 	.word	0x0800a1a5
 8009fd8:	0800a1a5 	.word	0x0800a1a5
 8009fdc:	0800a1a5 	.word	0x0800a1a5
 8009fe0:	0800a1a5 	.word	0x0800a1a5
 8009fe4:	0800a1a5 	.word	0x0800a1a5
 8009fe8:	0800a1a5 	.word	0x0800a1a5
 8009fec:	0800a1a5 	.word	0x0800a1a5
 8009ff0:	0800a1a5 	.word	0x0800a1a5
 8009ff4:	0800a1a5 	.word	0x0800a1a5
 8009ff8:	0800a1a5 	.word	0x0800a1a5
 8009ffc:	0800a1a5 	.word	0x0800a1a5
 800a000:	0800a1a5 	.word	0x0800a1a5
 800a004:	0800a1a5 	.word	0x0800a1a5
 800a008:	0800a15d 	.word	0x0800a15d
 800a00c:	0800a1a5 	.word	0x0800a1a5
 800a010:	0800a1a5 	.word	0x0800a1a5
 800a014:	0800a1a5 	.word	0x0800a1a5
 800a018:	0800a1a5 	.word	0x0800a1a5
 800a01c:	0800a1a5 	.word	0x0800a1a5
 800a020:	0800a1a5 	.word	0x0800a1a5
 800a024:	0800a1a5 	.word	0x0800a1a5
 800a028:	0800a1a5 	.word	0x0800a1a5
 800a02c:	0800a1a5 	.word	0x0800a1a5
 800a030:	0800a1a5 	.word	0x0800a1a5
 800a034:	0800a1a5 	.word	0x0800a1a5
 800a038:	0800a1a5 	.word	0x0800a1a5
 800a03c:	0800a1a5 	.word	0x0800a1a5
 800a040:	0800a1a5 	.word	0x0800a1a5
 800a044:	0800a1a5 	.word	0x0800a1a5
 800a048:	0800a1a5 	.word	0x0800a1a5
 800a04c:	0800a1a5 	.word	0x0800a1a5
 800a050:	0800a1a5 	.word	0x0800a1a5
 800a054:	0800a1a5 	.word	0x0800a1a5
 800a058:	0800a1a5 	.word	0x0800a1a5
 800a05c:	0800a1a5 	.word	0x0800a1a5
 800a060:	0800a1a5 	.word	0x0800a1a5
 800a064:	0800a1a5 	.word	0x0800a1a5
 800a068:	0800a1a5 	.word	0x0800a1a5
 800a06c:	0800a1a5 	.word	0x0800a1a5
 800a070:	0800a1a5 	.word	0x0800a1a5
 800a074:	0800a1a5 	.word	0x0800a1a5
 800a078:	0800a1a5 	.word	0x0800a1a5
 800a07c:	0800a1a5 	.word	0x0800a1a5
 800a080:	0800a1a5 	.word	0x0800a1a5
 800a084:	0800a1a5 	.word	0x0800a1a5
 800a088:	0800a1a5 	.word	0x0800a1a5
 800a08c:	0800a161 	.word	0x0800a161
 800a090:	0800a165 	.word	0x0800a165
 800a094:	0800a169 	.word	0x0800a169
 800a098:	0800a16d 	.word	0x0800a16d
 800a09c:	0800a171 	.word	0x0800a171
 800a0a0:	0800a175 	.word	0x0800a175
 800a0a4:	0800a179 	.word	0x0800a179
 800a0a8:	0800a1a5 	.word	0x0800a1a5
 800a0ac:	0800a17d 	.word	0x0800a17d
 800a0b0:	0800a1a5 	.word	0x0800a1a5
 800a0b4:	0800a1a5 	.word	0x0800a1a5
 800a0b8:	0800a1a5 	.word	0x0800a1a5
 800a0bc:	0800a181 	.word	0x0800a181
 800a0c0:	0800a185 	.word	0x0800a185
 800a0c4:	0800a1a5 	.word	0x0800a1a5
 800a0c8:	0800a189 	.word	0x0800a189
 800a0cc:	0800a1a5 	.word	0x0800a1a5
 800a0d0:	0800a1a5 	.word	0x0800a1a5
 800a0d4:	0800a1a5 	.word	0x0800a1a5
 800a0d8:	0800a1a5 	.word	0x0800a1a5
 800a0dc:	0800a1a5 	.word	0x0800a1a5
 800a0e0:	0800a1a5 	.word	0x0800a1a5
 800a0e4:	0800a1a5 	.word	0x0800a1a5
 800a0e8:	0800a1a5 	.word	0x0800a1a5
 800a0ec:	0800a1a5 	.word	0x0800a1a5
 800a0f0:	0800a1a5 	.word	0x0800a1a5
 800a0f4:	0800a1a5 	.word	0x0800a1a5
 800a0f8:	0800a1a5 	.word	0x0800a1a5
 800a0fc:	0800a1a5 	.word	0x0800a1a5
 800a100:	0800a1a5 	.word	0x0800a1a5
 800a104:	0800a1a5 	.word	0x0800a1a5
 800a108:	0800a1a5 	.word	0x0800a1a5
 800a10c:	0800a18d 	.word	0x0800a18d
 800a110:	0800a191 	.word	0x0800a191
 800a114:	0800a195 	.word	0x0800a195
 800a118:	0800a199 	.word	0x0800a199
 800a11c:	0800a19d 	.word	0x0800a19d
 800a120:	0800a1a1 	.word	0x0800a1a1
		case EMPTY:
			return "EMPTY";
 800a124:	4b22      	ldr	r3, [pc, #136]	; (800a1b0 <CoAP_CodeName+0x33c>)
 800a126:	e03e      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_GET:
			return "REQ_GET";
 800a128:	4b22      	ldr	r3, [pc, #136]	; (800a1b4 <CoAP_CodeName+0x340>)
 800a12a:	e03c      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_POST:
			return "REQ_POST";
 800a12c:	4b22      	ldr	r3, [pc, #136]	; (800a1b8 <CoAP_CodeName+0x344>)
 800a12e:	e03a      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_PUT:
			return "REQ_PUT";
 800a130:	4b22      	ldr	r3, [pc, #136]	; (800a1bc <CoAP_CodeName+0x348>)
 800a132:	e038      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_DELETE:
			return "REQ_DELETE";
 800a134:	4b22      	ldr	r3, [pc, #136]	; (800a1c0 <CoAP_CodeName+0x34c>)
 800a136:	e036      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_FETCH:
			return "REQ_FETCH";
 800a138:	4b22      	ldr	r3, [pc, #136]	; (800a1c4 <CoAP_CodeName+0x350>)
 800a13a:	e034      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_PATCH:
			return "REQ_PATCH";
 800a13c:	4b22      	ldr	r3, [pc, #136]	; (800a1c8 <CoAP_CodeName+0x354>)
 800a13e:	e032      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case REQ_IPATCH:
			// iPATCH and LAST both 0.07
			return "REQ_IPATCH/REQ_LAST";
 800a140:	4b22      	ldr	r3, [pc, #136]	; (800a1cc <CoAP_CodeName+0x358>)
 800a142:	e030      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_FIRST_2_00:
			return "RESP_FIRST_2_00";
 800a144:	4b22      	ldr	r3, [pc, #136]	; (800a1d0 <CoAP_CodeName+0x35c>)
 800a146:	e02e      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_CREATED_2_01:
			return "RESP_SUCCESS_CREATED_2_01";
 800a148:	4b22      	ldr	r3, [pc, #136]	; (800a1d4 <CoAP_CodeName+0x360>)
 800a14a:	e02c      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_DELETED_2_02:
			return "RESP_SUCCESS_DELETED_2_02";
 800a14c:	4b22      	ldr	r3, [pc, #136]	; (800a1d8 <CoAP_CodeName+0x364>)
 800a14e:	e02a      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_VALID_2_03:
			return "RESP_SUCCESS_VALID_2_03";
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <CoAP_CodeName+0x368>)
 800a152:	e028      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_CHANGED_2_04:
			return "RESP_SUCCESS_CHANGED_2_04";
 800a154:	4b22      	ldr	r3, [pc, #136]	; (800a1e0 <CoAP_CodeName+0x36c>)
 800a156:	e026      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_CONTENT_2_05:
			return "RESP_SUCCESS_CONTENT_2_05";
 800a158:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <CoAP_CodeName+0x370>)
 800a15a:	e024      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SUCCESS_CONTINUE_2_31:
			return "RESP_SUCCESS_CONTINUE_2_31";
 800a15c:	4b22      	ldr	r3, [pc, #136]	; (800a1e8 <CoAP_CodeName+0x374>)
 800a15e:	e022      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_ERROR_BAD_REQUEST_4_00:
			return "RESP_ERROR_BAD_REQUEST_4_00";
 800a160:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <CoAP_CodeName+0x378>)
 800a162:	e020      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_ERROR_UNAUTHORIZED_4_01:
			return "RESP_ERROR_UNAUTHORIZED_4_01";
 800a164:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <CoAP_CodeName+0x37c>)
 800a166:	e01e      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_BAD_OPTION_4_02:
			return "RESP_BAD_OPTION_4_02";
 800a168:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <CoAP_CodeName+0x380>)
 800a16a:	e01c      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_FORBIDDEN_4_03:
			return "RESP_FORBIDDEN_4_03";
 800a16c:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <CoAP_CodeName+0x384>)
 800a16e:	e01a      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_NOT_FOUND_4_04:
			return "RESP_NOT_FOUND_4_04";
 800a170:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <CoAP_CodeName+0x388>)
 800a172:	e018      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_METHOD_NOT_ALLOWED_4_05:
			return "RESP_METHOD_NOT_ALLOWED_4_05";
 800a174:	4b22      	ldr	r3, [pc, #136]	; (800a200 <CoAP_CodeName+0x38c>)
 800a176:	e016      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_METHOD_NOT_ACCEPTABLE_4_06:
			return "RESP_METHOD_NOT_ACCEPTABLE_4_06";
 800a178:	4b22      	ldr	r3, [pc, #136]	; (800a204 <CoAP_CodeName+0x390>)
 800a17a:	e014      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_REQUEST_ENTITY_INCOMPLETE_4_08:
			return "RESP_REQUEST_ENTITY_INCOMPLETE_4_08";
 800a17c:	4b22      	ldr	r3, [pc, #136]	; (800a208 <CoAP_CodeName+0x394>)
 800a17e:	e012      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_PRECONDITION_FAILED_4_12:
			return "RESP_PRECONDITION_FAILED_4_12";
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <CoAP_CodeName+0x398>)
 800a182:	e010      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_REQUEST_ENTITY_TOO_LARGE_4_13:
			return "RESP_REQUEST_ENTITY_TOO_LARGE_4_13";
 800a184:	4b22      	ldr	r3, [pc, #136]	; (800a210 <CoAP_CodeName+0x39c>)
 800a186:	e00e      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_UNSUPPORTED_CONTENT_FORMAT_4_15:
			return "RESP_UNSUPPORTED_CONTENT_FORMAT_4_15";
 800a188:	4b22      	ldr	r3, [pc, #136]	; (800a214 <CoAP_CodeName+0x3a0>)
 800a18a:	e00c      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_INTERNAL_SERVER_ERROR_5_00:
			return "RESP_INTERNAL_SERVER_ERROR_5_00";
 800a18c:	4b22      	ldr	r3, [pc, #136]	; (800a218 <CoAP_CodeName+0x3a4>)
 800a18e:	e00a      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_NOT_IMPLEMENTED_5_01:
			return "RESP_NOT_IMPLEMENTED_5_01";
 800a190:	4b22      	ldr	r3, [pc, #136]	; (800a21c <CoAP_CodeName+0x3a8>)
 800a192:	e008      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_BAD_GATEWAY_5_02:
			return "RESP_BAD_GATEWAY_5_02";
 800a194:	4b22      	ldr	r3, [pc, #136]	; (800a220 <CoAP_CodeName+0x3ac>)
 800a196:	e006      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_SERVICE_UNAVAILABLE_5_03:
			return "RESP_SERVICE_UNAVAILABLE_5_03";
 800a198:	4b22      	ldr	r3, [pc, #136]	; (800a224 <CoAP_CodeName+0x3b0>)
 800a19a:	e004      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_GATEWAY_TIMEOUT_5_04:
			return "RESP_GATEWAY_TIMEOUT_5_04";
 800a19c:	4b22      	ldr	r3, [pc, #136]	; (800a228 <CoAP_CodeName+0x3b4>)
 800a19e:	e002      	b.n	800a1a6 <CoAP_CodeName+0x332>
		case RESP_PROXYING_NOT_SUPPORTED_5_05:
			return "RESP_PROXYING_NOT_SUPPORTED_5_05";
 800a1a0:	4b22      	ldr	r3, [pc, #136]	; (800a22c <CoAP_CodeName+0x3b8>)
 800a1a2:	e000      	b.n	800a1a6 <CoAP_CodeName+0x332>
		default:
			return "UNKNOWN";
 800a1a4:	4b22      	ldr	r3, [pc, #136]	; (800a230 <CoAP_CodeName+0x3bc>)
	}
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr
 800a1b0:	0801df3c 	.word	0x0801df3c
 800a1b4:	0801df44 	.word	0x0801df44
 800a1b8:	0801df4c 	.word	0x0801df4c
 800a1bc:	0801df58 	.word	0x0801df58
 800a1c0:	0801df60 	.word	0x0801df60
 800a1c4:	0801df6c 	.word	0x0801df6c
 800a1c8:	0801df78 	.word	0x0801df78
 800a1cc:	0801df84 	.word	0x0801df84
 800a1d0:	0801df98 	.word	0x0801df98
 800a1d4:	0801dfa8 	.word	0x0801dfa8
 800a1d8:	0801dfc4 	.word	0x0801dfc4
 800a1dc:	0801dfe0 	.word	0x0801dfe0
 800a1e0:	0801dff8 	.word	0x0801dff8
 800a1e4:	0801e014 	.word	0x0801e014
 800a1e8:	0801e030 	.word	0x0801e030
 800a1ec:	0801e04c 	.word	0x0801e04c
 800a1f0:	0801e068 	.word	0x0801e068
 800a1f4:	0801e088 	.word	0x0801e088
 800a1f8:	0801e0a0 	.word	0x0801e0a0
 800a1fc:	0801e0b4 	.word	0x0801e0b4
 800a200:	0801e0c8 	.word	0x0801e0c8
 800a204:	0801e0e8 	.word	0x0801e0e8
 800a208:	0801e108 	.word	0x0801e108
 800a20c:	0801e12c 	.word	0x0801e12c
 800a210:	0801e14c 	.word	0x0801e14c
 800a214:	0801e170 	.word	0x0801e170
 800a218:	0801e198 	.word	0x0801e198
 800a21c:	0801e1b8 	.word	0x0801e1b8
 800a220:	0801e1d4 	.word	0x0801e1d4
 800a224:	0801e1ec 	.word	0x0801e1ec
 800a228:	0801e20c 	.word	0x0801e20c
 800a22c:	0801e228 	.word	0x0801e228
 800a230:	0801e24c 	.word	0x0801e24c

0800a234 <CoAP_PrintResultValue>:

void _rom CoAP_PrintResultValue(CoAP_Result_t res) {
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
	if (res == COAP_OK) {
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d107      	bne.n	800a254 <CoAP_PrintResultValue+0x20>
		INFO("COAP_OK\r\n");
 800a244:	492f      	ldr	r1, [pc, #188]	; (800a304 <CoAP_PrintResultValue+0xd0>)
 800a246:	4830      	ldr	r0, [pc, #192]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a248:	f011 fd8c 	bl	801bd64 <siprintf>
 800a24c:	482e      	ldr	r0, [pc, #184]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a24e:	f7fd feed 	bl	800802c <hal_debug_puts>
		INFO("COAP_ERR_OUT_OF_MEMORY\r\n");
	}
	else {
		INFO("UNKNOWN RESULT\r\n");
	}
}
 800a252:	e053      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_DATAGRAM_TOO_SHORT) {
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d107      	bne.n	800a26a <CoAP_PrintResultValue+0x36>
		INFO("COAP_PARSE_DATAGRAM_TOO_SHORT\r\n");
 800a25a:	492c      	ldr	r1, [pc, #176]	; (800a30c <CoAP_PrintResultValue+0xd8>)
 800a25c:	482a      	ldr	r0, [pc, #168]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a25e:	f011 fd81 	bl	801bd64 <siprintf>
 800a262:	4829      	ldr	r0, [pc, #164]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a264:	f7fd fee2 	bl	800802c <hal_debug_puts>
}
 800a268:	e048      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_UNKOWN_COAP_VERSION) {
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d107      	bne.n	800a280 <CoAP_PrintResultValue+0x4c>
		INFO("COAP_PARSE_UNKOWN_COAP_VERSION\r\n");
 800a270:	4927      	ldr	r1, [pc, #156]	; (800a310 <CoAP_PrintResultValue+0xdc>)
 800a272:	4825      	ldr	r0, [pc, #148]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a274:	f011 fd76 	bl	801bd64 <siprintf>
 800a278:	4823      	ldr	r0, [pc, #140]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a27a:	f7fd fed7 	bl	800802c <hal_debug_puts>
}
 800a27e:	e03d      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_MESSAGE_FORMAT_ERROR) {
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d107      	bne.n	800a296 <CoAP_PrintResultValue+0x62>
		INFO("COAP_PARSE_MESSAGE_FORMAT_ERROR\r\n");
 800a286:	4923      	ldr	r1, [pc, #140]	; (800a314 <CoAP_PrintResultValue+0xe0>)
 800a288:	481f      	ldr	r0, [pc, #124]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a28a:	f011 fd6b 	bl	801bd64 <siprintf>
 800a28e:	481e      	ldr	r0, [pc, #120]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a290:	f7fd fecc 	bl	800802c <hal_debug_puts>
}
 800a294:	e032      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_TOO_MANY_OPTIONS) {
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	2b05      	cmp	r3, #5
 800a29a:	d107      	bne.n	800a2ac <CoAP_PrintResultValue+0x78>
		INFO("COAP_PARSE_TOO_MANY_OPTIONS\r\n");
 800a29c:	491e      	ldr	r1, [pc, #120]	; (800a318 <CoAP_PrintResultValue+0xe4>)
 800a29e:	481a      	ldr	r0, [pc, #104]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2a0:	f011 fd60 	bl	801bd64 <siprintf>
 800a2a4:	4818      	ldr	r0, [pc, #96]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2a6:	f7fd fec1 	bl	800802c <hal_debug_puts>
}
 800a2aa:	e027      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_TOO_LONG_OPTION) {
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	d107      	bne.n	800a2c2 <CoAP_PrintResultValue+0x8e>
		INFO("COAP_PARSE_TOO_LONG_OPTION\r\n");
 800a2b2:	491a      	ldr	r1, [pc, #104]	; (800a31c <CoAP_PrintResultValue+0xe8>)
 800a2b4:	4814      	ldr	r0, [pc, #80]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2b6:	f011 fd55 	bl	801bd64 <siprintf>
 800a2ba:	4813      	ldr	r0, [pc, #76]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2bc:	f7fd feb6 	bl	800802c <hal_debug_puts>
}
 800a2c0:	e01c      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_PARSE_TOO_MUCH_PAYLOAD) {
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	2b07      	cmp	r3, #7
 800a2c6:	d107      	bne.n	800a2d8 <CoAP_PrintResultValue+0xa4>
		INFO("COAP_PARSE_TOO_MUCH_PAYLOAD\r\n");
 800a2c8:	4915      	ldr	r1, [pc, #84]	; (800a320 <CoAP_PrintResultValue+0xec>)
 800a2ca:	480f      	ldr	r0, [pc, #60]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2cc:	f011 fd4a 	bl	801bd64 <siprintf>
 800a2d0:	480d      	ldr	r0, [pc, #52]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2d2:	f7fd feab 	bl	800802c <hal_debug_puts>
}
 800a2d6:	e011      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
	else if (res == COAP_ERR_OUT_OF_MEMORY) {
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	2b0d      	cmp	r3, #13
 800a2dc:	d107      	bne.n	800a2ee <CoAP_PrintResultValue+0xba>
		INFO("COAP_ERR_OUT_OF_MEMORY\r\n");
 800a2de:	4911      	ldr	r1, [pc, #68]	; (800a324 <CoAP_PrintResultValue+0xf0>)
 800a2e0:	4809      	ldr	r0, [pc, #36]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2e2:	f011 fd3f 	bl	801bd64 <siprintf>
 800a2e6:	4808      	ldr	r0, [pc, #32]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2e8:	f7fd fea0 	bl	800802c <hal_debug_puts>
}
 800a2ec:	e006      	b.n	800a2fc <CoAP_PrintResultValue+0xc8>
		INFO("UNKNOWN RESULT\r\n");
 800a2ee:	490e      	ldr	r1, [pc, #56]	; (800a328 <CoAP_PrintResultValue+0xf4>)
 800a2f0:	4805      	ldr	r0, [pc, #20]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2f2:	f011 fd37 	bl	801bd64 <siprintf>
 800a2f6:	4804      	ldr	r0, [pc, #16]	; (800a308 <CoAP_PrintResultValue+0xd4>)
 800a2f8:	f7fd fe98 	bl	800802c <hal_debug_puts>
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0801e254 	.word	0x0801e254
 800a308:	200007d8 	.word	0x200007d8
 800a30c:	0801e260 	.word	0x0801e260
 800a310:	0801e280 	.word	0x0801e280
 800a314:	0801e2a4 	.word	0x0801e2a4
 800a318:	0801e2c8 	.word	0x0801e2c8
 800a31c:	0801e2e8 	.word	0x0801e2e8
 800a320:	0801e308 	.word	0x0801e308
 800a324:	0801e328 	.word	0x0801e328
 800a328:	0801e344 	.word	0x0801e344

0800a32c <pack_OptionsFromList>:
//#########################################################################################################
//### This function packs multiple CoAP options to the format specified at
//### section 3.1 in RFC7252. The option array gets sorted by option numbers first and
//###  is than packed into the compressed byte array format with its delta encoding.
//#########################################################################################################
CoAP_Result_t _rom pack_OptionsFromList(uint8_t* pDestArr, uint16_t* pBytesWritten, CoAP_option_t* pOptionsListBegin) {
 800a32c:	b480      	push	{r7}
 800a32e:	b08b      	sub	sp, #44	; 0x2c
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
	uint16_t offset = 0;         //Current "Write" Position while packing the options array to the byte array
 800a338:	2300      	movs	r3, #0
 800a33a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t OptStartOffset = 0; //Position of 1st Byte of current packed option
 800a33c:	2300      	movs	r3, #0
 800a33e:	837b      	strh	r3, [r7, #26]
	uint16_t lastOptNumber = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t currDelta = 0;         //current Delta to privious option
 800a344:	2300      	movs	r3, #0
 800a346:	833b      	strh	r3, [r7, #24]
	uint16_t optLength = 0;         //Length of current Option
 800a348:	2300      	movs	r3, #0
 800a34a:	82fb      	strh	r3, [r7, #22]

	CoAP_option_t* pOption = pOptionsListBegin;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	623b      	str	r3, [r7, #32]

	if (pOption == NULL) //no options - list empty - can happen no error
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <pack_OptionsFromList+0x34>
	{
		*pBytesWritten = 0;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2200      	movs	r2, #0
 800a35a:	801a      	strh	r2, [r3, #0]
		return COAP_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	e0d5      	b.n	800a50c <pack_OptionsFromList+0x1e0>
	}

	//iterate throw array of options
	do {
		//Inits for Option Packing
		currDelta = pOption->Number - lastOptNumber;
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	889a      	ldrh	r2, [r3, #4]
 800a364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	833b      	strh	r3, [r7, #24]
		lastOptNumber = pOption->Number;
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	889b      	ldrh	r3, [r3, #4]
 800a36e:	84bb      	strh	r3, [r7, #36]	; 0x24

		optLength = pOption->Length;
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	88db      	ldrh	r3, [r3, #6]
 800a374:	82fb      	strh	r3, [r7, #22]
		OptStartOffset = offset;
 800a376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a378:	837b      	strh	r3, [r7, #26]
		offset++;
 800a37a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a37c:	3301      	adds	r3, #1
 800a37e:	84fb      	strh	r3, [r7, #38]	; 0x26
		pDestArr[OptStartOffset] = 0;
 800a380:	8b7b      	ldrh	r3, [r7, #26]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4413      	add	r3, r2
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]

		//Delta Bytes
		if (currDelta < 13) {
 800a38a:	8b3b      	ldrh	r3, [r7, #24]
 800a38c:	2b0c      	cmp	r3, #12
 800a38e:	d810      	bhi.n	800a3b2 <pack_OptionsFromList+0x86>
			pDestArr[OptStartOffset] |= ((uint8_t) currDelta) << 4u;
 800a390:	8b7b      	ldrh	r3, [r7, #26]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	b25a      	sxtb	r2, r3
 800a39a:	8b3b      	ldrh	r3, [r7, #24]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	b25b      	sxtb	r3, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	b259      	sxtb	r1, r3
 800a3a6:	8b7b      	ldrh	r3, [r7, #26]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	b2ca      	uxtb	r2, r1
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	e03c      	b.n	800a42c <pack_OptionsFromList+0x100>
		} else if (currDelta < 269) {
 800a3b2:	8b3b      	ldrh	r3, [r7, #24]
 800a3b4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a3b8:	d816      	bhi.n	800a3e8 <pack_OptionsFromList+0xbc>
			pDestArr[OptStartOffset] |= ((uint8_t) 13u) << 4u;
 800a3ba:	8b7b      	ldrh	r3, [r7, #26]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4413      	add	r3, r2
 800a3c0:	781a      	ldrb	r2, [r3, #0]
 800a3c2:	8b7b      	ldrh	r3, [r7, #26]
 800a3c4:	68f9      	ldr	r1, [r7, #12]
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f062 022f 	orn	r2, r2, #47	; 0x2f
 800a3cc:	b2d2      	uxtb	r2, r2
 800a3ce:	701a      	strb	r2, [r3, #0]
			pDestArr[offset] = ((uint8_t) currDelta) - 13u;
 800a3d0:	8b3b      	ldrh	r3, [r7, #24]
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	440b      	add	r3, r1
 800a3da:	3a0d      	subs	r2, #13
 800a3dc:	b2d2      	uxtb	r2, r2
 800a3de:	701a      	strb	r2, [r3, #0]
			offset++;
 800a3e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a3e6:	e021      	b.n	800a42c <pack_OptionsFromList+0x100>
		} else {
			pDestArr[OptStartOffset] |= ((uint8_t) 14u) << 4u;
 800a3e8:	8b7b      	ldrh	r3, [r7, #26]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	8b7b      	ldrh	r3, [r7, #26]
 800a3f2:	68f9      	ldr	r1, [r7, #12]
 800a3f4:	440b      	add	r3, r1
 800a3f6:	f062 021f 	orn	r2, r2, #31
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]

			pDestArr[offset] = (uint8_t) ((currDelta - 269u) >> 8u);
 800a3fe:	8b3b      	ldrh	r3, [r7, #24]
 800a400:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800a404:	0a19      	lsrs	r1, r3, #8
 800a406:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4413      	add	r3, r2
 800a40c:	b2ca      	uxtb	r2, r1
 800a40e:	701a      	strb	r2, [r3, #0]
			offset++;
 800a410:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a412:	3301      	adds	r3, #1
 800a414:	84fb      	strh	r3, [r7, #38]	; 0x26
			pDestArr[offset] = (uint8_t) ((currDelta - 269u) & 0xffu);
 800a416:	8b3b      	ldrh	r3, [r7, #24]
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a41c:	68f9      	ldr	r1, [r7, #12]
 800a41e:	440b      	add	r3, r1
 800a420:	3a0d      	subs	r2, #13
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	701a      	strb	r2, [r3, #0]
			offset++;
 800a426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a428:	3301      	adds	r3, #1
 800a42a:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		//Length Bytes
		if (optLength < 13) {
 800a42c:	8afb      	ldrh	r3, [r7, #22]
 800a42e:	2b0c      	cmp	r3, #12
 800a430:	d80c      	bhi.n	800a44c <pack_OptionsFromList+0x120>
			pDestArr[OptStartOffset] |= ((uint8_t) optLength);
 800a432:	8b7b      	ldrh	r3, [r7, #26]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	7819      	ldrb	r1, [r3, #0]
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	8b7b      	ldrh	r3, [r7, #26]
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	4403      	add	r3, r0
 800a444:	430a      	orrs	r2, r1
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	e03c      	b.n	800a4c6 <pack_OptionsFromList+0x19a>
		} else if (optLength < 269) {
 800a44c:	8afb      	ldrh	r3, [r7, #22]
 800a44e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a452:	d816      	bhi.n	800a482 <pack_OptionsFromList+0x156>
			pDestArr[OptStartOffset] |= ((uint8_t) 13);
 800a454:	8b7b      	ldrh	r3, [r7, #26]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	781a      	ldrb	r2, [r3, #0]
 800a45c:	8b7b      	ldrh	r3, [r7, #26]
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	440b      	add	r3, r1
 800a462:	f042 020d 	orr.w	r2, r2, #13
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
			pDestArr[offset] = ((uint8_t) optLength) - 13;
 800a46a:	8afb      	ldrh	r3, [r7, #22]
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a470:	68f9      	ldr	r1, [r7, #12]
 800a472:	440b      	add	r3, r1
 800a474:	3a0d      	subs	r2, #13
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	701a      	strb	r2, [r3, #0]
			offset++;
 800a47a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a47c:	3301      	adds	r3, #1
 800a47e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a480:	e021      	b.n	800a4c6 <pack_OptionsFromList+0x19a>
		} else {
			pDestArr[OptStartOffset] |= ((uint8_t) 14);
 800a482:	8b7b      	ldrh	r3, [r7, #26]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	781a      	ldrb	r2, [r3, #0]
 800a48a:	8b7b      	ldrh	r3, [r7, #26]
 800a48c:	68f9      	ldr	r1, [r7, #12]
 800a48e:	440b      	add	r3, r1
 800a490:	f042 020e 	orr.w	r2, r2, #14
 800a494:	b2d2      	uxtb	r2, r2
 800a496:	701a      	strb	r2, [r3, #0]

			pDestArr[offset] = (uint8_t) ((optLength - 269u) >> 8u);
 800a498:	8afb      	ldrh	r3, [r7, #22]
 800a49a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800a49e:	0a19      	lsrs	r1, r3, #8
 800a4a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	b2ca      	uxtb	r2, r1
 800a4a8:	701a      	strb	r2, [r3, #0]
			offset++;
 800a4aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	84fb      	strh	r3, [r7, #38]	; 0x26
			pDestArr[offset] = (uint8_t) ((optLength - 269u) & 0xffu);
 800a4b0:	8afb      	ldrh	r3, [r7, #22]
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	440b      	add	r3, r1
 800a4ba:	3a0d      	subs	r2, #13
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
			offset++;
 800a4c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		//Option Values
		int t;
		for (t = 0; t < optLength; t++) {
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	e00e      	b.n	800a4ea <pack_OptionsFromList+0x1be>
			pDestArr[offset] = pOption->Value[t];
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	441a      	add	r2, r3
 800a4d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	440b      	add	r3, r1
 800a4da:	7812      	ldrb	r2, [r2, #0]
 800a4dc:	701a      	strb	r2, [r3, #0]
			offset++;
 800a4de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (t = 0; t < optLength; t++) {
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	8afb      	ldrh	r3, [r7, #22]
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	dbec      	blt.n	800a4cc <pack_OptionsFromList+0x1a0>
		}

		if (pOption->next == NULL)
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <pack_OptionsFromList+0x1d6>
			break;
		pOption = pOption->next;
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	623b      	str	r3, [r7, #32]
	do {
 800a500:	e72e      	b.n	800a360 <pack_OptionsFromList+0x34>
			break;
 800a502:	bf00      	nop
	} while (1);

	*pBytesWritten = offset;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a508:	801a      	strh	r2, [r3, #0]
	return COAP_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	372c      	adds	r7, #44	; 0x2c
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <CoAP_NeededMem4PackOptions>:

uint16_t _rom CoAP_NeededMem4PackOptions(CoAP_option_t* pOptionsListBegin) {
 800a516:	b480      	push	{r7}
 800a518:	b087      	sub	sp, #28
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
	uint16_t offset = 0;         //Current "Write" Position while packing the options array to the byte array
 800a51e:	2300      	movs	r3, #0
 800a520:	82fb      	strh	r3, [r7, #22]
	uint16_t lastOptNumber = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	82bb      	strh	r3, [r7, #20]
	uint16_t currDelta = 0;         //current Delta to privious option
 800a526:	2300      	movs	r3, #0
 800a528:	817b      	strh	r3, [r7, #10]
	uint16_t optLength = 0;         //Length of current Option
 800a52a:	2300      	movs	r3, #0
 800a52c:	813b      	strh	r3, [r7, #8]

	CoAP_option_t* pOption = pOptionsListBegin;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	613b      	str	r3, [r7, #16]

	if (pOption == NULL) {         //no options - list empty - can happen no error
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <CoAP_NeededMem4PackOptions+0x26>
		return 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	e040      	b.n	800a5be <CoAP_NeededMem4PackOptions+0xa8>
	}

	//iterate throw array of options
	do {
		//Inits for Option Packing
		currDelta = pOption->Number - lastOptNumber;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	889a      	ldrh	r2, [r3, #4]
 800a540:	8abb      	ldrh	r3, [r7, #20]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	817b      	strh	r3, [r7, #10]
		lastOptNumber = pOption->Number;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	889b      	ldrh	r3, [r3, #4]
 800a54a:	82bb      	strh	r3, [r7, #20]

		optLength = pOption->Length;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	88db      	ldrh	r3, [r3, #6]
 800a550:	813b      	strh	r3, [r7, #8]
		offset++;
 800a552:	8afb      	ldrh	r3, [r7, #22]
 800a554:	3301      	adds	r3, #1
 800a556:	82fb      	strh	r3, [r7, #22]

		//Delta Bytes
		if (currDelta < 13) {
 800a558:	897b      	ldrh	r3, [r7, #10]
 800a55a:	2b0c      	cmp	r3, #12
 800a55c:	d90a      	bls.n	800a574 <CoAP_NeededMem4PackOptions+0x5e>
			;
		}
		else if (currDelta < 269)
 800a55e:	897b      	ldrh	r3, [r7, #10]
 800a560:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a564:	d803      	bhi.n	800a56e <CoAP_NeededMem4PackOptions+0x58>
			offset++;
 800a566:	8afb      	ldrh	r3, [r7, #22]
 800a568:	3301      	adds	r3, #1
 800a56a:	82fb      	strh	r3, [r7, #22]
 800a56c:	e002      	b.n	800a574 <CoAP_NeededMem4PackOptions+0x5e>
		else
			offset += 2;
 800a56e:	8afb      	ldrh	r3, [r7, #22]
 800a570:	3302      	adds	r3, #2
 800a572:	82fb      	strh	r3, [r7, #22]

		//Length Bytes
		if (optLength < 13) {
 800a574:	893b      	ldrh	r3, [r7, #8]
 800a576:	2b0c      	cmp	r3, #12
 800a578:	d90a      	bls.n	800a590 <CoAP_NeededMem4PackOptions+0x7a>
			;
		}
		else if (optLength < 269)
 800a57a:	893b      	ldrh	r3, [r7, #8]
 800a57c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a580:	d803      	bhi.n	800a58a <CoAP_NeededMem4PackOptions+0x74>
			offset++;
 800a582:	8afb      	ldrh	r3, [r7, #22]
 800a584:	3301      	adds	r3, #1
 800a586:	82fb      	strh	r3, [r7, #22]
 800a588:	e002      	b.n	800a590 <CoAP_NeededMem4PackOptions+0x7a>
		else
			offset += 2;
 800a58a:	8afb      	ldrh	r3, [r7, #22]
 800a58c:	3302      	adds	r3, #2
 800a58e:	82fb      	strh	r3, [r7, #22]

		//Option Values
		int t;
		for (t = 0; t < optLength; t++)
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e005      	b.n	800a5a2 <CoAP_NeededMem4PackOptions+0x8c>
			offset++;
 800a596:	8afb      	ldrh	r3, [r7, #22]
 800a598:	3301      	adds	r3, #1
 800a59a:	82fb      	strh	r3, [r7, #22]
		for (t = 0; t < optLength; t++)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	893b      	ldrh	r3, [r7, #8]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	dbf5      	blt.n	800a596 <CoAP_NeededMem4PackOptions+0x80>

		if (pOption->next == NULL)
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <CoAP_NeededMem4PackOptions+0xa4>
			break;
		pOption = pOption->next;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	613b      	str	r3, [r7, #16]
	do {
 800a5b8:	e7c0      	b.n	800a53c <CoAP_NeededMem4PackOptions+0x26>
			break;
 800a5ba:	bf00      	nop
	} while (1);

	return offset;
 800a5bc:	8afb      	ldrh	r3, [r7, #22]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bc80      	pop	{r7}
 800a5c6:	4770      	bx	lr

0800a5c8 <parse_OptionsFromRaw>:

CoAP_Result_t _rom parse_OptionsFromRaw(uint8_t* srcArr, uint16_t srcLength, uint8_t** pPayloadBeginInSrc, CoAP_option_t** pOptionsListBegin) {
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	817b      	strh	r3, [r7, #10]
	//srcArr points to the beginning of Option section @ raw datagram byte array
	//length includes payload marker & payload (if any)
	uint16_t offset = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	83fb      	strh	r3, [r7, #30]
	*pPayloadBeginInSrc = NULL;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]

	if (*pOptionsListBegin != NULL) {
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d008      	beq.n	800a5fc <parse_OptionsFromRaw+0x34>
		INFO("- Option list argument must be an empty list!\r\n");
 800a5ea:	4975      	ldr	r1, [pc, #468]	; (800a7c0 <parse_OptionsFromRaw+0x1f8>)
 800a5ec:	4875      	ldr	r0, [pc, #468]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a5ee:	f011 fbb9 	bl	801bd64 <siprintf>
 800a5f2:	4874      	ldr	r0, [pc, #464]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a5f4:	f7fd fd1a 	bl	800802c <hal_debug_puts>
		return COAP_ERR_ARGUMENT;
 800a5f8:	230a      	movs	r3, #10
 800a5fa:	e0dd      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
	}

	if (srcLength == 0) {
 800a5fc:	897b      	ldrh	r3, [r7, #10]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <parse_OptionsFromRaw+0x3e>
		return COAP_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	e0d8      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
	}

	uint16_t lastOptionNumber = 0; // used for delta calculations of optionnumbers
 800a606:	2300      	movs	r3, #0
 800a608:	83bb      	strh	r3, [r7, #28]

	while (offset < srcLength) {
 800a60a:	e0cf      	b.n	800a7ac <parse_OptionsFromRaw+0x1e4>
		if (srcArr[offset] == OPTION_PAYLOAD_MARKER) // Payload Marker
 800a60c:	8bfb      	ldrh	r3, [r7, #30]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4413      	add	r3, r2
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2bff      	cmp	r3, #255	; 0xff
 800a616:	d115      	bne.n	800a644 <parse_OptionsFromRaw+0x7c>
		{
			if ((srcLength - offset) < 2) {
 800a618:	897a      	ldrh	r2, [r7, #10]
 800a61a:	8bfb      	ldrh	r3, [r7, #30]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b01      	cmp	r3, #1
 800a620:	dc08      	bgt.n	800a634 <parse_OptionsFromRaw+0x6c>
				INFO("- at least one byte payload must follow to the payload marker\r\n");
 800a622:	4969      	ldr	r1, [pc, #420]	; (800a7c8 <parse_OptionsFromRaw+0x200>)
 800a624:	4867      	ldr	r0, [pc, #412]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a626:	f011 fb9d 	bl	801bd64 <siprintf>
 800a62a:	4866      	ldr	r0, [pc, #408]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a62c:	f7fd fcfe 	bl	800802c <hal_debug_puts>
				return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 800a630:	2304      	movs	r3, #4
 800a632:	e0c1      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
			}

			*pPayloadBeginInSrc = &(srcArr[offset + 1]);
 800a634:	8bfb      	ldrh	r3, [r7, #30]
 800a636:	3301      	adds	r3, #1
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	441a      	add	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
			return COAP_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	e0b9      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
		} else {
			uint8_t currOptDeltaField = srcArr[offset] >> 4u;
 800a644:	8bfb      	ldrh	r3, [r7, #30]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	091b      	lsrs	r3, r3, #4
 800a64e:	75fb      	strb	r3, [r7, #23]
			uint16_t currOptDelta = currOptDeltaField; // init with field data, but can be overwritten if field set to 13 or 14
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	837b      	strh	r3, [r7, #26]
			uint8_t currOptLengthField = srcArr[offset] & 0x0fu;
 800a654:	8bfb      	ldrh	r3, [r7, #30]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 030f 	and.w	r3, r3, #15
 800a660:	75bb      	strb	r3, [r7, #22]
			uint16_t currOptLength = currOptLengthField; // init with field data, but can be overwritten if field set to 13 or 14
 800a662:	7dbb      	ldrb	r3, [r7, #22]
 800a664:	833b      	strh	r3, [r7, #24]

			offset++;
 800a666:	8bfb      	ldrh	r3, [r7, #30]
 800a668:	3301      	adds	r3, #1
 800a66a:	83fb      	strh	r3, [r7, #30]

			//Option Delta extended (if any)
			if (currOptDeltaField == 13) {
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	2b0d      	cmp	r3, #13
 800a670:	d10a      	bne.n	800a688 <parse_OptionsFromRaw+0xc0>
				// 13:  An 8-bit unsigned integer follows the initial byte and
				// indicates the Option Delta minus 13.
				currOptDelta = srcArr[offset] + 13;
 800a672:	8bfb      	ldrh	r3, [r7, #30]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	330d      	adds	r3, #13
 800a67e:	837b      	strh	r3, [r7, #26]
				offset++;
 800a680:	8bfb      	ldrh	r3, [r7, #30]
 800a682:	3301      	adds	r3, #1
 800a684:	83fb      	strh	r3, [r7, #30]
 800a686:	e024      	b.n	800a6d2 <parse_OptionsFromRaw+0x10a>
			} else if (currOptDeltaField == 14) {
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	2b0e      	cmp	r3, #14
 800a68c:	d115      	bne.n	800a6ba <parse_OptionsFromRaw+0xf2>
				// 14:  A 16-bit unsigned integer in network byte order follows the
				// initial byte and indicates the Option Delta minus 269.
				currOptDelta = ((((uint16_t) srcArr[offset]) << 8u) | ((uint16_t) srcArr[offset + 1])) + 269u;
 800a68e:	8bfb      	ldrh	r3, [r7, #30]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	b21a      	sxth	r2, r3
 800a69a:	8bfb      	ldrh	r3, [r7, #30]
 800a69c:	3301      	adds	r3, #1
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	440b      	add	r3, r1
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	b21b      	sxth	r3, r3
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800a6b0:	837b      	strh	r3, [r7, #26]
				offset += 2;
 800a6b2:	8bfb      	ldrh	r3, [r7, #30]
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	83fb      	strh	r3, [r7, #30]
 800a6b8:	e00b      	b.n	800a6d2 <parse_OptionsFromRaw+0x10a>
			} else if (currOptDeltaField == 15) {
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b0f      	cmp	r3, #15
 800a6be:	d108      	bne.n	800a6d2 <parse_OptionsFromRaw+0x10a>
				// 15:  Reserved for the Payload Marker.  If the field is set to this
				// value but the entire byte is not the payload marker, this MUST
				// be processed as a message format error.
				// NOTE: we checked for OPTION_PAYLOAD_MARKER before!
				INFO("- currOptDeltaField == 15 is not allowed(1)\r\n");
 800a6c0:	4942      	ldr	r1, [pc, #264]	; (800a7cc <parse_OptionsFromRaw+0x204>)
 800a6c2:	4840      	ldr	r0, [pc, #256]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a6c4:	f011 fb4e 	bl	801bd64 <siprintf>
 800a6c8:	483e      	ldr	r0, [pc, #248]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a6ca:	f7fd fcaf 	bl	800802c <hal_debug_puts>
				return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	e072      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
			}

			//Option Length extended (if any)
			if (currOptLengthField == 13) {
 800a6d2:	7dbb      	ldrb	r3, [r7, #22]
 800a6d4:	2b0d      	cmp	r3, #13
 800a6d6:	d10a      	bne.n	800a6ee <parse_OptionsFromRaw+0x126>
				currOptLength = srcArr[offset] + 13;
 800a6d8:	8bfb      	ldrh	r3, [r7, #30]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	330d      	adds	r3, #13
 800a6e4:	833b      	strh	r3, [r7, #24]
				offset++;
 800a6e6:	8bfb      	ldrh	r3, [r7, #30]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	83fb      	strh	r3, [r7, #30]
 800a6ec:	e02a      	b.n	800a744 <parse_OptionsFromRaw+0x17c>
			} else if (currOptLengthField == 14) {
 800a6ee:	7dbb      	ldrb	r3, [r7, #22]
 800a6f0:	2b0e      	cmp	r3, #14
 800a6f2:	d115      	bne.n	800a720 <parse_OptionsFromRaw+0x158>
				currOptLength = ((((uint16_t) srcArr[offset]) << 8u) | ((uint16_t) srcArr[offset + 1])) + 269u;
 800a6f4:	8bfb      	ldrh	r3, [r7, #30]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b21a      	sxth	r2, r3
 800a700:	8bfb      	ldrh	r3, [r7, #30]
 800a702:	3301      	adds	r3, #1
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	440b      	add	r3, r1
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b21b      	sxth	r3, r3
 800a70c:	4313      	orrs	r3, r2
 800a70e:	b21b      	sxth	r3, r3
 800a710:	b29b      	uxth	r3, r3
 800a712:	f203 130d 	addw	r3, r3, #269	; 0x10d
 800a716:	833b      	strh	r3, [r7, #24]
				offset += 2;
 800a718:	8bfb      	ldrh	r3, [r7, #30]
 800a71a:	3302      	adds	r3, #2
 800a71c:	83fb      	strh	r3, [r7, #30]
 800a71e:	e011      	b.n	800a744 <parse_OptionsFromRaw+0x17c>
			} else if (currOptLengthField == 15) {
 800a720:	7dbb      	ldrb	r3, [r7, #22]
 800a722:	2b0f      	cmp	r3, #15
 800a724:	d10e      	bne.n	800a744 <parse_OptionsFromRaw+0x17c>
				INFO("- currOptDeltaField == 15 is not allowed %x (2)\r\n", srcArr[offset - 1]);
 800a726:	8bfb      	ldrh	r3, [r7, #30]
 800a728:	3b01      	subs	r3, #1
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	4927      	ldr	r1, [pc, #156]	; (800a7d0 <parse_OptionsFromRaw+0x208>)
 800a734:	4823      	ldr	r0, [pc, #140]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a736:	f011 fb15 	bl	801bd64 <siprintf>
 800a73a:	4822      	ldr	r0, [pc, #136]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a73c:	f7fd fc76 	bl	800802c <hal_debug_puts>
				return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 800a740:	2304      	movs	r3, #4
 800a742:	e039      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
			}

			if (currOptLength > MAX_OPTION_VALUE_SIZE) {
 800a744:	8b3b      	ldrh	r3, [r7, #24]
 800a746:	f240 420a 	movw	r2, #1034	; 0x40a
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d908      	bls.n	800a760 <parse_OptionsFromRaw+0x198>
				INFO("- Option too long\r\n");
 800a74e:	4921      	ldr	r1, [pc, #132]	; (800a7d4 <parse_OptionsFromRaw+0x20c>)
 800a750:	481c      	ldr	r0, [pc, #112]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a752:	f011 fb07 	bl	801bd64 <siprintf>
 800a756:	481b      	ldr	r0, [pc, #108]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a758:	f7fd fc68 	bl	800802c <hal_debug_puts>
				return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 800a75c:	2304      	movs	r3, #4
 800a75e:	e02b      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
			}
			if ((srcLength - offset) < currOptLength) {
 800a760:	897a      	ldrh	r2, [r7, #10]
 800a762:	8bfb      	ldrh	r3, [r7, #30]
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	8b3b      	ldrh	r3, [r7, #24]
 800a768:	429a      	cmp	r2, r3
 800a76a:	da08      	bge.n	800a77e <parse_OptionsFromRaw+0x1b6>
				INFO("- Option too short\r\n");
 800a76c:	491a      	ldr	r1, [pc, #104]	; (800a7d8 <parse_OptionsFromRaw+0x210>)
 800a76e:	4815      	ldr	r0, [pc, #84]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a770:	f011 faf8 	bl	801bd64 <siprintf>
 800a774:	4813      	ldr	r0, [pc, #76]	; (800a7c4 <parse_OptionsFromRaw+0x1fc>)
 800a776:	f7fd fc59 	bl	800802c <hal_debug_puts>
				return COAP_PARSE_MESSAGE_FORMAT_ERROR;
 800a77a:	2304      	movs	r3, #4
 800a77c:	e01c      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>
			}

			lastOptionNumber = currOptDelta + lastOptionNumber;
 800a77e:	8b7a      	ldrh	r2, [r7, #26]
 800a780:	8bbb      	ldrh	r3, [r7, #28]
 800a782:	4413      	add	r3, r2
 800a784:	83bb      	strh	r3, [r7, #28]

			//add this option to ordered linked list
			CoAP_Result_t Res = CoAP_AppendOptionToList(pOptionsListBegin, lastOptionNumber, &(srcArr[offset]), currOptLength);
 800a786:	8bfb      	ldrh	r3, [r7, #30]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	441a      	add	r2, r3
 800a78c:	8b3b      	ldrh	r3, [r7, #24]
 800a78e:	8bb9      	ldrh	r1, [r7, #28]
 800a790:	6838      	ldr	r0, [r7, #0]
 800a792:	f000 f933 	bl	800a9fc <CoAP_AppendOptionToList>
 800a796:	4603      	mov	r3, r0
 800a798:	757b      	strb	r3, [r7, #21]
			if (Res != COAP_OK)
 800a79a:	7d7b      	ldrb	r3, [r7, #21]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <parse_OptionsFromRaw+0x1dc>
				return Res;
 800a7a0:	7d7b      	ldrb	r3, [r7, #21]
 800a7a2:	e009      	b.n	800a7b8 <parse_OptionsFromRaw+0x1f0>

			offset += currOptLength;
 800a7a4:	8bfa      	ldrh	r2, [r7, #30]
 800a7a6:	8b3b      	ldrh	r3, [r7, #24]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	83fb      	strh	r3, [r7, #30]
	while (offset < srcLength) {
 800a7ac:	8bfa      	ldrh	r2, [r7, #30]
 800a7ae:	897b      	ldrh	r3, [r7, #10]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	f4ff af2b 	bcc.w	800a60c <parse_OptionsFromRaw+0x44>
		}
	}

	return COAP_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	0801e358 	.word	0x0801e358
 800a7c4:	200007d8 	.word	0x200007d8
 800a7c8:	0801e388 	.word	0x0801e388
 800a7cc:	0801e3c8 	.word	0x0801e3c8
 800a7d0:	0801e3f8 	.word	0x0801e3f8
 800a7d4:	0801e42c 	.word	0x0801e42c
 800a7d8:	0801e440 	.word	0x0801e440

0800a7dc <CoAP_RemoveOptionFromList>:

CoAP_Result_t _rom CoAP_RemoveOptionFromList(CoAP_option_t** pOptionListStart, CoAP_option_t* pOptionToRemove) {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
	CoAP_option_t* currP;
	CoAP_option_t* prevP;

	// For 1st node, indicate there is no previous.
	prevP = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60bb      	str	r3, [r7, #8]

	//Visit each node, maintaining a pointer to
	//the previous node we just visited.
	for (currP = *pOptionListStart; currP != NULL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e01a      	b.n	800a828 <CoAP_RemoveOptionFromList+0x4c>
			prevP = currP, currP = currP->next) {

		if (currP == pOptionToRemove) {  // Found it.
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d111      	bne.n	800a81e <CoAP_RemoveOptionFromList+0x42>
			if (prevP == NULL) {
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d104      	bne.n	800a80a <CoAP_RemoveOptionFromList+0x2e>
				//Fix beginning pointer.
				*pOptionListStart = currP->next;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	e003      	b.n	800a812 <CoAP_RemoveOptionFromList+0x36>
			} else {
				//Fix previous node's next to
				//skip over the removed node.
				prevP->next = currP->next;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	601a      	str	r2, [r3, #0]
			}

			// Deallocate the node.
			CoAP.api.free((void*) currP);
 800a812:	4b09      	ldr	r3, [pc, #36]	; (800a838 <CoAP_RemoveOptionFromList+0x5c>)
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3

			//Done searching.
			return COAP_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e008      	b.n	800a830 <CoAP_RemoveOptionFromList+0x54>
			prevP = currP, currP = currP->next) {
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	60bb      	str	r3, [r7, #8]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
	for (currP = *pOptionListStart; currP != NULL;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e1      	bne.n	800a7f2 <CoAP_RemoveOptionFromList+0x16>
		}
	}
	return COAP_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20000790 	.word	0x20000790

0800a83c <append_OptionToListEnd>:

static CoAP_Result_t _rom append_OptionToListEnd(CoAP_option_t** pOptionsListBegin, uint16_t OptNumber, const uint8_t* buf, uint16_t length) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	607a      	str	r2, [r7, #4]
 800a846:	461a      	mov	r2, r3
 800a848:	460b      	mov	r3, r1
 800a84a:	817b      	strh	r3, [r7, #10]
 800a84c:	4613      	mov	r3, r2
 800a84e:	813b      	strh	r3, [r7, #8]
	if (*pOptionsListBegin == NULL) //List empty? create new first element
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d12e      	bne.n	800a8b6 <append_OptionToListEnd+0x7a>
	{
		*pOptionsListBegin = (CoAP_option_t*) CoAP.api.malloc(sizeof(CoAP_option_t) + length);
 800a858:	4b32      	ldr	r3, [pc, #200]	; (800a924 <append_OptionToListEnd+0xe8>)
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	893a      	ldrh	r2, [r7, #8]
 800a85e:	320c      	adds	r2, #12
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	4602      	mov	r2, r0
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]
		if (*pOptionsListBegin == NULL)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <append_OptionToListEnd+0x3a>
			return COAP_ERR_OUT_OF_MEMORY; //could not alloc enough mem
 800a872:	230d      	movs	r3, #13
 800a874:	e052      	b.n	800a91c <append_OptionToListEnd+0xe0>

		(*pOptionsListBegin)->next = NULL;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]

		//fill data
		(*pOptionsListBegin)->Length = length;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	893a      	ldrh	r2, [r7, #8]
 800a884:	80da      	strh	r2, [r3, #6]
		(*pOptionsListBegin)->Number = OptNumber;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	897a      	ldrh	r2, [r7, #10]
 800a88c:	809a      	strh	r2, [r3, #4]
		(*pOptionsListBegin)->Value = ((uint8_t*) (*pOptionsListBegin)) + sizeof(CoAP_option_t);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	320c      	adds	r2, #12
 800a898:	609a      	str	r2, [r3, #8]
		if(NULL != ((*pOptionsListBegin)->Value))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d03a      	beq.n	800a91a <append_OptionToListEnd+0xde>
		{
		    coap_memcpy((void*) ((*pOptionsListBegin)->Value), (const void*) buf, length);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	893a      	ldrh	r2, [r7, #8]
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f011 fc19 	bl	801c0e6 <memcpy>
 800a8b4:	e031      	b.n	800a91a <append_OptionToListEnd+0xde>
		}
	} else //append new element at end
	{
		CoAP_option_t* pOption = *pOptionsListBegin;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	617b      	str	r3, [r7, #20]
		while (pOption->next != NULL)
 800a8bc:	e002      	b.n	800a8c4 <append_OptionToListEnd+0x88>
			pOption = pOption->next;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	617b      	str	r3, [r7, #20]
		while (pOption->next != NULL)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f8      	bne.n	800a8be <append_OptionToListEnd+0x82>

		pOption->next = (CoAP_option_t*) CoAP.api.malloc(sizeof(CoAP_option_t) + length);
 800a8cc:	4b15      	ldr	r3, [pc, #84]	; (800a924 <append_OptionToListEnd+0xe8>)
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	893a      	ldrh	r2, [r7, #8]
 800a8d2:	320c      	adds	r2, #12
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	4602      	mov	r2, r0
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	601a      	str	r2, [r3, #0]
		if (pOption->next == NULL)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <append_OptionToListEnd+0xae>
			return COAP_ERR_OUT_OF_MEMORY; //could not alloc enough mem
 800a8e6:	230d      	movs	r3, #13
 800a8e8:	e018      	b.n	800a91c <append_OptionToListEnd+0xe0>

		pOption = pOption->next;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	617b      	str	r3, [r7, #20]
		pOption->next = NULL;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]

		//fill data
		pOption->Length = length;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	893a      	ldrh	r2, [r7, #8]
 800a8fa:	80da      	strh	r2, [r3, #6]
		pOption->Number = OptNumber;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	897a      	ldrh	r2, [r7, #10]
 800a900:	809a      	strh	r2, [r3, #4]
		pOption->Value = ((uint8_t*) pOption) + sizeof(CoAP_option_t);
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f103 020c 	add.w	r2, r3, #12
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	609a      	str	r2, [r3, #8]
		coap_memcpy((void*) (pOption->Value), (const void*) buf, length);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	893a      	ldrh	r2, [r7, #8]
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	f011 fbe6 	bl	801c0e6 <memcpy>
	}
	return COAP_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000790 	.word	0x20000790

0800a928 <CoAP_AppendUintOptionToList>:

CoAP_Result_t _rom CoAP_AddOption(CoAP_Message_t* pMsg, uint16_t OptNumber, uint8_t* buf, uint16_t length) {
	return CoAP_AppendOptionToList(&pMsg->pOptionsList, OptNumber, buf, length);
}

CoAP_Result_t _rom CoAP_AppendUintOptionToList(CoAP_option_t** pOptionsListBegin, uint16_t OptNumber, uint32_t val) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	460b      	mov	r3, r1
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	817b      	strh	r3, [r7, #10]
	uint8_t wBuf[4];

	if(val==0)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d108      	bne.n	800a94e <CoAP_AppendUintOptionToList+0x26>
	{
		return CoAP_AppendOptionToList(pOptionsListBegin, OptNumber ,wBuf, 0);
 800a93c:	f107 0214 	add.w	r2, r7, #20
 800a940:	8979      	ldrh	r1, [r7, #10]
 800a942:	2300      	movs	r3, #0
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 f859 	bl	800a9fc <CoAP_AppendOptionToList>
 800a94a:	4603      	mov	r3, r0
 800a94c:	e051      	b.n	800a9f2 <CoAP_AppendUintOptionToList+0xca>
	}

	if(val <= 0xff)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2bff      	cmp	r3, #255	; 0xff
 800a952:	d80b      	bhi.n	800a96c <CoAP_AppendUintOptionToList+0x44>
	{
		wBuf[0]=(uint8_t)val;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	b2db      	uxtb	r3, r3
 800a958:	753b      	strb	r3, [r7, #20]
		return CoAP_AppendOptionToList(pOptionsListBegin, OptNumber ,wBuf, 1);
 800a95a:	f107 0214 	add.w	r2, r7, #20
 800a95e:	8979      	ldrh	r1, [r7, #10]
 800a960:	2301      	movs	r3, #1
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 f84a 	bl	800a9fc <CoAP_AppendOptionToList>
 800a968:	4603      	mov	r3, r0
 800a96a:	e042      	b.n	800a9f2 <CoAP_AppendUintOptionToList+0xca>
	}

	if(val <= 0xffff)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a972:	d20f      	bcs.n	800a994 <CoAP_AppendUintOptionToList+0x6c>
	{
		wBuf[0]=(uint8_t)(val>>8u);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	753b      	strb	r3, [r7, #20]
		wBuf[1]=(uint8_t)(val & 0xffu);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	757b      	strb	r3, [r7, #21]
		return CoAP_AppendOptionToList(pOptionsListBegin, OptNumber ,wBuf, 2);
 800a982:	f107 0214 	add.w	r2, r7, #20
 800a986:	8979      	ldrh	r1, [r7, #10]
 800a988:	2302      	movs	r3, #2
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f836 	bl	800a9fc <CoAP_AppendOptionToList>
 800a990:	4603      	mov	r3, r0
 800a992:	e02e      	b.n	800a9f2 <CoAP_AppendUintOptionToList+0xca>
	}

	if(val <= 0xffffff)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a99a:	d213      	bcs.n	800a9c4 <CoAP_AppendUintOptionToList+0x9c>
	{
		wBuf[0]=(uint8_t)(val>>16u);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	753b      	strb	r3, [r7, #20]
		wBuf[1]=(uint8_t)((val>>8u) & 0xffu);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	757b      	strb	r3, [r7, #21]
		wBuf[2]=(uint8_t)(val & 0xffu);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	75bb      	strb	r3, [r7, #22]
		return CoAP_AppendOptionToList(pOptionsListBegin, OptNumber ,wBuf, 3);
 800a9b2:	f107 0214 	add.w	r2, r7, #20
 800a9b6:	8979      	ldrh	r1, [r7, #10]
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f81e 	bl	800a9fc <CoAP_AppendOptionToList>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	e016      	b.n	800a9f2 <CoAP_AppendUintOptionToList+0xca>
	}

	wBuf[0]=(uint8_t)(val>>24u);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	0e1b      	lsrs	r3, r3, #24
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	753b      	strb	r3, [r7, #20]
	wBuf[1]=(uint8_t)((val>>16u) & 0xffu);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	0c1b      	lsrs	r3, r3, #16
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	757b      	strb	r3, [r7, #21]
	wBuf[2]=(uint8_t)((val>>8u) & 0xffu);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	0a1b      	lsrs	r3, r3, #8
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	75bb      	strb	r3, [r7, #22]
	wBuf[3]=(uint8_t)(val & 0xffu);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	75fb      	strb	r3, [r7, #23]
	return CoAP_AppendOptionToList(pOptionsListBegin, OptNumber ,wBuf, 4);
 800a9e2:	f107 0214 	add.w	r2, r7, #20
 800a9e6:	8979      	ldrh	r1, [r7, #10]
 800a9e8:	2304      	movs	r3, #4
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 f806 	bl	800a9fc <CoAP_AppendOptionToList>
 800a9f0:	4603      	mov	r3, r0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <CoAP_AppendOptionToList>:
}

// this function adds a new option to linked list of options starting at pOptionsListBegin
// on demand the list gets reordered so that it's sorted ascending by option number (CoAP requirement)
// copies given buffer to option local buffer
CoAP_Result_t _rom CoAP_AppendOptionToList(CoAP_option_t** pOptionsListBegin, uint16_t OptNumber, const uint8_t* buf, uint16_t length) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	461a      	mov	r2, r3
 800aa08:	460b      	mov	r3, r1
 800aa0a:	817b      	strh	r3, [r7, #10]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	813b      	strh	r3, [r7, #8]
	if (*pOptionsListBegin == NULL) //List empty? create 1st option in list
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d107      	bne.n	800aa28 <CoAP_AppendOptionToList+0x2c>
	{
		return append_OptionToListEnd(pOptionsListBegin, OptNumber, buf, length);
 800aa18:	893b      	ldrh	r3, [r7, #8]
 800aa1a:	8979      	ldrh	r1, [r7, #10]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff ff0c 	bl	800a83c <append_OptionToListEnd>
 800aa24:	4603      	mov	r3, r0
 800aa26:	e079      	b.n	800ab1c <CoAP_AppendOptionToList+0x120>
	} else //try to insert the new element/option
	{
		CoAP_option_t* pOption = *pOptionsListBegin;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	61fb      	str	r3, [r7, #28]
		while (pOption != NULL && pOption->Number <= OptNumber)
 800aa2e:	e002      	b.n	800aa36 <CoAP_AppendOptionToList+0x3a>
			pOption = pOption->next;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	61fb      	str	r3, [r7, #28]
		while (pOption != NULL && pOption->Number <= OptNumber)
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <CoAP_AppendOptionToList+0x4a>
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	889b      	ldrh	r3, [r3, #4]
 800aa40:	897a      	ldrh	r2, [r7, #10]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d2f4      	bcs.n	800aa30 <CoAP_AppendOptionToList+0x34>

		//check reason of while end:

		//Case 1: pOption == NULL -> new number bigger than any present options numbers -> place it at end of list
		if (pOption == NULL) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d107      	bne.n	800aa5c <CoAP_AppendOptionToList+0x60>
			return append_OptionToListEnd(pOptionsListBegin, OptNumber, buf, length);
 800aa4c:	893b      	ldrh	r3, [r7, #8]
 800aa4e:	8979      	ldrh	r1, [r7, #10]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fef2 	bl	800a83c <append_OptionToListEnd>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	e05f      	b.n	800ab1c <CoAP_AppendOptionToList+0x120>
		}

		//Case 2: new option has smallest number and is therefore the new start of list
		else if (pOption == *pOptionsListBegin) {
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d129      	bne.n	800aaba <CoAP_AppendOptionToList+0xbe>
			*pOptionsListBegin = (CoAP_option_t*) CoAP.api.malloc(sizeof(CoAP_option_t) + length);
 800aa66:	4b2f      	ldr	r3, [pc, #188]	; (800ab24 <CoAP_AppendOptionToList+0x128>)
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	893a      	ldrh	r2, [r7, #8]
 800aa6c:	320c      	adds	r2, #12
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4798      	blx	r3
 800aa72:	4602      	mov	r2, r0
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]
			if (*pOptionsListBegin == NULL)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <CoAP_AppendOptionToList+0x88>
				return COAP_ERR_OUT_OF_MEMORY; //could not alloc enough mem
 800aa80:	230d      	movs	r3, #13
 800aa82:	e04b      	b.n	800ab1c <CoAP_AppendOptionToList+0x120>

			(*pOptionsListBegin)->next = pOption; //move former list start to 2nd pos
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	601a      	str	r2, [r3, #0]

			//fill data
			(*pOptionsListBegin)->Length = length;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	893a      	ldrh	r2, [r7, #8]
 800aa92:	80da      	strh	r2, [r3, #6]
			(*pOptionsListBegin)->Number = OptNumber;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	897a      	ldrh	r2, [r7, #10]
 800aa9a:	809a      	strh	r2, [r3, #4]
			(*pOptionsListBegin)->Value = ((uint8_t*) (*pOptionsListBegin)) + sizeof(CoAP_option_t);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	320c      	adds	r2, #12
 800aaa6:	609a      	str	r2, [r3, #8]
			coap_memcpy((void*) ((*pOptionsListBegin)->Value), (const void*) buf, length);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	893a      	ldrh	r2, [r7, #8]
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f011 fb17 	bl	801c0e6 <memcpy>
 800aab8:	e02f      	b.n	800ab1a <CoAP_AppendOptionToList+0x11e>
		//new option has to be placed anywhere in the list middle
		//pOption points to a option which Number is > than the OptNumber to be inserted
		//coap wants option numbers to be ascending - so insert the new option between pOption and its predecessor
		//The predecessor has to be found first...
		else {
			CoAP_option_t* pPrev_pOption = *pOptionsListBegin;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	61bb      	str	r3, [r7, #24]
			while (pPrev_pOption->next != pOption)
 800aac0:	e002      	b.n	800aac8 <CoAP_AppendOptionToList+0xcc>
				pPrev_pOption = pPrev_pOption->next; //search predecessor of pOption
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	61bb      	str	r3, [r7, #24]
			while (pPrev_pOption->next != pOption)
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d1f7      	bne.n	800aac2 <CoAP_AppendOptionToList+0xc6>

			CoAP_option_t* newOption = (CoAP_option_t*) CoAP.api.malloc(sizeof(CoAP_option_t) + length);
 800aad2:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <CoAP_AppendOptionToList+0x128>)
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	893a      	ldrh	r2, [r7, #8]
 800aad8:	320c      	adds	r2, #12
 800aada:	4610      	mov	r0, r2
 800aadc:	4798      	blx	r3
 800aade:	6178      	str	r0, [r7, #20]
			if (newOption == NULL)
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <CoAP_AppendOptionToList+0xee>
				return COAP_ERR_OUT_OF_MEMORY; //could not alloc enough mem
 800aae6:	230d      	movs	r3, #13
 800aae8:	e018      	b.n	800ab1c <CoAP_AppendOptionToList+0x120>

			pPrev_pOption->next = newOption; //insert new option after predecessor
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	601a      	str	r2, [r3, #0]
			newOption->next = pOption;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	601a      	str	r2, [r3, #0]

			//fill data
			newOption->Length = length;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	893a      	ldrh	r2, [r7, #8]
 800aafa:	80da      	strh	r2, [r3, #6]
			newOption->Number = OptNumber;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	897a      	ldrh	r2, [r7, #10]
 800ab00:	809a      	strh	r2, [r3, #4]
			newOption->Value = ((uint8_t*) newOption) + sizeof(CoAP_option_t);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f103 020c 	add.w	r2, r3, #12
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	609a      	str	r2, [r3, #8]
			coap_memcpy((void*) (newOption->Value), (const void*) buf, length);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	893a      	ldrh	r2, [r7, #8]
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f011 fae6 	bl	801c0e6 <memcpy>
		}
	}
	return COAP_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000790 	.word	0x20000790

0800ab28 <CoAP_FreeOptionList>:

CoAP_Result_t _rom CoAP_CopyOptionToList(CoAP_option_t** pOptionsListBegin, CoAP_option_t* OptToCopy) {
	return CoAP_AppendOptionToList(pOptionsListBegin, OptToCopy->Number, OptToCopy->Value, OptToCopy->Length);
}

CoAP_Result_t _rom CoAP_FreeOptionList(CoAP_option_t** pOptionsListBegin) {
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
	if (*pOptionsListBegin == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <CoAP_FreeOptionList+0x14>
		return COAP_OK; //any list to delete?
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e020      	b.n	800ab7e <CoAP_FreeOptionList+0x56>

	CoAP_option_t* pOption1;

	pOption1 = (*pOptionsListBegin)->next; //1st element after start
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]
	while (pOption1 != NULL) {
 800ab44:	e00e      	b.n	800ab64 <CoAP_FreeOptionList+0x3c>
		//this unlinks the 2nd element by seting 1st->next to 3rd element
		(*pOptionsListBegin)->next = (*pOptionsListBegin)->next->next;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6812      	ldr	r2, [r2, #0]
 800ab52:	601a      	str	r2, [r3, #0]
		CoAP.api.free((void*) pOption1); //free "old" 1st unlinked element
 800ab54:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <CoAP_FreeOptionList+0x60>)
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	4798      	blx	r3
		pOption1 = (*pOptionsListBegin)->next; // (new) 1st element after start
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
	while (pOption1 != NULL) {
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1ed      	bne.n	800ab46 <CoAP_FreeOptionList+0x1e>
	}

	CoAP.api.free((void*) (*pOptionsListBegin));
 800ab6a:	4b07      	ldr	r3, [pc, #28]	; (800ab88 <CoAP_FreeOptionList+0x60>)
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6812      	ldr	r2, [r2, #0]
 800ab72:	4610      	mov	r0, r2
 800ab74:	4798      	blx	r3
	*pOptionsListBegin = NULL;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]

	return COAP_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000790 	.word	0x20000790

0800ab8c <CoAP_CheckForUnknownCriticalOption>:
 *   message (Section 5.4.1).  Note that the implementation of critical
 *   options is, as the name "Option" implies, generally optional:
 *   unsupported critical options lead to an error response or summary
 *   rejection of the message.
 */
uint16_t _rom CoAP_CheckForUnknownCriticalOption(CoAP_option_t* pOptionsListBegin) {
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	//uses:
	//#define KNOWN_OPTIONS_COUNT (X)
	//extern uint16_t KNOWN_OPTIONS[KNOWN_OPTIONS_COUNT];
	if (pOptionsListBegin == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <CoAP_CheckForUnknownCriticalOption+0x12>
		return 0; //no options, nothing can be unknown
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e030      	b.n	800ac00 <CoAP_CheckForUnknownCriticalOption+0x74>

	CoAP_option_t* pOption = pOptionsListBegin;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	617b      	str	r3, [r7, #20]
	bool optKnown;
	do {
		optKnown = false;
 800aba2:	2300      	movs	r3, #0
 800aba4:	74fb      	strb	r3, [r7, #19]
		uint32_t j;
		for (j = 0; j < KNOWN_OPTIONS_COUNT; j++) {
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e00d      	b.n	800abc8 <CoAP_CheckForUnknownCriticalOption+0x3c>
			if (pOption->Number == KNOWN_OPTIONS[j]) {
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	889a      	ldrh	r2, [r3, #4]
 800abb0:	4916      	ldr	r1, [pc, #88]	; (800ac0c <CoAP_CheckForUnknownCriticalOption+0x80>)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d102      	bne.n	800abc2 <CoAP_CheckForUnknownCriticalOption+0x36>
				optKnown = true;
 800abbc:	2301      	movs	r3, #1
 800abbe:	74fb      	strb	r3, [r7, #19]
				continue;
 800abc0:	bf00      	nop
		for (j = 0; j < KNOWN_OPTIONS_COUNT; j++) {
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b06      	cmp	r3, #6
 800abcc:	d9ee      	bls.n	800abac <CoAP_CheckForUnknownCriticalOption+0x20>
			}
		}

		if (!optKnown) //check if critical
 800abce:	7cfb      	ldrb	r3, [r7, #19]
 800abd0:	f083 0301 	eor.w	r3, r3, #1
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d008      	beq.n	800abec <CoAP_CheckForUnknownCriticalOption+0x60>
		{
			if ((pOption->Number) & OPT_FLAG_CRITICAL) {
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	889b      	ldrh	r3, [r3, #4]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <CoAP_CheckForUnknownCriticalOption+0x60>
				return pOption->Number;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	889b      	ldrh	r3, [r3, #4]
 800abea:	e009      	b.n	800ac00 <CoAP_CheckForUnknownCriticalOption+0x74>
			}
		}

		if (pOption->next == NULL)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <CoAP_CheckForUnknownCriticalOption+0x6c>
			return 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	e003      	b.n	800ac00 <CoAP_CheckForUnknownCriticalOption+0x74>
		pOption = pOption->next;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	617b      	str	r3, [r7, #20]
	do {
 800abfe:	e7d0      	b.n	800aba2 <CoAP_CheckForUnknownCriticalOption+0x16>
	} while (1);

	return 0;
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20000030 	.word	0x20000030

0800ac10 <CoAP_OptionsAreEqual>:
		INFO("\n");
		pOptListBegin = pOptListBegin->next;
	}
}

bool _rom CoAP_OptionsAreEqual(CoAP_option_t* OptA, CoAP_option_t* OptB) {
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
	if (OptA == NULL && OptB == NULL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <CoAP_OptionsAreEqual+0x1a>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <CoAP_OptionsAreEqual+0x1a>
		return true;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e032      	b.n	800ac90 <CoAP_OptionsAreEqual+0x80>
	if (OptA == NULL || OptB == NULL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <CoAP_OptionsAreEqual+0x26>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <CoAP_OptionsAreEqual+0x2a>
		return false;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e02a      	b.n	800ac90 <CoAP_OptionsAreEqual+0x80>

	//check case 4 => both != NULL:
	if (OptA->Length != OptB->Length)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	88da      	ldrh	r2, [r3, #6]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	88db      	ldrh	r3, [r3, #6]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d001      	beq.n	800ac4a <CoAP_OptionsAreEqual+0x3a>
		return false;
 800ac46:	2300      	movs	r3, #0
 800ac48:	e022      	b.n	800ac90 <CoAP_OptionsAreEqual+0x80>
	if (OptA->Number != OptB->Number)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	889a      	ldrh	r2, [r3, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	889b      	ldrh	r3, [r3, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d001      	beq.n	800ac5a <CoAP_OptionsAreEqual+0x4a>
		return false;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e01a      	b.n	800ac90 <CoAP_OptionsAreEqual+0x80>
	int i;
	for (i = 0; i < OptA->Length; i++) {
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	e010      	b.n	800ac82 <CoAP_OptionsAreEqual+0x72>
		if (OptA->Value[i] != OptB->Value[i])
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4413      	add	r3, r2
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6899      	ldr	r1, [r3, #8]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	440b      	add	r3, r1
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d001      	beq.n	800ac7c <CoAP_OptionsAreEqual+0x6c>
			return false;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e009      	b.n	800ac90 <CoAP_OptionsAreEqual+0x80>
	for (i = 0; i < OptA->Length; i++) {
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	88db      	ldrh	r3, [r3, #6]
 800ac86:	461a      	mov	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	dbe8      	blt.n	800ac60 <CoAP_OptionsAreEqual+0x50>
	}
	return true;
 800ac8e:	2301      	movs	r3, #1
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr
	...

0800ac9c <WellKnown_GetHandler>:
	//CoAP_FindResourceByUri
	return COAP_OK;
}


CoAP_HandlerResult_t _rom WellKnown_GetHandler(CoAP_Message_t* pReq, CoAP_Message_t* pResp) {
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b08b      	sub	sp, #44	; 0x2c
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
//	static uint8_t wellknownStr[500];
//	uint8_t* pWr = wellknownStr;

	if (pReq->Code != REQ_GET) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	795b      	ldrb	r3, [r3, #5]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d014      	beq.n	800acd8 <WellKnown_GetHandler+0x3c>
		uint8_t errMsg[] = {"CoAP GET only!"};
 800acae:	4b5e      	ldr	r3, [pc, #376]	; (800ae28 <WellKnown_GetHandler+0x18c>)
 800acb0:	f107 0408 	add.w	r4, r7, #8
 800acb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800acb6:	c407      	stmia	r4!, {r0, r1, r2}
 800acb8:	8023      	strh	r3, [r4, #0]
 800acba:	3402      	adds	r4, #2
 800acbc:	0c1b      	lsrs	r3, r3, #16
 800acbe:	7023      	strb	r3, [r4, #0]
		pResp->Code = RESP_ERROR_BAD_REQUEST_4_00;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2280      	movs	r2, #128	; 0x80
 800acc4:	715a      	strb	r2, [r3, #5]
		CoAP_SetPayload(pResp, errMsg, (uint16_t) (sizeof(errMsg)-1), true);
 800acc6:	f107 0108 	add.w	r1, r7, #8
 800acca:	2301      	movs	r3, #1
 800accc:	220e      	movs	r2, #14
 800acce:	6838      	ldr	r0, [r7, #0]
 800acd0:	f000 fde0 	bl	800b894 <CoAP_SetPayload>
		return HANDLER_ERROR;
 800acd4:	2302      	movs	r3, #2
 800acd6:	e0a3      	b.n	800ae20 <WellKnown_GetHandler+0x184>
	}

	CoAP_Res_t* pList = pResList; //List of internal resources
 800acd8:	4b54      	ldr	r3, [pc, #336]	; (800ae2c <WellKnown_GetHandler+0x190>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t* pStr = (uint8_t*) CoAP.api.malloc((ResListMembers + 1) * 64); //first estimation of needed memory
 800acde:	4b54      	ldr	r3, [pc, #336]	; (800ae30 <WellKnown_GetHandler+0x194>)
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4a54      	ldr	r2, [pc, #336]	; (800ae34 <WellKnown_GetHandler+0x198>)
 800ace4:	6812      	ldr	r2, [r2, #0]
 800ace6:	3201      	adds	r2, #1
 800ace8:	0192      	lsls	r2, r2, #6
 800acea:	4610      	mov	r0, r2
 800acec:	4798      	blx	r3
 800acee:	6238      	str	r0, [r7, #32]
	uint8_t* pStrStart = pStr;
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	61bb      	str	r3, [r7, #24]

	if (pStr == NULL) {
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d108      	bne.n	800ad0c <WellKnown_GetHandler+0x70>
		INFO("- WellKnown_GetHandler(): Ouf memory error!\r\n");
 800acfa:	494f      	ldr	r1, [pc, #316]	; (800ae38 <WellKnown_GetHandler+0x19c>)
 800acfc:	484f      	ldr	r0, [pc, #316]	; (800ae3c <WellKnown_GetHandler+0x1a0>)
 800acfe:	f011 f831 	bl	801bd64 <siprintf>
 800ad02:	484e      	ldr	r0, [pc, #312]	; (800ae3c <WellKnown_GetHandler+0x1a0>)
 800ad04:	f7fd f992 	bl	800802c <hal_debug_puts>
		return HANDLER_ERROR;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e089      	b.n	800ae20 <WellKnown_GetHandler+0x184>
	}
	memset(pStr, 0, (ResListMembers + 1) * 64);
 800ad0c:	4b49      	ldr	r3, [pc, #292]	; (800ae34 <WellKnown_GetHandler+0x198>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	019b      	lsls	r3, r3, #6
 800ad14:	461a      	mov	r2, r3
 800ad16:	2100      	movs	r1, #0
 800ad18:	6a38      	ldr	r0, [r7, #32]
 800ad1a:	f011 f945 	bl	801bfa8 <memset>

	INFO("- WellKnown_GetHandler(): res cnt:%u temp alloc:%u\r\n", (unsigned int) ResListMembers, (unsigned int) (ResListMembers + 2) * 64);
 800ad1e:	4b45      	ldr	r3, [pc, #276]	; (800ae34 <WellKnown_GetHandler+0x198>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4b44      	ldr	r3, [pc, #272]	; (800ae34 <WellKnown_GetHandler+0x198>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3302      	adds	r3, #2
 800ad28:	019b      	lsls	r3, r3, #6
 800ad2a:	4945      	ldr	r1, [pc, #276]	; (800ae40 <WellKnown_GetHandler+0x1a4>)
 800ad2c:	4843      	ldr	r0, [pc, #268]	; (800ae3c <WellKnown_GetHandler+0x1a0>)
 800ad2e:	f011 f819 	bl	801bd64 <siprintf>
 800ad32:	4842      	ldr	r0, [pc, #264]	; (800ae3c <WellKnown_GetHandler+0x1a0>)
 800ad34:	f7fd f97a 	bl	800802c <hal_debug_puts>

	//TODO: Implement non ram version, e.g. write to memory to eeprom
	while (pList != NULL) {
 800ad38:	e05b      	b.n	800adf2 <WellKnown_GetHandler+0x156>
		CoAP_option_t* pUriOpt = pList->pUri;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	61fb      	str	r3, [r7, #28]

		*pStr++ = '<';
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	623a      	str	r2, [r7, #32]
 800ad46:	223c      	movs	r2, #60	; 0x3c
 800ad48:	701a      	strb	r2, [r3, #0]
		while (pUriOpt != NULL) {
 800ad4a:	e015      	b.n	800ad78 <WellKnown_GetHandler+0xdc>
			*pStr++ = '/';
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	623a      	str	r2, [r7, #32]
 800ad52:	222f      	movs	r2, #47	; 0x2f
 800ad54:	701a      	strb	r2, [r3, #0]
			coap_memcpy(pStr, pUriOpt->Value, pUriOpt->Length);
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	6899      	ldr	r1, [r3, #8]
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	88db      	ldrh	r3, [r3, #6]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6a38      	ldr	r0, [r7, #32]
 800ad62:	f011 f9c0 	bl	801c0e6 <memcpy>
			pStr += pUriOpt->Length;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	88db      	ldrh	r3, [r3, #6]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	4413      	add	r3, r2
 800ad70:	623b      	str	r3, [r7, #32]
			pUriOpt = pUriOpt->next;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	61fb      	str	r3, [r7, #28]
		while (pUriOpt != NULL) {
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e6      	bne.n	800ad4c <WellKnown_GetHandler+0xb0>
		}
		*pStr++ = '>';
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	623a      	str	r2, [r7, #32]
 800ad84:	223e      	movs	r2, #62	; 0x3e
 800ad86:	701a      	strb	r2, [r3, #0]
		if (pList->Options.Cf != COAP_CF_LINK_FORMAT) {
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	899b      	ldrh	r3, [r3, #12]
 800ad8c:	2b28      	cmp	r3, #40	; 0x28
 800ad8e:	d028      	beq.n	800ade2 <WellKnown_GetHandler+0x146>
			if( pList->pDescription != NULL ) {
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <WellKnown_GetHandler+0x114>
				pStr += coap_sprintf((char *) pStr, ";title=\"%s\"", pList->pDescription);
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4929      	ldr	r1, [pc, #164]	; (800ae44 <WellKnown_GetHandler+0x1a8>)
 800ada0:	6a38      	ldr	r0, [r7, #32]
 800ada2:	f010 ffdf 	bl	801bd64 <siprintf>
 800ada6:	4603      	mov	r3, r0
 800ada8:	461a      	mov	r2, r3
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	4413      	add	r3, r2
 800adae:	623b      	str	r3, [r7, #32]
			}
			
			pStr += coap_sprintf((char *) pStr, ";ct=%d", pList->Options.Cf);
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	461a      	mov	r2, r3
 800adb6:	4924      	ldr	r1, [pc, #144]	; (800ae48 <WellKnown_GetHandler+0x1ac>)
 800adb8:	6a38      	ldr	r0, [r7, #32]
 800adba:	f010 ffd3 	bl	801bd64 <siprintf>
 800adbe:	4603      	mov	r3, r0
 800adc0:	461a      	mov	r2, r3
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	4413      	add	r3, r2
 800adc6:	623b      	str	r3, [r7, #32]
			
			if (pList->Notifier != NULL) {
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d008      	beq.n	800ade2 <WellKnown_GetHandler+0x146>
				pStr += coap_sprintf((char*) pStr, ";obs");
 800add0:	491e      	ldr	r1, [pc, #120]	; (800ae4c <WellKnown_GetHandler+0x1b0>)
 800add2:	6a38      	ldr	r0, [r7, #32]
 800add4:	f010 ffc6 	bl	801bd64 <siprintf>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	4413      	add	r3, r2
 800ade0:	623b      	str	r3, [r7, #32]
			}
		}
		*pStr++ = ',';
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	623a      	str	r2, [r7, #32]
 800ade8:	222c      	movs	r2, #44	; 0x2c
 800adea:	701a      	strb	r2, [r3, #0]

		pList = pList->next;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
	while (pList != NULL) {
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1a0      	bne.n	800ad3a <WellKnown_GetHandler+0x9e>

		//TODO: implement growing of buf/overwrite check
	}

	CoAP_SetPayload(pResp, pStrStart, (uint16_t) coap_strlen((char*) pStrStart), true);
 800adf8:	69b8      	ldr	r0, [r7, #24]
 800adfa:	f7f5 fa11 	bl	8000220 <strlen>
 800adfe:	4603      	mov	r3, r0
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	461a      	mov	r2, r3
 800ae04:	2301      	movs	r3, #1
 800ae06:	69b9      	ldr	r1, [r7, #24]
 800ae08:	6838      	ldr	r0, [r7, #0]
 800ae0a:	f000 fd43 	bl	800b894 <CoAP_SetPayload>
	CoAP.api.free(pStrStart);
 800ae0e:	4b08      	ldr	r3, [pc, #32]	; (800ae30 <WellKnown_GetHandler+0x194>)
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	69b8      	ldr	r0, [r7, #24]
 800ae14:	4798      	blx	r3

	CoAP_AddCfOptionToMsg(pResp, COAP_CF_LINK_FORMAT);
 800ae16:	2128      	movs	r1, #40	; 0x28
 800ae18:	6838      	ldr	r0, [r7, #0]
 800ae1a:	f000 fda9 	bl	800b970 <CoAP_AddCfOptionToMsg>

	return HANDLER_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	372c      	adds	r7, #44	; 0x2c
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd90      	pop	{r4, r7, pc}
 800ae28:	0801e6bc 	.word	0x0801e6bc
 800ae2c:	200007d0 	.word	0x200007d0
 800ae30:	20000790 	.word	0x20000790
 800ae34:	200007d4 	.word	0x200007d4
 800ae38:	0801e638 	.word	0x0801e638
 800ae3c:	200007d8 	.word	0x200007d8
 800ae40:	0801e668 	.word	0x0801e668
 800ae44:	0801e6a0 	.word	0x0801e6a0
 800ae48:	0801e6ac 	.word	0x0801e6ac
 800ae4c:	0801e6b4 	.word	0x0801e6b4

0800ae50 <CoAP_InitResources>:

void _rom CoAP_InitResources() {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af02      	add	r7, sp, #8
	CoAP_ResOpts_t Options = {.Cf = COAP_CF_LINK_FORMAT, .AllowedMethods = RES_OPT_GET};
 800ae56:	463b      	mov	r3, r7
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	809a      	strh	r2, [r3, #4]
 800ae5e:	2328      	movs	r3, #40	; 0x28
 800ae60:	803b      	strh	r3, [r7, #0]
 800ae62:	2302      	movs	r3, #2
 800ae64:	807b      	strh	r3, [r7, #2]
	CoAP_CreateResource("/.well-known/core", "\0", Options, WellKnown_GetHandler, NULL);
 800ae66:	2300      	movs	r3, #0
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <CoAP_InitResources+0x34>)
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	463b      	mov	r3, r7
 800ae70:	cb0c      	ldmia	r3, {r2, r3}
 800ae72:	4905      	ldr	r1, [pc, #20]	; (800ae88 <CoAP_InitResources+0x38>)
 800ae74:	4805      	ldr	r0, [pc, #20]	; (800ae8c <CoAP_InitResources+0x3c>)
 800ae76:	f000 f861 	bl	800af3c <CoAP_CreateResource>
}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	0800ac9d 	.word	0x0800ac9d
 800ae88:	0801e6cc 	.word	0x0801e6cc
 800ae8c:	0801e6d0 	.word	0x0801e6d0

0800ae90 <CoAP_AppendResourceToList>:

static CoAP_Result_t _rom CoAP_AppendResourceToList(CoAP_Res_t** pListStart, CoAP_Res_t* pResToAdd) {
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
	if (pResToAdd == NULL) return COAP_ERR_ARGUMENT;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <CoAP_AppendResourceToList+0x14>
 800aea0:	230a      	movs	r3, #10
 800aea2:	e020      	b.n	800aee6 <CoAP_AppendResourceToList+0x56>

	if (*pListStart == NULL) //List empty? create new first element
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d107      	bne.n	800aebc <CoAP_AppendResourceToList+0x2c>
	{
		*pListStart = pResToAdd;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	601a      	str	r2, [r3, #0]
		(*pListStart)->next = NULL;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	e013      	b.n	800aee4 <CoAP_AppendResourceToList+0x54>
	} else //append new element at end
	{
		CoAP_Res_t* pRes = *pListStart;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
		while (pRes->next != NULL) pRes = pRes->next;
 800aec2:	e002      	b.n	800aeca <CoAP_AppendResourceToList+0x3a>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1f8      	bne.n	800aec4 <CoAP_AppendResourceToList+0x34>

		pRes->next = pResToAdd;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	601a      	str	r2, [r3, #0]
		pRes = pRes->next;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	60fb      	str	r3, [r7, #12]
		pRes->next = NULL;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
	}
	return COAP_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr

0800aef0 <CoAP_FindResourceByUri>:
//    }
//  }
//  return COAP_OK;
//}

CoAP_Res_t* _rom CoAP_FindResourceByUri(CoAP_Res_t* pResListToSearchIn, CoAP_option_t* pOptionsToMatch) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
	CoAP_Res_t* pList = pResList;
 800aefa:	4b0f      	ldr	r3, [pc, #60]	; (800af38 <CoAP_FindResourceByUri+0x48>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	60fb      	str	r3, [r7, #12]
	if (pResListToSearchIn != NULL) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d010      	beq.n	800af28 <CoAP_FindResourceByUri+0x38>
		pList = pResListToSearchIn;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	60fb      	str	r3, [r7, #12]
	}

	for (; pList != NULL; pList = pList->next) {
 800af0a:	e00d      	b.n	800af28 <CoAP_FindResourceByUri+0x38>
		if (CoAP_UriOptionsAreEqual(pList->pUri, pOptionsToMatch)) {
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 ff81 	bl	800be1a <CoAP_UriOptionsAreEqual>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <CoAP_FindResourceByUri+0x32>
			return pList;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	e006      	b.n	800af30 <CoAP_FindResourceByUri+0x40>
	for (; pList != NULL; pList = pList->next) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1ee      	bne.n	800af0c <CoAP_FindResourceByUri+0x1c>
		}
	}

	return NULL;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200007d0 	.word	0x200007d0

0800af3c <CoAP_CreateResource>:

CoAP_Res_t* _rom CoAP_CreateResource(char* Uri, char* Descr, CoAP_ResOpts_t Options, CoAP_ResourceHandler_fPtr_t pHandlerFkt, CoAP_ResourceNotifier_fPtr_t pNotifierFkt) {
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b08b      	sub	sp, #44	; 0x2c
 800af40:	af04      	add	r7, sp, #16
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	4639      	mov	r1, r7
 800af48:	e881 000c 	stmia.w	r1, {r2, r3}
	INFO("Creating resource %s (%s) AllowedMethods: %x%x%x%x\r\n", Uri, Descr == NULL ? "" : Descr,
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <CoAP_CreateResource+0x1a>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	e000      	b.n	800af58 <CoAP_CreateResource+0x1c>
 800af56:	4b4d      	ldr	r3, [pc, #308]	; (800b08c <CoAP_CreateResource+0x150>)
 800af58:	887a      	ldrh	r2, [r7, #2]
 800af5a:	f002 0202 	and.w	r2, r2, #2
 800af5e:	2a00      	cmp	r2, #0
 800af60:	bf14      	ite	ne
 800af62:	2201      	movne	r2, #1
 800af64:	2200      	moveq	r2, #0
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	4611      	mov	r1, r2
 800af6a:	887a      	ldrh	r2, [r7, #2]
 800af6c:	f002 0204 	and.w	r2, r2, #4
 800af70:	2a00      	cmp	r2, #0
 800af72:	bf14      	ite	ne
 800af74:	2201      	movne	r2, #1
 800af76:	2200      	moveq	r2, #0
 800af78:	b2d2      	uxtb	r2, r2
 800af7a:	4610      	mov	r0, r2
 800af7c:	887a      	ldrh	r2, [r7, #2]
 800af7e:	f002 0208 	and.w	r2, r2, #8
 800af82:	2a00      	cmp	r2, #0
 800af84:	bf14      	ite	ne
 800af86:	2201      	movne	r2, #1
 800af88:	2200      	moveq	r2, #0
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	4614      	mov	r4, r2
 800af8e:	887a      	ldrh	r2, [r7, #2]
 800af90:	f002 0210 	and.w	r2, r2, #16
 800af94:	2a00      	cmp	r2, #0
 800af96:	bf14      	ite	ne
 800af98:	2201      	movne	r2, #1
 800af9a:	2200      	moveq	r2, #0
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	9203      	str	r2, [sp, #12]
 800afa0:	9402      	str	r4, [sp, #8]
 800afa2:	9001      	str	r0, [sp, #4]
 800afa4:	9100      	str	r1, [sp, #0]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4939      	ldr	r1, [pc, #228]	; (800b090 <CoAP_CreateResource+0x154>)
 800afaa:	483a      	ldr	r0, [pc, #232]	; (800b094 <CoAP_CreateResource+0x158>)
 800afac:	f010 feda 	bl	801bd64 <siprintf>
 800afb0:	4838      	ldr	r0, [pc, #224]	; (800b094 <CoAP_CreateResource+0x158>)
 800afb2:	f7fd f83b 	bl	800802c <hal_debug_puts>
		 !!(Options.AllowedMethods & RES_OPT_GET),
		 !!(Options.AllowedMethods & RES_OPT_POST),
		 !!(Options.AllowedMethods & RES_OPT_PUT),
		 !!(Options.AllowedMethods & RES_OPT_DELETE));

	if (Options.AllowedMethods == 0) {
 800afb6:	887b      	ldrh	r3, [r7, #2]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10f      	bne.n	800afdc <CoAP_CreateResource+0xa0>
		ERROR("Can not create Resource that does not allow any method!");
 800afbc:	4936      	ldr	r1, [pc, #216]	; (800b098 <CoAP_CreateResource+0x15c>)
 800afbe:	4835      	ldr	r0, [pc, #212]	; (800b094 <CoAP_CreateResource+0x158>)
 800afc0:	f010 fed0 	bl	801bd64 <siprintf>
 800afc4:	4833      	ldr	r0, [pc, #204]	; (800b094 <CoAP_CreateResource+0x158>)
 800afc6:	f7fd f831 	bl	800802c <hal_debug_puts>
 800afca:	4934      	ldr	r1, [pc, #208]	; (800b09c <CoAP_CreateResource+0x160>)
 800afcc:	4831      	ldr	r0, [pc, #196]	; (800b094 <CoAP_CreateResource+0x158>)
 800afce:	f010 fec9 	bl	801bd64 <siprintf>
 800afd2:	4830      	ldr	r0, [pc, #192]	; (800b094 <CoAP_CreateResource+0x158>)
 800afd4:	f7fd f82a 	bl	800802c <hal_debug_puts>
		return NULL;
 800afd8:	2300      	movs	r3, #0
 800afda:	e052      	b.n	800b082 <CoAP_CreateResource+0x146>
	}

	CoAP_Res_t* pRes = (CoAP_Res_t*) (CoAP.api.malloc(sizeof(CoAP_Res_t)));
 800afdc:	4b30      	ldr	r3, [pc, #192]	; (800b0a0 <CoAP_CreateResource+0x164>)
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	2024      	movs	r0, #36	; 0x24
 800afe2:	4798      	blx	r3
 800afe4:	6178      	str	r0, [r7, #20]
	if (pRes == NULL) {
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <CoAP_CreateResource+0xb4>
		return NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	e048      	b.n	800b082 <CoAP_CreateResource+0x146>
	}
	memset(pRes, 0, sizeof(CoAP_Res_t));
 800aff0:	2224      	movs	r2, #36	; 0x24
 800aff2:	2100      	movs	r1, #0
 800aff4:	6978      	ldr	r0, [r7, #20]
 800aff6:	f010 ffd7 	bl	801bfa8 <memset>

	pRes->pListObservers = NULL;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2200      	movs	r2, #0
 800affe:	619a      	str	r2, [r3, #24]
	pRes->pUri = NULL;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2200      	movs	r2, #0
 800b004:	615a      	str	r2, [r3, #20]
	pRes->next = NULL;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]

	pRes->Options = Options;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	330c      	adds	r3, #12
 800b010:	463a      	mov	r2, r7
 800b012:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b016:	6018      	str	r0, [r3, #0]
 800b018:	3304      	adds	r3, #4
 800b01a:	8019      	strh	r1, [r3, #0]

	if (Descr != NULL && *Descr != '\0') {
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d016      	beq.n	800b050 <CoAP_CreateResource+0x114>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d012      	beq.n	800b050 <CoAP_CreateResource+0x114>
		pRes->pDescription = (char*) (CoAP.api.malloc(sizeof(char) * (coap_strlen(Descr) + 1)));
 800b02a:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <CoAP_CreateResource+0x164>)
 800b02c:	68dc      	ldr	r4, [r3, #12]
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f7f5 f8f6 	bl	8000220 <strlen>
 800b034:	4603      	mov	r3, r0
 800b036:	3301      	adds	r3, #1
 800b038:	4618      	mov	r0, r3
 800b03a:	47a0      	blx	r4
 800b03c:	4602      	mov	r2, r0
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	605a      	str	r2, [r3, #4]
		coap_strcpy(pRes->pDescription, Descr);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	4618      	mov	r0, r3
 800b04a:	f011 f844 	bl	801c0d6 <strcpy>
 800b04e:	e002      	b.n	800b056 <CoAP_CreateResource+0x11a>
	} else {
		pRes->pDescription = NULL;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	605a      	str	r2, [r3, #4]
	}

	CoAP_AppendUriOptionsFromString(&(pRes->pUri), Uri);
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	3314      	adds	r3, #20
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fe77 	bl	800bd50 <CoAP_AppendUriOptionsFromString>

	pRes->Handler = pHandlerFkt;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b066:	61da      	str	r2, [r3, #28]
	pRes->Notifier = pNotifierFkt;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b06c:	621a      	str	r2, [r3, #32]

	CoAP_AppendResourceToList(&pResList, pRes);
 800b06e:	6979      	ldr	r1, [r7, #20]
 800b070:	480c      	ldr	r0, [pc, #48]	; (800b0a4 <CoAP_CreateResource+0x168>)
 800b072:	f7ff ff0d 	bl	800ae90 <CoAP_AppendResourceToList>

	ResListMembers++;
 800b076:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <CoAP_CreateResource+0x16c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4a0a      	ldr	r2, [pc, #40]	; (800b0a8 <CoAP_CreateResource+0x16c>)
 800b07e:	6013      	str	r3, [r2, #0]

	return pRes;
 800b080:	697b      	ldr	r3, [r7, #20]
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	bd90      	pop	{r4, r7, pc}
 800b08a:	bf00      	nop
 800b08c:	0801e6e4 	.word	0x0801e6e4
 800b090:	0801e6e8 	.word	0x0801e6e8
 800b094:	200007d8 	.word	0x200007d8
 800b098:	0801e720 	.word	0x0801e720
 800b09c:	0801e72c 	.word	0x0801e72c
 800b0a0:	20000790 	.word	0x20000790
 800b0a4:	200007d0 	.word	0x200007d0
 800b0a8:	200007d4 	.word	0x200007d4

0800b0ac <CoAP_RemoveObserverFromResource>:
		pRes = pRes->next;
	}
}


CoAP_Result_t _rom CoAP_RemoveObserverFromResource(CoAP_Observer_t** pObserverList, SocketHandle_t socketHandle, NetEp_t* pRemoteEP, CoAP_Token_t token) {
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b088      	sub	sp, #32
 800b0b2:	af02      	add	r7, sp, #8
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
	CoAP_Observer_t* pObserver = *pObserverList;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	617b      	str	r3, [r7, #20]

	while (pObserver != NULL) { //found right existing observation -> delete it
 800b0c2:	e030      	b.n	800b126 <CoAP_RemoveObserverFromResource+0x7a>

		if (CoAP_TokenEqual(token, pObserver->Token) && socketHandle == pObserver->socketHandle && EpAreEqual(pRemoteEP, &(pObserver->Ep))) {
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f8d3 201d 	ldr.w	r2, [r3, #29]
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	466a      	mov	r2, sp
 800b0ce:	3321      	adds	r3, #33	; 0x21
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	6010      	str	r0, [r2, #0]
 800b0d4:	791b      	ldrb	r3, [r3, #4]
 800b0d6:	7113      	strb	r3, [r2, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b0de:	ca07      	ldmia	r2, {r0, r1, r2}
 800b0e0:	f7fe f8fc 	bl	80092dc <CoAP_TokenEqual>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01a      	beq.n	800b120 <CoAP_RemoveObserverFromResource+0x74>
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d115      	bne.n	800b120 <CoAP_RemoveObserverFromResource+0x74>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fa29 	bl	800b550 <EpAreEqual>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <CoAP_RemoveObserverFromResource+0x74>

			INFO("- (!) Unlinking observer from resource\r\n");
 800b104:	490d      	ldr	r1, [pc, #52]	; (800b13c <CoAP_RemoveObserverFromResource+0x90>)
 800b106:	480e      	ldr	r0, [pc, #56]	; (800b140 <CoAP_RemoveObserverFromResource+0x94>)
 800b108:	f010 fe2c 	bl	801bd64 <siprintf>
 800b10c:	480c      	ldr	r0, [pc, #48]	; (800b140 <CoAP_RemoveObserverFromResource+0x94>)
 800b10e:	f7fc ff8d 	bl	800802c <hal_debug_puts>
			CoAP_UnlinkObserverFromList(pObserverList, pObserver, true);
 800b112:	2201      	movs	r2, #1
 800b114:	6979      	ldr	r1, [r7, #20]
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 fd90 	bl	800bc3c <CoAP_UnlinkObserverFromList>
			return COAP_REMOVED;
 800b11c:	2317      	movs	r3, #23
 800b11e:	e006      	b.n	800b12e <CoAP_RemoveObserverFromResource+0x82>

		}
		pObserver = pObserver->next;
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	617b      	str	r3, [r7, #20]
	while (pObserver != NULL) { //found right existing observation -> delete it
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1cb      	bne.n	800b0c4 <CoAP_RemoveObserverFromResource+0x18>
	}
	return COAP_ERR_NOT_FOUND;
 800b12c:	230f      	movs	r3, #15
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b138:	b002      	add	sp, #8
 800b13a:	4770      	bx	lr
 800b13c:	0801e7a0 	.word	0x0801e7a0
 800b140:	200007d8 	.word	0x200007d8

0800b144 <ResultToString>:
	default:
		return "UNKNOWN_STATE";
	}
}

char* ResultToString(CoAP_Result_t res) {
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4603      	mov	r3, r0
 800b14c:	71fb      	strb	r3, [r7, #7]
	switch (res) {
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	2b1e      	cmp	r3, #30
 800b152:	d87f      	bhi.n	800b254 <ResultToString+0x110>
 800b154:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <ResultToString+0x18>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b1d9 	.word	0x0800b1d9
 800b160:	0800b1dd 	.word	0x0800b1dd
 800b164:	0800b1e1 	.word	0x0800b1e1
 800b168:	0800b1e5 	.word	0x0800b1e5
 800b16c:	0800b1e9 	.word	0x0800b1e9
 800b170:	0800b1ed 	.word	0x0800b1ed
 800b174:	0800b1f1 	.word	0x0800b1f1
 800b178:	0800b1f5 	.word	0x0800b1f5
 800b17c:	0800b1f9 	.word	0x0800b1f9
 800b180:	0800b1fd 	.word	0x0800b1fd
 800b184:	0800b201 	.word	0x0800b201
 800b188:	0800b205 	.word	0x0800b205
 800b18c:	0800b209 	.word	0x0800b209
 800b190:	0800b20d 	.word	0x0800b20d
 800b194:	0800b211 	.word	0x0800b211
 800b198:	0800b215 	.word	0x0800b215
 800b19c:	0800b219 	.word	0x0800b219
 800b1a0:	0800b21d 	.word	0x0800b21d
 800b1a4:	0800b221 	.word	0x0800b221
 800b1a8:	0800b225 	.word	0x0800b225
 800b1ac:	0800b229 	.word	0x0800b229
 800b1b0:	0800b22d 	.word	0x0800b22d
 800b1b4:	0800b231 	.word	0x0800b231
 800b1b8:	0800b235 	.word	0x0800b235
 800b1bc:	0800b239 	.word	0x0800b239
 800b1c0:	0800b23d 	.word	0x0800b23d
 800b1c4:	0800b241 	.word	0x0800b241
 800b1c8:	0800b245 	.word	0x0800b245
 800b1cc:	0800b249 	.word	0x0800b249
 800b1d0:	0800b24d 	.word	0x0800b24d
 800b1d4:	0800b251 	.word	0x0800b251
	case COAP_OK:
		return "COAP_OK";
 800b1d8:	4b21      	ldr	r3, [pc, #132]	; (800b260 <ResultToString+0x11c>)
 800b1da:	e03c      	b.n	800b256 <ResultToString+0x112>
	case COAP_NOT_FOUND:
		return "COAP_NOT_FOUND";
 800b1dc:	4b21      	ldr	r3, [pc, #132]	; (800b264 <ResultToString+0x120>)
 800b1de:	e03a      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_DATAGRAM_TOO_SHORT:
		return "COAP_PARSE_DATAGRAM_TOO_SHORT";
 800b1e0:	4b21      	ldr	r3, [pc, #132]	; (800b268 <ResultToString+0x124>)
 800b1e2:	e038      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_UNKOWN_COAP_VERSION:
		return "COAP_PARSE_UNKOWN_COAP_VERSION";
 800b1e4:	4b21      	ldr	r3, [pc, #132]	; (800b26c <ResultToString+0x128>)
 800b1e6:	e036      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_MESSAGE_FORMAT_ERROR:
		return "COAP_PARSE_MESSAGE_FORMAT_ERROR";
 800b1e8:	4b21      	ldr	r3, [pc, #132]	; (800b270 <ResultToString+0x12c>)
 800b1ea:	e034      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_TOO_MANY_OPTIONS:
		return "COAP_PARSE_TOO_MANY_OPTIONS";
 800b1ec:	4b21      	ldr	r3, [pc, #132]	; (800b274 <ResultToString+0x130>)
 800b1ee:	e032      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_TOO_LONG_OPTION:
		return "COAP_PARSE_TOO_LONG_OPTION";
 800b1f0:	4b21      	ldr	r3, [pc, #132]	; (800b278 <ResultToString+0x134>)
 800b1f2:	e030      	b.n	800b256 <ResultToString+0x112>
	case COAP_PARSE_TOO_MUCH_PAYLOAD:
		return "COAP_PARSE_TOO_MUCH_PAYLOAD";
 800b1f4:	4b21      	ldr	r3, [pc, #132]	; (800b27c <ResultToString+0x138>)
 800b1f6:	e02e      	b.n	800b256 <ResultToString+0x112>
	case COAP_PACK_TOO_MANY_OPTIONS:
		return "COAP_PACK_TOO_MANY_OPTIONS";
 800b1f8:	4b21      	ldr	r3, [pc, #132]	; (800b280 <ResultToString+0x13c>)
 800b1fa:	e02c      	b.n	800b256 <ResultToString+0x112>
	case COAP_PACK_TOO_LONG_OPTION:
		return "COAP_PACK_TOO_LONG_OPTION";
 800b1fc:	4b21      	ldr	r3, [pc, #132]	; (800b284 <ResultToString+0x140>)
 800b1fe:	e02a      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_ARGUMENT:
		return "COAP_ERR_ARGUMENT";
 800b200:	4b21      	ldr	r3, [pc, #132]	; (800b288 <ResultToString+0x144>)
 800b202:	e028      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_SOCKET:
		return "COAP_ERR_SOCKET";
 800b204:	4b21      	ldr	r3, [pc, #132]	; (800b28c <ResultToString+0x148>)
 800b206:	e026      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_NETWORK:
		return "COAP_ERR_NETWORK";
 800b208:	4b21      	ldr	r3, [pc, #132]	; (800b290 <ResultToString+0x14c>)
 800b20a:	e024      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_OUT_OF_MEMORY:
		return "COAP_ERR_OUT_OF_MEMORY";
 800b20c:	4b21      	ldr	r3, [pc, #132]	; (800b294 <ResultToString+0x150>)
 800b20e:	e022      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_TOO_LONG_URI_PATH:
		return "COAP_ERR_TOO_LONG_URI_PATH";
 800b210:	4b21      	ldr	r3, [pc, #132]	; (800b298 <ResultToString+0x154>)
 800b212:	e020      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_NOT_FOUND:
		return "COAP_ERR_NOT_FOUND";
 800b214:	4b21      	ldr	r3, [pc, #132]	; (800b29c <ResultToString+0x158>)
 800b216:	e01e      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_WRONG_OPTION:
		return "COAP_ERR_WRONG_OPTION";
 800b218:	4b21      	ldr	r3, [pc, #132]	; (800b2a0 <ResultToString+0x15c>)
 800b21a:	e01c      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_EXISTING:
		return "COAP_ERR_EXISTING";
 800b21c:	4b21      	ldr	r3, [pc, #132]	; (800b2a4 <ResultToString+0x160>)
 800b21e:	e01a      	b.n	800b256 <ResultToString+0x112>
	case COAP_TRUE:
		return "COAP_TRUE";
 800b220:	4b21      	ldr	r3, [pc, #132]	; (800b2a8 <ResultToString+0x164>)
 800b222:	e018      	b.n	800b256 <ResultToString+0x112>
	case COAP_FALSE:
		return "COAP_FALSE";
 800b224:	4b21      	ldr	r3, [pc, #132]	; (800b2ac <ResultToString+0x168>)
 800b226:	e016      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_WRONG_REQUEST:
		return "COAP_ERR_WRONG_REQUEST";
 800b228:	4b21      	ldr	r3, [pc, #132]	; (800b2b0 <ResultToString+0x16c>)
 800b22a:	e014      	b.n	800b256 <ResultToString+0x112>
	case COAP_BAD_OPTION_VAL:
		return "COAP_BAD_OPTION_VAL";
 800b22c:	4b21      	ldr	r3, [pc, #132]	; (800b2b4 <ResultToString+0x170>)
 800b22e:	e012      	b.n	800b256 <ResultToString+0x112>
	case COAP_BAD_OPTION_LEN:
		return "COAP_BAD_OPTION_LEN";
 800b230:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <ResultToString+0x174>)
 800b232:	e010      	b.n	800b256 <ResultToString+0x112>
	case COAP_REMOVED:
		return "COAP_REMOVED";
 800b234:	4b21      	ldr	r3, [pc, #132]	; (800b2bc <ResultToString+0x178>)
 800b236:	e00e      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_UNKNOWN:
		return "COAP_ERR_UNKNOWN";
 800b238:	4b21      	ldr	r3, [pc, #132]	; (800b2c0 <ResultToString+0x17c>)
 800b23a:	e00c      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_REMOTE_RST:
		return "COAP_ERR_REMOTE_RST";
 800b23c:	4b21      	ldr	r3, [pc, #132]	; (800b2c4 <ResultToString+0x180>)
 800b23e:	e00a      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_OUT_OF_ATTEMPTS:
		return "COAP_ERR_OUT_OF_ATTEMPTS";
 800b240:	4b21      	ldr	r3, [pc, #132]	; (800b2c8 <ResultToString+0x184>)
 800b242:	e008      	b.n	800b256 <ResultToString+0x112>
	case COAP_ERR_TIMEOUT:
		return "COAP_ERR_TIMEOUT";
 800b244:	4b21      	ldr	r3, [pc, #132]	; (800b2cc <ResultToString+0x188>)
 800b246:	e006      	b.n	800b256 <ResultToString+0x112>
	case COAP_WAITING:
		return "COAP_WAITING";
 800b248:	4b21      	ldr	r3, [pc, #132]	; (800b2d0 <ResultToString+0x18c>)
 800b24a:	e004      	b.n	800b256 <ResultToString+0x112>
	case COAP_HOLDING_BACK:
		return "COAP_HOLDING_BACK";
 800b24c:	4b21      	ldr	r3, [pc, #132]	; (800b2d4 <ResultToString+0x190>)
 800b24e:	e002      	b.n	800b256 <ResultToString+0x112>
	case COAP_RETRY:
		return "COAP_RETRY";
 800b250:	4b21      	ldr	r3, [pc, #132]	; (800b2d8 <ResultToString+0x194>)
 800b252:	e000      	b.n	800b256 <ResultToString+0x112>
	default:
		return "UNKNOWN_RESULT";
 800b254:	4b21      	ldr	r3, [pc, #132]	; (800b2dc <ResultToString+0x198>)
	}
}
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr
 800b260:	0801e8dc 	.word	0x0801e8dc
 800b264:	0801e8e4 	.word	0x0801e8e4
 800b268:	0801e8f4 	.word	0x0801e8f4
 800b26c:	0801e914 	.word	0x0801e914
 800b270:	0801e934 	.word	0x0801e934
 800b274:	0801e954 	.word	0x0801e954
 800b278:	0801e970 	.word	0x0801e970
 800b27c:	0801e98c 	.word	0x0801e98c
 800b280:	0801e9a8 	.word	0x0801e9a8
 800b284:	0801e9c4 	.word	0x0801e9c4
 800b288:	0801e9e0 	.word	0x0801e9e0
 800b28c:	0801e9f4 	.word	0x0801e9f4
 800b290:	0801ea04 	.word	0x0801ea04
 800b294:	0801ea18 	.word	0x0801ea18
 800b298:	0801ea30 	.word	0x0801ea30
 800b29c:	0801ea4c 	.word	0x0801ea4c
 800b2a0:	0801ea60 	.word	0x0801ea60
 800b2a4:	0801ea78 	.word	0x0801ea78
 800b2a8:	0801ea8c 	.word	0x0801ea8c
 800b2ac:	0801ea98 	.word	0x0801ea98
 800b2b0:	0801eaa4 	.word	0x0801eaa4
 800b2b4:	0801eabc 	.word	0x0801eabc
 800b2b8:	0801ead0 	.word	0x0801ead0
 800b2bc:	0801eae4 	.word	0x0801eae4
 800b2c0:	0801eaf4 	.word	0x0801eaf4
 800b2c4:	0801eb08 	.word	0x0801eb08
 800b2c8:	0801eb1c 	.word	0x0801eb1c
 800b2cc:	0801eb38 	.word	0x0801eb38
 800b2d0:	0801eb4c 	.word	0x0801eb4c
 800b2d4:	0801eb5c 	.word	0x0801eb5c
 800b2d8:	0801eb70 	.word	0x0801eb70
 800b2dc:	0801eb7c 	.word	0x0801eb7c

0800b2e0 <PrintEndpoint>:
	default:
		return "UNKNOWN_STATE";
	}
}

void _rom PrintEndpoint(const NetEp_t* ep) {
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b097      	sub	sp, #92	; 0x5c
 800b2e4:	af0e      	add	r7, sp, #56	; 0x38
 800b2e6:	61f8      	str	r0, [r7, #28]
	switch (ep->NetType) {
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	2b04      	cmp	r3, #4
 800b2ee:	f200 80a2 	bhi.w	800b436 <PrintEndpoint+0x156>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <PrintEndpoint+0x18>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b30d 	.word	0x0800b30d
 800b2fc:	0800b31d 	.word	0x0800b31d
 800b300:	0800b3db 	.word	0x0800b3db
 800b304:	0800b411 	.word	0x0800b411
 800b308:	0800b421 	.word	0x0800b421
	case EP_NONE:
		INFO("NONE");
 800b30c:	4951      	ldr	r1, [pc, #324]	; (800b454 <PrintEndpoint+0x174>)
 800b30e:	4852      	ldr	r0, [pc, #328]	; (800b458 <PrintEndpoint+0x178>)
 800b310:	f010 fd28 	bl	801bd64 <siprintf>
 800b314:	4850      	ldr	r0, [pc, #320]	; (800b458 <PrintEndpoint+0x178>)
 800b316:	f7fc fe89 	bl	800802c <hal_debug_puts>
		break;
 800b31a:	e097      	b.n	800b44c <PrintEndpoint+0x16c>
	case IPV6:
		INFO("IPv6, [");
 800b31c:	494f      	ldr	r1, [pc, #316]	; (800b45c <PrintEndpoint+0x17c>)
 800b31e:	484e      	ldr	r0, [pc, #312]	; (800b458 <PrintEndpoint+0x178>)
 800b320:	f010 fd20 	bl	801bd64 <siprintf>
 800b324:	484c      	ldr	r0, [pc, #304]	; (800b458 <PrintEndpoint+0x178>)
 800b326:	f7fc fe81 	bl	800802c <hal_debug_puts>
		PRINT_IPV6(ep->NetAddr.IPv6);
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	791b      	ldrb	r3, [r3, #4]
 800b32e:	469c      	mov	ip, r3
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	795b      	ldrb	r3, [r3, #5]
 800b334:	469e      	mov	lr, r3
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	799b      	ldrb	r3, [r3, #6]
 800b33a:	4618      	mov	r0, r3
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	79db      	ldrb	r3, [r3, #7]
 800b340:	461c      	mov	r4, r3
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	7a1b      	ldrb	r3, [r3, #8]
 800b346:	461d      	mov	r5, r3
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	7a5b      	ldrb	r3, [r3, #9]
 800b34c:	461e      	mov	r6, r3
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	7a9b      	ldrb	r3, [r3, #10]
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	7adb      	ldrb	r3, [r3, #11]
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	7b1b      	ldrb	r3, [r3, #12]
 800b35e:	613b      	str	r3, [r7, #16]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	7b5b      	ldrb	r3, [r3, #13]
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	7b9b      	ldrb	r3, [r3, #14]
 800b36a:	60bb      	str	r3, [r7, #8]
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	7bdb      	ldrb	r3, [r3, #15]
 800b370:	607b      	str	r3, [r7, #4]
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	7c1b      	ldrb	r3, [r3, #16]
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	7c5b      	ldrb	r3, [r3, #17]
 800b37c:	4619      	mov	r1, r3
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	7c9b      	ldrb	r3, [r3, #18]
 800b382:	461a      	mov	r2, r3
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	7cdb      	ldrb	r3, [r3, #19]
 800b388:	930d      	str	r3, [sp, #52]	; 0x34
 800b38a:	920c      	str	r2, [sp, #48]	; 0x30
 800b38c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	920a      	str	r2, [sp, #40]	; 0x28
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	9209      	str	r2, [sp, #36]	; 0x24
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	9208      	str	r2, [sp, #32]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	9207      	str	r2, [sp, #28]
 800b39e:	693a      	ldr	r2, [r7, #16]
 800b3a0:	9206      	str	r2, [sp, #24]
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	9205      	str	r2, [sp, #20]
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	9304      	str	r3, [sp, #16]
 800b3aa:	9603      	str	r6, [sp, #12]
 800b3ac:	9502      	str	r5, [sp, #8]
 800b3ae:	9401      	str	r4, [sp, #4]
 800b3b0:	9000      	str	r0, [sp, #0]
 800b3b2:	4673      	mov	r3, lr
 800b3b4:	4662      	mov	r2, ip
 800b3b6:	492a      	ldr	r1, [pc, #168]	; (800b460 <PrintEndpoint+0x180>)
 800b3b8:	4827      	ldr	r0, [pc, #156]	; (800b458 <PrintEndpoint+0x178>)
 800b3ba:	f010 fcd3 	bl	801bd64 <siprintf>
 800b3be:	4826      	ldr	r0, [pc, #152]	; (800b458 <PrintEndpoint+0x178>)
 800b3c0:	f7fc fe34 	bl	800802c <hal_debug_puts>
		INFO("]: %u", ep->NetPort);
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	8a9b      	ldrh	r3, [r3, #20]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4926      	ldr	r1, [pc, #152]	; (800b464 <PrintEndpoint+0x184>)
 800b3cc:	4822      	ldr	r0, [pc, #136]	; (800b458 <PrintEndpoint+0x178>)
 800b3ce:	f010 fcc9 	bl	801bd64 <siprintf>
 800b3d2:	4821      	ldr	r0, [pc, #132]	; (800b458 <PrintEndpoint+0x178>)
 800b3d4:	f7fc fe2a 	bl	800802c <hal_debug_puts>
		break;
 800b3d8:	e038      	b.n	800b44c <PrintEndpoint+0x16c>
	case IPV4:
		INFO("IPv4, %d.%d.%d.%d:%d",
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	791b      	ldrb	r3, [r3, #4]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	795b      	ldrb	r3, [r3, #5]
 800b3e4:	461c      	mov	r4, r3
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	799b      	ldrb	r3, [r3, #6]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	79db      	ldrb	r3, [r3, #7]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	8a9b      	ldrh	r3, [r3, #20]
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	9101      	str	r1, [sp, #4]
 800b3fa:	9200      	str	r2, [sp, #0]
 800b3fc:	4623      	mov	r3, r4
 800b3fe:	4602      	mov	r2, r0
 800b400:	4919      	ldr	r1, [pc, #100]	; (800b468 <PrintEndpoint+0x188>)
 800b402:	4815      	ldr	r0, [pc, #84]	; (800b458 <PrintEndpoint+0x178>)
 800b404:	f010 fcae 	bl	801bd64 <siprintf>
 800b408:	4813      	ldr	r0, [pc, #76]	; (800b458 <PrintEndpoint+0x178>)
 800b40a:	f7fc fe0f 	bl	800802c <hal_debug_puts>
				ep->NetAddr.IPv4.u8[0], ep->NetAddr.IPv4.u8[1], ep->NetAddr.IPv4.u8[2], ep->NetAddr.IPv4.u8[3],
				ep->NetPort);
		break;
 800b40e:	e01d      	b.n	800b44c <PrintEndpoint+0x16c>
	case BTLE:
		INFO("BTLE");
 800b410:	4916      	ldr	r1, [pc, #88]	; (800b46c <PrintEndpoint+0x18c>)
 800b412:	4811      	ldr	r0, [pc, #68]	; (800b458 <PrintEndpoint+0x178>)
 800b414:	f010 fca6 	bl	801bd64 <siprintf>
 800b418:	480f      	ldr	r0, [pc, #60]	; (800b458 <PrintEndpoint+0x178>)
 800b41a:	f7fc fe07 	bl	800802c <hal_debug_puts>
		break;
 800b41e:	e015      	b.n	800b44c <PrintEndpoint+0x16c>
	case UART:
		INFO("UART, COM%d", ep->NetAddr.Uart.ComPortID);
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	791b      	ldrb	r3, [r3, #4]
 800b424:	461a      	mov	r2, r3
 800b426:	4912      	ldr	r1, [pc, #72]	; (800b470 <PrintEndpoint+0x190>)
 800b428:	480b      	ldr	r0, [pc, #44]	; (800b458 <PrintEndpoint+0x178>)
 800b42a:	f010 fc9b 	bl	801bd64 <siprintf>
 800b42e:	480a      	ldr	r0, [pc, #40]	; (800b458 <PrintEndpoint+0x178>)
 800b430:	f7fc fdfc 	bl	800802c <hal_debug_puts>
		break;
 800b434:	e00a      	b.n	800b44c <PrintEndpoint+0x16c>
	default:
		INFO("UNKNOWN_EP (%d)", ep->NetType);
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	490d      	ldr	r1, [pc, #52]	; (800b474 <PrintEndpoint+0x194>)
 800b43e:	4806      	ldr	r0, [pc, #24]	; (800b458 <PrintEndpoint+0x178>)
 800b440:	f010 fc90 	bl	801bd64 <siprintf>
 800b444:	4804      	ldr	r0, [pc, #16]	; (800b458 <PrintEndpoint+0x178>)
 800b446:	f7fc fdf1 	bl	800802c <hal_debug_puts>
	}
}
 800b44a:	bf00      	nop
 800b44c:	bf00      	nop
 800b44e:	3724      	adds	r7, #36	; 0x24
 800b450:	46bd      	mov	sp, r7
 800b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b454:	0801eb9c 	.word	0x0801eb9c
 800b458:	200007d8 	.word	0x200007d8
 800b45c:	0801eba4 	.word	0x0801eba4
 800b460:	0801ebac 	.word	0x0801ebac
 800b464:	0801ebf4 	.word	0x0801ebf4
 800b468:	0801ebfc 	.word	0x0801ebfc
 800b46c:	0801ec14 	.word	0x0801ec14
 800b470:	0801ec1c 	.word	0x0801ec1c
 800b474:	0801ec28 	.word	0x0801ec28

0800b478 <debugPuts_Empty>:

#include "liblobaro_coap.h"
#include "coap.h"
#include "coap_main.h"

void debugPuts_Empty(const char* s) {
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
	(void) s;  // unused
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr
	...

0800b48c <CoAP_Init>:

void CoAP_Init(CoAP_API_t api) {
 800b48c:	b084      	sub	sp, #16
 800b48e:	b5b0      	push	{r4, r5, r7, lr}
 800b490:	af00      	add	r7, sp, #0
 800b492:	f107 0410 	add.w	r4, r7, #16
 800b496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CoAP.api = api;
 800b49a:	4b24      	ldr	r3, [pc, #144]	; (800b52c <CoAP_Init+0xa0>)
 800b49c:	1d1c      	adds	r4, r3, #4
 800b49e:	f107 0510 	add.w	r5, r7, #16
 800b4a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4a6:	682b      	ldr	r3, [r5, #0]
 800b4a8:	6023      	str	r3, [r4, #0]

	CoAP_InitIds();
 800b4aa:	f7fe fbed 	bl	8009c88 <CoAP_InitIds>

	// To make the tests stable, we should provide proper log functions in future
	if (CoAP.api.debugPuts == NULL) {
 800b4ae:	4b1f      	ldr	r3, [pc, #124]	; (800b52c <CoAP_Init+0xa0>)
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d102      	bne.n	800b4bc <CoAP_Init+0x30>
		CoAP.api.debugPuts = debugPuts_Empty;
 800b4b6:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <CoAP_Init+0xa0>)
 800b4b8:	4a1d      	ldr	r2, [pc, #116]	; (800b530 <CoAP_Init+0xa4>)
 800b4ba:	609a      	str	r2, [r3, #8]
#endif
#if DEBUG_RANDOM_DROP_OUTGOING_PERCENTAGE != 0
	INFO("\n\nWARNING!!!\n\n    DEBUG FEATURE, DROPPING %d%% OUTGOING MESSAGES ON PURPOSE!\n\n", DEBUG_RANDOM_DROP_OUTGOING_PERCENTAGE);
#endif

	INFO("CoAP_init!\r\n");
 800b4bc:	491d      	ldr	r1, [pc, #116]	; (800b534 <CoAP_Init+0xa8>)
 800b4be:	481e      	ldr	r0, [pc, #120]	; (800b538 <CoAP_Init+0xac>)
 800b4c0:	f010 fc50 	bl	801bd64 <siprintf>
 800b4c4:	481c      	ldr	r0, [pc, #112]	; (800b538 <CoAP_Init+0xac>)
 800b4c6:	f7fc fdb1 	bl	800802c <hal_debug_puts>
	INFO("CoAP Interaction size: %zu byte\r\n", sizeof(CoAP_Interaction_t));
 800b4ca:	2264      	movs	r2, #100	; 0x64
 800b4cc:	491b      	ldr	r1, [pc, #108]	; (800b53c <CoAP_Init+0xb0>)
 800b4ce:	481a      	ldr	r0, [pc, #104]	; (800b538 <CoAP_Init+0xac>)
 800b4d0:	f010 fc48 	bl	801bd64 <siprintf>
 800b4d4:	4818      	ldr	r0, [pc, #96]	; (800b538 <CoAP_Init+0xac>)
 800b4d6:	f7fc fda9 	bl	800802c <hal_debug_puts>
	INFO("CoAP_Res_t size: %zu byte\r\n", sizeof(CoAP_Res_t));
 800b4da:	2224      	movs	r2, #36	; 0x24
 800b4dc:	4918      	ldr	r1, [pc, #96]	; (800b540 <CoAP_Init+0xb4>)
 800b4de:	4816      	ldr	r0, [pc, #88]	; (800b538 <CoAP_Init+0xac>)
 800b4e0:	f010 fc40 	bl	801bd64 <siprintf>
 800b4e4:	4814      	ldr	r0, [pc, #80]	; (800b538 <CoAP_Init+0xac>)
 800b4e6:	f7fc fda1 	bl	800802c <hal_debug_puts>
	INFO("CoAP_Message_t size: %zu byte\r\n", sizeof(CoAP_Message_t));
 800b4ea:	2224      	movs	r2, #36	; 0x24
 800b4ec:	4915      	ldr	r1, [pc, #84]	; (800b544 <CoAP_Init+0xb8>)
 800b4ee:	4812      	ldr	r0, [pc, #72]	; (800b538 <CoAP_Init+0xac>)
 800b4f0:	f010 fc38 	bl	801bd64 <siprintf>
 800b4f4:	4810      	ldr	r0, [pc, #64]	; (800b538 <CoAP_Init+0xac>)
 800b4f6:	f7fc fd99 	bl	800802c <hal_debug_puts>
	INFO("CoAP_option_t size: %zu byte\r\n", sizeof(CoAP_option_t));
 800b4fa:	220c      	movs	r2, #12
 800b4fc:	4912      	ldr	r1, [pc, #72]	; (800b548 <CoAP_Init+0xbc>)
 800b4fe:	480e      	ldr	r0, [pc, #56]	; (800b538 <CoAP_Init+0xac>)
 800b500:	f010 fc30 	bl	801bd64 <siprintf>
 800b504:	480c      	ldr	r0, [pc, #48]	; (800b538 <CoAP_Init+0xac>)
 800b506:	f7fc fd91 	bl	800802c <hal_debug_puts>
	INFO("CoAP_Observer_t size: %zu byte\r\n", sizeof(CoAP_Observer_t));
 800b50a:	2230      	movs	r2, #48	; 0x30
 800b50c:	490f      	ldr	r1, [pc, #60]	; (800b54c <CoAP_Init+0xc0>)
 800b50e:	480a      	ldr	r0, [pc, #40]	; (800b538 <CoAP_Init+0xac>)
 800b510:	f010 fc28 	bl	801bd64 <siprintf>
 800b514:	4808      	ldr	r0, [pc, #32]	; (800b538 <CoAP_Init+0xac>)
 800b516:	f7fc fd89 	bl	800802c <hal_debug_puts>

	CoAP_InitResources();
 800b51a:	f7ff fc99 	bl	800ae50 <CoAP_InitResources>
}
 800b51e:	bf00      	nop
 800b520:	46bd      	mov	sp, r7
 800b522:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b526:	b004      	add	sp, #16
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	20000790 	.word	0x20000790
 800b530:	0800b479 	.word	0x0800b479
 800b534:	0801ed8c 	.word	0x0801ed8c
 800b538:	200007d8 	.word	0x200007d8
 800b53c:	0801ed9c 	.word	0x0801ed9c
 800b540:	0801edc0 	.word	0x0801edc0
 800b544:	0801eddc 	.word	0x0801eddc
 800b548:	0801edfc 	.word	0x0801edfc
 800b54c:	0801ee1c 	.word	0x0801ee1c

0800b550 <EpAreEqual>:

const NetEp_t NetEp_IPv6_mulitcast = { .NetType = IPV6, .NetPort = 5683, .NetAddr = { .IPv6 = {.u8 = {0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } } } };
const NetEp_t NetEp_IPv4_mulitcast = { .NetType = IPV4, .NetPort = 5683, .NetAddr = { .IPv4 = { .u8 = { 224, 0, 1, 187 } } } };

 bool _rom EpAreEqual(const NetEp_t* ep_A, const NetEp_t* ep_B)
 {
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	if (!ep_A || !ep_B) { return false; }
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <EpAreEqual+0x16>
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <EpAreEqual+0x1a>
 800b566:	2300      	movs	r3, #0
 800b568:	e063      	b.n	800b632 <EpAreEqual+0xe2>
	if (ep_A->NetType != ep_B->NetType) { return false; }
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d001      	beq.n	800b57a <EpAreEqual+0x2a>
 800b576:	2300      	movs	r3, #0
 800b578:	e05b      	b.n	800b632 <EpAreEqual+0xe2>
	if (ep_A->NetPort != ep_B->NetPort) { return false; }
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	8a9a      	ldrh	r2, [r3, #20]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	8a9b      	ldrh	r3, [r3, #20]
 800b582:	429a      	cmp	r2, r3
 800b584:	d001      	beq.n	800b58a <EpAreEqual+0x3a>
 800b586:	2300      	movs	r3, #0
 800b588:	e053      	b.n	800b632 <EpAreEqual+0xe2>

	if (ep_A->NetType == IPV6) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d119      	bne.n	800b5c6 <EpAreEqual+0x76>
		if (ep_A->NetAddr.IPv6.u32[0] != ep_B->NetAddr.IPv6.u32[0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d111      	bne.n	800b5c2 <EpAreEqual+0x72>
			|| ep_A->NetAddr.IPv6.u32[1] != ep_B->NetAddr.IPv6.u32[1]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d10b      	bne.n	800b5c2 <EpAreEqual+0x72>
			|| ep_A->NetAddr.IPv6.u32[2] != ep_B->NetAddr.IPv6.u32[2]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d105      	bne.n	800b5c2 <EpAreEqual+0x72>
			|| ep_A->NetAddr.IPv6.u32[3] != ep_B->NetAddr.IPv6.u32[3]) { return false; }
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	691a      	ldr	r2, [r3, #16]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d036      	beq.n	800b630 <EpAreEqual+0xe0>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e035      	b.n	800b632 <EpAreEqual+0xe2>
	} else if (ep_A->NetType == IPV4) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d119      	bne.n	800b602 <EpAreEqual+0xb2>
		if (ep_A->NetAddr.IPv4.u8[0] != ep_B->NetAddr.IPv4.u8[0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	791a      	ldrb	r2, [r3, #4]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d111      	bne.n	800b5fe <EpAreEqual+0xae>
			|| ep_A->NetAddr.IPv4.u8[1] != ep_B->NetAddr.IPv4.u8[1]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	795a      	ldrb	r2, [r3, #5]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	795b      	ldrb	r3, [r3, #5]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d10b      	bne.n	800b5fe <EpAreEqual+0xae>
			|| ep_A->NetAddr.IPv4.u8[2] != ep_B->NetAddr.IPv4.u8[2]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	799a      	ldrb	r2, [r3, #6]
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	799b      	ldrb	r3, [r3, #6]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d105      	bne.n	800b5fe <EpAreEqual+0xae>
			|| ep_A->NetAddr.IPv4.u8[3] != ep_B->NetAddr.IPv4.u8[3]) { return false; }
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	79da      	ldrb	r2, [r3, #7]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	79db      	ldrb	r3, [r3, #7]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d018      	beq.n	800b630 <EpAreEqual+0xe0>
 800b5fe:	2300      	movs	r3, #0
 800b600:	e017      	b.n	800b632 <EpAreEqual+0xe2>
	} else {
		int i;
		for (i = 0; i < NetAddr_MAX_LENGTH; i++) {
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]
 800b606:	e010      	b.n	800b62a <EpAreEqual+0xda>
			if (ep_A->NetAddr.mem[i] != ep_B->NetAddr.mem[i]) { return false; }
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	3304      	adds	r3, #4
 800b610:	781a      	ldrb	r2, [r3, #0]
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	440b      	add	r3, r1
 800b618:	3304      	adds	r3, #4
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d001      	beq.n	800b624 <EpAreEqual+0xd4>
 800b620:	2300      	movs	r3, #0
 800b622:	e006      	b.n	800b632 <EpAreEqual+0xe2>
		for (i = 0; i < NetAddr_MAX_LENGTH; i++) {
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b0f      	cmp	r3, #15
 800b62e:	ddeb      	ble.n	800b608 <EpAreEqual+0xb8>
		}
	}

	return true;
 800b630:	2301      	movs	r3, #1
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr

0800b63c <CopyEndpoints>:

void _rom CopyEndpoints(NetEp_t* Destination, const NetEp_t* Source) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	memmove((void*) Destination, (const void*) Source, sizeof(NetEp_t));
 800b646:	2218      	movs	r2, #24
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f010 fc92 	bl	801bf74 <memmove>
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <AllocSocket>:
	bool initDone;
} CoAP_SocketCtrl_t;

static CoAP_SocketCtrl_t SocketCtrl = {.initDone = false};

CoAP_Socket_t* _rom AllocSocket() {
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	int i;
	if (!SocketCtrl.initDone) {
 800b65e:	4b23      	ldr	r3, [pc, #140]	; (800b6ec <AllocSocket+0x94>)
 800b660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b664:	f083 0301 	eor.w	r3, r3, #1
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d016      	beq.n	800b69c <AllocSocket+0x44>
		for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	e00c      	b.n	800b68e <AllocSocket+0x36>
			SocketCtrl.SocketMemory[i].Alive = false;
 800b674:	491d      	ldr	r1, [pc, #116]	; (800b6ec <AllocSocket+0x94>)
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	4613      	mov	r3, r2
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	4413      	add	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	440b      	add	r3, r1
 800b682:	3308      	adds	r3, #8
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3301      	adds	r3, #1
 800b68c:	607b      	str	r3, [r7, #4]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b04      	cmp	r3, #4
 800b692:	ddef      	ble.n	800b674 <AllocSocket+0x1c>
		}
		SocketCtrl.initDone = true;
 800b694:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <AllocSocket+0x94>)
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b69c:	2300      	movs	r3, #0
 800b69e:	607b      	str	r3, [r7, #4]
 800b6a0:	e01b      	b.n	800b6da <AllocSocket+0x82>
		CoAP_Socket_t* socket = &(SocketCtrl.SocketMemory[i]);
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4a0f      	ldr	r2, [pc, #60]	; (800b6ec <AllocSocket+0x94>)
 800b6ae:	4413      	add	r3, r2
 800b6b0:	603b      	str	r3, [r7, #0]
		if (socket->Alive == false) {
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	7a1b      	ldrb	r3, [r3, #8]
 800b6b6:	f083 0301 	eor.w	r3, r3, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d009      	beq.n	800b6d4 <AllocSocket+0x7c>
			memset(socket, 0, sizeof(*socket));
 800b6c0:	220c      	movs	r2, #12
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6838      	ldr	r0, [r7, #0]
 800b6c6:	f010 fc6f 	bl	801bfa8 <memset>
			socket->Alive = true;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	721a      	strb	r2, [r3, #8]
			return socket;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	e006      	b.n	800b6e2 <AllocSocket+0x8a>
	for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	607b      	str	r3, [r7, #4]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b04      	cmp	r3, #4
 800b6de:	dde0      	ble.n	800b6a2 <AllocSocket+0x4a>
		}
	}

	return NULL; //no free memory
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200009cc 	.word	0x200009cc

0800b6f0 <RetrieveSocket>:

CoAP_Socket_t* _rom RetrieveSocket(SocketHandle_t handle) {
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	e020      	b.n	800b740 <RetrieveSocket+0x50>
		if (SocketCtrl.SocketMemory[i].Alive &&
 800b6fe:	4915      	ldr	r1, [pc, #84]	; (800b754 <RetrieveSocket+0x64>)
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	4613      	mov	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	440b      	add	r3, r1
 800b70c:	3308      	adds	r3, #8
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d012      	beq.n	800b73a <RetrieveSocket+0x4a>
			SocketCtrl.SocketMemory[i].Handle == handle) //corresponding socket found!
 800b714:	490f      	ldr	r1, [pc, #60]	; (800b754 <RetrieveSocket+0x64>)
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4613      	mov	r3, r2
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	681b      	ldr	r3, [r3, #0]
		if (SocketCtrl.SocketMemory[i].Alive &&
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	429a      	cmp	r2, r3
 800b728:	d107      	bne.n	800b73a <RetrieveSocket+0x4a>
		{
			return &(SocketCtrl.SocketMemory[i]);
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4a07      	ldr	r2, [pc, #28]	; (800b754 <RetrieveSocket+0x64>)
 800b736:	4413      	add	r3, r2
 800b738:	e006      	b.n	800b748 <RetrieveSocket+0x58>
	for (i = 0; i < MAX_ACTIVE_SOCKETS; i++) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3301      	adds	r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b04      	cmp	r3, #4
 800b744:	dddb      	ble.n	800b6fe <RetrieveSocket+0xe>
		}

	}
	return NULL; //not found
 800b746:	2300      	movs	r3, #0
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bc80      	pop	{r7}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	200009cc 	.word	0x200009cc

0800b758 <AddBlkOptionToMsg>:

	return COAP_OK;
}

CoAP_Result_t _rom AddBlkOptionToMsg(CoAP_Message_t* msg, CoAP_blockwise_option_t* blkOption)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	if (blkOption->Type != BLOCK_1 && blkOption->Type != BLOCK_2)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b1b      	cmp	r3, #27
 800b768:	d005      	beq.n	800b776 <AddBlkOptionToMsg+0x1e>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b17      	cmp	r3, #23
 800b770:	d001      	beq.n	800b776 <AddBlkOptionToMsg+0x1e>
		return COAP_ERR_WRONG_OPTION;
 800b772:	2310      	movs	r3, #16
 800b774:	e089      	b.n	800b88a <AddBlkOptionToMsg+0x132>

	if (blkOption->BlockNum == 0 && blkOption->BlockSize == BLOCK_SIZE_16 && blkOption->MoreFlag == false) //=> NUM, |M| and SZX are all coded to zero -> send zero-byte integer
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d116      	bne.n	800b7ac <AddBlkOptionToMsg+0x54>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	2b10      	cmp	r3, #16
 800b784:	d112      	bne.n	800b7ac <AddBlkOptionToMsg+0x54>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	791b      	ldrb	r3, [r3, #4]
 800b78a:	f083 0301 	eor.w	r3, r3, #1
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <AddBlkOptionToMsg+0x54>
	{
		return CoAP_AppendOptionToList(&(msg->pOptionsList), (uint16_t) blkOption->Type, NULL, 0);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f103 0018 	add.w	r0, r3, #24
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	b299      	uxth	r1, r3
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f7ff f92a 	bl	800a9fc <CoAP_AppendOptionToList>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	e06e      	b.n	800b88a <AddBlkOptionToMsg+0x132>
	}

	uint32_t OptionValue = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]

	//Block Size
	uint8_t szxCalc = (uint8_t) ((blkOption->BlockSize) >> 4u); // divide by 16
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	885b      	ldrh	r3, [r3, #2]
 800b7b4:	091b      	lsrs	r3, r3, #4
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	73fb      	strb	r3, [r7, #15]
	int i;
	for (i = 6; i >= 0; i--) //find highest bit, e.g. calc log2, i=7 forbidden
 800b7ba:	2306      	movs	r3, #6
 800b7bc:	613b      	str	r3, [r7, #16]
 800b7be:	e00f      	b.n	800b7e0 <AddBlkOptionToMsg+0x88>
			{
		if (szxCalc & 1u << i)
 800b7c0:	7bfa      	ldrb	r2, [r7, #15]
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d004      	beq.n	800b7da <AddBlkOptionToMsg+0x82>
				{
			OptionValue |= i;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]
			break;
 800b7d8:	e005      	b.n	800b7e6 <AddBlkOptionToMsg+0x8e>
	for (i = 6; i >= 0; i--) //find highest bit, e.g. calc log2, i=7 forbidden
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	daec      	bge.n	800b7c0 <AddBlkOptionToMsg+0x68>
		}
	}

	//More Flag
	if (blkOption->MoreFlag)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	791b      	ldrb	r3, [r3, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d003      	beq.n	800b7f6 <AddBlkOptionToMsg+0x9e>
		OptionValue |= 1u << 3u;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f043 0308 	orr.w	r3, r3, #8
 800b7f4:	617b      	str	r3, [r7, #20]

	//Num Value
	OptionValue |= (blkOption->BlockNum) << 4u;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]

	uint8_t wBuf[3];

	if (blkOption->BlockNum < 16)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2b0f      	cmp	r3, #15
 800b808:	d80f      	bhi.n	800b82a <AddBlkOptionToMsg+0xd2>
			{
		//msg->Options[msg->OptionCount].Length = 1;
		//wBuf[0]=msg->Options[msg->OptionCount].Value[0] = (uint8_t)OptionValue;
		wBuf[0] = (uint8_t) OptionValue;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	733b      	strb	r3, [r7, #12]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), (uint16_t) blkOption->Type, wBuf, 1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f103 0018 	add.w	r0, r3, #24
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	b299      	uxth	r1, r3
 800b81c:	f107 020c 	add.w	r2, r7, #12
 800b820:	2301      	movs	r3, #1
 800b822:	f7ff f8eb 	bl	800a9fc <CoAP_AppendOptionToList>
 800b826:	4603      	mov	r3, r0
 800b828:	e02f      	b.n	800b88a <AddBlkOptionToMsg+0x132>
	}
	else if (blkOption->BlockNum < 4096u)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b832:	d213      	bcs.n	800b85c <AddBlkOptionToMsg+0x104>
			{
		//msg->Options[msg->OptionCount].Length = 2;
		wBuf[0] = (uint8_t) (OptionValue >> 8u);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	0a1b      	lsrs	r3, r3, #8
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	733b      	strb	r3, [r7, #12]
		wBuf[1] = (uint8_t) (OptionValue & 0xffu);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	737b      	strb	r3, [r7, #13]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), (uint16_t) blkOption->Type, wBuf, 2);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f103 0018 	add.w	r0, r3, #24
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b299      	uxth	r1, r3
 800b84e:	f107 020c 	add.w	r2, r7, #12
 800b852:	2302      	movs	r3, #2
 800b854:	f7ff f8d2 	bl	800a9fc <CoAP_AppendOptionToList>
 800b858:	4603      	mov	r3, r0
 800b85a:	e016      	b.n	800b88a <AddBlkOptionToMsg+0x132>
	}
	else
	{
		//msg->Options[msg->OptionCount].Length = 3;
		wBuf[0] = (uint8_t) (OptionValue >> 16u);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	b2db      	uxtb	r3, r3
 800b862:	733b      	strb	r3, [r7, #12]
		wBuf[1] = (uint8_t) (OptionValue >> 8u);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	737b      	strb	r3, [r7, #13]
		wBuf[2] = (uint8_t) (OptionValue & 0xffu);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	73bb      	strb	r3, [r7, #14]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), (uint16_t) blkOption->Type, wBuf, 3);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f103 0018 	add.w	r0, r3, #24
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	b299      	uxth	r1, r3
 800b87e:	f107 020c 	add.w	r2, r7, #12
 800b882:	2303      	movs	r3, #3
 800b884:	f7ff f8ba 	bl	800a9fc <CoAP_AppendOptionToList>
 800b888:	4603      	mov	r3, r0
	}
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <CoAP_SetPayload>:
}

// Copies the given payload to the message. Respects the MAX_PAYLOAD_SIZE
// If the content does not fit into the response a Block options is added
CoAP_Result_t _rom CoAP_SetPayload(CoAP_Message_t* pMsgResp, uint8_t* pPayload, size_t payloadTotalSize, bool payloadIsVolatile)
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b089      	sub	sp, #36	; 0x24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
 800b8a0:	70fb      	strb	r3, [r7, #3]
	CoAP_blockwise_option_t B2opt = { .Type = BLOCK_2 };
 800b8a2:	f107 0310 	add.w	r3, r7, #16
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	605a      	str	r2, [r3, #4]
 800b8ac:	609a      	str	r2, [r3, #8]
 800b8ae:	2317      	movs	r3, #23
 800b8b0:	743b      	strb	r3, [r7, #16]
	int32_t BytesToSend = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]

	if (payloadTotalSize == 0) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d104      	bne.n	800b8c6 <CoAP_SetPayload+0x32>
		pMsgResp->PayloadLength = 0;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	811a      	strh	r2, [r3, #8]
		return COAP_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e04d      	b.n	800b962 <CoAP_SetPayload+0xce>
	}

	if (payloadTotalSize > MAX_PAYLOAD_SIZE) { //must use blockwise transfer?
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8cc:	d911      	bls.n	800b8f2 <CoAP_SetPayload+0x5e>
		B2opt.BlockSize = MAX_PAYLOAD_SIZE;
 800b8ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d2:	827b      	strh	r3, [r7, #18]
		B2opt.BlockNum = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61bb      	str	r3, [r7, #24]
		B2opt.MoreFlag = true;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	753b      	strb	r3, [r7, #20]
		AddBlkOptionToMsg(pMsgResp, &B2opt);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f107 0210 	add.w	r2, r7, #16
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff ff37 	bl	800b758 <AddBlkOptionToMsg>
		BytesToSend = MAX_PAYLOAD_SIZE;
 800b8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e001      	b.n	800b8f6 <CoAP_SetPayload+0x62>
	} else {
		BytesToSend = payloadTotalSize;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	61fb      	str	r3, [r7, #28]
	}

	if (pPayload != pMsgResp->Payload) {
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	69db      	ldr	r3, [r3, #28]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d02b      	beq.n	800b958 <CoAP_SetPayload+0xc4>
		//set payload to beginning of given external payload buf
		if (payloadIsVolatile) {
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d022      	beq.n	800b94c <CoAP_SetPayload+0xb8>
			if (pMsgResp->PayloadBufSize < BytesToSend) {
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	461a      	mov	r2, r3
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	4293      	cmp	r3, r2
 800b910:	dd10      	ble.n	800b934 <CoAP_SetPayload+0xa0>
				CoAP_free_MsgPayload(&pMsgResp); //this is save in any case because free routine checks location
 800b912:	f107 030c 	add.w	r3, r7, #12
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd fd0e 	bl	8009338 <CoAP_free_MsgPayload>
				pMsgResp->Payload = (uint8_t*) CoAP.api.malloc(BytesToSend); //alloc new buffer to copy data to send to
 800b91c:	4b13      	ldr	r3, [pc, #76]	; (800b96c <CoAP_SetPayload+0xd8>)
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	68fc      	ldr	r4, [r7, #12]
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
 800b928:	4603      	mov	r3, r0
 800b92a:	61e3      	str	r3, [r4, #28]
				pMsgResp->PayloadBufSize = BytesToSend;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	b292      	uxth	r2, r2
 800b932:	815a      	strh	r2, [r3, #10]
			}
			coap_memcpy(pMsgResp->Payload, pPayload, BytesToSend);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	69fa      	ldr	r2, [r7, #28]
 800b93a:	68b9      	ldr	r1, [r7, #8]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f010 fbd2 	bl	801c0e6 <memcpy>
			pMsgResp->PayloadBufSize = BytesToSend;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	b292      	uxth	r2, r2
 800b948:	815a      	strh	r2, [r3, #10]
 800b94a:	e005      	b.n	800b958 <CoAP_SetPayload+0xc4>
		} else {
			pMsgResp->Payload = pPayload; //use external set buffer (will not be freed, MUST be static!!!)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	61da      	str	r2, [r3, #28]
			pMsgResp->PayloadBufSize = 0; //protect external buf from unwanted overwrite
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	815a      	strh	r2, [r3, #10]
		}
	} // [else] => no need to alter payload buf beside change payload length before return

	pMsgResp->PayloadLength = BytesToSend;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	b292      	uxth	r2, r2
 800b95e:	811a      	strh	r2, [r3, #8]
	return COAP_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3724      	adds	r7, #36	; 0x24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd90      	pop	{r4, r7, pc}
 800b96a:	bf00      	nop
 800b96c:	20000790 	.word	0x20000790

0800b970 <CoAP_AddCfOptionToMsg>:
 * THE SOFTWARE.
 *******************************************************************************/
#include "../coap.h"

CoAP_Result_t _rom CoAP_AddCfOptionToMsg(CoAP_Message_t* msg, uint16_t contentFormat)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	807b      	strh	r3, [r7, #2]
	return CoAP_AppendUintOptionToList(&(msg->pOptionsList), OPT_NUM_CONTENT_FORMAT, contentFormat);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3318      	adds	r3, #24
 800b980:	887a      	ldrh	r2, [r7, #2]
 800b982:	210c      	movs	r1, #12
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe ffcf 	bl	800a928 <CoAP_AppendUintOptionToList>
 800b98a:	4603      	mov	r3, r0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <AddObserveOptionToMsg>:
 *******************************************************************************/
#include "../coap_mem.h"
#include "../coap.h"

CoAP_Result_t _rom AddObserveOptionToMsg(CoAP_Message_t* msg, uint32_t val)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
	uint8_t wBuf[3];
	wBuf[2] = val & 0xffu;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	73bb      	strb	r3, [r7, #14]
	wBuf[1] = (val >> 8u) & 0xffu;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	0a1b      	lsrs	r3, r3, #8
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	737b      	strb	r3, [r7, #13]
	wBuf[0] = (val >> 16u) & 0xffu;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	733b      	strb	r3, [r7, #12]

	if (val > 0xffff) {
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ba:	d315      	bcc.n	800b9e8 <AddObserveOptionToMsg+0x54>
		wBuf[0] = (val >> 16u) & 0xffu;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	0c1b      	lsrs	r3, r3, #16
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	733b      	strb	r3, [r7, #12]
		wBuf[1] = (val >> 8u) & 0xffu;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	0a1b      	lsrs	r3, r3, #8
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	737b      	strb	r3, [r7, #13]
		wBuf[2] = val & 0xffu;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	73bb      	strb	r3, [r7, #14]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), OPT_NUM_OBSERVE, wBuf, 3);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f103 0018 	add.w	r0, r3, #24
 800b9d8:	f107 020c 	add.w	r2, r7, #12
 800b9dc:	2303      	movs	r3, #3
 800b9de:	2106      	movs	r1, #6
 800b9e0:	f7ff f80c 	bl	800a9fc <CoAP_AppendOptionToList>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	e02e      	b.n	800ba46 <AddObserveOptionToMsg+0xb2>
	} else if (val > 0xff) {
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2bff      	cmp	r3, #255	; 0xff
 800b9ec:	d911      	bls.n	800ba12 <AddObserveOptionToMsg+0x7e>
		wBuf[0] = (val >> 8u) & 0xffu;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	0a1b      	lsrs	r3, r3, #8
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	733b      	strb	r3, [r7, #12]
		wBuf[1] = val & 0xffu;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	737b      	strb	r3, [r7, #13]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), OPT_NUM_OBSERVE, wBuf, 2);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f103 0018 	add.w	r0, r3, #24
 800ba02:	f107 020c 	add.w	r2, r7, #12
 800ba06:	2302      	movs	r3, #2
 800ba08:	2106      	movs	r1, #6
 800ba0a:	f7fe fff7 	bl	800a9fc <CoAP_AppendOptionToList>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	e019      	b.n	800ba46 <AddObserveOptionToMsg+0xb2>
	} else if (val > 0) {
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00d      	beq.n	800ba34 <AddObserveOptionToMsg+0xa0>
		wBuf[0] = val & 0xffu;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	733b      	strb	r3, [r7, #12]
		return CoAP_AppendOptionToList(&(msg->pOptionsList), OPT_NUM_OBSERVE, wBuf, 1);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f103 0018 	add.w	r0, r3, #24
 800ba24:	f107 020c 	add.w	r2, r7, #12
 800ba28:	2301      	movs	r3, #1
 800ba2a:	2106      	movs	r1, #6
 800ba2c:	f7fe ffe6 	bl	800a9fc <CoAP_AppendOptionToList>
 800ba30:	4603      	mov	r3, r0
 800ba32:	e008      	b.n	800ba46 <AddObserveOptionToMsg+0xb2>
	} else { //val == 0
		return CoAP_AppendOptionToList(&(msg->pOptionsList), OPT_NUM_OBSERVE, NULL, 0);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 0018 	add.w	r0, r3, #24
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2106      	movs	r1, #6
 800ba40:	f7fe ffdc 	bl	800a9fc <CoAP_AppendOptionToList>
 800ba44:	4603      	mov	r3, r0
	}
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <RemoveObserveOptionFromMsg>:

CoAP_Result_t _rom RemoveObserveOptionFromMsg(CoAP_Message_t* msg) {
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
	CoAP_option_t* pOpt;
	for (pOpt = msg->pOptionsList; pOpt != NULL; pOpt = pOpt->next) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	e00e      	b.n	800ba7c <RemoveObserveOptionFromMsg+0x2e>
		if (pOpt->Number == OPT_NUM_OBSERVE) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	889b      	ldrh	r3, [r3, #4]
 800ba62:	2b06      	cmp	r3, #6
 800ba64:	d107      	bne.n	800ba76 <RemoveObserveOptionFromMsg+0x28>
			CoAP_RemoveOptionFromList(&(msg->pOptionsList), pOpt);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3318      	adds	r3, #24
 800ba6a:	68f9      	ldr	r1, [r7, #12]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe feb5 	bl	800a7dc <CoAP_RemoveOptionFromList>
			return COAP_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	e006      	b.n	800ba84 <RemoveObserveOptionFromMsg+0x36>
	for (pOpt = msg->pOptionsList; pOpt != NULL; pOpt = pOpt->next) {
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1ed      	bne.n	800ba5e <RemoveObserveOptionFromMsg+0x10>
		}
	}
	return COAP_NOT_FOUND;
 800ba82:	2301      	movs	r3, #1
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <UpdateObserveOptionInMsg>:

CoAP_Result_t _rom UpdateObserveOptionInMsg(CoAP_Message_t* msg, uint32_t val)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
	RemoveObserveOptionFromMsg(msg);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff ffd9 	bl	800ba4e <RemoveObserveOptionFromMsg>
	return AddObserveOptionToMsg(msg, val);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff ff78 	bl	800b994 <AddObserveOptionToMsg>
 800baa4:	4603      	mov	r3, r0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <GetObserveOptionFromMsg>:

CoAP_Result_t _rom GetObserveOptionFromMsg(CoAP_Message_t* msg, uint32_t* val) {
 800baae:	b480      	push	{r7}
 800bab0:	b085      	sub	sp, #20
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]

	CoAP_option_t* pOpts = msg->pOptionsList;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	60fb      	str	r3, [r7, #12]
	*val = 0;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]

	while (pOpts != NULL) {
 800bac4:	e049      	b.n	800bb5a <GetObserveOptionFromMsg+0xac>
		if (pOpts->Number == OPT_NUM_OBSERVE) {
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	889b      	ldrh	r3, [r3, #4]
 800baca:	2b06      	cmp	r3, #6
 800bacc:	d142      	bne.n	800bb54 <GetObserveOptionFromMsg+0xa6>

			if (pOpts->Length == 0) { //implicit val = 0 (register)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	88db      	ldrh	r3, [r3, #6]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <GetObserveOptionFromMsg+0x2c>
				return COAP_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e043      	b.n	800bb62 <GetObserveOptionFromMsg+0xb4>
			} else {
				if (pOpts->Length == 1) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	88db      	ldrh	r3, [r3, #6]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d108      	bne.n	800baf4 <GetObserveOptionFromMsg+0x46>
					*val |= (uint32_t) (pOpts->Value[0]);
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	6892      	ldr	r2, [r2, #8]
 800baea:	7812      	ldrb	r2, [r2, #0]
 800baec:	431a      	orrs	r2, r3
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	e02d      	b.n	800bb50 <GetObserveOptionFromMsg+0xa2>
				} else if (pOpts->Length == 2) {
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	88db      	ldrh	r3, [r3, #6]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d10e      	bne.n	800bb1a <GetObserveOptionFromMsg+0x6c>
					*val |= (((uint32_t) pOpts->Value[0]) << 8u) | ((uint32_t) pOpts->Value[1]);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	68f9      	ldr	r1, [r7, #12]
 800bb0a:	6889      	ldr	r1, [r1, #8]
 800bb0c:	3101      	adds	r1, #1
 800bb0e:	7809      	ldrb	r1, [r1, #0]
 800bb10:	430b      	orrs	r3, r1
 800bb12:	431a      	orrs	r2, r3
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	e01a      	b.n	800bb50 <GetObserveOptionFromMsg+0xa2>
				} else if (pOpts->Length == 3) {
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	88db      	ldrh	r3, [r3, #6]
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d114      	bne.n	800bb4c <GetObserveOptionFromMsg+0x9e>
					*val |= (((uint32_t) pOpts->Value[0]) << 16u) | (((uint32_t) pOpts->Value[1]) << 8u) | ((uint32_t) pOpts->Value[2]);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	0419      	lsls	r1, r3, #16
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	3301      	adds	r3, #1
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	6889      	ldr	r1, [r1, #8]
 800bb3e:	3102      	adds	r1, #2
 800bb40:	7809      	ldrb	r1, [r1, #0]
 800bb42:	430b      	orrs	r3, r1
 800bb44:	431a      	orrs	r2, r3
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e001      	b.n	800bb50 <GetObserveOptionFromMsg+0xa2>
				} else {
					return COAP_BAD_OPTION_VAL;
 800bb4c:	2315      	movs	r3, #21
 800bb4e:	e008      	b.n	800bb62 <GetObserveOptionFromMsg+0xb4>
				}
			}
			return COAP_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	e006      	b.n	800bb62 <GetObserveOptionFromMsg+0xb4>
		}

		pOpts = pOpts->next;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]
	while (pOpts != NULL) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1b2      	bne.n	800bac6 <GetObserveOptionFromMsg+0x18>
	}
	return COAP_NOT_FOUND;
 800bb60:	2301      	movs	r3, #1
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bc80      	pop	{r7}
 800bb6a:	4770      	bx	lr

0800bb6c <CoAP_AllocNewObserver>:

CoAP_Observer_t* _rom CoAP_AllocNewObserver()
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
	CoAP_Observer_t* newObserver = (CoAP_Observer_t*) (CoAP_malloc0(sizeof(CoAP_Observer_t)));
 800bb72:	2030      	movs	r0, #48	; 0x30
 800bb74:	f7fd fb6a 	bl	800924c <CoAP_malloc0>
 800bb78:	6078      	str	r0, [r7, #4]
	if (newObserver == NULL) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <CoAP_AllocNewObserver+0x18>
		return NULL;
 800bb80:	2300      	movs	r3, #0
 800bb82:	e005      	b.n	800bb90 <CoAP_AllocNewObserver+0x24>
	}

	memset(newObserver, 0, sizeof(CoAP_Observer_t));
 800bb84:	2230      	movs	r2, #48	; 0x30
 800bb86:	2100      	movs	r1, #0
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f010 fa0d 	bl	801bfa8 <memset>
	return newObserver;
 800bb8e:	687b      	ldr	r3, [r7, #4]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <CoAP_FreeObserver>:

CoAP_Result_t _rom CoAP_FreeObserver(CoAP_Observer_t** pObserver)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	INFO("Releasing pObserver\r\n");
 800bba0:	490c      	ldr	r1, [pc, #48]	; (800bbd4 <CoAP_FreeObserver+0x3c>)
 800bba2:	480d      	ldr	r0, [pc, #52]	; (800bbd8 <CoAP_FreeObserver+0x40>)
 800bba4:	f010 f8de 	bl	801bd64 <siprintf>
 800bba8:	480b      	ldr	r0, [pc, #44]	; (800bbd8 <CoAP_FreeObserver+0x40>)
 800bbaa:	f7fc fa3f 	bl	800802c <hal_debug_puts>
	//coap_mem_stats();

	CoAP_FreeOptionList(&((*pObserver)->pOptList));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3328      	adds	r3, #40	; 0x28
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ffb7 	bl	800ab28 <CoAP_FreeOptionList>
	CoAP_free((void*) (*pObserver));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fd fb26 	bl	8009210 <CoAP_free>
	*pObserver = NULL;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]

	return COAP_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	0801ee40 	.word	0x0801ee40
 800bbd8:	200007d8 	.word	0x200007d8

0800bbdc <CoAP_AppendObserverToList>:

//does not copy!
CoAP_Result_t _rom CoAP_AppendObserverToList(CoAP_Observer_t** pListStart, CoAP_Observer_t* pObserverToAdd)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
	if (pObserverToAdd == NULL)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <CoAP_AppendObserverToList+0x14>
		return COAP_ERR_ARGUMENT;
 800bbec:	230a      	movs	r3, #10
 800bbee:	e020      	b.n	800bc32 <CoAP_AppendObserverToList+0x56>

	if (*pListStart == NULL) //List empty? create new first element
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d107      	bne.n	800bc08 <CoAP_AppendObserverToList+0x2c>
	{
		*pListStart = pObserverToAdd;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	601a      	str	r2, [r3, #0]
		(*pListStart)->next = NULL;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc06:	e013      	b.n	800bc30 <CoAP_AppendObserverToList+0x54>
	}
	else //append new element at end
	{
		CoAP_Observer_t* pObs = *pListStart;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]
		while (pObs->next != NULL) {
 800bc0e:	e002      	b.n	800bc16 <CoAP_AppendObserverToList+0x3a>
			pObs = pObs->next;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	60fb      	str	r3, [r7, #12]
		while (pObs->next != NULL) {
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1f8      	bne.n	800bc10 <CoAP_AppendObserverToList+0x34>
		}

		pObs->next = pObserverToAdd;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c
		pObs = pObs->next;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	60fb      	str	r3, [r7, #12]
		pObs->next = NULL;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return COAP_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bc80      	pop	{r7}
 800bc3a:	4770      	bx	lr

0800bc3c <CoAP_UnlinkObserverFromList>:

CoAP_Result_t _rom CoAP_UnlinkObserverFromList(CoAP_Observer_t** pListStart, CoAP_Observer_t* pObserverToRemove, bool FreeUnlinked)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	71fb      	strb	r3, [r7, #7]
	CoAP_Observer_t* currP;
	CoAP_Observer_t* prevP;

	// For 1st node, indicate there is no previous.
	prevP = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]

	//Visit each node, maintaining a pointer to
	//the previous node we just visited.
	for (currP = *pListStart; currP != NULL; prevP = currP, currP = currP->next) {
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	e01e      	b.n	800bc94 <CoAP_UnlinkObserverFromList+0x58>

		if (currP == pObserverToRemove) {  // Found it.
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d115      	bne.n	800bc8a <CoAP_UnlinkObserverFromList+0x4e>
			if (prevP == NULL) {
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d104      	bne.n	800bc6e <CoAP_UnlinkObserverFromList+0x32>
				//Fix beginning pointer.
				*pListStart = currP->next;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	e003      	b.n	800bc76 <CoAP_UnlinkObserverFromList+0x3a>
			} else {
				//Fix previous node's next to
				//skip over the removed node.
				prevP->next = currP->next;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			// Deallocate the node.
			if (FreeUnlinked) {
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <CoAP_UnlinkObserverFromList+0x4a>
				CoAP_FreeObserver(&currP);
 800bc7c:	f107 0310 	add.w	r3, r7, #16
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff ff89 	bl	800bb98 <CoAP_FreeObserver>
			}
			//Done searching.
			return COAP_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	e008      	b.n	800bc9c <CoAP_UnlinkObserverFromList+0x60>
	for (currP = *pListStart; currP != NULL; prevP = currP, currP = currP->next) {
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	613b      	str	r3, [r7, #16]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1dd      	bne.n	800bc56 <CoAP_UnlinkObserverFromList+0x1a>
		}
	}
	return COAP_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3718      	adds	r7, #24
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <ParseUriQueryFromStringToOption>:


//internal function
//QueryStr points to char AFTER ? in a uri query string e.g: 'O' in [...]myuri/bla?Option1=Val1&Option2=Val2
//todo: support percent encoding
static CoAP_Result_t _rom ParseUriQueryFromStringToOption(CoAP_option_t** pUriOptionsListBegin, const char* QueryStr) {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	INFO("Query string coming:\n");
 800bcae:	4925      	ldr	r1, [pc, #148]	; (800bd44 <ParseUriQueryFromStringToOption+0xa0>)
 800bcb0:	4825      	ldr	r0, [pc, #148]	; (800bd48 <ParseUriQueryFromStringToOption+0xa4>)
 800bcb2:	f010 f857 	bl	801bd64 <siprintf>
 800bcb6:	4824      	ldr	r0, [pc, #144]	; (800bd48 <ParseUriQueryFromStringToOption+0xa4>)
 800bcb8:	f7fc f9b8 	bl	800802c <hal_debug_puts>
	INFO("Query string: '%s'\n", QueryStr);
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	4923      	ldr	r1, [pc, #140]	; (800bd4c <ParseUriQueryFromStringToOption+0xa8>)
 800bcc0:	4821      	ldr	r0, [pc, #132]	; (800bd48 <ParseUriQueryFromStringToOption+0xa4>)
 800bcc2:	f010 f84f 	bl	801bd64 <siprintf>
 800bcc6:	4820      	ldr	r0, [pc, #128]	; (800bd48 <ParseUriQueryFromStringToOption+0xa4>)
 800bcc8:	f7fc f9b0 	bl	800802c <hal_debug_puts>
	const char* pCurUriPartBegin = QueryStr;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	60fb      	str	r3, [r7, #12]
	uint32_t cnt = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60bb      	str	r3, [r7, #8]

	while (*QueryStr != 0) { //str end
 800bcd4:	e022      	b.n	800bd1c <ParseUriQueryFromStringToOption+0x78>
		if (*QueryStr == '&') {//query delimeter found
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b26      	cmp	r3, #38	; 0x26
 800bcdc:	d118      	bne.n	800bd10 <ParseUriQueryFromStringToOption+0x6c>
			if (cnt == 0) { //part begins with (another) delimiter -> skip it
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d106      	bne.n	800bcf2 <ParseUriQueryFromStringToOption+0x4e>
				pCurUriPartBegin++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3301      	adds	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
				QueryStr++;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	3301      	adds	r3, #1
 800bcee:	603b      	str	r3, [r7, #0]
				continue;
 800bcf0:	e014      	b.n	800bd1c <ParseUriQueryFromStringToOption+0x78>
			}

			CoAP_AppendOptionToList(pUriOptionsListBegin, OPT_NUM_URI_QUERY, (const uint8_t *) pCurUriPartBegin, cnt); //copy & alloc mem
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	210f      	movs	r1, #15
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7fe fe7e 	bl	800a9fc <CoAP_AppendOptionToList>

			pCurUriPartBegin = pCurUriPartBegin + cnt + 1;//points to char following delimiter '&'
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	3301      	adds	r3, #1
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
			cnt = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	60bb      	str	r3, [r7, #8]
 800bd0e:	e002      	b.n	800bd16 <ParseUriQueryFromStringToOption+0x72>
		} else cnt++;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60bb      	str	r3, [r7, #8]

		QueryStr++;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	603b      	str	r3, [r7, #0]
	while (*QueryStr != 0) { //str end
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1d8      	bne.n	800bcd6 <ParseUriQueryFromStringToOption+0x32>
	}

	//last uri part which is not a query string
	if (cnt != 0) {
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d006      	beq.n	800bd38 <ParseUriQueryFromStringToOption+0x94>
		CoAP_AppendOptionToList(pUriOptionsListBegin, OPT_NUM_URI_QUERY, (const uint8_t *) pCurUriPartBegin, cnt); //copy & alloc last uri part
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	210f      	movs	r1, #15
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7fe fe62 	bl	800a9fc <CoAP_AppendOptionToList>
	}

	return COAP_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	0801ee58 	.word	0x0801ee58
 800bd48:	200007d8 	.word	0x200007d8
 800bd4c:	0801ee70 	.word	0x0801ee70

0800bd50 <CoAP_AppendUriOptionsFromString>:


// Appends to list of coap options uri-path and uri-query options from uri-string
CoAP_Result_t _rom CoAP_AppendUriOptionsFromString(CoAP_option_t** pUriOptionsListBegin, const char* UriStr) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
	// "halloWelt/wiegehts/dir?var1=val1&var2=val2&"
	// "halloWelt/wiegehts/dir"
	// "/halloWelt/wiegehts/dir?bla&bla&bla&bla"
	// "halloWelt/wiegehts/dir/?bla&bla=n&bla&bla"

	if (UriStr == NULL) {
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <CoAP_AppendUriOptionsFromString+0x14>
		return COAP_ERR_ARGUMENT;
 800bd60:	230a      	movs	r3, #10
 800bd62:	e056      	b.n	800be12 <CoAP_AppendUriOptionsFromString+0xc2>
	}

	const char* pCurUriPartBegin = UriStr;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
	uint32_t cnt = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60bb      	str	r3, [r7, #8]

	while (*UriStr != 0) { //str end
 800bd6c:	e042      	b.n	800bdf4 <CoAP_AppendUriOptionsFromString+0xa4>
		if (*UriStr == '/' || *UriStr == ' ' || *UriStr == '?') { //uri delimeter found - do not count
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b2f      	cmp	r3, #47	; 0x2f
 800bd74:	d007      	beq.n	800bd86 <CoAP_AppendUriOptionsFromString+0x36>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d003      	beq.n	800bd86 <CoAP_AppendUriOptionsFromString+0x36>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b3f      	cmp	r3, #63	; 0x3f
 800bd84:	d130      	bne.n	800bde8 <CoAP_AppendUriOptionsFromString+0x98>

			if (cnt == 0) { //part begins with (another) delimiter -> skip it
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d112      	bne.n	800bdb2 <CoAP_AppendUriOptionsFromString+0x62>
				if (*UriStr == '?') {
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	2b3f      	cmp	r3, #63	; 0x3f
 800bd92:	d107      	bne.n	800bda4 <CoAP_AppendUriOptionsFromString+0x54>
					return ParseUriQueryFromStringToOption(pUriOptionsListBegin, UriStr + 1);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff ff82 	bl	800bca4 <ParseUriQueryFromStringToOption>
 800bda0:	4603      	mov	r3, r0
 800bda2:	e036      	b.n	800be12 <CoAP_AppendUriOptionsFromString+0xc2>
				}

				pCurUriPartBegin++;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]
				UriStr++;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	603b      	str	r3, [r7, #0]
				continue;
 800bdb0:	e020      	b.n	800bdf4 <CoAP_AppendUriOptionsFromString+0xa4>
			}
			CoAP_AppendOptionToList(pUriOptionsListBegin, OPT_NUM_URI_PATH, (const uint8_t *) pCurUriPartBegin, cnt); //copy & alloc mem
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	210b      	movs	r1, #11
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7fe fe1e 	bl	800a9fc <CoAP_AppendOptionToList>

			pCurUriPartBegin = pCurUriPartBegin + cnt + 1;//points to char following delimiter '/', ' ' or '?'
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]

			if (*UriStr == '?') { //case /dir?var1 -> "dir" = path, "var1"=query begin (path component only MAY end with '\')
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b3f      	cmp	r3, #63	; 0x3f
 800bdd0:	d107      	bne.n	800bde2 <CoAP_AppendUriOptionsFromString+0x92>
				return ParseUriQueryFromStringToOption(pUriOptionsListBegin, UriStr + 1);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff ff63 	bl	800bca4 <ParseUriQueryFromStringToOption>
 800bdde:	4603      	mov	r3, r0
 800bde0:	e017      	b.n	800be12 <CoAP_AppendUriOptionsFromString+0xc2>
			}

			cnt = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60bb      	str	r3, [r7, #8]
 800bde6:	e002      	b.n	800bdee <CoAP_AppendUriOptionsFromString+0x9e>
		} else cnt++;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60bb      	str	r3, [r7, #8]

		UriStr++;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	603b      	str	r3, [r7, #0]
	while (*UriStr != 0) { //str end
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1b8      	bne.n	800bd6e <CoAP_AppendUriOptionsFromString+0x1e>
	}

	//last uri part which is not a query string
	if (cnt != 0) {
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d006      	beq.n	800be10 <CoAP_AppendUriOptionsFromString+0xc0>
		CoAP_AppendOptionToList(pUriOptionsListBegin, OPT_NUM_URI_PATH, (const uint8_t *) pCurUriPartBegin, cnt); //copy & alloc last uri part
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	b29b      	uxth	r3, r3
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	210b      	movs	r1, #11
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7fe fdf6 	bl	800a9fc <CoAP_AppendOptionToList>
	}

	return COAP_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <CoAP_UriOptionsAreEqual>:
}

// Iterates over all URI_PATH options and match them one by one
// if any part of the URI does not match, return false
// uses implicit ordering of uri options!
bool _rom CoAP_UriOptionsAreEqual(CoAP_option_t* OptListA, CoAP_option_t* OptListB) {
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]

	CoAP_option_t* CurOptA = OptListA;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	60fb      	str	r3, [r7, #12]
	CoAP_option_t* CurOptB = OptListB;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	60bb      	str	r3, [r7, #8]

	while (!(CurOptA == NULL && CurOptB == NULL)) {
 800be2c:	e030      	b.n	800be90 <CoAP_UriOptionsAreEqual+0x76>
		while (CurOptA != NULL) {
			if (CurOptA->Number == OPT_NUM_URI_PATH) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	889b      	ldrh	r3, [r3, #4]
 800be32:	2b0b      	cmp	r3, #11
 800be34:	d006      	beq.n	800be44 <CoAP_UriOptionsAreEqual+0x2a>
				break;
			}
			CurOptA = CurOptA->next;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
		while (CurOptA != NULL) {
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1f5      	bne.n	800be2e <CoAP_UriOptionsAreEqual+0x14>
 800be42:	e008      	b.n	800be56 <CoAP_UriOptionsAreEqual+0x3c>
				break;
 800be44:	bf00      	nop
		}

		while (CurOptB != NULL) {
 800be46:	e006      	b.n	800be56 <CoAP_UriOptionsAreEqual+0x3c>
			if (CurOptB->Number == OPT_NUM_URI_PATH) {
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	889b      	ldrh	r3, [r3, #4]
 800be4c:	2b0b      	cmp	r3, #11
 800be4e:	d006      	beq.n	800be5e <CoAP_UriOptionsAreEqual+0x44>
				break;
			}
			CurOptB = CurOptB->next;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	60bb      	str	r3, [r7, #8]
		while (CurOptB != NULL) {
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1f5      	bne.n	800be48 <CoAP_UriOptionsAreEqual+0x2e>
 800be5c:	e000      	b.n	800be60 <CoAP_UriOptionsAreEqual+0x46>
				break;
 800be5e:	bf00      	nop
		}

		if (!CoAP_OptionsAreEqual(CurOptA, CurOptB)) { //returns also true if both NULL! (implicit URI:"/")
 800be60:	68b9      	ldr	r1, [r7, #8]
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7fe fed4 	bl	800ac10 <CoAP_OptionsAreEqual>
 800be68:	4603      	mov	r3, r0
 800be6a:	f083 0301 	eor.w	r3, r3, #1
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b00      	cmp	r3, #0
 800be72:	d001      	beq.n	800be78 <CoAP_UriOptionsAreEqual+0x5e>
			return false;
 800be74:	2300      	movs	r3, #0
 800be76:	e012      	b.n	800be9e <CoAP_UriOptionsAreEqual+0x84>
		}

		if (CurOptB != NULL) {
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <CoAP_UriOptionsAreEqual+0x6a>
			CurOptB = CurOptB->next;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	60bb      	str	r3, [r7, #8]
		}
		if (CurOptA != NULL) {
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d002      	beq.n	800be90 <CoAP_UriOptionsAreEqual+0x76>
			CurOptA = CurOptA->next;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
	while (!(CurOptA == NULL && CurOptB == NULL)) {
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1d2      	bne.n	800be3c <CoAP_UriOptionsAreEqual+0x22>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1cf      	bne.n	800be3c <CoAP_UriOptionsAreEqual+0x22>
		}
	}
	return true;
 800be9c:	2301      	movs	r3, #1
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 800bea6:	3901      	subs	r1, #1
 800bea8:	4402      	add	r2, r0
 800beaa:	4282      	cmp	r2, r0
 800beac:	d100      	bne.n	800beb0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 800beae:	4770      	bx	lr
 800beb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800beb4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800beb8:	e7f7      	b.n	800beaa <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>
	...

0800bebc <c05e60d8280ba6d1de28a642094ab91f1147ad34>:
 800bebc:	b513      	push	{r0, r1, r4, lr}
 800bebe:	b920      	cbnz	r0, 800beca <c05e60d8280ba6d1de28a642094ab91f1147ad34+0xe>
 800bec0:	4907      	ldr	r1, [pc, #28]	; (800bee0 <c05e60d8280ba6d1de28a642094ab91f1147ad34+0x24>)
 800bec2:	4808      	ldr	r0, [pc, #32]	; (800bee4 <c05e60d8280ba6d1de28a642094ab91f1147ad34+0x28>)
 800bec4:	2261      	movs	r2, #97	; 0x61
 800bec6:	f7f5 fd07 	bl	80018d8 <EXPECT_OnAbortHandler>
 800beca:	6983      	ldr	r3, [r0, #24]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800bed2:	6884      	ldr	r4, [r0, #8]
 800bed4:	7b01      	ldrb	r1, [r0, #12]
 800bed6:	6800      	ldr	r0, [r0, #0]
 800bed8:	47a0      	blx	r4
 800beda:	b002      	add	sp, #8
 800bedc:	bd10      	pop	{r4, pc}
 800bede:	bf00      	nop
 800bee0:	0801f171 	.word	0x0801f171
 800bee4:	0801f4ff 	.word	0x0801f4ff

0800bee8 <EMBENET_UDP_RegisterSocket>:
 800bee8:	b508      	push	{r3, lr}
 800beea:	f00e fa1f 	bl	801a32c <76cd6211f2085e3d946bd747f2187c2e80301a64>
 800beee:	2805      	cmp	r0, #5
 800bef0:	bf96      	itet	ls
 800bef2:	4b02      	ldrls	r3, [pc, #8]	; (800befc <EMBENET_UDP_RegisterSocket+0x14>)
 800bef4:	2001      	movhi	r0, #1
 800bef6:	5c18      	ldrbls	r0, [r3, r0]
 800bef8:	bd08      	pop	{r3, pc}
 800befa:	bf00      	nop
 800befc:	0801f2c2 	.word	0x0801f2c2

0800bf00 <EMBENET_UDP_UnregisterSocket>:
 800bf00:	b508      	push	{r3, lr}
 800bf02:	f00e fa31 	bl	801a368 <008a3a43d97272e7b0f59f361a8c8969876e60dd>
 800bf06:	2805      	cmp	r0, #5
 800bf08:	bf96      	itet	ls
 800bf0a:	4b02      	ldrls	r3, [pc, #8]	; (800bf14 <EMBENET_UDP_UnregisterSocket+0x14>)
 800bf0c:	2001      	movhi	r0, #1
 800bf0e:	5c18      	ldrbls	r0, [r3, r0]
 800bf10:	bd08      	pop	{r3, pc}
 800bf12:	bf00      	nop
 800bf14:	0801f2c2 	.word	0x0801f2c2

0800bf18 <EMBENET_UDP_Send>:
 800bf18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	4621      	mov	r1, r4
 800bf20:	b15c      	cbz	r4, 800bf3a <EMBENET_UDP_Send+0x22>
 800bf22:	b153      	cbz	r3, 800bf3a <EMBENET_UDP_Send+0x22>
 800bf24:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800bf28:	9400      	str	r4, [sp, #0]
 800bf2a:	f00e fa2f 	bl	801a38c <09c9c31144d89e446fc56189171072a9b46992fd>
 800bf2e:	2805      	cmp	r0, #5
 800bf30:	d805      	bhi.n	800bf3e <EMBENET_UDP_Send+0x26>
 800bf32:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <EMBENET_UDP_Send+0x2c>)
 800bf34:	5c18      	ldrb	r0, [r3, r0]
 800bf36:	b003      	add	sp, #12
 800bf38:	bd30      	pop	{r4, r5, pc}
 800bf3a:	2002      	movs	r0, #2
 800bf3c:	e7fb      	b.n	800bf36 <EMBENET_UDP_Send+0x1e>
 800bf3e:	2001      	movs	r0, #1
 800bf40:	e7f9      	b.n	800bf36 <EMBENET_UDP_Send+0x1e>
 800bf42:	bf00      	nop
 800bf44:	0801f2c2 	.word	0x0801f2c2

0800bf48 <EMBENET_NODE_GetLocalTime>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4b13      	ldr	r3, [pc, #76]	; (800bf98 <EMBENET_NODE_GetLocalTime+0x50>)
 800bf4c:	681c      	ldr	r4, [r3, #0]
 800bf4e:	f504 5540 	add.w	r5, r4, #12288	; 0x3000
 800bf52:	f7f9 ff97 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800bf56:	f002 fe0b 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800bf5a:	f8d5 3238 	ldr.w	r3, [r5, #568]	; 0x238
 800bf5e:	4283      	cmp	r3, r0
 800bf60:	d909      	bls.n	800bf76 <EMBENET_NODE_GetLocalTime+0x2e>
 800bf62:	f243 2130 	movw	r1, #12848	; 0x3230
 800bf66:	1866      	adds	r6, r4, r1
 800bf68:	5863      	ldr	r3, [r4, r1]
 800bf6a:	6872      	ldr	r2, [r6, #4]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	f142 0200 	adc.w	r2, r2, #0
 800bf72:	5063      	str	r3, [r4, r1]
 800bf74:	6072      	str	r2, [r6, #4]
 800bf76:	f243 2330 	movw	r3, #12848	; 0x3230
 800bf7a:	f8c5 0238 	str.w	r0, [r5, #568]	; 0x238
 800bf7e:	58e5      	ldr	r5, [r4, r3]
 800bf80:	4604      	mov	r4, r0
 800bf82:	f7f9 ff9f 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800bf86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	f7f4 fe3c 	bl	8000c0c <__aeabi_uldivmod>
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	bf00      	nop
 800bf98:	20000040 	.word	0x20000040

0800bf9c <00aa5e9c55481e7f5f1b699343b2f81ea40b5596>:
 800bf9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfa2:	b925      	cbnz	r5, 800bfae <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0x12>
 800bfa4:	492a      	ldr	r1, [pc, #168]	; (800c050 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xb4>)
 800bfa6:	482b      	ldr	r0, [pc, #172]	; (800c054 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xb8>)
 800bfa8:	2294      	movs	r2, #148	; 0x94
 800bfaa:	f7f5 fc95 	bl	80018d8 <EXPECT_OnAbortHandler>
 800bfae:	696b      	ldr	r3, [r5, #20]
 800bfb0:	4c29      	ldr	r4, [pc, #164]	; (800c058 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xbc>)
 800bfb2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800c05c <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xc0>
 800bfb6:	6822      	ldr	r2, [r4, #0]
 800bfb8:	fab3 f383 	clz	r3, r3
 800bfbc:	f500 70c9 	add.w	r0, r0, #402	; 0x192
 800bfc0:	095b      	lsrs	r3, r3, #5
 800bfc2:	07db      	lsls	r3, r3, #31
 800bfc4:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 800bfc8:	616b      	str	r3, [r5, #20]
 800bfca:	7910      	ldrb	r0, [r2, #4]
 800bfcc:	9201      	str	r2, [sp, #4]
 800bfce:	2101      	movs	r1, #1
 800bfd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfd4:	f8cd 9000 	str.w	r9, [sp]
 800bfd8:	f002 fcba 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800bfdc:	f7ff ffb4 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 800bfe0:	6824      	ldr	r4, [r4, #0]
 800bfe2:	462e      	mov	r6, r5
 800bfe4:	f504 5449 	add.w	r4, r4, #12864	; 0x3240
 800bfe8:	f505 7ab0 	add.w	sl, r5, #352	; 0x160
 800bfec:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800bff0:	2700      	movs	r7, #0
 800bff2:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
 800bff6:	7920      	ldrb	r0, [r4, #4]
 800bff8:	281f      	cmp	r0, #31
 800bffa:	d020      	beq.n	800c03e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 800bffc:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c004:	bf08      	it	eq
 800c006:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800c00a:	d018      	beq.n	800c03e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 800c00c:	6921      	ldr	r1, [r4, #16]
 800c00e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800c012:	696b      	ldr	r3, [r5, #20]
 800c014:	fba1 2108 	umull	r2, r1, r1, r8
 800c018:	fb08 110c 	mla	r1, r8, ip, r1
 800c01c:	eb17 0c03 	adds.w	ip, r7, r3
 800c020:	ebb2 020c 	subs.w	r2, r2, ip
 800c024:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800c028:	eb61 010c 	sbc.w	r1, r1, ip
 800c02c:	4593      	cmp	fp, r2
 800c02e:	eb77 0101 	sbcs.w	r1, r7, r1
 800c032:	d304      	bcc.n	800c03e <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0xa2>
 800c034:	e9cd 9400 	strd	r9, r4, [sp]
 800c038:	2101      	movs	r1, #1
 800c03a:	f002 fc89 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800c03e:	3620      	adds	r6, #32
 800c040:	4556      	cmp	r6, sl
 800c042:	f104 0420 	add.w	r4, r4, #32
 800c046:	d1d6      	bne.n	800bff6 <00aa5e9c55481e7f5f1b699343b2f81ea40b5596+0x5a>
 800c048:	b003      	add	sp, #12
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04e:	bf00      	nop
 800c050:	0801f171 	.word	0x0801f171
 800c054:	0801f4ff 	.word	0x0801f4ff
 800c058:	20000040 	.word	0x20000040
 800c05c:	0800bebd 	.word	0x0800bebd

0800c060 <EMBENET_NODE_Proc>:
 800c060:	b510      	push	{r4, lr}
 800c062:	4c1b      	ldr	r4, [pc, #108]	; (800c0d0 <EMBENET_NODE_Proc+0x70>)
 800c064:	f003 fbe2 	bl	800f82c <ef153328aa1040603d831896041b65ee1135a0ee>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c06e:	f893 33a0 	ldrb.w	r3, [r3, #928]	; 0x3a0
 800c072:	b363      	cbz	r3, 800c0ce <EMBENET_NODE_Proc+0x6e>
 800c074:	f7ff ff68 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	f503 534e 	add.w	r3, r3, #13184	; 0x3380
 800c07e:	3330      	adds	r3, #48	; 0x30
 800c080:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800c084:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c088:	1a80      	subs	r0, r0, r2
 800c08a:	eb61 0103 	sbc.w	r1, r1, r3
 800c08e:	f640 73a1 	movw	r3, #4001	; 0xfa1
 800c092:	4298      	cmp	r0, r3
 800c094:	f171 0100 	sbcs.w	r1, r1, #0
 800c098:	d319      	bcc.n	800c0ce <EMBENET_NODE_Proc+0x6e>
 800c09a:	f007 f8dd 	bl	8013258 <c37c52d5fcbad41724f29f060633d7770e309943>
 800c09e:	f009 fa5f 	bl	8015560 <ae19410868335b64a066b6d27dd8944b8c55271b>
 800c0a2:	f007 fef5 	bl	8013e90 <53bc4933f2d7947a48dac4db096e7506c8e8667c>
 800c0a6:	f00e f886 	bl	801a1b6 <ac88c013d0ed7f5b742e43c5288111c1f79c1a36>
 800c0aa:	f00d ff79 	bl	8019fa0 <7c27c3f80cc08068333c14ac1b724ab469f4969f>
 800c0ae:	f00b fd61 	bl	8017b74 <329b6edcbe2eed1a451d1df4c9584a68c1390127>
 800c0b2:	f00c fb03 	bl	80186bc <cb5093c001ef61253a4d1da1a0188ff7663f0307>
 800c0b6:	f00c fb6d 	bl	8018794 <80b9218102010b739652963fa2fb0c366b6f860e>
 800c0ba:	f00c ff93 	bl	8018fe4 <14e0e80443fa04d4f8b6b44eccb243ea385eea36>
 800c0be:	f003 fa9f 	bl	800f600 <b3455a2b4a7c58716d32ab9ee32d439bee656865>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 800c0ce:	bd10      	pop	{r4, pc}
 800c0d0:	20000040 	.word	0x20000040

0800c0d4 <EMBENET_NODE_TaskCreate>:
 800c0d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c0d8:	4688      	mov	r8, r1
 800c0da:	4607      	mov	r7, r0
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d038      	beq.n	800c152 <EMBENET_NODE_TaskCreate+0x7e>
 800c0e0:	4b22      	ldr	r3, [pc, #136]	; (800c16c <EMBENET_NODE_TaskCreate+0x98>)
 800c0e2:	681e      	ldr	r6, [r3, #0]
 800c0e4:	f506 5349 	add.w	r3, r6, #12864	; 0x3240
 800c0e8:	2500      	movs	r5, #0
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	016c      	lsls	r4, r5, #5
 800c0ee:	5d1a      	ldrb	r2, [r3, r4]
 800c0f0:	2a1f      	cmp	r2, #31
 800c0f2:	d131      	bne.n	800c158 <EMBENET_NODE_TaskCreate+0x84>
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	f002 fc01 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 800c0fa:	f505 73c9 	add.w	r3, r5, #402	; 0x192
 800c0fe:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800c102:	281f      	cmp	r0, #31
 800c104:	7118      	strb	r0, [r3, #4]
 800c106:	d01a      	beq.n	800c13e <EMBENET_NODE_TaskCreate+0x6a>
 800c108:	1c6a      	adds	r2, r5, #1
 800c10a:	eb06 1242 	add.w	r2, r6, r2, lsl #5
 800c10e:	f243 2328 	movw	r3, #12840	; 0x3228
 800c112:	f243 2158 	movw	r1, #12888	; 0x3258
 800c116:	50d7      	str	r7, [r2, r3]
 800c118:	1933      	adds	r3, r6, r4
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	f843 8001 	str.w	r8, [r3, r1]
 800c122:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 800c126:	f04f 31ff 	mov.w	r1, #4294967295
 800c12a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c12e:	f243 232c 	movw	r3, #12844	; 0x322c
 800c132:	21ff      	movs	r1, #255	; 0xff
 800c134:	54d1      	strb	r1, [r2, r3]
 800c136:	4628      	mov	r0, r5
 800c138:	b002      	add	sp, #8
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	2304      	movs	r3, #4
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4a0b      	ldr	r2, [pc, #44]	; (800c170 <EMBENET_NODE_TaskCreate+0x9c>)
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <EMBENET_NODE_TaskCreate+0xa0>)
 800c146:	9301      	str	r3, [sp, #4]
 800c148:	ab02      	add	r3, sp, #8
 800c14a:	e913 0003 	ldmdb	r3, {r0, r1}
 800c14e:	f004 fa71 	bl	8010634 <LOGGER_PrintLine>
 800c152:	f04f 35ff 	mov.w	r5, #4294967295
 800c156:	e7ee      	b.n	800c136 <EMBENET_NODE_TaskCreate+0x62>
 800c158:	3501      	adds	r5, #1
 800c15a:	2d0b      	cmp	r5, #11
 800c15c:	d1c6      	bne.n	800c0ec <EMBENET_NODE_TaskCreate+0x18>
 800c15e:	2304      	movs	r3, #4
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	4b04      	ldr	r3, [pc, #16]	; (800c174 <EMBENET_NODE_TaskCreate+0xa0>)
 800c164:	4a04      	ldr	r2, [pc, #16]	; (800c178 <EMBENET_NODE_TaskCreate+0xa4>)
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	e7ee      	b.n	800c148 <EMBENET_NODE_TaskCreate+0x74>
 800c16a:	bf00      	nop
 800c16c:	20000040 	.word	0x20000040
 800c170:	0801f1f5 	.word	0x0801f1f5
 800c174:	0801f1d0 	.word	0x0801f1d0
 800c178:	0801f22b 	.word	0x0801f22b

0800c17c <EMBENET_NODE_Init>:
 800c17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c180:	b085      	sub	sp, #20
 800c182:	2305      	movs	r3, #5
 800c184:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800c2a0 <EMBENET_NODE_Init+0x124>
 800c188:	9302      	str	r3, [sp, #8]
 800c18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c18e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800c2a4 <EMBENET_NODE_Init+0x128>
 800c192:	4a45      	ldr	r2, [pc, #276]	; (800c2a8 <EMBENET_NODE_Init+0x12c>)
 800c194:	af02      	add	r7, sp, #8
 800c196:	4604      	mov	r4, r0
 800c198:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c19c:	f004 fa4a 	bl	8010634 <LOGGER_PrintLine>
 800c1a0:	f8d9 6000 	ldr.w	r6, [r9]
 800c1a4:	b134      	cbz	r4, 800c1b4 <EMBENET_NODE_Init+0x38>
 800c1a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1a8:	f506 5548 	add.w	r5, r6, #12800	; 0x3200
 800c1ac:	3510      	adds	r5, #16
 800c1ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f506 5349 	add.w	r3, r6, #12864	; 0x3240
 800c1ba:	f04f 0c1f 	mov.w	ip, #31
 800c1be:	4615      	mov	r5, r2
 800c1c0:	24ff      	movs	r4, #255	; 0xff
 800c1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c6:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	3201      	adds	r2, #1
 800c1ce:	2a0b      	cmp	r2, #11
 800c1d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c1d4:	f883 c004 	strb.w	ip, [r3, #4]
 800c1d8:	609d      	str	r5, [r3, #8]
 800c1da:	731c      	strb	r4, [r3, #12]
 800c1dc:	619d      	str	r5, [r3, #24]
 800c1de:	f103 0320 	add.w	r3, r3, #32
 800c1e2:	d1f2      	bne.n	800c1ca <EMBENET_NODE_Init+0x4e>
 800c1e4:	f506 5440 	add.w	r4, r6, #12288	; 0x3000
 800c1e8:	f8c4 5238 	str.w	r5, [r4, #568]	; 0x238
 800c1ec:	f002 fb6e 	bl	800e8cc <bbe099565971cd2d437b6a8e152f225cced7c4ee>
 800c1f0:	f7f9 ff72 	bl	80060d8 <EMBENET_RADIO_Init>
 800c1f4:	f7f9 fd78 	bl	8005ce8 <EMBENET_AES128_Init>
 800c1f8:	f003 fb0a 	bl	800f810 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505>
 800c1fc:	f000 f9c0 	bl	800c580 <62d16b48e9529b8b29eb67945bd8081213959681>
 800c200:	f001 fc8e 	bl	800db20 <8651bfcf35514b04809eb22bd8aa118172b46770>
 800c204:	f002 fce2 	bl	800ebcc <da97346f7fa50b65fe6c97432d29b132cbef037c>
 800c208:	f004 ffdc 	bl	80111c4 <36fc8fd3531c1a40f267c168c66ed988dd7f65d6>
 800c20c:	f002 fd5a 	bl	800ecc4 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca>
 800c210:	f006 ff5e 	bl	80130d0 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79>
 800c214:	f007 ff70 	bl	80140f8 <eea52b91d7a1bb91cb2c756cbb75125f1315d891>
 800c218:	f009 f950 	bl	80154bc <fbe24b77062e695b9b69518d2423c2cc606c842f>
 800c21c:	f000 fad8 	bl	800c7d0 <a65a9e0e9d2172731582a842552346b36304a3e3>
 800c220:	f007 fdfa 	bl	8013e18 <d3d7042d854d8905136f03fa99a8893947aafdc7>
 800c224:	f007 f8b6 	bl	8013394 <bcbd76277dc83b5a545ee18a3f2075697c040c84>
 800c228:	f00d fe98 	bl	8019f5c <082eefb804d1e0ed7226bf17620f026c0888c274>
 800c22c:	f00d ffb6 	bl	801a19c <73cd113f0512e09e8865b1dc11046143bbfb5214>
 800c230:	f00b fc9e 	bl	8017b70 <294ac47dbf0553b0bc1a0d13a73dce6f2c303667>
 800c234:	f00c fa40 	bl	80186b8 <1d524c1b514218a64c10ce09ef25ee3b26d5aac8>
 800c238:	f00c fe44 	bl	8018ec4 <cb684a375f86ba40b2b36632ce4bd2a58554e76c>
 800c23c:	f00e f86e 	bl	801a31c <9aa1c7f7136549b4c61c7ca6983f673760c5352f>
 800c240:	f003 f9bc 	bl	800f5bc <781f8340fa417dd87327132209f6d0b889d0ff2a>
 800c244:	f8d9 3000 	ldr.w	r3, [r9]
 800c248:	4818      	ldr	r0, [pc, #96]	; (800c2ac <EMBENET_NODE_Init+0x130>)
 800c24a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c24e:	f506 5148 	add.w	r1, r6, #12800	; 0x3200
 800c252:	f883 53a0 	strb.w	r5, [r3, #928]	; 0x3a0
 800c256:	3128      	adds	r1, #40	; 0x28
 800c258:	f7ff ff3c 	bl	800c0d4 <EMBENET_NODE_TaskCreate>
 800c25c:	2205      	movs	r2, #5
 800c25e:	e9cd 2802 	strd	r2, r8, [sp, #8]
 800c262:	4603      	mov	r3, r0
 800c264:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
 800c268:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <EMBENET_NODE_Init+0x134>)
 800c26a:	f8c4 523c 	str.w	r5, [r4, #572]	; 0x23c
 800c26e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c272:	f004 f9df 	bl	8010634 <LOGGER_PrintLine>
 800c276:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
 800c27a:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 800c27e:	eb06 1643 	add.w	r6, r6, r3, lsl #5
 800c282:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <EMBENET_NODE_Init+0x138>)
 800c284:	7930      	ldrb	r0, [r6, #4]
 800c286:	9601      	str	r6, [sp, #4]
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 800c28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c292:	2101      	movs	r1, #1
 800c294:	f002 fb5c 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800c298:	2000      	movs	r0, #0
 800c29a:	b005      	add	sp, #20
 800c29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2a0:	0801f1d0 	.word	0x0801f1d0
 800c2a4:	20000040 	.word	0x20000040
 800c2a8:	0801f261 	.word	0x0801f261
 800c2ac:	0800bf9d 	.word	0x0800bf9d
 800c2b0:	0801f27b 	.word	0x0801f27b
 800c2b4:	0800bebd 	.word	0x0800bebd

0800c2b8 <EMBENET_NODE_TaskSchedule>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	280a      	cmp	r0, #10
 800c2be:	b08d      	sub	sp, #52	; 0x34
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	4698      	mov	r8, r3
 800c2c8:	f200 80b2 	bhi.w	800c430 <EMBENET_NODE_TaskSchedule+0x178>
 800c2cc:	2901      	cmp	r1, #1
 800c2ce:	f200 80af 	bhi.w	800c430 <EMBENET_NODE_TaskSchedule+0x178>
 800c2d2:	4b5a      	ldr	r3, [pc, #360]	; (800c43c <EMBENET_NODE_TaskSchedule+0x184>)
 800c2d4:	681e      	ldr	r6, [r3, #0]
 800c2d6:	eb06 1740 	add.w	r7, r6, r0, lsl #5
 800c2da:	f507 5b40 	add.w	fp, r7, #12288	; 0x3000
 800c2de:	f89b 3244 	ldrb.w	r3, [fp, #580]	; 0x244
 800c2e2:	2b1f      	cmp	r3, #31
 800c2e4:	f000 80a4 	beq.w	800c430 <EMBENET_NODE_TaskSchedule+0x178>
 800c2e8:	f100 0a01 	add.w	sl, r0, #1
 800c2ec:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 800c2f0:	f243 2328 	movw	r3, #12840	; 0x3228
 800c2f4:	f85a 3003 	ldr.w	r3, [sl, r3]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 809b 	beq.w	800c434 <EMBENET_NODE_TaskSchedule+0x17c>
 800c2fe:	2901      	cmp	r1, #1
 800c300:	d154      	bne.n	800c3ac <EMBENET_NODE_TaskSchedule+0xf4>
 800c302:	a909      	add	r1, sp, #36	; 0x24
 800c304:	a80a      	add	r0, sp, #40	; 0x28
 800c306:	f007 f821 	bl	801334c <423de69afc5c7b88ba71928d815161412a3b9f11>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d04a      	beq.n	800c3a4 <EMBENET_NODE_TaskSchedule+0xec>
 800c30e:	4b4c      	ldr	r3, [pc, #304]	; (800c440 <EMBENET_NODE_TaskSchedule+0x188>)
 800c310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c318:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c31c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c320:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800c324:	fba3 0202 	umull	r0, r2, r3, r2
 800c328:	fb03 2301 	mla	r3, r3, r1, r2
 800c32c:	9305      	str	r3, [sp, #20]
 800c32e:	9004      	str	r0, [sp, #16]
 800c330:	f002 fc1e 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800c334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	1c6b      	adds	r3, r5, #1
 800c33a:	9306      	str	r3, [sp, #24]
 800c33c:	f148 0300 	adc.w	r3, r8, #0
 800c340:	9307      	str	r3, [sp, #28]
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	1ac0      	subs	r0, r0, r3
 800c346:	eb61 0101 	sbc.w	r1, r1, r1
 800c34a:	2300      	movs	r3, #0
 800c34c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c350:	f7f4 fc0c 	bl	8000b6c <__aeabi_ldivmod>
 800c354:	9b04      	ldr	r3, [sp, #16]
 800c356:	18c0      	adds	r0, r0, r3
 800c358:	9b05      	ldr	r3, [sp, #20]
 800c35a:	eb43 0101 	adc.w	r1, r3, r1
 800c35e:	9b06      	ldr	r3, [sp, #24]
 800c360:	4298      	cmp	r0, r3
 800c362:	9b07      	ldr	r3, [sp, #28]
 800c364:	4199      	sbcs	r1, r3
 800c366:	d267      	bcs.n	800c438 <EMBENET_NODE_TaskSchedule+0x180>
 800c368:	f243 232c 	movw	r3, #12844	; 0x322c
 800c36c:	f504 74c9 	add.w	r4, r4, #402	; 0x192
 800c370:	f80a 9003 	strb.w	r9, [sl, r3]
 800c374:	f243 2350 	movw	r3, #12880	; 0x3250
 800c378:	18fa      	adds	r2, r7, r3
 800c37a:	50fd      	str	r5, [r7, r3]
 800c37c:	9b04      	ldr	r3, [sp, #16]
 800c37e:	f8c2 8004 	str.w	r8, [r2, #4]
 800c382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c386:	1aea      	subs	r2, r5, r3
 800c388:	eb06 1444 	add.w	r4, r6, r4, lsl #5
 800c38c:	4b2d      	ldr	r3, [pc, #180]	; (800c444 <EMBENET_NODE_TaskSchedule+0x18c>)
 800c38e:	f89b 0244 	ldrb.w	r0, [fp, #580]	; 0x244
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	434a      	muls	r2, r1
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	9401      	str	r4, [sp, #4]
 800c39a:	4649      	mov	r1, r9
 800c39c:	f002 fad8 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e000      	b.n	800c3a6 <EMBENET_NODE_TaskSchedule+0xee>
 800c3a4:	2004      	movs	r0, #4
 800c3a6:	b00d      	add	sp, #52	; 0x34
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ac:	f7ff fdcc 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 800c3b0:	4285      	cmp	r5, r0
 800c3b2:	eb78 0101 	sbcs.w	r1, r8, r1
 800c3b6:	d33f      	bcc.n	800c438 <EMBENET_NODE_TaskSchedule+0x180>
 800c3b8:	f243 232c 	movw	r3, #12844	; 0x322c
 800c3bc:	f04f 0900 	mov.w	r9, #0
 800c3c0:	f80a 9003 	strb.w	r9, [sl, r3]
 800c3c4:	f243 2a50 	movw	sl, #12880	; 0x3250
 800c3c8:	eb07 020a 	add.w	r2, r7, sl
 800c3cc:	f847 500a 	str.w	r5, [r7, sl]
 800c3d0:	f8c2 8004 	str.w	r8, [r2, #4]
 800c3d4:	9203      	str	r2, [sp, #12]
 800c3d6:	f7f9 fd55 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800c3da:	9a03      	ldr	r2, [sp, #12]
 800c3dc:	6855      	ldr	r5, [r2, #4]
 800c3de:	f857 200a 	ldr.w	r2, [r7, sl]
 800c3e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c3e6:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
 800c3ea:	fba2 2100 	umull	r2, r1, r2, r0
 800c3ee:	fb00 1105 	mla	r1, r0, r5, r1
 800c3f2:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800c3f6:	f243 2030 	movw	r0, #12848	; 0x3230
 800c3fa:	5835      	ldr	r5, [r6, r0]
 800c3fc:	eb19 0003 	adds.w	r0, r9, r3
 800c400:	1a12      	subs	r2, r2, r0
 800c402:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c406:	eb61 0105 	sbc.w	r1, r1, r5
 800c40a:	4290      	cmp	r0, r2
 800c40c:	eb79 0101 	sbcs.w	r1, r9, r1
 800c410:	d30b      	bcc.n	800c42a <EMBENET_NODE_TaskSchedule+0x172>
 800c412:	f504 74c9 	add.w	r4, r4, #402	; 0x192
 800c416:	490b      	ldr	r1, [pc, #44]	; (800c444 <EMBENET_NODE_TaskSchedule+0x18c>)
 800c418:	f89b 0244 	ldrb.w	r0, [fp, #580]	; 0x244
 800c41c:	9100      	str	r1, [sp, #0]
 800c41e:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800c422:	9601      	str	r6, [sp, #4]
 800c424:	2101      	movs	r1, #1
 800c426:	f002 fa93 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800c42a:	f7f9 fd4b 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800c42e:	e7b7      	b.n	800c3a0 <EMBENET_NODE_TaskSchedule+0xe8>
 800c430:	2002      	movs	r0, #2
 800c432:	e7b8      	b.n	800c3a6 <EMBENET_NODE_TaskSchedule+0xee>
 800c434:	2001      	movs	r0, #1
 800c436:	e7b6      	b.n	800c3a6 <EMBENET_NODE_TaskSchedule+0xee>
 800c438:	2005      	movs	r0, #5
 800c43a:	e7b4      	b.n	800c3a6 <EMBENET_NODE_TaskSchedule+0xee>
 800c43c:	20000040 	.word	0x20000040
 800c440:	0801f014 	.word	0x0801f014
 800c444:	0800bebd 	.word	0x0800bebd

0800c448 <EMBENET_NODE_TaskCancel>:
 800c448:	280a      	cmp	r0, #10
 800c44a:	b508      	push	{r3, lr}
 800c44c:	d80c      	bhi.n	800c468 <EMBENET_NODE_TaskCancel+0x20>
 800c44e:	4b07      	ldr	r3, [pc, #28]	; (800c46c <EMBENET_NODE_TaskCancel+0x24>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f500 70c9 	add.w	r0, r0, #402	; 0x192
 800c456:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 800c45a:	7918      	ldrb	r0, [r3, #4]
 800c45c:	281f      	cmp	r0, #31
 800c45e:	d003      	beq.n	800c468 <EMBENET_NODE_TaskCancel+0x20>
 800c460:	f002 fb6e 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 800c464:	2000      	movs	r0, #0
 800c466:	bd08      	pop	{r3, pc}
 800c468:	2002      	movs	r0, #2
 800c46a:	e7fc      	b.n	800c466 <EMBENET_NODE_TaskCancel+0x1e>
 800c46c:	20000040 	.word	0x20000040

0800c470 <EMBENET_NODE_GetBorderRouterAddress>:
 800c470:	b508      	push	{r3, lr}
 800c472:	f00c fdc7 	bl	8019004 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 800c476:	f080 0001 	eor.w	r0, r0, #1
 800c47a:	b2c0      	uxtb	r0, r0
 800c47c:	bd08      	pop	{r3, pc}

0800c47e <EMBENET_NODE_GetUID>:
 800c47e:	b507      	push	{r0, r1, r2, lr}
 800c480:	2002      	movs	r0, #2
 800c482:	f000 f8d1 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800c486:	2208      	movs	r2, #8
 800c488:	1c41      	adds	r1, r0, #1
 800c48a:	4668      	mov	r0, sp
 800c48c:	f7ff fd0b 	bl	800bea6 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800c490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c494:	b003      	add	sp, #12
 800c496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c49c <2b020927d3c6eb407223a1baa3d6ce3597a3f88d>:
 800c49c:	b510      	push	{r4, lr}
 800c49e:	4b11      	ldr	r3, [pc, #68]	; (800c4e4 <2b020927d3c6eb407223a1baa3d6ce3597a3f88d+0x48>)
 800c4a0:	681c      	ldr	r4, [r3, #0]
 800c4a2:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 800c4a6:	f006 febf 	bl	8013228 <f245cef569e100f3b51b8078c1d070e2f387d00a>
 800c4aa:	f009 f82f 	bl	801550c <5b77f5d059012f38360090be73e77f682e6af1b1>
 800c4ae:	f007 fcc7 	bl	8013e40 <530f39758cfcff95a518bf89df4776da9faf92b4>
 800c4b2:	f00d fe7f 	bl	801a1b4 <6607d1a8e0084dff834e59246aa78b5f6da467d9>
 800c4b6:	f00d fd5d 	bl	8019f74 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c>
 800c4ba:	f00b fb5a 	bl	8017b72 <7642e1952f3dfa50bc246e452b3db5bce6f65fea>
 800c4be:	f00c f8fc 	bl	80186ba <443e8a131efc1d3c180cec49dabd3d3f1c58eeac>
 800c4c2:	f00c f959 	bl	8018778 <df2f78a5f231f323fc241372a3a00cee3087c107>
 800c4c6:	f00c fd73 	bl	8018fb0 <a60e70bd13e8775612e7fe5ae94a36c965317289>
 800c4ca:	f003 f891 	bl	800f5f0 <7d1d6e9032260bf29a701dae9a5813b859a1535c>
 800c4ce:	f8d4 43b0 	ldr.w	r4, [r4, #944]	; 0x3b0
 800c4d2:	b12c      	cbz	r4, 800c4e0 <2b020927d3c6eb407223a1baa3d6ce3597a3f88d+0x44>
 800c4d4:	f7ff ffd3 	bl	800c47e <EMBENET_NODE_GetUID>
 800c4d8:	4623      	mov	r3, r4
 800c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4de:	4718      	bx	r3
 800c4e0:	bd10      	pop	{r4, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000040 	.word	0x20000040

0800c4e8 <EMBENET_NODE_Join>:
 800c4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	b320      	cbz	r0, 800c538 <EMBENET_NODE_Join+0x50>
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <EMBENET_NODE_Join+0x54>)
 800c4f0:	4a13      	ldr	r2, [pc, #76]	; (800c540 <EMBENET_NODE_Join+0x58>)
 800c4f2:	681d      	ldr	r5, [r3, #0]
 800c4f4:	2305      	movs	r3, #5
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	4b12      	ldr	r3, [pc, #72]	; (800c544 <EMBENET_NODE_Join+0x5c>)
 800c4fa:	9301      	str	r3, [sp, #4]
 800c4fc:	ab02      	add	r3, sp, #8
 800c4fe:	e913 0003 	ldmdb	r3, {r0, r1}
 800c502:	f004 f897 	bl	8010634 <LOGGER_PrintLine>
 800c506:	f505 5347 	add.w	r3, r5, #12736	; 0x31c0
 800c50a:	4622      	mov	r2, r4
 800c50c:	3306      	adds	r3, #6
 800c50e:	f104 0120 	add.w	r1, r4, #32
 800c512:	f852 0b04 	ldr.w	r0, [r2], #4
 800c516:	f843 0b04 	str.w	r0, [r3], #4
 800c51a:	428a      	cmp	r2, r1
 800c51c:	d1f9      	bne.n	800c512 <EMBENET_NODE_Join+0x2a>
 800c51e:	4621      	mov	r1, r4
 800c520:	2001      	movs	r0, #1
 800c522:	f004 fe6b 	bl	80111fc <bdbe454f364e40446632df307cd018fd5121d6b0>
 800c526:	f104 0010 	add.w	r0, r4, #16
 800c52a:	f002 fbdb 	bl	800ece4 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8>
 800c52e:	f7ff ffb5 	bl	800c49c <2b020927d3c6eb407223a1baa3d6ce3597a3f88d>
 800c532:	2000      	movs	r0, #0
 800c534:	b003      	add	sp, #12
 800c536:	bd30      	pop	{r4, r5, pc}
 800c538:	2002      	movs	r0, #2
 800c53a:	e7fb      	b.n	800c534 <EMBENET_NODE_Join+0x4c>
 800c53c:	20000040 	.word	0x20000040
 800c540:	0801f2a4 	.word	0x0801f2a4
 800c544:	0801f1d0 	.word	0x0801f1d0

0800c548 <EMBENET_NODE_GetRandomValue>:
 800c548:	f002 bb7e 	b.w	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>

0800c54c <EMBENET_NODE_GetVersion>:
 800c54c:	b082      	sub	sp, #8
 800c54e:	2000      	movs	r0, #0
 800c550:	b002      	add	sp, #8
 800c552:	4770      	bx	lr

0800c554 <EMBENET_NODE_GetGroupCount>:
 800c554:	f00d bd96 	b.w	801a084 <84780c9f08e19cea1884da40f03f0c5650f281d0>

0800c558 <EMBENET_NODE_GetGroupByIndex>:
 800c558:	b507      	push	{r0, r1, r2, lr}
 800c55a:	2300      	movs	r3, #0
 800c55c:	a901      	add	r1, sp, #4
 800c55e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c562:	f00d fd9f 	bl	801a0a4 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>
 800c566:	b128      	cbz	r0, 800c574 <EMBENET_NODE_GetGroupByIndex+0x1c>
 800c568:	2202      	movs	r2, #2
 800c56a:	a901      	add	r1, sp, #4
 800c56c:	f10d 0006 	add.w	r0, sp, #6
 800c570:	f7ff fc99 	bl	800bea6 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800c574:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c578:	b003      	add	sp, #12
 800c57a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c580 <62d16b48e9529b8b29eb67945bd8081213959681>:
 800c580:	b530      	push	{r4, r5, lr}
 800c582:	4b21      	ldr	r3, [pc, #132]	; (800c608 <62d16b48e9529b8b29eb67945bd8081213959681+0x88>)
 800c584:	681c      	ldr	r4, [r3, #0]
 800c586:	f604 258c 	addw	r5, r4, #2700	; 0xa8c
 800c58a:	b089      	sub	sp, #36	; 0x24
 800c58c:	2245      	movs	r2, #69	; 0x45
 800c58e:	2100      	movs	r1, #0
 800c590:	4628      	mov	r0, r5
 800c592:	f00f fd09 	bl	801bfa8 <memset>
 800c596:	2304      	movs	r3, #4
 800c598:	f884 3a8d 	strb.w	r3, [r4, #2701]	; 0xa8d
 800c59c:	23ca      	movs	r3, #202	; 0xca
 800c59e:	f884 3a8e 	strb.w	r3, [r4, #2702]	; 0xa8e
 800c5a2:	23fe      	movs	r3, #254	; 0xfe
 800c5a4:	f884 3a8f 	strb.w	r3, [r4, #2703]	; 0xa8f
 800c5a8:	2305      	movs	r3, #5
 800c5aa:	f884 3ac0 	strb.w	r3, [r4, #2752]	; 0xac0
 800c5ae:	f001 fa85 	bl	800dabc <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 800c5b2:	6803      	ldr	r3, [r0, #0]
 800c5b4:	f8c4 3ac1 	str.w	r3, [r4, #2753]	; 0xac1
 800c5b8:	6843      	ldr	r3, [r0, #4]
 800c5ba:	f8c4 3ac5 	str.w	r3, [r4, #2757]	; 0xac5
 800c5be:	2302      	movs	r3, #2
 800c5c0:	f884 3aaf 	strb.w	r3, [r4, #2735]	; 0xaaf
 800c5c4:	f7f9 fc9e 	bl	8005f04 <EMBENET_EUI64_Get>
 800c5c8:	aa06      	add	r2, sp, #24
 800c5ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5ce:	f604 23b8 	addw	r3, r4, #2744	; 0xab8
 800c5d2:	f504 612b 	add.w	r1, r4, #2736	; 0xab0
 800c5d6:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c5da:	f803 0d01 	strb.w	r0, [r3, #-1]!
 800c5de:	428b      	cmp	r3, r1
 800c5e0:	d1f9      	bne.n	800c5d6 <62d16b48e9529b8b29eb67945bd8081213959681+0x56>
 800c5e2:	4668      	mov	r0, sp
 800c5e4:	f604 21af 	addw	r1, r4, #2735	; 0xaaf
 800c5e8:	f001 f932 	bl	800d850 <b4e42b26493966bc617e4c89906d69f121a97c96>
 800c5ec:	466b      	mov	r3, sp
 800c5ee:	f105 0012 	add.w	r0, r5, #18
 800c5f2:	aa04      	add	r2, sp, #16
 800c5f4:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5f8:	f840 1b04 	str.w	r1, [r0], #4
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d1f9      	bne.n	800c5f4 <62d16b48e9529b8b29eb67945bd8081213959681+0x74>
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	7003      	strb	r3, [r0, #0]
 800c604:	b009      	add	sp, #36	; 0x24
 800c606:	bd30      	pop	{r4, r5, pc}
 800c608:	20000040 	.word	0x20000040

0800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>:
 800c60c:	b510      	push	{r4, lr}
 800c60e:	f7f9 fc39 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800c612:	4b04      	ldr	r3, [pc, #16]	; (800c624 <cb03b4776ba370511f18aa83227a6716bbc89321+0x18>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f893 4a8c 	ldrb.w	r4, [r3, #2700]	; 0xa8c
 800c61a:	f7f9 fc53 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800c61e:	4620      	mov	r0, r4
 800c620:	bd10      	pop	{r4, pc}
 800c622:	bf00      	nop
 800c624:	20000040 	.word	0x20000040

0800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>:
 800c628:	b508      	push	{r3, lr}
 800c62a:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x38>)
 800c62c:	3801      	subs	r0, #1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2804      	cmp	r0, #4
 800c632:	d810      	bhi.n	800c656 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x2e>
 800c634:	e8df f000 	tbb	[pc, r0]
 800c638:	090f0603 	.word	0x090f0603
 800c63c:	0c          	.byte	0x0c
 800c63d:	00          	.byte	0x00
 800c63e:	f603 209e 	addw	r0, r3, #2718	; 0xa9e
 800c642:	bd08      	pop	{r3, pc}
 800c644:	f603 20af 	addw	r0, r3, #2735	; 0xaaf
 800c648:	e7fb      	b.n	800c642 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 800c64a:	f603 208d 	addw	r0, r3, #2701	; 0xa8d
 800c64e:	e7f8      	b.n	800c642 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 800c650:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 800c654:	e7f5      	b.n	800c642 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x1a>
 800c656:	4903      	ldr	r1, [pc, #12]	; (800c664 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x3c>)
 800c658:	4803      	ldr	r0, [pc, #12]	; (800c668 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a+0x40>)
 800c65a:	2257      	movs	r2, #87	; 0x57
 800c65c:	f7f5 f93c 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c660:	20000040 	.word	0x20000040
 800c664:	0801f2c8 	.word	0x0801f2c8
 800c668:	0801f32a 	.word	0x0801f32a

0800c66c <00481873317fdef387db1bb310377b408b8e47be>:
 800c66c:	b538      	push	{r3, r4, r5, lr}
 800c66e:	4b1f      	ldr	r3, [pc, #124]	; (800c6ec <00481873317fdef387db1bb310377b408b8e47be+0x80>)
 800c670:	4604      	mov	r4, r0
 800c672:	681d      	ldr	r5, [r3, #0]
 800c674:	f7f9 fc06 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800c678:	4623      	mov	r3, r4
 800c67a:	f813 2b10 	ldrb.w	r2, [r3], #16
 800c67e:	3a01      	subs	r2, #1
 800c680:	2a04      	cmp	r2, #4
 800c682:	d82d      	bhi.n	800c6e0 <00481873317fdef387db1bb310377b408b8e47be+0x74>
 800c684:	e8df f002 	tbb	[pc, r2]
 800c688:	1a2c1103 	.word	0x1a2c1103
 800c68c:	23          	.byte	0x23
 800c68d:	00          	.byte	0x00
 800c68e:	f605 259e 	addw	r5, r5, #2718	; 0xa9e
 800c692:	f854 2b04 	ldr.w	r2, [r4], #4
 800c696:	f845 2b04 	str.w	r2, [r5], #4
 800c69a:	429c      	cmp	r4, r3
 800c69c:	d1f9      	bne.n	800c692 <00481873317fdef387db1bb310377b408b8e47be+0x26>
 800c69e:	7823      	ldrb	r3, [r4, #0]
 800c6a0:	702b      	strb	r3, [r5, #0]
 800c6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6a6:	f7f9 bc0d 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800c6aa:	f605 25af 	addw	r5, r5, #2735	; 0xaaf
 800c6ae:	f854 2b04 	ldr.w	r2, [r4], #4
 800c6b2:	f845 2b04 	str.w	r2, [r5], #4
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d1f9      	bne.n	800c6ae <00481873317fdef387db1bb310377b408b8e47be+0x42>
 800c6ba:	e7f0      	b.n	800c69e <00481873317fdef387db1bb310377b408b8e47be+0x32>
 800c6bc:	f605 258d 	addw	r5, r5, #2701	; 0xa8d
 800c6c0:	f854 2b04 	ldr.w	r2, [r4], #4
 800c6c4:	f845 2b04 	str.w	r2, [r5], #4
 800c6c8:	429c      	cmp	r4, r3
 800c6ca:	d1f9      	bne.n	800c6c0 <00481873317fdef387db1bb310377b408b8e47be+0x54>
 800c6cc:	e7e7      	b.n	800c69e <00481873317fdef387db1bb310377b408b8e47be+0x32>
 800c6ce:	f505 652c 	add.w	r5, r5, #2752	; 0xac0
 800c6d2:	f854 2b04 	ldr.w	r2, [r4], #4
 800c6d6:	f845 2b04 	str.w	r2, [r5], #4
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	d1f9      	bne.n	800c6d2 <00481873317fdef387db1bb310377b408b8e47be+0x66>
 800c6de:	e7de      	b.n	800c69e <00481873317fdef387db1bb310377b408b8e47be+0x32>
 800c6e0:	4903      	ldr	r1, [pc, #12]	; (800c6f0 <00481873317fdef387db1bb310377b408b8e47be+0x84>)
 800c6e2:	4804      	ldr	r0, [pc, #16]	; (800c6f4 <00481873317fdef387db1bb310377b408b8e47be+0x88>)
 800c6e4:	2265      	movs	r2, #101	; 0x65
 800c6e6:	f7f5 f8f7 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c6ea:	bf00      	nop
 800c6ec:	20000040 	.word	0x20000040
 800c6f0:	0801f2c8 	.word	0x0801f2c8
 800c6f4:	0801f32a 	.word	0x0801f32a

0800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>:
 800c6f8:	b510      	push	{r4, lr}
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x78>)
 800c6fc:	b088      	sub	sp, #32
 800c6fe:	681c      	ldr	r4, [r3, #0]
 800c700:	9001      	str	r0, [sp, #4]
 800c702:	f7f9 fbbf 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800c706:	9801      	ldr	r0, [sp, #4]
 800c708:	7803      	ldrb	r3, [r0, #0]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d82c      	bhi.n	800c76a <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x72>
 800c710:	e8df f003 	tbb	[pc, r3]
 800c714:	10160d03 	.word	0x10160d03
 800c718:	13          	.byte	0x13
 800c719:	00          	.byte	0x00
 800c71a:	f604 219e 	addw	r1, r4, #2718	; 0xa9e
 800c71e:	f000 ff2f 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800c722:	4604      	mov	r4, r0
 800c724:	f7f9 fbce 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800c728:	4620      	mov	r0, r4
 800c72a:	b008      	add	sp, #32
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	f604 21af 	addw	r1, r4, #2735	; 0xaaf
 800c732:	e7f4      	b.n	800c71e <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 800c734:	f604 218d 	addw	r1, r4, #2701	; 0xa8d
 800c738:	e7f1      	b.n	800c71e <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 800c73a:	f504 612c 	add.w	r1, r4, #2752	; 0xac0
 800c73e:	e7ee      	b.n	800c71e <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 800c740:	2303      	movs	r3, #3
 800c742:	f88d 300c 	strb.w	r3, [sp, #12]
 800c746:	f8d4 3ac1 	ldr.w	r3, [r4, #2753]	; 0xac1
 800c74a:	f8cd 300d 	str.w	r3, [sp, #13]
 800c74e:	f8d4 3ac5 	ldr.w	r3, [r4, #2757]	; 0xac5
 800c752:	f8cd 3011 	str.w	r3, [sp, #17]
 800c756:	f8d4 3ab0 	ldr.w	r3, [r4, #2736]	; 0xab0
 800c75a:	f8cd 3015 	str.w	r3, [sp, #21]
 800c75e:	f8d4 3ab4 	ldr.w	r3, [r4, #2740]	; 0xab4
 800c762:	f8cd 3019 	str.w	r3, [sp, #25]
 800c766:	a903      	add	r1, sp, #12
 800c768:	e7d9      	b.n	800c71e <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x26>
 800c76a:	2400      	movs	r4, #0
 800c76c:	e7da      	b.n	800c724 <ef42a56931e541b0c8c1f2660a00aa81f857110a+0x2c>
 800c76e:	bf00      	nop
 800c770:	20000040 	.word	0x20000040

0800c774 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 800c774:	3901      	subs	r1, #1
 800c776:	f100 0308 	add.w	r3, r0, #8
 800c77a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c77e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800c782:	4283      	cmp	r3, r0
 800c784:	d1f9      	bne.n	800c77a <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 800c786:	4770      	bx	lr

0800c788 <80ac95a5fac5ddca81a9142111919316b6f3e38c>:
 800c788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c78a:	4b0e      	ldr	r3, [pc, #56]	; (800c7c4 <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x3c>)
 800c78c:	281d      	cmp	r0, #29
 800c78e:	681d      	ldr	r5, [r3, #0]
 800c790:	d905      	bls.n	800c79e <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x16>
 800c792:	490d      	ldr	r1, [pc, #52]	; (800c7c8 <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x40>)
 800c794:	480d      	ldr	r0, [pc, #52]	; (800c7cc <80ac95a5fac5ddca81a9142111919316b6f3e38c+0x44>)
 800c796:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800c79a:	f7f5 f89d 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c79e:	232a      	movs	r3, #42	; 0x2a
 800c7a0:	fb03 f400 	mul.w	r4, r3, r0
 800c7a4:	f604 310a 	addw	r1, r4, #2826	; 0xb0a
 800c7a8:	4429      	add	r1, r5
 800c7aa:	4668      	mov	r0, sp
 800c7ac:	f7ff ffe2 	bl	800c774 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 800c7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7b4:	f00e f94e 	bl	801aa54 <24da9999ddd48c4f3f286257592f6695f75e30ed>
 800c7b8:	4425      	add	r5, r4
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f885 3b08 	strb.w	r3, [r5, #2824]	; 0xb08
 800c7c0:	b003      	add	sp, #12
 800c7c2:	bd30      	pop	{r4, r5, pc}
 800c7c4:	20000040 	.word	0x20000040
 800c7c8:	0801f33d 	.word	0x0801f33d
 800c7cc:	0801f39f 	.word	0x0801f39f

0800c7d0 <a65a9e0e9d2172731582a842552346b36304a3e3>:
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <a65a9e0e9d2172731582a842552346b36304a3e3+0x1c>)
 800c7d4:	681c      	ldr	r4, [r3, #0]
 800c7d6:	f240 42ee 	movw	r2, #1262	; 0x4ee
 800c7da:	2100      	movs	r1, #0
 800c7dc:	f604 3008 	addw	r0, r4, #2824	; 0xb08
 800c7e0:	f00f fbe2 	bl	801bfa8 <memset>
 800c7e4:	231e      	movs	r3, #30
 800c7e6:	f884 3ff4 	strb.w	r3, [r4, #4084]	; 0xff4
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	20000040 	.word	0x20000040

0800c7f0 <5dd6fb766eeca12f408d546c8d4a40a272e3f785>:
 800c7f0:	4b06      	ldr	r3, [pc, #24]	; (800c80c <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0x1c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
 800c7fa:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 800c7fe:	b109      	cbz	r1, 800c804 <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0x14>
 800c800:	3001      	adds	r0, #1
 800c802:	b2c0      	uxtb	r0, r0
 800c804:	332a      	adds	r3, #42	; 0x2a
 800c806:	4293      	cmp	r3, r2
 800c808:	d1f7      	bne.n	800c7fa <5dd6fb766eeca12f408d546c8d4a40a272e3f785+0xa>
 800c80a:	4770      	bx	lr
 800c80c:	20000040 	.word	0x20000040

0800c810 <NEIGHBORS_GetNeighborInfo>:
 800c810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	b085      	sub	sp, #20
 800c816:	4b21      	ldr	r3, [pc, #132]	; (800c89c <NEIGHBORS_GetNeighborInfo+0x8c>)
 800c818:	466d      	mov	r5, sp
 800c81a:	4688      	mov	r8, r1
 800c81c:	2210      	movs	r2, #16
 800c81e:	2100      	movs	r1, #0
 800c820:	4604      	mov	r4, r0
 800c822:	4628      	mov	r0, r5
 800c824:	f8d3 a000 	ldr.w	sl, [r3]
 800c828:	f00f fbbe 	bl	801bfa8 <memset>
 800c82c:	f7ff ffe0 	bl	800c7f0 <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 800c830:	4540      	cmp	r0, r8
 800c832:	d922      	bls.n	800c87a <NEIGHBORS_GetNeighborInfo+0x6a>
 800c834:	2600      	movs	r6, #0
 800c836:	f60a 370a 	addw	r7, sl, #2826	; 0xb0a
 800c83a:	46b1      	mov	r9, r6
 800c83c:	f04f 0b02 	mov.w	fp, #2
 800c840:	f817 1c02 	ldrb.w	r1, [r7, #-2]
 800c844:	b1a1      	cbz	r1, 800c870 <NEIGHBORS_GetNeighborInfo+0x60>
 800c846:	45c8      	cmp	r8, r9
 800c848:	d110      	bne.n	800c86c <NEIGHBORS_GetNeighborInfo+0x5c>
 800c84a:	4639      	mov	r1, r7
 800c84c:	4628      	mov	r0, r5
 800c84e:	f7ff ff91 	bl	800c774 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 800c852:	7ab9      	ldrb	r1, [r7, #10]
 800c854:	f88d 1008 	strb.w	r1, [sp, #8]
 800c858:	f89a 1ff4 	ldrb.w	r1, [sl, #4084]	; 0xff4
 800c85c:	42b1      	cmp	r1, r6
 800c85e:	f04f 0301 	mov.w	r3, #1
 800c862:	f04f 0200 	mov.w	r2, #0
 800c866:	d110      	bne.n	800c88a <NEIGHBORS_GetNeighborInfo+0x7a>
 800c868:	f88d 2009 	strb.w	r2, [sp, #9]
 800c86c:	f109 0901 	add.w	r9, r9, #1
 800c870:	3601      	adds	r6, #1
 800c872:	2e1e      	cmp	r6, #30
 800c874:	f107 072a 	add.w	r7, r7, #42	; 0x2a
 800c878:	d1e2      	bne.n	800c840 <NEIGHBORS_GetNeighborInfo+0x30>
 800c87a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c87e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c882:	4620      	mov	r0, r4
 800c884:	b005      	add	sp, #20
 800c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800c88e:	2900      	cmp	r1, #0
 800c890:	bf0c      	ite	eq
 800c892:	4659      	moveq	r1, fp
 800c894:	4619      	movne	r1, r3
 800c896:	f88d 1009 	strb.w	r1, [sp, #9]
 800c89a:	e7e7      	b.n	800c86c <NEIGHBORS_GetNeighborInfo+0x5c>
 800c89c:	20000040 	.word	0x20000040

0800c8a0 <8cfb94024ca5b6140fb568011b57a078749e2ff0>:
 800c8a0:	b508      	push	{r3, lr}
 800c8a2:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x28>)
 800c8a4:	281d      	cmp	r0, #29
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	d805      	bhi.n	800c8b6 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x16>
 800c8aa:	222a      	movs	r2, #42	; 0x2a
 800c8ac:	fb02 3000 	mla	r0, r2, r0, r3
 800c8b0:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800c8b4:	b923      	cbnz	r3, 800c8c0 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x20>
 800c8b6:	4905      	ldr	r1, [pc, #20]	; (800c8cc <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x2c>)
 800c8b8:	4805      	ldr	r0, [pc, #20]	; (800c8d0 <8cfb94024ca5b6140fb568011b57a078749e2ff0+0x30>)
 800c8ba:	2260      	movs	r2, #96	; 0x60
 800c8bc:	f7f5 f80c 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c8c0:	f8b0 0b12 	ldrh.w	r0, [r0, #2834]	; 0xb12
 800c8c4:	bd08      	pop	{r3, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000040 	.word	0x20000040
 800c8cc:	0801f33d 	.word	0x0801f33d
 800c8d0:	0801f3ad 	.word	0x0801f3ad

0800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>:
 800c8d4:	b508      	push	{r3, lr}
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x28>)
 800c8d8:	281d      	cmp	r0, #29
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	d805      	bhi.n	800c8ea <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x16>
 800c8de:	222a      	movs	r2, #42	; 0x2a
 800c8e0:	fb02 3000 	mla	r0, r2, r0, r3
 800c8e4:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800c8e8:	b923      	cbnz	r3, 800c8f4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x20>
 800c8ea:	4905      	ldr	r1, [pc, #20]	; (800c900 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x2c>)
 800c8ec:	4805      	ldr	r0, [pc, #20]	; (800c904 <231ee13350ba09f13191bc6eb894c2ea8bf59b41+0x30>)
 800c8ee:	2269      	movs	r2, #105	; 0x69
 800c8f0:	f7f4 fff2 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c8f4:	f8a0 1b12 	strh.w	r1, [r0, #2834]	; 0xb12
 800c8f8:	bd08      	pop	{r3, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000040 	.word	0x20000040
 800c900:	0801f33d 	.word	0x0801f33d
 800c904:	0801f39f 	.word	0x0801f39f

0800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>:
 800c908:	b510      	push	{r4, lr}
 800c90a:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x34>)
 800c90c:	291d      	cmp	r1, #29
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	d805      	bhi.n	800c91e <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x16>
 800c912:	242a      	movs	r4, #42	; 0x2a
 800c914:	fb04 3101 	mla	r1, r4, r1, r3
 800c918:	f891 3b08 	ldrb.w	r3, [r1, #2824]	; 0xb08
 800c91c:	b923      	cbnz	r3, 800c928 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x20>
 800c91e:	4908      	ldr	r1, [pc, #32]	; (800c940 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x38>)
 800c920:	4808      	ldr	r0, [pc, #32]	; (800c944 <734215ec60b076a73ccd748a6d2a9ef259a5be9c+0x3c>)
 800c922:	2271      	movs	r2, #113	; 0x71
 800c924:	f7f4 ffd8 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c928:	f8b1 4b18 	ldrh.w	r4, [r1, #2840]	; 0xb18
 800c92c:	f991 3b14 	ldrsb.w	r3, [r1, #2836]	; 0xb14
 800c930:	f8b1 1b16 	ldrh.w	r1, [r1, #2838]	; 0xb16
 800c934:	8001      	strh	r1, [r0, #0]
 800c936:	8044      	strh	r4, [r0, #2]
 800c938:	7103      	strb	r3, [r0, #4]
 800c93a:	bd10      	pop	{r4, pc}
 800c93c:	20000040 	.word	0x20000040
 800c940:	0801f33d 	.word	0x0801f33d
 800c944:	0801f3be 	.word	0x0801f3be

0800c948 <5b63cb34daec6664391bfc943c457a7558e21261>:
 800c948:	b507      	push	{r0, r1, r2, lr}
 800c94a:	4b17      	ldr	r3, [pc, #92]	; (800c9a8 <5b63cb34daec6664391bfc943c457a7558e21261+0x60>)
 800c94c:	281d      	cmp	r0, #29
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	d805      	bhi.n	800c95e <5b63cb34daec6664391bfc943c457a7558e21261+0x16>
 800c952:	222a      	movs	r2, #42	; 0x2a
 800c954:	fb02 3000 	mla	r0, r2, r0, r3
 800c958:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800c95c:	b923      	cbnz	r3, 800c968 <5b63cb34daec6664391bfc943c457a7558e21261+0x20>
 800c95e:	4913      	ldr	r1, [pc, #76]	; (800c9ac <5b63cb34daec6664391bfc943c457a7558e21261+0x64>)
 800c960:	4813      	ldr	r0, [pc, #76]	; (800c9b0 <5b63cb34daec6664391bfc943c457a7558e21261+0x68>)
 800c962:	227e      	movs	r2, #126	; 0x7e
 800c964:	f7f4 ffb8 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c968:	f8b0 3b18 	ldrh.w	r3, [r0, #2840]	; 0xb18
 800c96c:	f8b0 2b16 	ldrh.w	r2, [r0, #2838]	; 0xb16
 800c970:	4293      	cmp	r3, r2
 800c972:	d90e      	bls.n	800c992 <5b63cb34daec6664391bfc943c457a7558e21261+0x4a>
 800c974:	2303      	movs	r3, #3
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <5b63cb34daec6664391bfc943c457a7558e21261+0x6c>)
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	ab02      	add	r3, sp, #8
 800c97e:	e913 0003 	ldmdb	r3, {r0, r1}
 800c982:	4a0d      	ldr	r2, [pc, #52]	; (800c9b8 <5b63cb34daec6664391bfc943c457a7558e21261+0x70>)
 800c984:	f003 fe56 	bl	8010634 <LOGGER_PrintLine>
 800c988:	f242 7010 	movw	r0, #10000	; 0x2710
 800c98c:	b003      	add	sp, #12
 800c98e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c992:	2a00      	cmp	r2, #0
 800c994:	d0f8      	beq.n	800c988 <5b63cb34daec6664391bfc943c457a7558e21261+0x40>
 800c996:	f242 7110 	movw	r1, #10000	; 0x2710
 800c99a:	fb01 f003 	mul.w	r0, r1, r3
 800c99e:	fbb0 f0f2 	udiv	r0, r0, r2
 800c9a2:	b280      	uxth	r0, r0
 800c9a4:	e7f2      	b.n	800c98c <5b63cb34daec6664391bfc943c457a7558e21261+0x44>
 800c9a6:	bf00      	nop
 800c9a8:	20000040 	.word	0x20000040
 800c9ac:	0801f33d 	.word	0x0801f33d
 800c9b0:	0801f39f 	.word	0x0801f39f
 800c9b4:	0801f3cf 	.word	0x0801f3cf
 800c9b8:	0801f3d9 	.word	0x0801f3d9

0800c9bc <7df3ba357f7f62320ead08135508bf101de27d80>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <7df3ba357f7f62320ead08135508bf101de27d80+0x30>)
 800c9c0:	291d      	cmp	r1, #29
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	d805      	bhi.n	800c9d2 <7df3ba357f7f62320ead08135508bf101de27d80+0x16>
 800c9c6:	242a      	movs	r4, #42	; 0x2a
 800c9c8:	fb04 3101 	mla	r1, r4, r1, r3
 800c9cc:	f891 3b08 	ldrb.w	r3, [r1, #2824]	; 0xb08
 800c9d0:	b923      	cbnz	r3, 800c9dc <7df3ba357f7f62320ead08135508bf101de27d80+0x20>
 800c9d2:	4907      	ldr	r1, [pc, #28]	; (800c9f0 <7df3ba357f7f62320ead08135508bf101de27d80+0x34>)
 800c9d4:	4807      	ldr	r0, [pc, #28]	; (800c9f4 <7df3ba357f7f62320ead08135508bf101de27d80+0x38>)
 800c9d6:	2293      	movs	r2, #147	; 0x93
 800c9d8:	f7f4 ff7e 	bl	80018d8 <EXPECT_OnAbortHandler>
 800c9dc:	f8d1 3b1a 	ldr.w	r3, [r1, #2842]	; 0xb1a
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	f891 3b1e 	ldrb.w	r3, [r1, #2846]	; 0xb1e
 800c9e6:	7103      	strb	r3, [r0, #4]
 800c9e8:	bd10      	pop	{r4, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20000040 	.word	0x20000040
 800c9f0:	0801f33d 	.word	0x0801f33d
 800c9f4:	0801f39f 	.word	0x0801f39f

0800c9f8 <5004528a8ffa5581bbd161cf1057e8d5d3867843>:
 800c9f8:	b507      	push	{r0, r1, r2, lr}
 800c9fa:	a902      	add	r1, sp, #8
 800c9fc:	e901 000c 	stmdb	r1, {r2, r3}
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x3c>)
 800ca02:	281d      	cmp	r0, #29
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	d805      	bhi.n	800ca14 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x1c>
 800ca08:	222a      	movs	r2, #42	; 0x2a
 800ca0a:	fb02 3000 	mla	r0, r2, r0, r3
 800ca0e:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800ca12:	b923      	cbnz	r3, 800ca1e <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x26>
 800ca14:	4908      	ldr	r1, [pc, #32]	; (800ca38 <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x40>)
 800ca16:	4809      	ldr	r0, [pc, #36]	; (800ca3c <5004528a8ffa5581bbd161cf1057e8d5d3867843+0x44>)
 800ca18:	229c      	movs	r2, #156	; 0x9c
 800ca1a:	f7f4 ff5d 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ca1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca22:	9a00      	ldr	r2, [sp, #0]
 800ca24:	f8c0 2b1a 	str.w	r2, [r0, #2842]	; 0xb1a
 800ca28:	f880 3b1e 	strb.w	r3, [r0, #2846]	; 0xb1e
 800ca2c:	b003      	add	sp, #12
 800ca2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca32:	bf00      	nop
 800ca34:	20000040 	.word	0x20000040
 800ca38:	0801f33d 	.word	0x0801f33d
 800ca3c:	0801f39f 	.word	0x0801f39f

0800ca40 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	4b0e      	ldr	r3, [pc, #56]	; (800ca7c <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x3c>)
 800ca44:	681c      	ldr	r4, [r3, #0]
 800ca46:	f7f9 fcf9 	bl	800643c <EMBENET_RADIO_GetCapabilities>
 800ca4a:	f604 330a 	addw	r3, r4, #2826	; 0xb0a
 800ca4e:	4601      	mov	r1, r0
 800ca50:	f604 74f6 	addw	r4, r4, #4086	; 0xff6
 800ca54:	2000      	movs	r0, #0
 800ca56:	22ff      	movs	r2, #255	; 0xff
 800ca58:	f813 5c02 	ldrb.w	r5, [r3, #-2]
 800ca5c:	b155      	cbz	r5, 800ca74 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x34>
 800ca5e:	7d5d      	ldrb	r5, [r3, #21]
 800ca60:	4295      	cmp	r5, r2
 800ca62:	d807      	bhi.n	800ca74 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x34>
 800ca64:	f993 700a 	ldrsb.w	r7, [r3, #10]
 800ca68:	f991 601c 	ldrsb.w	r6, [r1, #28]
 800ca6c:	42b7      	cmp	r7, r6
 800ca6e:	bfa4      	itt	ge
 800ca70:	4618      	movge	r0, r3
 800ca72:	462a      	movge	r2, r5
 800ca74:	332a      	adds	r3, #42	; 0x2a
 800ca76:	42a3      	cmp	r3, r4
 800ca78:	d1ee      	bne.n	800ca58 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1+0x18>
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca7c:	20000040 	.word	0x20000040

0800ca80 <4f011439265b330ba2d9f164eb1f6389866b01df>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	4b15      	ldr	r3, [pc, #84]	; (800cad8 <4f011439265b330ba2d9f164eb1f6389866b01df+0x58>)
 800ca84:	281d      	cmp	r0, #29
 800ca86:	681c      	ldr	r4, [r3, #0]
 800ca88:	d805      	bhi.n	800ca96 <4f011439265b330ba2d9f164eb1f6389866b01df+0x16>
 800ca8a:	232a      	movs	r3, #42	; 0x2a
 800ca8c:	fb03 4300 	mla	r3, r3, r0, r4
 800ca90:	f893 2b08 	ldrb.w	r2, [r3, #2824]	; 0xb08
 800ca94:	b922      	cbnz	r2, 800caa0 <4f011439265b330ba2d9f164eb1f6389866b01df+0x20>
 800ca96:	4911      	ldr	r1, [pc, #68]	; (800cadc <4f011439265b330ba2d9f164eb1f6389866b01df+0x5c>)
 800ca98:	4811      	ldr	r0, [pc, #68]	; (800cae0 <4f011439265b330ba2d9f164eb1f6389866b01df+0x60>)
 800ca9a:	22cc      	movs	r2, #204	; 0xcc
 800ca9c:	f7f4 ff1c 	bl	80018d8 <EXPECT_OnAbortHandler>
 800caa0:	f893 2b20 	ldrb.w	r2, [r3, #2848]	; 0xb20
 800caa4:	b192      	cbz	r2, 800cacc <4f011439265b330ba2d9f164eb1f6389866b01df+0x4c>
 800caa6:	680d      	ldr	r5, [r1, #0]
 800caa8:	790a      	ldrb	r2, [r1, #4]
 800caaa:	f8d3 1b21 	ldr.w	r1, [r3, #2849]	; 0xb21
 800caae:	f893 6b25 	ldrb.w	r6, [r3, #2853]	; 0xb25
 800cab2:	1a6d      	subs	r5, r5, r1
 800cab4:	eb62 0206 	sbc.w	r2, r2, r6
 800cab8:	4e0a      	ldr	r6, [pc, #40]	; (800cae4 <4f011439265b330ba2d9f164eb1f6389866b01df+0x64>)
 800caba:	2100      	movs	r1, #0
 800cabc:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 800cac0:	42ae      	cmp	r6, r5
 800cac2:	eb71 0202 	sbcs.w	r2, r1, r2
 800cac6:	bf38      	it	cc
 800cac8:	f883 1b20 	strbcc.w	r1, [r3, #2848]	; 0xb20
 800cacc:	232a      	movs	r3, #42	; 0x2a
 800cace:	fb03 4400 	mla	r4, r3, r0, r4
 800cad2:	f894 0b20 	ldrb.w	r0, [r4, #2848]	; 0xb20
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	20000040 	.word	0x20000040
 800cadc:	0801f33d 	.word	0x0801f33d
 800cae0:	0801f3ad 	.word	0x0801f3ad
 800cae4:	000f4240 	.word	0x000f4240

0800cae8 <027deecf67887395ef5db16208d3312ee727e45e>:
 800cae8:	b510      	push	{r4, lr}
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <027deecf67887395ef5db16208d3312ee727e45e+0x40>)
 800caec:	281d      	cmp	r0, #29
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	d805      	bhi.n	800cafe <027deecf67887395ef5db16208d3312ee727e45e+0x16>
 800caf2:	232a      	movs	r3, #42	; 0x2a
 800caf4:	fb03 2300 	mla	r3, r3, r0, r2
 800caf8:	f893 4b08 	ldrb.w	r4, [r3, #2824]	; 0xb08
 800cafc:	b924      	cbnz	r4, 800cb08 <027deecf67887395ef5db16208d3312ee727e45e+0x20>
 800cafe:	490b      	ldr	r1, [pc, #44]	; (800cb2c <027deecf67887395ef5db16208d3312ee727e45e+0x44>)
 800cb00:	480b      	ldr	r0, [pc, #44]	; (800cb30 <027deecf67887395ef5db16208d3312ee727e45e+0x48>)
 800cb02:	22e0      	movs	r2, #224	; 0xe0
 800cb04:	f7f4 fee8 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cb08:	2401      	movs	r4, #1
 800cb0a:	f883 4b20 	strb.w	r4, [r3, #2848]	; 0xb20
 800cb0e:	680c      	ldr	r4, [r1, #0]
 800cb10:	f8c3 4b21 	str.w	r4, [r3, #2849]	; 0xb21
 800cb14:	7909      	ldrb	r1, [r1, #4]
 800cb16:	f883 1b25 	strb.w	r1, [r3, #2853]	; 0xb25
 800cb1a:	f892 3ff4 	ldrb.w	r3, [r2, #4084]	; 0xff4
 800cb1e:	1a1b      	subs	r3, r3, r0
 800cb20:	4258      	negs	r0, r3
 800cb22:	4158      	adcs	r0, r3
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	bf00      	nop
 800cb28:	20000040 	.word	0x20000040
 800cb2c:	0801f33d 	.word	0x0801f33d
 800cb30:	0801f3ad 	.word	0x0801f3ad

0800cb34 <0a8a8543f799df9767389ce496f81ab8433a71f4>:
 800cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb36:	4b0f      	ldr	r3, [pc, #60]	; (800cb74 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x40>)
 800cb38:	681c      	ldr	r4, [r3, #0]
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	f604 360a 	addw	r6, r4, #2826	; 0xb0a
 800cb40:	2500      	movs	r5, #0
 800cb42:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 800cb46:	b12b      	cbz	r3, 800cb54 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x20>
 800cb48:	2208      	movs	r2, #8
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f00f fa01 	bl	801bf54 <memcmp>
 800cb52:	b148      	cbz	r0, 800cb68 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x34>
 800cb54:	3501      	adds	r5, #1
 800cb56:	2d1e      	cmp	r5, #30
 800cb58:	f106 062a 	add.w	r6, r6, #42	; 0x2a
 800cb5c:	d1f1      	bne.n	800cb42 <0a8a8543f799df9767389ce496f81ab8433a71f4+0xe>
 800cb5e:	4906      	ldr	r1, [pc, #24]	; (800cb78 <0a8a8543f799df9767389ce496f81ab8433a71f4+0x44>)
 800cb60:	4806      	ldr	r0, [pc, #24]	; (800cb7c <0a8a8543f799df9767389ce496f81ab8433a71f4+0x48>)
 800cb62:	22fd      	movs	r2, #253	; 0xfd
 800cb64:	f7f4 feb8 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cb68:	232a      	movs	r3, #42	; 0x2a
 800cb6a:	fb03 4405 	mla	r4, r3, r5, r4
 800cb6e:	f894 0b26 	ldrb.w	r0, [r4, #2854]	; 0xb26
 800cb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb74:	20000040 	.word	0x20000040
 800cb78:	0801f33d 	.word	0x0801f33d
 800cb7c:	0801f3ea 	.word	0x0801f3ea

0800cb80 <91ad02464a5553c72b508f812e77f83c74a657ed>:
 800cb80:	281d      	cmp	r0, #29
 800cb82:	b508      	push	{r3, lr}
 800cb84:	d905      	bls.n	800cb92 <91ad02464a5553c72b508f812e77f83c74a657ed+0x12>
 800cb86:	490a      	ldr	r1, [pc, #40]	; (800cbb0 <91ad02464a5553c72b508f812e77f83c74a657ed+0x30>)
 800cb88:	480a      	ldr	r0, [pc, #40]	; (800cbb4 <91ad02464a5553c72b508f812e77f83c74a657ed+0x34>)
 800cb8a:	f44f 728a 	mov.w	r2, #276	; 0x114
 800cb8e:	f7f4 fea3 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <91ad02464a5553c72b508f812e77f83c74a657ed+0x38>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	222a      	movs	r2, #42	; 0x2a
 800cb98:	fb02 3300 	mla	r3, r2, r0, r3
 800cb9c:	f893 0b08 	ldrb.w	r0, [r3, #2824]	; 0xb08
 800cba0:	b128      	cbz	r0, 800cbae <91ad02464a5553c72b508f812e77f83c74a657ed+0x2e>
 800cba2:	f8b3 0b12 	ldrh.w	r0, [r3, #2834]	; 0xb12
 800cba6:	4288      	cmp	r0, r1
 800cba8:	bf34      	ite	cc
 800cbaa:	2000      	movcc	r0, #0
 800cbac:	2001      	movcs	r0, #1
 800cbae:	bd08      	pop	{r3, pc}
 800cbb0:	0801f33d 	.word	0x0801f33d
 800cbb4:	0801f39f 	.word	0x0801f39f
 800cbb8:	20000040 	.word	0x20000040

0800cbbc <8c07271647b7d6eded14e64818e8777967155b78>:
 800cbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	461e      	mov	r6, r3
 800cbc2:	4b24      	ldr	r3, [pc, #144]	; (800cc54 <8c07271647b7d6eded14e64818e8777967155b78+0x98>)
 800cbc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800cbc8:	681f      	ldr	r7, [r3, #0]
 800cbca:	4683      	mov	fp, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	4690      	mov	r8, r2
 800cbd0:	f607 3a0a 	addw	sl, r7, #2826	; 0xb0a
 800cbd4:	2400      	movs	r4, #0
 800cbd6:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 800cbda:	b3ab      	cbz	r3, 800cc48 <8c07271647b7d6eded14e64818e8777967155b78+0x8c>
 800cbdc:	2208      	movs	r2, #8
 800cbde:	4659      	mov	r1, fp
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	f00f f9b7 	bl	801bf54 <memcmp>
 800cbe6:	bb78      	cbnz	r0, 800cc48 <8c07271647b7d6eded14e64818e8777967155b78+0x8c>
 800cbe8:	b156      	cbz	r6, 800cc00 <8c07271647b7d6eded14e64818e8777967155b78+0x44>
 800cbea:	202a      	movs	r0, #42	; 0x2a
 800cbec:	4360      	muls	r0, r4
 800cbee:	f600 301a 	addw	r0, r0, #2842	; 0xb1a
 800cbf2:	f8d9 2000 	ldr.w	r2, [r9]
 800cbf6:	503a      	str	r2, [r7, r0]
 800cbf8:	183b      	adds	r3, r7, r0
 800cbfa:	f899 2004 	ldrb.w	r2, [r9, #4]
 800cbfe:	711a      	strb	r2, [r3, #4]
 800cc00:	f1b8 0f00 	cmp.w	r8, #0
 800cc04:	d01e      	beq.n	800cc44 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 800cc06:	222a      	movs	r2, #42	; 0x2a
 800cc08:	fb02 7204 	mla	r2, r2, r4, r7
 800cc0c:	f9b2 1b16 	ldrsh.w	r1, [r2, #2838]	; 0xb16
 800cc10:	f8b2 3b16 	ldrh.w	r3, [r2, #2838]	; 0xb16
 800cc14:	2900      	cmp	r1, #0
 800cc16:	da07      	bge.n	800cc28 <8c07271647b7d6eded14e64818e8777967155b78+0x6c>
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 800cc1e:	f8b2 3b18 	ldrh.w	r3, [r2, #2840]	; 0xb18
 800cc22:	085b      	lsrs	r3, r3, #1
 800cc24:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 800cc28:	222a      	movs	r2, #42	; 0x2a
 800cc2a:	fb02 7204 	mla	r2, r2, r4, r7
 800cc2e:	f8b2 3b16 	ldrh.w	r3, [r2, #2838]	; 0xb16
 800cc32:	442b      	add	r3, r5
 800cc34:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 800cc38:	b126      	cbz	r6, 800cc44 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 800cc3a:	f8b2 3b18 	ldrh.w	r3, [r2, #2840]	; 0xb18
 800cc3e:	3301      	adds	r3, #1
 800cc40:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 800cc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	3401      	adds	r4, #1
 800cc4a:	2c1e      	cmp	r4, #30
 800cc4c:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
 800cc50:	d1c1      	bne.n	800cbd6 <8c07271647b7d6eded14e64818e8777967155b78+0x1a>
 800cc52:	e7f7      	b.n	800cc44 <8c07271647b7d6eded14e64818e8777967155b78+0x88>
 800cc54:	20000040 	.word	0x20000040

0800cc58 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	4b11      	ldr	r3, [pc, #68]	; (800cca0 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x48>)
 800cc5c:	681c      	ldr	r4, [r3, #0]
 800cc5e:	4607      	mov	r7, r0
 800cc60:	f604 360a 	addw	r6, r4, #2826	; 0xb0a
 800cc64:	2500      	movs	r5, #0
 800cc66:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 800cc6a:	b193      	cbz	r3, 800cc92 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x3a>
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	4639      	mov	r1, r7
 800cc70:	4630      	mov	r0, r6
 800cc72:	f00f f96f 	bl	801bf54 <memcmp>
 800cc76:	b960      	cbnz	r0, 800cc92 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x3a>
 800cc78:	232a      	movs	r3, #42	; 0x2a
 800cc7a:	fb03 4305 	mla	r3, r3, r5, r4
 800cc7e:	f893 2b26 	ldrb.w	r2, [r3, #2854]	; 0xb26
 800cc82:	3201      	adds	r2, #1
 800cc84:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800cc88:	d100      	bne.n	800cc8c <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x34>
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2b26 	strb.w	r2, [r3, #2854]	; 0xb26
 800cc90:	e004      	b.n	800cc9c <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0x44>
 800cc92:	3501      	adds	r5, #1
 800cc94:	2d1e      	cmp	r5, #30
 800cc96:	f106 062a 	add.w	r6, r6, #42	; 0x2a
 800cc9a:	d1e4      	bne.n	800cc66 <cf0ffb3730b01ad23c777b55262f1b704e362e5b+0xe>
 800cc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	20000040 	.word	0x20000040

0800cca4 <cbc0e88a681a951e559d988b61bbaa7895224382>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	4b0d      	ldr	r3, [pc, #52]	; (800ccdc <cbc0e88a681a951e559d988b61bbaa7895224382+0x38>)
 800cca8:	681e      	ldr	r6, [r3, #0]
 800ccaa:	4607      	mov	r7, r0
 800ccac:	f606 350a 	addw	r5, r6, #2826	; 0xb0a
 800ccb0:	2400      	movs	r4, #0
 800ccb2:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 800ccb6:	b15b      	cbz	r3, 800ccd0 <cbc0e88a681a951e559d988b61bbaa7895224382+0x2c>
 800ccb8:	2208      	movs	r2, #8
 800ccba:	4639      	mov	r1, r7
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f00f f949 	bl	801bf54 <memcmp>
 800ccc2:	b928      	cbnz	r0, 800ccd0 <cbc0e88a681a951e559d988b61bbaa7895224382+0x2c>
 800ccc4:	232a      	movs	r3, #42	; 0x2a
 800ccc6:	fb03 6604 	mla	r6, r3, r4, r6
 800ccca:	f886 0b26 	strb.w	r0, [r6, #2854]	; 0xb26
 800ccce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd0:	3401      	adds	r4, #1
 800ccd2:	2c1e      	cmp	r4, #30
 800ccd4:	f105 052a 	add.w	r5, r5, #42	; 0x2a
 800ccd8:	d1eb      	bne.n	800ccb2 <cbc0e88a681a951e559d988b61bbaa7895224382+0xe>
 800ccda:	e7f8      	b.n	800ccce <cbc0e88a681a951e559d988b61bbaa7895224382+0x2a>
 800ccdc:	20000040 	.word	0x20000040

0800cce0 <5e760e12acdfba35bd9ad67595126b5a8623f934>:
 800cce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cce2:	466e      	mov	r6, sp
 800cce4:	e886 000c 	stmia.w	r6, {r2, r3}
 800cce8:	4b0d      	ldr	r3, [pc, #52]	; (800cd20 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x40>)
 800ccea:	681d      	ldr	r5, [r3, #0]
 800ccec:	4607      	mov	r7, r0
 800ccee:	f605 340a 	addw	r4, r5, #2826	; 0xb0a
 800ccf2:	f605 75f6 	addw	r5, r5, #4086	; 0xff6
 800ccf6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800ccfa:	b163      	cbz	r3, 800cd16 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x36>
 800ccfc:	9908      	ldr	r1, [sp, #32]
 800ccfe:	2208      	movs	r2, #8
 800cd00:	4620      	mov	r0, r4
 800cd02:	f00f f927 	bl	801bf54 <memcmp>
 800cd06:	b930      	cbnz	r0, 800cd16 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x36>
 800cd08:	6830      	ldr	r0, [r6, #0]
 800cd0a:	7933      	ldrb	r3, [r6, #4]
 800cd0c:	7767      	strb	r7, [r4, #29]
 800cd0e:	f8c4 001e 	str.w	r0, [r4, #30]
 800cd12:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800cd16:	342a      	adds	r4, #42	; 0x2a
 800cd18:	42ac      	cmp	r4, r5
 800cd1a:	d1ec      	bne.n	800ccf6 <5e760e12acdfba35bd9ad67595126b5a8623f934+0x16>
 800cd1c:	b003      	add	sp, #12
 800cd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd20:	20000040 	.word	0x20000040

0800cd24 <e5d2a5998d8277723156e3d7efef427ee7af0c3f>:
 800cd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	a902      	add	r1, sp, #8
 800cd2a:	e901 000c 	stmdb	r1, {r2, r3}
 800cd2e:	4b1a      	ldr	r3, [pc, #104]	; (800cd98 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x74>)
 800cd30:	f89d a004 	ldrb.w	sl, [sp, #4]
 800cd34:	f8d3 8000 	ldr.w	r8, [r3]
 800cd38:	4607      	mov	r7, r0
 800cd3a:	4691      	mov	r9, r2
 800cd3c:	f608 340a 	addw	r4, r8, #2826	; 0xb0a
 800cd40:	2500      	movs	r5, #0
 800cd42:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 800cd46:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800cd4a:	b1de      	cbz	r6, 800cd84 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 800cd4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd4e:	2208      	movs	r2, #8
 800cd50:	4620      	mov	r0, r4
 800cd52:	f00f f8ff 	bl	801bf54 <memcmp>
 800cd56:	b9a8      	cbnz	r0, 800cd84 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 800cd58:	fb0b 8305 	mla	r3, fp, r5, r8
 800cd5c:	f8d3 2b28 	ldr.w	r2, [r3, #2856]	; 0xb28
 800cd60:	f893 3b2c 	ldrb.w	r3, [r3, #2860]	; 0xb2c
 800cd64:	ea52 0103 	orrs.w	r1, r2, r3
 800cd68:	d00c      	beq.n	800cd84 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 800cd6a:	ebb9 0202 	subs.w	r2, r9, r2
 800cd6e:	eb6a 0303 	sbc.w	r3, sl, r3
 800cd72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800cd76:	2a64      	cmp	r2, #100	; 0x64
 800cd78:	f173 0300 	sbcs.w	r3, r3, #0
 800cd7c:	d202      	bcs.n	800cd84 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x60>
 800cd7e:	7f63      	ldrb	r3, [r4, #29]
 800cd80:	42bb      	cmp	r3, r7
 800cd82:	d005      	beq.n	800cd90 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x6c>
 800cd84:	3501      	adds	r5, #1
 800cd86:	2d1e      	cmp	r5, #30
 800cd88:	f104 042a 	add.w	r4, r4, #42	; 0x2a
 800cd8c:	d1db      	bne.n	800cd46 <e5d2a5998d8277723156e3d7efef427ee7af0c3f+0x22>
 800cd8e:	2600      	movs	r6, #0
 800cd90:	4630      	mov	r0, r6
 800cd92:	b003      	add	sp, #12
 800cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd98:	20000040 	.word	0x20000040

0800cd9c <b7be15738b198492e50cb8023d171fca112169af>:
 800cd9c:	281d      	cmp	r0, #29
 800cd9e:	b538      	push	{r3, r4, r5, lr}
 800cda0:	4602      	mov	r2, r0
 800cda2:	d905      	bls.n	800cdb0 <b7be15738b198492e50cb8023d171fca112169af+0x14>
 800cda4:	490b      	ldr	r1, [pc, #44]	; (800cdd4 <b7be15738b198492e50cb8023d171fca112169af+0x38>)
 800cda6:	480c      	ldr	r0, [pc, #48]	; (800cdd8 <b7be15738b198492e50cb8023d171fca112169af+0x3c>)
 800cda8:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cdac:	f7f4 fd94 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cdb0:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <b7be15738b198492e50cb8023d171fca112169af+0x40>)
 800cdb2:	681c      	ldr	r4, [r3, #0]
 800cdb4:	232a      	movs	r3, #42	; 0x2a
 800cdb6:	fb03 4000 	mla	r0, r3, r0, r4
 800cdba:	f890 0b08 	ldrb.w	r0, [r0, #2824]	; 0xb08
 800cdbe:	b140      	cbz	r0, 800cdd2 <b7be15738b198492e50cb8023d171fca112169af+0x36>
 800cdc0:	f640 350a 	movw	r5, #2826	; 0xb0a
 800cdc4:	fb13 5302 	smlabb	r3, r3, r2, r5
 800cdc8:	18e2      	adds	r2, r4, r3
 800cdca:	58e3      	ldr	r3, [r4, r3]
 800cdcc:	600b      	str	r3, [r1, #0]
 800cdce:	6853      	ldr	r3, [r2, #4]
 800cdd0:	604b      	str	r3, [r1, #4]
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	0801f33d 	.word	0x0801f33d
 800cdd8:	0801f39f 	.word	0x0801f39f
 800cddc:	20000040 	.word	0x20000040

0800cde0 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1>:
 800cde0:	281d      	cmp	r0, #29
 800cde2:	b508      	push	{r3, lr}
 800cde4:	d905      	bls.n	800cdf2 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x12>
 800cde6:	4907      	ldr	r1, [pc, #28]	; (800ce04 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x24>)
 800cde8:	4807      	ldr	r0, [pc, #28]	; (800ce08 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x28>)
 800cdea:	f240 12b7 	movw	r2, #439	; 0x1b7
 800cdee:	f7f4 fd73 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1+0x2c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	222a      	movs	r2, #42	; 0x2a
 800cdf8:	fb02 3300 	mla	r3, r2, r0, r3
 800cdfc:	f893 0b08 	ldrb.w	r0, [r3, #2824]	; 0xb08
 800ce00:	bd08      	pop	{r3, pc}
 800ce02:	bf00      	nop
 800ce04:	0801f33d 	.word	0x0801f33d
 800ce08:	0801f3ad 	.word	0x0801f3ad
 800ce0c:	20000040 	.word	0x20000040

0800ce10 <a1f453367df5fb7326959ac01438704c8522c5f4>:
 800ce10:	4b02      	ldr	r3, [pc, #8]	; (800ce1c <a1f453367df5fb7326959ac01438704c8522c5f4+0xc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	221e      	movs	r2, #30
 800ce16:	f883 2ff4 	strb.w	r2, [r3, #4084]	; 0xff4
 800ce1a:	4770      	bx	lr
 800ce1c:	20000040 	.word	0x20000040

0800ce20 <bc730516ff4e3e92f0649500c5c053783837fa16>:
 800ce20:	b508      	push	{r3, lr}
 800ce22:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <bc730516ff4e3e92f0649500c5c053783837fa16+0x30>)
 800ce24:	281d      	cmp	r0, #29
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	d805      	bhi.n	800ce36 <bc730516ff4e3e92f0649500c5c053783837fa16+0x16>
 800ce2a:	232a      	movs	r3, #42	; 0x2a
 800ce2c:	fb03 2300 	mla	r3, r3, r0, r2
 800ce30:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 800ce34:	b929      	cbnz	r1, 800ce42 <bc730516ff4e3e92f0649500c5c053783837fa16+0x22>
 800ce36:	4907      	ldr	r1, [pc, #28]	; (800ce54 <bc730516ff4e3e92f0649500c5c053783837fa16+0x34>)
 800ce38:	4807      	ldr	r0, [pc, #28]	; (800ce58 <bc730516ff4e3e92f0649500c5c053783837fa16+0x38>)
 800ce3a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 800ce3e:	f7f4 fd4b 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ce42:	f882 0ff4 	strb.w	r0, [r2, #4084]	; 0xff4
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2b30 	strb.w	r2, [r3, #2864]	; 0xb30
 800ce4c:	bd08      	pop	{r3, pc}
 800ce4e:	bf00      	nop
 800ce50:	20000040 	.word	0x20000040
 800ce54:	0801f33d 	.word	0x0801f33d
 800ce58:	0801f3ad 	.word	0x0801f3ad

0800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>:
 800ce5c:	b508      	push	{r3, lr}
 800ce5e:	4b08      	ldr	r3, [pc, #32]	; (800ce80 <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x24>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 800ce66:	2a1d      	cmp	r2, #29
 800ce68:	d808      	bhi.n	800ce7c <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x20>
 800ce6a:	b100      	cbz	r0, 800ce6e <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x12>
 800ce6c:	7002      	strb	r2, [r0, #0]
 800ce6e:	b119      	cbz	r1, 800ce78 <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x1c>
 800ce70:	f893 0ff4 	ldrb.w	r0, [r3, #4084]	; 0xff4
 800ce74:	f7ff ff92 	bl	800cd9c <b7be15738b198492e50cb8023d171fca112169af>
 800ce78:	2001      	movs	r0, #1
 800ce7a:	bd08      	pop	{r3, pc}
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e7fc      	b.n	800ce7a <aa4ba635fab2a57cfac739bffc367cf6103ea92f+0x1e>
 800ce80:	20000040 	.word	0x20000040

0800ce84 <0fa1209e048698b86219960838c5b2bdc21151fc>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	ac02      	add	r4, sp, #8
 800ce8a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ce8e:	4669      	mov	r1, sp
 800ce90:	e881 000c 	stmia.w	r1, {r2, r3}
 800ce94:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <0fa1209e048698b86219960838c5b2bdc21151fc+0x64>)
 800ce96:	2100      	movs	r1, #0
 800ce98:	f10d 0017 	add.w	r0, sp, #23
 800ce9c:	681c      	ldr	r4, [r3, #0]
 800ce9e:	f7ff ffdd 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 800cea2:	b1f0      	cbz	r0, 800cee2 <0fa1209e048698b86219960838c5b2bdc21151fc+0x5e>
 800cea4:	f89d 5017 	ldrb.w	r5, [sp, #23]
 800cea8:	262a      	movs	r6, #42	; 0x2a
 800ceaa:	fb06 4105 	mla	r1, r6, r5, r4
 800ceae:	f891 0b08 	ldrb.w	r0, [r1, #2824]	; 0xb08
 800ceb2:	b1b0      	cbz	r0, 800cee2 <0fa1209e048698b86219960838c5b2bdc21151fc+0x5e>
 800ceb4:	f8d1 0b1a 	ldr.w	r0, [r1, #2842]	; 0xb1a
 800ceb8:	9a00      	ldr	r2, [sp, #0]
 800ceba:	f891 1b1e 	ldrb.w	r1, [r1, #2846]	; 0xb1e
 800cebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cec2:	1a12      	subs	r2, r2, r0
 800cec4:	9802      	ldr	r0, [sp, #8]
 800cec6:	eb63 0301 	sbc.w	r3, r3, r1
 800ceca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800cece:	4290      	cmp	r0, r2
 800ced0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800ced4:	4199      	sbcs	r1, r3
 800ced6:	bf3a      	itte	cc
 800ced8:	fb06 4405 	mlacc	r4, r6, r5, r4
 800cedc:	f604 300a 	addwcc	r0, r4, #2826	; 0xb0a
 800cee0:	2000      	movcs	r0, #0
 800cee2:	b006      	add	sp, #24
 800cee4:	bd70      	pop	{r4, r5, r6, pc}
 800cee6:	bf00      	nop
 800cee8:	20000040 	.word	0x20000040

0800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>:
 800ceec:	b513      	push	{r0, r1, r4, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	4669      	mov	r1, sp
 800cef2:	2000      	movs	r0, #0
 800cef4:	f7ff ffb2 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 800cef8:	b138      	cbz	r0, 800cf0a <fdce4034d9451f08e0a61574976ed9ce452b5ba4+0x1e>
 800cefa:	2208      	movs	r2, #8
 800cefc:	4621      	mov	r1, r4
 800cefe:	4668      	mov	r0, sp
 800cf00:	f00f f828 	bl	801bf54 <memcmp>
 800cf04:	fab0 f080 	clz	r0, r0
 800cf08:	0940      	lsrs	r0, r0, #5
 800cf0a:	b002      	add	sp, #8
 800cf0c:	bd10      	pop	{r4, pc}
	...

0800cf10 <aee20a6aed232d40647d21a3bace71ea0c450c20>:
 800cf10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf14:	b085      	sub	sp, #20
 800cf16:	466b      	mov	r3, sp
 800cf18:	e883 0003 	stmia.w	r3, {r0, r1}
 800cf1c:	4b23      	ldr	r3, [pc, #140]	; (800cfac <aee20a6aed232d40647d21a3bace71ea0c450c20+0x9c>)
 800cf1e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800cfb0 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa0>
 800cf22:	681e      	ldr	r6, [r3, #0]
 800cf24:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800cfb4 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa4>
 800cf28:	4f23      	ldr	r7, [pc, #140]	; (800cfb8 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xa8>)
 800cf2a:	4635      	mov	r5, r6
 800cf2c:	2400      	movs	r4, #0
 800cf2e:	f895 3b08 	ldrb.w	r3, [r5, #2824]	; 0xb08
 800cf32:	b39b      	cbz	r3, 800cf9c <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 800cf34:	212a      	movs	r1, #42	; 0x2a
 800cf36:	fb01 6104 	mla	r1, r1, r4, r6
 800cf3a:	9a00      	ldr	r2, [sp, #0]
 800cf3c:	f8d1 0b1a 	ldr.w	r0, [r1, #2842]	; 0xb1a
 800cf40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf44:	f891 1b1e 	ldrb.w	r1, [r1, #2846]	; 0xb1e
 800cf48:	1a12      	subs	r2, r2, r0
 800cf4a:	eb63 0301 	sbc.w	r3, r3, r1
 800cf4e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800cf52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cf56:	fbb9 f1f1 	udiv	r1, r9, r1
 800cf5a:	4291      	cmp	r1, r2
 800cf5c:	f04f 0200 	mov.w	r2, #0
 800cf60:	419a      	sbcs	r2, r3
 800cf62:	d21b      	bcs.n	800cf9c <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff fc0f 	bl	800c788 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 800cf6a:	f896 3ff4 	ldrb.w	r3, [r6, #4084]	; 0xff4
 800cf6e:	42a3      	cmp	r3, r4
 800cf70:	d108      	bne.n	800cf84 <aee20a6aed232d40647d21a3bace71ea0c450c20+0x74>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e9cd 3702 	strd	r3, r7, [sp, #8]
 800cf78:	ab04      	add	r3, sp, #16
 800cf7a:	e913 0003 	ldmdb	r3, {r0, r1}
 800cf7e:	4a0f      	ldr	r2, [pc, #60]	; (800cfbc <aee20a6aed232d40647d21a3bace71ea0c450c20+0xac>)
 800cf80:	f003 fb58 	bl	8010634 <LOGGER_PrintLine>
 800cf84:	f895 3b20 	ldrb.w	r3, [r5, #2848]	; 0xb20
 800cf88:	b143      	cbz	r3, 800cf9c <aee20a6aed232d40647d21a3bace71ea0c450c20+0x8c>
 800cf8a:	2305      	movs	r3, #5
 800cf8c:	e9cd 3702 	strd	r3, r7, [sp, #8]
 800cf90:	ab04      	add	r3, sp, #16
 800cf92:	e913 0003 	ldmdb	r3, {r0, r1}
 800cf96:	4a0a      	ldr	r2, [pc, #40]	; (800cfc0 <aee20a6aed232d40647d21a3bace71ea0c450c20+0xb0>)
 800cf98:	f003 fb4c 	bl	8010634 <LOGGER_PrintLine>
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	2c1e      	cmp	r4, #30
 800cfa0:	f105 052a 	add.w	r5, r5, #42	; 0x2a
 800cfa4:	d1c3      	bne.n	800cf2e <aee20a6aed232d40647d21a3bace71ea0c450c20+0x1e>
 800cfa6:	b005      	add	sp, #20
 800cfa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfac:	20000040 	.word	0x20000040
 800cfb0:	0801f014 	.word	0x0801f014
 800cfb4:	d693a400 	.word	0xd693a400
 800cfb8:	0801f3cf 	.word	0x0801f3cf
 800cfbc:	0801f402 	.word	0x0801f402
 800cfc0:	0801f41b 	.word	0x0801f41b

0800cfc4 <NEIGHBORS_SetRxSlotCandidate>:
 800cfc4:	b508      	push	{r3, lr}
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <NEIGHBORS_SetRxSlotCandidate+0x28>)
 800cfc8:	281d      	cmp	r0, #29
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	d805      	bhi.n	800cfda <NEIGHBORS_SetRxSlotCandidate+0x16>
 800cfce:	222a      	movs	r2, #42	; 0x2a
 800cfd0:	fb02 3000 	mla	r0, r2, r0, r3
 800cfd4:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800cfd8:	b92b      	cbnz	r3, 800cfe6 <NEIGHBORS_SetRxSlotCandidate+0x22>
 800cfda:	4905      	ldr	r1, [pc, #20]	; (800cff0 <NEIGHBORS_SetRxSlotCandidate+0x2c>)
 800cfdc:	4805      	ldr	r0, [pc, #20]	; (800cff4 <NEIGHBORS_SetRxSlotCandidate+0x30>)
 800cfde:	f240 2203 	movw	r2, #515	; 0x203
 800cfe2:	f7f4 fc79 	bl	80018d8 <EXPECT_OnAbortHandler>
 800cfe6:	f8a0 1b2e 	strh.w	r1, [r0, #2862]	; 0xb2e
 800cfea:	bd08      	pop	{r3, pc}
 800cfec:	20000040 	.word	0x20000040
 800cff0:	0801f33d 	.word	0x0801f33d
 800cff4:	0801f39f 	.word	0x0801f39f

0800cff8 <NEIGHBORS_GetRxSlotCandidate>:
 800cff8:	b508      	push	{r3, lr}
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <NEIGHBORS_GetRxSlotCandidate+0x28>)
 800cffc:	281d      	cmp	r0, #29
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	d805      	bhi.n	800d00e <NEIGHBORS_GetRxSlotCandidate+0x16>
 800d002:	222a      	movs	r2, #42	; 0x2a
 800d004:	fb02 3000 	mla	r0, r2, r0, r3
 800d008:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800d00c:	b92b      	cbnz	r3, 800d01a <NEIGHBORS_GetRxSlotCandidate+0x22>
 800d00e:	4905      	ldr	r1, [pc, #20]	; (800d024 <NEIGHBORS_GetRxSlotCandidate+0x2c>)
 800d010:	4805      	ldr	r0, [pc, #20]	; (800d028 <NEIGHBORS_GetRxSlotCandidate+0x30>)
 800d012:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d016:	f7f4 fc5f 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d01a:	f8b0 0b2e 	ldrh.w	r0, [r0, #2862]	; 0xb2e
 800d01e:	bd08      	pop	{r3, pc}
 800d020:	20000040 	.word	0x20000040
 800d024:	0801f33d 	.word	0x0801f33d
 800d028:	0801f39f 	.word	0x0801f39f

0800d02c <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	b085      	sub	sp, #20
 800d032:	4605      	mov	r5, r0
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	4b4b      	ldr	r3, [pc, #300]	; (800d164 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x138>)
 800d038:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800d03c:	681c      	ldr	r4, [r3, #0]
 800d03e:	4689      	mov	r9, r1
 800d040:	4616      	mov	r6, r2
 800d042:	f604 370a 	addw	r7, r4, #2826	; 0xb0a
 800d046:	46a2      	mov	sl, r4
 800d048:	f604 78f6 	addw	r8, r4, #4086	; 0xff6
 800d04c:	f817 3c02 	ldrb.w	r3, [r7, #-2]
 800d050:	b133      	cbz	r3, 800d060 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x34>
 800d052:	2208      	movs	r2, #8
 800d054:	4629      	mov	r1, r5
 800d056:	4638      	mov	r0, r7
 800d058:	f00e ff7c 	bl	801bf54 <memcmp>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d07c      	beq.n	800d15a <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x12e>
 800d060:	372a      	adds	r7, #42	; 0x2a
 800d062:	4547      	cmp	r7, r8
 800d064:	d1f2      	bne.n	800d04c <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x20>
 800d066:	2200      	movs	r2, #0
 800d068:	4610      	mov	r0, r2
 800d06a:	4613      	mov	r3, r2
 800d06c:	f04f 081e 	mov.w	r8, #30
 800d070:	f89a 1b08 	ldrb.w	r1, [sl, #2824]	; 0xb08
 800d074:	b369      	cbz	r1, 800d0d2 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0xa6>
 800d076:	212a      	movs	r1, #42	; 0x2a
 800d078:	fb01 4e03 	mla	lr, r1, r3, r4
 800d07c:	f8d6 c000 	ldr.w	ip, [r6]
 800d080:	f8de 1b1a 	ldr.w	r1, [lr, #2842]	; 0xb1a
 800d084:	7937      	ldrb	r7, [r6, #4]
 800d086:	f89e eb1e 	ldrb.w	lr, [lr, #2846]	; 0xb1e
 800d08a:	ebbc 0101 	subs.w	r1, ip, r1
 800d08e:	eb67 070e 	sbc.w	r7, r7, lr
 800d092:	f007 07ff 	and.w	r7, r7, #255	; 0xff
 800d096:	428a      	cmp	r2, r1
 800d098:	eb70 0c07 	sbcs.w	ip, r0, r7
 800d09c:	d20b      	bcs.n	800d0b6 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x8a>
 800d09e:	f89a cb31 	ldrb.w	ip, [sl, #2865]	; 0xb31
 800d0a2:	f1bc 0f00 	cmp.w	ip, #0
 800d0a6:	d106      	bne.n	800d0b6 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x8a>
 800d0a8:	f894 cff4 	ldrb.w	ip, [r4, #4084]	; 0xff4
 800d0ac:	459c      	cmp	ip, r3
 800d0ae:	bf1e      	ittt	ne
 800d0b0:	460a      	movne	r2, r1
 800d0b2:	4638      	movne	r0, r7
 800d0b4:	4698      	movne	r8, r3
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	2b1e      	cmp	r3, #30
 800d0ba:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
 800d0be:	d1d7      	bne.n	800d070 <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x44>
 800d0c0:	f1b8 0f1e 	cmp.w	r8, #30
 800d0c4:	d101      	bne.n	800d0ca <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x9e>
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e048      	b.n	800d15c <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a+0x130>
 800d0ca:	4640      	mov	r0, r8
 800d0cc:	f7ff fb5c 	bl	800c788 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 800d0d0:	4643      	mov	r3, r8
 800d0d2:	222a      	movs	r2, #42	; 0x2a
 800d0d4:	4353      	muls	r3, r2
 800d0d6:	18e2      	adds	r2, r4, r3
 800d0d8:	2101      	movs	r1, #1
 800d0da:	f882 1b08 	strb.w	r1, [r2, #2824]	; 0xb08
 800d0de:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800d0e2:	f882 1b09 	strb.w	r1, [r2, #2825]	; 0xb09
 800d0e6:	f603 330a 	addw	r3, r3, #2826	; 0xb0a
 800d0ea:	6829      	ldr	r1, [r5, #0]
 800d0ec:	50e1      	str	r1, [r4, r3]
 800d0ee:	18e0      	adds	r0, r4, r3
 800d0f0:	6869      	ldr	r1, [r5, #4]
 800d0f2:	6041      	str	r1, [r0, #4]
 800d0f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0f8:	f8a2 3b12 	strh.w	r3, [r2, #2834]	; 0xb12
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f882 9b14 	strb.w	r9, [r2, #2836]	; 0xb14
 800d102:	f8a2 3b16 	strh.w	r3, [r2, #2838]	; 0xb16
 800d106:	f8a2 3b18 	strh.w	r3, [r2, #2840]	; 0xb18
 800d10a:	7931      	ldrb	r1, [r6, #4]
 800d10c:	6830      	ldr	r0, [r6, #0]
 800d10e:	f882 1b1e 	strb.w	r1, [r2, #2846]	; 0xb1e
 800d112:	9901      	ldr	r1, [sp, #4]
 800d114:	f8c2 0b1a 	str.w	r0, [r2, #2842]	; 0xb1a
 800d118:	f892 0b2c 	ldrb.w	r0, [r2, #2860]	; 0xb2c
 800d11c:	f882 3b20 	strb.w	r3, [r2, #2848]	; 0xb20
 800d120:	4299      	cmp	r1, r3
 800d122:	f363 0007 	bfi	r0, r3, #0, #8
 800d126:	bf08      	it	eq
 800d128:	f04f 0bff 	moveq.w	fp, #255	; 0xff
 800d12c:	f882 0b2c 	strb.w	r0, [r2, #2860]	; 0xb2c
 800d130:	f882 bb1f 	strb.w	fp, [r2, #2847]	; 0xb1f
 800d134:	f8a2 3b26 	strh.w	r3, [r2, #2854]	; 0xb26
 800d138:	f8a2 3b28 	strh.w	r3, [r2, #2856]	; 0xb28
 800d13c:	f8a2 3b2a 	strh.w	r3, [r2, #2858]	; 0xb2a
 800d140:	f8a2 3b2e 	strh.w	r3, [r2, #2862]	; 0xb2e
 800d144:	f8a2 3b30 	strh.w	r3, [r2, #2864]	; 0xb30
 800d148:	4629      	mov	r1, r5
 800d14a:	a802      	add	r0, sp, #8
 800d14c:	f7ff fb12 	bl	800c774 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 800d150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d154:	464a      	mov	r2, r9
 800d156:	f00d fc71 	bl	801aa3c <ed1ec3dc0708953023c494b9efb045669b41a337>
 800d15a:	2001      	movs	r0, #1
 800d15c:	b005      	add	sp, #20
 800d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d162:	bf00      	nop
 800d164:	20000040 	.word	0x20000040

0800d168 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86>:
 800d168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4614      	mov	r4, r2
 800d16e:	4a26      	ldr	r2, [pc, #152]	; (800d208 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0xa0>)
 800d170:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 800d174:	f8d2 a000 	ldr.w	sl, [r2]
 800d178:	9000      	str	r0, [sp, #0]
 800d17a:	461e      	mov	r6, r3
 800d17c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800d180:	460f      	mov	r7, r1
 800d182:	f60a 390a 	addw	r9, sl, #2826	; 0xb0a
 800d186:	2500      	movs	r5, #0
 800d188:	f819 bc02 	ldrb.w	fp, [r9, #-2]
 800d18c:	f1bb 0f00 	cmp.w	fp, #0
 800d190:	d02a      	beq.n	800d1e8 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x80>
 800d192:	9900      	ldr	r1, [sp, #0]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	2208      	movs	r2, #8
 800d198:	4648      	mov	r0, r9
 800d19a:	f00e fedb 	bl	801bf54 <memcmp>
 800d19e:	9b01      	ldr	r3, [sp, #4]
 800d1a0:	bb10      	cbnz	r0, 800d1e8 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x80>
 800d1a2:	222a      	movs	r2, #42	; 0x2a
 800d1a4:	fb02 a205 	mla	r2, r2, r5, sl
 800d1a8:	f992 1b14 	ldrsb.w	r1, [r2, #2836]	; 0xb14
 800d1ac:	f882 3b09 	strb.w	r3, [r2, #2825]	; 0xb09
 800d1b0:	2307      	movs	r3, #7
 800d1b2:	fb13 7301 	smlabb	r3, r3, r1, r7
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	da00      	bge.n	800d1bc <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x54>
 800d1ba:	3307      	adds	r3, #7
 800d1bc:	10db      	asrs	r3, r3, #3
 800d1be:	f882 3b14 	strb.w	r3, [r2, #2836]	; 0xb14
 800d1c2:	232a      	movs	r3, #42	; 0x2a
 800d1c4:	6821      	ldr	r1, [r4, #0]
 800d1c6:	7922      	ldrb	r2, [r4, #4]
 800d1c8:	fb03 a305 	mla	r3, r3, r5, sl
 800d1cc:	2e00      	cmp	r6, #0
 800d1ce:	bf08      	it	eq
 800d1d0:	f04f 08ff 	moveq.w	r8, #255	; 0xff
 800d1d4:	4658      	mov	r0, fp
 800d1d6:	f8c3 1b1a 	str.w	r1, [r3, #2842]	; 0xb1a
 800d1da:	f883 2b1e 	strb.w	r2, [r3, #2846]	; 0xb1e
 800d1de:	f883 8b1f 	strb.w	r8, [r3, #2847]	; 0xb1f
 800d1e2:	b003      	add	sp, #12
 800d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	2d1e      	cmp	r5, #30
 800d1ec:	f109 092a 	add.w	r9, r9, #42	; 0x2a
 800d1f0:	d1ca      	bne.n	800d188 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86+0x20>
 800d1f2:	9800      	ldr	r0, [sp, #0]
 800d1f4:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4633      	mov	r3, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	b003      	add	sp, #12
 800d200:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	f7ff bf12 	b.w	800d02c <d5581a03a7943b95f7fabafbaf8177c4d06e5b3a>
 800d208:	20000040 	.word	0x20000040

0800d20c <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>:
 800d20c:	281d      	cmp	r0, #29
 800d20e:	b508      	push	{r3, lr}
 800d210:	d905      	bls.n	800d21e <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x12>
 800d212:	4909      	ldr	r1, [pc, #36]	; (800d238 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x2c>)
 800d214:	4809      	ldr	r0, [pc, #36]	; (800d23c <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x30>)
 800d216:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800d21a:	f7f4 fb5d 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d21e:	4a08      	ldr	r2, [pc, #32]	; (800d240 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x34>)
 800d220:	6812      	ldr	r2, [r2, #0]
 800d222:	212a      	movs	r1, #42	; 0x2a
 800d224:	fb01 2300 	mla	r3, r1, r0, r2
 800d228:	f893 3b08 	ldrb.w	r3, [r3, #2824]	; 0xb08
 800d22c:	b11b      	cbz	r3, 800d236 <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5+0x2a>
 800d22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d232:	f7ff baa9 	b.w	800c788 <80ac95a5fac5ddca81a9142111919316b6f3e38c>
 800d236:	bd08      	pop	{r3, pc}
 800d238:	0801f33d 	.word	0x0801f33d
 800d23c:	0801f39f 	.word	0x0801f39f
 800d240:	20000040 	.word	0x20000040

0800d244 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	4b09      	ldr	r3, [pc, #36]	; (800d26c <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x28>)
 800d248:	681d      	ldr	r5, [r3, #0]
 800d24a:	f7ff fde1 	bl	800ce10 <a1f453367df5fb7326959ac01438704c8522c5f4>
 800d24e:	2400      	movs	r4, #0
 800d250:	f605 3508 	addw	r5, r5, #2824	; 0xb08
 800d254:	262a      	movs	r6, #42	; 0x2a
 800d256:	fb06 f304 	mul.w	r3, r6, r4
 800d25a:	5ceb      	ldrb	r3, [r5, r3]
 800d25c:	b113      	cbz	r3, 800d264 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x20>
 800d25e:	b2e0      	uxtb	r0, r4
 800d260:	f7ff ffd4 	bl	800d20c <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>
 800d264:	3401      	adds	r4, #1
 800d266:	2c1e      	cmp	r4, #30
 800d268:	d1f5      	bne.n	800d256 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37+0x12>
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	20000040 	.word	0x20000040

0800d270 <52a2c697077f87280125159eda12d46a7578d4b9>:
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <52a2c697077f87280125159eda12d46a7578d4b9+0x3c>)
 800d276:	681c      	ldr	r4, [r3, #0]
 800d278:	4607      	mov	r7, r0
 800d27a:	4688      	mov	r8, r1
 800d27c:	f604 340a 	addw	r4, r4, #2826	; 0xb0a
 800d280:	2500      	movs	r5, #0
 800d282:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800d286:	b156      	cbz	r6, 800d29e <52a2c697077f87280125159eda12d46a7578d4b9+0x2e>
 800d288:	2208      	movs	r2, #8
 800d28a:	4639      	mov	r1, r7
 800d28c:	4620      	mov	r0, r4
 800d28e:	f00e fe61 	bl	801bf54 <memcmp>
 800d292:	b920      	cbnz	r0, 800d29e <52a2c697077f87280125159eda12d46a7578d4b9+0x2e>
 800d294:	f888 5000 	strb.w	r5, [r8]
 800d298:	4630      	mov	r0, r6
 800d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29e:	3501      	adds	r5, #1
 800d2a0:	2d1e      	cmp	r5, #30
 800d2a2:	f104 042a 	add.w	r4, r4, #42	; 0x2a
 800d2a6:	d1ec      	bne.n	800d282 <52a2c697077f87280125159eda12d46a7578d4b9+0x12>
 800d2a8:	2600      	movs	r6, #0
 800d2aa:	e7f5      	b.n	800d298 <52a2c697077f87280125159eda12d46a7578d4b9+0x28>
 800d2ac:	20000040 	.word	0x20000040

0800d2b0 <5cf48605db24e77c7dc4310895ecb68238b276e7>:
 800d2b0:	b508      	push	{r3, lr}
 800d2b2:	4b09      	ldr	r3, [pc, #36]	; (800d2d8 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x28>)
 800d2b4:	281d      	cmp	r0, #29
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	d805      	bhi.n	800d2c6 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x16>
 800d2ba:	222a      	movs	r2, #42	; 0x2a
 800d2bc:	fb02 3000 	mla	r0, r2, r0, r3
 800d2c0:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800d2c4:	b92b      	cbnz	r3, 800d2d2 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x22>
 800d2c6:	4905      	ldr	r1, [pc, #20]	; (800d2dc <5cf48605db24e77c7dc4310895ecb68238b276e7+0x2c>)
 800d2c8:	4805      	ldr	r0, [pc, #20]	; (800d2e0 <5cf48605db24e77c7dc4310895ecb68238b276e7+0x30>)
 800d2ca:	f240 2281 	movw	r2, #641	; 0x281
 800d2ce:	f7f4 fb03 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d2d2:	f890 0b31 	ldrb.w	r0, [r0, #2865]	; 0xb31
 800d2d6:	bd08      	pop	{r3, pc}
 800d2d8:	20000040 	.word	0x20000040
 800d2dc:	0801f33d 	.word	0x0801f33d
 800d2e0:	0801f3ad 	.word	0x0801f3ad

0800d2e4 <ca04a83f27bd1933b342c8619a464a402518176b>:
 800d2e4:	b508      	push	{r3, lr}
 800d2e6:	4b09      	ldr	r3, [pc, #36]	; (800d30c <ca04a83f27bd1933b342c8619a464a402518176b+0x28>)
 800d2e8:	281d      	cmp	r0, #29
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	d805      	bhi.n	800d2fa <ca04a83f27bd1933b342c8619a464a402518176b+0x16>
 800d2ee:	222a      	movs	r2, #42	; 0x2a
 800d2f0:	fb02 3000 	mla	r0, r2, r0, r3
 800d2f4:	f890 3b08 	ldrb.w	r3, [r0, #2824]	; 0xb08
 800d2f8:	b92b      	cbnz	r3, 800d306 <ca04a83f27bd1933b342c8619a464a402518176b+0x22>
 800d2fa:	4905      	ldr	r1, [pc, #20]	; (800d310 <ca04a83f27bd1933b342c8619a464a402518176b+0x2c>)
 800d2fc:	4805      	ldr	r0, [pc, #20]	; (800d314 <ca04a83f27bd1933b342c8619a464a402518176b+0x30>)
 800d2fe:	f240 228a 	movw	r2, #650	; 0x28a
 800d302:	f7f4 fae9 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d306:	f880 1b31 	strb.w	r1, [r0, #2865]	; 0xb31
 800d30a:	bd08      	pop	{r3, pc}
 800d30c:	20000040 	.word	0x20000040
 800d310:	0801f33d 	.word	0x0801f33d
 800d314:	0801f39f 	.word	0x0801f39f

0800d318 <963d67651eaddeb307ab0b02134cee28199d533d>:
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <963d67651eaddeb307ab0b02134cee28199d533d+0x20>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2000      	movs	r0, #0
 800d31e:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
 800d322:	f893 1b08 	ldrb.w	r1, [r3, #2824]	; 0xb08
 800d326:	b119      	cbz	r1, 800d330 <963d67651eaddeb307ab0b02134cee28199d533d+0x18>
 800d328:	f893 1b31 	ldrb.w	r1, [r3, #2865]	; 0xb31
 800d32c:	b101      	cbz	r1, 800d330 <963d67651eaddeb307ab0b02134cee28199d533d+0x18>
 800d32e:	3001      	adds	r0, #1
 800d330:	332a      	adds	r3, #42	; 0x2a
 800d332:	4293      	cmp	r3, r2
 800d334:	d1f5      	bne.n	800d322 <963d67651eaddeb307ab0b02134cee28199d533d+0xa>
 800d336:	4770      	bx	lr
 800d338:	20000040 	.word	0x20000040

0800d33c <a72cb89288ba405a2fc975c124a720574840c109>:
 800d33c:	b508      	push	{r3, lr}
 800d33e:	4b09      	ldr	r3, [pc, #36]	; (800d364 <a72cb89288ba405a2fc975c124a720574840c109+0x28>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 800d346:	2a1d      	cmp	r2, #29
 800d348:	d905      	bls.n	800d356 <a72cb89288ba405a2fc975c124a720574840c109+0x1a>
 800d34a:	4907      	ldr	r1, [pc, #28]	; (800d368 <a72cb89288ba405a2fc975c124a720574840c109+0x2c>)
 800d34c:	4807      	ldr	r0, [pc, #28]	; (800d36c <a72cb89288ba405a2fc975c124a720574840c109+0x30>)
 800d34e:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800d352:	f7f4 fac1 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d356:	212a      	movs	r1, #42	; 0x2a
 800d358:	fb01 3302 	mla	r3, r1, r2, r3
 800d35c:	f893 0b30 	ldrb.w	r0, [r3, #2864]	; 0xb30
 800d360:	bd08      	pop	{r3, pc}
 800d362:	bf00      	nop
 800d364:	20000040 	.word	0x20000040
 800d368:	0801f33d 	.word	0x0801f33d
 800d36c:	0801f436 	.word	0x0801f436

0800d370 <201075ddfc12155ac10a81b74045472dd935ece2>:
 800d370:	b508      	push	{r3, lr}
 800d372:	4b09      	ldr	r3, [pc, #36]	; (800d398 <201075ddfc12155ac10a81b74045472dd935ece2+0x28>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f893 2ff4 	ldrb.w	r2, [r3, #4084]	; 0xff4
 800d37a:	2a1d      	cmp	r2, #29
 800d37c:	d905      	bls.n	800d38a <201075ddfc12155ac10a81b74045472dd935ece2+0x1a>
 800d37e:	4907      	ldr	r1, [pc, #28]	; (800d39c <201075ddfc12155ac10a81b74045472dd935ece2+0x2c>)
 800d380:	4807      	ldr	r0, [pc, #28]	; (800d3a0 <201075ddfc12155ac10a81b74045472dd935ece2+0x30>)
 800d382:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d386:	f7f4 faa7 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d38a:	212a      	movs	r1, #42	; 0x2a
 800d38c:	fb01 3302 	mla	r3, r1, r2, r3
 800d390:	f883 0b30 	strb.w	r0, [r3, #2864]	; 0xb30
 800d394:	bd08      	pop	{r3, pc}
 800d396:	bf00      	nop
 800d398:	20000040 	.word	0x20000040
 800d39c:	0801f33d 	.word	0x0801f33d
 800d3a0:	0801f436 	.word	0x0801f436

0800d3a4 <ADDR_GetLength.isra.0>:
 800d3a4:	2807      	cmp	r0, #7
 800d3a6:	d80f      	bhi.n	800d3c8 <ADDR_GetLength.isra.0+0x24>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ae:	f010 0f92 	tst.w	r0, #146	; 0x92
 800d3b2:	d10b      	bne.n	800d3cc <ADDR_GetLength.isra.0+0x28>
 800d3b4:	f010 0f48 	tst.w	r0, #72	; 0x48
 800d3b8:	d10a      	bne.n	800d3d0 <ADDR_GetLength.isra.0+0x2c>
 800d3ba:	f010 0f24 	tst.w	r0, #36	; 0x24
 800d3be:	bf14      	ite	ne
 800d3c0:	4618      	movne	r0, r3
 800d3c2:	2000      	moveq	r0, #0
 800d3c4:	00c0      	lsls	r0, r0, #3
 800d3c6:	4770      	bx	lr
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	4770      	bx	lr
 800d3cc:	2002      	movs	r0, #2
 800d3ce:	4770      	bx	lr
 800d3d0:	2010      	movs	r0, #16
 800d3d2:	4770      	bx	lr

0800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>:
 800d3d4:	b508      	push	{r3, lr}
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	b920      	cbnz	r0, 800d3e4 <2de8c5d05f60c15cf061eba17324436038284da6+0x10>
 800d3da:	4913      	ldr	r1, [pc, #76]	; (800d428 <2de8c5d05f60c15cf061eba17324436038284da6+0x54>)
 800d3dc:	4813      	ldr	r0, [pc, #76]	; (800d42c <2de8c5d05f60c15cf061eba17324436038284da6+0x58>)
 800d3de:	22b2      	movs	r2, #178	; 0xb2
 800d3e0:	f7f4 fa7a 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d3e4:	7800      	ldrb	r0, [r0, #0]
 800d3e6:	2803      	cmp	r0, #3
 800d3e8:	d00b      	beq.n	800d402 <2de8c5d05f60c15cf061eba17324436038284da6+0x2e>
 800d3ea:	d804      	bhi.n	800d3f6 <2de8c5d05f60c15cf061eba17324436038284da6+0x22>
 800d3ec:	1e43      	subs	r3, r0, #1
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d90d      	bls.n	800d40e <2de8c5d05f60c15cf061eba17324436038284da6+0x3a>
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	e004      	b.n	800d400 <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 800d3f6:	3806      	subs	r0, #6
 800d3f8:	2801      	cmp	r0, #1
 800d3fa:	bf8c      	ite	hi
 800d3fc:	2000      	movhi	r0, #0
 800d3fe:	2001      	movls	r0, #1
 800d400:	bd08      	pop	{r3, pc}
 800d402:	7850      	ldrb	r0, [r2, #1]
 800d404:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 800d408:	4258      	negs	r0, r3
 800d40a:	4158      	adcs	r0, r3
 800d40c:	e7f8      	b.n	800d400 <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 800d40e:	f7ff ffc9 	bl	800d3a4 <ADDR_GetLength.isra.0>
 800d412:	4410      	add	r0, r2
 800d414:	4282      	cmp	r2, r0
 800d416:	d101      	bne.n	800d41c <2de8c5d05f60c15cf061eba17324436038284da6+0x48>
 800d418:	2001      	movs	r0, #1
 800d41a:	e7f1      	b.n	800d400 <2de8c5d05f60c15cf061eba17324436038284da6+0x2c>
 800d41c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d420:	2bff      	cmp	r3, #255	; 0xff
 800d422:	d0f7      	beq.n	800d414 <2de8c5d05f60c15cf061eba17324436038284da6+0x40>
 800d424:	e7e5      	b.n	800d3f2 <2de8c5d05f60c15cf061eba17324436038284da6+0x1e>
 800d426:	bf00      	nop
 800d428:	0801f44a 	.word	0x0801f44a
 800d42c:	0801f4ff 	.word	0x0801f4ff

0800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>:
 800d430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d432:	4603      	mov	r3, r0
 800d434:	b920      	cbnz	r0, 800d440 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x10>
 800d436:	4919      	ldr	r1, [pc, #100]	; (800d49c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x6c>)
 800d438:	4819      	ldr	r0, [pc, #100]	; (800d4a0 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x70>)
 800d43a:	2294      	movs	r2, #148	; 0x94
 800d43c:	f7f4 fa4c 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d440:	7802      	ldrb	r2, [r0, #0]
 800d442:	2400      	movs	r4, #0
 800d444:	2500      	movs	r5, #0
 800d446:	2a02      	cmp	r2, #2
 800d448:	e9cd 4500 	strd	r4, r5, [sp]
 800d44c:	d010      	beq.n	800d470 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x40>
 800d44e:	2a03      	cmp	r2, #3
 800d450:	d018      	beq.n	800d484 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x54>
 800d452:	2a01      	cmp	r2, #1
 800d454:	d108      	bne.n	800d468 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 800d456:	f7ff ffbd 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800d45a:	b128      	cbz	r0, 800d468 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 800d45c:	f04f 32ff 	mov.w	r2, #4294967295
 800d460:	f04f 33ff 	mov.w	r3, #4294967295
 800d464:	e9cd 2300 	strd	r2, r3, [sp]
 800d468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d46c:	b003      	add	sp, #12
 800d46e:	bd30      	pop	{r4, r5, pc}
 800d470:	aa02      	add	r2, sp, #8
 800d472:	f100 0108 	add.w	r1, r0, #8
 800d476:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d47a:	f802 0d01 	strb.w	r0, [r2, #-1]!
 800d47e:	428b      	cmp	r3, r1
 800d480:	d1f9      	bne.n	800d476 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x46>
 800d482:	e7f1      	b.n	800d468 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 800d484:	f100 0208 	add.w	r2, r0, #8
 800d488:	a902      	add	r1, sp, #8
 800d48a:	3310      	adds	r3, #16
 800d48c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d490:	f801 0d01 	strb.w	r0, [r1, #-1]!
 800d494:	429a      	cmp	r2, r3
 800d496:	d1f9      	bne.n	800d48c <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x5c>
 800d498:	e7e6      	b.n	800d468 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b+0x38>
 800d49a:	bf00      	nop
 800d49c:	0801f44a 	.word	0x0801f44a
 800d4a0:	0801f4ff 	.word	0x0801f4ff

0800d4a4 <271b2dbe31e411eac579adb987eb6de74d66e6b2>:
 800d4a4:	7802      	ldrb	r2, [r0, #0]
 800d4a6:	2a03      	cmp	r2, #3
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	d125      	bne.n	800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4ac:	7842      	ldrb	r2, [r0, #1]
 800d4ae:	2aff      	cmp	r2, #255	; 0xff
 800d4b0:	d122      	bne.n	800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4b2:	7882      	ldrb	r2, [r0, #2]
 800d4b4:	2a02      	cmp	r2, #2
 800d4b6:	d11f      	bne.n	800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4b8:	78c0      	ldrb	r0, [r0, #3]
 800d4ba:	b9e8      	cbnz	r0, 800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4bc:	791a      	ldrb	r2, [r3, #4]
 800d4be:	b9f2      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4c0:	7958      	ldrb	r0, [r3, #5]
 800d4c2:	b9d8      	cbnz	r0, 800d4fc <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 800d4c4:	799a      	ldrb	r2, [r3, #6]
 800d4c6:	b9d2      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4c8:	79d8      	ldrb	r0, [r3, #7]
 800d4ca:	b9b8      	cbnz	r0, 800d4fc <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 800d4cc:	7a1a      	ldrb	r2, [r3, #8]
 800d4ce:	b9b2      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4d0:	7a5a      	ldrb	r2, [r3, #9]
 800d4d2:	b98a      	cbnz	r2, 800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4d4:	7a98      	ldrb	r0, [r3, #10]
 800d4d6:	b978      	cbnz	r0, 800d4f8 <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x54>
 800d4d8:	7ada      	ldrb	r2, [r3, #11]
 800d4da:	b982      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4dc:	7b18      	ldrb	r0, [r3, #12]
 800d4de:	b968      	cbnz	r0, 800d4fc <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 800d4e0:	7b5a      	ldrb	r2, [r3, #13]
 800d4e2:	b962      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4e4:	7b98      	ldrb	r0, [r3, #14]
 800d4e6:	b948      	cbnz	r0, 800d4fc <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x58>
 800d4e8:	7bda      	ldrb	r2, [r3, #15]
 800d4ea:	b942      	cbnz	r2, 800d4fe <271b2dbe31e411eac579adb987eb6de74d66e6b2+0x5a>
 800d4ec:	7c18      	ldrb	r0, [r3, #16]
 800d4ee:	f1a0 031a 	sub.w	r3, r0, #26
 800d4f2:	4258      	negs	r0, r3
 800d4f4:	4158      	adcs	r0, r3
 800d4f6:	4770      	bx	lr
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	4770      	bx	lr
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	4770      	bx	lr

0800d500 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7>:
 800d500:	7802      	ldrb	r2, [r0, #0]
 800d502:	2a03      	cmp	r2, #3
 800d504:	4603      	mov	r3, r0
 800d506:	d124      	bne.n	800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d508:	7842      	ldrb	r2, [r0, #1]
 800d50a:	2aff      	cmp	r2, #255	; 0xff
 800d50c:	d121      	bne.n	800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d50e:	7882      	ldrb	r2, [r0, #2]
 800d510:	2a02      	cmp	r2, #2
 800d512:	d11e      	bne.n	800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d514:	78c0      	ldrb	r0, [r0, #3]
 800d516:	b9e0      	cbnz	r0, 800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d518:	791a      	ldrb	r2, [r3, #4]
 800d51a:	b9ea      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d51c:	7958      	ldrb	r0, [r3, #5]
 800d51e:	b9d0      	cbnz	r0, 800d556 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 800d520:	799a      	ldrb	r2, [r3, #6]
 800d522:	b9ca      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d524:	79d8      	ldrb	r0, [r3, #7]
 800d526:	b9b0      	cbnz	r0, 800d556 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 800d528:	7a1a      	ldrb	r2, [r3, #8]
 800d52a:	b9aa      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d52c:	7a5a      	ldrb	r2, [r3, #9]
 800d52e:	b982      	cbnz	r2, 800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d530:	7a98      	ldrb	r0, [r3, #10]
 800d532:	b970      	cbnz	r0, 800d552 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x52>
 800d534:	7ada      	ldrb	r2, [r3, #11]
 800d536:	b97a      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d538:	7b18      	ldrb	r0, [r3, #12]
 800d53a:	b960      	cbnz	r0, 800d556 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 800d53c:	7b5a      	ldrb	r2, [r3, #13]
 800d53e:	b95a      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d540:	7b98      	ldrb	r0, [r3, #14]
 800d542:	b940      	cbnz	r0, 800d556 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x56>
 800d544:	7bda      	ldrb	r2, [r3, #15]
 800d546:	b93a      	cbnz	r2, 800d558 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7+0x58>
 800d548:	7c18      	ldrb	r0, [r3, #16]
 800d54a:	1e43      	subs	r3, r0, #1
 800d54c:	4258      	negs	r0, r3
 800d54e:	4158      	adcs	r0, r3
 800d550:	4770      	bx	lr
 800d552:	2000      	movs	r0, #0
 800d554:	4770      	bx	lr
 800d556:	4610      	mov	r0, r2
 800d558:	4770      	bx	lr
	...

0800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>:
 800d55c:	b508      	push	{r3, lr}
 800d55e:	7803      	ldrb	r3, [r0, #0]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d108      	bne.n	800d576 <4568fced62f20053a59091f5ee26eed63ee62b0d+0x1a>
 800d564:	4905      	ldr	r1, [pc, #20]	; (800d57c <4568fced62f20053a59091f5ee26eed63ee62b0d+0x20>)
 800d566:	2208      	movs	r2, #8
 800d568:	3001      	adds	r0, #1
 800d56a:	f00e fcf3 	bl	801bf54 <memcmp>
 800d56e:	fab0 f080 	clz	r0, r0
 800d572:	0940      	lsrs	r0, r0, #5
 800d574:	bd08      	pop	{r3, pc}
 800d576:	2000      	movs	r0, #0
 800d578:	e7fc      	b.n	800d574 <4568fced62f20053a59091f5ee26eed63ee62b0d+0x18>
 800d57a:	bf00      	nop
 800d57c:	0801f574 	.word	0x0801f574

0800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>:
 800d580:	b510      	push	{r4, lr}
 800d582:	4604      	mov	r4, r0
 800d584:	7803      	ldrb	r3, [r0, #0]
 800d586:	7808      	ldrb	r0, [r1, #0]
 800d588:	4298      	cmp	r0, r3
 800d58a:	d10a      	bne.n	800d5a2 <32ee1897f5dd097f851de45186212ed2e150a0c5+0x22>
 800d58c:	f7ff ff0a 	bl	800d3a4 <ADDR_GetLength.isra.0>
 800d590:	3101      	adds	r1, #1
 800d592:	4602      	mov	r2, r0
 800d594:	1c60      	adds	r0, r4, #1
 800d596:	f00e fcdd 	bl	801bf54 <memcmp>
 800d59a:	fab0 f080 	clz	r0, r0
 800d59e:	0940      	lsrs	r0, r0, #5
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	e7fc      	b.n	800d5a0 <32ee1897f5dd097f851de45186212ed2e150a0c5+0x20>
	...

0800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	7800      	ldrb	r0, [r0, #0]
 800d5ae:	f7ff fef9 	bl	800d3a4 <ADDR_GetLength.isra.0>
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	481d      	ldr	r0, [pc, #116]	; (800d62c <706a956218859121b399480423d2fbe6bb70cd71+0x84>)
 800d5b6:	f003 f805 	bl	80105c4 <LOGGER_Print>
 800d5ba:	7823      	ldrb	r3, [r4, #0]
 800d5bc:	2b07      	cmp	r3, #7
 800d5be:	d829      	bhi.n	800d614 <706a956218859121b399480423d2fbe6bb70cd71+0x6c>
 800d5c0:	e8df f003 	tbb	[pc, r3]
 800d5c4:	1e1c1a04 	.word	0x1e1c1a04
 800d5c8:	26242220 	.word	0x26242220
 800d5cc:	4818      	ldr	r0, [pc, #96]	; (800d630 <706a956218859121b399480423d2fbe6bb70cd71+0x88>)
 800d5ce:	f002 fff9 	bl	80105c4 <LOGGER_Print>
 800d5d2:	4818      	ldr	r0, [pc, #96]	; (800d634 <706a956218859121b399480423d2fbe6bb70cd71+0x8c>)
 800d5d4:	f002 fff6 	bl	80105c4 <LOGGER_Print>
 800d5d8:	b326      	cbz	r6, 800d624 <706a956218859121b399480423d2fbe6bb70cd71+0x7c>
 800d5da:	4625      	mov	r5, r4
 800d5dc:	4816      	ldr	r0, [pc, #88]	; (800d638 <706a956218859121b399480423d2fbe6bb70cd71+0x90>)
 800d5de:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800d5e2:	f002 ffef 	bl	80105c4 <LOGGER_Print>
 800d5e6:	4434      	add	r4, r6
 800d5e8:	4e14      	ldr	r6, [pc, #80]	; (800d63c <706a956218859121b399480423d2fbe6bb70cd71+0x94>)
 800d5ea:	42a5      	cmp	r5, r4
 800d5ec:	d114      	bne.n	800d618 <706a956218859121b399480423d2fbe6bb70cd71+0x70>
 800d5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5f2:	4813      	ldr	r0, [pc, #76]	; (800d640 <706a956218859121b399480423d2fbe6bb70cd71+0x98>)
 800d5f4:	f002 bfe6 	b.w	80105c4 <LOGGER_Print>
 800d5f8:	4812      	ldr	r0, [pc, #72]	; (800d644 <706a956218859121b399480423d2fbe6bb70cd71+0x9c>)
 800d5fa:	e7e8      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d5fc:	4812      	ldr	r0, [pc, #72]	; (800d648 <706a956218859121b399480423d2fbe6bb70cd71+0xa0>)
 800d5fe:	e7e6      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d600:	4812      	ldr	r0, [pc, #72]	; (800d64c <706a956218859121b399480423d2fbe6bb70cd71+0xa4>)
 800d602:	e7e4      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d604:	4812      	ldr	r0, [pc, #72]	; (800d650 <706a956218859121b399480423d2fbe6bb70cd71+0xa8>)
 800d606:	e7e2      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d608:	4812      	ldr	r0, [pc, #72]	; (800d654 <706a956218859121b399480423d2fbe6bb70cd71+0xac>)
 800d60a:	e7e0      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d60c:	4812      	ldr	r0, [pc, #72]	; (800d658 <706a956218859121b399480423d2fbe6bb70cd71+0xb0>)
 800d60e:	e7de      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d610:	4812      	ldr	r0, [pc, #72]	; (800d65c <706a956218859121b399480423d2fbe6bb70cd71+0xb4>)
 800d612:	e7dc      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d614:	4812      	ldr	r0, [pc, #72]	; (800d660 <706a956218859121b399480423d2fbe6bb70cd71+0xb8>)
 800d616:	e7da      	b.n	800d5ce <706a956218859121b399480423d2fbe6bb70cd71+0x26>
 800d618:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800d61c:	4630      	mov	r0, r6
 800d61e:	f002 ffd1 	bl	80105c4 <LOGGER_Print>
 800d622:	e7e2      	b.n	800d5ea <706a956218859121b399480423d2fbe6bb70cd71+0x42>
 800d624:	480e      	ldr	r0, [pc, #56]	; (800d660 <706a956218859121b399480423d2fbe6bb70cd71+0xb8>)
 800d626:	f002 ffcd 	bl	80105c4 <LOGGER_Print>
 800d62a:	e7e0      	b.n	800d5ee <706a956218859121b399480423d2fbe6bb70cd71+0x46>
 800d62c:	0801f4ae 	.word	0x0801f4ae
 800d630:	0801f4b6 	.word	0x0801f4b6
 800d634:	0801f4ed 	.word	0x0801f4ed
 800d638:	0801f4f8 	.word	0x0801f4f8
 800d63c:	0801f4f7 	.word	0x0801f4f7
 800d640:	0801f4fd 	.word	0x0801f4fd
 800d644:	0801f4bb 	.word	0x0801f4bb
 800d648:	0801f4bf 	.word	0x0801f4bf
 800d64c:	0801f4c3 	.word	0x0801f4c3
 800d650:	0801f4c8 	.word	0x0801f4c8
 800d654:	0801f4ce 	.word	0x0801f4ce
 800d658:	0801f4d5 	.word	0x0801f4d5
 800d65c:	0801f4dd 	.word	0x0801f4dd
 800d660:	0801f4e3 	.word	0x0801f4e3

0800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>:
 800d664:	b570      	push	{r4, r5, r6, lr}
 800d666:	4605      	mov	r5, r0
 800d668:	b088      	sub	sp, #32
 800d66a:	460c      	mov	r4, r1
 800d66c:	b921      	cbnz	r1, 800d678 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x14>
 800d66e:	4921      	ldr	r1, [pc, #132]	; (800d6f4 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x90>)
 800d670:	4821      	ldr	r0, [pc, #132]	; (800d6f8 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x94>)
 800d672:	2219      	movs	r2, #25
 800d674:	f7f4 f930 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d678:	2211      	movs	r2, #17
 800d67a:	2100      	movs	r1, #0
 800d67c:	a803      	add	r0, sp, #12
 800d67e:	f00e fc93 	bl	801bfa8 <memset>
 800d682:	7823      	ldrb	r3, [r4, #0]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d125      	bne.n	800d6d4 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x70>
 800d688:	4620      	mov	r0, r4
 800d68a:	f7ff fea3 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800d68e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800d692:	b1b0      	cbz	r0, 800d6c2 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x5e>
 800d694:	b29b      	uxth	r3, r3
 800d696:	2202      	movs	r2, #2
 800d698:	f88d 200c 	strb.w	r2, [sp, #12]
 800d69c:	f8ad 3013 	strh.w	r3, [sp, #19]
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	ab03      	add	r3, sp, #12
 800d6a4:	ae07      	add	r6, sp, #28
 800d6a6:	461c      	mov	r4, r3
 800d6a8:	cc03      	ldmia	r4!, {r0, r1}
 800d6aa:	42b4      	cmp	r4, r6
 800d6ac:	6010      	str	r0, [r2, #0]
 800d6ae:	6051      	str	r1, [r2, #4]
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	f102 0208 	add.w	r2, r2, #8
 800d6b6:	d1f6      	bne.n	800d6a6 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x42>
 800d6b8:	7823      	ldrb	r3, [r4, #0]
 800d6ba:	7013      	strb	r3, [r2, #0]
 800d6bc:	4628      	mov	r0, r5
 800d6be:	b008      	add	sp, #32
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800d6c6:	f8cd 200d 	str.w	r2, [sp, #13]
 800d6ca:	f8d4 200d 	ldr.w	r2, [r4, #13]
 800d6ce:	f8cd 2011 	str.w	r2, [sp, #17]
 800d6d2:	e7df      	b.n	800d694 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x30>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	4b08      	ldr	r3, [pc, #32]	; (800d6fc <c830e52416e40936b7f282734abfc3137eeaf4dc+0x98>)
 800d6da:	4a09      	ldr	r2, [pc, #36]	; (800d700 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x9c>)
 800d6dc:	9302      	str	r3, [sp, #8]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	f002 ffa7 	bl	8010634 <LOGGER_PrintLine>
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff ff5e 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	e7d2      	b.n	800d698 <c830e52416e40936b7f282734abfc3137eeaf4dc+0x34>
 800d6f2:	bf00      	nop
 800d6f4:	0801f44a 	.word	0x0801f44a
 800d6f8:	0801f4ff 	.word	0x0801f4ff
 800d6fc:	0801f500 	.word	0x0801f500
 800d700:	0801f508 	.word	0x0801f508

0800d704 <2af6233fa7118fd11caf81b4f86d81e84f105465>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4605      	mov	r5, r0
 800d708:	b088      	sub	sp, #32
 800d70a:	460c      	mov	r4, r1
 800d70c:	b921      	cbnz	r1, 800d718 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x14>
 800d70e:	4921      	ldr	r1, [pc, #132]	; (800d794 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x90>)
 800d710:	4821      	ldr	r0, [pc, #132]	; (800d798 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x94>)
 800d712:	222c      	movs	r2, #44	; 0x2c
 800d714:	f7f4 f8e0 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d718:	2211      	movs	r2, #17
 800d71a:	2100      	movs	r1, #0
 800d71c:	a803      	add	r0, sp, #12
 800d71e:	f00e fc43 	bl	801bfa8 <memset>
 800d722:	7823      	ldrb	r3, [r4, #0]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d126      	bne.n	800d776 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x72>
 800d728:	4620      	mov	r0, r4
 800d72a:	f7ff fe53 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800d72e:	b1d8      	cbz	r0, 800d768 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x64>
 800d730:	f8d4 3005 	ldr.w	r3, [r4, #5]
 800d734:	f8cd 300d 	str.w	r3, [sp, #13]
 800d738:	f8d4 3009 	ldr.w	r3, [r4, #9]
 800d73c:	f8cd 3011 	str.w	r3, [sp, #17]
 800d740:	2305      	movs	r3, #5
 800d742:	f88d 300c 	strb.w	r3, [sp, #12]
 800d746:	462a      	mov	r2, r5
 800d748:	ab03      	add	r3, sp, #12
 800d74a:	ae07      	add	r6, sp, #28
 800d74c:	461c      	mov	r4, r3
 800d74e:	cc03      	ldmia	r4!, {r0, r1}
 800d750:	42b4      	cmp	r4, r6
 800d752:	6010      	str	r0, [r2, #0]
 800d754:	6051      	str	r1, [r2, #4]
 800d756:	4623      	mov	r3, r4
 800d758:	f102 0208 	add.w	r2, r2, #8
 800d75c:	d1f6      	bne.n	800d74c <2af6233fa7118fd11caf81b4f86d81e84f105465+0x48>
 800d75e:	7823      	ldrb	r3, [r4, #0]
 800d760:	7013      	strb	r3, [r2, #0]
 800d762:	4628      	mov	r0, r5
 800d764:	b008      	add	sp, #32
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800d76c:	f8cd 300d 	str.w	r3, [sp, #13]
 800d770:	f8d4 3005 	ldr.w	r3, [r4, #5]
 800d774:	e7e2      	b.n	800d73c <2af6233fa7118fd11caf81b4f86d81e84f105465+0x38>
 800d776:	2301      	movs	r3, #1
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	4b08      	ldr	r3, [pc, #32]	; (800d79c <2af6233fa7118fd11caf81b4f86d81e84f105465+0x98>)
 800d77c:	4a08      	ldr	r2, [pc, #32]	; (800d7a0 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x9c>)
 800d77e:	9302      	str	r3, [sp, #8]
 800d780:	4619      	mov	r1, r3
 800d782:	2001      	movs	r0, #1
 800d784:	f002 ff56 	bl	8010634 <LOGGER_PrintLine>
 800d788:	4620      	mov	r0, r4
 800d78a:	f7ff ff0d 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d78e:	2300      	movs	r3, #0
 800d790:	e7d7      	b.n	800d742 <2af6233fa7118fd11caf81b4f86d81e84f105465+0x3e>
 800d792:	bf00      	nop
 800d794:	0801f44a 	.word	0x0801f44a
 800d798:	0801f4ff 	.word	0x0801f4ff
 800d79c:	0801f500 	.word	0x0801f500
 800d7a0:	0801f508 	.word	0x0801f508

0800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>:
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	b088      	sub	sp, #32
 800d7aa:	4614      	mov	r4, r2
 800d7ac:	460d      	mov	r5, r1
 800d7ae:	b921      	cbnz	r1, 800d7ba <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x16>
 800d7b0:	2240      	movs	r2, #64	; 0x40
 800d7b2:	4923      	ldr	r1, [pc, #140]	; (800d840 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x9c>)
 800d7b4:	4823      	ldr	r0, [pc, #140]	; (800d844 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa0>)
 800d7b6:	f7f4 f88f 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d7ba:	b90a      	cbnz	r2, 800d7c0 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x1c>
 800d7bc:	2241      	movs	r2, #65	; 0x41
 800d7be:	e7f8      	b.n	800d7b2 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xe>
 800d7c0:	2211      	movs	r2, #17
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	a803      	add	r0, sp, #12
 800d7c6:	f00e fbef 	bl	801bfa8 <memset>
 800d7ca:	782b      	ldrb	r3, [r5, #0]
 800d7cc:	2b05      	cmp	r3, #5
 800d7ce:	d126      	bne.n	800d81e <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x7a>
 800d7d0:	7823      	ldrb	r3, [r4, #0]
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d123      	bne.n	800d81e <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x7a>
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	f88d 300c 	strb.w	r3, [sp, #12]
 800d7dc:	f8d5 3001 	ldr.w	r3, [r5, #1]
 800d7e0:	f8cd 300d 	str.w	r3, [sp, #13]
 800d7e4:	f8d5 3005 	ldr.w	r3, [r5, #5]
 800d7e8:	f8cd 3011 	str.w	r3, [sp, #17]
 800d7ec:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800d7f0:	f8cd 3015 	str.w	r3, [sp, #21]
 800d7f4:	f8d4 3005 	ldr.w	r3, [r4, #5]
 800d7f8:	f8cd 3019 	str.w	r3, [sp, #25]
 800d7fc:	ab03      	add	r3, sp, #12
 800d7fe:	4632      	mov	r2, r6
 800d800:	ad07      	add	r5, sp, #28
 800d802:	461c      	mov	r4, r3
 800d804:	cc03      	ldmia	r4!, {r0, r1}
 800d806:	42ac      	cmp	r4, r5
 800d808:	6010      	str	r0, [r2, #0]
 800d80a:	6051      	str	r1, [r2, #4]
 800d80c:	4623      	mov	r3, r4
 800d80e:	f102 0208 	add.w	r2, r2, #8
 800d812:	d1f6      	bne.n	800d802 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x5e>
 800d814:	7823      	ldrb	r3, [r4, #0]
 800d816:	7013      	strb	r3, [r2, #0]
 800d818:	4630      	mov	r0, r6
 800d81a:	b008      	add	sp, #32
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	2301      	movs	r3, #1
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	4b09      	ldr	r3, [pc, #36]	; (800d848 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa4>)
 800d824:	4a09      	ldr	r2, [pc, #36]	; (800d84c <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0xa8>)
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	4619      	mov	r1, r3
 800d82a:	2001      	movs	r0, #1
 800d82c:	f002 ff02 	bl	8010634 <LOGGER_PrintLine>
 800d830:	4628      	mov	r0, r5
 800d832:	f7ff feb9 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d836:	4620      	mov	r0, r4
 800d838:	f7ff feb6 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d83c:	e7de      	b.n	800d7fc <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4+0x58>
 800d83e:	bf00      	nop
 800d840:	0801f44a 	.word	0x0801f44a
 800d844:	0801f4ff 	.word	0x0801f4ff
 800d848:	0801f500 	.word	0x0801f500
 800d84c:	0801f516 	.word	0x0801f516

0800d850 <b4e42b26493966bc617e4c89906d69f121a97c96>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	4605      	mov	r5, r0
 800d854:	b088      	sub	sp, #32
 800d856:	460c      	mov	r4, r1
 800d858:	b921      	cbnz	r1, 800d864 <b4e42b26493966bc617e4c89906d69f121a97c96+0x14>
 800d85a:	491b      	ldr	r1, [pc, #108]	; (800d8c8 <b4e42b26493966bc617e4c89906d69f121a97c96+0x78>)
 800d85c:	481b      	ldr	r0, [pc, #108]	; (800d8cc <b4e42b26493966bc617e4c89906d69f121a97c96+0x7c>)
 800d85e:	2252      	movs	r2, #82	; 0x52
 800d860:	f7f4 f83a 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d864:	2211      	movs	r2, #17
 800d866:	2100      	movs	r1, #0
 800d868:	a803      	add	r0, sp, #12
 800d86a:	f00e fb9d 	bl	801bfa8 <memset>
 800d86e:	7823      	ldrb	r3, [r4, #0]
 800d870:	2b02      	cmp	r3, #2
 800d872:	f04f 0301 	mov.w	r3, #1
 800d876:	d118      	bne.n	800d8aa <b4e42b26493966bc617e4c89906d69f121a97c96+0x5a>
 800d878:	79e1      	ldrb	r1, [r4, #7]
 800d87a:	7a22      	ldrb	r2, [r4, #8]
 800d87c:	f88d 300c 	strb.w	r3, [sp, #12]
 800d880:	f88d 200e 	strb.w	r2, [sp, #14]
 800d884:	f88d 100d 	strb.w	r1, [sp, #13]
 800d888:	ab03      	add	r3, sp, #12
 800d88a:	462a      	mov	r2, r5
 800d88c:	ae07      	add	r6, sp, #28
 800d88e:	461c      	mov	r4, r3
 800d890:	cc03      	ldmia	r4!, {r0, r1}
 800d892:	42b4      	cmp	r4, r6
 800d894:	6010      	str	r0, [r2, #0]
 800d896:	6051      	str	r1, [r2, #4]
 800d898:	4623      	mov	r3, r4
 800d89a:	f102 0208 	add.w	r2, r2, #8
 800d89e:	d1f6      	bne.n	800d88e <b4e42b26493966bc617e4c89906d69f121a97c96+0x3e>
 800d8a0:	7823      	ldrb	r3, [r4, #0]
 800d8a2:	7013      	strb	r3, [r2, #0]
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	b008      	add	sp, #32
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	4b08      	ldr	r3, [pc, #32]	; (800d8d0 <b4e42b26493966bc617e4c89906d69f121a97c96+0x80>)
 800d8ae:	4a09      	ldr	r2, [pc, #36]	; (800d8d4 <b4e42b26493966bc617e4c89906d69f121a97c96+0x84>)
 800d8b0:	9801      	ldr	r0, [sp, #4]
 800d8b2:	9302      	str	r3, [sp, #8]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	f002 febd 	bl	8010634 <LOGGER_PrintLine>
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f7ff fe74 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	e7d9      	b.n	800d87c <b4e42b26493966bc617e4c89906d69f121a97c96+0x2c>
 800d8c8:	0801f44a 	.word	0x0801f44a
 800d8cc:	0801f4ff 	.word	0x0801f4ff
 800d8d0:	0801f500 	.word	0x0801f500
 800d8d4:	0801f532 	.word	0x0801f532

0800d8d8 <9730579196d24a2a06a66ac441c59b7f99b57834>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	4605      	mov	r5, r0
 800d8dc:	b088      	sub	sp, #32
 800d8de:	460c      	mov	r4, r1
 800d8e0:	b921      	cbnz	r1, 800d8ec <9730579196d24a2a06a66ac441c59b7f99b57834+0x14>
 800d8e2:	491c      	ldr	r1, [pc, #112]	; (800d954 <9730579196d24a2a06a66ac441c59b7f99b57834+0x7c>)
 800d8e4:	481c      	ldr	r0, [pc, #112]	; (800d958 <9730579196d24a2a06a66ac441c59b7f99b57834+0x80>)
 800d8e6:	2262      	movs	r2, #98	; 0x62
 800d8e8:	f7f3 fff6 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d8ec:	2211      	movs	r2, #17
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	a803      	add	r0, sp, #12
 800d8f2:	f00e fb59 	bl	801bfa8 <memset>
 800d8f6:	7823      	ldrb	r3, [r4, #0]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d11e      	bne.n	800d93a <9730579196d24a2a06a66ac441c59b7f99b57834+0x62>
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	f88d 300c 	strb.w	r3, [sp, #12]
 800d902:	2300      	movs	r3, #0
 800d904:	f8cd 300d 	str.w	r3, [sp, #13]
 800d908:	f8ad 3011 	strh.w	r3, [sp, #17]
 800d90c:	7863      	ldrb	r3, [r4, #1]
 800d90e:	f88d 3013 	strb.w	r3, [sp, #19]
 800d912:	78a3      	ldrb	r3, [r4, #2]
 800d914:	f88d 3014 	strb.w	r3, [sp, #20]
 800d918:	ab03      	add	r3, sp, #12
 800d91a:	462a      	mov	r2, r5
 800d91c:	ae07      	add	r6, sp, #28
 800d91e:	461c      	mov	r4, r3
 800d920:	cc03      	ldmia	r4!, {r0, r1}
 800d922:	42b4      	cmp	r4, r6
 800d924:	6010      	str	r0, [r2, #0]
 800d926:	6051      	str	r1, [r2, #4]
 800d928:	4623      	mov	r3, r4
 800d92a:	f102 0208 	add.w	r2, r2, #8
 800d92e:	d1f6      	bne.n	800d91e <9730579196d24a2a06a66ac441c59b7f99b57834+0x46>
 800d930:	7823      	ldrb	r3, [r4, #0]
 800d932:	7013      	strb	r3, [r2, #0]
 800d934:	4628      	mov	r0, r5
 800d936:	b008      	add	sp, #32
 800d938:	bd70      	pop	{r4, r5, r6, pc}
 800d93a:	2301      	movs	r3, #1
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	4b07      	ldr	r3, [pc, #28]	; (800d95c <9730579196d24a2a06a66ac441c59b7f99b57834+0x84>)
 800d940:	4a07      	ldr	r2, [pc, #28]	; (800d960 <9730579196d24a2a06a66ac441c59b7f99b57834+0x88>)
 800d942:	9302      	str	r3, [sp, #8]
 800d944:	4619      	mov	r1, r3
 800d946:	2001      	movs	r0, #1
 800d948:	f002 fe74 	bl	8010634 <LOGGER_PrintLine>
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7ff fe2b 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800d952:	e7e1      	b.n	800d918 <9730579196d24a2a06a66ac441c59b7f99b57834+0x40>
 800d954:	0801f44a 	.word	0x0801f44a
 800d958:	0801f4ff 	.word	0x0801f4ff
 800d95c:	0801f500 	.word	0x0801f500
 800d960:	0801f53f 	.word	0x0801f53f

0800d964 <144ed7de545b4a42832ce04a16bf065a50d4ff30>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	4606      	mov	r6, r0
 800d96a:	b089      	sub	sp, #36	; 0x24
 800d96c:	4615      	mov	r5, r2
 800d96e:	460c      	mov	r4, r1
 800d970:	b921      	cbnz	r1, 800d97c <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x18>
 800d972:	2273      	movs	r2, #115	; 0x73
 800d974:	4937      	ldr	r1, [pc, #220]	; (800da54 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf0>)
 800d976:	4838      	ldr	r0, [pc, #224]	; (800da58 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf4>)
 800d978:	f7f3 ffae 	bl	80018d8 <EXPECT_OnAbortHandler>
 800d97c:	b90a      	cbnz	r2, 800d982 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x1e>
 800d97e:	2274      	movs	r2, #116	; 0x74
 800d980:	e7f8      	b.n	800d974 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x10>
 800d982:	2211      	movs	r2, #17
 800d984:	2100      	movs	r1, #0
 800d986:	a803      	add	r0, sp, #12
 800d988:	f00e fb0e 	bl	801bfa8 <memset>
 800d98c:	7822      	ldrb	r2, [r4, #0]
 800d98e:	2a05      	cmp	r2, #5
 800d990:	d142      	bne.n	800da18 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xb4>
 800d992:	782b      	ldrb	r3, [r5, #0]
 800d994:	2b07      	cmp	r3, #7
 800d996:	d001      	beq.n	800d99c <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x38>
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d13d      	bne.n	800da18 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xb4>
 800d99c:	f894 b001 	ldrb.w	fp, [r4, #1]
 800d9a0:	f894 a002 	ldrb.w	sl, [r4, #2]
 800d9a4:	f894 9003 	ldrb.w	r9, [r4, #3]
 800d9a8:	f894 8004 	ldrb.w	r8, [r4, #4]
 800d9ac:	f894 e005 	ldrb.w	lr, [r4, #5]
 800d9b0:	f894 c006 	ldrb.w	ip, [r4, #6]
 800d9b4:	79e7      	ldrb	r7, [r4, #7]
 800d9b6:	7a20      	ldrb	r0, [r4, #8]
 800d9b8:	7869      	ldrb	r1, [r5, #1]
 800d9ba:	78ab      	ldrb	r3, [r5, #2]
 800d9bc:	24ff      	movs	r4, #255	; 0xff
 800d9be:	2503      	movs	r5, #3
 800d9c0:	f88d 500c 	strb.w	r5, [sp, #12]
 800d9c4:	f88d 400d 	strb.w	r4, [sp, #13]
 800d9c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800d9cc:	f88d 200e 	strb.w	r2, [sp, #14]
 800d9d0:	f88d b011 	strb.w	fp, [sp, #17]
 800d9d4:	f88d a012 	strb.w	sl, [sp, #18]
 800d9d8:	f88d 9013 	strb.w	r9, [sp, #19]
 800d9dc:	f88d 8014 	strb.w	r8, [sp, #20]
 800d9e0:	f88d e015 	strb.w	lr, [sp, #21]
 800d9e4:	f88d c016 	strb.w	ip, [sp, #22]
 800d9e8:	f88d 7017 	strb.w	r7, [sp, #23]
 800d9ec:	f88d 0018 	strb.w	r0, [sp, #24]
 800d9f0:	f88d 101b 	strb.w	r1, [sp, #27]
 800d9f4:	ac03      	add	r4, sp, #12
 800d9f6:	4633      	mov	r3, r6
 800d9f8:	ad07      	add	r5, sp, #28
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	ca03      	ldmia	r2!, {r0, r1}
 800d9fe:	42aa      	cmp	r2, r5
 800da00:	6018      	str	r0, [r3, #0]
 800da02:	6059      	str	r1, [r3, #4]
 800da04:	4614      	mov	r4, r2
 800da06:	f103 0308 	add.w	r3, r3, #8
 800da0a:	d1f6      	bne.n	800d9fa <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x96>
 800da0c:	7812      	ldrb	r2, [r2, #0]
 800da0e:	701a      	strb	r2, [r3, #0]
 800da10:	4630      	mov	r0, r6
 800da12:	b009      	add	sp, #36	; 0x24
 800da14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da18:	2301      	movs	r3, #1
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xf8>)
 800da1e:	4a10      	ldr	r2, [pc, #64]	; (800da60 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0xfc>)
 800da20:	9302      	str	r3, [sp, #8]
 800da22:	4619      	mov	r1, r3
 800da24:	2001      	movs	r0, #1
 800da26:	f002 fe05 	bl	8010634 <LOGGER_PrintLine>
 800da2a:	4620      	mov	r0, r4
 800da2c:	f7ff fdbc 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800da30:	4628      	mov	r0, r5
 800da32:	f7ff fdb9 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800da36:	2300      	movs	r3, #0
 800da38:	4619      	mov	r1, r3
 800da3a:	4618      	mov	r0, r3
 800da3c:	461f      	mov	r7, r3
 800da3e:	469c      	mov	ip, r3
 800da40:	469e      	mov	lr, r3
 800da42:	4698      	mov	r8, r3
 800da44:	4699      	mov	r9, r3
 800da46:	469a      	mov	sl, r3
 800da48:	469b      	mov	fp, r3
 800da4a:	461a      	mov	r2, r3
 800da4c:	461c      	mov	r4, r3
 800da4e:	461d      	mov	r5, r3
 800da50:	e7b6      	b.n	800d9c0 <144ed7de545b4a42832ce04a16bf065a50d4ff30+0x5c>
 800da52:	bf00      	nop
 800da54:	0801f44a 	.word	0x0801f44a
 800da58:	0801f4ff 	.word	0x0801f4ff
 800da5c:	0801f500 	.word	0x0801f500
 800da60:	0801f54c 	.word	0x0801f54c

0800da64 <f26cfbfa45ddc428fa93a21aa284ea921322a858>:
 800da64:	b513      	push	{r0, r1, r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	b920      	cbnz	r0, 800da74 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x10>
 800da6a:	4910      	ldr	r1, [pc, #64]	; (800daac <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x48>)
 800da6c:	4810      	ldr	r0, [pc, #64]	; (800dab0 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x4c>)
 800da6e:	22a6      	movs	r2, #166	; 0xa6
 800da70:	f7f3 ff32 	bl	80018d8 <EXPECT_OnAbortHandler>
 800da74:	7803      	ldrb	r3, [r0, #0]
 800da76:	2b03      	cmp	r3, #3
 800da78:	d108      	bne.n	800da8c <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x28>
 800da7a:	f7ff fcab 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800da7e:	b128      	cbz	r0, 800da8c <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x28>
 800da80:	f8b4 000f 	ldrh.w	r0, [r4, #15]
 800da84:	ba40      	rev16	r0, r0
 800da86:	b280      	uxth	r0, r0
 800da88:	b002      	add	sp, #8
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	2301      	movs	r3, #1
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x50>)
 800da92:	9301      	str	r3, [sp, #4]
 800da94:	ab02      	add	r3, sp, #8
 800da96:	e913 0003 	ldmdb	r3, {r0, r1}
 800da9a:	4a07      	ldr	r2, [pc, #28]	; (800dab8 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x54>)
 800da9c:	f002 fdca 	bl	8010634 <LOGGER_PrintLine>
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff fd81 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 800daa6:	2000      	movs	r0, #0
 800daa8:	e7ee      	b.n	800da88 <f26cfbfa45ddc428fa93a21aa284ea921322a858+0x24>
 800daaa:	bf00      	nop
 800daac:	0801f44a 	.word	0x0801f44a
 800dab0:	0801f4ff 	.word	0x0801f4ff
 800dab4:	0801f500 	.word	0x0801f500
 800dab8:	0801f508 	.word	0x0801f508

0800dabc <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>:
 800dabc:	4800      	ldr	r0, [pc, #0]	; (800dac0 <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb+0x4>)
 800dabe:	4770      	bx	lr
 800dac0:	0801f574 	.word	0x0801f574

0800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>:
 800dac4:	f200 1275 	addw	r2, r0, #373	; 0x175
 800dac8:	6042      	str	r2, [r0, #4]
 800daca:	22fa      	movs	r2, #250	; 0xfa
 800dacc:	6102      	str	r2, [r0, #16]
 800dace:	2201      	movs	r2, #1
 800dad0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800dad4:	2205      	movs	r2, #5
 800dad6:	2300      	movs	r3, #0
 800dad8:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 800dadc:	f64f 7280 	movw	r2, #65408	; 0xff80
 800dae0:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
 800dae4:	e9c0 3326 	strd	r3, r3, [r0, #152]	; 0x98
 800dae8:	8003      	strh	r3, [r0, #0]
 800daea:	7203      	strb	r3, [r0, #8]
 800daec:	60c3      	str	r3, [r0, #12]
 800daee:	8283      	strh	r3, [r0, #20]
 800daf0:	6183      	str	r3, [r0, #24]
 800daf2:	8383      	strh	r3, [r0, #28]
 800daf4:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 800daf8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800dafc:	65c3      	str	r3, [r0, #92]	; 0x5c
 800dafe:	f8a0 3092 	strh.w	r3, [r0, #146]	; 0x92
 800db02:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
 800db06:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 800db0a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800db0e:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
 800db12:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
 800db16:	f8a0 20b6 	strh.w	r2, [r0, #182]	; 0xb6
 800db1a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800db1e:	4770      	bx	lr

0800db20 <8651bfcf35514b04809eb22bd8aa118172b46770>:
 800db20:	b510      	push	{r4, lr}
 800db22:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <8651bfcf35514b04809eb22bd8aa118172b46770+0x34>)
 800db24:	681c      	ldr	r4, [r3, #0]
 800db26:	f604 73f8 	addw	r3, r4, #4088	; 0xff8
 800db2a:	2100      	movs	r1, #0
 800db2c:	f641 52cc 	movw	r2, #7628	; 0x1dcc
 800db30:	4618      	mov	r0, r3
 800db32:	f00e fa39 	bl	801bfa8 <memset>
 800db36:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 800db3a:	f500 51ed 	add.w	r1, r0, #7584	; 0x1da0
 800db3e:	3110      	adds	r1, #16
 800db40:	f8c4 1db8 	str.w	r1, [r4, #3512]	; 0xdb8
 800db44:	f7ff ffbe 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800db48:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 800db4c:	4288      	cmp	r0, r1
 800db4e:	d1f9      	bne.n	800db44 <8651bfcf35514b04809eb22bd8aa118172b46770+0x24>
 800db50:	bd10      	pop	{r4, pc}
 800db52:	bf00      	nop
 800db54:	20000040 	.word	0x20000040

0800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x38>)
 800db5c:	681c      	ldr	r4, [r3, #0]
 800db5e:	f604 75f8 	addw	r5, r4, #4088	; 0xff8
 800db62:	f504 5436 	add.w	r4, r4, #11648	; 0x2d80
 800db66:	4606      	mov	r6, r0
 800db68:	3428      	adds	r4, #40	; 0x28
 800db6a:	f7f8 f98b 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800db6e:	782b      	ldrb	r3, [r5, #0]
 800db70:	42b3      	cmp	r3, r6
 800db72:	d105      	bne.n	800db80 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x28>
 800db74:	786b      	ldrb	r3, [r5, #1]
 800db76:	2b31      	cmp	r3, #49	; 0x31
 800db78:	d002      	beq.n	800db80 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x28>
 800db7a:	4628      	mov	r0, r5
 800db7c:	f7ff ffa2 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800db80:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800db84:	f7f8 f99e 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800db88:	42a5      	cmp	r5, r4
 800db8a:	d1ee      	bne.n	800db6a <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e+0x12>
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	bf00      	nop
 800db90:	20000040 	.word	0x20000040

0800db94 <77b737f3175c59c67851de07d0921a2dae9a70ab>:
 800db94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800db98:	4b1d      	ldr	r3, [pc, #116]	; (800dc10 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x7c>)
 800db9a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800dc14 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x80>
 800db9e:	681f      	ldr	r7, [r3, #0]
 800dba0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800dc18 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x84>
 800dba4:	4606      	mov	r6, r0
 800dba6:	f607 75f8 	addw	r5, r7, #4088	; 0xff8
 800dbaa:	2400      	movs	r4, #0
 800dbac:	f44f 78be 	mov.w	r8, #380	; 0x17c
 800dbb0:	f7f8 f968 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dbb4:	786b      	ldrb	r3, [r5, #1]
 800dbb6:	2b40      	cmp	r3, #64	; 0x40
 800dbb8:	d120      	bne.n	800dbfc <77b737f3175c59c67851de07d0921a2dae9a70ab+0x68>
 800dbba:	fb08 7204 	mla	r2, r8, r4, r7
 800dbbe:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 800dbc2:	3208      	adds	r2, #8
 800dbc4:	f8d2 0007 	ldr.w	r0, [r2, #7]
 800dbc8:	6831      	ldr	r1, [r6, #0]
 800dbca:	7ad2      	ldrb	r2, [r2, #11]
 800dbcc:	7933      	ldrb	r3, [r6, #4]
 800dbce:	1a09      	subs	r1, r1, r0
 800dbd0:	eb63 0302 	sbc.w	r3, r3, r2
 800dbd4:	f640 1225 	movw	r2, #2341	; 0x925
 800dbd8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800dbdc:	4291      	cmp	r1, r2
 800dbde:	f173 0300 	sbcs.w	r3, r3, #0
 800dbe2:	d30b      	bcc.n	800dbfc <77b737f3175c59c67851de07d0921a2dae9a70ab+0x68>
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f7ff ff6d 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800dbea:	2303      	movs	r3, #3
 800dbec:	e9cd 3900 	strd	r3, r9, [sp]
 800dbf0:	ab02      	add	r3, sp, #8
 800dbf2:	e913 0003 	ldmdb	r3, {r0, r1}
 800dbf6:	4652      	mov	r2, sl
 800dbf8:	f002 fd1c 	bl	8010634 <LOGGER_PrintLine>
 800dbfc:	3401      	adds	r4, #1
 800dbfe:	f7f8 f961 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dc02:	2c14      	cmp	r4, #20
 800dc04:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800dc08:	d1d2      	bne.n	800dbb0 <77b737f3175c59c67851de07d0921a2dae9a70ab+0x1c>
 800dc0a:	b002      	add	sp, #8
 800dc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc10:	20000040 	.word	0x20000040
 800dc14:	0801f57c 	.word	0x0801f57c
 800dc18:	0801f582 	.word	0x0801f582

0800dc1c <5abd2f358b9e462fcede09cdd96a94c4ca379573>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <5abd2f358b9e462fcede09cdd96a94c4ca379573+0x28>)
 800dc20:	681c      	ldr	r4, [r3, #0]
 800dc22:	f604 75f8 	addw	r5, r4, #4088	; 0xff8
 800dc26:	f504 5436 	add.w	r4, r4, #11648	; 0x2d80
 800dc2a:	3428      	adds	r4, #40	; 0x28
 800dc2c:	f7f8 f92a 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dc30:	4628      	mov	r0, r5
 800dc32:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800dc36:	f7ff ff45 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800dc3a:	f7f8 f943 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dc3e:	42a5      	cmp	r5, r4
 800dc40:	d1f4      	bne.n	800dc2c <5abd2f358b9e462fcede09cdd96a94c4ca379573+0x10>
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	20000040 	.word	0x20000040

0800dc48 <e1319048c142912ea91dcc918ab796551ce50481>:
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <e1319048c142912ea91dcc918ab796551ce50481+0x2c>)
 800dc4c:	681c      	ldr	r4, [r3, #0]
 800dc4e:	f504 56ed 	add.w	r6, r4, #7584	; 0x1da0
 800dc52:	3610      	adds	r6, #16
 800dc54:	2500      	movs	r5, #0
 800dc56:	f7f8 f915 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dc5a:	f894 3ff9 	ldrb.w	r3, [r4, #4089]	; 0xff9
 800dc5e:	b903      	cbnz	r3, 800dc62 <e1319048c142912ea91dcc918ab796551ce50481+0x1a>
 800dc60:	3501      	adds	r5, #1
 800dc62:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800dc66:	f7f8 f92d 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dc6a:	42b4      	cmp	r4, r6
 800dc6c:	d1f3      	bne.n	800dc56 <e1319048c142912ea91dcc918ab796551ce50481+0xe>
 800dc6e:	4628      	mov	r0, r5
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	bf00      	nop
 800dc74:	20000040 	.word	0x20000040

0800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>:
 800dc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7c:	4e58      	ldr	r6, [pc, #352]	; (800dde0 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x168>)
 800dc7e:	b088      	sub	sp, #32
 800dc80:	6834      	ldr	r4, [r6, #0]
 800dc82:	4607      	mov	r7, r0
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f000 80a1 	beq.w	800ddcc <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 800dc8a:	f7f8 f8fb 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dc8e:	f7ff ffdb 	bl	800dc48 <e1319048c142912ea91dcc918ab796551ce50481>
 800dc92:	4605      	mov	r5, r0
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d157      	bne.n	800dd48 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xd0>
 800dc98:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 800dc9c:	f893 2dc1 	ldrb.w	r2, [r3, #3521]	; 0xdc1
 800dca0:	b93a      	cbnz	r2, 800dcb2 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x3a>
 800dca2:	f8d3 1db8 	ldr.w	r1, [r3, #3512]	; 0xdb8
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 2dc1 	strb.w	r2, [r3, #3521]	; 0xdc1
 800dcac:	684a      	ldr	r2, [r1, #4]
 800dcae:	3201      	adds	r2, #1
 800dcb0:	604a      	str	r2, [r1, #4]
 800dcb2:	f893 3dc0 	ldrb.w	r3, [r3, #3520]	; 0xdc0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d04f      	beq.n	800dd5a <331ec243926b1d9fd1d86c735e311ea19678e45f+0xe2>
 800dcba:	f7f8 f903 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dcbe:	2f73      	cmp	r7, #115	; 0x73
 800dcc0:	d85b      	bhi.n	800dd7a <331ec243926b1d9fd1d86c735e311ea19678e45f+0x102>
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	f44f 76be 	mov.w	r6, #380	; 0x17c
 800dcc8:	f604 78f9 	addw	r8, r4, #4089	; 0xff9
 800dccc:	f7f8 f8da 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dcd0:	fb06 f205 	mul.w	r2, r6, r5
 800dcd4:	f818 1002 	ldrb.w	r1, [r8, r2]
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	d17a      	bne.n	800ddd2 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x15a>
 800dcdc:	18a6      	adds	r6, r4, r2
 800dcde:	f202 1375 	addw	r3, r2, #373	; 0x175
 800dce2:	f604 74f8 	addw	r4, r4, #4088	; 0xff8
 800dce6:	f8d6 0ffc 	ldr.w	r0, [r6, #4092]	; 0xffc
 800dcea:	4423      	add	r3, r4
 800dcec:	4298      	cmp	r0, r3
 800dcee:	eb04 0802 	add.w	r8, r4, r2
 800dcf2:	d019      	beq.n	800dd28 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xb0>
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	9306      	str	r3, [sp, #24]
 800dcf8:	32b9      	adds	r2, #185	; 0xb9
 800dcfa:	4b3a      	ldr	r3, [pc, #232]	; (800dde4 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x16c>)
 800dcfc:	9307      	str	r3, [sp, #28]
 800dcfe:	4414      	add	r4, r2
 800dd00:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800dd04:	9404      	str	r4, [sp, #16]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	4a37      	ldr	r2, [pc, #220]	; (800dde8 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x170>)
 800dd0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd0e:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 800dd12:	e9cd 1300 	strd	r1, r3, [sp]
 800dd16:	a908      	add	r1, sp, #32
 800dd18:	e911 0003 	ldmdb	r1, {r0, r1}
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	f002 fc89 	bl	8010634 <LOGGER_PrintLine>
 800dd22:	4640      	mov	r0, r8
 800dd24:	f7ff fece 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800dd28:	f886 7ff8 	strb.w	r7, [r6, #4088]	; 0xff8
 800dd2c:	f886 7ff9 	strb.w	r7, [r6, #4089]	; 0xff9
 800dd30:	f7f8 f8c8 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dd34:	f7ff ff88 	bl	800dc48 <e1319048c142912ea91dcc918ab796551ce50481>
 800dd38:	f1c0 0014 	rsb	r0, r0, #20
 800dd3c:	f00c fea2 	bl	801aa84 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>
 800dd40:	4640      	mov	r0, r8
 800dd42:	b008      	add	sp, #32
 800dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd48:	f1c0 0314 	rsb	r3, r0, #20
 800dd4c:	2b0f      	cmp	r3, #15
 800dd4e:	d90e      	bls.n	800dd6e <331ec243926b1d9fd1d86c735e311ea19678e45f+0xf6>
 800dd50:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 800dd54:	f893 3dc0 	ldrb.w	r3, [r3, #3520]	; 0xdc0
 800dd58:	b94b      	cbnz	r3, 800dd6e <331ec243926b1d9fd1d86c735e311ea19678e45f+0xf6>
 800dd5a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 800dd64:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 800dd68:	6813      	ldr	r3, [r2, #0]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	f7f8 f8a9 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800dd72:	2f73      	cmp	r7, #115	; 0x73
 800dd74:	d9a5      	bls.n	800dcc2 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x4a>
 800dd76:	2d06      	cmp	r5, #6
 800dd78:	d8a3      	bhi.n	800dcc2 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x4a>
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	6834      	ldr	r4, [r6, #0]
 800dd7e:	4e19      	ldr	r6, [pc, #100]	; (800dde4 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x16c>)
 800dd80:	9306      	str	r3, [sp, #24]
 800dd82:	9607      	str	r6, [sp, #28]
 800dd84:	ad06      	add	r5, sp, #24
 800dd86:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dd8a:	4a18      	ldr	r2, [pc, #96]	; (800ddec <331ec243926b1d9fd1d86c735e311ea19678e45f+0x174>)
 800dd8c:	463b      	mov	r3, r7
 800dd8e:	f002 fc51 	bl	8010634 <LOGGER_PrintLine>
 800dd92:	f002 fc29 	bl	80105e8 <LOGGER_StartSection>
 800dd96:	b1c8      	cbz	r0, 800ddcc <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 800dd98:	2305      	movs	r3, #5
 800dd9a:	e9cd 3606 	strd	r3, r6, [sp, #24]
 800dd9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dda2:	f002 fc29 	bl	80105f8 <LOGGER_PrintHeader>
 800dda6:	f504 55ed 	add.w	r5, r4, #7584	; 0x1da0
 800ddaa:	4e11      	ldr	r6, [pc, #68]	; (800ddf0 <331ec243926b1d9fd1d86c735e311ea19678e45f+0x178>)
 800ddac:	3510      	adds	r5, #16
 800ddae:	f894 2ff8 	ldrb.w	r2, [r4, #4088]	; 0xff8
 800ddb2:	f894 1ff9 	ldrb.w	r1, [r4, #4089]	; 0xff9
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800ddbc:	f002 fc02 	bl	80105c4 <LOGGER_Print>
 800ddc0:	42a5      	cmp	r5, r4
 800ddc2:	d1f4      	bne.n	800ddae <331ec243926b1d9fd1d86c735e311ea19678e45f+0x136>
 800ddc4:	f002 fbf6 	bl	80105b4 <LOGGER_PrintNL>
 800ddc8:	f002 fc14 	bl	80105f4 <LOGGER_EndSection>
 800ddcc:	f04f 0800 	mov.w	r8, #0
 800ddd0:	e7b6      	b.n	800dd40 <331ec243926b1d9fd1d86c735e311ea19678e45f+0xc8>
 800ddd2:	3501      	adds	r5, #1
 800ddd4:	f7f8 f876 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800ddd8:	2d14      	cmp	r5, #20
 800ddda:	f47f af77 	bne.w	800dccc <331ec243926b1d9fd1d86c735e311ea19678e45f+0x54>
 800ddde:	e7f5      	b.n	800ddcc <331ec243926b1d9fd1d86c735e311ea19678e45f+0x154>
 800dde0:	20000040 	.word	0x20000040
 800dde4:	0801f57c 	.word	0x0801f57c
 800dde8:	0801f5db 	.word	0x0801f5db
 800ddec:	0801f596 	.word	0x0801f596
 800ddf0:	0801f5c7 	.word	0x0801f5c7

0800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>:
 800ddf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddf6:	4b1b      	ldr	r3, [pc, #108]	; (800de64 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x70>)
 800ddf8:	681e      	ldr	r6, [r3, #0]
 800ddfa:	4607      	mov	r7, r0
 800ddfc:	f606 75f8 	addw	r5, r6, #4088	; 0xff8
 800de00:	2400      	movs	r4, #0
 800de02:	f7f8 f83f 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800de06:	42bd      	cmp	r5, r7
 800de08:	d119      	bne.n	800de3e <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x4a>
 800de0a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800de0e:	fb03 6604 	mla	r6, r3, r4, r6
 800de12:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 800de16:	b923      	cbnz	r3, 800de22 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x2e>
 800de18:	4913      	ldr	r1, [pc, #76]	; (800de68 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x74>)
 800de1a:	4814      	ldr	r0, [pc, #80]	; (800de6c <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x78>)
 800de1c:	22b5      	movs	r2, #181	; 0xb5
 800de1e:	f7f3 fd5b 	bl	80018d8 <EXPECT_OnAbortHandler>
 800de22:	4628      	mov	r0, r5
 800de24:	f7ff fe4e 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800de28:	f7f8 f84c 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800de2c:	f7ff ff0c 	bl	800dc48 <e1319048c142912ea91dcc918ab796551ce50481>
 800de30:	f1c0 0014 	rsb	r0, r0, #20
 800de34:	f00c fe26 	bl	801aa84 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>
 800de38:	2001      	movs	r0, #1
 800de3a:	b003      	add	sp, #12
 800de3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de3e:	3401      	adds	r4, #1
 800de40:	f7f8 f840 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800de44:	2c14      	cmp	r4, #20
 800de46:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800de4a:	d1da      	bne.n	800de02 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0xe>
 800de4c:	2302      	movs	r3, #2
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	4b07      	ldr	r3, [pc, #28]	; (800de70 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x7c>)
 800de52:	9301      	str	r3, [sp, #4]
 800de54:	ab02      	add	r3, sp, #8
 800de56:	e913 0003 	ldmdb	r3, {r0, r1}
 800de5a:	4a06      	ldr	r2, [pc, #24]	; (800de74 <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x80>)
 800de5c:	f002 fbea 	bl	8010634 <LOGGER_PrintLine>
 800de60:	2000      	movs	r0, #0
 800de62:	e7ea      	b.n	800de3a <218a9716e8ca33d3905e4d5d678efcb718f6f31f+0x46>
 800de64:	20000040 	.word	0x20000040
 800de68:	0801f649 	.word	0x0801f649
 800de6c:	0801f6ab 	.word	0x0801f6ab
 800de70:	0801f57c 	.word	0x0801f57c
 800de74:	0801f6c3 	.word	0x0801f6c3

0800de78 <4b9793db96fa05ad63a954fae76e17c90da5d34d>:
 800de78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	4b42      	ldr	r3, [pc, #264]	; (800df88 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x110>)
 800de7e:	681f      	ldr	r7, [r3, #0]
 800de80:	f7f8 f800 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800de84:	f7ff fee0 	bl	800dc48 <e1319048c142912ea91dcc918ab796551ce50481>
 800de88:	4604      	mov	r4, r0
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d15d      	bne.n	800df4a <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xd2>
 800de8e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800de92:	f893 2dc1 	ldrb.w	r2, [r3, #3521]	; 0xdc1
 800de96:	2a00      	cmp	r2, #0
 800de98:	d048      	beq.n	800df2c <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xb4>
 800de9a:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 800de9e:	b93a      	cbnz	r2, 800deb0 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x38>
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 800dea6:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 800deaa:	6813      	ldr	r3, [r2, #0]
 800deac:	3301      	adds	r3, #1
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	f7f8 f808 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800deb4:	2500      	movs	r5, #0
 800deb6:	f607 74f8 	addw	r4, r7, #4088	; 0xff8
 800deba:	f04f 38ff 	mov.w	r8, #4294967295
 800debe:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800dec2:	462e      	mov	r6, r5
 800dec4:	f44f 7abe 	mov.w	sl, #380	; 0x17c
 800dec8:	f241 0b48 	movw	fp, #4168	; 0x1048
 800decc:	f7f7 ffda 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800ded0:	7863      	ldrb	r3, [r4, #1]
 800ded2:	2b40      	cmp	r3, #64	; 0x40
 800ded4:	d113      	bne.n	800defe <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 800ded6:	7823      	ldrb	r3, [r4, #0]
 800ded8:	2b74      	cmp	r3, #116	; 0x74
 800deda:	d803      	bhi.n	800dee4 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x6c>
 800dedc:	d10f      	bne.n	800defe <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 800dede:	7c23      	ldrb	r3, [r4, #16]
 800dee0:	2b3a      	cmp	r3, #58	; 0x3a
 800dee2:	d00c      	beq.n	800defe <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x86>
 800dee4:	fb0a 7305 	mla	r3, sl, r5, r7
 800dee8:	445b      	add	r3, fp
 800deea:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800deee:	7adb      	ldrb	r3, [r3, #11]
 800def0:	4542      	cmp	r2, r8
 800def2:	eb73 0109 	sbcs.w	r1, r3, r9
 800def6:	bf3e      	ittt	cc
 800def8:	4690      	movcc	r8, r2
 800defa:	4699      	movcc	r9, r3
 800defc:	4626      	movcc	r6, r4
 800defe:	3501      	adds	r5, #1
 800df00:	f7f7 ffe0 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800df04:	2d14      	cmp	r5, #20
 800df06:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800df0a:	d1df      	bne.n	800decc <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x54>
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	d037      	beq.n	800df80 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x108>
 800df10:	2303      	movs	r3, #3
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x114>)
 800df16:	9301      	str	r3, [sp, #4]
 800df18:	ab02      	add	r3, sp, #8
 800df1a:	e913 0003 	ldmdb	r3, {r0, r1}
 800df1e:	4a1c      	ldr	r2, [pc, #112]	; (800df90 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x118>)
 800df20:	f002 fb88 	bl	8010634 <LOGGER_PrintLine>
 800df24:	4630      	mov	r0, r6
 800df26:	f7ff ff65 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800df2a:	e023      	b.n	800df74 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xfc>
 800df2c:	f8d3 0db8 	ldr.w	r0, [r3, #3512]	; 0xdb8
 800df30:	2101      	movs	r1, #1
 800df32:	f883 1dc1 	strb.w	r1, [r3, #3521]	; 0xdc1
 800df36:	6842      	ldr	r2, [r0, #4]
 800df38:	440a      	add	r2, r1
 800df3a:	6042      	str	r2, [r0, #4]
 800df3c:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 800df40:	2a00      	cmp	r2, #0
 800df42:	d1b5      	bne.n	800deb0 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x38>
 800df44:	f883 1dc0 	strb.w	r1, [r3, #3520]	; 0xdc0
 800df48:	e7ad      	b.n	800dea6 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x2e>
 800df4a:	f1c0 0314 	rsb	r3, r0, #20
 800df4e:	2b0f      	cmp	r3, #15
 800df50:	d90c      	bls.n	800df6c <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xf4>
 800df52:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800df56:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
 800df5a:	b93a      	cbnz	r2, 800df6c <4b9793db96fa05ad63a954fae76e17c90da5d34d+0xf4>
 800df5c:	2201      	movs	r2, #1
 800df5e:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
 800df62:	f8d3 2db8 	ldr.w	r2, [r3, #3512]	; 0xdb8
 800df66:	6813      	ldr	r3, [r2, #0]
 800df68:	3301      	adds	r3, #1
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	f7f7 ffaa 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800df70:	2c06      	cmp	r4, #6
 800df72:	d99f      	bls.n	800deb4 <4b9793db96fa05ad63a954fae76e17c90da5d34d+0x3c>
 800df74:	2074      	movs	r0, #116	; 0x74
 800df76:	b003      	add	sp, #12
 800df78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	f7ff be7c 	b.w	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800df80:	4630      	mov	r0, r6
 800df82:	b003      	add	sp, #12
 800df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df88:	20000040 	.word	0x20000040
 800df8c:	0801f57c 	.word	0x0801f57c
 800df90:	0801f6e6 	.word	0x0801f6e6

0800df94 <QUEUE_MacNotifySuperframeStart>:
 800df94:	4b11      	ldr	r3, [pc, #68]	; (800dfdc <QUEUE_MacNotifySuperframeStart+0x48>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800df9c:	f8d2 1dbc 	ldr.w	r1, [r2, #3516]	; 0xdbc
 800dfa0:	3101      	adds	r1, #1
 800dfa2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800dfa6:	d005      	beq.n	800dfb4 <QUEUE_MacNotifySuperframeStart+0x20>
 800dfa8:	f8c2 1dbc 	str.w	r1, [r2, #3516]	; 0xdbc
 800dfac:	2300      	movs	r3, #0
 800dfae:	f8a2 3dc0 	strh.w	r3, [r2, #3520]	; 0xdc0
 800dfb2:	4770      	bx	lr
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	f8d2 0db8 	ldr.w	r0, [r2, #3512]	; 0xdb8
 800dfba:	f8c2 1dbc 	str.w	r1, [r2, #3516]	; 0xdbc
 800dfbe:	f603 71f8 	addw	r1, r3, #4088	; 0xff8
 800dfc2:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 800dfc6:	3328      	adds	r3, #40	; 0x28
 800dfc8:	4298      	cmp	r0, r3
 800dfca:	bf03      	ittte	eq
 800dfcc:	f501 51ed 	addeq.w	r1, r1, #7584	; 0x1da0
 800dfd0:	3118      	addeq	r1, #24
 800dfd2:	f8c2 1db8 	streq.w	r1, [r2, #3512]	; 0xdb8
 800dfd6:	f8c2 3db8 	strne.w	r3, [r2, #3512]	; 0xdb8
 800dfda:	e7e7      	b.n	800dfac <QUEUE_MacNotifySuperframeStart+0x18>
 800dfdc:	20000040 	.word	0x20000040

0800dfe0 <207e15ee7bccb2eb76dd4c1d27604170dc079160>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	4b10      	ldr	r3, [pc, #64]	; (800e024 <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x44>)
 800dfe4:	681c      	ldr	r4, [r3, #0]
 800dfe6:	2500      	movs	r5, #0
 800dfe8:	4626      	mov	r6, r4
 800dfea:	f7f7 ff4b 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800dfee:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 800dff2:	2b41      	cmp	r3, #65	; 0x41
 800dff4:	d10c      	bne.n	800e010 <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x30>
 800dff6:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 800dffa:	2b31      	cmp	r3, #49	; 0x31
 800dffc:	d008      	beq.n	800e010 <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x30>
 800dffe:	f7f7 ff61 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e002:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e006:	fb03 4005 	mla	r0, r3, r5, r4
 800e00a:	f600 70f8 	addw	r0, r0, #4088	; 0xff8
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	3501      	adds	r5, #1
 800e012:	f7f7 ff57 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e016:	2d14      	cmp	r5, #20
 800e018:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800e01c:	d1e5      	bne.n	800dfea <207e15ee7bccb2eb76dd4c1d27604170dc079160+0xa>
 800e01e:	2000      	movs	r0, #0
 800e020:	e7f5      	b.n	800e00e <207e15ee7bccb2eb76dd4c1d27604170dc079160+0x2e>
 800e022:	bf00      	nop
 800e024:	20000040 	.word	0x20000040

0800e028 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	4b10      	ldr	r3, [pc, #64]	; (800e06c <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x44>)
 800e02c:	681c      	ldr	r4, [r3, #0]
 800e02e:	2500      	movs	r5, #0
 800e030:	4626      	mov	r6, r4
 800e032:	f7f7 ff27 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e036:	f896 3ff9 	ldrb.w	r3, [r6, #4089]	; 0xff9
 800e03a:	2b41      	cmp	r3, #65	; 0x41
 800e03c:	d10c      	bne.n	800e058 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x30>
 800e03e:	f896 3ff8 	ldrb.w	r3, [r6, #4088]	; 0xff8
 800e042:	2b31      	cmp	r3, #49	; 0x31
 800e044:	d108      	bne.n	800e058 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x30>
 800e046:	f7f7 ff3d 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e04a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e04e:	fb03 4005 	mla	r0, r3, r5, r4
 800e052:	f600 70f8 	addw	r0, r0, #4088	; 0xff8
 800e056:	bd70      	pop	{r4, r5, r6, pc}
 800e058:	3501      	adds	r5, #1
 800e05a:	f7f7 ff33 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e05e:	2d14      	cmp	r5, #20
 800e060:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800e064:	d1e5      	bne.n	800e032 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0xa>
 800e066:	2000      	movs	r0, #0
 800e068:	e7f5      	b.n	800e056 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00+0x2e>
 800e06a:	bf00      	nop
 800e06c:	20000040 	.word	0x20000040

0800e070 <43f11770a6d1a267a732a77a0ad450aed83746a6>:
 800e070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e072:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <43f11770a6d1a267a732a77a0ad450aed83746a6+0x4c>)
 800e074:	681d      	ldr	r5, [r3, #0]
 800e076:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 800e07a:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 800e07e:	4607      	mov	r7, r0
 800e080:	3419      	adds	r4, #25
 800e082:	3529      	adds	r5, #41	; 0x29
 800e084:	2600      	movs	r6, #0
 800e086:	f7f7 fefd 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e08a:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 800e08e:	2b41      	cmp	r3, #65	; 0x41
 800e090:	d10c      	bne.n	800e0ac <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 800e092:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 800e096:	2b53      	cmp	r3, #83	; 0x53
 800e098:	d108      	bne.n	800e0ac <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 800e09a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800e09e:	b92b      	cbnz	r3, 800e0ac <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff fa6c 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e0a8:	b100      	cbz	r0, 800e0ac <43f11770a6d1a267a732a77a0ad450aed83746a6+0x3c>
 800e0aa:	3601      	adds	r6, #1
 800e0ac:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800e0b0:	f7f7 ff08 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e0b4:	42ac      	cmp	r4, r5
 800e0b6:	d1e6      	bne.n	800e086 <43f11770a6d1a267a732a77a0ad450aed83746a6+0x16>
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0bc:	20000040 	.word	0x20000040

0800e0c0 <794cbfdf72fe426231c38719436bf778a99748c2>:
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <794cbfdf72fe426231c38719436bf778a99748c2+0x34>)
 800e0c4:	681c      	ldr	r4, [r3, #0]
 800e0c6:	f504 56ed 	add.w	r6, r4, #7584	; 0x1da0
 800e0ca:	3610      	adds	r6, #16
 800e0cc:	2500      	movs	r5, #0
 800e0ce:	f7f7 fed9 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e0d2:	f894 3ff9 	ldrb.w	r3, [r4, #4089]	; 0xff9
 800e0d6:	2b41      	cmp	r3, #65	; 0x41
 800e0d8:	d104      	bne.n	800e0e4 <794cbfdf72fe426231c38719436bf778a99748c2+0x24>
 800e0da:	f894 3ff8 	ldrb.w	r3, [r4, #4088]	; 0xff8
 800e0de:	2b53      	cmp	r3, #83	; 0x53
 800e0e0:	bf08      	it	eq
 800e0e2:	3501      	addeq	r5, #1
 800e0e4:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800e0e8:	f7f7 feec 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e0ec:	42b4      	cmp	r4, r6
 800e0ee:	d1ee      	bne.n	800e0ce <794cbfdf72fe426231c38719436bf778a99748c2+0xe>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	bd70      	pop	{r4, r5, r6, pc}
 800e0f4:	20000040 	.word	0x20000040

0800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>:
 800e0f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0fa:	4b18      	ldr	r3, [pc, #96]	; (800e15c <9384e57fa8b386170558ee17f590b88f318c4273+0x64>)
 800e0fc:	681d      	ldr	r5, [r3, #0]
 800e0fe:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 800e102:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 800e106:	4606      	mov	r6, r0
 800e108:	3419      	adds	r4, #25
 800e10a:	3529      	adds	r5, #41	; 0x29
 800e10c:	f7f7 feba 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e110:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 800e114:	2b53      	cmp	r3, #83	; 0x53
 800e116:	d119      	bne.n	800e14c <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 800e118:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800e11c:	b9b3      	cbnz	r3, 800e14c <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff fa2d 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e126:	b188      	cbz	r0, 800e14c <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 800e128:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 800e12c:	2b31      	cmp	r3, #49	; 0x31
 800e12e:	d00d      	beq.n	800e14c <9384e57fa8b386170558ee17f590b88f318c4273+0x54>
 800e130:	2305      	movs	r3, #5
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	4b0a      	ldr	r3, [pc, #40]	; (800e160 <9384e57fa8b386170558ee17f590b88f318c4273+0x68>)
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	ab02      	add	r3, sp, #8
 800e13a:	e913 0003 	ldmdb	r3, {r0, r1}
 800e13e:	4a09      	ldr	r2, [pc, #36]	; (800e164 <9384e57fa8b386170558ee17f590b88f318c4273+0x6c>)
 800e140:	f002 fa78 	bl	8010634 <LOGGER_PrintLine>
 800e144:	f1a4 0041 	sub.w	r0, r4, #65	; 0x41
 800e148:	f7ff fcbc 	bl	800dac4 <fb597b96e7954383068bf796c46efbfe6f531f14>
 800e14c:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800e150:	f7f7 feb8 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e154:	42ac      	cmp	r4, r5
 800e156:	d1d9      	bne.n	800e10c <9384e57fa8b386170558ee17f590b88f318c4273+0x14>
 800e158:	b002      	add	sp, #8
 800e15a:	bd70      	pop	{r4, r5, r6, pc}
 800e15c:	20000040 	.word	0x20000040
 800e160:	0801f57c 	.word	0x0801f57c
 800e164:	0801f719 	.word	0x0801f719

0800e168 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	7803      	ldrb	r3, [r0, #0]
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	4607      	mov	r7, r0
 800e170:	460e      	mov	r6, r1
 800e172:	d12e      	bne.n	800e1d2 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6a>
 800e174:	780b      	ldrb	r3, [r1, #0]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d12b      	bne.n	800e1d2 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6a>
 800e17a:	4b16      	ldr	r3, [pc, #88]	; (800e1d4 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x6c>)
 800e17c:	681d      	ldr	r5, [r3, #0]
 800e17e:	f505 5481 	add.w	r4, r5, #4128	; 0x1020
 800e182:	f505 5537 	add.w	r5, r5, #11712	; 0x2dc0
 800e186:	3419      	adds	r4, #25
 800e188:	3529      	adds	r5, #41	; 0x29
 800e18a:	f7f7 fe7b 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e18e:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 800e192:	2b40      	cmp	r3, #64	; 0x40
 800e194:	d117      	bne.n	800e1c6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 800e196:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800e19a:	b9a3      	cbnz	r3, 800e1c6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 800e19c:	4621      	mov	r1, r4
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7ff f9ee 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e1a4:	b178      	cbz	r0, 800e1c6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 800e1a6:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 800e1aa:	2b6f      	cmp	r3, #111	; 0x6f
 800e1ac:	d90b      	bls.n	800e1c6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x5e>
 800e1ae:	4633      	mov	r3, r6
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	f106 0110 	add.w	r1, r6, #16
 800e1b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800e1ba:	f842 0b04 	str.w	r0, [r2], #4
 800e1be:	428b      	cmp	r3, r1
 800e1c0:	d1f9      	bne.n	800e1b6 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x4e>
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	7013      	strb	r3, [r2, #0]
 800e1c6:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800e1ca:	f7f7 fe7b 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e1ce:	42ac      	cmp	r4, r5
 800e1d0:	d1db      	bne.n	800e18a <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725+0x22>
 800e1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d4:	20000040 	.word	0x20000040

0800e1d8 <d9cd3de8850ba05653155beecb1d40906820436e>:
 800e1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1dc:	4b42      	ldr	r3, [pc, #264]	; (800e2e8 <d9cd3de8850ba05653155beecb1d40906820436e+0x110>)
 800e1de:	681f      	ldr	r7, [r3, #0]
 800e1e0:	f507 5581 	add.w	r5, r7, #4128	; 0x1020
 800e1e4:	3519      	adds	r5, #25
 800e1e6:	f507 5937 	add.w	r9, r7, #11712	; 0x2dc0
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	f109 0929 	add.w	r9, r9, #41	; 0x29
 800e1f0:	462e      	mov	r6, r5
 800e1f2:	2400      	movs	r4, #0
 800e1f4:	f7f7 fe46 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e1f8:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 800e1fc:	2b40      	cmp	r3, #64	; 0x40
 800e1fe:	d107      	bne.n	800e210 <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800e200:	7cf3      	ldrb	r3, [r6, #19]
 800e202:	b12b      	cbz	r3, 800e210 <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800e204:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800e208:	2b90      	cmp	r3, #144	; 0x90
 800e20a:	d15a      	bne.n	800e2c2 <d9cd3de8850ba05653155beecb1d40906820436e+0xea>
 800e20c:	f1a6 0441 	sub.w	r4, r6, #65	; 0x41
 800e210:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800e214:	f7f7 fe56 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e218:	454e      	cmp	r6, r9
 800e21a:	d1eb      	bne.n	800e1f4 <d9cd3de8850ba05653155beecb1d40906820436e+0x1c>
 800e21c:	2c00      	cmp	r4, #0
 800e21e:	d143      	bne.n	800e2a8 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 800e220:	462e      	mov	r6, r5
 800e222:	f7f7 fe2f 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e226:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 800e22a:	2b40      	cmp	r3, #64	; 0x40
 800e22c:	d109      	bne.n	800e242 <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 800e22e:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800e232:	2b50      	cmp	r3, #80	; 0x50
 800e234:	d105      	bne.n	800e242 <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff f8cc 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e23c:	b108      	cbz	r0, 800e242 <d9cd3de8850ba05653155beecb1d40906820436e+0x6a>
 800e23e:	f1a6 0441 	sub.w	r4, r6, #65	; 0x41
 800e242:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800e246:	f7f7 fe3d 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e24a:	454e      	cmp	r6, r9
 800e24c:	d1e9      	bne.n	800e222 <d9cd3de8850ba05653155beecb1d40906820436e+0x4a>
 800e24e:	bb5c      	cbnz	r4, 800e2a8 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 800e250:	f7f7 fe18 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e254:	f815 3c40 	ldrb.w	r3, [r5, #-64]
 800e258:	2b40      	cmp	r3, #64	; 0x40
 800e25a:	d109      	bne.n	800e270 <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 800e25c:	f815 3c41 	ldrb.w	r3, [r5, #-65]
 800e260:	2b73      	cmp	r3, #115	; 0x73
 800e262:	d105      	bne.n	800e270 <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 800e264:	4628      	mov	r0, r5
 800e266:	f7ff f8b5 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e26a:	b108      	cbz	r0, 800e270 <d9cd3de8850ba05653155beecb1d40906820436e+0x98>
 800e26c:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 800e270:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800e274:	f7f7 fe26 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e278:	454d      	cmp	r5, r9
 800e27a:	d1e9      	bne.n	800e250 <d9cd3de8850ba05653155beecb1d40906820436e+0x78>
 800e27c:	b9a4      	cbnz	r4, 800e2a8 <d9cd3de8850ba05653155beecb1d40906820436e+0xd0>
 800e27e:	f607 75f8 	addw	r5, r7, #4088	; 0xff8
 800e282:	f507 5736 	add.w	r7, r7, #11648	; 0x2d80
 800e286:	3728      	adds	r7, #40	; 0x28
 800e288:	f7f7 fdfc 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e28c:	786b      	ldrb	r3, [r5, #1]
 800e28e:	2b40      	cmp	r3, #64	; 0x40
 800e290:	d103      	bne.n	800e29a <d9cd3de8850ba05653155beecb1d40906820436e+0xc2>
 800e292:	782b      	ldrb	r3, [r5, #0]
 800e294:	2b90      	cmp	r3, #144	; 0x90
 800e296:	bf08      	it	eq
 800e298:	462c      	moveq	r4, r5
 800e29a:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800e29e:	f7f7 fe11 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e2a2:	42bd      	cmp	r5, r7
 800e2a4:	d1f0      	bne.n	800e288 <d9cd3de8850ba05653155beecb1d40906820436e+0xb0>
 800e2a6:	b14c      	cbz	r4, 800e2bc <d9cd3de8850ba05653155beecb1d40906820436e+0xe4>
 800e2a8:	f7f7 fdec 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e2ac:	7863      	ldrb	r3, [r4, #1]
 800e2ae:	2b40      	cmp	r3, #64	; 0x40
 800e2b0:	bf0c      	ite	eq
 800e2b2:	f884 8001 	strbeq.w	r8, [r4, #1]
 800e2b6:	2400      	movne	r4, #0
 800e2b8:	f7f7 fe04 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e2bc:	4620      	mov	r0, r4
 800e2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2c2:	2b50      	cmp	r3, #80	; 0x50
 800e2c4:	d009      	beq.n	800e2da <d9cd3de8850ba05653155beecb1d40906820436e+0x102>
 800e2c6:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800e2ca:	2b73      	cmp	r3, #115	; 0x73
 800e2cc:	d1a0      	bne.n	800e210 <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f7ff f880 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d199      	bne.n	800e20c <d9cd3de8850ba05653155beecb1d40906820436e+0x34>
 800e2d8:	e79a      	b.n	800e210 <d9cd3de8850ba05653155beecb1d40906820436e+0x38>
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff f87a 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d193      	bne.n	800e20c <d9cd3de8850ba05653155beecb1d40906820436e+0x34>
 800e2e4:	e7ef      	b.n	800e2c6 <d9cd3de8850ba05653155beecb1d40906820436e+0xee>
 800e2e6:	bf00      	nop
 800e2e8:	20000040 	.word	0x20000040

0800e2ec <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>:
 800e2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f0:	7803      	ldrb	r3, [r0, #0]
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	d003      	beq.n	800e302 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x16>
 800e2fa:	2500      	movs	r5, #0
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e302:	4b24      	ldr	r3, [pc, #144]	; (800e394 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0xa8>)
 800e304:	681f      	ldr	r7, [r3, #0]
 800e306:	f507 5481 	add.w	r4, r7, #4128	; 0x1020
 800e30a:	3419      	adds	r4, #25
 800e30c:	f507 5737 	add.w	r7, r7, #11712	; 0x2dc0
 800e310:	3729      	adds	r7, #41	; 0x29
 800e312:	4626      	mov	r6, r4
 800e314:	2500      	movs	r5, #0
 800e316:	f7f7 fdb5 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e31a:	f816 3c40 	ldrb.w	r3, [r6, #-64]
 800e31e:	2b40      	cmp	r3, #64	; 0x40
 800e320:	d10c      	bne.n	800e33c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800e322:	7cf3      	ldrb	r3, [r6, #19]
 800e324:	b153      	cbz	r3, 800e33c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800e326:	f816 3c41 	ldrb.w	r3, [r6, #-65]
 800e32a:	2b53      	cmp	r3, #83	; 0x53
 800e32c:	d106      	bne.n	800e33c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800e32e:	4631      	mov	r1, r6
 800e330:	4640      	mov	r0, r8
 800e332:	f7ff f925 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e336:	b108      	cbz	r0, 800e33c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x50>
 800e338:	f1a6 0541 	sub.w	r5, r6, #65	; 0x41
 800e33c:	f506 76be 	add.w	r6, r6, #380	; 0x17c
 800e340:	f7f7 fdc0 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e344:	42be      	cmp	r6, r7
 800e346:	d1e6      	bne.n	800e316 <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x2a>
 800e348:	b9c5      	cbnz	r5, 800e37c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x90>
 800e34a:	f7f7 fd9b 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e34e:	f814 3c40 	ldrb.w	r3, [r4, #-64]
 800e352:	2b40      	cmp	r3, #64	; 0x40
 800e354:	d10a      	bne.n	800e36c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800e356:	f814 3c41 	ldrb.w	r3, [r4, #-65]
 800e35a:	2b53      	cmp	r3, #83	; 0x53
 800e35c:	d106      	bne.n	800e36c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800e35e:	4621      	mov	r1, r4
 800e360:	4640      	mov	r0, r8
 800e362:	f7ff f90d 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e366:	b108      	cbz	r0, 800e36c <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x80>
 800e368:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 800e36c:	f504 74be 	add.w	r4, r4, #380	; 0x17c
 800e370:	f7f7 fda8 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e374:	42bc      	cmp	r4, r7
 800e376:	d1e8      	bne.n	800e34a <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x5e>
 800e378:	2d00      	cmp	r5, #0
 800e37a:	d0be      	beq.n	800e2fa <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0xe>
 800e37c:	f7f7 fd82 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e380:	786b      	ldrb	r3, [r5, #1]
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	bf0c      	ite	eq
 800e386:	f885 9001 	strbeq.w	r9, [r5, #1]
 800e38a:	2500      	movne	r5, #0
 800e38c:	f7f7 fd9a 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e390:	e7b4      	b.n	800e2fc <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca+0x10>
 800e392:	bf00      	nop
 800e394:	20000040 	.word	0x20000040

0800e398 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>:
 800e398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	4b97      	ldr	r3, [pc, #604]	; (800e5fc <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x264>)
 800e39e:	9101      	str	r1, [sp, #4]
 800e3a0:	681e      	ldr	r6, [r3, #0]
 800e3a2:	f506 5580 	add.w	r5, r6, #4096	; 0x1000
 800e3a6:	3515      	adds	r5, #21
 800e3a8:	f506 5837 	add.w	r8, r6, #11712	; 0x2dc0
 800e3ac:	4681      	mov	r9, r0
 800e3ae:	f108 0805 	add.w	r8, r8, #5
 800e3b2:	462f      	mov	r7, r5
 800e3b4:	2400      	movs	r4, #0
 800e3b6:	f7f7 fd65 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e3ba:	f817 3c1c 	ldrb.w	r3, [r7, #-28]
 800e3be:	2b40      	cmp	r3, #64	; 0x40
 800e3c0:	d12c      	bne.n	800e41c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800e3c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3c6:	b34b      	cbz	r3, 800e41c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800e3c8:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800e3cc:	f1b9 0f00 	cmp.w	r9, #0
 800e3d0:	d115      	bne.n	800e3fe <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x66>
 800e3d2:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800e3d6:	2b53      	cmp	r3, #83	; 0x53
 800e3d8:	f040 80cb 	bne.w	800e572 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1da>
 800e3dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d019      	beq.n	800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e3e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e3e8:	b9b3      	cbnz	r3, 800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	f7ff f8b6 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800e3f0:	b1a0      	cbz	r0, 800e41c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800e3f2:	f107 0025 	add.w	r0, r7, #37	; 0x25
 800e3f6:	f7fe fd79 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800e3fa:	b168      	cbz	r0, 800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e3fc:	e00e      	b.n	800e41c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800e3fe:	2b53      	cmp	r3, #83	; 0x53
 800e400:	d1e7      	bne.n	800e3d2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800e402:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e3      	bne.n	800e3d2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800e40a:	4649      	mov	r1, r9
 800e40c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e410:	f7ff f8b6 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e414:	2800      	cmp	r0, #0
 800e416:	d1dc      	bne.n	800e3d2 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x3a>
 800e418:	f1a7 041d 	sub.w	r4, r7, #29
 800e41c:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800e420:	f7f7 fd50 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e424:	4547      	cmp	r7, r8
 800e426:	d1c6      	bne.n	800e3b6 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1e>
 800e428:	2c00      	cmp	r4, #0
 800e42a:	f040 8088 	bne.w	800e53e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800e42e:	f506 5b81 	add.w	fp, r6, #4128	; 0x1020
 800e432:	f10b 0b19 	add.w	fp, fp, #25
 800e436:	f04f 37ff 	mov.w	r7, #4294967295
 800e43a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800e43e:	46a2      	mov	sl, r4
 800e440:	f7f7 fd20 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e444:	f81b 2c40 	ldrb.w	r2, [fp, #-64]
 800e448:	2a40      	cmp	r2, #64	; 0x40
 800e44a:	d11f      	bne.n	800e48c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800e44c:	f81b 2c41 	ldrb.w	r2, [fp, #-65]
 800e450:	f1b9 0f00 	cmp.w	r9, #0
 800e454:	f040 80a6 	bne.w	800e5a4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x20c>
 800e458:	f81b 2c41 	ldrb.w	r2, [fp, #-65]
 800e45c:	2a53      	cmp	r2, #83	; 0x53
 800e45e:	d115      	bne.n	800e48c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800e460:	f89b 2052 	ldrb.w	r2, [fp, #82]	; 0x52
 800e464:	2a01      	cmp	r2, #1
 800e466:	d111      	bne.n	800e48c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800e468:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e46c:	fb03 620a 	mla	r2, r3, sl, r6
 800e470:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 800e474:	3208      	adds	r2, #8
 800e476:	f8d2 1007 	ldr.w	r1, [r2, #7]
 800e47a:	7ad2      	ldrb	r2, [r2, #11]
 800e47c:	42b9      	cmp	r1, r7
 800e47e:	eb72 0008 	sbcs.w	r0, r2, r8
 800e482:	bf3e      	ittt	cc
 800e484:	f1ab 0441 	subcc.w	r4, fp, #65	; 0x41
 800e488:	460f      	movcc	r7, r1
 800e48a:	4690      	movcc	r8, r2
 800e48c:	f10a 0a01 	add.w	sl, sl, #1
 800e490:	f7f7 fd18 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e494:	f1ba 0f14 	cmp.w	sl, #20
 800e498:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800e49c:	d1d0      	bne.n	800e440 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xa8>
 800e49e:	2c00      	cmp	r4, #0
 800e4a0:	d14d      	bne.n	800e53e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800e4a2:	f606 7bf8 	addw	fp, r6, #4088	; 0xff8
 800e4a6:	46a1      	mov	r9, r4
 800e4a8:	f241 0a48 	movw	sl, #4168	; 0x1048
 800e4ac:	f7f7 fcea 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e4b0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e4b4:	2a40      	cmp	r2, #64	; 0x40
 800e4b6:	d111      	bne.n	800e4dc <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x144>
 800e4b8:	f89b 203f 	ldrb.w	r2, [fp, #63]	; 0x3f
 800e4bc:	b172      	cbz	r2, 800e4dc <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x144>
 800e4be:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e4c2:	fb03 6209 	mla	r2, r3, r9, r6
 800e4c6:	4452      	add	r2, sl
 800e4c8:	f8d2 1007 	ldr.w	r1, [r2, #7]
 800e4cc:	7ad2      	ldrb	r2, [r2, #11]
 800e4ce:	42b9      	cmp	r1, r7
 800e4d0:	eb72 0008 	sbcs.w	r0, r2, r8
 800e4d4:	bf3e      	ittt	cc
 800e4d6:	460f      	movcc	r7, r1
 800e4d8:	4690      	movcc	r8, r2
 800e4da:	465c      	movcc	r4, fp
 800e4dc:	f109 0901 	add.w	r9, r9, #1
 800e4e0:	f7f7 fcf0 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e4e4:	f1b9 0f14 	cmp.w	r9, #20
 800e4e8:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800e4ec:	d1de      	bne.n	800e4ac <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x114>
 800e4ee:	bb34      	cbnz	r4, 800e53e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1a6>
 800e4f0:	46a1      	mov	r9, r4
 800e4f2:	f44f 7abe 	mov.w	sl, #380	; 0x17c
 800e4f6:	f241 0b48 	movw	fp, #4168	; 0x1048
 800e4fa:	f7f7 fcc3 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e4fe:	f815 3c1c 	ldrb.w	r3, [r5, #-28]
 800e502:	2b40      	cmp	r3, #64	; 0x40
 800e504:	d111      	bne.n	800e52a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800e506:	f815 3c1d 	ldrb.w	r3, [r5, #-29]
 800e50a:	2b74      	cmp	r3, #116	; 0x74
 800e50c:	d05a      	beq.n	800e5c4 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x22c>
 800e50e:	f815 3c1d 	ldrb.w	r3, [r5, #-29]
 800e512:	2b60      	cmp	r3, #96	; 0x60
 800e514:	d15c      	bne.n	800e5d0 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x238>
 800e516:	fb0a 6309 	mla	r3, sl, r9, r6
 800e51a:	445b      	add	r3, fp
 800e51c:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800e520:	7adb      	ldrb	r3, [r3, #11]
 800e522:	42ba      	cmp	r2, r7
 800e524:	eb73 0108 	sbcs.w	r1, r3, r8
 800e528:	d362      	bcc.n	800e5f0 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x258>
 800e52a:	f109 0901 	add.w	r9, r9, #1
 800e52e:	f7f7 fcc9 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e532:	f1b9 0f14 	cmp.w	r9, #20
 800e536:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800e53a:	d1de      	bne.n	800e4fa <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x162>
 800e53c:	b1ac      	cbz	r4, 800e56a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1d2>
 800e53e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800e542:	b943      	cbnz	r3, 800e556 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1be>
 800e544:	f104 001d 	add.w	r0, r4, #29
 800e548:	f7ff f808 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800e54c:	b118      	cbz	r0, 800e556 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1be>
 800e54e:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800e552:	f7fe fccb 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800e556:	f7f7 fc95 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e55a:	7863      	ldrb	r3, [r4, #1]
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	bf06      	itte	eq
 800e560:	9b01      	ldreq	r3, [sp, #4]
 800e562:	7063      	strbeq	r3, [r4, #1]
 800e564:	2400      	movne	r4, #0
 800e566:	f7f7 fcad 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e56a:	4620      	mov	r0, r4
 800e56c:	b003      	add	sp, #12
 800e56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e576:	2a00      	cmp	r2, #0
 800e578:	f47f af4e 	bne.w	800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e57c:	2b74      	cmp	r3, #116	; 0x74
 800e57e:	d00a      	beq.n	800e596 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1fe>
 800e580:	f817 3c1d 	ldrb.w	r3, [r7, #-29]
 800e584:	2b60      	cmp	r3, #96	; 0x60
 800e586:	f43f af47 	beq.w	800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e58a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f47f af44 	bne.w	800e41c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x84>
 800e594:	e729      	b.n	800e3ea <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x52>
 800e596:	4638      	mov	r0, r7
 800e598:	f7fe ff1c 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f47f af3b 	bne.w	800e418 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x80>
 800e5a2:	e7ed      	b.n	800e580 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x1e8>
 800e5a4:	2a53      	cmp	r2, #83	; 0x53
 800e5a6:	f47f af71 	bne.w	800e48c <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xf4>
 800e5aa:	f89b 2052 	ldrb.w	r2, [fp, #82]	; 0x52
 800e5ae:	2a00      	cmp	r2, #0
 800e5b0:	f47f af56 	bne.w	800e460 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xc8>
 800e5b4:	4649      	mov	r1, r9
 800e5b6:	4658      	mov	r0, fp
 800e5b8:	f7fe ffe2 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f47f af4b 	bne.w	800e458 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xc0>
 800e5c2:	e751      	b.n	800e468 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0xd0>
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	f7fe ff05 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d09f      	beq.n	800e50e <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x176>
 800e5ce:	e7a2      	b.n	800e516 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x17e>
 800e5d0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1a8      	bne.n	800e52a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f7fe ffbf 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0a3      	beq.n	800e52a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800e5e2:	f105 0025 	add.w	r0, r5, #37	; 0x25
 800e5e6:	f7fe fc81 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d19d      	bne.n	800e52a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800e5ee:	e792      	b.n	800e516 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x17e>
 800e5f0:	f1a5 041d 	sub.w	r4, r5, #29
 800e5f4:	4617      	mov	r7, r2
 800e5f6:	4698      	mov	r8, r3
 800e5f8:	e797      	b.n	800e52a <b889de2f10cc0917d24c2de3fa3fd08176b8c62f+0x192>
 800e5fa:	bf00      	nop
 800e5fc:	20000040 	.word	0x20000040

0800e600 <fc07e894741fc85c512f976929ce54659d763792>:
 800e600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e604:	4606      	mov	r6, r0
 800e606:	9101      	str	r1, [sp, #4]
 800e608:	b928      	cbnz	r0, 800e616 <fc07e894741fc85c512f976929ce54659d763792+0x16>
 800e60a:	4955      	ldr	r1, [pc, #340]	; (800e760 <fc07e894741fc85c512f976929ce54659d763792+0x160>)
 800e60c:	4855      	ldr	r0, [pc, #340]	; (800e764 <fc07e894741fc85c512f976929ce54659d763792+0x164>)
 800e60e:	f44f 7221 	mov.w	r2, #644	; 0x284
 800e612:	f7f3 f961 	bl	80018d8 <EXPECT_OnAbortHandler>
 800e616:	7803      	ldrb	r3, [r0, #0]
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d004      	beq.n	800e626 <fc07e894741fc85c512f976929ce54659d763792+0x26>
 800e61c:	2400      	movs	r4, #0
 800e61e:	4620      	mov	r0, r4
 800e620:	b003      	add	sp, #12
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e626:	4b50      	ldr	r3, [pc, #320]	; (800e768 <fc07e894741fc85c512f976929ce54659d763792+0x168>)
 800e628:	f8d3 8000 	ldr.w	r8, [r3]
 800e62c:	f508 5581 	add.w	r5, r8, #4128	; 0x1020
 800e630:	3519      	adds	r5, #25
 800e632:	f508 5937 	add.w	r9, r8, #11712	; 0x2dc0
 800e636:	f109 0929 	add.w	r9, r9, #41	; 0x29
 800e63a:	462f      	mov	r7, r5
 800e63c:	2400      	movs	r4, #0
 800e63e:	f7f7 fc21 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e642:	f817 3c40 	ldrb.w	r3, [r7, #-64]
 800e646:	2b40      	cmp	r3, #64	; 0x40
 800e648:	d110      	bne.n	800e66c <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800e64a:	7cfb      	ldrb	r3, [r7, #19]
 800e64c:	b173      	cbz	r3, 800e66c <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800e64e:	f817 3c41 	ldrb.w	r3, [r7, #-65]
 800e652:	2b53      	cmp	r3, #83	; 0x53
 800e654:	d003      	beq.n	800e65e <fc07e894741fc85c512f976929ce54659d763792+0x5e>
 800e656:	2b50      	cmp	r3, #80	; 0x50
 800e658:	d001      	beq.n	800e65e <fc07e894741fc85c512f976929ce54659d763792+0x5e>
 800e65a:	2b5f      	cmp	r3, #95	; 0x5f
 800e65c:	d906      	bls.n	800e66c <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800e65e:	4639      	mov	r1, r7
 800e660:	4630      	mov	r0, r6
 800e662:	f7fe ff8d 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e666:	b108      	cbz	r0, 800e66c <fc07e894741fc85c512f976929ce54659d763792+0x6c>
 800e668:	f1a7 0441 	sub.w	r4, r7, #65	; 0x41
 800e66c:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800e670:	f7f7 fc28 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e674:	454f      	cmp	r7, r9
 800e676:	d1e2      	bne.n	800e63e <fc07e894741fc85c512f976929ce54659d763792+0x3e>
 800e678:	2c00      	cmp	r4, #0
 800e67a:	d166      	bne.n	800e74a <fc07e894741fc85c512f976929ce54659d763792+0x14a>
 800e67c:	46ab      	mov	fp, r5
 800e67e:	f04f 39ff 	mov.w	r9, #4294967295
 800e682:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800e686:	4627      	mov	r7, r4
 800e688:	f7f7 fbfc 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e68c:	f81b 3c40 	ldrb.w	r3, [fp, #-64]
 800e690:	2b40      	cmp	r3, #64	; 0x40
 800e692:	d126      	bne.n	800e6e2 <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800e694:	f81b 3c41 	ldrb.w	r3, [fp, #-65]
 800e698:	2b53      	cmp	r3, #83	; 0x53
 800e69a:	d00b      	beq.n	800e6b4 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800e69c:	2b50      	cmp	r3, #80	; 0x50
 800e69e:	d009      	beq.n	800e6b4 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800e6a0:	f1a3 0260 	sub.w	r2, r3, #96	; 0x60
 800e6a4:	2a13      	cmp	r2, #19
 800e6a6:	d905      	bls.n	800e6b4 <fc07e894741fc85c512f976929ce54659d763792+0xb4>
 800e6a8:	2b74      	cmp	r3, #116	; 0x74
 800e6aa:	d11a      	bne.n	800e6e2 <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800e6ac:	f81b 3c31 	ldrb.w	r3, [fp, #-49]
 800e6b0:	2b3a      	cmp	r3, #58	; 0x3a
 800e6b2:	d116      	bne.n	800e6e2 <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f7fe ff62 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e6bc:	b188      	cbz	r0, 800e6e2 <fc07e894741fc85c512f976929ce54659d763792+0xe2>
 800e6be:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e6c2:	fb03 8307 	mla	r3, r3, r7, r8
 800e6c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800e6d0:	7adb      	ldrb	r3, [r3, #11]
 800e6d2:	454a      	cmp	r2, r9
 800e6d4:	eb73 000a 	sbcs.w	r0, r3, sl
 800e6d8:	bf3e      	ittt	cc
 800e6da:	f1ab 0441 	subcc.w	r4, fp, #65	; 0x41
 800e6de:	4691      	movcc	r9, r2
 800e6e0:	469a      	movcc	sl, r3
 800e6e2:	3701      	adds	r7, #1
 800e6e4:	f7f7 fbee 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e6e8:	2f14      	cmp	r7, #20
 800e6ea:	f50b 7bbe 	add.w	fp, fp, #380	; 0x17c
 800e6ee:	d1cb      	bne.n	800e688 <fc07e894741fc85c512f976929ce54659d763792+0x88>
 800e6f0:	bb5c      	cbnz	r4, 800e74a <fc07e894741fc85c512f976929ce54659d763792+0x14a>
 800e6f2:	4627      	mov	r7, r4
 800e6f4:	f241 0b48 	movw	fp, #4168	; 0x1048
 800e6f8:	f7f7 fbc4 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e6fc:	f815 3c40 	ldrb.w	r3, [r5, #-64]
 800e700:	2b40      	cmp	r3, #64	; 0x40
 800e702:	d118      	bne.n	800e736 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800e704:	f815 3c41 	ldrb.w	r3, [r5, #-65]
 800e708:	2b73      	cmp	r3, #115	; 0x73
 800e70a:	d914      	bls.n	800e736 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800e70c:	4629      	mov	r1, r5
 800e70e:	4630      	mov	r0, r6
 800e710:	f7fe ff36 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 800e714:	b178      	cbz	r0, 800e736 <fc07e894741fc85c512f976929ce54659d763792+0x136>
 800e716:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800e71a:	fb03 8307 	mla	r3, r3, r7, r8
 800e71e:	445b      	add	r3, fp
 800e720:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800e724:	7adb      	ldrb	r3, [r3, #11]
 800e726:	454a      	cmp	r2, r9
 800e728:	eb73 010a 	sbcs.w	r1, r3, sl
 800e72c:	bf3e      	ittt	cc
 800e72e:	f1a5 0441 	subcc.w	r4, r5, #65	; 0x41
 800e732:	4691      	movcc	r9, r2
 800e734:	469a      	movcc	sl, r3
 800e736:	3701      	adds	r7, #1
 800e738:	f7f7 fbc4 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e73c:	2f14      	cmp	r7, #20
 800e73e:	f505 75be 	add.w	r5, r5, #380	; 0x17c
 800e742:	d1d9      	bne.n	800e6f8 <fc07e894741fc85c512f976929ce54659d763792+0xf8>
 800e744:	2c00      	cmp	r4, #0
 800e746:	f43f af69 	beq.w	800e61c <fc07e894741fc85c512f976929ce54659d763792+0x1c>
 800e74a:	f7f7 fb9b 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e74e:	7863      	ldrb	r3, [r4, #1]
 800e750:	2b40      	cmp	r3, #64	; 0x40
 800e752:	bf06      	itte	eq
 800e754:	9b01      	ldreq	r3, [sp, #4]
 800e756:	7063      	strbeq	r3, [r4, #1]
 800e758:	2400      	movne	r4, #0
 800e75a:	f7f7 fbb3 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e75e:	e75e      	b.n	800e61e <fc07e894741fc85c512f976929ce54659d763792+0x1e>
 800e760:	0801f649 	.word	0x0801f649
 800e764:	0801f4ff 	.word	0x0801f4ff
 800e768:	20000040 	.word	0x20000040

0800e76c <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>:
 800e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76e:	4b0f      	ldr	r3, [pc, #60]	; (800e7ac <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x40>)
 800e770:	681c      	ldr	r4, [r3, #0]
 800e772:	4605      	mov	r5, r0
 800e774:	460e      	mov	r6, r1
 800e776:	f7f7 fb85 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e77a:	2200      	movs	r2, #0
 800e77c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800e780:	f604 70f9 	addw	r0, r4, #4089	; 0xff9
 800e784:	fb01 f302 	mul.w	r3, r1, r2
 800e788:	5cc7      	ldrb	r7, [r0, r3]
 800e78a:	42af      	cmp	r7, r5
 800e78c:	d109      	bne.n	800e7a2 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x36>
 800e78e:	18e2      	adds	r2, r4, r3
 800e790:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800e794:	f882 6ff9 	strb.w	r6, [r2, #4089]	; 0xff9
 800e798:	441c      	add	r4, r3
 800e79a:	f7f7 fb93 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e79e:	4620      	mov	r0, r4
 800e7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a2:	3201      	adds	r2, #1
 800e7a4:	2a14      	cmp	r2, #20
 800e7a6:	d1ed      	bne.n	800e784 <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x18>
 800e7a8:	2400      	movs	r4, #0
 800e7aa:	e7f6      	b.n	800e79a <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73+0x2e>
 800e7ac:	20000040 	.word	0x20000040

0800e7b0 <QUEUE_GetDiagnosticsCounters>:
 800e7b0:	4a0b      	ldr	r2, [pc, #44]	; (800e7e0 <QUEUE_GetDiagnosticsCounters+0x30>)
 800e7b2:	6812      	ldr	r2, [r2, #0]
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f502 5000 	add.w	r0, r2, #8192	; 0x2000
 800e7ba:	f502 5236 	add.w	r2, r2, #11648	; 0x2d80
 800e7be:	f8d0 1db8 	ldr.w	r1, [r0, #3512]	; 0xdb8
 800e7c2:	3228      	adds	r2, #40	; 0x28
 800e7c4:	4291      	cmp	r1, r2
 800e7c6:	bf0b      	itete	eq
 800e7c8:	f8d0 1db4 	ldreq.w	r1, [r0, #3508]	; 0xdb4
 800e7cc:	f8d0 1dac 	ldrne.w	r1, [r0, #3500]	; 0xdac
 800e7d0:	f8d0 0db0 	ldreq.w	r0, [r0, #3504]	; 0xdb0
 800e7d4:	f8d0 0da8 	ldrne.w	r0, [r0, #3496]	; 0xda8
 800e7d8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	4770      	bx	lr
 800e7e0:	20000040 	.word	0x20000040

0800e7e4 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>:
 800e7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc+0x44>)
 800e7e8:	466d      	mov	r5, sp
 800e7ea:	681e      	ldr	r6, [r3, #0]
 800e7ec:	e885 0003 	stmia.w	r5, {r0, r1}
 800e7f0:	f506 5400 	add.w	r4, r6, #8192	; 0x2000
 800e7f4:	f8d4 3dc4 	ldr.w	r3, [r4, #3524]	; 0xdc4
 800e7f8:	b1a3      	cbz	r3, 800e824 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc+0x40>
 800e7fa:	f7f7 fb43 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e7fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e802:	f8c4 0dd0 	str.w	r0, [r4, #3536]	; 0xdd0
 800e806:	f884 1dd4 	strb.w	r1, [r4, #3540]	; 0xdd4
 800e80a:	f7f7 fb5b 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e80e:	f506 5137 	add.w	r1, r6, #11712	; 0x2dc0
 800e812:	f8d4 0dc4 	ldr.w	r0, [r4, #3524]	; 0xdc4
 800e816:	220b      	movs	r2, #11
 800e818:	3104      	adds	r1, #4
 800e81a:	b002      	add	sp, #8
 800e81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e820:	f001 b87a 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800e824:	b002      	add	sp, #8
 800e826:	bd70      	pop	{r4, r5, r6, pc}
 800e828:	20000040 	.word	0x20000040

0800e82c <c122f50a74e97b0b971f059f93cac9f52ab85af9>:
 800e82c:	b513      	push	{r0, r1, r4, lr}
 800e82e:	2360      	movs	r3, #96	; 0x60
 800e830:	7043      	strb	r3, [r0, #1]
 800e832:	7803      	ldrb	r3, [r0, #0]
 800e834:	2b60      	cmp	r3, #96	; 0x60
 800e836:	4604      	mov	r4, r0
 800e838:	d009      	beq.n	800e84e <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x22>
 800e83a:	2303      	movs	r3, #3
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	4b07      	ldr	r3, [pc, #28]	; (800e85c <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x30>)
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	ab02      	add	r3, sp, #8
 800e844:	e913 0003 	ldmdb	r3, {r0, r1}
 800e848:	4a05      	ldr	r2, [pc, #20]	; (800e860 <c122f50a74e97b0b971f059f93cac9f52ab85af9+0x34>)
 800e84a:	f001 fef3 	bl	8010634 <LOGGER_PrintLine>
 800e84e:	4620      	mov	r0, r4
 800e850:	b002      	add	sp, #8
 800e852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e856:	f7ff bacd 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800e85a:	bf00      	nop
 800e85c:	0801f72c 	.word	0x0801f72c
 800e860:	0801f776 	.word	0x0801f776

0800e864 <db78e4d9b28d7c42d16d219c1384c29b20a49150>:
 800e864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e866:	4b16      	ldr	r3, [pc, #88]	; (800e8c0 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x5c>)
 800e868:	681d      	ldr	r5, [r3, #0]
 800e86a:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800e86e:	b085      	sub	sp, #20
 800e870:	f8d5 3dc8 	ldr.w	r3, [r5, #3528]	; 0xdc8
 800e874:	4604      	mov	r4, r0
 800e876:	b303      	cbz	r3, 800e8ba <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x56>
 800e878:	2305      	movs	r3, #5
 800e87a:	9302      	str	r3, [sp, #8]
 800e87c:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x60>)
 800e87e:	f8d0 2057 	ldr.w	r2, [r0, #87]	; 0x57
 800e882:	9303      	str	r3, [sp, #12]
 800e884:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 800e888:	e9cd 2300 	strd	r2, r3, [sp]
 800e88c:	a904      	add	r1, sp, #16
 800e88e:	7a03      	ldrb	r3, [r0, #8]
 800e890:	4a0d      	ldr	r2, [pc, #52]	; (800e8c8 <db78e4d9b28d7c42d16d219c1384c29b20a49150+0x64>)
 800e892:	e911 0003 	ldmdb	r1, {r0, r1}
 800e896:	f001 fecd 	bl	8010634 <LOGGER_PrintLine>
 800e89a:	2002      	movs	r0, #2
 800e89c:	6866      	ldr	r6, [r4, #4]
 800e89e:	7a27      	ldrb	r7, [r4, #8]
 800e8a0:	f8d5 5dc8 	ldr.w	r5, [r5, #3528]	; 0xdc8
 800e8a4:	f7fd fec0 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	9000      	str	r0, [sp, #0]
 800e8ac:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800e8b0:	f104 0257 	add.w	r2, r4, #87	; 0x57
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	47a8      	blx	r5
 800e8ba:	b005      	add	sp, #20
 800e8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20000040 	.word	0x20000040
 800e8c4:	0801f72c 	.word	0x0801f72c
 800e8c8:	0801f78b 	.word	0x0801f78b

0800e8cc <bbe099565971cd2d437b6a8e152f225cced7c4ee>:
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	4b09      	ldr	r3, [pc, #36]	; (800e8f4 <bbe099565971cd2d437b6a8e152f225cced7c4ee+0x28>)
 800e8d0:	681c      	ldr	r4, [r3, #0]
 800e8d2:	f504 5037 	add.w	r0, r4, #11712	; 0x2dc0
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e8dc:	3018      	adds	r0, #24
 800e8de:	f00d fb63 	bl	801bfa8 <memset>
 800e8e2:	f504 5137 	add.w	r1, r4, #11712	; 0x2dc0
 800e8e6:	4804      	ldr	r0, [pc, #16]	; (800e8f8 <bbe099565971cd2d437b6a8e152f225cced7c4ee+0x2c>)
 800e8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8ec:	3118      	adds	r1, #24
 800e8ee:	f7f8 b853 	b.w	8006998 <EMBENET_TIMER_Init>
 800e8f2:	bf00      	nop
 800e8f4:	20000040 	.word	0x20000040
 800e8f8:	0800ea3d 	.word	0x0800ea3d

0800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>:
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	4b13      	ldr	r3, [pc, #76]	; (800e94c <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x50>)
 800e900:	4604      	mov	r4, r0
 800e902:	681d      	ldr	r5, [r3, #0]
 800e904:	f7f7 fabe 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e908:	b11c      	cbz	r4, 800e912 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x16>
 800e90a:	2c01      	cmp	r4, #1
 800e90c:	d00e      	beq.n	800e92c <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x30>
 800e90e:	241f      	movs	r4, #31
 800e910:	e008      	b.n	800e924 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x28>
 800e912:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800e916:	f895 3df5 	ldrb.w	r3, [r5, #3573]	; 0xdf5
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1f7      	bne.n	800e90e <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x12>
 800e91e:	2301      	movs	r3, #1
 800e920:	f885 3df5 	strb.w	r3, [r5, #3573]	; 0xdf5
 800e924:	f7f7 face 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800e928:	4620      	mov	r0, r4
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	f505 5337 	add.w	r3, r5, #11712	; 0x2dc0
 800e930:	3335      	adds	r3, #53	; 0x35
 800e932:	0162      	lsls	r2, r4, #5
 800e934:	5c99      	ldrb	r1, [r3, r2]
 800e936:	b921      	cbnz	r1, 800e942 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x46>
 800e938:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800e93c:	b2e4      	uxtb	r4, r4
 800e93e:	4415      	add	r5, r2
 800e940:	e7ed      	b.n	800e91e <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x22>
 800e942:	3401      	adds	r4, #1
 800e944:	2c1f      	cmp	r4, #31
 800e946:	d1f4      	bne.n	800e932 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x36>
 800e948:	e7ec      	b.n	800e924 <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc+0x28>
 800e94a:	bf00      	nop
 800e94c:	20000040 	.word	0x20000040

0800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>:
 800e950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	469a      	mov	sl, r3
 800e956:	e9dd 930c 	ldrd	r9, r3, [sp, #48]	; 0x30
 800e95a:	4605      	mov	r5, r0
 800e95c:	4617      	mov	r7, r2
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	f1b9 0f00 	cmp.w	r9, #0
 800e964:	d104      	bne.n	800e970 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x20>
 800e966:	4930      	ldr	r1, [pc, #192]	; (800ea28 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd8>)
 800e968:	4830      	ldr	r0, [pc, #192]	; (800ea2c <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xdc>)
 800e96a:	2259      	movs	r2, #89	; 0x59
 800e96c:	f7f2 ffb4 	bl	80018d8 <EXPECT_OnAbortHandler>
 800e970:	4a2f      	ldr	r2, [pc, #188]	; (800ea30 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe0>)
 800e972:	281e      	cmp	r0, #30
 800e974:	6814      	ldr	r4, [r2, #0]
 800e976:	d808      	bhi.n	800e98a <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x3a>
 800e978:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
 800e97c:	eb06 1840 	add.w	r8, r6, r0, lsl #5
 800e980:	ea4f 1b40 	mov.w	fp, r0, lsl #5
 800e984:	f898 2df5 	ldrb.w	r2, [r8, #3573]	; 0xdf5
 800e988:	b91a      	cbnz	r2, 800e992 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x42>
 800e98a:	4927      	ldr	r1, [pc, #156]	; (800ea28 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd8>)
 800e98c:	4829      	ldr	r0, [pc, #164]	; (800ea34 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe4>)
 800e98e:	225c      	movs	r2, #92	; 0x5c
 800e990:	e7ec      	b.n	800e96c <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x1c>
 800e992:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800e996:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800e99a:	9101      	str	r1, [sp, #4]
 800e99c:	f7f7 fa72 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800e9a0:	9901      	ldr	r1, [sp, #4]
 800e9a2:	f885 1dd8 	strb.w	r1, [r5, #3544]	; 0xdd8
 800e9a6:	f8c8 7de4 	str.w	r7, [r8, #3556]	; 0xde4
 800e9aa:	f7f8 f899 	bl	8006ae0 <EMBENET_TIMER_ReadCounter>
 800e9ae:	44ba      	add	sl, r7
 800e9b0:	4921      	ldr	r1, [pc, #132]	; (800ea38 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xe8>)
 800e9b2:	ebaa 0200 	sub.w	r2, sl, r0
 800e9b6:	428a      	cmp	r2, r1
 800e9b8:	d80d      	bhi.n	800e9d6 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x86>
 800e9ba:	9201      	str	r2, [sp, #4]
 800e9bc:	f7f8 f89a 	bl	8006af4 <EMBENET_TIMER_GetMaxCompareDuration>
 800e9c0:	9a01      	ldr	r2, [sp, #4]
 800e9c2:	fbb2 f7f0 	udiv	r7, r2, r0
 800e9c6:	4290      	cmp	r0, r2
 800e9c8:	f8c8 7dec 	str.w	r7, [r8, #3564]	; 0xdec
 800e9cc:	d82a      	bhi.n	800ea24 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xd4>
 800e9ce:	f7f8 f891 	bl	8006af4 <EMBENET_TIMER_GetMaxCompareDuration>
 800e9d2:	fb00 a017 	mls	r0, r0, r7, sl
 800e9d6:	445e      	add	r6, fp
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f886 3df4 	strb.w	r3, [r6, #3572]	; 0xdf4
 800e9de:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 800e9e2:	9b00      	ldr	r3, [sp, #0]
 800e9e4:	f8c6 0de8 	str.w	r0, [r6, #3560]	; 0xde8
 800e9e8:	f8c5 9ddc 	str.w	r9, [r5, #3548]	; 0xddc
 800e9ec:	f8c6 3de0 	str.w	r3, [r6, #3552]	; 0xde0
 800e9f0:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
 800e9f4:	b98b      	cbnz	r3, 800ea1a <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xca>
 800e9f6:	f894 31c1 	ldrb.w	r3, [r4, #449]	; 0x1c1
 800e9fa:	f8d6 0de8 	ldr.w	r0, [r6, #3560]	; 0xde8
 800e9fe:	b12b      	cbz	r3, 800ea0c <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xbc>
 800ea00:	e9d4 236e 	ldrd	r2, r3, [r4, #440]	; 0x1b8
 800ea04:	1ad2      	subs	r2, r2, r3
 800ea06:	1ac3      	subs	r3, r0, r3
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d903      	bls.n	800ea14 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0xc4>
 800ea0c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
 800ea10:	f7f8 f836 	bl	8006a80 <EMBENET_TIMER_SetCompare>
 800ea14:	2301      	movs	r3, #1
 800ea16:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
 800ea1a:	b003      	add	sp, #12
 800ea1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	f7f7 ba50 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800ea24:	4650      	mov	r0, sl
 800ea26:	e7d6      	b.n	800e9d6 <730eb7956d67b4105233f5dd87140a7c05a0a0f0+0x86>
 800ea28:	0801f7b2 	.word	0x0801f7b2
 800ea2c:	0801f811 	.word	0x0801f811
 800ea30:	20000040 	.word	0x20000040
 800ea34:	0801f83b 	.word	0x0801f83b
 800ea38:	ffffec78 	.word	0xffffec78

0800ea3c <84b3a76c23800c7583f919339b96a0fe3bcec754>:
 800ea3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	f04f 0a01 	mov.w	sl, #1
 800ea44:	2600      	movs	r6, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	f880 a3e8 	strb.w	sl, [r0, #1000]	; 0x3e8
 800ea4c:	4680      	mov	r8, r0
 800ea4e:	4605      	mov	r5, r0
 800ea50:	46b3      	mov	fp, r6
 800ea52:	7f2a      	ldrb	r2, [r5, #28]
 800ea54:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800ea58:	f105 0920 	add.w	r9, r5, #32
 800ea5c:	b32a      	cbz	r2, 800eaaa <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800ea5e:	692f      	ldr	r7, [r5, #16]
 800ea60:	429f      	cmp	r7, r3
 800ea62:	d122      	bne.n	800eaaa <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800ea64:	696b      	ldr	r3, [r5, #20]
 800ea66:	f885 b01c 	strb.w	fp, [r5, #28]
 800ea6a:	61af      	str	r7, [r5, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d14c      	bne.n	800eb0a <84b3a76c23800c7583f919339b96a0fe3bcec754+0xce>
 800ea70:	b94e      	cbnz	r6, 800ea86 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x4a>
 800ea72:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800ea76:	4798      	blx	r3
 800ea78:	782a      	ldrb	r2, [r5, #0]
 800ea7a:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800ea7e:	b15a      	cbz	r2, 800ea98 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x5c>
 800ea80:	464d      	mov	r5, r9
 800ea82:	2601      	movs	r6, #1
 800ea84:	e7e5      	b.n	800ea52 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x16>
 800ea86:	220a      	movs	r2, #10
 800ea88:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800ea8c:	f000 ff44 	bl	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 800ea90:	782a      	ldrb	r2, [r5, #0]
 800ea92:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 800ea96:	b942      	cbnz	r2, 800eaaa <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>
 800ea98:	68aa      	ldr	r2, [r5, #8]
 800ea9a:	9201      	str	r2, [sp, #4]
 800ea9c:	686a      	ldr	r2, [r5, #4]
 800ea9e:	9200      	str	r2, [sp, #0]
 800eaa0:	68ea      	ldr	r2, [r5, #12]
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	b2f0      	uxtb	r0, r6
 800eaa6:	f7ff ff53 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800eaaa:	3601      	adds	r6, #1
 800eaac:	2e1f      	cmp	r6, #31
 800eaae:	464d      	mov	r5, r9
 800eab0:	d1cf      	bne.n	800ea52 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x16>
 800eab2:	2300      	movs	r3, #0
 800eab4:	f8d4 03e0 	ldr.w	r0, [r4, #992]	; 0x3e0
 800eab8:	f8c4 03e4 	str.w	r0, [r4, #996]	; 0x3e4
 800eabc:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
 800eac0:	461a      	mov	r2, r3
 800eac2:	f04f 35ff 	mov.w	r5, #4294967295
 800eac6:	2601      	movs	r6, #1
 800eac8:	f898 101c 	ldrb.w	r1, [r8, #28]
 800eacc:	b141      	cbz	r1, 800eae0 <84b3a76c23800c7583f919339b96a0fe3bcec754+0xa4>
 800eace:	f884 63e9 	strb.w	r6, [r4, #1001]	; 0x3e9
 800ead2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ead6:	1a09      	subs	r1, r1, r0
 800ead8:	42a9      	cmp	r1, r5
 800eada:	bf9c      	itt	ls
 800eadc:	b2da      	uxtbls	r2, r3
 800eade:	460d      	movls	r5, r1
 800eae0:	3301      	adds	r3, #1
 800eae2:	2b1f      	cmp	r3, #31
 800eae4:	f108 0820 	add.w	r8, r8, #32
 800eae8:	d1ee      	bne.n	800eac8 <84b3a76c23800c7583f919339b96a0fe3bcec754+0x8c>
 800eaea:	f894 33e9 	ldrb.w	r3, [r4, #1001]	; 0x3e9
 800eaee:	b133      	cbz	r3, 800eafe <84b3a76c23800c7583f919339b96a0fe3bcec754+0xc2>
 800eaf0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800eaf4:	6910      	ldr	r0, [r2, #16]
 800eaf6:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
 800eafa:	f7f7 ffc1 	bl	8006a80 <EMBENET_TIMER_SetCompare>
 800eafe:	2300      	movs	r3, #0
 800eb00:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
 800eb04:	b003      	add	sp, #12
 800eb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	616b      	str	r3, [r5, #20]
 800eb0e:	f7f7 fff1 	bl	8006af4 <EMBENET_TIMER_GetMaxCompareDuration>
 800eb12:	4407      	add	r7, r0
 800eb14:	612f      	str	r7, [r5, #16]
 800eb16:	f885 a01c 	strb.w	sl, [r5, #28]
 800eb1a:	e7c6      	b.n	800eaaa <84b3a76c23800c7583f919339b96a0fe3bcec754+0x6e>

0800eb1c <a146aa5c27211710221f7063067066079d66a071>:
 800eb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb1e:	4616      	mov	r6, r2
 800eb20:	461f      	mov	r7, r3
 800eb22:	4604      	mov	r4, r0
 800eb24:	460d      	mov	r5, r1
 800eb26:	f7f7 ffdb 	bl	8006ae0 <EMBENET_TIMER_ReadCounter>
 800eb2a:	9a08      	ldr	r2, [sp, #32]
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	e9cd 7200 	strd	r7, r2, [sp]
 800eb32:	4629      	mov	r1, r5
 800eb34:	4632      	mov	r2, r6
 800eb36:	4620      	mov	r0, r4
 800eb38:	f7ff ff0a 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 800eb3c:	b003      	add	sp, #12
 800eb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>:
 800eb40:	281e      	cmp	r0, #30
 800eb42:	b538      	push	{r3, r4, r5, lr}
 800eb44:	4605      	mov	r5, r0
 800eb46:	d810      	bhi.n	800eb6a <2f27d002e6f5798bf50ec4e1714df836a8561b81+0x2a>
 800eb48:	4b08      	ldr	r3, [pc, #32]	; (800eb6c <2f27d002e6f5798bf50ec4e1714df836a8561b81+0x2c>)
 800eb4a:	681c      	ldr	r4, [r3, #0]
 800eb4c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 800eb50:	f7f7 f998 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800eb54:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f880 3df4 	strb.w	r3, [r0, #3572]	; 0xdf4
 800eb5e:	f8c0 3ddc 	str.w	r3, [r0, #3548]	; 0xddc
 800eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb66:	f7f7 b9ad 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	20000040 	.word	0x20000040

0800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>:
 800eb70:	f7f7 bfb6 	b.w	8006ae0 <EMBENET_TIMER_ReadCounter>

0800eb74 <19ac46e5c06ffb6c1640c5d4070de271a544b182>:
 800eb74:	281e      	cmp	r0, #30
 800eb76:	b508      	push	{r3, lr}
 800eb78:	d904      	bls.n	800eb84 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x10>
 800eb7a:	22b8      	movs	r2, #184	; 0xb8
 800eb7c:	4908      	ldr	r1, [pc, #32]	; (800eba0 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x2c>)
 800eb7e:	4809      	ldr	r0, [pc, #36]	; (800eba4 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x30>)
 800eb80:	f7f2 feaa 	bl	80018d8 <EXPECT_OnAbortHandler>
 800eb84:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x34>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800eb8c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800eb90:	f890 3df5 	ldrb.w	r3, [r0, #3573]	; 0xdf5
 800eb94:	b90b      	cbnz	r3, 800eb9a <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x26>
 800eb96:	22bc      	movs	r2, #188	; 0xbc
 800eb98:	e7f0      	b.n	800eb7c <19ac46e5c06ffb6c1640c5d4070de271a544b182+0x8>
 800eb9a:	f8d0 0df0 	ldr.w	r0, [r0, #3568]	; 0xdf0
 800eb9e:	bd08      	pop	{r3, pc}
 800eba0:	0801f7b2 	.word	0x0801f7b2
 800eba4:	0801f4ff 	.word	0x0801f4ff
 800eba8:	20000040 	.word	0x20000040

0800ebac <56445be374e93738432324b7e0ececbd8047647a>:
 800ebac:	281e      	cmp	r0, #30
 800ebae:	bf9f      	itttt	ls
 800ebb0:	4b05      	ldrls	r3, [pc, #20]	; (800ebc8 <56445be374e93738432324b7e0ececbd8047647a+0x1c>)
 800ebb2:	681b      	ldrls	r3, [r3, #0]
 800ebb4:	f503 5300 	addls.w	r3, r3, #8192	; 0x2000
 800ebb8:	eb03 1040 	addls.w	r0, r3, r0, lsl #5
 800ebbc:	bf94      	ite	ls
 800ebbe:	f890 0df4 	ldrbls.w	r0, [r0, #3572]	; 0xdf4
 800ebc2:	2000      	movhi	r0, #0
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	20000040 	.word	0x20000040

0800ebcc <da97346f7fa50b65fe6c97432d29b132cbef037c>:
 800ebcc:	b508      	push	{r3, lr}
 800ebce:	f7f7 fd17 	bl	8006600 <EMBENET_RANDOM_Get>
 800ebd2:	b938      	cbnz	r0, 800ebe4 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x18>
 800ebd4:	f7f7 fd14 	bl	8006600 <EMBENET_RANDOM_Get>
 800ebd8:	b920      	cbnz	r0, 800ebe4 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x18>
 800ebda:	4906      	ldr	r1, [pc, #24]	; (800ebf4 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x28>)
 800ebdc:	4806      	ldr	r0, [pc, #24]	; (800ebf8 <da97346f7fa50b65fe6c97432d29b132cbef037c+0x2c>)
 800ebde:	2217      	movs	r2, #23
 800ebe0:	f7f2 fe7a 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ebe4:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <da97346f7fa50b65fe6c97432d29b132cbef037c+0x30>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ebec:	f8a3 01c4 	strh.w	r0, [r3, #452]	; 0x1c4
 800ebf0:	bd08      	pop	{r3, pc}
 800ebf2:	bf00      	nop
 800ebf4:	0801f866 	.word	0x0801f866
 800ebf8:	0801f8bd 	.word	0x0801f8bd
 800ebfc:	20000040 	.word	0x20000040

0800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	4b0f      	ldr	r3, [pc, #60]	; (800ec40 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x40>)
 800ec04:	4d0f      	ldr	r5, [pc, #60]	; (800ec44 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x44>)
 800ec06:	681c      	ldr	r4, [r3, #0]
 800ec08:	f7f7 f93c 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800ec0c:	f504 5040 	add.w	r0, r4, #12288	; 0x3000
 800ec10:	2100      	movs	r1, #0
 800ec12:	f8b0 31c4 	ldrh.w	r3, [r0, #452]	; 0x1c4
 800ec16:	460c      	mov	r4, r1
 800ec18:	f003 0201 	and.w	r2, r3, #1
 800ec1c:	fa02 f601 	lsl.w	r6, r2, r1
 800ec20:	4252      	negs	r2, r2
 800ec22:	402a      	ands	r2, r5
 800ec24:	3101      	adds	r1, #1
 800ec26:	4334      	orrs	r4, r6
 800ec28:	ea82 0353 	eor.w	r3, r2, r3, lsr #1
 800ec2c:	2910      	cmp	r1, #16
 800ec2e:	b2a4      	uxth	r4, r4
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	d1f1      	bne.n	800ec18 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8+0x18>
 800ec34:	f8a0 31c4 	strh.w	r3, [r0, #452]	; 0x1c4
 800ec38:	f7f7 f944 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}
 800ec40:	20000040 	.word	0x20000040
 800ec44:	ffffb400 	.word	0xffffb400

0800ec48 <7694f58d16cb666949a4f0727c30967f32581954>:
 800ec48:	4288      	cmp	r0, r1
 800ec4a:	b570      	push	{r4, r5, r6, lr}
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	d304      	bcc.n	800ec5c <7694f58d16cb666949a4f0727c30967f32581954+0x14>
 800ec52:	490c      	ldr	r1, [pc, #48]	; (800ec84 <7694f58d16cb666949a4f0727c30967f32581954+0x3c>)
 800ec54:	480c      	ldr	r0, [pc, #48]	; (800ec88 <7694f58d16cb666949a4f0727c30967f32581954+0x40>)
 800ec56:	2234      	movs	r2, #52	; 0x34
 800ec58:	f7f2 fe3e 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ec5c:	f7ff ffd0 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 800ec60:	4606      	mov	r6, r0
 800ec62:	f7ff ffcd 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 800ec66:	3401      	adds	r4, #1
 800ec68:	f04f 0100 	mov.w	r1, #0
 800ec6c:	f141 0300 	adc.w	r3, r1, #0
 800ec70:	1b62      	subs	r2, r4, r5
 800ec72:	f163 0300 	sbc.w	r3, r3, #0
 800ec76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800ec7a:	f7f1 ffc7 	bl	8000c0c <__aeabi_uldivmod>
 800ec7e:	18a8      	adds	r0, r5, r2
 800ec80:	bd70      	pop	{r4, r5, r6, pc}
 800ec82:	bf00      	nop
 800ec84:	0801f866 	.word	0x0801f866
 800ec88:	0801f8d0 	.word	0x0801f8d0

0800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>:
 800ec8c:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 800ec90:	4602      	mov	r2, r0
 800ec92:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ec96:	d907      	bls.n	800eca8 <23673502809f5a9646d21283e7a04e0764f4d11d+0x1c>
 800ec98:	43d1      	mvns	r1, r2
 800ec9a:	428b      	cmp	r3, r1
 800ec9c:	eba0 0003 	sub.w	r0, r0, r3
 800eca0:	d204      	bcs.n	800ecac <23673502809f5a9646d21283e7a04e0764f4d11d+0x20>
 800eca2:	1899      	adds	r1, r3, r2
 800eca4:	f7ff bfd0 	b.w	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	e7fa      	b.n	800eca2 <23673502809f5a9646d21283e7a04e0764f4d11d+0x16>
 800ecac:	f04f 31ff 	mov.w	r1, #4294967295
 800ecb0:	e7f8      	b.n	800eca4 <23673502809f5a9646d21283e7a04e0764f4d11d+0x18>

0800ecb2 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 800ecb2:	3901      	subs	r1, #1
 800ecb4:	1d43      	adds	r3, r0, #5
 800ecb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ecba:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800ecbe:	4283      	cmp	r3, r0
 800ecc0:	d1f9      	bne.n	800ecb6 <a0e683530d0c083abc75a62811790ac1bd2e23b8+0x4>
 800ecc2:	4770      	bx	lr

0800ecc4 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <a2cfc355d32e55b8b56cc48ae29213a5fcc061ca+0x1c>)
 800ecc8:	681c      	ldr	r4, [r3, #0]
 800ecca:	22ac      	movs	r2, #172	; 0xac
 800eccc:	2100      	movs	r1, #0
 800ecce:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800ecd2:	f00d f969 	bl	801bfa8 <memset>
 800ecd6:	2305      	movs	r3, #5
 800ecd8:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	bf00      	nop
 800ece0:	20000040 	.word	0x20000040

0800ece4 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8>:
 800ece4:	b508      	push	{r3, lr}
 800ece6:	b920      	cbnz	r0, 800ecf2 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0xe>
 800ece8:	4908      	ldr	r1, [pc, #32]	; (800ed0c <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x28>)
 800ecea:	4809      	ldr	r0, [pc, #36]	; (800ed10 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x2c>)
 800ecec:	22dc      	movs	r2, #220	; 0xdc
 800ecee:	f7f2 fdf3 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ecf2:	4b08      	ldr	r3, [pc, #32]	; (800ed14 <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x30>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f100 0210 	add.w	r2, r0, #16
 800ecfa:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800ecfe:	f850 1b04 	ldr.w	r1, [r0], #4
 800ed02:	f843 1b04 	str.w	r1, [r3], #4
 800ed06:	4290      	cmp	r0, r2
 800ed08:	d1f9      	bne.n	800ecfe <1e9fc63c4239e2e23ba8a071c9b6c0d4aab1f4b8+0x1a>
 800ed0a:	bd08      	pop	{r3, pc}
 800ed0c:	0801f8dc 	.word	0x0801f8dc
 800ed10:	0801f93a 	.word	0x0801f93a
 800ed14:	20000040 	.word	0x20000040

0800ed18 <7d0846c279c7703537dc22d139b898222dc42c28>:
 800ed18:	b508      	push	{r3, lr}
 800ed1a:	b920      	cbnz	r0, 800ed26 <7d0846c279c7703537dc22d139b898222dc42c28+0xe>
 800ed1c:	490d      	ldr	r1, [pc, #52]	; (800ed54 <7d0846c279c7703537dc22d139b898222dc42c28+0x3c>)
 800ed1e:	480e      	ldr	r0, [pc, #56]	; (800ed58 <7d0846c279c7703537dc22d139b898222dc42c28+0x40>)
 800ed20:	22ec      	movs	r2, #236	; 0xec
 800ed22:	f7f2 fdd9 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ed26:	4b0d      	ldr	r3, [pc, #52]	; (800ed5c <7d0846c279c7703537dc22d139b898222dc42c28+0x44>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 800ed2e:	2a03      	cmp	r2, #3
 800ed30:	d10d      	bne.n	800ed4e <7d0846c279c7703537dc22d139b898222dc42c28+0x36>
 800ed32:	f203 6236 	addw	r2, r3, #1590	; 0x636
 800ed36:	f203 6346 	addw	r3, r3, #1606	; 0x646
 800ed3a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed3e:	f840 1b04 	str.w	r1, [r0], #4
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d1f9      	bne.n	800ed3a <7d0846c279c7703537dc22d139b898222dc42c28+0x22>
 800ed46:	8813      	ldrh	r3, [r2, #0]
 800ed48:	8003      	strh	r3, [r0, #0]
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	bd08      	pop	{r3, pc}
 800ed4e:	2000      	movs	r0, #0
 800ed50:	e7fc      	b.n	800ed4c <7d0846c279c7703537dc22d139b898222dc42c28+0x34>
 800ed52:	bf00      	nop
 800ed54:	0801f8dc 	.word	0x0801f8dc
 800ed58:	0801f94b 	.word	0x0801f94b
 800ed5c:	20000040 	.word	0x20000040

0800ed60 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe>:
 800ed60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed62:	4b40      	ldr	r3, [pc, #256]	; (800ee64 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x104>)
 800ed64:	681c      	ldr	r4, [r3, #0]
 800ed66:	f894 565c 	ldrb.w	r5, [r4, #1628]	; 0x65c
 800ed6a:	2d01      	cmp	r5, #1
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	d141      	bne.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ed70:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800ed74:	2b04      	cmp	r3, #4
 800ed76:	d86f      	bhi.n	800ee58 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xf8>
 800ed78:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800ed7c:	f893 25b6 	ldrb.w	r2, [r3, #1462]	; 0x5b6
 800ed80:	2a00      	cmp	r2, #0
 800ed82:	d063      	beq.n	800ee4c <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xec>
 800ed84:	f894 25e8 	ldrb.w	r2, [r4, #1512]	; 0x5e8
 800ed88:	4937      	ldr	r1, [pc, #220]	; (800ee68 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x108>)
 800ed8a:	2a00      	cmp	r2, #0
 800ed8c:	d03b      	beq.n	800ee06 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xa6>
 800ed8e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800ed92:	1a12      	subs	r2, r2, r0
 800ed94:	428a      	cmp	r2, r1
 800ed96:	d92d      	bls.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ed98:	2700      	movs	r7, #0
 800ed9a:	f884 75e8 	strb.w	r7, [r4, #1512]	; 0x5e8
 800ed9e:	f8c3 05b8 	str.w	r0, [r3, #1464]	; 0x5b8
 800eda2:	f7fd fe4d 	bl	800ca40 <08bb79b9d8122a54d175f9ca733eba1fe88f9bf1>
 800eda6:	4606      	mov	r6, r0
 800eda8:	b338      	cbz	r0, 800edfa <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x9a>
 800edaa:	2090      	movs	r0, #144	; 0x90
 800edac:	f7fe ff64 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800edb0:	4604      	mov	r4, r0
 800edb2:	b950      	cbnz	r0, 800edca <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x6a>
 800edb4:	2304      	movs	r3, #4
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	4a2c      	ldr	r2, [pc, #176]	; (800ee6c <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x10c>)
 800edba:	4b2d      	ldr	r3, [pc, #180]	; (800ee70 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800edbc:	9301      	str	r3, [sp, #4]
 800edbe:	ab02      	add	r3, sp, #8
 800edc0:	e913 0003 	ldmdb	r3, {r0, r1}
 800edc4:	f001 fc36 	bl	8010634 <LOGGER_PrintLine>
 800edc8:	e014      	b.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800edca:	2390      	movs	r3, #144	; 0x90
 800edcc:	7043      	strb	r3, [r0, #1]
 800edce:	2121      	movs	r1, #33	; 0x21
 800edd0:	f00c f830 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 800edd4:	6863      	ldr	r3, [r4, #4]
 800edd6:	60e3      	str	r3, [r4, #12]
 800edd8:	2302      	movs	r3, #2
 800edda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800edde:	6833      	ldr	r3, [r6, #0]
 800ede0:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 800ede4:	6873      	ldr	r3, [r6, #4]
 800ede6:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
 800edea:	f884 709d 	strb.w	r7, [r4, #157]	; 0x9d
 800edee:	4620      	mov	r0, r4
 800edf0:	f006 fbdc 	bl	80155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>
 800edf4:	4628      	mov	r0, r5
 800edf6:	b003      	add	sp, #12
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfa:	2303      	movs	r3, #3
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4b1c      	ldr	r3, [pc, #112]	; (800ee70 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ee00:	4a1c      	ldr	r2, [pc, #112]	; (800ee74 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x114>)
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	e7db      	b.n	800edbe <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x5e>
 800ee06:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800ee0a:	1ac3      	subs	r3, r0, r3
 800ee0c:	428b      	cmp	r3, r1
 800ee0e:	d9f1      	bls.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ee10:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 800ee14:	b163      	cbz	r3, 800ee30 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xd0>
 800ee16:	3b01      	subs	r3, #1
 800ee18:	4917      	ldr	r1, [pc, #92]	; (800ee78 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x118>)
 800ee1a:	4818      	ldr	r0, [pc, #96]	; (800ee7c <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x11c>)
 800ee1c:	f884 35e0 	strb.w	r3, [r4, #1504]	; 0x5e0
 800ee20:	f884 55e8 	strb.w	r5, [r4, #1512]	; 0x5e8
 800ee24:	f7ff ff10 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 800ee28:	4430      	add	r0, r6
 800ee2a:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800ee2e:	e7e1      	b.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ee30:	2303      	movs	r3, #3
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	4a12      	ldr	r2, [pc, #72]	; (800ee80 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x120>)
 800ee36:	4b0e      	ldr	r3, [pc, #56]	; (800ee70 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	ab02      	add	r3, sp, #8
 800ee3c:	e913 0003 	ldmdb	r3, {r0, r1}
 800ee40:	2504      	movs	r5, #4
 800ee42:	f001 fbf7 	bl	8010634 <LOGGER_PrintLine>
 800ee46:	f884 565c 	strb.w	r5, [r4, #1628]	; 0x65c
 800ee4a:	e7d3      	b.n	800edf4 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x94>
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	4b07      	ldr	r3, [pc, #28]	; (800ee70 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ee52:	4a0c      	ldr	r2, [pc, #48]	; (800ee84 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x124>)
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	e7f0      	b.n	800ee3a <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xda>
 800ee58:	2303      	movs	r3, #3
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	4b04      	ldr	r3, [pc, #16]	; (800ee70 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x110>)
 800ee5e:	4a0a      	ldr	r2, [pc, #40]	; (800ee88 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0x128>)
 800ee60:	9301      	str	r3, [sp, #4]
 800ee62:	e7ea      	b.n	800ee3a <03d6da78285e4b5dbf21b3dd748386b7299cb1fe+0xda>
 800ee64:	20000040 	.word	0x20000040
 800ee68:	01312d00 	.word	0x01312d00
 800ee6c:	0801f96e 	.word	0x0801f96e
 800ee70:	0801f968 	.word	0x0801f968
 800ee74:	0801f9b1 	.word	0x0801f9b1
 800ee78:	00989680 	.word	0x00989680
 800ee7c:	000f4240 	.word	0x000f4240
 800ee80:	0801f9df 	.word	0x0801f9df
 800ee84:	0801f9f4 	.word	0x0801f9f4
 800ee88:	0801fa1f 	.word	0x0801fa1f

0800ee8c <9506f9c37a945216115ab5227293f46163fc6230>:
 800ee8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee8e:	4b1f      	ldr	r3, [pc, #124]	; (800ef0c <9506f9c37a945216115ab5227293f46163fc6230+0x80>)
 800ee90:	681c      	ldr	r4, [r3, #0]
 800ee92:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800ee96:	f894 2634 	ldrb.w	r2, [r4, #1588]	; 0x634
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	4608      	mov	r0, r1
 800eea0:	d909      	bls.n	800eeb6 <9506f9c37a945216115ab5227293f46163fc6230+0x2a>
 800eea2:	b1b2      	cbz	r2, 800eed2 <9506f9c37a945216115ab5227293f46163fc6230+0x46>
 800eea4:	2300      	movs	r3, #0
 800eea6:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800eeaa:	bb38      	cbnz	r0, 800eefc <9506f9c37a945216115ab5227293f46163fc6230+0x70>
 800eeac:	2001      	movs	r0, #1
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
 800eeb4:	e022      	b.n	800eefc <9506f9c37a945216115ab5227293f46163fc6230+0x70>
 800eeb6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800eeba:	2101      	movs	r1, #1
 800eebc:	f8c3 55b8 	str.w	r5, [r3, #1464]	; 0x5b8
 800eec0:	f883 15b6 	strb.w	r1, [r3, #1462]	; 0x5b6
 800eec4:	b12a      	cbz	r2, 800eed2 <9506f9c37a945216115ab5227293f46163fc6230+0x46>
 800eec6:	2200      	movs	r2, #0
 800eec8:	f884 2634 	strb.w	r2, [r4, #1588]	; 0x634
 800eecc:	f8a3 25b6 	strh.w	r2, [r3, #1462]	; 0x5b6
 800eed0:	e7eb      	b.n	800eeaa <9506f9c37a945216115ab5227293f46163fc6230+0x1e>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d0eb      	beq.n	800eeae <9506f9c37a945216115ab5227293f46163fc6230+0x22>
 800eed6:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 800eeda:	b173      	cbz	r3, 800eefa <9506f9c37a945216115ab5227293f46163fc6230+0x6e>
 800eedc:	2305      	movs	r3, #5
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4b0b      	ldr	r3, [pc, #44]	; (800ef10 <9506f9c37a945216115ab5227293f46163fc6230+0x84>)
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	ab02      	add	r3, sp, #8
 800eee6:	e913 0003 	ldmdb	r3, {r0, r1}
 800eeea:	4a0a      	ldr	r2, [pc, #40]	; (800ef14 <9506f9c37a945216115ab5227293f46163fc6230+0x88>)
 800eeec:	f001 fba2 	bl	8010634 <LOGGER_PrintLine>
 800eef0:	2301      	movs	r3, #1
 800eef2:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800eef6:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
 800eefa:	2000      	movs	r0, #0
 800eefc:	2305      	movs	r3, #5
 800eefe:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800ef02:	2300      	movs	r3, #0
 800ef04:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800ef08:	b003      	add	sp, #12
 800ef0a:	bd30      	pop	{r4, r5, pc}
 800ef0c:	20000040 	.word	0x20000040
 800ef10:	0801f968 	.word	0x0801f968
 800ef14:	0801fa3a 	.word	0x0801fa3a

0800ef18 <d492673eb40b0122449614ddec3203e781e2c714>:
 800ef18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	4b68      	ldr	r3, [pc, #416]	; (800f0c0 <d492673eb40b0122449614ddec3203e781e2c714+0x1a8>)
 800ef1e:	681c      	ldr	r4, [r3, #0]
 800ef20:	f894 365c 	ldrb.w	r3, [r4, #1628]	; 0x65c
 800ef24:	4605      	mov	r5, r0
 800ef26:	460f      	mov	r7, r1
 800ef28:	b16b      	cbz	r3, 800ef46 <d492673eb40b0122449614ddec3203e781e2c714+0x2e>
 800ef2a:	2303      	movs	r3, #3
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	4b65      	ldr	r3, [pc, #404]	; (800f0c4 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	ab02      	add	r3, sp, #8
 800ef34:	e913 0003 	ldmdb	r3, {r0, r1}
 800ef38:	4a63      	ldr	r2, [pc, #396]	; (800f0c8 <d492673eb40b0122449614ddec3203e781e2c714+0x1b0>)
 800ef3a:	f001 fb7b 	bl	8010634 <LOGGER_PrintLine>
 800ef3e:	2100      	movs	r1, #0
 800ef40:	4638      	mov	r0, r7
 800ef42:	f7ff ffa3 	bl	800ee8c <9506f9c37a945216115ab5227293f46163fc6230>
 800ef46:	f8df b184 	ldr.w	fp, [pc, #388]	; 800f0cc <d492673eb40b0122449614ddec3203e781e2c714+0x1b4>
 800ef4a:	f8df a184 	ldr.w	sl, [pc, #388]	; 800f0d0 <d492673eb40b0122449614ddec3203e781e2c714+0x1b8>
 800ef4e:	46a0      	mov	r8, r4
 800ef50:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800ef54:	4626      	mov	r6, r4
 800ef56:	f896 35b6 	ldrb.w	r3, [r6, #1462]	; 0x5b6
 800ef5a:	b193      	cbz	r3, 800ef82 <d492673eb40b0122449614ddec3203e781e2c714+0x6a>
 800ef5c:	485d      	ldr	r0, [pc, #372]	; (800f0d4 <d492673eb40b0122449614ddec3203e781e2c714+0x1bc>)
 800ef5e:	4659      	mov	r1, fp
 800ef60:	f7fd faf2 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800ef64:	f896 35b7 	ldrb.w	r3, [r6, #1463]	; 0x5b7
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	bf18      	it	ne
 800ef6c:	4650      	movne	r0, sl
 800ef6e:	f8d6 35b8 	ldr.w	r3, [r6, #1464]	; 0x5b8
 800ef72:	1afb      	subs	r3, r7, r3
 800ef74:	4283      	cmp	r3, r0
 800ef76:	bf82      	ittt	hi
 800ef78:	2300      	movhi	r3, #0
 800ef7a:	f886 35b6 	strbhi.w	r3, [r6, #1462]	; 0x5b6
 800ef7e:	f886 35b7 	strbhi.w	r3, [r6, #1463]	; 0x5b7
 800ef82:	3608      	adds	r6, #8
 800ef84:	454e      	cmp	r6, r9
 800ef86:	d1e6      	bne.n	800ef56 <d492673eb40b0122449614ddec3203e781e2c714+0x3e>
 800ef88:	f894 3634 	ldrb.w	r3, [r4, #1588]	; 0x634
 800ef8c:	b1a3      	cbz	r3, 800efb8 <d492673eb40b0122449614ddec3203e781e2c714+0xa0>
 800ef8e:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
 800ef92:	4a4f      	ldr	r2, [pc, #316]	; (800f0d0 <d492673eb40b0122449614ddec3203e781e2c714+0x1b8>)
 800ef94:	1afb      	subs	r3, r7, r3
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d924      	bls.n	800efe4 <d492673eb40b0122449614ddec3203e781e2c714+0xcc>
 800ef9a:	2304      	movs	r3, #4
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	4b49      	ldr	r3, [pc, #292]	; (800f0c4 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	ab02      	add	r3, sp, #8
 800efa4:	e913 0003 	ldmdb	r3, {r0, r1}
 800efa8:	4a4b      	ldr	r2, [pc, #300]	; (800f0d8 <d492673eb40b0122449614ddec3203e781e2c714+0x1c0>)
 800efaa:	f001 fb43 	bl	8010634 <LOGGER_PrintLine>
 800efae:	f00b fc99 	bl	801a8e4 <d6f04be9d8ad12cb38262f1bba36a144854d1588>
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
 800efb8:	f898 35b6 	ldrb.w	r3, [r8, #1462]	; 0x5b6
 800efbc:	b32b      	cbz	r3, 800f00a <d492673eb40b0122449614ddec3203e781e2c714+0xf2>
 800efbe:	f8b8 35b4 	ldrh.w	r3, [r8, #1460]	; 0x5b4
 800efc2:	42ab      	cmp	r3, r5
 800efc4:	d121      	bne.n	800f00a <d492673eb40b0122449614ddec3203e781e2c714+0xf2>
 800efc6:	2305      	movs	r3, #5
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	4b3e      	ldr	r3, [pc, #248]	; (800f0c4 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	a902      	add	r1, sp, #8
 800efd0:	e911 0003 	ldmdb	r1, {r0, r1}
 800efd4:	4a41      	ldr	r2, [pc, #260]	; (800f0dc <d492673eb40b0122449614ddec3203e781e2c714+0x1c4>)
 800efd6:	462b      	mov	r3, r5
 800efd8:	f001 fb2c 	bl	8010634 <LOGGER_PrintLine>
 800efdc:	2000      	movs	r0, #0
 800efde:	b003      	add	sp, #12
 800efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe4:	f8b4 3646 	ldrh.w	r3, [r4, #1606]	; 0x646
 800efe8:	42ab      	cmp	r3, r5
 800efea:	d1f7      	bne.n	800efdc <d492673eb40b0122449614ddec3203e781e2c714+0xc4>
 800efec:	2303      	movs	r3, #3
 800efee:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800eff2:	2305      	movs	r3, #5
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	4b33      	ldr	r3, [pc, #204]	; (800f0c4 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800eff8:	9301      	str	r3, [sp, #4]
 800effa:	ab02      	add	r3, sp, #8
 800effc:	e913 0003 	ldmdb	r3, {r0, r1}
 800f000:	4a37      	ldr	r2, [pc, #220]	; (800f0e0 <d492673eb40b0122449614ddec3203e781e2c714+0x1c8>)
 800f002:	f001 fb17 	bl	8010634 <LOGGER_PrintLine>
 800f006:	2001      	movs	r0, #1
 800f008:	e7e9      	b.n	800efde <d492673eb40b0122449614ddec3203e781e2c714+0xc6>
 800f00a:	f108 0808 	add.w	r8, r8, #8
 800f00e:	45c8      	cmp	r8, r9
 800f010:	d1d2      	bne.n	800efb8 <d492673eb40b0122449614ddec3203e781e2c714+0xa0>
 800f012:	2300      	movs	r3, #0
 800f014:	f204 52b6 	addw	r2, r4, #1462	; 0x5b6
 800f018:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 800f01c:	b1b9      	cbz	r1, 800f04e <d492673eb40b0122449614ddec3203e781e2c714+0x136>
 800f01e:	3301      	adds	r3, #1
 800f020:	2b05      	cmp	r3, #5
 800f022:	d1f9      	bne.n	800f018 <d492673eb40b0122449614ddec3203e781e2c714+0x100>
 800f024:	2100      	movs	r1, #0
 800f026:	460a      	mov	r2, r1
 800f028:	f504 66b7 	add.w	r6, r4, #1464	; 0x5b8
 800f02c:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
 800f030:	1a38      	subs	r0, r7, r0
 800f032:	4288      	cmp	r0, r1
 800f034:	bf88      	it	hi
 800f036:	4613      	movhi	r3, r2
 800f038:	f102 0201 	add.w	r2, r2, #1
 800f03c:	bf88      	it	hi
 800f03e:	4601      	movhi	r1, r0
 800f040:	2a05      	cmp	r2, #5
 800f042:	d1f3      	bne.n	800f02c <d492673eb40b0122449614ddec3203e781e2c714+0x114>
 800f044:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800f048:	2100      	movs	r1, #0
 800f04a:	f8a2 15b6 	strh.w	r1, [r2, #1462]	; 0x5b6
 800f04e:	4921      	ldr	r1, [pc, #132]	; (800f0d4 <d492673eb40b0122449614ddec3203e781e2c714+0x1bc>)
 800f050:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800f054:	4608      	mov	r0, r1
 800f056:	f7ff fe19 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 800f05a:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800f05e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f062:	4438      	add	r0, r7
 800f064:	2201      	movs	r2, #1
 800f066:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800f06a:	f884 25e8 	strb.w	r2, [r4, #1512]	; 0x5e8
 800f06e:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
 800f072:	f8c3 05b8 	str.w	r0, [r3, #1464]	; 0x5b8
 800f076:	f8a3 55b4 	strh.w	r5, [r3, #1460]	; 0x5b4
 800f07a:	f8a3 25b6 	strh.w	r2, [r3, #1462]	; 0x5b6
 800f07e:	2300      	movs	r3, #0
 800f080:	260c      	movs	r6, #12
 800f082:	4618      	mov	r0, r3
 800f084:	fb06 4203 	mla	r2, r6, r3, r4
 800f088:	3301      	adds	r3, #1
 800f08a:	f892 15f0 	ldrb.w	r1, [r2, #1520]	; 0x5f0
 800f08e:	f8c2 05ec 	str.w	r0, [r2, #1516]	; 0x5ec
 800f092:	f360 0107 	bfi	r1, r0, #0, #8
 800f096:	2b06      	cmp	r3, #6
 800f098:	f882 15f0 	strb.w	r1, [r2, #1520]	; 0x5f0
 800f09c:	d1f2      	bne.n	800f084 <d492673eb40b0122449614ddec3203e781e2c714+0x16c>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800f0a4:	2305      	movs	r3, #5
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	4b06      	ldr	r3, [pc, #24]	; (800f0c4 <d492673eb40b0122449614ddec3203e781e2c714+0x1ac>)
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	a902      	add	r1, sp, #8
 800f0ae:	e911 0003 	ldmdb	r1, {r0, r1}
 800f0b2:	4a0c      	ldr	r2, [pc, #48]	; (800f0e4 <d492673eb40b0122449614ddec3203e781e2c714+0x1cc>)
 800f0b4:	f8a4 5646 	strh.w	r5, [r4, #1606]	; 0x646
 800f0b8:	462b      	mov	r3, r5
 800f0ba:	f001 fabb 	bl	8010634 <LOGGER_PrintLine>
 800f0be:	e7a2      	b.n	800f006 <d492673eb40b0122449614ddec3203e781e2c714+0xee>
 800f0c0:	20000040 	.word	0x20000040
 800f0c4:	0801f968 	.word	0x0801f968
 800f0c8:	0801fa5c 	.word	0x0801fa5c
 800f0cc:	01c9c380 	.word	0x01c9c380
 800f0d0:	03938700 	.word	0x03938700
 800f0d4:	00989680 	.word	0x00989680
 800f0d8:	0801fa96 	.word	0x0801fa96
 800f0dc:	0801fab8 	.word	0x0801fab8
 800f0e0:	0801faab 	.word	0x0801faab
 800f0e4:	0801facc 	.word	0x0801facc

0800f0e8 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>:
 800f0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ec:	460d      	mov	r5, r1
 800f0ee:	b08e      	sub	sp, #56	; 0x38
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	b928      	cbnz	r0, 800f100 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x18>
 800f0f4:	4964      	ldr	r1, [pc, #400]	; (800f288 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a0>)
 800f0f6:	4865      	ldr	r0, [pc, #404]	; (800f28c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a4>)
 800f0f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f0fc:	f7f2 fbec 	bl	80018d8 <EXPECT_OnAbortHandler>
 800f100:	b921      	cbnz	r1, 800f10c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x24>
 800f102:	4961      	ldr	r1, [pc, #388]	; (800f288 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a0>)
 800f104:	4862      	ldr	r0, [pc, #392]	; (800f290 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1a8>)
 800f106:	f240 12b9 	movw	r2, #441	; 0x1b9
 800f10a:	e7f7      	b.n	800f0fc <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x14>
 800f10c:	2a20      	cmp	r2, #32
 800f10e:	d94c      	bls.n	800f1aa <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc2>
 800f110:	780b      	ldrb	r3, [r1, #0]
 800f112:	2b02      	cmp	r3, #2
 800f114:	d149      	bne.n	800f1aa <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc2>
 800f116:	4b5f      	ldr	r3, [pc, #380]	; (800f294 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1ac>)
 800f118:	200c      	movs	r0, #12
 800f11a:	681c      	ldr	r4, [r3, #0]
 800f11c:	2300      	movs	r3, #0
 800f11e:	fb00 4103 	mla	r1, r0, r3, r4
 800f122:	f8d1 25ec 	ldr.w	r2, [r1, #1516]	; 0x5ec
 800f126:	f891 15f0 	ldrb.w	r1, [r1, #1520]	; 0x5f0
 800f12a:	430a      	orrs	r2, r1
 800f12c:	d13f      	bne.n	800f1ae <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xc6>
 800f12e:	3301      	adds	r3, #1
 800f130:	2b06      	cmp	r3, #6
 800f132:	d1f4      	bne.n	800f11e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x36>
 800f134:	2303      	movs	r3, #3
 800f136:	9306      	str	r3, [sp, #24]
 800f138:	4b57      	ldr	r3, [pc, #348]	; (800f298 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b0>)
 800f13a:	4a58      	ldr	r2, [pc, #352]	; (800f29c <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b4>)
 800f13c:	9307      	str	r3, [sp, #28]
 800f13e:	4619      	mov	r1, r3
 800f140:	2003      	movs	r0, #3
 800f142:	f001 fa77 	bl	8010634 <LOGGER_PrintLine>
 800f146:	e09a      	b.n	800f27e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x196>
 800f148:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800f14c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f150:	429a      	cmp	r2, r3
 800f152:	d17c      	bne.n	800f24e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800f154:	f10d 031d 	add.w	r3, sp, #29
 800f158:	f204 6236 	addw	r2, r4, #1590	; 0x636
 800f15c:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 800f160:	f853 0b04 	ldr.w	r0, [r3], #4
 800f164:	f842 0b04 	str.w	r0, [r2], #4
 800f168:	428b      	cmp	r3, r1
 800f16a:	d1f9      	bne.n	800f160 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x78>
 800f16c:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800f170:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f174:	250c      	movs	r5, #12
 800f176:	f8b3 35b4 	ldrh.w	r3, [r3, #1460]	; 0x5b4
 800f17a:	f8a4 3646 	strh.w	r3, [r4, #1606]	; 0x646
 800f17e:	2301      	movs	r3, #1
 800f180:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
 800f184:	2300      	movs	r3, #0
 800f186:	461a      	mov	r2, r3
 800f188:	fb05 4103 	mla	r1, r5, r3, r4
 800f18c:	3301      	adds	r3, #1
 800f18e:	f891 05f0 	ldrb.w	r0, [r1, #1520]	; 0x5f0
 800f192:	f8c1 25ec 	str.w	r2, [r1, #1516]	; 0x5ec
 800f196:	f362 0007 	bfi	r0, r2, #0, #8
 800f19a:	2b06      	cmp	r3, #6
 800f19c:	f881 05f0 	strb.w	r0, [r1, #1520]	; 0x5f0
 800f1a0:	d1f2      	bne.n	800f188 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xa0>
 800f1a2:	f884 25e8 	strb.w	r2, [r4, #1512]	; 0x5e8
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	e067      	b.n	800f27a <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x192>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e068      	b.n	800f280 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x198>
 800f1ae:	f204 58ec 	addw	r8, r4, #1516	; 0x5ec
 800f1b2:	2600      	movs	r6, #0
 800f1b4:	f04f 090c 	mov.w	r9, #12
 800f1b8:	fb09 4206 	mla	r2, r9, r6, r4
 800f1bc:	f8d2 35ec 	ldr.w	r3, [r2, #1516]	; 0x5ec
 800f1c0:	f892 25f0 	ldrb.w	r2, [r2, #1520]	; 0x5f0
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	d042      	beq.n	800f24e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800f1c8:	4641      	mov	r1, r8
 800f1ca:	f10d 0012 	add.w	r0, sp, #18
 800f1ce:	f7ff fd70 	bl	800ecb2 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	f8cd 3009 	str.w	r3, [sp, #9]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8cd 300d 	str.w	r3, [sp, #13]
 800f1de:	aa06      	add	r2, sp, #24
 800f1e0:	232f      	movs	r3, #47	; 0x2f
 800f1e2:	f88d 3008 	strb.w	r3, [sp, #8]
 800f1e6:	f88d 3011 	strb.w	r3, [sp, #17]
 800f1ea:	f88d 3017 	strb.w	r3, [sp, #23]
 800f1ee:	f105 0e21 	add.w	lr, r5, #33	; 0x21
 800f1f2:	1c6b      	adds	r3, r5, #1
 800f1f4:	4692      	mov	sl, r2
 800f1f6:	6818      	ldr	r0, [r3, #0]
 800f1f8:	6859      	ldr	r1, [r3, #4]
 800f1fa:	4694      	mov	ip, r2
 800f1fc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f200:	3308      	adds	r3, #8
 800f202:	4573      	cmp	r3, lr
 800f204:	4662      	mov	r2, ip
 800f206:	d1f6      	bne.n	800f1f6 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x10e>
 800f208:	ab02      	add	r3, sp, #8
 800f20a:	f204 624c 	addw	r2, r4, #1612	; 0x64c
 800f20e:	2120      	movs	r1, #32
 800f210:	4650      	mov	r0, sl
 800f212:	f00b ff4b 	bl	801b0ac <7bd9c690a28739e5b569f505b868904b38eb748d>
 800f216:	aa0c      	add	r2, sp, #48	; 0x30
 800f218:	2300      	movs	r3, #0
 800f21a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f21e:	292f      	cmp	r1, #47	; 0x2f
 800f220:	d115      	bne.n	800f24e <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x166>
 800f222:	3301      	adds	r3, #1
 800f224:	2b07      	cmp	r3, #7
 800f226:	d1f8      	bne.n	800f21a <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x132>
 800f228:	4651      	mov	r1, sl
 800f22a:	4668      	mov	r0, sp
 800f22c:	f7ff fd41 	bl	800ecb2 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800f230:	230c      	movs	r3, #12
 800f232:	fb03 4306 	mla	r3, r3, r6, r4
 800f236:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f23a:	f8d3 15ec 	ldr.w	r1, [r3, #1516]	; 0x5ec
 800f23e:	9800      	ldr	r0, [sp, #0]
 800f240:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 800f244:	429a      	cmp	r2, r3
 800f246:	bf08      	it	eq
 800f248:	4288      	cmpeq	r0, r1
 800f24a:	f43f af7d 	beq.w	800f148 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x60>
 800f24e:	3601      	adds	r6, #1
 800f250:	2e06      	cmp	r6, #6
 800f252:	f108 080c 	add.w	r8, r8, #12
 800f256:	d1af      	bne.n	800f1b8 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0xd0>
 800f258:	2303      	movs	r3, #3
 800f25a:	9302      	str	r3, [sp, #8]
 800f25c:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b0>)
 800f25e:	4a10      	ldr	r2, [pc, #64]	; (800f2a0 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa+0x1b8>)
 800f260:	9303      	str	r3, [sp, #12]
 800f262:	4619      	mov	r1, r3
 800f264:	2003      	movs	r0, #3
 800f266:	f001 f9e5 	bl	8010634 <LOGGER_PrintLine>
 800f26a:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
 800f26e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800f272:	2201      	movs	r2, #1
 800f274:	f883 25b7 	strb.w	r2, [r3, #1463]	; 0x5b7
 800f278:	2305      	movs	r3, #5
 800f27a:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 800f27e:	2001      	movs	r0, #1
 800f280:	b00e      	add	sp, #56	; 0x38
 800f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f286:	bf00      	nop
 800f288:	0801f8dc 	.word	0x0801f8dc
 800f28c:	0801fadf 	.word	0x0801fadf
 800f290:	0801faf2 	.word	0x0801faf2
 800f294:	20000040 	.word	0x20000040
 800f298:	0801f968 	.word	0x0801f968
 800f29c:	0801fb37 	.word	0x0801fb37
 800f2a0:	0801fb04 	.word	0x0801fb04

0800f2a4 <ce7cfafa044c34a88028e8cf12995b3096f9f973>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	460e      	mov	r6, r1
 800f2aa:	b08e      	sub	sp, #56	; 0x38
 800f2ac:	4615      	mov	r5, r2
 800f2ae:	4607      	mov	r7, r0
 800f2b0:	b928      	cbnz	r0, 800f2be <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x1a>
 800f2b2:	4942      	ldr	r1, [pc, #264]	; (800f3bc <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800f2b4:	4842      	ldr	r0, [pc, #264]	; (800f3c0 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x11c>)
 800f2b6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f2ba:	f7f2 fb0d 	bl	80018d8 <EXPECT_OnAbortHandler>
 800f2be:	b922      	cbnz	r2, 800f2ca <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x26>
 800f2c0:	493e      	ldr	r1, [pc, #248]	; (800f3bc <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800f2c2:	4840      	ldr	r0, [pc, #256]	; (800f3c4 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x120>)
 800f2c4:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f2c8:	e7f7      	b.n	800f2ba <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x16>
 800f2ca:	b921      	cbnz	r1, 800f2d6 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x32>
 800f2cc:	493b      	ldr	r1, [pc, #236]	; (800f3bc <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x118>)
 800f2ce:	483e      	ldr	r0, [pc, #248]	; (800f3c8 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x124>)
 800f2d0:	f240 12e5 	movw	r2, #485	; 0x1e5
 800f2d4:	e7f1      	b.n	800f2ba <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x16>
 800f2d6:	2b20      	cmp	r3, #32
 800f2d8:	d96d      	bls.n	800f3b6 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x112>
 800f2da:	4b3c      	ldr	r3, [pc, #240]	; (800f3cc <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x128>)
 800f2dc:	f10d 0015 	add.w	r0, sp, #21
 800f2e0:	f8d3 8000 	ldr.w	r8, [r3]
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	2400      	movs	r4, #0
 800f2e8:	f88d 3014 	strb.w	r3, [sp, #20]
 800f2ec:	f7ff fce1 	bl	800ecb2 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	f8cd 301a 	str.w	r3, [sp, #26]
 800f2f6:	f04f 31ff 	mov.w	r1, #4294967295
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800f300:	4620      	mov	r0, r4
 800f302:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800f306:	f8cd 301e 	str.w	r3, [sp, #30]
 800f30a:	f7ff fc9d 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 800f30e:	f642 732f 	movw	r3, #12079	; 0x2f2f
 800f312:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f316:	f04f 332f 	mov.w	r3, #791621423	; 0x2f2f2f2f
 800f31a:	930c      	str	r3, [sp, #48]	; 0x30
 800f31c:	232f      	movs	r3, #47	; 0x2f
 800f31e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800f322:	4601      	mov	r1, r0
 800f324:	4623      	mov	r3, r4
 800f326:	f8cd 0022 	str.w	r0, [sp, #34]	; 0x22
 800f32a:	240c      	movs	r4, #12
 800f32c:	fb04 8003 	mla	r0, r4, r3, r8
 800f330:	f8d0 25ec 	ldr.w	r2, [r0, #1516]	; 0x5ec
 800f334:	f890 05f0 	ldrb.w	r0, [r0, #1520]	; 0x5f0
 800f338:	4302      	orrs	r2, r0
 800f33a:	d003      	beq.n	800f344 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0xa0>
 800f33c:	3301      	adds	r3, #1
 800f33e:	2b06      	cmp	r3, #6
 800f340:	d1f4      	bne.n	800f32c <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x88>
 800f342:	2300      	movs	r3, #0
 800f344:	220c      	movs	r2, #12
 800f346:	fb02 8303 	mla	r3, r2, r3, r8
 800f34a:	6830      	ldr	r0, [r6, #0]
 800f34c:	f8c3 05ec 	str.w	r0, [r3, #1516]	; 0x5ec
 800f350:	7932      	ldrb	r2, [r6, #4]
 800f352:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 800f356:	f8c3 15f4 	str.w	r1, [r3, #1524]	; 0x5f4
 800f35a:	f10d 000e 	add.w	r0, sp, #14
 800f35e:	4631      	mov	r1, r6
 800f360:	f7ff fca7 	bl	800ecb2 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 800f364:	f8dd 301a 	ldr.w	r3, [sp, #26]
 800f368:	f8cd 3005 	str.w	r3, [sp, #5]
 800f36c:	f8dd 301e 	ldr.w	r3, [sp, #30]
 800f370:	f8cd 3009 	str.w	r3, [sp, #9]
 800f374:	232f      	movs	r3, #47	; 0x2f
 800f376:	f88d 3004 	strb.w	r3, [sp, #4]
 800f37a:	f88d 300d 	strb.w	r3, [sp, #13]
 800f37e:	f88d 3013 	strb.w	r3, [sp, #19]
 800f382:	f208 624c 	addw	r2, r8, #1612	; 0x64c
 800f386:	ab01      	add	r3, sp, #4
 800f388:	2120      	movs	r1, #32
 800f38a:	f10d 0015 	add.w	r0, sp, #21
 800f38e:	f00b fe67 	bl	801b060 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9>
 800f392:	ac05      	add	r4, sp, #20
 800f394:	462a      	mov	r2, r5
 800f396:	ad0d      	add	r5, sp, #52	; 0x34
 800f398:	4623      	mov	r3, r4
 800f39a:	cb03      	ldmia	r3!, {r0, r1}
 800f39c:	42ab      	cmp	r3, r5
 800f39e:	6010      	str	r0, [r2, #0]
 800f3a0:	6051      	str	r1, [r2, #4]
 800f3a2:	461c      	mov	r4, r3
 800f3a4:	f102 0208 	add.w	r2, r2, #8
 800f3a8:	d1f6      	bne.n	800f398 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0xf4>
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	7013      	strb	r3, [r2, #0]
 800f3ae:	2001      	movs	r0, #1
 800f3b0:	b00e      	add	sp, #56	; 0x38
 800f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	e7fa      	b.n	800f3b0 <ce7cfafa044c34a88028e8cf12995b3096f9f973+0x10c>
 800f3ba:	bf00      	nop
 800f3bc:	0801f8dc 	.word	0x0801f8dc
 800f3c0:	0801fadf 	.word	0x0801fadf
 800f3c4:	0801fb68 	.word	0x0801fb68
 800f3c8:	0801fb7c 	.word	0x0801fb7c
 800f3cc:	20000040 	.word	0x20000040

0800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 800f3d0:	3901      	subs	r1, #1
 800f3d2:	4402      	add	r2, r0
 800f3d4:	4282      	cmp	r2, r0
 800f3d6:	d100      	bne.n	800f3da <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 800f3d8:	4770      	bx	lr
 800f3da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f3de:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800f3e2:	e7f7      	b.n	800f3d4 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>

0800f3e4 <62d501c077e77071b13b9590edfc05c0693f6990>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	b09a      	sub	sp, #104	; 0x68
 800f3e8:	a90f      	add	r1, sp, #60	; 0x3c
 800f3ea:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800f3ee:	2a29      	cmp	r2, #41	; 0x29
 800f3f0:	d00c      	beq.n	800f40c <62d501c077e77071b13b9590edfc05c0693f6990+0x28>
 800f3f2:	2303      	movs	r3, #3
 800f3f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3f6:	4b68      	ldr	r3, [pc, #416]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f3f8:	9310      	str	r3, [sp, #64]	; 0x40
 800f3fa:	921e      	str	r2, [sp, #120]	; 0x78
 800f3fc:	c903      	ldmia	r1, {r0, r1}
 800f3fe:	4a67      	ldr	r2, [pc, #412]	; (800f59c <62d501c077e77071b13b9590edfc05c0693f6990+0x1b8>)
 800f400:	2329      	movs	r3, #41	; 0x29
 800f402:	b01a      	add	sp, #104	; 0x68
 800f404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f408:	f001 b914 	b.w	8010634 <LOGGER_PrintLine>
 800f40c:	460a      	mov	r2, r1
 800f40e:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800f412:	6818      	ldr	r0, [r3, #0]
 800f414:	6859      	ldr	r1, [r3, #4]
 800f416:	4614      	mov	r4, r2
 800f418:	c403      	stmia	r4!, {r0, r1}
 800f41a:	3308      	adds	r3, #8
 800f41c:	42ab      	cmp	r3, r5
 800f41e:	4622      	mov	r2, r4
 800f420:	d1f7      	bne.n	800f412 <62d501c077e77071b13b9590edfc05c0693f6990+0x2e>
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	7023      	strb	r3, [r4, #0]
 800f426:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d00b      	beq.n	800f446 <62d501c077e77071b13b9590edfc05c0693f6990+0x62>
 800f42e:	2303      	movs	r3, #3
 800f430:	9306      	str	r3, [sp, #24]
 800f432:	4b59      	ldr	r3, [pc, #356]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f434:	4a5a      	ldr	r2, [pc, #360]	; (800f5a0 <62d501c077e77071b13b9590edfc05c0693f6990+0x1bc>)
 800f436:	9307      	str	r3, [sp, #28]
 800f438:	4619      	mov	r1, r3
 800f43a:	2003      	movs	r0, #3
 800f43c:	b01a      	add	sp, #104	; 0x68
 800f43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f442:	f001 b8f7 	b.w	8010634 <LOGGER_PrintLine>
 800f446:	4b57      	ldr	r3, [pc, #348]	; (800f5a4 <62d501c077e77071b13b9590edfc05c0693f6990+0x1c0>)
 800f448:	681e      	ldr	r6, [r3, #0]
 800f44a:	2400      	movs	r4, #0
 800f44c:	f506 65cc 	add.w	r5, r6, #1632	; 0x660
 800f450:	7b2b      	ldrb	r3, [r5, #12]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d044      	beq.n	800f4e0 <62d501c077e77071b13b9590edfc05c0693f6990+0xfc>
 800f456:	2208      	movs	r2, #8
 800f458:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800f45c:	4628      	mov	r0, r5
 800f45e:	f00c fd79 	bl	801bf54 <memcmp>
 800f462:	2800      	cmp	r0, #0
 800f464:	d13c      	bne.n	800f4e0 <62d501c077e77071b13b9590edfc05c0693f6990+0xfc>
 800f466:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800f46a:	f886 066c 	strb.w	r0, [r6, #1644]	; 0x66c
 800f46e:	f10d 0345 	add.w	r3, sp, #69	; 0x45
 800f472:	f10d 0219 	add.w	r2, sp, #25
 800f476:	f10d 0165 	add.w	r1, sp, #101	; 0x65
 800f47a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f47e:	f842 0b04 	str.w	r0, [r2], #4
 800f482:	428b      	cmp	r3, r1
 800f484:	d1f9      	bne.n	800f47a <62d501c077e77071b13b9590edfc05c0693f6990+0x96>
 800f486:	2090      	movs	r0, #144	; 0x90
 800f488:	f7fe fbf6 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 800f48c:	4604      	mov	r4, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	d135      	bne.n	800f4fe <62d501c077e77071b13b9590edfc05c0693f6990+0x11a>
 800f492:	2303      	movs	r3, #3
 800f494:	9304      	str	r3, [sp, #16]
 800f496:	4b40      	ldr	r3, [pc, #256]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f498:	4a43      	ldr	r2, [pc, #268]	; (800f5a8 <62d501c077e77071b13b9590edfc05c0693f6990+0x1c4>)
 800f49a:	9305      	str	r3, [sp, #20]
 800f49c:	4619      	mov	r1, r3
 800f49e:	2003      	movs	r0, #3
 800f4a0:	f001 f8c8 	bl	8010634 <LOGGER_PrintLine>
 800f4a4:	f001 f8a0 	bl	80105e8 <LOGGER_StartSection>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d073      	beq.n	800f594 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b0>
 800f4ac:	2305      	movs	r3, #5
 800f4ae:	9306      	str	r3, [sp, #24]
 800f4b0:	4b39      	ldr	r3, [pc, #228]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f4b2:	9307      	str	r3, [sp, #28]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	2005      	movs	r0, #5
 800f4b8:	f001 f89e 	bl	80105f8 <LOGGER_PrintHeader>
 800f4bc:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800f4c0:	a804      	add	r0, sp, #16
 800f4c2:	2208      	movs	r2, #8
 800f4c4:	f7ff ff84 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4cc:	4837      	ldr	r0, [pc, #220]	; (800f5ac <62d501c077e77071b13b9590edfc05c0693f6990+0x1c8>)
 800f4ce:	f001 f879 	bl	80105c4 <LOGGER_Print>
 800f4d2:	f001 f86f 	bl	80105b4 <LOGGER_PrintNL>
 800f4d6:	b01a      	add	sp, #104	; 0x68
 800f4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4dc:	f001 b88a 	b.w	80105f4 <LOGGER_EndSection>
 800f4e0:	3401      	adds	r4, #1
 800f4e2:	2c0f      	cmp	r4, #15
 800f4e4:	f105 0510 	add.w	r5, r5, #16
 800f4e8:	d1b2      	bne.n	800f450 <62d501c077e77071b13b9590edfc05c0693f6990+0x6c>
 800f4ea:	2304      	movs	r3, #4
 800f4ec:	9306      	str	r3, [sp, #24]
 800f4ee:	4b2a      	ldr	r3, [pc, #168]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f4f0:	4a2f      	ldr	r2, [pc, #188]	; (800f5b0 <62d501c077e77071b13b9590edfc05c0693f6990+0x1cc>)
 800f4f2:	9307      	str	r3, [sp, #28]
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	2004      	movs	r0, #4
 800f4f8:	f001 f89c 	bl	8010634 <LOGGER_PrintLine>
 800f4fc:	e7b7      	b.n	800f46e <62d501c077e77071b13b9590edfc05c0693f6990+0x8a>
 800f4fe:	f249 0390 	movw	r3, #37008	; 0x9090
 800f502:	8003      	strh	r3, [r0, #0]
 800f504:	2121      	movs	r1, #33	; 0x21
 800f506:	f00b fc95 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 800f50a:	b960      	cbnz	r0, 800f526 <62d501c077e77071b13b9590edfc05c0693f6990+0x142>
 800f50c:	2303      	movs	r3, #3
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	4b21      	ldr	r3, [pc, #132]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f512:	4a28      	ldr	r2, [pc, #160]	; (800f5b4 <62d501c077e77071b13b9590edfc05c0693f6990+0x1d0>)
 800f514:	9305      	str	r3, [sp, #20]
 800f516:	4619      	mov	r1, r3
 800f518:	2003      	movs	r0, #3
 800f51a:	f001 f88b 	bl	8010634 <LOGGER_PrintLine>
 800f51e:	4620      	mov	r0, r4
 800f520:	f7fe fc68 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 800f524:	e7be      	b.n	800f4a4 <62d501c077e77071b13b9590edfc05c0693f6990+0xc0>
 800f526:	2302      	movs	r3, #2
 800f528:	f88d 3018 	strb.w	r3, [sp, #24]
 800f52c:	6863      	ldr	r3, [r4, #4]
 800f52e:	ad06      	add	r5, sp, #24
 800f530:	ae0e      	add	r6, sp, #56	; 0x38
 800f532:	462a      	mov	r2, r5
 800f534:	ca03      	ldmia	r2!, {r0, r1}
 800f536:	42b2      	cmp	r2, r6
 800f538:	6018      	str	r0, [r3, #0]
 800f53a:	6059      	str	r1, [r3, #4]
 800f53c:	4615      	mov	r5, r2
 800f53e:	f103 0308 	add.w	r3, r3, #8
 800f542:	d1f6      	bne.n	800f532 <62d501c077e77071b13b9590edfc05c0693f6990+0x14e>
 800f544:	7812      	ldrb	r2, [r2, #0]
 800f546:	701a      	strb	r2, [r3, #0]
 800f548:	2302      	movs	r3, #2
 800f54a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f54e:	f8dd 303d 	ldr.w	r3, [sp, #61]	; 0x3d
 800f552:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 800f556:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
 800f55a:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
 800f55e:	2300      	movs	r3, #0
 800f560:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800f564:	4620      	mov	r0, r4
 800f566:	f006 f821 	bl	80155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>
 800f56a:	2208      	movs	r2, #8
 800f56c:	eb0d 0002 	add.w	r0, sp, r2
 800f570:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 800f574:	f7ff ff2c 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f578:	2305      	movs	r3, #5
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	4b06      	ldr	r3, [pc, #24]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f57e:	9305      	str	r3, [sp, #20]
 800f580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f584:	4904      	ldr	r1, [pc, #16]	; (800f598 <62d501c077e77071b13b9590edfc05c0693f6990+0x1b4>)
 800f586:	e9cd 2300 	strd	r2, r3, [sp]
 800f58a:	2005      	movs	r0, #5
 800f58c:	4a0a      	ldr	r2, [pc, #40]	; (800f5b8 <62d501c077e77071b13b9590edfc05c0693f6990+0x1d4>)
 800f58e:	f001 f851 	bl	8010634 <LOGGER_PrintLine>
 800f592:	e787      	b.n	800f4a4 <62d501c077e77071b13b9590edfc05c0693f6990+0xc0>
 800f594:	b01a      	add	sp, #104	; 0x68
 800f596:	bd70      	pop	{r4, r5, r6, pc}
 800f598:	0801f968 	.word	0x0801f968
 800f59c:	0801fb8d 	.word	0x0801fb8d
 800f5a0:	0801fbc3 	.word	0x0801fbc3
 800f5a4:	20000040 	.word	0x20000040
 800f5a8:	0801fc42 	.word	0x0801fc42
 800f5ac:	0801fca4 	.word	0x0801fca4
 800f5b0:	0801fbe1 	.word	0x0801fbe1
 800f5b4:	0801fc58 	.word	0x0801fc58
 800f5b8:	0801fc81 	.word	0x0801fc81

0800f5bc <781f8340fa417dd87327132209f6d0b889d0ff2a>:
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	4b0a      	ldr	r3, [pc, #40]	; (800f5e8 <781f8340fa417dd87327132209f6d0b889d0ff2a+0x2c>)
 800f5c0:	681c      	ldr	r4, [r3, #0]
 800f5c2:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800f5c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f00c fceb 	bl	801bfa8 <memset>
 800f5d2:	f24f 02b0 	movw	r2, #61616	; 0xf0b0
 800f5d6:	f8a4 2750 	strh.w	r2, [r4, #1872]	; 0x750
 800f5da:	4a04      	ldr	r2, [pc, #16]	; (800f5ec <781f8340fa417dd87327132209f6d0b889d0ff2a+0x30>)
 800f5dc:	f8c4 2758 	str.w	r2, [r4, #1880]	; 0x758
 800f5e0:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
 800f5e4:	bd10      	pop	{r4, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20000040 	.word	0x20000040
 800f5ec:	0800f3e5 	.word	0x0800f3e5

0800f5f0 <7d1d6e9032260bf29a701dae9a5813b859a1535c>:
 800f5f0:	4b02      	ldr	r3, [pc, #8]	; (800f5fc <7d1d6e9032260bf29a701dae9a5813b859a1535c+0xc>)
 800f5f2:	6818      	ldr	r0, [r3, #0]
 800f5f4:	f500 60ea 	add.w	r0, r0, #1872	; 0x750
 800f5f8:	f00a be98 	b.w	801a32c <76cd6211f2085e3d946bd747f2187c2e80301a64>
 800f5fc:	20000040 	.word	0x20000040

0800f600 <b3455a2b4a7c58716d32ab9ee32d439bee656865>:
 800f600:	4b02      	ldr	r3, [pc, #8]	; (800f60c <b3455a2b4a7c58716d32ab9ee32d439bee656865+0xc>)
 800f602:	6818      	ldr	r0, [r3, #0]
 800f604:	f500 60ea 	add.w	r0, r0, #1872	; 0x750
 800f608:	f00a beae 	b.w	801a368 <008a3a43d97272e7b0f59f361a8c8969876e60dd>
 800f60c:	20000040 	.word	0x20000040

0800f610 <27342039fe058efec7af5218a4abe449221e7bb4>:
 800f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	b099      	sub	sp, #100	; 0x64
 800f616:	2b21      	cmp	r3, #33	; 0x21
 800f618:	4604      	mov	r4, r0
 800f61a:	9103      	str	r1, [sp, #12]
 800f61c:	4615      	mov	r5, r2
 800f61e:	f040 80d8 	bne.w	800f7d2 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800f622:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800f7e4 <27342039fe058efec7af5218a4abe449221e7bb4+0x1d4>
 800f626:	f8da 6000 	ldr.w	r6, [sl]
 800f62a:	f7ff faa1 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 800f62e:	f506 6bcc 	add.w	fp, r6, #1632	; 0x660
 800f632:	4680      	mov	r8, r0
 800f634:	465f      	mov	r7, fp
 800f636:	f506 69ea 	add.w	r9, r6, #1872	; 0x750
 800f63a:	7b3a      	ldrb	r2, [r7, #12]
 800f63c:	b182      	cbz	r2, 800f660 <27342039fe058efec7af5218a4abe449221e7bb4+0x50>
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	4b69      	ldr	r3, [pc, #420]	; (800f7e8 <27342039fe058efec7af5218a4abe449221e7bb4+0x1d8>)
 800f642:	eba8 0202 	sub.w	r2, r8, r2
 800f646:	429a      	cmp	r2, r3
 800f648:	d96f      	bls.n	800f72a <27342039fe058efec7af5218a4abe449221e7bb4+0x11a>
 800f64a:	4b68      	ldr	r3, [pc, #416]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	733a      	strb	r2, [r7, #12]
 800f650:	2205      	movs	r2, #5
 800f652:	920c      	str	r2, [sp, #48]	; 0x30
 800f654:	4619      	mov	r1, r3
 800f656:	4a66      	ldr	r2, [pc, #408]	; (800f7f0 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e0>)
 800f658:	930d      	str	r3, [sp, #52]	; 0x34
 800f65a:	2005      	movs	r0, #5
 800f65c:	f000 ffea 	bl	8010634 <LOGGER_PrintLine>
 800f660:	3710      	adds	r7, #16
 800f662:	454f      	cmp	r7, r9
 800f664:	d1e9      	bne.n	800f63a <27342039fe058efec7af5218a4abe449221e7bb4+0x2a>
 800f666:	2200      	movs	r2, #0
 800f668:	f206 606c 	addw	r0, r6, #1644	; 0x66c
 800f66c:	0111      	lsls	r1, r2, #4
 800f66e:	5c47      	ldrb	r7, [r0, r1]
 800f670:	2f00      	cmp	r7, #0
 800f672:	f040 8087 	bne.w	800f784 <27342039fe058efec7af5218a4abe449221e7bb4+0x174>
 800f676:	440e      	add	r6, r1
 800f678:	2201      	movs	r2, #1
 800f67a:	f8c6 8668 	str.w	r8, [r6, #1640]	; 0x668
 800f67e:	f886 266c 	strb.w	r2, [r6, #1644]	; 0x66c
 800f682:	6822      	ldr	r2, [r4, #0]
 800f684:	f84b 2001 	str.w	r2, [fp, r1]
 800f688:	eb0b 0601 	add.w	r6, fp, r1
 800f68c:	6862      	ldr	r2, [r4, #4]
 800f68e:	6072      	str	r2, [r6, #4]
 800f690:	f000 ffaa 	bl	80105e8 <LOGGER_StartSection>
 800f694:	b1a8      	cbz	r0, 800f6c2 <27342039fe058efec7af5218a4abe449221e7bb4+0xb2>
 800f696:	2305      	movs	r3, #5
 800f698:	930c      	str	r3, [sp, #48]	; 0x30
 800f69a:	4b54      	ldr	r3, [pc, #336]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f69c:	930d      	str	r3, [sp, #52]	; 0x34
 800f69e:	4619      	mov	r1, r3
 800f6a0:	2005      	movs	r0, #5
 800f6a2:	f000 ffa9 	bl	80105f8 <LOGGER_PrintHeader>
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	2208      	movs	r2, #8
 800f6aa:	a808      	add	r0, sp, #32
 800f6ac:	f7ff fe90 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f6b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f6b4:	484f      	ldr	r0, [pc, #316]	; (800f7f4 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e4>)
 800f6b6:	f000 ff85 	bl	80105c4 <LOGGER_Print>
 800f6ba:	f000 ff7b 	bl	80105b4 <LOGGER_PrintNL>
 800f6be:	f000 ff99 	bl	80105f4 <LOGGER_EndSection>
 800f6c2:	782b      	ldrb	r3, [r5, #0]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	f040 8084 	bne.w	800f7d2 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 800f6d0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800f6d4:	2205      	movs	r2, #5
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	9903      	ldr	r1, [sp, #12]
 800f6da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800f6de:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800f6e2:	f7ff fe75 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
 800f6ec:	6863      	ldr	r3, [r4, #4]
 800f6ee:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
 800f6f2:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
 800f6f6:	1c6b      	adds	r3, r5, #1
 800f6f8:	3521      	adds	r5, #33	; 0x21
 800f6fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800f6fe:	f842 1b04 	str.w	r1, [r2], #4
 800f702:	42ab      	cmp	r3, r5
 800f704:	d1f9      	bne.n	800f6fa <27342039fe058efec7af5218a4abe449221e7bb4+0xea>
 800f706:	a808      	add	r0, sp, #32
 800f708:	f8da 6000 	ldr.w	r6, [sl]
 800f70c:	4d37      	ldr	r5, [pc, #220]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f70e:	f009 fc79 	bl	8019004 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 800f712:	ac06      	add	r4, sp, #24
 800f714:	2800      	cmp	r0, #0
 800f716:	d13f      	bne.n	800f798 <27342039fe058efec7af5218a4abe449221e7bb4+0x188>
 800f718:	2303      	movs	r3, #3
 800f71a:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800f71e:	4a36      	ldr	r2, [pc, #216]	; (800f7f8 <27342039fe058efec7af5218a4abe449221e7bb4+0x1e8>)
 800f720:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f724:	f000 ff86 	bl	8010634 <LOGGER_PrintLine>
 800f728:	e053      	b.n	800f7d2 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800f72a:	2208      	movs	r2, #8
 800f72c:	4621      	mov	r1, r4
 800f72e:	4638      	mov	r0, r7
 800f730:	f00c fc10 	bl	801bf54 <memcmp>
 800f734:	2800      	cmp	r0, #0
 800f736:	d193      	bne.n	800f660 <27342039fe058efec7af5218a4abe449221e7bb4+0x50>
 800f738:	2303      	movs	r3, #3
 800f73a:	930c      	str	r3, [sp, #48]	; 0x30
 800f73c:	4a2f      	ldr	r2, [pc, #188]	; (800f7fc <27342039fe058efec7af5218a4abe449221e7bb4+0x1ec>)
 800f73e:	4b2b      	ldr	r3, [pc, #172]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f740:	930d      	str	r3, [sp, #52]	; 0x34
 800f742:	4619      	mov	r1, r3
 800f744:	2003      	movs	r0, #3
 800f746:	f000 ff75 	bl	8010634 <LOGGER_PrintLine>
 800f74a:	f000 ff4d 	bl	80105e8 <LOGGER_StartSection>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d03f      	beq.n	800f7d2 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c2>
 800f752:	2305      	movs	r3, #5
 800f754:	930c      	str	r3, [sp, #48]	; 0x30
 800f756:	4b25      	ldr	r3, [pc, #148]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f758:	930d      	str	r3, [sp, #52]	; 0x34
 800f75a:	4619      	mov	r1, r3
 800f75c:	2005      	movs	r0, #5
 800f75e:	f000 ff4b 	bl	80105f8 <LOGGER_PrintHeader>
 800f762:	4621      	mov	r1, r4
 800f764:	a808      	add	r0, sp, #32
 800f766:	2208      	movs	r2, #8
 800f768:	f7ff fe32 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f76c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f770:	4823      	ldr	r0, [pc, #140]	; (800f800 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f0>)
 800f772:	f000 ff27 	bl	80105c4 <LOGGER_Print>
 800f776:	f000 ff1d 	bl	80105b4 <LOGGER_PrintNL>
 800f77a:	b019      	add	sp, #100	; 0x64
 800f77c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f780:	f000 bf38 	b.w	80105f4 <LOGGER_EndSection>
 800f784:	3201      	adds	r2, #1
 800f786:	2a0f      	cmp	r2, #15
 800f788:	f47f af70 	bne.w	800f66c <27342039fe058efec7af5218a4abe449221e7bb4+0x5c>
 800f78c:	2303      	movs	r3, #3
 800f78e:	930c      	str	r3, [sp, #48]	; 0x30
 800f790:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <27342039fe058efec7af5218a4abe449221e7bb4+0x1dc>)
 800f792:	4a1c      	ldr	r2, [pc, #112]	; (800f804 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f4>)
 800f794:	930d      	str	r3, [sp, #52]	; 0x34
 800f796:	e7d4      	b.n	800f742 <27342039fe058efec7af5218a4abe449221e7bb4+0x132>
 800f798:	232e      	movs	r3, #46	; 0x2e
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	f24f 02b0 	movw	r2, #61616	; 0xf0b0
 800f7a0:	ab0c      	add	r3, sp, #48	; 0x30
 800f7a2:	f506 61ea 	add.w	r1, r6, #1872	; 0x750
 800f7a6:	a808      	add	r0, sp, #32
 800f7a8:	f00a fdf0 	bl	801a38c <09c9c31144d89e446fc56189171072a9b46992fd>
 800f7ac:	b9a0      	cbnz	r0, 800f7d8 <27342039fe058efec7af5218a4abe449221e7bb4+0x1c8>
 800f7ae:	2208      	movs	r2, #8
 800f7b0:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800f7b4:	a804      	add	r0, sp, #16
 800f7b6:	f7ff fe0b 	bl	800f3d0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 800f7ba:	2305      	movs	r3, #5
 800f7bc:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800f7c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7c4:	e9cd 2300 	strd	r2, r3, [sp]
 800f7c8:	4a0f      	ldr	r2, [pc, #60]	; (800f808 <27342039fe058efec7af5218a4abe449221e7bb4+0x1f8>)
 800f7ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f7ce:	f000 ff31 	bl	8010634 <LOGGER_PrintLine>
 800f7d2:	b019      	add	sp, #100	; 0x64
 800f7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d8:	2303      	movs	r3, #3
 800f7da:	e9cd 3506 	strd	r3, r5, [sp, #24]
 800f7de:	4a0b      	ldr	r2, [pc, #44]	; (800f80c <27342039fe058efec7af5218a4abe449221e7bb4+0x1fc>)
 800f7e0:	e79e      	b.n	800f720 <27342039fe058efec7af5218a4abe449221e7bb4+0x110>
 800f7e2:	bf00      	nop
 800f7e4:	20000040 	.word	0x20000040
 800f7e8:	004c4b40 	.word	0x004c4b40
 800f7ec:	0801f968 	.word	0x0801f968
 800f7f0:	0801fd0c 	.word	0x0801fd0c
 800f7f4:	0801fd67 	.word	0x0801fd67
 800f7f8:	0801fcbb 	.word	0x0801fcbb
 800f7fc:	0801fd1c 	.word	0x0801fd1c
 800f800:	0801fde9 	.word	0x0801fde9
 800f804:	0801fd7b 	.word	0x0801fd7b
 800f808:	0801fdc6 	.word	0x0801fdc6
 800f80c:	0801fcf3 	.word	0x0801fcf3

0800f810 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505>:
 800f810:	b508      	push	{r3, lr}
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <bf6cd42aa4b8da9fc5f5650bf0a6c717df5ed505+0x18>)
 800f814:	6818      	ldr	r0, [r3, #0]
 800f816:	f44f 724a 	mov.w	r2, #808	; 0x328
 800f81a:	2100      	movs	r1, #0
 800f81c:	f200 7064 	addw	r0, r0, #1892	; 0x764
 800f820:	f00c fbc2 	bl	801bfa8 <memset>
 800f824:	bd08      	pop	{r3, pc}
 800f826:	bf00      	nop
 800f828:	20000040 	.word	0x20000040

0800f82c <ef153328aa1040603d831896041b65ee1135a0ee>:
 800f82c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f830:	4b19      	ldr	r3, [pc, #100]	; (800f898 <ef153328aa1040603d831896041b65ee1135a0ee+0x6c>)
 800f832:	681d      	ldr	r5, [r3, #0]
 800f834:	2464      	movs	r4, #100	; 0x64
 800f836:	2713      	movs	r7, #19
 800f838:	f8d5 3a84 	ldr.w	r3, [r5, #2692]	; 0xa84
 800f83c:	b333      	cbz	r3, 800f88c <ef153328aa1040603d831896041b65ee1135a0ee+0x60>
 800f83e:	f895 6a88 	ldrb.w	r6, [r5, #2696]	; 0xa88
 800f842:	bb1e      	cbnz	r6, 800f88c <ef153328aa1040603d831896041b65ee1135a0ee+0x60>
 800f844:	b964      	cbnz	r4, 800f860 <ef153328aa1040603d831896041b65ee1135a0ee+0x34>
 800f846:	2304      	movs	r3, #4
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	4b14      	ldr	r3, [pc, #80]	; (800f89c <ef153328aa1040603d831896041b65ee1135a0ee+0x70>)
 800f84c:	9301      	str	r3, [sp, #4]
 800f84e:	ab02      	add	r3, sp, #8
 800f850:	e913 0003 	ldmdb	r3, {r0, r1}
 800f854:	4a12      	ldr	r2, [pc, #72]	; (800f8a0 <ef153328aa1040603d831896041b65ee1135a0ee+0x74>)
 800f856:	b003      	add	sp, #12
 800f858:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f85c:	f000 beea 	b.w	8010634 <LOGGER_PrintLine>
 800f860:	f7f6 fb10 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800f864:	f8d5 3a84 	ldr.w	r3, [r5, #2692]	; 0xa84
 800f868:	e9d3 9202 	ldrd	r9, r2, [r3, #8]
 800f86c:	f8d3 8000 	ldr.w	r8, [r3]
 800f870:	f8c5 2a84 	str.w	r2, [r5, #2692]	; 0xa84
 800f874:	4631      	mov	r1, r6
 800f876:	2210      	movs	r2, #16
 800f878:	4618      	mov	r0, r3
 800f87a:	f00c fb95 	bl	801bfa8 <memset>
 800f87e:	7107      	strb	r7, [r0, #4]
 800f880:	f7f6 fb20 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800f884:	4648      	mov	r0, r9
 800f886:	3c01      	subs	r4, #1
 800f888:	47c0      	blx	r8
 800f88a:	e7d5      	b.n	800f838 <ef153328aa1040603d831896041b65ee1135a0ee+0xc>
 800f88c:	2c00      	cmp	r4, #0
 800f88e:	d0da      	beq.n	800f846 <ef153328aa1040603d831896041b65ee1135a0ee+0x1a>
 800f890:	b003      	add	sp, #12
 800f892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f896:	bf00      	nop
 800f898:	20000040 	.word	0x20000040
 800f89c:	0801fe19 	.word	0x0801fe19
 800f8a0:	0801fe20 	.word	0x0801fe20

0800f8a4 <openos_push_task_impl>:
 800f8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a6:	4b19      	ldr	r3, [pc, #100]	; (800f90c <openos_push_task_impl+0x68>)
 800f8a8:	681c      	ldr	r4, [r3, #0]
 800f8aa:	460f      	mov	r7, r1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	4615      	mov	r5, r2
 800f8b0:	f7f6 fae8 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 800f8b4:	f240 7364 	movw	r3, #1892	; 0x764
 800f8b8:	f640 2184 	movw	r1, #2692	; 0xa84
 800f8bc:	f1a4 0c10 	sub.w	ip, r4, #16
 800f8c0:	428b      	cmp	r3, r1
 800f8c2:	d106      	bne.n	800f8d2 <openos_push_task_impl+0x2e>
 800f8c4:	f7f6 fafe 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800f8c8:	4911      	ldr	r1, [pc, #68]	; (800f910 <openos_push_task_impl+0x6c>)
 800f8ca:	4812      	ldr	r0, [pc, #72]	; (800f914 <openos_push_task_impl+0x70>)
 800f8cc:	2256      	movs	r2, #86	; 0x56
 800f8ce:	f7f2 f803 	bl	80018d8 <EXPECT_OnAbortHandler>
 800f8d2:	f103 0210 	add.w	r2, r3, #16
 800f8d6:	f85c 0002 	ldr.w	r0, [ip, r2]
 800f8da:	b9a8      	cbnz	r0, 800f908 <openos_push_task_impl+0x64>
 800f8dc:	18e2      	adds	r2, r4, r3
 800f8de:	50e6      	str	r6, [r4, r3]
 800f8e0:	6097      	str	r7, [r2, #8]
 800f8e2:	7115      	strb	r5, [r2, #4]
 800f8e4:	f8d4 3a84 	ldr.w	r3, [r4, #2692]	; 0xa84
 800f8e8:	f604 2184 	addw	r1, r4, #2692	; 0xa84
 800f8ec:	b113      	cbz	r3, 800f8f4 <openos_push_task_impl+0x50>
 800f8ee:	7918      	ldrb	r0, [r3, #4]
 800f8f0:	42a8      	cmp	r0, r5
 800f8f2:	d905      	bls.n	800f900 <openos_push_task_impl+0x5c>
 800f8f4:	60d3      	str	r3, [r2, #12]
 800f8f6:	600a      	str	r2, [r1, #0]
 800f8f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8fc:	f7f6 bae2 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 800f900:	f103 010c 	add.w	r1, r3, #12
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	e7f1      	b.n	800f8ec <openos_push_task_impl+0x48>
 800f908:	4613      	mov	r3, r2
 800f90a:	e7d9      	b.n	800f8c0 <openos_push_task_impl+0x1c>
 800f90c:	20000040 	.word	0x20000040
 800f910:	0801fe40 	.word	0x0801fe40
 800f914:	0801fe95 	.word	0x0801fe95

0800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>:
 800f918:	f7ff bfc4 	b.w	800f8a4 <openos_push_task_impl>

0800f91c <c5868198428dfaffddb0900c3d01452778b19d11>:
 800f91c:	3901      	subs	r1, #1
 800f91e:	4402      	add	r2, r0
 800f920:	4282      	cmp	r2, r0
 800f922:	d100      	bne.n	800f926 <c5868198428dfaffddb0900c3d01452778b19d11+0xa>
 800f924:	4770      	bx	lr
 800f926:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f92a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800f92e:	e7f7      	b.n	800f920 <c5868198428dfaffddb0900c3d01452778b19d11+0x4>

0800f930 <ENDIANNESS_hton16>:
 800f930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f932:	2202      	movs	r2, #2
 800f934:	f8ad 0006 	strh.w	r0, [sp, #6]
 800f938:	f10d 0106 	add.w	r1, sp, #6
 800f93c:	f10d 000e 	add.w	r0, sp, #14
 800f940:	f7ff ffec 	bl	800f91c <c5868198428dfaffddb0900c3d01452778b19d11>
 800f944:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f948:	b005      	add	sp, #20
 800f94a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f950 <sendStatusConfirmationIndication>:
 800f950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f954:	460f      	mov	r7, r1
 800f956:	b09c      	sub	sp, #112	; 0x70
 800f958:	4616      	mov	r6, r2
 800f95a:	4680      	mov	r8, r0
 800f95c:	b100      	cbz	r0, 800f960 <sendStatusConfirmationIndication+0x10>
 800f95e:	b921      	cbnz	r1, 800f96a <sendStatusConfirmationIndication+0x1a>
 800f960:	4955      	ldr	r1, [pc, #340]	; (800fab8 <sendStatusConfirmationIndication+0x168>)
 800f962:	4856      	ldr	r0, [pc, #344]	; (800fabc <sendStatusConfirmationIndication+0x16c>)
 800f964:	22cf      	movs	r2, #207	; 0xcf
 800f966:	f7f1 ffb7 	bl	80018d8 <EXPECT_OnAbortHandler>
 800f96a:	2365      	movs	r3, #101	; 0x65
 800f96c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800f970:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f974:	f00b f966 	bl	801ac44 <13e346e7537b84bcd52c3cf47fef4ef9086039ba>
 800f978:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 800f97c:	f00b f968 	bl	801ac50 <bba0525c833a77ea6266641935ef62cce330e9a7>
 800f980:	f7ff ffd6 	bl	800f930 <ENDIANNESS_hton16>
 800f984:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 800f988:	f00b f96d 	bl	801ac66 <6bb34e807caa6654eefd3984c9aa6bde2b5f1294>
 800f98c:	4604      	mov	r4, r0
 800f98e:	f00b f96c 	bl	801ac6a <ef56437d1bfbf379203966c0ca60ce860a9e4040>
 800f992:	4404      	add	r4, r0
 800f994:	f00b f96b 	bl	801ac6e <33cb78c5ebdf85a72531cdf9a2db5897a43e9d27>
 800f998:	b2a4      	uxth	r4, r4
 800f99a:	4420      	add	r0, r4
 800f99c:	b280      	uxth	r0, r0
 800f99e:	f7ff ffc7 	bl	800f930 <ENDIANNESS_hton16>
 800f9a2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800f9a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f9aa:	f7ff ffc1 	bl	800f930 <ENDIANNESS_hton16>
 800f9ae:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800f9b2:	f00b f96a 	bl	801ac8a <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>
 800f9b6:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 800f9ba:	f00b f920 	bl	801abfe <e4a3f9918fe69f73b1cc4210ec318e3c426e72f5>
 800f9be:	f7ff ffb7 	bl	800f930 <ENDIANNESS_hton16>
 800f9c2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 800f9c6:	f00b f8e1 	bl	801ab8c <46cd3075e82ff8b9ea43a88054ba0b7b067be91a>
 800f9ca:	ac06      	add	r4, sp, #24
 800f9cc:	2208      	movs	r2, #8
 800f9ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9d2:	a904      	add	r1, sp, #16
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7ff ffa1 	bl	800f91c <c5868198428dfaffddb0900c3d01452778b19d11>
 800f9da:	9b06      	ldr	r3, [sp, #24]
 800f9dc:	f8cd 3025 	str.w	r3, [sp, #37]	; 0x25
 800f9e0:	9b07      	ldr	r3, [sp, #28]
 800f9e2:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 800f9e6:	f00b f8fc 	bl	801abe2 <EMBENET_NODE_DIAG_GetParentPDR>
 800f9ea:	f7ff ffa1 	bl	800f930 <ENDIANNESS_hton16>
 800f9ee:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 800f9f2:	f00b f8e3 	bl	801abbc <b91c6940dbb3047c4c296403649f7867d9870dca>
 800f9f6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
 800f9fa:	a804      	add	r0, sp, #16
 800f9fc:	f00b f939 	bl	801ac72 <EMBENET_NODE_DIAG_GetQueueThresholdAndOverflowCounters>
 800fa00:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800fa04:	f7ff ff94 	bl	800f930 <ENDIANNESS_hton16>
 800fa08:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800fa0c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800fa10:	f7ff ff8e 	bl	800f930 <ENDIANNESS_hton16>
 800fa14:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800fa18:	f00b f8f3 	bl	801ac02 <4f511565cdbba62bf97753c767d47da43943d7f0>
 800fa1c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800fa20:	f00b f905 	bl	801ac2e <88f59cfa8d275ffe37bfcd0f1db7f0dfbfb0545b>
 800fa24:	f7ff ff84 	bl	800f930 <ENDIANNESS_hton16>
 800fa28:	f8ad 0033 	strh.w	r0, [sp, #51]	; 0x33
 800fa2c:	f7fc fa8c 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 800fa30:	2300      	movs	r3, #0
 800fa32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa36:	f7f1 f8e9 	bl	8000c0c <__aeabi_uldivmod>
 800fa3a:	2204      	movs	r2, #4
 800fa3c:	9003      	str	r0, [sp, #12]
 800fa3e:	a903      	add	r1, sp, #12
 800fa40:	4620      	mov	r0, r4
 800fa42:	f7ff ff6b 	bl	800f91c <c5868198428dfaffddb0900c3d01452778b19d11>
 800fa46:	9b06      	ldr	r3, [sp, #24]
 800fa48:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
 800fa4c:	f7fc fd82 	bl	800c554 <EMBENET_NODE_GetGroupCount>
 800fa50:	2814      	cmp	r0, #20
 800fa52:	bf28      	it	cs
 800fa54:	2014      	movcs	r0, #20
 800fa56:	4681      	mov	r9, r0
 800fa58:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
 800fa5c:	2500      	movs	r5, #0
 800fa5e:	454d      	cmp	r5, r9
 800fa60:	d119      	bne.n	800fa96 <sendStatusConfirmationIndication+0x146>
 800fa62:	3511      	adds	r5, #17
 800fa64:	4640      	mov	r0, r8
 800fa66:	006d      	lsls	r5, r5, #1
 800fa68:	9500      	str	r5, [sp, #0]
 800fa6a:	ab09      	add	r3, sp, #36	; 0x24
 800fa6c:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800fa70:	4639      	mov	r1, r7
 800fa72:	f7fc fa51 	bl	800bf18 <EMBENET_UDP_Send>
 800fa76:	4b12      	ldr	r3, [pc, #72]	; (800fac0 <sendStatusConfirmationIndication+0x170>)
 800fa78:	b9b0      	cbnz	r0, 800faa8 <sendStatusConfirmationIndication+0x158>
 800fa7a:	2205      	movs	r2, #5
 800fa7c:	2e21      	cmp	r6, #33	; 0x21
 800fa7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fa82:	bf0c      	ite	eq
 800fa84:	4a0f      	ldreq	r2, [pc, #60]	; (800fac4 <sendStatusConfirmationIndication+0x174>)
 800fa86:	4a10      	ldrne	r2, [pc, #64]	; (800fac8 <sendStatusConfirmationIndication+0x178>)
 800fa88:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fa8c:	f000 fdd2 	bl	8010634 <LOGGER_PrintLine>
 800fa90:	b01c      	add	sp, #112	; 0x70
 800fa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa96:	4628      	mov	r0, r5
 800fa98:	f7fc fd5e 	bl	800c558 <EMBENET_NODE_GetGroupByIndex>
 800fa9c:	f7ff ff48 	bl	800f930 <ENDIANNESS_hton16>
 800faa0:	3501      	adds	r5, #1
 800faa2:	f82a 0f02 	strh.w	r0, [sl, #2]!
 800faa6:	e7da      	b.n	800fa5e <sendStatusConfirmationIndication+0x10e>
 800faa8:	2203      	movs	r2, #3
 800faaa:	2e21      	cmp	r6, #33	; 0x21
 800faac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fab0:	bf0c      	ite	eq
 800fab2:	4a06      	ldreq	r2, [pc, #24]	; (800facc <sendStatusConfirmationIndication+0x17c>)
 800fab4:	4a06      	ldrne	r2, [pc, #24]	; (800fad0 <sendStatusConfirmationIndication+0x180>)
 800fab6:	e7e7      	b.n	800fa88 <sendStatusConfirmationIndication+0x138>
 800fab8:	0801fead 	.word	0x0801fead
 800fabc:	0801ff0a 	.word	0x0801ff0a
 800fac0:	0801ff17 	.word	0x0801ff17
 800fac4:	0801ff1c 	.word	0x0801ff1c
 800fac8:	0801ff3a 	.word	0x0801ff3a
 800facc:	0801ff56 	.word	0x0801ff56
 800fad0:	0801ff7e 	.word	0x0801ff7e

0800fad4 <enms_strlen_s>:
 800fad4:	b538      	push	{r3, r4, r5, lr}
 800fad6:	460c      	mov	r4, r1
 800fad8:	4605      	mov	r5, r0
 800fada:	b138      	cbz	r0, 800faec <enms_strlen_s+0x18>
 800fadc:	460a      	mov	r2, r1
 800fade:	2100      	movs	r1, #0
 800fae0:	f7f0 fb4e 	bl	8000180 <memchr>
 800fae4:	b100      	cbz	r0, 800fae8 <enms_strlen_s+0x14>
 800fae6:	1b44      	subs	r4, r0, r5
 800fae8:	4620      	mov	r0, r4
 800faea:	bd38      	pop	{r3, r4, r5, pc}
 800faec:	4604      	mov	r4, r0
 800faee:	e7fb      	b.n	800fae8 <enms_strlen_s+0x14>

0800faf0 <sendCells>:
 800faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	460f      	mov	r7, r1
 800faf6:	b09d      	sub	sp, #116	; 0x74
 800faf8:	4615      	mov	r5, r2
 800fafa:	4606      	mov	r6, r0
 800fafc:	b100      	cbz	r0, 800fb00 <sendCells+0x10>
 800fafe:	b929      	cbnz	r1, 800fb0c <sendCells+0x1c>
 800fb00:	4945      	ldr	r1, [pc, #276]	; (800fc18 <sendCells+0x128>)
 800fb02:	4846      	ldr	r0, [pc, #280]	; (800fc1c <sendCells+0x12c>)
 800fb04:	f240 1205 	movw	r2, #261	; 0x105
 800fb08:	f7f1 fee6 	bl	80018d8 <EXPECT_OnAbortHandler>
 800fb0c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800fb10:	f00b f8ce 	bl	801acb0 <EMBENET_NODE_DIAG_GetCellsCount>
 800fb14:	4b42      	ldr	r3, [pc, #264]	; (800fc20 <sendCells+0x130>)
 800fb16:	4343      	muls	r3, r0
 800fb18:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
 800fb1c:	f04f 0305 	mov.w	r3, #5
 800fb20:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb24:	bf88      	it	hi
 800fb26:	3301      	addhi	r3, #1
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	f04f 0800 	mov.w	r8, #0
 800fb2e:	4604      	mov	r4, r0
 800fb30:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800fb34:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
 800fb38:	f04f 0a00 	mov.w	sl, #0
 800fb3c:	45a0      	cmp	r8, r4
 800fb3e:	d102      	bne.n	800fb46 <sendCells+0x56>
 800fb40:	b01d      	add	sp, #116	; 0x74
 800fb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb46:	4641      	mov	r1, r8
 800fb48:	a806      	add	r0, sp, #24
 800fb4a:	f00b f8b3 	bl	801acb4 <EMBENET_NODE_DIAG_GetCellInfo>
 800fb4e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fb52:	f108 0801 	add.w	r8, r8, #1
 800fb56:	2900      	cmp	r1, #0
 800fb58:	d0f0      	beq.n	800fb3c <sendCells+0x4c>
 800fb5a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800fb5e:	2a00      	cmp	r2, #0
 800fb60:	d0ec      	beq.n	800fb3c <sendCells+0x4c>
 800fb62:	ab1c      	add	r3, sp, #112	; 0x70
 800fb64:	200d      	movs	r0, #13
 800fb66:	fb00 3b0a 	mla	fp, r0, sl, r3
 800fb6a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800fb6e:	f80b 2c41 	strb.w	r2, [fp, #-65]
 800fb72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fb76:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800fb7a:	f80b 2c3d 	strb.w	r2, [fp, #-61]
 800fb7e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800fb82:	f80b 2c3e 	strb.w	r2, [fp, #-62]
 800fb86:	f10d 0910 	add.w	r9, sp, #16
 800fb8a:	2208      	movs	r2, #8
 800fb8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb90:	eb0d 0102 	add.w	r1, sp, r2
 800fb94:	4648      	mov	r0, r9
 800fb96:	f7ff fec1 	bl	800f91c <c5868198428dfaffddb0900c3d01452778b19d11>
 800fb9a:	9a04      	ldr	r2, [sp, #16]
 800fb9c:	f84b 2c3c 	str.w	r2, [fp, #-60]
 800fba0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800fba4:	9a05      	ldr	r2, [sp, #20]
 800fba6:	f84b 2c38 	str.w	r2, [fp, #-56]
 800fbaa:	f7ff fec1 	bl	800f930 <ENDIANNESS_hton16>
 800fbae:	f10a 0a01 	add.w	sl, sl, #1
 800fbb2:	f1ba 0f05 	cmp.w	sl, #5
 800fbb6:	f82b 0c40 	strh.w	r0, [fp, #-64]
 800fbba:	d001      	beq.n	800fbc0 <sendCells+0xd0>
 800fbbc:	4544      	cmp	r4, r8
 800fbbe:	d1bd      	bne.n	800fb3c <sendCells+0x4c>
 800fbc0:	230d      	movs	r3, #13
 800fbc2:	fb03 f30a 	mul.w	r3, r3, sl
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	3303      	adds	r3, #3
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800fbd0:	ab0b      	add	r3, sp, #44	; 0x2c
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	f7fc f9a0 	bl	800bf18 <EMBENET_UDP_Send>
 800fbd8:	4b12      	ldr	r3, [pc, #72]	; (800fc24 <sendCells+0x134>)
 800fbda:	b988      	cbnz	r0, 800fc00 <sendCells+0x110>
 800fbdc:	2205      	movs	r2, #5
 800fbde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fbe2:	2d31      	cmp	r5, #49	; 0x31
 800fbe4:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fbe8:	bf0c      	ite	eq
 800fbea:	4a0f      	ldreq	r2, [pc, #60]	; (800fc28 <sendCells+0x138>)
 800fbec:	4a0f      	ldrne	r2, [pc, #60]	; (800fc2c <sendCells+0x13c>)
 800fbee:	4653      	mov	r3, sl
 800fbf0:	f000 fd20 	bl	8010634 <LOGGER_PrintLine>
 800fbf4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800fbfe:	e79b      	b.n	800fb38 <sendCells+0x48>
 800fc00:	2203      	movs	r2, #3
 800fc02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fc06:	2d31      	cmp	r5, #49	; 0x31
 800fc08:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fc0c:	bf0c      	ite	eq
 800fc0e:	4a08      	ldreq	r2, [pc, #32]	; (800fc30 <sendCells+0x140>)
 800fc10:	4a08      	ldrne	r2, [pc, #32]	; (800fc34 <sendCells+0x144>)
 800fc12:	f000 fd0f 	bl	8010634 <LOGGER_PrintLine>
 800fc16:	e7ed      	b.n	800fbf4 <sendCells+0x104>
 800fc18:	0801fead 	.word	0x0801fead
 800fc1c:	0801ff0a 	.word	0x0801ff0a
 800fc20:	cccccccd 	.word	0xcccccccd
 800fc24:	0801ff17 	.word	0x0801ff17
 800fc28:	0801ffa4 	.word	0x0801ffa4
 800fc2c:	0801ffcf 	.word	0x0801ffcf
 800fc30:	0801fff8 	.word	0x0801fff8
 800fc34:	0802001f 	.word	0x0802001f

0800fc38 <sendNeighborhood>:
 800fc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3c:	b0a1      	sub	sp, #132	; 0x84
 800fc3e:	4690      	mov	r8, r2
 800fc40:	9102      	str	r1, [sp, #8]
 800fc42:	4681      	mov	r9, r0
 800fc44:	b100      	cbz	r0, 800fc48 <sendNeighborhood+0x10>
 800fc46:	b929      	cbnz	r1, 800fc54 <sendNeighborhood+0x1c>
 800fc48:	493c      	ldr	r1, [pc, #240]	; (800fd3c <sendNeighborhood+0x104>)
 800fc4a:	483d      	ldr	r0, [pc, #244]	; (800fd40 <sendNeighborhood+0x108>)
 800fc4c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc50:	f7f1 fe42 	bl	80018d8 <EXPECT_OnAbortHandler>
 800fc54:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800fc58:	f00b f817 	bl	801ac8a <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>
 800fc5c:	2307      	movs	r3, #7
 800fc5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800fc62:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800fc66:	4290      	cmp	r0, r2
 800fc68:	bf18      	it	ne
 800fc6a:	3301      	addne	r3, #1
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2700      	movs	r7, #0
 800fc70:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800fd44 <sendNeighborhood+0x10c>
 800fc74:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 800fc78:	4606      	mov	r6, r0
 800fc7a:	463d      	mov	r5, r7
 800fc7c:	f04f 0b0a 	mov.w	fp, #10
 800fc80:	42b7      	cmp	r7, r6
 800fc82:	d102      	bne.n	800fc8a <sendNeighborhood+0x52>
 800fc84:	b021      	add	sp, #132	; 0x84
 800fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	a808      	add	r0, sp, #32
 800fc8e:	f00b f800 	bl	801ac92 <EMBENET_NODE_DIAG_GetNeighborInfo>
 800fc92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fc96:	ea50 0301 	orrs.w	r3, r0, r1
 800fc9a:	f107 0701 	add.w	r7, r7, #1
 800fc9e:	d0ef      	beq.n	800fc80 <sendNeighborhood+0x48>
 800fca0:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800fca4:	9105      	str	r1, [sp, #20]
 800fca6:	ab20      	add	r3, sp, #128	; 0x80
 800fca8:	fb0b 3305 	mla	r3, fp, r5, r3
 800fcac:	0112      	lsls	r2, r2, #4
 800fcae:	ac06      	add	r4, sp, #24
 800fcb0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800fcb4:	f803 2c49 	strb.w	r2, [r3, #-73]
 800fcb8:	a904      	add	r1, sp, #16
 800fcba:	2208      	movs	r2, #8
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f7ff fe2d 	bl	800f91c <c5868198428dfaffddb0900c3d01452778b19d11>
 800fcc2:	9b03      	ldr	r3, [sp, #12]
 800fcc4:	9a06      	ldr	r2, [sp, #24]
 800fcc6:	f843 2c48 	str.w	r2, [r3, #-72]
 800fcca:	3501      	adds	r5, #1
 800fccc:	9a07      	ldr	r2, [sp, #28]
 800fcce:	f843 2c44 	str.w	r2, [r3, #-68]
 800fcd2:	2d07      	cmp	r5, #7
 800fcd4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800fcd8:	f803 2c40 	strb.w	r2, [r3, #-64]
 800fcdc:	d001      	beq.n	800fce2 <sendNeighborhood+0xaa>
 800fcde:	42be      	cmp	r6, r7
 800fce0:	d1ce      	bne.n	800fc80 <sendNeighborhood+0x48>
 800fce2:	fb0b f305 	mul.w	r3, fp, r5
 800fce6:	3303      	adds	r3, #3
 800fce8:	4648      	mov	r0, r9
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800fcf0:	9902      	ldr	r1, [sp, #8]
 800fcf2:	ab0d      	add	r3, sp, #52	; 0x34
 800fcf4:	f7fc f910 	bl	800bf18 <EMBENET_UDP_Send>
 800fcf8:	b998      	cbnz	r0, 800fd22 <sendNeighborhood+0xea>
 800fcfa:	2305      	movs	r3, #5
 800fcfc:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800fd00:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 800fd04:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fd08:	bf0c      	ite	eq
 800fd0a:	4a0f      	ldreq	r2, [pc, #60]	; (800fd48 <sendNeighborhood+0x110>)
 800fd0c:	4a0f      	ldrne	r2, [pc, #60]	; (800fd4c <sendNeighborhood+0x114>)
 800fd0e:	462b      	mov	r3, r5
 800fd10:	f000 fc90 	bl	8010634 <LOGGER_PrintLine>
 800fd14:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800fd18:	3301      	adds	r3, #1
 800fd1a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800fd1e:	2500      	movs	r5, #0
 800fd20:	e7ae      	b.n	800fc80 <sendNeighborhood+0x48>
 800fd22:	2303      	movs	r3, #3
 800fd24:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800fd28:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 800fd2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fd30:	bf0c      	ite	eq
 800fd32:	4a07      	ldreq	r2, [pc, #28]	; (800fd50 <sendNeighborhood+0x118>)
 800fd34:	4a07      	ldrne	r2, [pc, #28]	; (800fd54 <sendNeighborhood+0x11c>)
 800fd36:	f000 fc7d 	bl	8010634 <LOGGER_PrintLine>
 800fd3a:	e7eb      	b.n	800fd14 <sendNeighborhood+0xdc>
 800fd3c:	0801fead 	.word	0x0801fead
 800fd40:	0801ff0a 	.word	0x0801ff0a
 800fd44:	0801ff17 	.word	0x0801ff17
 800fd48:	08020044 	.word	0x08020044
 800fd4c:	0802007a 	.word	0x0802007a
 800fd50:	080200ae 	.word	0x080200ae
 800fd54:	080200dc 	.word	0x080200dc

0800fd58 <enmsTask>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	b093      	sub	sp, #76	; 0x4c
 800fd5e:	4615      	mov	r5, r2
 800fd60:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fd62:	f512 727a 	adds.w	r2, r2, #1000	; 0x3e8
 800fd66:	461e      	mov	r6, r3
 800fd68:	f143 0300 	adc.w	r3, r3, #0
 800fd6c:	f7fc faa4 	bl	800c2b8 <EMBENET_NODE_TaskSchedule>
 800fd70:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd74:	42aa      	cmp	r2, r5
 800fd76:	41b3      	sbcs	r3, r6
 800fd78:	d241      	bcs.n	800fdfe <enmsTask+0xa6>
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	f88d 3010 	strb.w	r3, [sp, #16]
 800fd80:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800fd84:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800fd88:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
 800fd8c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800fd90:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800fd94:	f7ff fdcc 	bl	800f930 <ENDIANNESS_hton16>
 800fd98:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800fd9c:	f8ad 0023 	strh.w	r0, [sp, #35]	; 0x23
 800fda0:	f10d 0211 	add.w	r2, sp, #17
 800fda4:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800fda8:	f853 0b04 	ldr.w	r0, [r3], #4
 800fdac:	f842 0b04 	str.w	r0, [r2], #4
 800fdb0:	428b      	cmp	r3, r1
 800fdb2:	d1f9      	bne.n	800fda8 <enmsTask+0x50>
 800fdb4:	2315      	movs	r3, #21
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800fdba:	ab04      	add	r3, sp, #16
 800fdbc:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800fdc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fdc4:	f7fc f8a8 	bl	800bf18 <EMBENET_UDP_Send>
 800fdc8:	4a70      	ldr	r2, [pc, #448]	; (800ff8c <enmsTask+0x234>)
 800fdca:	ab02      	add	r3, sp, #8
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d14f      	bne.n	800fe70 <enmsTask+0x118>
 800fdd0:	2105      	movs	r1, #5
 800fdd2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800fdd6:	4a6e      	ldr	r2, [pc, #440]	; (800ff90 <enmsTask+0x238>)
 800fdd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fddc:	f000 fc2a 	bl	8010634 <LOGGER_PrintLine>
 800fde0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800fde2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fde6:	4358      	muls	r0, r3
 800fde8:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800fdec:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800fdf0:	f7fc fbaa 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800fdf4:	1940      	adds	r0, r0, r5
 800fdf6:	f146 0300 	adc.w	r3, r6, #0
 800fdfa:	e9c4 0300 	strd	r0, r3, [r4]
 800fdfe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800fe02:	42aa      	cmp	r2, r5
 800fe04:	41b3      	sbcs	r3, r6
 800fe06:	d26e      	bcs.n	800fee6 <enmsTask+0x18e>
 800fe08:	2312      	movs	r3, #18
 800fe0a:	f88d 3010 	strb.w	r3, [sp, #16]
 800fe0e:	f04f 0800 	mov.w	r8, #0
 800fe12:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 800fe16:	f8df a174 	ldr.w	sl, [pc, #372]	; 800ff8c <enmsTask+0x234>
 800fe1a:	f88d 3011 	strb.w	r3, [sp, #17]
 800fe1e:	f104 0b3c 	add.w	fp, r4, #60	; 0x3c
 800fe22:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800fe26:	46c1      	mov	r9, r8
 800fe28:	783b      	ldrb	r3, [r7, #0]
 800fe2a:	b1d3      	cbz	r3, 800fe62 <enmsTask+0x10a>
 800fe2c:	2312      	movs	r3, #18
 800fe2e:	fb03 f309 	mul.w	r3, r3, r9
 800fe32:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800fe36:	446a      	add	r2, sp
 800fe38:	7c39      	ldrb	r1, [r7, #16]
 800fe3a:	f802 1c25 	strb.w	r1, [r2, #-37]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	f802 8c36 	strb.w	r8, [r2, #-54]
 800fe44:	3b35      	subs	r3, #53	; 0x35
 800fe46:	463a      	mov	r2, r7
 800fe48:	f107 0110 	add.w	r1, r7, #16
 800fe4c:	f852 0b04 	ldr.w	r0, [r2], #4
 800fe50:	f843 0b04 	str.w	r0, [r3], #4
 800fe54:	428a      	cmp	r2, r1
 800fe56:	d1f9      	bne.n	800fe4c <enmsTask+0xf4>
 800fe58:	f109 0901 	add.w	r9, r9, #1
 800fe5c:	f1b9 0f03 	cmp.w	r9, #3
 800fe60:	d00b      	beq.n	800fe7a <enmsTask+0x122>
 800fe62:	f1b8 0f09 	cmp.w	r8, #9
 800fe66:	d008      	beq.n	800fe7a <enmsTask+0x122>
 800fe68:	f108 0801 	add.w	r8, r8, #1
 800fe6c:	3711      	adds	r7, #17
 800fe6e:	e7db      	b.n	800fe28 <enmsTask+0xd0>
 800fe70:	2103      	movs	r1, #3
 800fe72:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800fe76:	4a47      	ldr	r2, [pc, #284]	; (800ff94 <enmsTask+0x23c>)
 800fe78:	e7ae      	b.n	800fdd8 <enmsTask+0x80>
 800fe7a:	2312      	movs	r3, #18
 800fe7c:	fb03 f309 	mul.w	r3, r3, r9
 800fe80:	4620      	mov	r0, r4
 800fe82:	3302      	adds	r3, #2
 800fe84:	9300      	str	r3, [sp, #0]
 800fe86:	4659      	mov	r1, fp
 800fe88:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 800fe8c:	ab04      	add	r3, sp, #16
 800fe8e:	f7fc f843 	bl	800bf18 <EMBENET_UDP_Send>
 800fe92:	a902      	add	r1, sp, #8
 800fe94:	b980      	cbnz	r0, 800feb8 <enmsTask+0x160>
 800fe96:	2305      	movs	r3, #5
 800fe98:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800fe9c:	4a3e      	ldr	r2, [pc, #248]	; (800ff98 <enmsTask+0x240>)
 800fe9e:	c903      	ldmia	r1, {r0, r1}
 800fea0:	464b      	mov	r3, r9
 800fea2:	f000 fbc7 	bl	8010634 <LOGGER_PrintLine>
 800fea6:	f108 0801 	add.w	r8, r8, #1
 800feaa:	f1b8 0f0a 	cmp.w	r8, #10
 800feae:	d00b      	beq.n	800fec8 <enmsTask+0x170>
 800feb0:	3711      	adds	r7, #17
 800feb2:	f04f 0900 	mov.w	r9, #0
 800feb6:	e7b7      	b.n	800fe28 <enmsTask+0xd0>
 800feb8:	2303      	movs	r3, #3
 800feba:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800febe:	4a37      	ldr	r2, [pc, #220]	; (800ff9c <enmsTask+0x244>)
 800fec0:	c903      	ldmia	r1, {r0, r1}
 800fec2:	f000 fbb7 	bl	8010634 <LOGGER_PrintLine>
 800fec6:	e7ee      	b.n	800fea6 <enmsTask+0x14e>
 800fec8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800feca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fece:	4358      	muls	r0, r3
 800fed0:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800fed4:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800fed8:	f7fc fb36 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800fedc:	1940      	adds	r0, r0, r5
 800fede:	f146 0300 	adc.w	r3, r6, #0
 800fee2:	e9c4 0304 	strd	r0, r3, [r4, #16]
 800fee6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800feea:	42aa      	cmp	r2, r5
 800feec:	41b3      	sbcs	r3, r6
 800feee:	d214      	bcs.n	800ff1a <enmsTask+0x1c2>
 800fef0:	2222      	movs	r2, #34	; 0x22
 800fef2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff fd2a 	bl	800f950 <sendStatusConfirmationIndication>
 800fefc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800fefe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff02:	4358      	muls	r0, r3
 800ff04:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800ff08:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800ff0c:	f7fc fb1c 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800ff10:	1940      	adds	r0, r0, r5
 800ff12:	f146 0300 	adc.w	r3, r6, #0
 800ff16:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800ff1a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ff1e:	42aa      	cmp	r2, r5
 800ff20:	41b3      	sbcs	r3, r6
 800ff22:	d215      	bcs.n	800ff50 <enmsTask+0x1f8>
 800ff24:	2242      	movs	r2, #66	; 0x42
 800ff26:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f7ff fe84 	bl	800fc38 <sendNeighborhood>
 800ff30:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ff34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff38:	4358      	muls	r0, r3
 800ff3a:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800ff3e:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800ff42:	f7fc fb01 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800ff46:	1940      	adds	r0, r0, r5
 800ff48:	f146 0300 	adc.w	r3, r6, #0
 800ff4c:	e9c4 0306 	strd	r0, r3, [r4, #24]
 800ff50:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800ff54:	42aa      	cmp	r2, r5
 800ff56:	41b3      	sbcs	r3, r6
 800ff58:	d215      	bcs.n	800ff86 <enmsTask+0x22e>
 800ff5a:	2232      	movs	r2, #50	; 0x32
 800ff5c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ff60:	4620      	mov	r0, r4
 800ff62:	f7ff fdc5 	bl	800faf0 <sendCells>
 800ff66:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800ff6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff6e:	4358      	muls	r0, r3
 800ff70:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 800ff74:	eba0 0090 	sub.w	r0, r0, r0, lsr #2
 800ff78:	f7fc fae6 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 800ff7c:	1940      	adds	r0, r0, r5
 800ff7e:	f146 0600 	adc.w	r6, r6, #0
 800ff82:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800ff86:	b013      	add	sp, #76	; 0x4c
 800ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8c:	0801ff17 	.word	0x0801ff17
 800ff90:	08020108 	.word	0x08020108
 800ff94:	08020128 	.word	0x08020128
 800ff98:	08020152 	.word	0x08020152
 800ff9c:	08020185 	.word	0x08020185

0800ffa0 <updRxHandler>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	b08a      	sub	sp, #40	; 0x28
 800ffa4:	460d      	mov	r5, r1
 800ffa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffa8:	b928      	cbnz	r0, 800ffb6 <updRxHandler+0x16>
 800ffaa:	495e      	ldr	r1, [pc, #376]	; (8010124 <updRxHandler+0x184>)
 800ffac:	485e      	ldr	r0, [pc, #376]	; (8010128 <updRxHandler+0x188>)
 800ffae:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ffb2:	f7f1 fc91 	bl	80018d8 <EXPECT_OnAbortHandler>
 800ffb6:	68c4      	ldr	r4, [r0, #12]
 800ffb8:	b924      	cbnz	r4, 800ffc4 <updRxHandler+0x24>
 800ffba:	495a      	ldr	r1, [pc, #360]	; (8010124 <updRxHandler+0x184>)
 800ffbc:	485b      	ldr	r0, [pc, #364]	; (801012c <updRxHandler+0x18c>)
 800ffbe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ffc2:	e7f6      	b.n	800ffb2 <updRxHandler+0x12>
 800ffc4:	b923      	cbnz	r3, 800ffd0 <updRxHandler+0x30>
 800ffc6:	4957      	ldr	r1, [pc, #348]	; (8010124 <updRxHandler+0x184>)
 800ffc8:	4859      	ldr	r0, [pc, #356]	; (8010130 <updRxHandler+0x190>)
 800ffca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ffce:	e7f0      	b.n	800ffb2 <updRxHandler+0x12>
 800ffd0:	b922      	cbnz	r2, 800ffdc <updRxHandler+0x3c>
 800ffd2:	4954      	ldr	r1, [pc, #336]	; (8010124 <updRxHandler+0x184>)
 800ffd4:	4857      	ldr	r0, [pc, #348]	; (8010134 <updRxHandler+0x194>)
 800ffd6:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800ffda:	e7ea      	b.n	800ffb2 <updRxHandler+0x12>
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b20      	cmp	r3, #32
 800ffe0:	f000 8091 	beq.w	8010106 <updRxHandler+0x166>
 800ffe4:	d80e      	bhi.n	8010004 <updRxHandler+0x64>
 800ffe6:	b1cb      	cbz	r3, 801001c <updRxHandler+0x7c>
 800ffe8:	2b10      	cmp	r3, #16
 800ffea:	d053      	beq.n	8010094 <updRxHandler+0xf4>
 800ffec:	2104      	movs	r1, #4
 800ffee:	9104      	str	r1, [sp, #16]
 800fff0:	920e      	str	r2, [sp, #56]	; 0x38
 800fff2:	4951      	ldr	r1, [pc, #324]	; (8010138 <updRxHandler+0x198>)
 800fff4:	4a51      	ldr	r2, [pc, #324]	; (801013c <updRxHandler+0x19c>)
 800fff6:	9105      	str	r1, [sp, #20]
 800fff8:	2004      	movs	r0, #4
 800fffa:	b00a      	add	sp, #40	; 0x28
 800fffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010000:	f000 bb18 	b.w	8010634 <LOGGER_PrintLine>
 8010004:	2b30      	cmp	r3, #48	; 0x30
 8010006:	f000 8085 	beq.w	8010114 <updRxHandler+0x174>
 801000a:	2b40      	cmp	r3, #64	; 0x40
 801000c:	d1ee      	bne.n	800ffec <updRxHandler+0x4c>
 801000e:	2241      	movs	r2, #65	; 0x41
 8010010:	4620      	mov	r0, r4
 8010012:	b00a      	add	sp, #40	; 0x28
 8010014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010018:	f7ff be0e 	b.w	800fc38 <sendNeighborhood>
 801001c:	b919      	cbnz	r1, 8010026 <updRxHandler+0x86>
 801001e:	2264      	movs	r2, #100	; 0x64
 8010020:	4940      	ldr	r1, [pc, #256]	; (8010124 <updRxHandler+0x184>)
 8010022:	4847      	ldr	r0, [pc, #284]	; (8010140 <updRxHandler+0x1a0>)
 8010024:	e7c5      	b.n	800ffb2 <updRxHandler+0x12>
 8010026:	2301      	movs	r3, #1
 8010028:	f88d 3010 	strb.w	r3, [sp, #16]
 801002c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8010030:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8010034:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010038:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 801003c:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
 8010040:	f7ff fc76 	bl	800f930 <ENDIANNESS_hton16>
 8010044:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8010048:	f8ad 0023 	strh.w	r0, [sp, #35]	; 0x23
 801004c:	f10d 0211 	add.w	r2, sp, #17
 8010050:	f104 0160 	add.w	r1, r4, #96	; 0x60
 8010054:	f853 0b04 	ldr.w	r0, [r3], #4
 8010058:	f842 0b04 	str.w	r0, [r2], #4
 801005c:	428b      	cmp	r3, r1
 801005e:	d1f9      	bne.n	8010054 <updRxHandler+0xb4>
 8010060:	4620      	mov	r0, r4
 8010062:	2315      	movs	r3, #21
 8010064:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	4629      	mov	r1, r5
 801006c:	ab04      	add	r3, sp, #16
 801006e:	f7fb ff53 	bl	800bf18 <EMBENET_UDP_Send>
 8010072:	4a31      	ldr	r2, [pc, #196]	; (8010138 <updRxHandler+0x198>)
 8010074:	ab02      	add	r3, sp, #8
 8010076:	b940      	cbnz	r0, 801008a <updRxHandler+0xea>
 8010078:	2105      	movs	r1, #5
 801007a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801007e:	4a31      	ldr	r2, [pc, #196]	; (8010144 <updRxHandler+0x1a4>)
 8010080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010084:	f000 fad6 	bl	8010634 <LOGGER_PrintLine>
 8010088:	e035      	b.n	80100f6 <updRxHandler+0x156>
 801008a:	2103      	movs	r1, #3
 801008c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010090:	4a2d      	ldr	r2, [pc, #180]	; (8010148 <updRxHandler+0x1a8>)
 8010092:	e7f5      	b.n	8010080 <updRxHandler+0xe0>
 8010094:	b909      	cbnz	r1, 801009a <updRxHandler+0xfa>
 8010096:	2294      	movs	r2, #148	; 0x94
 8010098:	e7c2      	b.n	8010020 <updRxHandler+0x80>
 801009a:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 801009e:	4619      	mov	r1, r3
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff fd17 	bl	800fad4 <enms_strlen_s>
 80100a6:	b330      	cbz	r0, 80100f6 <updRxHandler+0x156>
 80100a8:	2311      	movs	r3, #17
 80100aa:	f88d 3010 	strb.w	r3, [sp, #16]
 80100ae:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 80100b2:	f88d 3011 	strb.w	r3, [sp, #17]
 80100b6:	2300      	movs	r3, #0
 80100b8:	f88d 3012 	strb.w	r3, [sp, #18]
 80100bc:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 80100c0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80100c4:	4631      	mov	r1, r6
 80100c6:	f10d 0013 	add.w	r0, sp, #19
 80100ca:	f00c f804 	bl	801c0d6 <strcpy>
 80100ce:	4620      	mov	r0, r4
 80100d0:	2314      	movs	r3, #20
 80100d2:	f830 2f28 	ldrh.w	r2, [r0, #40]!
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	4629      	mov	r1, r5
 80100da:	ab04      	add	r3, sp, #16
 80100dc:	f7fb ff1c 	bl	800bf18 <EMBENET_UDP_Send>
 80100e0:	4a15      	ldr	r2, [pc, #84]	; (8010138 <updRxHandler+0x198>)
 80100e2:	4603      	mov	r3, r0
 80100e4:	a902      	add	r1, sp, #8
 80100e6:	b940      	cbnz	r0, 80100fa <updRxHandler+0x15a>
 80100e8:	2005      	movs	r0, #5
 80100ea:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80100ee:	4a17      	ldr	r2, [pc, #92]	; (801014c <updRxHandler+0x1ac>)
 80100f0:	c903      	ldmia	r1, {r0, r1}
 80100f2:	f000 fa9f 	bl	8010634 <LOGGER_PrintLine>
 80100f6:	b00a      	add	sp, #40	; 0x28
 80100f8:	bd70      	pop	{r4, r5, r6, pc}
 80100fa:	2303      	movs	r3, #3
 80100fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010100:	4a13      	ldr	r2, [pc, #76]	; (8010150 <updRxHandler+0x1b0>)
 8010102:	c903      	ldmia	r1, {r0, r1}
 8010104:	e7be      	b.n	8010084 <updRxHandler+0xe4>
 8010106:	2221      	movs	r2, #33	; 0x21
 8010108:	4620      	mov	r0, r4
 801010a:	b00a      	add	sp, #40	; 0x28
 801010c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010110:	f7ff bc1e 	b.w	800f950 <sendStatusConfirmationIndication>
 8010114:	2231      	movs	r2, #49	; 0x31
 8010116:	4620      	mov	r0, r4
 8010118:	b00a      	add	sp, #40	; 0x28
 801011a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801011e:	f7ff bce7 	b.w	800faf0 <sendCells>
 8010122:	bf00      	nop
 8010124:	0801fead 	.word	0x0801fead
 8010128:	080201b1 	.word	0x080201b1
 801012c:	080201c9 	.word	0x080201c9
 8010130:	080201ee 	.word	0x080201ee
 8010134:	08020204 	.word	0x08020204
 8010138:	0801ff17 	.word	0x0801ff17
 801013c:	080202cf 	.word	0x080202cf
 8010140:	0801ff0a 	.word	0x0801ff0a
 8010144:	0802021b 	.word	0x0802021b
 8010148:	0802023d 	.word	0x0802023d
 801014c:	08020269 	.word	0x08020269
 8010150:	080202a1 	.word	0x080202a1

08010154 <ENMS_NODE_RegisterService>:
 8010154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010158:	460c      	mov	r4, r1
 801015a:	4691      	mov	r9, r2
 801015c:	4605      	mov	r5, r0
 801015e:	2800      	cmp	r0, #0
 8010160:	d05f      	beq.n	8010222 <ENMS_NODE_RegisterService+0xce>
 8010162:	2900      	cmp	r1, #0
 8010164:	d05d      	beq.n	8010222 <ENMS_NODE_RegisterService+0xce>
 8010166:	2110      	movs	r1, #16
 8010168:	4620      	mov	r0, r4
 801016a:	f7ff fcb3 	bl	800fad4 <enms_strlen_s>
 801016e:	1e43      	subs	r3, r0, #1
 8010170:	2b0f      	cmp	r3, #15
 8010172:	4680      	mov	r8, r0
 8010174:	d855      	bhi.n	8010222 <ENMS_NODE_RegisterService+0xce>
 8010176:	f105 0a8c 	add.w	sl, r5, #140	; 0x8c
 801017a:	4656      	mov	r6, sl
 801017c:	f505 779b 	add.w	r7, r5, #310	; 0x136
 8010180:	2210      	movs	r2, #16
 8010182:	4621      	mov	r1, r4
 8010184:	4630      	mov	r0, r6
 8010186:	f00b ff17 	bl	801bfb8 <strncmp>
 801018a:	b978      	cbnz	r0, 80101ac <ENMS_NODE_RegisterService+0x58>
 801018c:	2303      	movs	r3, #3
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	4b25      	ldr	r3, [pc, #148]	; (8010228 <ENMS_NODE_RegisterService+0xd4>)
 8010192:	9303      	str	r3, [sp, #12]
 8010194:	a904      	add	r1, sp, #16
 8010196:	e911 0003 	ldmdb	r1, {r0, r1}
 801019a:	4a24      	ldr	r2, [pc, #144]	; (801022c <ENMS_NODE_RegisterService+0xd8>)
 801019c:	4623      	mov	r3, r4
 801019e:	f000 fa49 	bl	8010634 <LOGGER_PrintLine>
 80101a2:	2606      	movs	r6, #6
 80101a4:	4630      	mov	r0, r6
 80101a6:	b004      	add	sp, #16
 80101a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ac:	3611      	adds	r6, #17
 80101ae:	42be      	cmp	r6, r7
 80101b0:	d1e6      	bne.n	8010180 <ENMS_NODE_RegisterService+0x2c>
 80101b2:	2300      	movs	r3, #0
 80101b4:	eb03 1703 	add.w	r7, r3, r3, lsl #4
 80101b8:	f81a 6007 	ldrb.w	r6, [sl, r7]
 80101bc:	bb0e      	cbnz	r6, 8010202 <ENMS_NODE_RegisterService+0xae>
 80101be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80101c2:	442b      	add	r3, r5
 80101c4:	4618      	mov	r0, r3
 80101c6:	2210      	movs	r2, #16
 80101c8:	4631      	mov	r1, r6
 80101ca:	f00b feed 	bl	801bfa8 <memset>
 80101ce:	4642      	mov	r2, r8
 80101d0:	4621      	mov	r1, r4
 80101d2:	f00b ff88 	bl	801c0e6 <memcpy>
 80101d6:	442f      	add	r7, r5
 80101d8:	2305      	movs	r3, #5
 80101da:	9302      	str	r3, [sp, #8]
 80101dc:	4b12      	ldr	r3, [pc, #72]	; (8010228 <ENMS_NODE_RegisterService+0xd4>)
 80101de:	9303      	str	r3, [sp, #12]
 80101e0:	f887 909c 	strb.w	r9, [r7, #156]	; 0x9c
 80101e4:	a904      	add	r1, sp, #16
 80101e6:	f8cd 9000 	str.w	r9, [sp]
 80101ea:	4623      	mov	r3, r4
 80101ec:	e911 0003 	ldmdb	r1, {r0, r1}
 80101f0:	4a0f      	ldr	r2, [pc, #60]	; (8010230 <ENMS_NODE_RegisterService+0xdc>)
 80101f2:	f000 fa1f 	bl	8010634 <LOGGER_PrintLine>
 80101f6:	f895 3136 	ldrb.w	r3, [r5, #310]	; 0x136
 80101fa:	3301      	adds	r3, #1
 80101fc:	f885 3136 	strb.w	r3, [r5, #310]	; 0x136
 8010200:	e7d0      	b.n	80101a4 <ENMS_NODE_RegisterService+0x50>
 8010202:	3301      	adds	r3, #1
 8010204:	2b0a      	cmp	r3, #10
 8010206:	d1d5      	bne.n	80101b4 <ENMS_NODE_RegisterService+0x60>
 8010208:	2303      	movs	r3, #3
 801020a:	9302      	str	r3, [sp, #8]
 801020c:	4b06      	ldr	r3, [pc, #24]	; (8010228 <ENMS_NODE_RegisterService+0xd4>)
 801020e:	9303      	str	r3, [sp, #12]
 8010210:	a904      	add	r1, sp, #16
 8010212:	e911 0003 	ldmdb	r1, {r0, r1}
 8010216:	4a07      	ldr	r2, [pc, #28]	; (8010234 <ENMS_NODE_RegisterService+0xe0>)
 8010218:	4623      	mov	r3, r4
 801021a:	f000 fa0b 	bl	8010634 <LOGGER_PrintLine>
 801021e:	2605      	movs	r6, #5
 8010220:	e7c0      	b.n	80101a4 <ENMS_NODE_RegisterService+0x50>
 8010222:	2601      	movs	r6, #1
 8010224:	e7be      	b.n	80101a4 <ENMS_NODE_RegisterService+0x50>
 8010226:	bf00      	nop
 8010228:	0801ff17 	.word	0x0801ff17
 801022c:	0802030a 	.word	0x0802030a
 8010230:	0802032a 	.word	0x0802032a
 8010234:	08020353 	.word	0x08020353

08010238 <ENMS_NODE_Init>:
 8010238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023c:	460f      	mov	r7, r1
 801023e:	b08e      	sub	sp, #56	; 0x38
 8010240:	4615      	mov	r5, r2
 8010242:	461e      	mov	r6, r3
 8010244:	4604      	mov	r4, r0
 8010246:	2800      	cmp	r0, #0
 8010248:	f000 80ac 	beq.w	80103a4 <ENMS_NODE_Init+0x16c>
 801024c:	2a00      	cmp	r2, #0
 801024e:	f000 80a9 	beq.w	80103a4 <ENMS_NODE_Init+0x16c>
 8010252:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010256:	2100      	movs	r1, #0
 8010258:	f00b fea6 	bl	801bfa8 <memset>
 801025c:	462a      	mov	r2, r5
 801025e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8010262:	f105 0110 	add.w	r1, r5, #16
 8010266:	f852 0b04 	ldr.w	r0, [r2], #4
 801026a:	f843 0b04 	str.w	r0, [r3], #4
 801026e:	428a      	cmp	r2, r1
 8010270:	d1f9      	bne.n	8010266 <ENMS_NODE_Init+0x2e>
 8010272:	f7fc f96b 	bl	800c54c <EMBENET_NODE_GetVersion>
 8010276:	6620      	str	r0, [r4, #96]	; 0x60
 8010278:	2e00      	cmp	r6, #0
 801027a:	d056      	beq.n	801032a <ENMS_NODE_Init+0xf2>
 801027c:	4633      	mov	r3, r6
 801027e:	f104 0264 	add.w	r2, r4, #100	; 0x64
 8010282:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8010286:	f853 0b04 	ldr.w	r0, [r3], #4
 801028a:	f842 0b04 	str.w	r0, [r2], #4
 801028e:	428b      	cmp	r3, r1
 8010290:	d1f9      	bne.n	8010286 <ENMS_NODE_Init+0x4e>
 8010292:	2305      	movs	r3, #5
 8010294:	930c      	str	r3, [sp, #48]	; 0x30
 8010296:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801029a:	9308      	str	r3, [sp, #32]
 801029c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801029e:	9307      	str	r3, [sp, #28]
 80102a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80102a4:	9306      	str	r3, [sp, #24]
 80102a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80102aa:	9305      	str	r3, [sp, #20]
 80102ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80102ae:	9304      	str	r3, [sp, #16]
 80102b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80102b2:	9303      	str	r3, [sp, #12]
 80102b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80102b6:	9302      	str	r3, [sp, #8]
 80102b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80102be:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80103a8 <ENMS_NODE_Init+0x170>
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80102c8:	ae0c      	add	r6, sp, #48	; 0x30
 80102ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 80102ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102d0:	4a36      	ldr	r2, [pc, #216]	; (80103ac <ENMS_NODE_Init+0x174>)
 80102d2:	f000 f9af 	bl	8010634 <LOGGER_PrintLine>
 80102d6:	f24f 03b1 	movw	r3, #61617	; 0xf0b1
 80102da:	2f00      	cmp	r7, #0
 80102dc:	bf08      	it	eq
 80102de:	461f      	moveq	r7, r3
 80102e0:	2302      	movs	r3, #2
 80102e2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80102e6:	2200      	movs	r2, #0
 80102e8:	4b31      	ldr	r3, [pc, #196]	; (80103b0 <ENMS_NODE_Init+0x178>)
 80102ea:	6323      	str	r3, [r4, #48]	; 0x30
 80102ec:	8527      	strh	r7, [r4, #40]	; 0x28
 80102ee:	85a2      	strh	r2, [r4, #44]	; 0x2c
 80102f0:	6364      	str	r4, [r4, #52]	; 0x34
 80102f2:	4623      	mov	r3, r4
 80102f4:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 80102f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80102fc:	3311      	adds	r3, #17
 80102fe:	428b      	cmp	r3, r1
 8010300:	d1fa      	bne.n	80102f8 <ENMS_NODE_Init+0xc0>
 8010302:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8010306:	4638      	mov	r0, r7
 8010308:	f7fb fdee 	bl	800bee8 <EMBENET_UDP_RegisterSocket>
 801030c:	4605      	mov	r5, r0
 801030e:	b1f8      	cbz	r0, 8010350 <ENMS_NODE_Init+0x118>
 8010310:	2303      	movs	r3, #3
 8010312:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 8010316:	4a27      	ldr	r2, [pc, #156]	; (80103b4 <ENMS_NODE_Init+0x17c>)
 8010318:	e896 0003 	ldmia.w	r6, {r0, r1}
 801031c:	f000 f98a 	bl	8010634 <LOGGER_PrintLine>
 8010320:	2502      	movs	r5, #2
 8010322:	4628      	mov	r0, r5
 8010324:	b00e      	add	sp, #56	; 0x38
 8010326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801032a:	230a      	movs	r3, #10
 801032c:	6663      	str	r3, [r4, #100]	; 0x64
 801032e:	231e      	movs	r3, #30
 8010330:	66e3      	str	r3, [r4, #108]	; 0x6c
 8010332:	6763      	str	r3, [r4, #116]	; 0x74
 8010334:	233c      	movs	r3, #60	; 0x3c
 8010336:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801033a:	67e3      	str	r3, [r4, #124]	; 0x7c
 801033c:	66a3      	str	r3, [r4, #104]	; 0x68
 801033e:	6723      	str	r3, [r4, #112]	; 0x70
 8010340:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8010344:	67a3      	str	r3, [r4, #120]	; 0x78
 8010346:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801034a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801034e:	e7a0      	b.n	8010292 <ENMS_NODE_Init+0x5a>
 8010350:	4819      	ldr	r0, [pc, #100]	; (80103b8 <ENMS_NODE_Init+0x180>)
 8010352:	4621      	mov	r1, r4
 8010354:	f7fb febe 	bl	800c0d4 <EMBENET_NODE_TaskCreate>
 8010358:	64e0      	str	r0, [r4, #76]	; 0x4c
 801035a:	3001      	adds	r0, #1
 801035c:	d10b      	bne.n	8010376 <ENMS_NODE_Init+0x13e>
 801035e:	2503      	movs	r5, #3
 8010360:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
 8010364:	4a15      	ldr	r2, [pc, #84]	; (80103bc <ENMS_NODE_Init+0x184>)
 8010366:	e896 0003 	ldmia.w	r6, {r0, r1}
 801036a:	f000 f963 	bl	8010634 <LOGGER_PrintLine>
 801036e:	4638      	mov	r0, r7
 8010370:	f7fb fdc6 	bl	800bf00 <EMBENET_UDP_UnregisterSocket>
 8010374:	e7d5      	b.n	8010322 <ENMS_NODE_Init+0xea>
 8010376:	4912      	ldr	r1, [pc, #72]	; (80103c0 <ENMS_NODE_Init+0x188>)
 8010378:	462a      	mov	r2, r5
 801037a:	4620      	mov	r0, r4
 801037c:	f7ff feea 	bl	8010154 <ENMS_NODE_RegisterService>
 8010380:	b138      	cbz	r0, 8010392 <ENMS_NODE_Init+0x15a>
 8010382:	2303      	movs	r3, #3
 8010384:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 8010388:	4a0e      	ldr	r2, [pc, #56]	; (80103c4 <ENMS_NODE_Init+0x18c>)
 801038a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801038e:	f000 f951 	bl	8010634 <LOGGER_PrintLine>
 8010392:	2305      	movs	r3, #5
 8010394:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
 8010398:	4a0b      	ldr	r2, [pc, #44]	; (80103c8 <ENMS_NODE_Init+0x190>)
 801039a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801039e:	f000 f949 	bl	8010634 <LOGGER_PrintLine>
 80103a2:	e7be      	b.n	8010322 <ENMS_NODE_Init+0xea>
 80103a4:	2501      	movs	r5, #1
 80103a6:	e7bc      	b.n	8010322 <ENMS_NODE_Init+0xea>
 80103a8:	0801ff17 	.word	0x0801ff17
 80103ac:	08020372 	.word	0x08020372
 80103b0:	0800ffa1 	.word	0x0800ffa1
 80103b4:	080203e3 	.word	0x080203e3
 80103b8:	0800fd59 	.word	0x0800fd59
 80103bc:	08020416 	.word	0x08020416
 80103c0:	08020443 	.word	0x08020443
 80103c4:	08020448 	.word	0x08020448
 80103c8:	08020464 	.word	0x08020464

080103cc <ENMS_NODE_SetServiceState>:
 80103cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80103d0:	460d      	mov	r5, r1
 80103d2:	4617      	mov	r7, r2
 80103d4:	4606      	mov	r6, r0
 80103d6:	b340      	cbz	r0, 801042a <ENMS_NODE_SetServiceState+0x5e>
 80103d8:	b339      	cbz	r1, 801042a <ENMS_NODE_SetServiceState+0x5e>
 80103da:	2111      	movs	r1, #17
 80103dc:	4628      	mov	r0, r5
 80103de:	f7ff fb79 	bl	800fad4 <enms_strlen_s>
 80103e2:	3801      	subs	r0, #1
 80103e4:	280f      	cmp	r0, #15
 80103e6:	d820      	bhi.n	801042a <ENMS_NODE_SetServiceState+0x5e>
 80103e8:	f106 088c 	add.w	r8, r6, #140	; 0x8c
 80103ec:	2400      	movs	r4, #0
 80103ee:	2210      	movs	r2, #16
 80103f0:	4629      	mov	r1, r5
 80103f2:	4640      	mov	r0, r8
 80103f4:	f00b fde0 	bl	801bfb8 <strncmp>
 80103f8:	b938      	cbnz	r0, 801040a <ENMS_NODE_SetServiceState+0x3e>
 80103fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80103fe:	4434      	add	r4, r6
 8010400:	f884 709c 	strb.w	r7, [r4, #156]	; 0x9c
 8010404:	b002      	add	sp, #8
 8010406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040a:	3401      	adds	r4, #1
 801040c:	2c0a      	cmp	r4, #10
 801040e:	f108 0811 	add.w	r8, r8, #17
 8010412:	d1ec      	bne.n	80103ee <ENMS_NODE_SetServiceState+0x22>
 8010414:	2303      	movs	r3, #3
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	4b05      	ldr	r3, [pc, #20]	; (8010430 <ENMS_NODE_SetServiceState+0x64>)
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	a902      	add	r1, sp, #8
 801041e:	e911 0003 	ldmdb	r1, {r0, r1}
 8010422:	4a04      	ldr	r2, [pc, #16]	; (8010434 <ENMS_NODE_SetServiceState+0x68>)
 8010424:	462b      	mov	r3, r5
 8010426:	f000 f905 	bl	8010634 <LOGGER_PrintLine>
 801042a:	2001      	movs	r0, #1
 801042c:	e7ea      	b.n	8010404 <ENMS_NODE_SetServiceState+0x38>
 801042e:	bf00      	nop
 8010430:	0801ff17 	.word	0x0801ff17
 8010434:	08020478 	.word	0x08020478

08010438 <ENMS_NODE_Start>:
 8010438:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801043c:	4604      	mov	r4, r0
 801043e:	2800      	cmp	r0, #0
 8010440:	f000 8087 	beq.w	8010552 <ENMS_NODE_Start+0x11a>
 8010444:	303c      	adds	r0, #60	; 0x3c
 8010446:	f7fc f813 	bl	800c470 <EMBENET_NODE_GetBorderRouterAddress>
 801044a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8010558 <ENMS_NODE_Start+0x120>
 801044e:	4681      	mov	r9, r0
 8010450:	466f      	mov	r7, sp
 8010452:	b160      	cbz	r0, 801046e <ENMS_NODE_Start+0x36>
 8010454:	2303      	movs	r3, #3
 8010456:	e9cd 3800 	strd	r3, r8, [sp]
 801045a:	4a40      	ldr	r2, [pc, #256]	; (801055c <ENMS_NODE_Start+0x124>)
 801045c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010460:	f000 f8e8 	bl	8010634 <LOGGER_PrintLine>
 8010464:	2504      	movs	r5, #4
 8010466:	4628      	mov	r0, r5
 8010468:	b002      	add	sp, #8
 801046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801046e:	f7fb fd6b 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 8010472:	4605      	mov	r5, r0
 8010474:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8010476:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 801047a:	fb0a f000 	mul.w	r0, sl, r0
 801047e:	460e      	mov	r6, r1
 8010480:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 8010484:	f7fc f860 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 8010488:	1940      	adds	r0, r0, r5
 801048a:	f146 0300 	adc.w	r3, r6, #0
 801048e:	e9c4 0300 	strd	r0, r3, [r4]
 8010492:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010494:	fb0a f000 	mul.w	r0, sl, r0
 8010498:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 801049c:	f7fc f854 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 80104a0:	1940      	adds	r0, r0, r5
 80104a2:	f146 0300 	adc.w	r3, r6, #0
 80104a6:	e9c4 0302 	strd	r0, r3, [r4, #8]
 80104aa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80104ac:	fb0a f000 	mul.w	r0, sl, r0
 80104b0:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 80104b4:	f7fc f848 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 80104b8:	1940      	adds	r0, r0, r5
 80104ba:	f146 0300 	adc.w	r3, r6, #0
 80104be:	e9c4 0304 	strd	r0, r3, [r4, #16]
 80104c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80104c4:	fb0a f000 	mul.w	r0, sl, r0
 80104c8:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 80104cc:	f7fc f83c 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 80104d0:	1940      	adds	r0, r0, r5
 80104d2:	f146 0300 	adc.w	r3, r6, #0
 80104d6:	e9c4 0306 	strd	r0, r3, [r4, #24]
 80104da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80104de:	fb0a f000 	mul.w	r0, sl, r0
 80104e2:	eb00 0190 	add.w	r1, r0, r0, lsr #2
 80104e6:	f7fc f82f 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 80104ea:	1940      	adds	r0, r0, r5
 80104ec:	f146 0600 	adc.w	r6, r6, #0
 80104f0:	e9c4 0608 	strd	r0, r6, [r4, #32]
 80104f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80104f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80104fc:	f7fc f824 	bl	800c548 <EMBENET_NODE_GetRandomValue>
 8010500:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8010502:	4605      	mov	r5, r0
 8010504:	f7fb fd20 	bl	800bf48 <EMBENET_NODE_GetLocalTime>
 8010508:	182a      	adds	r2, r5, r0
 801050a:	f141 0300 	adc.w	r3, r1, #0
 801050e:	4630      	mov	r0, r6
 8010510:	4649      	mov	r1, r9
 8010512:	f7fb fed1 	bl	800c2b8 <EMBENET_NODE_TaskSchedule>
 8010516:	4605      	mov	r5, r0
 8010518:	b120      	cbz	r0, 8010524 <ENMS_NODE_Start+0xec>
 801051a:	2303      	movs	r3, #3
 801051c:	e9cd 3800 	strd	r3, r8, [sp]
 8010520:	4a0f      	ldr	r2, [pc, #60]	; (8010560 <ENMS_NODE_Start+0x128>)
 8010522:	e79b      	b.n	801045c <ENMS_NODE_Start+0x24>
 8010524:	490f      	ldr	r1, [pc, #60]	; (8010564 <ENMS_NODE_Start+0x12c>)
 8010526:	2201      	movs	r2, #1
 8010528:	4620      	mov	r0, r4
 801052a:	f7ff ff4f 	bl	80103cc <ENMS_NODE_SetServiceState>
 801052e:	b138      	cbz	r0, 8010540 <ENMS_NODE_Start+0x108>
 8010530:	2303      	movs	r3, #3
 8010532:	e9cd 3800 	strd	r3, r8, [sp]
 8010536:	4a0c      	ldr	r2, [pc, #48]	; (8010568 <ENMS_NODE_Start+0x130>)
 8010538:	e897 0003 	ldmia.w	r7, {r0, r1}
 801053c:	f000 f87a 	bl	8010634 <LOGGER_PrintLine>
 8010540:	2305      	movs	r3, #5
 8010542:	e9cd 3800 	strd	r3, r8, [sp]
 8010546:	4a09      	ldr	r2, [pc, #36]	; (801056c <ENMS_NODE_Start+0x134>)
 8010548:	e897 0003 	ldmia.w	r7, {r0, r1}
 801054c:	f000 f872 	bl	8010634 <LOGGER_PrintLine>
 8010550:	e789      	b.n	8010466 <ENMS_NODE_Start+0x2e>
 8010552:	2501      	movs	r5, #1
 8010554:	e787      	b.n	8010466 <ENMS_NODE_Start+0x2e>
 8010556:	bf00      	nop
 8010558:	0801ff17 	.word	0x0801ff17
 801055c:	08020498 	.word	0x08020498
 8010560:	080204b6 	.word	0x080204b6
 8010564:	08020443 	.word	0x08020443
 8010568:	080204ce 	.word	0x080204ce
 801056c:	080204eb 	.word	0x080204eb

08010570 <ENMS_NODE_Stop>:
 8010570:	b513      	push	{r0, r1, r4, lr}
 8010572:	4604      	mov	r4, r0
 8010574:	b1b0      	cbz	r0, 80105a4 <ENMS_NODE_Stop+0x34>
 8010576:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010578:	f7fb ff66 	bl	800c448 <EMBENET_NODE_TaskCancel>
 801057c:	490a      	ldr	r1, [pc, #40]	; (80105a8 <ENMS_NODE_Stop+0x38>)
 801057e:	2200      	movs	r2, #0
 8010580:	4620      	mov	r0, r4
 8010582:	f7ff ff23 	bl	80103cc <ENMS_NODE_SetServiceState>
 8010586:	b910      	cbnz	r0, 801058e <ENMS_NODE_Stop+0x1e>
 8010588:	2000      	movs	r0, #0
 801058a:	b002      	add	sp, #8
 801058c:	bd10      	pop	{r4, pc}
 801058e:	2303      	movs	r3, #3
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	4b06      	ldr	r3, [pc, #24]	; (80105ac <ENMS_NODE_Stop+0x3c>)
 8010594:	9301      	str	r3, [sp, #4]
 8010596:	ab02      	add	r3, sp, #8
 8010598:	e913 0003 	ldmdb	r3, {r0, r1}
 801059c:	4a04      	ldr	r2, [pc, #16]	; (80105b0 <ENMS_NODE_Stop+0x40>)
 801059e:	f000 f849 	bl	8010634 <LOGGER_PrintLine>
 80105a2:	e7f1      	b.n	8010588 <ENMS_NODE_Stop+0x18>
 80105a4:	2001      	movs	r0, #1
 80105a6:	e7f0      	b.n	801058a <ENMS_NODE_Stop+0x1a>
 80105a8:	08020443 	.word	0x08020443
 80105ac:	0801ff17 	.word	0x0801ff17
 80105b0:	080204ce 	.word	0x080204ce

080105b4 <LOGGER_PrintNL>:
 80105b4:	4b02      	ldr	r3, [pc, #8]	; (80105c0 <LOGGER_PrintNL+0xc>)
 80105b6:	200a      	movs	r0, #10
 80105b8:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80105bc:	4710      	bx	r2
 80105be:	bf00      	nop
 80105c0:	20003e48 	.word	0x20003e48

080105c4 <LOGGER_Print>:
 80105c4:	b40f      	push	{r0, r1, r2, r3}
 80105c6:	b507      	push	{r0, r1, r2, lr}
 80105c8:	4806      	ldr	r0, [pc, #24]	; (80105e4 <LOGGER_Print+0x20>)
 80105ca:	ab04      	add	r3, sp, #16
 80105cc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80105d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	f000 fdb4 	bl	8011142 <9d4397e1c276e28163cdc66582db3f5f3477f47c>
 80105da:	b003      	add	sp, #12
 80105dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80105e0:	b004      	add	sp, #16
 80105e2:	4770      	bx	lr
 80105e4:	20003e48 	.word	0x20003e48

080105e8 <LOGGER_StartSection>:
 80105e8:	4b01      	ldr	r3, [pc, #4]	; (80105f0 <LOGGER_StartSection+0x8>)
 80105ea:	7818      	ldrb	r0, [r3, #0]
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	20003e48 	.word	0x20003e48

080105f4 <LOGGER_EndSection>:
 80105f4:	4770      	bx	lr
	...

080105f8 <LOGGER_PrintHeader>:
 80105f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105fa:	4c0b      	ldr	r4, [pc, #44]	; (8010628 <LOGGER_PrintHeader+0x30>)
 80105fc:	ab04      	add	r3, sp, #16
 80105fe:	e903 0003 	stmdb	r3, {r0, r1}
 8010602:	7863      	ldrb	r3, [r4, #1]
 8010604:	b973      	cbnz	r3, 8010624 <LOGGER_PrintHeader+0x2c>
 8010606:	68e3      	ldr	r3, [r4, #12]
 8010608:	b10b      	cbz	r3, 801060e <LOGGER_PrintHeader+0x16>
 801060a:	4798      	blx	r3
 801060c:	4603      	mov	r3, r0
 801060e:	4907      	ldr	r1, [pc, #28]	; (801062c <LOGGER_PrintHeader+0x34>)
 8010610:	9a02      	ldr	r2, [sp, #8]
 8010612:	5c8a      	ldrb	r2, [r1, r2]
 8010614:	9201      	str	r2, [sp, #4]
 8010616:	9a03      	ldr	r2, [sp, #12]
 8010618:	9200      	str	r2, [sp, #0]
 801061a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 801061e:	4a04      	ldr	r2, [pc, #16]	; (8010630 <LOGGER_PrintHeader+0x38>)
 8010620:	f000 fd7e 	bl	8011120 <5dd4cf8b4cc3211a4d064c2aba27f240e0c6a1fc>
 8010624:	b004      	add	sp, #16
 8010626:	bd10      	pop	{r4, pc}
 8010628:	20003e48 	.word	0x20003e48
 801062c:	08020509 	.word	0x08020509
 8010630:	080204fb 	.word	0x080204fb

08010634 <LOGGER_PrintLine>:
 8010634:	b40c      	push	{r2, r3}
 8010636:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010638:	4c0b      	ldr	r4, [pc, #44]	; (8010668 <LOGGER_PrintLine+0x34>)
 801063a:	7822      	ldrb	r2, [r4, #0]
 801063c:	466b      	mov	r3, sp
 801063e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010642:	b162      	cbz	r2, 801065e <LOGGER_PrintLine+0x2a>
 8010644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010648:	f7ff ffd6 	bl	80105f8 <LOGGER_PrintHeader>
 801064c:	ab07      	add	r3, sp, #28
 801064e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8010652:	9a06      	ldr	r2, [sp, #24]
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	f000 fd74 	bl	8011142 <9d4397e1c276e28163cdc66582db3f5f3477f47c>
 801065a:	f7ff ffab 	bl	80105b4 <LOGGER_PrintNL>
 801065e:	b004      	add	sp, #16
 8010660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010664:	b002      	add	sp, #8
 8010666:	4770      	bx	lr
 8010668:	20003e48 	.word	0x20003e48

0801066c <626e3158957e216ecf22af8444eac4e472537274>:
 801066c:	b110      	cbz	r0, 8010674 <626e3158957e216ecf22af8444eac4e472537274+0x8>
 801066e:	e9d1 3100 	ldrd	r3, r1, [r1]
 8010672:	4718      	bx	r3
 8010674:	4770      	bx	lr

08010676 <24edba6ab381ef8da8eede88a6ac6de0c2e16560>:
 8010676:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067a:	461e      	mov	r6, r3
 801067c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801067e:	4615      	mov	r5, r2
 8010680:	079a      	lsls	r2, r3, #30
 8010682:	e9dd 490a 	ldrd	r4, r9, [sp, #40]	; 0x28
 8010686:	4607      	mov	r7, r0
 8010688:	4688      	mov	r8, r1
 801068a:	d021      	beq.n	80106d0 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x5a>
 801068c:	462a      	mov	r2, r5
 801068e:	4426      	add	r6, r4
 8010690:	4414      	add	r4, r2
 8010692:	42a2      	cmp	r2, r4
 8010694:	d120      	bne.n	80106d8 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x62>
 8010696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010698:	079b      	lsls	r3, r3, #30
 801069a:	d504      	bpl.n	80106a6 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x30>
 801069c:	1b56      	subs	r6, r2, r5
 801069e:	45b1      	cmp	r9, r6
 80106a0:	eb05 0406 	add.w	r4, r5, r6
 80106a4:	d822      	bhi.n	80106ec <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x76>
 80106a6:	4620      	mov	r0, r4
 80106a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ac:	f04f 33ff 	mov.w	r3, #4294967295
 80106b0:	4641      	mov	r1, r8
 80106b2:	2020      	movs	r0, #32
 80106b4:	47b8      	blx	r7
 80106b6:	f10a 0a01 	add.w	sl, sl, #1
 80106ba:	45ca      	cmp	sl, r9
 80106bc:	eb0a 020b 	add.w	r2, sl, fp
 80106c0:	d3f4      	bcc.n	80106ac <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x36>
 80106c2:	eba9 0204 	sub.w	r2, r9, r4
 80106c6:	45a1      	cmp	r9, r4
 80106c8:	bf38      	it	cc
 80106ca:	2200      	movcc	r2, #0
 80106cc:	442a      	add	r2, r5
 80106ce:	e7de      	b.n	801068e <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x18>
 80106d0:	46a2      	mov	sl, r4
 80106d2:	eba5 0b04 	sub.w	fp, r5, r4
 80106d6:	e7f0      	b.n	80106ba <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x44>
 80106d8:	f102 0a01 	add.w	sl, r2, #1
 80106dc:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80106e0:	f04f 33ff 	mov.w	r3, #4294967295
 80106e4:	4641      	mov	r1, r8
 80106e6:	47b8      	blx	r7
 80106e8:	4652      	mov	r2, sl
 80106ea:	e7d2      	b.n	8010692 <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x1c>
 80106ec:	f04f 33ff 	mov.w	r3, #4294967295
 80106f0:	4622      	mov	r2, r4
 80106f2:	4641      	mov	r1, r8
 80106f4:	2020      	movs	r0, #32
 80106f6:	47b8      	blx	r7
 80106f8:	3601      	adds	r6, #1
 80106fa:	e7d0      	b.n	801069e <24edba6ab381ef8da8eede88a6ac6de0c2e16560+0x28>

080106fc <13578b4cfbc3b566478112f4f180e083a3d4cb34>:
 80106fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010700:	4694      	mov	ip, r2
 8010702:	e9dd 270b 	ldrd	r2, r7, [sp, #44]	; 0x2c
 8010706:	f017 0f02 	tst.w	r7, #2
 801070a:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	; 0x24
 801070e:	9c07      	ldr	r4, [sp, #28]
 8010710:	f89d e020 	ldrb.w	lr, [sp, #32]
 8010714:	d11f      	bne.n	8010756 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 8010716:	f007 0801 	and.w	r8, r7, #1
 801071a:	b14a      	cbz	r2, 8010730 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 801071c:	f1b8 0f00 	cmp.w	r8, #0
 8010720:	d006      	beq.n	8010730 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 8010722:	f1be 0f00 	cmp.w	lr, #0
 8010726:	d102      	bne.n	801072e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x32>
 8010728:	f017 0f0c 	tst.w	r7, #12
 801072c:	d000      	beq.n	8010730 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x34>
 801072e:	3a01      	subs	r2, #1
 8010730:	f04f 0930 	mov.w	r9, #48	; 0x30
 8010734:	e002      	b.n	801073c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x40>
 8010736:	f803 9004 	strb.w	r9, [r3, r4]
 801073a:	3401      	adds	r4, #1
 801073c:	42a5      	cmp	r5, r4
 801073e:	d901      	bls.n	8010744 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x48>
 8010740:	2c20      	cmp	r4, #32
 8010742:	d1f8      	bne.n	8010736 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x3a>
 8010744:	f1b8 0f00 	cmp.w	r8, #0
 8010748:	d005      	beq.n	8010756 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 801074a:	f04f 0830 	mov.w	r8, #48	; 0x30
 801074e:	42a2      	cmp	r2, r4
 8010750:	d901      	bls.n	8010756 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x5a>
 8010752:	2c20      	cmp	r4, #32
 8010754:	d11a      	bne.n	801078c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x90>
 8010756:	f017 0f10 	tst.w	r7, #16
 801075a:	d014      	beq.n	8010786 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x8a>
 801075c:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8010760:	d130      	bne.n	80107c4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xc8>
 8010762:	b1bc      	cbz	r4, 8010794 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x98>
 8010764:	42a5      	cmp	r5, r4
 8010766:	d001      	beq.n	801076c <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x70>
 8010768:	4294      	cmp	r4, r2
 801076a:	d12b      	bne.n	80107c4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xc8>
 801076c:	1e65      	subs	r5, r4, #1
 801076e:	d011      	beq.n	8010794 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x98>
 8010770:	2e10      	cmp	r6, #16
 8010772:	d133      	bne.n	80107dc <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xe0>
 8010774:	06be      	lsls	r6, r7, #26
 8010776:	f1a4 0402 	sub.w	r4, r4, #2
 801077a:	d452      	bmi.n	8010822 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x126>
 801077c:	2678      	movs	r6, #120	; 0x78
 801077e:	551e      	strb	r6, [r3, r4]
 8010780:	2630      	movs	r6, #48	; 0x30
 8010782:	555e      	strb	r6, [r3, r5]
 8010784:	1c6c      	adds	r4, r5, #1
 8010786:	2c20      	cmp	r4, #32
 8010788:	d034      	beq.n	80107f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 801078a:	e00c      	b.n	80107a6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xaa>
 801078c:	f803 8004 	strb.w	r8, [r3, r4]
 8010790:	3401      	adds	r4, #1
 8010792:	e7dc      	b.n	801074e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x52>
 8010794:	2e10      	cmp	r6, #16
 8010796:	d10f      	bne.n	80107b8 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xbc>
 8010798:	06be      	lsls	r6, r7, #26
 801079a:	d425      	bmi.n	80107e8 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xec>
 801079c:	2478      	movs	r4, #120	; 0x78
 801079e:	701c      	strb	r4, [r3, #0]
 80107a0:	2430      	movs	r4, #48	; 0x30
 80107a2:	705c      	strb	r4, [r3, #1]
 80107a4:	2402      	movs	r4, #2
 80107a6:	f1be 0f00 	cmp.w	lr, #0
 80107aa:	d030      	beq.n	801080e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x112>
 80107ac:	252d      	movs	r5, #45	; 0x2d
 80107ae:	551d      	strb	r5, [r3, r4]
 80107b0:	3401      	adds	r4, #1
 80107b2:	e020      	b.n	80107f6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xfa>
 80107b4:	2462      	movs	r4, #98	; 0x62
 80107b6:	e7f2      	b.n	801079e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xa2>
 80107b8:	2e02      	cmp	r6, #2
 80107ba:	d0fb      	beq.n	80107b4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb8>
 80107bc:	2430      	movs	r4, #48	; 0x30
 80107be:	701c      	strb	r4, [r3, #0]
 80107c0:	2401      	movs	r4, #1
 80107c2:	e7f0      	b.n	80107a6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xaa>
 80107c4:	2e10      	cmp	r6, #16
 80107c6:	d111      	bne.n	80107ec <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf0>
 80107c8:	06bd      	lsls	r5, r7, #26
 80107ca:	d428      	bmi.n	801081e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x122>
 80107cc:	2c20      	cmp	r4, #32
 80107ce:	d011      	beq.n	80107f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 80107d0:	1c65      	adds	r5, r4, #1
 80107d2:	2678      	movs	r6, #120	; 0x78
 80107d4:	551e      	strb	r6, [r3, r4]
 80107d6:	2d20      	cmp	r5, #32
 80107d8:	d00c      	beq.n	80107f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 80107da:	e7d1      	b.n	8010780 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x84>
 80107dc:	2e02      	cmp	r6, #2
 80107de:	d1cf      	bne.n	8010780 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x84>
 80107e0:	2462      	movs	r4, #98	; 0x62
 80107e2:	555c      	strb	r4, [r3, r5]
 80107e4:	3501      	adds	r5, #1
 80107e6:	e7f6      	b.n	80107d6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xda>
 80107e8:	2458      	movs	r4, #88	; 0x58
 80107ea:	e7d8      	b.n	801079e <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xa2>
 80107ec:	2e02      	cmp	r6, #2
 80107ee:	d10c      	bne.n	801080a <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x10e>
 80107f0:	2c20      	cmp	r4, #32
 80107f2:	d108      	bne.n	8010806 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x10a>
 80107f4:	2420      	movs	r4, #32
 80107f6:	e9cd 2708 	strd	r2, r7, [sp, #32]
 80107fa:	9407      	str	r4, [sp, #28]
 80107fc:	4662      	mov	r2, ip
 80107fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010802:	f7ff bf38 	b.w	8010676 <24edba6ab381ef8da8eede88a6ac6de0c2e16560>
 8010806:	4625      	mov	r5, r4
 8010808:	e7ea      	b.n	80107e0 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xe4>
 801080a:	4625      	mov	r5, r4
 801080c:	e7e3      	b.n	80107d6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xda>
 801080e:	077e      	lsls	r6, r7, #29
 8010810:	d501      	bpl.n	8010816 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0x11a>
 8010812:	252b      	movs	r5, #43	; 0x2b
 8010814:	e7cb      	b.n	80107ae <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb2>
 8010816:	073d      	lsls	r5, r7, #28
 8010818:	d5ed      	bpl.n	80107f6 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xfa>
 801081a:	2520      	movs	r5, #32
 801081c:	e7c7      	b.n	80107ae <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xb2>
 801081e:	2c20      	cmp	r4, #32
 8010820:	d0e8      	beq.n	80107f4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xf8>
 8010822:	1c65      	adds	r5, r4, #1
 8010824:	2658      	movs	r6, #88	; 0x58
 8010826:	e7d5      	b.n	80107d4 <13578b4cfbc3b566478112f4f180e083a3d4cb34+0xd8>

08010828 <a489971c3e4840c7373cb8be8004d6ffd709aef1>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	b08e      	sub	sp, #56	; 0x38
 801082e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010830:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8010832:	bbab      	cbnz	r3, 80108a0 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x78>
 8010834:	f024 0c10 	bic.w	ip, r4, #16
 8010838:	f414 6480 	ands.w	r4, r4, #1024	; 0x400
 801083c:	d11f      	bne.n	801087e <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x56>
 801083e:	f01c 0f20 	tst.w	ip, #32
 8010842:	bf14      	ite	ne
 8010844:	f04f 0e41 	movne.w	lr, #65	; 0x41
 8010848:	f04f 0e61 	moveq.w	lr, #97	; 0x61
 801084c:	f10d 0818 	add.w	r8, sp, #24
 8010850:	2300      	movs	r3, #0
 8010852:	f1ae 0e0a 	sub.w	lr, lr, #10
 8010856:	fbb4 f7f6 	udiv	r7, r4, r6
 801085a:	fb06 4717 	mls	r7, r6, r7, r4
 801085e:	b2fd      	uxtb	r5, r7
 8010860:	2f09      	cmp	r7, #9
 8010862:	bf94      	ite	ls
 8010864:	3530      	addls	r5, #48	; 0x30
 8010866:	4475      	addhi	r5, lr
 8010868:	b2ed      	uxtb	r5, r5
 801086a:	42b4      	cmp	r4, r6
 801086c:	f808 5b01 	strb.w	r5, [r8], #1
 8010870:	fbb4 f5f6 	udiv	r5, r4, r6
 8010874:	f103 0301 	add.w	r3, r3, #1
 8010878:	d301      	bcc.n	801087e <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x56>
 801087a:	2b20      	cmp	r3, #32
 801087c:	d113      	bne.n	80108a6 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x7e>
 801087e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8010880:	9404      	str	r4, [sp, #16]
 8010882:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8010884:	f8cd c014 	str.w	ip, [sp, #20]
 8010888:	e9cd 6402 	strd	r6, r4, [sp, #8]
 801088c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8010890:	e9cd 3400 	strd	r3, r4, [sp]
 8010894:	ab06      	add	r3, sp, #24
 8010896:	f7ff ff31 	bl	80106fc <13578b4cfbc3b566478112f4f180e083a3d4cb34>
 801089a:	b00e      	add	sp, #56	; 0x38
 801089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a0:	46a4      	mov	ip, r4
 80108a2:	461c      	mov	r4, r3
 80108a4:	e7cb      	b.n	801083e <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x16>
 80108a6:	462c      	mov	r4, r5
 80108a8:	e7d5      	b.n	8010856 <a489971c3e4840c7373cb8be8004d6ffd709aef1+0x2e>

080108aa <de6b597d7994a76b5b8b87d2b8de60ea42b48b58>:
 80108aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ae:	b093      	sub	sp, #76	; 0x4c
 80108b0:	e9dd 651c 	ldrd	r6, r5, [sp, #112]	; 0x70
 80108b4:	9209      	str	r2, [sp, #36]	; 0x24
 80108b6:	ea56 0205 	orrs.w	r2, r6, r5
 80108ba:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80108be:	e9dd 8b20 	ldrd	r8, fp, [sp, #128]	; 0x80
 80108c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80108c4:	d137      	bne.n	8010936 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x8c>
 80108c6:	055a      	lsls	r2, r3, #21
 80108c8:	f023 0910 	bic.w	r9, r3, #16
 80108cc:	d438      	bmi.n	8010940 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x96>
 80108ce:	f019 0f20 	tst.w	r9, #32
 80108d2:	bf14      	ite	ne
 80108d4:	2341      	movne	r3, #65	; 0x41
 80108d6:	2361      	moveq	r3, #97	; 0x61
 80108d8:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80108dc:	2400      	movs	r4, #0
 80108de:	f1a3 070a 	sub.w	r7, r3, #10
 80108e2:	4629      	mov	r1, r5
 80108e4:	4642      	mov	r2, r8
 80108e6:	465b      	mov	r3, fp
 80108e8:	4630      	mov	r0, r6
 80108ea:	f7f0 f98f 	bl	8000c0c <__aeabi_uldivmod>
 80108ee:	b2d2      	uxtb	r2, r2
 80108f0:	2a09      	cmp	r2, #9
 80108f2:	bf94      	ite	ls
 80108f4:	3230      	addls	r2, #48	; 0x30
 80108f6:	19d2      	addhi	r2, r2, r7
 80108f8:	4546      	cmp	r6, r8
 80108fa:	b2d2      	uxtb	r2, r2
 80108fc:	eb75 050b 	sbcs.w	r5, r5, fp
 8010900:	f80a 2b01 	strb.w	r2, [sl], #1
 8010904:	f104 0401 	add.w	r4, r4, #1
 8010908:	d301      	bcc.n	801090e <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x64>
 801090a:	2c20      	cmp	r4, #32
 801090c:	d115      	bne.n	801093a <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x90>
 801090e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010910:	9304      	str	r3, [sp, #16]
 8010912:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010914:	9807      	ldr	r0, [sp, #28]
 8010916:	f8cd 9014 	str.w	r9, [sp, #20]
 801091a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 801091e:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8010922:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010926:	e9cd 4300 	strd	r4, r3, [sp]
 801092a:	ab0a      	add	r3, sp, #40	; 0x28
 801092c:	f7ff fee6 	bl	80106fc <13578b4cfbc3b566478112f4f180e083a3d4cb34>
 8010930:	b013      	add	sp, #76	; 0x4c
 8010932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010936:	4699      	mov	r9, r3
 8010938:	e7c9      	b.n	80108ce <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x24>
 801093a:	4606      	mov	r6, r0
 801093c:	460d      	mov	r5, r1
 801093e:	e7d0      	b.n	80108e2 <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x38>
 8010940:	2400      	movs	r4, #0
 8010942:	e7e4      	b.n	801090e <de6b597d7994a76b5b8b87d2b8de60ea42b48b58+0x64>
 8010944:	0000      	movs	r0, r0
	...

08010948 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	b09d      	sub	sp, #116	; 0x74
 801094e:	468b      	mov	fp, r1
 8010950:	900b      	str	r0, [sp, #44]	; 0x2c
 8010952:	4615      	mov	r5, r2
 8010954:	2400      	movs	r4, #0
 8010956:	f89b 0000 	ldrb.w	r0, [fp]
 801095a:	b968      	cbnz	r0, 8010978 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x30>
 801095c:	f06f 0201 	mvn.w	r2, #1
 8010960:	42a2      	cmp	r2, r4
 8010962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010964:	f04f 33ff 	mov.w	r3, #4294967295
 8010968:	bf28      	it	cs
 801096a:	4622      	movcs	r2, r4
 801096c:	f7ff fe7e 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 8010970:	4620      	mov	r0, r4
 8010972:	b01d      	add	sp, #116	; 0x74
 8010974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010978:	2825      	cmp	r0, #37	; 0x25
 801097a:	f10b 0b01 	add.w	fp, fp, #1
 801097e:	d008      	beq.n	8010992 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x4a>
 8010980:	4622      	mov	r2, r4
 8010982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010984:	1c66      	adds	r6, r4, #1
 8010986:	f04f 33ff 	mov.w	r3, #4294967295
 801098a:	f7ff fe6f 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 801098e:	4634      	mov	r4, r6
 8010990:	e7e1      	b.n	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 8010992:	f04f 0a00 	mov.w	sl, #0
 8010996:	e00d      	b.n	80109b4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6c>
 8010998:	2b2d      	cmp	r3, #45	; 0x2d
 801099a:	d02a      	beq.n	80109f2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xaa>
 801099c:	2b30      	cmp	r3, #48	; 0x30
 801099e:	d006      	beq.n	80109ae <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x66>
 80109a0:	3b30      	subs	r3, #48	; 0x30
 80109a2:	2b09      	cmp	r3, #9
 80109a4:	f04f 0600 	mov.w	r6, #0
 80109a8:	d811      	bhi.n	80109ce <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 80109aa:	200a      	movs	r0, #10
 80109ac:	e032      	b.n	8010a14 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xcc>
 80109ae:	f04a 0a01 	orr.w	sl, sl, #1
 80109b2:	4693      	mov	fp, r2
 80109b4:	465a      	mov	r2, fp
 80109b6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80109ba:	2b2b      	cmp	r3, #43	; 0x2b
 80109bc:	d01c      	beq.n	80109f8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xb0>
 80109be:	d8eb      	bhi.n	8010998 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50>
 80109c0:	2b20      	cmp	r3, #32
 80109c2:	d01c      	beq.n	80109fe <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xb6>
 80109c4:	2b23      	cmp	r3, #35	; 0x23
 80109c6:	d01d      	beq.n	8010a04 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xbc>
 80109c8:	2b2a      	cmp	r3, #42	; 0x2a
 80109ca:	d02b      	beq.n	8010a24 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xdc>
 80109cc:	2600      	movs	r6, #0
 80109ce:	f89b 3000 	ldrb.w	r3, [fp]
 80109d2:	2b2e      	cmp	r3, #46	; 0x2e
 80109d4:	d177      	bne.n	8010ac6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x17e>
 80109d6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80109da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80109de:	2909      	cmp	r1, #9
 80109e0:	f10b 0301 	add.w	r3, fp, #1
 80109e4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80109e8:	d863      	bhi.n	8010ab2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x16a>
 80109ea:	2700      	movs	r7, #0
 80109ec:	f04f 0c0a 	mov.w	ip, #10
 80109f0:	e026      	b.n	8010a40 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xf8>
 80109f2:	f04a 0a02 	orr.w	sl, sl, #2
 80109f6:	e7dc      	b.n	80109b2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 80109f8:	f04a 0a04 	orr.w	sl, sl, #4
 80109fc:	e7d9      	b.n	80109b2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 80109fe:	f04a 0a08 	orr.w	sl, sl, #8
 8010a02:	e7d6      	b.n	80109b2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 8010a04:	f04a 0a10 	orr.w	sl, sl, #16
 8010a08:	e7d3      	b.n	80109b2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a>
 8010a0a:	fb00 3306 	mla	r3, r0, r6, r3
 8010a0e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010a12:	4693      	mov	fp, r2
 8010a14:	465a      	mov	r2, fp
 8010a16:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010a1a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010a1e:	2909      	cmp	r1, #9
 8010a20:	d9f3      	bls.n	8010a0a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc2>
 8010a22:	e7d4      	b.n	80109ce <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 8010a24:	f855 6b04 	ldr.w	r6, [r5], #4
 8010a28:	2e00      	cmp	r6, #0
 8010a2a:	bfbc      	itt	lt
 8010a2c:	f04a 0a02 	orrlt.w	sl, sl, #2
 8010a30:	4276      	neglt	r6, r6
 8010a32:	4693      	mov	fp, r2
 8010a34:	e7cb      	b.n	80109ce <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x86>
 8010a36:	fb0c 2207 	mla	r2, ip, r7, r2
 8010a3a:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8010a3e:	460b      	mov	r3, r1
 8010a40:	4619      	mov	r1, r3
 8010a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a46:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8010a4a:	2809      	cmp	r0, #9
 8010a4c:	d9f3      	bls.n	8010a36 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xee>
 8010a4e:	469b      	mov	fp, r3
 8010a50:	465b      	mov	r3, fp
 8010a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a56:	2a6c      	cmp	r2, #108	; 0x6c
 8010a58:	d03c      	beq.n	8010ad4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x18c>
 8010a5a:	d836      	bhi.n	8010aca <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x182>
 8010a5c:	2a68      	cmp	r2, #104	; 0x68
 8010a5e:	d042      	beq.n	8010ae6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x19e>
 8010a60:	2a6a      	cmp	r2, #106	; 0x6a
 8010a62:	d04b      	beq.n	8010afc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1b4>
 8010a64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010a68:	2866      	cmp	r0, #102	; 0x66
 8010a6a:	f200 8087 	bhi.w	8010b7c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x234>
 8010a6e:	2857      	cmp	r0, #87	; 0x57
 8010a70:	d85e      	bhi.n	8010b30 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1e8>
 8010a72:	2825      	cmp	r0, #37	; 0x25
 8010a74:	d084      	beq.n	8010980 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 8010a76:	2846      	cmp	r0, #70	; 0x46
 8010a78:	d182      	bne.n	8010980 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 8010a7a:	f04a 0a20 	orr.w	sl, sl, #32
 8010a7e:	3507      	adds	r5, #7
 8010a80:	f025 0507 	bic.w	r5, r5, #7
 8010a84:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010a88:	4610      	mov	r0, r2
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010a90:	f7ef fff2 	bl	8000a78 <__aeabi_dcmpeq>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	f040 812d 	bne.w	8010cf4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3ac>
 8010a9a:	2303      	movs	r3, #3
 8010a9c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	4ba7      	ldr	r3, [pc, #668]	; (8010d40 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3f8>)
 8010aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010aa6:	48a7      	ldr	r0, [pc, #668]	; (8010d44 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	f7ff fde4 	bl	8010676 <24edba6ab381ef8da8eede88a6ac6de0c2e16560>
 8010aae:	4604      	mov	r4, r0
 8010ab0:	e751      	b.n	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 8010ab2:	2a2a      	cmp	r2, #42	; 0x2a
 8010ab4:	d106      	bne.n	8010ac4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x17c>
 8010ab6:	f855 7b04 	ldr.w	r7, [r5], #4
 8010aba:	f10b 0b02 	add.w	fp, fp, #2
 8010abe:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8010ac2:	e7c5      	b.n	8010a50 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x108>
 8010ac4:	469b      	mov	fp, r3
 8010ac6:	2700      	movs	r7, #0
 8010ac8:	e7c2      	b.n	8010a50 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x108>
 8010aca:	2a7a      	cmp	r2, #122	; 0x7a
 8010acc:	d1ca      	bne.n	8010a64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 8010ace:	f44a 7a80 	orr.w	sl, sl, #256	; 0x100
 8010ad2:	e00e      	b.n	8010af2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1aa>
 8010ad4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010ad8:	2a6c      	cmp	r2, #108	; 0x6c
 8010ada:	d1f8      	bne.n	8010ace <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x186>
 8010adc:	f44a 7a40 	orr.w	sl, sl, #768	; 0x300
 8010ae0:	f10b 0b02 	add.w	fp, fp, #2
 8010ae4:	e7be      	b.n	8010a64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 8010ae6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010aea:	2a68      	cmp	r2, #104	; 0x68
 8010aec:	d003      	beq.n	8010af6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1ae>
 8010aee:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8010af2:	469b      	mov	fp, r3
 8010af4:	e7b6      	b.n	8010a64 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x11c>
 8010af6:	f04a 0ac0 	orr.w	sl, sl, #192	; 0xc0
 8010afa:	e7f1      	b.n	8010ae0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x198>
 8010afc:	f44a 7a00 	orr.w	sl, sl, #512	; 0x200
 8010b00:	e7f7      	b.n	8010af2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1aa>
 8010b02:	2b0a      	cmp	r3, #10
 8010b04:	f000 82a3 	beq.w	801104e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x706>
 8010b08:	2b07      	cmp	r3, #7
 8010b0a:	f47f af39 	bne.w	8010980 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 8010b0e:	f04a 0321 	orr.w	r3, sl, #33	; 0x21
 8010b12:	9304      	str	r3, [sp, #16]
 8010b14:	2308      	movs	r3, #8
 8010b16:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8010b1a:	2310      	movs	r3, #16
 8010b1c:	e9cd 2300 	strd	r2, r3, [sp]
 8010b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b26:	4887      	ldr	r0, [pc, #540]	; (8010d44 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 8010b28:	4622      	mov	r2, r4
 8010b2a:	f7ff fe7d 	bl	8010828 <a489971c3e4840c7373cb8be8004d6ffd709aef1>
 8010b2e:	e7be      	b.n	8010aae <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x166>
 8010b30:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
 8010b34:	2b0e      	cmp	r3, #14
 8010b36:	f63f af23 	bhi.w	8010980 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 8010b3a:	a201      	add	r2, pc, #4	; (adr r2, 8010b40 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1f8>)
 8010b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b40:	08010bab 	.word	0x08010bab
 8010b44:	08010981 	.word	0x08010981
 8010b48:	08010981 	.word	0x08010981
 8010b4c:	08010981 	.word	0x08010981
 8010b50:	08010981 	.word	0x08010981
 8010b54:	08010981 	.word	0x08010981
 8010b58:	08010981 	.word	0x08010981
 8010b5c:	08010981 	.word	0x08010981
 8010b60:	08010981 	.word	0x08010981
 8010b64:	08010981 	.word	0x08010981
 8010b68:	08010bab 	.word	0x08010bab
 8010b6c:	08010fb5 	.word	0x08010fb5
 8010b70:	08010bab 	.word	0x08010bab
 8010b74:	08010981 	.word	0x08010981
 8010b78:	08010a7f 	.word	0x08010a7f
 8010b7c:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	2b0f      	cmp	r3, #15
 8010b84:	f63f aefc 	bhi.w	8010980 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38>
 8010b88:	2201      	movs	r2, #1
 8010b8a:	409a      	lsls	r2, r3
 8010b8c:	f249 0141 	movw	r1, #36929	; 0x9041
 8010b90:	400a      	ands	r2, r1
 8010b92:	d0b6      	beq.n	8010b02 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x1ba>
 8010b94:	2878      	cmp	r0, #120	; 0x78
 8010b96:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8010b9a:	d124      	bne.n	8010be6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x29e>
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 808b 	beq.w	8010cb8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x370>
 8010ba2:	f02a 020d 	bic.w	r2, sl, #13
 8010ba6:	2110      	movs	r1, #16
 8010ba8:	e007      	b.n	8010bba <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 8010baa:	2862      	cmp	r0, #98	; 0x62
 8010bac:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8010bb0:	d126      	bne.n	8010c00 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2b8>
 8010bb2:	b9ab      	cbnz	r3, 8010be0 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x298>
 8010bb4:	f02a 020c 	bic.w	r2, sl, #12
 8010bb8:	2102      	movs	r1, #2
 8010bba:	f412 7300 	ands.w	r3, r2, #512	; 0x200
 8010bbe:	d07e      	beq.n	8010cbe <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x376>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8010bc6:	e9cd 1304 	strd	r1, r3, [sp, #16]
 8010bca:	f105 0807 	add.w	r8, r5, #7
 8010bce:	f028 0807 	bic.w	r8, r8, #7
 8010bd2:	9706      	str	r7, [sp, #24]
 8010bd4:	9302      	str	r3, [sp, #8]
 8010bd6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010bda:	e9cd 2300 	strd	r2, r3, [sp]
 8010bde:	e03b      	b.n	8010c58 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x310>
 8010be0:	f02a 020d 	bic.w	r2, sl, #13
 8010be4:	e7e8      	b.n	8010bb8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x270>
 8010be6:	286f      	cmp	r0, #111	; 0x6f
 8010be8:	d012      	beq.n	8010c10 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2c8>
 8010bea:	2869      	cmp	r0, #105	; 0x69
 8010bec:	f02a 0210 	bic.w	r2, sl, #16
 8010bf0:	d03d      	beq.n	8010c6e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x326>
 8010bf2:	f02a 021c 	bic.w	r2, sl, #28
 8010bf6:	b10b      	cbz	r3, 8010bfc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2b4>
 8010bf8:	f02a 021d 	bic.w	r2, sl, #29
 8010bfc:	210a      	movs	r1, #10
 8010bfe:	e7dc      	b.n	8010bba <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 8010c00:	2858      	cmp	r0, #88	; 0x58
 8010c02:	d10d      	bne.n	8010c20 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2d8>
 8010c04:	bb83      	cbnz	r3, 8010c68 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x320>
 8010c06:	f02a 020c 	bic.w	r2, sl, #12
 8010c0a:	f042 0220 	orr.w	r2, r2, #32
 8010c0e:	e7ca      	b.n	8010ba6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x25e>
 8010c10:	b91b      	cbnz	r3, 8010c1a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2d2>
 8010c12:	f02a 020c 	bic.w	r2, sl, #12
 8010c16:	2108      	movs	r1, #8
 8010c18:	e7cf      	b.n	8010bba <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x272>
 8010c1a:	f02a 020d 	bic.w	r2, sl, #13
 8010c1e:	e7fa      	b.n	8010c16 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2ce>
 8010c20:	bb3b      	cbnz	r3, 8010c72 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x32a>
 8010c22:	f02a 0210 	bic.w	r2, sl, #16
 8010c26:	0593      	lsls	r3, r2, #22
 8010c28:	d526      	bpl.n	8010c78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x330>
 8010c2a:	3507      	adds	r5, #7
 8010c2c:	f025 0507 	bic.w	r5, r5, #7
 8010c30:	46a8      	mov	r8, r5
 8010c32:	686d      	ldr	r5, [r5, #4]
 8010c34:	f858 3b08 	ldr.w	r3, [r8], #8
 8010c38:	9706      	str	r7, [sp, #24]
 8010c3a:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8010c3e:	200a      	movs	r0, #10
 8010c40:	0fea      	lsrs	r2, r5, #31
 8010c42:	2100      	movs	r1, #0
 8010c44:	2d00      	cmp	r5, #0
 8010c46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c4a:	9202      	str	r2, [sp, #8]
 8010c4c:	da02      	bge.n	8010c54 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x30c>
 8010c4e:	425b      	negs	r3, r3
 8010c50:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8010c54:	e9cd 3500 	strd	r3, r5, [sp]
 8010c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c5a:	483a      	ldr	r0, [pc, #232]	; (8010d44 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 8010c5c:	4622      	mov	r2, r4
 8010c5e:	f7ff fe24 	bl	80108aa <de6b597d7994a76b5b8b87d2b8de60ea42b48b58>
 8010c62:	4604      	mov	r4, r0
 8010c64:	4645      	mov	r5, r8
 8010c66:	e676      	b.n	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 8010c68:	f02a 020d 	bic.w	r2, sl, #13
 8010c6c:	e7cd      	b.n	8010c0a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2c2>
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0d9      	beq.n	8010c26 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2de>
 8010c72:	f02a 0211 	bic.w	r2, sl, #17
 8010c76:	e7d6      	b.n	8010c26 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x2de>
 8010c78:	05d0      	lsls	r0, r2, #23
 8010c7a:	f105 0804 	add.w	r8, r5, #4
 8010c7e:	d501      	bpl.n	8010c84 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x33c>
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	e003      	b.n	8010c8c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x344>
 8010c84:	0651      	lsls	r1, r2, #25
 8010c86:	d512      	bpl.n	8010cae <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x366>
 8010c88:	f995 3000 	ldrsb.w	r3, [r5]
 8010c8c:	9702      	str	r7, [sp, #8]
 8010c8e:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8010c92:	220a      	movs	r2, #10
 8010c94:	9201      	str	r2, [sp, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8010c9c:	9200      	str	r2, [sp, #0]
 8010c9e:	bfb8      	it	lt
 8010ca0:	425b      	neglt	r3, r3
 8010ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ca4:	4827      	ldr	r0, [pc, #156]	; (8010d44 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3fc>)
 8010ca6:	4622      	mov	r2, r4
 8010ca8:	f7ff fdbe 	bl	8010828 <a489971c3e4840c7373cb8be8004d6ffd709aef1>
 8010cac:	e7d9      	b.n	8010c62 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x31a>
 8010cae:	0613      	lsls	r3, r2, #24
 8010cb0:	d5e6      	bpl.n	8010c80 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x338>
 8010cb2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010cb6:	e7e9      	b.n	8010c8c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x344>
 8010cb8:	f02a 020c 	bic.w	r2, sl, #12
 8010cbc:	e773      	b.n	8010ba6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x25e>
 8010cbe:	05d0      	lsls	r0, r2, #23
 8010cc0:	f105 0804 	add.w	r8, r5, #4
 8010cc4:	d506      	bpl.n	8010cd4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x38c>
 8010cc6:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8010cca:	e9cd 1701 	strd	r1, r7, [sp, #4]
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	e7e6      	b.n	8010ca2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x35a>
 8010cd4:	0650      	lsls	r0, r2, #25
 8010cd6:	d507      	bpl.n	8010ce8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3a0>
 8010cd8:	782b      	ldrb	r3, [r5, #0]
 8010cda:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	e9cd 1701 	strd	r1, r7, [sp, #4]
 8010ce4:	9200      	str	r2, [sp, #0]
 8010ce6:	e7dc      	b.n	8010ca2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x35a>
 8010ce8:	682b      	ldr	r3, [r5, #0]
 8010cea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010cee:	bf18      	it	ne
 8010cf0:	b29b      	uxthne	r3, r3
 8010cf2:	e7f2      	b.n	8010cda <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x392>
 8010cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8010cfc:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8010d00:	f7ef fec4 	bl	8000a8c <__aeabi_dcmplt>
 8010d04:	b128      	cbz	r0, 8010d12 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x3ca>
 8010d06:	2304      	movs	r3, #4
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8010d0e:	4b0e      	ldr	r3, [pc, #56]	; (8010d48 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x400>)
 8010d10:	e6c8      	b.n	8010aa4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 8010d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d16:	4b0d      	ldr	r3, [pc, #52]	; (8010d4c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x404>)
 8010d18:	f04f 32ff 	mov.w	r2, #4294967295
 8010d1c:	f7ef fed4 	bl	8000ac8 <__aeabi_dcmpgt>
 8010d20:	b1d0      	cbz	r0, 8010d58 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x410>
 8010d22:	f00a 0304 	and.w	r3, sl, #4
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	4a09      	ldr	r2, [pc, #36]	; (8010d50 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x408>)
 8010d2a:	bf0c      	ite	eq
 8010d2c:	2303      	moveq	r3, #3
 8010d2e:	2304      	movne	r3, #4
 8010d30:	9300      	str	r3, [sp, #0]
 8010d32:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8010d36:	4b07      	ldr	r3, [pc, #28]	; (8010d54 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x40c>)
 8010d38:	bf08      	it	eq
 8010d3a:	4613      	moveq	r3, r2
 8010d3c:	e6b2      	b.n	8010aa4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 8010d3e:	bf00      	nop
 8010d40:	0802051c 	.word	0x0802051c
 8010d44:	0801066d 	.word	0x0801066d
 8010d48:	08020520 	.word	0x08020520
 8010d4c:	7fefffff 	.word	0x7fefffff
 8010d50:	08020518 	.word	0x08020518
 8010d54:	08020513 	.word	0x08020513
 8010d58:	a3ad      	add	r3, pc, #692	; (adr r3, 8011010 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6c8>)
 8010d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d62:	f7ef feb1 	bl	8000ac8 <__aeabi_dcmpgt>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	f47f adf4 	bne.w	8010954 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc>
 8010d6c:	a3aa      	add	r3, pc, #680	; (adr r3, 8011018 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6d0>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d76:	f7ef fe89 	bl	8000a8c <__aeabi_dcmplt>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	f47f adea 	bne.w	8010954 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xc>
 8010d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d84:	2200      	movs	r2, #0
 8010d86:	2300      	movs	r3, #0
 8010d88:	f7ef fe80 	bl	8000a8c <__aeabi_dcmplt>
 8010d8c:	b190      	cbz	r0, 8010db4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x46c>
 8010d8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d92:	2000      	movs	r0, #0
 8010d94:	2100      	movs	r1, #0
 8010d96:	f7ef fa4f 	bl	8000238 <__aeabi_dsub>
 8010d9a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d9e:	2301      	movs	r3, #1
 8010da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010da2:	f41a 6880 	ands.w	r8, sl, #1024	; 0x400
 8010da6:	d067      	beq.n	8010e78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x530>
 8010da8:	2f09      	cmp	r7, #9
 8010daa:	d805      	bhi.n	8010db8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x470>
 8010dac:	970e      	str	r7, [sp, #56]	; 0x38
 8010dae:	f04f 0800 	mov.w	r8, #0
 8010db2:	e011      	b.n	8010dd8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 8010db4:	900f      	str	r0, [sp, #60]	; 0x3c
 8010db6:	e7f4      	b.n	8010da2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x45a>
 8010db8:	ab14      	add	r3, sp, #80	; 0x50
 8010dba:	f1a7 0209 	sub.w	r2, r7, #9
 8010dbe:	f04f 0800 	mov.w	r8, #0
 8010dc2:	2130      	movs	r1, #48	; 0x30
 8010dc4:	f108 0801 	add.w	r8, r8, #1
 8010dc8:	eba7 0008 	sub.w	r0, r7, r8
 8010dcc:	f1b8 0f20 	cmp.w	r8, #32
 8010dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8010dd4:	900e      	str	r0, [sp, #56]	; 0x38
 8010dd6:	d14c      	bne.n	8010e72 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x52a>
 8010dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ddc:	f7ef fe7e 	bl	8000adc <__aeabi_d2iz>
 8010de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de2:	4b8f      	ldr	r3, [pc, #572]	; (8011020 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6d8>)
 8010de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	4681      	mov	r9, r0
 8010dee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8010df2:	f7ef fb6f 	bl	80004d4 <__aeabi_i2d>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010dfe:	f7ef fa1b 	bl	8000238 <__aeabi_dsub>
 8010e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e06:	f7ef fbcf 	bl	80005a8 <__aeabi_dmul>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8010e12:	f7ef fe8b 	bl	8000b2c <__aeabi_d2uiz>
 8010e16:	4607      	mov	r7, r0
 8010e18:	f7ef fb4c 	bl	80004b4 <__aeabi_ui2d>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010e24:	f7ef fa08 	bl	8000238 <__aeabi_dsub>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8010e30:	4b7c      	ldr	r3, [pc, #496]	; (8011024 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	f7ef fe48 	bl	8000ac8 <__aeabi_dcmpgt>
 8010e38:	b308      	cbz	r0, 8010e7e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x536>
 8010e3a:	3701      	adds	r7, #1
 8010e3c:	4638      	mov	r0, r7
 8010e3e:	f7ef fb39 	bl	80004b4 <__aeabi_ui2d>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010e4a:	f7ef fe29 	bl	8000aa0 <__aeabi_dcmple>
 8010e4e:	b110      	cbz	r0, 8010e56 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 8010e50:	f109 0901 	add.w	r9, r9, #1
 8010e54:	2700      	movs	r7, #0
 8010e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e58:	b1f3      	cbz	r3, 8010e98 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x550>
 8010e5a:	ab14      	add	r3, sp, #80	; 0x50
 8010e5c:	eb03 0208 	add.w	r2, r3, r8
 8010e60:	210a      	movs	r1, #10
 8010e62:	f1b8 0f20 	cmp.w	r8, #32
 8010e66:	d155      	bne.n	8010f14 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5cc>
 8010e68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010e6a:	aa14      	add	r2, sp, #80	; 0x50
 8010e6c:	4440      	add	r0, r8
 8010e6e:	2130      	movs	r1, #48	; 0x30
 8010e70:	e063      	b.n	8010f3a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5f2>
 8010e72:	4590      	cmp	r8, r2
 8010e74:	d1a6      	bne.n	8010dc4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x47c>
 8010e76:	e7af      	b.n	8010dd8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 8010e78:	2306      	movs	r3, #6
 8010e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8010e7c:	e7ac      	b.n	8010dd8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x490>
 8010e7e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010e82:	4b68      	ldr	r3, [pc, #416]	; (8011024 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 8010e84:	2200      	movs	r2, #0
 8010e86:	f7ef fe01 	bl	8000a8c <__aeabi_dcmplt>
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d1e3      	bne.n	8010e56 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 8010e8e:	b10f      	cbz	r7, 8010e94 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x54c>
 8010e90:	07fb      	lsls	r3, r7, #31
 8010e92:	d5e0      	bpl.n	8010e56 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 8010e94:	3701      	adds	r7, #1
 8010e96:	e7de      	b.n	8010e56 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x50e>
 8010e98:	4648      	mov	r0, r9
 8010e9a:	f7ef fb1b 	bl	80004d4 <__aeabi_i2d>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ea6:	f7ef f9c7 	bl	8000238 <__aeabi_dsub>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010eb2:	4b5c      	ldr	r3, [pc, #368]	; (8011024 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f7ef fde9 	bl	8000a8c <__aeabi_dcmplt>
 8010eba:	b130      	cbz	r0, 8010eca <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x582>
 8010ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ec0:	4b58      	ldr	r3, [pc, #352]	; (8011024 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6dc>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f7ef fe00 	bl	8000ac8 <__aeabi_dcmpgt>
 8010ec8:	b120      	cbz	r0, 8010ed4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 8010eca:	f019 0f01 	tst.w	r9, #1
 8010ece:	d001      	beq.n	8010ed4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 8010ed0:	f109 0901 	add.w	r9, r9, #1
 8010ed4:	aa14      	add	r2, sp, #80	; 0x50
 8010ed6:	eb02 0108 	add.w	r1, r2, r8
 8010eda:	200a      	movs	r0, #10
 8010edc:	f1b8 0f20 	cmp.w	r8, #32
 8010ee0:	d00b      	beq.n	8010efa <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5b2>
 8010ee2:	fb99 f7f0 	sdiv	r7, r9, r0
 8010ee6:	fb00 9317 	mls	r3, r0, r7, r9
 8010eea:	3330      	adds	r3, #48	; 0x30
 8010eec:	f801 3b01 	strb.w	r3, [r1], #1
 8010ef0:	f108 0801 	add.w	r8, r8, #1
 8010ef4:	46b9      	mov	r9, r7
 8010ef6:	2f00      	cmp	r7, #0
 8010ef8:	d1f0      	bne.n	8010edc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x594>
 8010efa:	f00a 0303 	and.w	r3, sl, #3
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d13a      	bne.n	8010f78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 8010f02:	b3ce      	cbz	r6, 8010f78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 8010f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f06:	b913      	cbnz	r3, 8010f0e <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5c6>
 8010f08:	f01a 0f0c 	tst.w	sl, #12
 8010f0c:	d000      	beq.n	8010f10 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5c8>
 8010f0e:	3e01      	subs	r6, #1
 8010f10:	2330      	movs	r3, #48	; 0x30
 8010f12:	e026      	b.n	8010f62 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x61a>
 8010f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f16:	fbb7 f0f1 	udiv	r0, r7, r1
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f1e:	fb01 7310 	mls	r3, r1, r0, r7
 8010f22:	3330      	adds	r3, #48	; 0x30
 8010f24:	2f09      	cmp	r7, #9
 8010f26:	f802 3b01 	strb.w	r3, [r2], #1
 8010f2a:	f108 0801 	add.w	r8, r8, #1
 8010f2e:	d99b      	bls.n	8010e68 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x520>
 8010f30:	4607      	mov	r7, r0
 8010f32:	e796      	b.n	8010e62 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x51a>
 8010f34:	f808 1002 	strb.w	r1, [r8, r2]
 8010f38:	4698      	mov	r8, r3
 8010f3a:	f1b8 0f20 	cmp.w	r8, #32
 8010f3e:	d0c9      	beq.n	8010ed4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 8010f40:	4580      	cmp	r8, r0
 8010f42:	f108 0301 	add.w	r3, r8, #1
 8010f46:	d1f5      	bne.n	8010f34 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x5ec>
 8010f48:	4698      	mov	r8, r3
 8010f4a:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8010f4e:	eb0d 0203 	add.w	r2, sp, r3
 8010f52:	232e      	movs	r3, #46	; 0x2e
 8010f54:	f802 3c20 	strb.w	r3, [r2, #-32]
 8010f58:	e7bc      	b.n	8010ed4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x58c>
 8010f5a:	f802 3008 	strb.w	r3, [r2, r8]
 8010f5e:	f108 0801 	add.w	r8, r8, #1
 8010f62:	45b0      	cmp	r8, r6
 8010f64:	d208      	bcs.n	8010f78 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x630>
 8010f66:	f1b8 0f20 	cmp.w	r8, #32
 8010f6a:	d1f6      	bne.n	8010f5a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x612>
 8010f6c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8010f70:	f8cd 8000 	str.w	r8, [sp]
 8010f74:	ab14      	add	r3, sp, #80	; 0x50
 8010f76:	e595      	b.n	8010aa4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x15c>
 8010f78:	f1b8 0f20 	cmp.w	r8, #32
 8010f7c:	d0f6      	beq.n	8010f6c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 8010f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f80:	b143      	cbz	r3, 8010f94 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x64c>
 8010f82:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8010f86:	446b      	add	r3, sp
 8010f88:	222d      	movs	r2, #45	; 0x2d
 8010f8a:	f803 2c20 	strb.w	r2, [r3, #-32]
 8010f8e:	f108 0801 	add.w	r8, r8, #1
 8010f92:	e7eb      	b.n	8010f6c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 8010f94:	f01a 0f04 	tst.w	sl, #4
 8010f98:	d004      	beq.n	8010fa4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x65c>
 8010f9a:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8010f9e:	446b      	add	r3, sp
 8010fa0:	222b      	movs	r2, #43	; 0x2b
 8010fa2:	e7f2      	b.n	8010f8a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x642>
 8010fa4:	f01a 0f08 	tst.w	sl, #8
 8010fa8:	d0e0      	beq.n	8010f6c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x624>
 8010faa:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8010fae:	446b      	add	r3, sp
 8010fb0:	2220      	movs	r2, #32
 8010fb2:	e7ea      	b.n	8010f8a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x642>
 8010fb4:	f01a 0a02 	ands.w	sl, sl, #2
 8010fb8:	d025      	beq.n	8011006 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6be>
 8010fba:	2701      	movs	r7, #1
 8010fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010fbe:	f815 0b04 	ldrb.w	r0, [r5], #4
 8010fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	f104 0801 	add.w	r8, r4, #1
 8010fcc:	f7ff fb4e 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 8010fd0:	f1ba 0f00 	cmp.w	sl, #0
 8010fd4:	d039      	beq.n	801104a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x702>
 8010fd6:	463c      	mov	r4, r7
 8010fd8:	4642      	mov	r2, r8
 8010fda:	e02f      	b.n	801103c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6f4>
 8010fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010fde:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe2:	2020      	movs	r0, #32
 8010fe4:	f7ff fb42 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 8010fe8:	19e2      	adds	r2, r4, r7
 8010fea:	3701      	adds	r7, #1
 8010fec:	42be      	cmp	r6, r7
 8010fee:	d8f5      	bhi.n	8010fdc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x694>
 8010ff0:	2e00      	cmp	r6, #0
 8010ff2:	f106 33ff 	add.w	r3, r6, #4294967295
 8010ff6:	bf08      	it	eq
 8010ff8:	2300      	moveq	r3, #0
 8010ffa:	f106 0701 	add.w	r7, r6, #1
 8010ffe:	441c      	add	r4, r3
 8011000:	bf08      	it	eq
 8011002:	2702      	moveq	r7, #2
 8011004:	e7da      	b.n	8010fbc <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x674>
 8011006:	4657      	mov	r7, sl
 8011008:	e7ee      	b.n	8010fe8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6a0>
 801100a:	bf00      	nop
 801100c:	f3af 8000 	nop.w
 8011010:	00000000 	.word	0x00000000
 8011014:	41cdcd65 	.word	0x41cdcd65
 8011018:	00000000 	.word	0x00000000
 801101c:	c1cdcd65 	.word	0xc1cdcd65
 8011020:	08020528 	.word	0x08020528
 8011024:	3fe00000 	.word	0x3fe00000
 8011028:	f102 0901 	add.w	r9, r2, #1
 801102c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801102e:	f04f 33ff 	mov.w	r3, #4294967295
 8011032:	2020      	movs	r0, #32
 8011034:	f7ff fb1a 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 8011038:	3401      	adds	r4, #1
 801103a:	464a      	mov	r2, r9
 801103c:	42a6      	cmp	r6, r4
 801103e:	d8f3      	bhi.n	8011028 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x6e0>
 8011040:	1bf3      	subs	r3, r6, r7
 8011042:	42be      	cmp	r6, r7
 8011044:	bf38      	it	cc
 8011046:	2300      	movcc	r3, #0
 8011048:	4498      	add	r8, r3
 801104a:	4644      	mov	r4, r8
 801104c:	e483      	b.n	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 801104e:	f855 9b04 	ldr.w	r9, [r5], #4
 8011052:	2f00      	cmp	r7, #0
 8011054:	bf14      	ite	ne
 8011056:	463b      	movne	r3, r7
 8011058:	f04f 33ff 	moveq.w	r3, #4294967295
 801105c:	444b      	add	r3, r9
 801105e:	46c8      	mov	r8, r9
 8011060:	f898 2000 	ldrb.w	r2, [r8]
 8011064:	b10a      	cbz	r2, 801106a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x722>
 8011066:	4543      	cmp	r3, r8
 8011068:	d110      	bne.n	801108c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x744>
 801106a:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 801106e:	eba8 0809 	sub.w	r8, r8, r9
 8011072:	930c      	str	r3, [sp, #48]	; 0x30
 8011074:	d002      	beq.n	801107c <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x734>
 8011076:	45b8      	cmp	r8, r7
 8011078:	bf28      	it	cs
 801107a:	46b8      	movcs	r8, r7
 801107c:	f01a 0302 	ands.w	r3, sl, #2
 8011080:	930e      	str	r3, [sp, #56]	; 0x38
 8011082:	d11c      	bne.n	80110be <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x776>
 8011084:	4622      	mov	r2, r4
 8011086:	eba8 0a04 	sub.w	sl, r8, r4
 801108a:	e00b      	b.n	80110a4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x75c>
 801108c:	f108 0801 	add.w	r8, r8, #1
 8011090:	e7e6      	b.n	8011060 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x718>
 8011092:	1c53      	adds	r3, r2, #1
 8011094:	930f      	str	r3, [sp, #60]	; 0x3c
 8011096:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011098:	f04f 33ff 	mov.w	r3, #4294967295
 801109c:	2020      	movs	r0, #32
 801109e:	f7ff fae5 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 80110a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110a4:	eb02 030a 	add.w	r3, r2, sl
 80110a8:	429e      	cmp	r6, r3
 80110aa:	d8f2      	bhi.n	8011092 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x74a>
 80110ac:	eba6 0308 	sub.w	r3, r6, r8
 80110b0:	4546      	cmp	r6, r8
 80110b2:	bf38      	it	cc
 80110b4:	2300      	movcc	r3, #0
 80110b6:	f108 0801 	add.w	r8, r8, #1
 80110ba:	441c      	add	r4, r3
 80110bc:	4498      	add	r8, r3
 80110be:	eba4 0a09 	sub.w	sl, r4, r9
 80110c2:	e006      	b.n	80110d2 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x78a>
 80110c4:	461f      	mov	r7, r3
 80110c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110c8:	f04f 33ff 	mov.w	r3, #4294967295
 80110cc:	4622      	mov	r2, r4
 80110ce:	f7ff facd 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 80110d2:	eb0a 0409 	add.w	r4, sl, r9
 80110d6:	f819 0b01 	ldrb.w	r0, [r9], #1
 80110da:	b128      	cbz	r0, 80110e8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7a0>
 80110dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d0f1      	beq.n	80110c6 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x77e>
 80110e2:	1e7b      	subs	r3, r7, #1
 80110e4:	2f00      	cmp	r7, #0
 80110e6:	d1ed      	bne.n	80110c4 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x77c>
 80110e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f43f ac33 	beq.w	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 80110f0:	4622      	mov	r2, r4
 80110f2:	eba8 0704 	sub.w	r7, r8, r4
 80110f6:	e008      	b.n	801110a <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7c2>
 80110f8:	f102 0901 	add.w	r9, r2, #1
 80110fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011102:	2020      	movs	r0, #32
 8011104:	f7ff fab2 	bl	801066c <626e3158957e216ecf22af8444eac4e472537274>
 8011108:	464a      	mov	r2, r9
 801110a:	19d3      	adds	r3, r2, r7
 801110c:	429e      	cmp	r6, r3
 801110e:	d8f3      	bhi.n	80110f8 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0x7b0>
 8011110:	eba6 0308 	sub.w	r3, r6, r8
 8011114:	4546      	cmp	r6, r8
 8011116:	bf38      	it	cc
 8011118:	2300      	movcc	r3, #0
 801111a:	441c      	add	r4, r3
 801111c:	e41b      	b.n	8010956 <4bce78035e7f93fa7a3365ab197aeb089dd4db86+0xe>
 801111e:	bf00      	nop

08011120 <5dd4cf8b4cc3211a4d064c2aba27f240e0c6a1fc>:
 8011120:	b40c      	push	{r2, r3}
 8011122:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011124:	aa06      	add	r2, sp, #24
 8011126:	9103      	str	r1, [sp, #12]
 8011128:	f852 3b04 	ldr.w	r3, [r2], #4
 801112c:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8011130:	4619      	mov	r1, r3
 8011132:	a802      	add	r0, sp, #8
 8011134:	f7ff fc08 	bl	8010948 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>
 8011138:	b005      	add	sp, #20
 801113a:	f85d eb04 	ldr.w	lr, [sp], #4
 801113e:	b002      	add	sp, #8
 8011140:	4770      	bx	lr

08011142 <9d4397e1c276e28163cdc66582db3f5f3477f47c>:
 8011142:	b513      	push	{r0, r1, r4, lr}
 8011144:	460c      	mov	r4, r1
 8011146:	e9cd 0400 	strd	r0, r4, [sp]
 801114a:	4611      	mov	r1, r2
 801114c:	4668      	mov	r0, sp
 801114e:	461a      	mov	r2, r3
 8011150:	f7ff fbfa 	bl	8010948 <4bce78035e7f93fa7a3365ab197aeb089dd4db86>
 8011154:	b002      	add	sp, #8
 8011156:	bd10      	pop	{r4, pc}

08011158 <02aa084aaa87b61bfa00c296d0ea733e41c0e799>:
 8011158:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801115c:	4770      	bx	lr
	...

08011160 <a55289d6d9a545b04c48247397ce85f2938a20af>:
 8011160:	ea80 0301 	eor.w	r3, r0, r1
 8011164:	4a03      	ldr	r2, [pc, #12]	; (8011174 <a55289d6d9a545b04c48247397ce85f2938a20af+0x14>)
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801116c:	ea80 2011 	eor.w	r0, r0, r1, lsr #8
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	08020578 	.word	0x08020578

08011178 <f4e96df7a22571dfa32822f4af8ba70dac43b850>:
 8011178:	b538      	push	{r3, r4, r5, lr}
 801117a:	4604      	mov	r4, r0
 801117c:	1845      	adds	r5, r0, r1
 801117e:	4610      	mov	r0, r2
 8011180:	42ac      	cmp	r4, r5
 8011182:	d100      	bne.n	8011186 <f4e96df7a22571dfa32822f4af8ba70dac43b850+0xe>
 8011184:	bd38      	pop	{r3, r4, r5, pc}
 8011186:	4601      	mov	r1, r0
 8011188:	f814 0b01 	ldrb.w	r0, [r4], #1
 801118c:	f7ff ffe8 	bl	8011160 <a55289d6d9a545b04c48247397ce85f2938a20af>
 8011190:	e7f6      	b.n	8011180 <f4e96df7a22571dfa32822f4af8ba70dac43b850+0x8>

08011192 <4b59fedb5de869ccde24e265f7a0554552ced4e7>:
 8011192:	2807      	cmp	r0, #7
 8011194:	d80f      	bhi.n	80111b6 <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x24>
 8011196:	2301      	movs	r3, #1
 8011198:	fa03 f000 	lsl.w	r0, r3, r0
 801119c:	f010 0f22 	tst.w	r0, #34	; 0x22
 80111a0:	d10b      	bne.n	80111ba <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x28>
 80111a2:	f010 0f88 	tst.w	r0, #136	; 0x88
 80111a6:	d10a      	bne.n	80111be <4b59fedb5de869ccde24e265f7a0554552ced4e7+0x2c>
 80111a8:	f010 0f44 	tst.w	r0, #68	; 0x44
 80111ac:	bf14      	ite	ne
 80111ae:	4618      	movne	r0, r3
 80111b0:	2000      	moveq	r0, #0
 80111b2:	00c0      	lsls	r0, r0, #3
 80111b4:	4770      	bx	lr
 80111b6:	2000      	movs	r0, #0
 80111b8:	4770      	bx	lr
 80111ba:	2004      	movs	r0, #4
 80111bc:	4770      	bx	lr
 80111be:	2010      	movs	r0, #16
 80111c0:	4770      	bx	lr
	...

080111c4 <36fc8fd3531c1a40f267c168c66ed988dd7f65d6>:
 80111c4:	b508      	push	{r3, lr}
 80111c6:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <36fc8fd3531c1a40f267c168c66ed988dd7f65d6+0x14>)
 80111c8:	6818      	ldr	r0, [r3, #0]
 80111ca:	2222      	movs	r2, #34	; 0x22
 80111cc:	2100      	movs	r1, #0
 80111ce:	f500 700e 	add.w	r0, r0, #568	; 0x238
 80111d2:	f00a fee9 	bl	801bfa8 <memset>
 80111d6:	bd08      	pop	{r3, pc}
 80111d8:	20000040 	.word	0x20000040

080111dc <281684afe20744fe8e8db0e02bb6f53b74a050bd>:
 80111dc:	4b02      	ldr	r3, [pc, #8]	; (80111e8 <281684afe20744fe8e8db0e02bb6f53b74a050bd+0xc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f893 0238 	ldrb.w	r0, [r3, #568]	; 0x238
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	20000040 	.word	0x20000040

080111ec <6339f3934eecab924c4cd30c35957a539872f6f3>:
 80111ec:	4b02      	ldr	r3, [pc, #8]	; (80111f8 <6339f3934eecab924c4cd30c35957a539872f6f3+0xc>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f893 0249 	ldrb.w	r0, [r3, #585]	; 0x249
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	20000040 	.word	0x20000040

080111fc <bdbe454f364e40446632df307cd018fd5121d6b0>:
 80111fc:	4b07      	ldr	r3, [pc, #28]	; (801121c <bdbe454f364e40446632df307cd018fd5121d6b0+0x20>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	f101 0210 	add.w	r2, r1, #16
 8011204:	f883 0238 	strb.w	r0, [r3, #568]	; 0x238
 8011208:	f203 2339 	addw	r3, r3, #569	; 0x239
 801120c:	f851 0b04 	ldr.w	r0, [r1], #4
 8011210:	f843 0b04 	str.w	r0, [r3], #4
 8011214:	4291      	cmp	r1, r2
 8011216:	d1f9      	bne.n	801120c <bdbe454f364e40446632df307cd018fd5121d6b0+0x10>
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop
 801121c:	20000040 	.word	0x20000040

08011220 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>:
 8011220:	4b07      	ldr	r3, [pc, #28]	; (8011240 <73e350c4a17e38f6f89a1d19f29db6422776fe5d+0x20>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	f101 0210 	add.w	r2, r1, #16
 8011228:	f883 0249 	strb.w	r0, [r3, #585]	; 0x249
 801122c:	f203 234a 	addw	r3, r3, #586	; 0x24a
 8011230:	f851 0b04 	ldr.w	r0, [r1], #4
 8011234:	f843 0b04 	str.w	r0, [r3], #4
 8011238:	4291      	cmp	r1, r2
 801123a:	d1f9      	bne.n	8011230 <73e350c4a17e38f6f89a1d19f29db6422776fe5d+0x10>
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	20000040 	.word	0x20000040

08011244 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c>:
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	4604      	mov	r4, r0
 8011248:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
 801124c:	f7ff ffa1 	bl	8011192 <4b59fedb5de869ccde24e265f7a0554552ced4e7>
 8011250:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8011254:	7a23      	ldrb	r3, [r4, #8]
 8011256:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
 801125a:	2a03      	cmp	r2, #3
 801125c:	d804      	bhi.n	8011268 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 801125e:	e8df f002 	tbb	[pc, r2]
 8011262:	0a0c      	.short	0x0a0c
 8011264:	0208      	.short	0x0208
 8011266:	330a      	adds	r3, #10
 8011268:	4418      	add	r0, r3
 801126a:	28c0      	cmp	r0, #192	; 0xc0
 801126c:	dd19      	ble.n	80112a2 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x5e>
 801126e:	2000      	movs	r0, #0
 8011270:	bd38      	pop	{r3, r4, r5, pc}
 8011272:	3304      	adds	r3, #4
 8011274:	e7f8      	b.n	8011268 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 8011276:	3302      	adds	r3, #2
 8011278:	e7f6      	b.n	8011268 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x24>
 801127a:	3301      	adds	r3, #1
 801127c:	4418      	add	r0, r3
 801127e:	28c0      	cmp	r0, #192	; 0xc0
 8011280:	dcf5      	bgt.n	801126e <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2a>
 8011282:	2101      	movs	r1, #1
 8011284:	4620      	mov	r0, r4
 8011286:	f009 fdd5 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801128a:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 801128e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8011292:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011296:	6862      	ldr	r2, [r4, #4]
 8011298:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801129c:	7013      	strb	r3, [r2, #0]
 801129e:	2001      	movs	r0, #1
 80112a0:	e7e6      	b.n	8011270 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2c>
 80112a2:	2101      	movs	r1, #1
 80112a4:	4620      	mov	r0, r4
 80112a6:	f894 50a3 	ldrb.w	r5, [r4, #163]	; 0xa3
 80112aa:	f009 fdc3 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80112ae:	6863      	ldr	r3, [r4, #4]
 80112b0:	701d      	strb	r5, [r3, #0]
 80112b2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d009      	beq.n	80112ce <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x8a>
 80112ba:	d9e2      	bls.n	8011282 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>
 80112bc:	2b03      	cmp	r3, #3
 80112be:	d1d6      	bne.n	801126e <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x2a>
 80112c0:	2201      	movs	r2, #1
 80112c2:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80112c6:	4620      	mov	r0, r4
 80112c8:	f009 fdd4 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80112cc:	e7d9      	b.n	8011282 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>
 80112ce:	2101      	movs	r1, #1
 80112d0:	4620      	mov	r0, r4
 80112d2:	f009 fdaf 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80112d6:	6863      	ldr	r3, [r4, #4]
 80112d8:	f894 20ab 	ldrb.w	r2, [r4, #171]	; 0xab
 80112dc:	701a      	strb	r2, [r3, #0]
 80112de:	2101      	movs	r1, #1
 80112e0:	4620      	mov	r0, r4
 80112e2:	f009 fda7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80112e6:	6863      	ldr	r3, [r4, #4]
 80112e8:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
 80112ec:	701a      	strb	r2, [r3, #0]
 80112ee:	e7c8      	b.n	8011282 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c+0x3e>

080112f0 <628044ebadd5376fad8b3928b1093d9e8f1976ae>:
 80112f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112f4:	4614      	mov	r4, r2
 80112f6:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 80112fa:	b08b      	sub	sp, #44	; 0x2c
 80112fc:	4605      	mov	r5, r0
 80112fe:	2a00      	cmp	r2, #0
 8011300:	d053      	beq.n	80113aa <628044ebadd5376fad8b3928b1093d9e8f1976ae+0xba>
 8011302:	4b2b      	ldr	r3, [pc, #172]	; (80113b0 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0xc0>)
 8011304:	681e      	ldr	r6, [r3, #0]
 8011306:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 801130a:	b9a3      	cbnz	r3, 8011336 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 801130c:	6808      	ldr	r0, [r1, #0]
 801130e:	6849      	ldr	r1, [r1, #4]
 8011310:	af06      	add	r7, sp, #24
 8011312:	46bc      	mov	ip, r7
 8011314:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011318:	1e69      	subs	r1, r5, #1
 801131a:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 801131e:	3504      	adds	r5, #4
 8011320:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8011324:	f800 cd01 	strb.w	ip, [r0, #-1]!
 8011328:	42a9      	cmp	r1, r5
 801132a:	d1f9      	bne.n	8011320 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x30>
 801132c:	2a03      	cmp	r2, #3
 801132e:	d906      	bls.n	801133e <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x4e>
 8011330:	3a05      	subs	r2, #5
 8011332:	2a02      	cmp	r2, #2
 8011334:	d928      	bls.n	8011388 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x98>
 8011336:	2000      	movs	r0, #0
 8011338:	b00b      	add	sp, #44	; 0x2c
 801133a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801133e:	f896 2238 	ldrb.w	r2, [r6, #568]	; 0x238
 8011342:	2a00      	cmp	r2, #0
 8011344:	d0f7      	beq.n	8011336 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 8011346:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801134a:	7a25      	ldrb	r5, [r4, #8]
 801134c:	f206 2639 	addw	r6, r6, #569	; 0x239
 8011350:	eb08 0905 	add.w	r9, r8, r5
 8011354:	f88d 3017 	strb.w	r3, [sp, #23]
 8011358:	442b      	add	r3, r5
 801135a:	2bc0      	cmp	r3, #192	; 0xc0
 801135c:	dceb      	bgt.n	8011336 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 801135e:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 8011362:	b111      	cbz	r1, 801136a <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x7a>
 8011364:	4620      	mov	r0, r4
 8011366:	f009 fdc3 	bl	801aef0 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d>
 801136a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 801136e:	e9cd 6302 	strd	r6, r3, [sp, #8]
 8011372:	2302      	movs	r3, #2
 8011374:	e9cd 7300 	strd	r7, r3, [sp]
 8011378:	464a      	mov	r2, r9
 801137a:	f10d 0317 	add.w	r3, sp, #23
 801137e:	4629      	mov	r1, r5
 8011380:	4640      	mov	r0, r8
 8011382:	f00a f872 	bl	801b46a <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d>
 8011386:	e7d7      	b.n	8011338 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x48>
 8011388:	f896 3249 	ldrb.w	r3, [r6, #585]	; 0x249
 801138c:	2b00      	cmp	r3, #0
 801138e:	d0d2      	beq.n	8011336 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x46>
 8011390:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011394:	f8d4 905c 	ldr.w	r9, [r4, #92]	; 0x5c
 8011398:	7a23      	ldrb	r3, [r4, #8]
 801139a:	eba9 0508 	sub.w	r5, r9, r8
 801139e:	b2ed      	uxtb	r5, r5
 80113a0:	1b5b      	subs	r3, r3, r5
 80113a2:	f206 264a 	addw	r6, r6, #586	; 0x24a
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	e7d4      	b.n	8011354 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x64>
 80113aa:	2001      	movs	r0, #1
 80113ac:	e7c4      	b.n	8011338 <628044ebadd5376fad8b3928b1093d9e8f1976ae+0x48>
 80113ae:	bf00      	nop
 80113b0:	20000040 	.word	0x20000040

080113b4 <245bc706add2545900df78a3f141ff0f80e5adf9>:
 80113b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113b6:	784b      	ldrb	r3, [r1, #1]
 80113b8:	6842      	ldr	r2, [r0, #4]
 80113ba:	5cd2      	ldrb	r2, [r2, r3]
 80113bc:	4604      	mov	r4, r0
 80113be:	f002 0007 	and.w	r0, r2, #7
 80113c2:	b087      	sub	sp, #28
 80113c4:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
 80113c8:	f7ff fee3 	bl	8011192 <4b59fedb5de869ccde24e265f7a0554552ced4e7>
 80113cc:	f3c2 03c1 	ubfx	r3, r2, #3, #2
 80113d0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80113d4:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
 80113d8:	784b      	ldrb	r3, [r1, #1]
 80113da:	460d      	mov	r5, r1
 80113dc:	0691      	lsls	r1, r2, #26
 80113de:	bf5d      	ittte	pl
 80113e0:	f3c2 1280 	ubfxpl	r2, r2, #6, #1
 80113e4:	3305      	addpl	r3, #5
 80113e6:	18d2      	addpl	r2, r2, r3
 80113e8:	3301      	addmi	r3, #1
 80113ea:	bf4c      	ite	mi
 80113ec:	b2da      	uxtbmi	r2, r3
 80113ee:	b2d2      	uxtbpl	r2, r2
 80113f0:	706a      	strb	r2, [r5, #1]
 80113f2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d02f      	beq.n	801145a <245bc706add2545900df78a3f141ff0f80e5adf9+0xa6>
 80113fa:	d904      	bls.n	8011406 <245bc706add2545900df78a3f141ff0f80e5adf9+0x52>
 80113fc:	2b03      	cmp	r3, #3
 80113fe:	d046      	beq.n	801148e <245bc706add2545900df78a3f141ff0f80e5adf9+0xda>
 8011400:	2000      	movs	r0, #0
 8011402:	b007      	add	sp, #28
 8011404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011406:	f105 032d 	add.w	r3, r5, #45	; 0x2d
 801140a:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 801140e:	f105 013d 	add.w	r1, r5, #61	; 0x3d
 8011412:	f853 0b04 	ldr.w	r0, [r3], #4
 8011416:	f842 0b04 	str.w	r0, [r2], #4
 801141a:	428b      	cmp	r3, r1
 801141c:	d1f9      	bne.n	8011412 <245bc706add2545900df78a3f141ff0f80e5adf9+0x5e>
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	7013      	strb	r3, [r2, #0]
 8011422:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d04a      	beq.n	80114c0 <245bc706add2545900df78a3f141ff0f80e5adf9+0x10c>
 801142a:	786b      	ldrb	r3, [r5, #1]
 801142c:	6862      	ldr	r2, [r4, #4]
 801142e:	5cd3      	ldrb	r3, [r2, r3]
 8011430:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8011434:	786b      	ldrb	r3, [r5, #1]
 8011436:	3301      	adds	r3, #1
 8011438:	706b      	strb	r3, [r5, #1]
 801143a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801143e:	2300      	movs	r3, #0
 8011440:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8011444:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8011448:	2a00      	cmp	r2, #0
 801144a:	d13d      	bne.n	80114c8 <245bc706add2545900df78a3f141ff0f80e5adf9+0x114>
 801144c:	2b01      	cmp	r3, #1
 801144e:	bf04      	itt	eq
 8011450:	2301      	moveq	r3, #1
 8011452:	f884 30a0 	strbeq.w	r3, [r4, #160]	; 0xa0
 8011456:	2001      	movs	r0, #1
 8011458:	e7d3      	b.n	8011402 <245bc706add2545900df78a3f141ff0f80e5adf9+0x4e>
 801145a:	6860      	ldr	r0, [r4, #4]
 801145c:	7869      	ldrb	r1, [r5, #1]
 801145e:	2301      	movs	r3, #1
 8011460:	461a      	mov	r2, r3
 8011462:	4401      	add	r1, r0
 8011464:	4668      	mov	r0, sp
 8011466:	f009 fcb0 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801146a:	af04      	add	r7, sp, #16
 801146c:	466b      	mov	r3, sp
 801146e:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8011472:	6818      	ldr	r0, [r3, #0]
 8011474:	6859      	ldr	r1, [r3, #4]
 8011476:	4616      	mov	r6, r2
 8011478:	c603      	stmia	r6!, {r0, r1}
 801147a:	3308      	adds	r3, #8
 801147c:	42bb      	cmp	r3, r7
 801147e:	4632      	mov	r2, r6
 8011480:	d1f7      	bne.n	8011472 <245bc706add2545900df78a3f141ff0f80e5adf9+0xbe>
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	7033      	strb	r3, [r6, #0]
 8011486:	786b      	ldrb	r3, [r5, #1]
 8011488:	3302      	adds	r3, #2
 801148a:	706b      	strb	r3, [r5, #1]
 801148c:	e7c9      	b.n	8011422 <245bc706add2545900df78a3f141ff0f80e5adf9+0x6e>
 801148e:	6860      	ldr	r0, [r4, #4]
 8011490:	7869      	ldrb	r1, [r5, #1]
 8011492:	2301      	movs	r3, #1
 8011494:	2202      	movs	r2, #2
 8011496:	4401      	add	r1, r0
 8011498:	4668      	mov	r0, sp
 801149a:	f009 fc96 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801149e:	af04      	add	r7, sp, #16
 80114a0:	466b      	mov	r3, sp
 80114a2:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80114a6:	6818      	ldr	r0, [r3, #0]
 80114a8:	6859      	ldr	r1, [r3, #4]
 80114aa:	4616      	mov	r6, r2
 80114ac:	c603      	stmia	r6!, {r0, r1}
 80114ae:	3308      	adds	r3, #8
 80114b0:	42bb      	cmp	r3, r7
 80114b2:	4632      	mov	r2, r6
 80114b4:	d1f7      	bne.n	80114a6 <245bc706add2545900df78a3f141ff0f80e5adf9+0xf2>
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	7033      	strb	r3, [r6, #0]
 80114ba:	786b      	ldrb	r3, [r5, #1]
 80114bc:	3308      	adds	r3, #8
 80114be:	e7e4      	b.n	801148a <245bc706add2545900df78a3f141ff0f80e5adf9+0xd6>
 80114c0:	2301      	movs	r3, #1
 80114c2:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80114c6:	e7b8      	b.n	801143a <245bc706add2545900df78a3f141ff0f80e5adf9+0x86>
 80114c8:	2b05      	cmp	r3, #5
 80114ca:	e7c0      	b.n	801144e <245bc706add2545900df78a3f141ff0f80e5adf9+0x9a>

080114cc <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>:
 80114cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ce:	4b30      	ldr	r3, [pc, #192]	; (8011590 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0xc4>)
 80114d0:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	b08b      	sub	sp, #44	; 0x2c
 80114d8:	4605      	mov	r5, r0
 80114da:	460c      	mov	r4, r1
 80114dc:	b1ea      	cbz	r2, 801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 80114de:	f891 1052 	ldrb.w	r1, [r1, #82]	; 0x52
 80114e2:	b9f1      	cbnz	r1, 8011522 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x56>
 80114e4:	2a01      	cmp	r2, #1
 80114e6:	d118      	bne.n	801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 80114e8:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
 80114ec:	b9a9      	cbnz	r1, 801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 80114ee:	f8d4 0042 	ldr.w	r0, [r4, #66]	; 0x42
 80114f2:	f8d4 1046 	ldr.w	r1, [r4, #70]	; 0x46
 80114f6:	ae06      	add	r6, sp, #24
 80114f8:	4637      	mov	r7, r6
 80114fa:	c703      	stmia	r7!, {r0, r1}
 80114fc:	1e69      	subs	r1, r5, #1
 80114fe:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8011502:	3504      	adds	r5, #4
 8011504:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 8011508:	f800 7d01 	strb.w	r7, [r0, #-1]!
 801150c:	428d      	cmp	r5, r1
 801150e:	d1f9      	bne.n	8011504 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x38>
 8011510:	2a03      	cmp	r2, #3
 8011512:	d90a      	bls.n	801152a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x5e>
 8011514:	3a05      	subs	r2, #5
 8011516:	2a02      	cmp	r2, #2
 8011518:	d92c      	bls.n	8011574 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0xa8>
 801151a:	2500      	movs	r5, #0
 801151c:	4628      	mov	r0, r5
 801151e:	b00b      	add	sp, #44	; 0x2c
 8011520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011522:	f002 01fb 	and.w	r1, r2, #251	; 0xfb
 8011526:	2901      	cmp	r1, #1
 8011528:	e7dd      	b.n	80114e6 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x1a>
 801152a:	f893 2238 	ldrb.w	r2, [r3, #568]	; 0x238
 801152e:	2a00      	cmp	r2, #0
 8011530:	d0f3      	beq.n	801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 8011532:	7a22      	ldrb	r2, [r4, #8]
 8011534:	6860      	ldr	r0, [r4, #4]
 8011536:	f203 2539 	addw	r5, r3, #569	; 0x239
 801153a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 801153e:	1ad2      	subs	r2, r2, r3
 8011540:	b2d1      	uxtb	r1, r2
 8011542:	fa50 f282 	uxtab	r2, r0, r2
 8011546:	f88d 3017 	strb.w	r3, [sp, #23]
 801154a:	440b      	add	r3, r1
 801154c:	2bc0      	cmp	r3, #192	; 0xc0
 801154e:	dce4      	bgt.n	801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 8011550:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8011554:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8011558:	2302      	movs	r3, #2
 801155a:	e9cd 6300 	strd	r6, r3, [sp]
 801155e:	f10d 0317 	add.w	r3, sp, #23
 8011562:	f009 ff41 	bl	801b3e8 <71097e204b694049f5c66ccd9b138d3a4c93df13>
 8011566:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 801156a:	4605      	mov	r5, r0
 801156c:	4620      	mov	r0, r4
 801156e:	f009 fcdb 	bl	801af28 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d>
 8011572:	e7d3      	b.n	801151c <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x50>
 8011574:	f893 2249 	ldrb.w	r2, [r3, #585]	; 0x249
 8011578:	2a00      	cmp	r2, #0
 801157a:	d0ce      	beq.n	801151a <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x4e>
 801157c:	6860      	ldr	r0, [r4, #4]
 801157e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011580:	f203 254a 	addw	r5, r3, #586	; 0x24a
 8011584:	1a11      	subs	r1, r2, r0
 8011586:	7a23      	ldrb	r3, [r4, #8]
 8011588:	b2c9      	uxtb	r1, r1
 801158a:	1a5b      	subs	r3, r3, r1
 801158c:	b2db      	uxtb	r3, r3
 801158e:	e7da      	b.n	8011546 <ccaf3079fe06f6d98cd1712d3ed21403c04581f9+0x7a>
 8011590:	20000040 	.word	0x20000040

08011594 <077287437cab717c06c53f5380059be6eda08357>:
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	4b19      	ldr	r3, [pc, #100]	; (80115fc <077287437cab717c06c53f5380059be6eda08357+0x68>)
 8011598:	681c      	ldr	r4, [r3, #0]
 801159a:	4605      	mov	r5, r0
 801159c:	f7fd fae8 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 80115a0:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 80115a4:	f8d4 3029 	ldr.w	r3, [r4, #41]	; 0x29
 80115a8:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
 80115ac:	1ac3      	subs	r3, r0, r3
 80115ae:	18d2      	adds	r2, r2, r3
 80115b0:	f141 0100 	adc.w	r1, r1, #0
 80115b4:	e9c4 2108 	strd	r2, r1, [r4, #32]
 80115b8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80115bc:	2a02      	cmp	r2, #2
 80115be:	d00d      	beq.n	80115dc <077287437cab717c06c53f5380059be6eda08357+0x48>
 80115c0:	2a03      	cmp	r2, #3
 80115c2:	d013      	beq.n	80115ec <077287437cab717c06c53f5380059be6eda08357+0x58>
 80115c4:	2a01      	cmp	r2, #1
 80115c6:	d106      	bne.n	80115d6 <077287437cab717c06c53f5380059be6eda08357+0x42>
 80115c8:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
 80115cc:	18d2      	adds	r2, r2, r3
 80115ce:	f141 0100 	adc.w	r1, r1, #0
 80115d2:	e9c4 2106 	strd	r2, r1, [r4, #24]
 80115d6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 80115da:	bd38      	pop	{r3, r4, r5, pc}
 80115dc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80115e0:	18d2      	adds	r2, r2, r3
 80115e2:	f141 0100 	adc.w	r1, r1, #0
 80115e6:	e9c4 2102 	strd	r2, r1, [r4, #8]
 80115ea:	e7f4      	b.n	80115d6 <077287437cab717c06c53f5380059be6eda08357+0x42>
 80115ec:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80115f0:	18d2      	adds	r2, r2, r3
 80115f2:	f141 0100 	adc.w	r1, r1, #0
 80115f6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80115fa:	e7ec      	b.n	80115d6 <077287437cab717c06c53f5380059be6eda08357+0x42>
 80115fc:	20000040 	.word	0x20000040

08011600 <66ac93647e4c684dee2227e883242cdee4e3524a>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4b14      	ldr	r3, [pc, #80]	; (8011654 <66ac93647e4c684dee2227e883242cdee4e3524a+0x54>)
 8011604:	4d14      	ldr	r5, [pc, #80]	; (8011658 <66ac93647e4c684dee2227e883242cdee4e3524a+0x58>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	682c      	ldr	r4, [r5, #0]
 801160a:	1ac0      	subs	r0, r0, r3
 801160c:	eb63 0303 	sbc.w	r3, r3, r3
 8011610:	e9c4 037a 	strd	r0, r3, [r4, #488]	; 0x1e8
 8011614:	4b11      	ldr	r3, [pc, #68]	; (801165c <66ac93647e4c684dee2227e883242cdee4e3524a+0x5c>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	8763      	strh	r3, [r4, #58]	; 0x3a
 801161a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801161e:	b1a3      	cbz	r3, 801164a <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 8011620:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8011624:	b993      	cbnz	r3, 801164c <66ac93647e4c684dee2227e883242cdee4e3524a+0x4c>
 8011626:	f009 fa39 	bl	801aa9c <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>
 801162a:	682b      	ldr	r3, [r5, #0]
 801162c:	e9d4 217a 	ldrd	r2, r1, [r4, #488]	; 0x1e8
 8011630:	681c      	ldr	r4, [r3, #0]
 8011632:	17e0      	asrs	r0, r4, #31
 8011634:	42a2      	cmp	r2, r4
 8011636:	685c      	ldr	r4, [r3, #4]
 8011638:	eb71 0000 	sbcs.w	r0, r1, r0
 801163c:	bfb8      	it	lt
 801163e:	601a      	strlt	r2, [r3, #0]
 8011640:	17e0      	asrs	r0, r4, #31
 8011642:	4294      	cmp	r4, r2
 8011644:	4188      	sbcs	r0, r1
 8011646:	da00      	bge.n	801164a <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 8011648:	605a      	str	r2, [r3, #4]
 801164a:	bd38      	pop	{r3, r4, r5, pc}
 801164c:	2300      	movs	r3, #0
 801164e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8011652:	e7fa      	b.n	801164a <66ac93647e4c684dee2227e883242cdee4e3524a+0x4a>
 8011654:	0801f014 	.word	0x0801f014
 8011658:	20000040 	.word	0x20000040
 801165c:	0801f08c 	.word	0x0801f08c

08011660 <0d988943f13c94ad3b7af08357d5d17f9043f067>:
 8011660:	b510      	push	{r4, lr}
 8011662:	4b0b      	ldr	r3, [pc, #44]	; (8011690 <0d988943f13c94ad3b7af08357d5d17f9043f067+0x30>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4604      	mov	r4, r0
 8011668:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
 801166c:	f8c4 2057 	str.w	r2, [r4, #87]	; 0x57
 8011670:	3057      	adds	r0, #87	; 0x57
 8011672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011676:	7103      	strb	r3, [r0, #4]
 8011678:	f003 fbb6 	bl	8014de8 <c44994d9507f8e8896ef91cc0ed0c665b4e74466>
 801167c:	2341      	movs	r3, #65	; 0x41
 801167e:	7063      	strb	r3, [r4, #1]
 8011680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011684:	4803      	ldr	r0, [pc, #12]	; (8011694 <0d988943f13c94ad3b7af08357d5d17f9043f067+0x34>)
 8011686:	2201      	movs	r2, #1
 8011688:	2100      	movs	r1, #0
 801168a:	f7fe b945 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801168e:	bf00      	nop
 8011690:	20000040 	.word	0x20000040
 8011694:	08015d75 	.word	0x08015d75

08011698 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>:
 8011698:	4b09      	ldr	r3, [pc, #36]	; (80116c0 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8+0x28>)
 801169a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
 80116a4:	f8c0 2057 	str.w	r2, [r0, #87]	; 0x57
 80116a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80116ac:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
 80116b0:	2341      	movs	r3, #65	; 0x41
 80116b2:	7043      	strb	r3, [r0, #1]
 80116b4:	2202      	movs	r2, #2
 80116b6:	4803      	ldr	r0, [pc, #12]	; (80116c4 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8+0x2c>)
 80116b8:	2100      	movs	r1, #0
 80116ba:	f7fe b92d 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80116be:	bf00      	nop
 80116c0:	20000040 	.word	0x20000040
 80116c4:	08015ad9 	.word	0x08015ad9

080116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>:
 80116c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	4e5e      	ldr	r6, [pc, #376]	; (8011848 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x180>)
 80116ce:	6834      	ldr	r4, [r6, #0]
 80116d0:	2000      	movs	r0, #0
 80116d2:	f7ff ff5f 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 80116d6:	f7f4 fdab 	bl	8006230 <EMBENET_RADIO_Idle>
 80116da:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 80116de:	2100      	movs	r1, #0
 80116e0:	e9c4 1174 	strd	r1, r1, [r4, #464]	; 0x1d0
 80116e4:	f104 0831 	add.w	r8, r4, #49	; 0x31
 80116e8:	b1da      	cbz	r2, 8011722 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x5a>
 80116ea:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 80116ee:	b163      	cbz	r3, 801170a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x42>
 80116f0:	3b01      	subs	r3, #1
 80116f2:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 80116f6:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 80116fa:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80116fe:	fab2 f282 	clz	r2, r2
 8011702:	0952      	lsrs	r2, r2, #5
 8011704:	4640      	mov	r0, r8
 8011706:	f003 fb8f 	bl	8014e28 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 801170a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 801170e:	f890 1055 	ldrb.w	r1, [r0, #85]	; 0x55
 8011712:	2900      	cmp	r1, #0
 8011714:	f040 8091 	bne.w	801183a <b7931a89d28a92b314e0dd9484b762986b0a117e+0x172>
 8011718:	f7ff ffbe 	bl	8011698 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 801171c:	2300      	movs	r3, #0
 801171e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 8011722:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 8011726:	b120      	cbz	r0, 8011732 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x6a>
 8011728:	f7fc fb64 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801172c:	2300      	movs	r3, #0
 801172e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 8011732:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8011736:	b120      	cbz	r0, 8011742 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x7a>
 8011738:	f7fc fb5c 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801173c:	2300      	movs	r3, #0
 801173e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8011742:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 8011746:	b120      	cbz	r0, 8011752 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x8a>
 8011748:	f7fc fb54 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801174c:	2300      	movs	r3, #0
 801174e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 8011752:	f8d4 0031 	ldr.w	r0, [r4, #49]	; 0x31
 8011756:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 801175a:	f7fd f843 	bl	800e7e4 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>
 801175e:	f7fa ff55 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8011762:	b140      	cbz	r0, 8011776 <b7931a89d28a92b314e0dd9484b762986b0a117e+0xae>
 8011764:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8011766:	f002 fd23 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 801176a:	3501      	adds	r5, #1
 801176c:	fbb5 f3f0 	udiv	r3, r5, r0
 8011770:	fb03 5510 	mls	r5, r3, r0, r5
 8011774:	8725      	strh	r5, [r4, #56]	; 0x38
 8011776:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8011778:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801177a:	1ad5      	subs	r5, r2, r3
 801177c:	429a      	cmp	r2, r3
 801177e:	b2ad      	uxth	r5, r5
 8011780:	d803      	bhi.n	801178a <b7931a89d28a92b314e0dd9484b762986b0a117e+0xc2>
 8011782:	f002 fd15 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8011786:	4428      	add	r0, r5
 8011788:	b285      	uxth	r5, r0
 801178a:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 801178e:	f7fd f9d7 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8011792:	6833      	ldr	r3, [r6, #0]
 8011794:	f04f 0900 	mov.w	r9, #0
 8011798:	f883 91bd 	strb.w	r9, [r3, #445]	; 0x1bd
 801179c:	2200      	movs	r2, #0
 801179e:	2300      	movs	r3, #0
 80117a0:	f8d4 71e8 	ldr.w	r7, [r4, #488]	; 0x1e8
 80117a4:	4640      	mov	r0, r8
 80117a6:	e9c4 237a 	strd	r2, r3, [r4, #488]	; 0x1e8
 80117aa:	f7fc f9f3 	bl	800db94 <77b737f3175c59c67851de07d0921a2dae9a70ab>
 80117ae:	4b27      	ldr	r3, [pc, #156]	; (801184c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x184>)
 80117b0:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 80117b4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80117b8:	4b25      	ldr	r3, [pc, #148]	; (8011850 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x188>)
 80117ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 80117c4:	fb08 7205 	mla	r2, r8, r5, r7
 80117c8:	2101      	movs	r1, #1
 80117ca:	f7fd f8c1 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 80117ce:	f7fa ff1d 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80117d2:	bb38      	cbnz	r0, 8011824 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 80117d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80117d8:	b323      	cbz	r3, 8011824 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 80117da:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80117dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80117de:	1ad5      	subs	r5, r2, r3
 80117e0:	b2ad      	uxth	r5, r5
 80117e2:	429a      	cmp	r2, r3
 80117e4:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 80117e8:	d804      	bhi.n	80117f4 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x12c>
 80117ea:	f002 fce1 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80117ee:	4405      	add	r5, r0
 80117f0:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 80117f4:	f8b4 51fa 	ldrh.w	r5, [r4, #506]	; 0x1fa
 80117f8:	3d01      	subs	r5, #1
 80117fa:	b2ad      	uxth	r5, r5
 80117fc:	f8a4 51fa 	strh.w	r5, [r4, #506]	; 0x1fa
 8011800:	b185      	cbz	r5, 8011824 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 8011802:	f002 fcd5 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8011806:	4285      	cmp	r5, r0
 8011808:	d80c      	bhi.n	8011824 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x15c>
 801180a:	2300      	movs	r3, #0
 801180c:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	4b10      	ldr	r3, [pc, #64]	; (8011854 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x18c>)
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 801181a:	eb08 0207 	add.w	r2, r8, r7
 801181e:	2101      	movs	r1, #1
 8011820:	f7fd f896 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011824:	6833      	ldr	r3, [r6, #0]
 8011826:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801182a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 801182e:	b13b      	cbz	r3, 8011840 <b7931a89d28a92b314e0dd9484b762986b0a117e+0x178>
 8011830:	2000      	movs	r0, #0
 8011832:	b003      	add	sp, #12
 8011834:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011838:	4718      	bx	r3
 801183a:	2340      	movs	r3, #64	; 0x40
 801183c:	7043      	strb	r3, [r0, #1]
 801183e:	e76d      	b.n	801171c <b7931a89d28a92b314e0dd9484b762986b0a117e+0x54>
 8011840:	b003      	add	sp, #12
 8011842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011846:	bf00      	nop
 8011848:	20000040 	.word	0x20000040
 801184c:	0801f014 	.word	0x0801f014
 8011850:	08012bc5 	.word	0x08012bc5
 8011854:	08011ebd 	.word	0x08011ebd

08011858 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6>:
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185c:	4ebb      	ldr	r6, [pc, #748]	; (8011b4c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f4>)
 801185e:	6833      	ldr	r3, [r6, #0]
 8011860:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011864:	b091      	sub	sp, #68	; 0x44
 8011866:	f8d3 43f4 	ldr.w	r4, [r3, #1012]	; 0x3f4
 801186a:	b10c      	cbz	r4, 8011870 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x18>
 801186c:	2001      	movs	r0, #1
 801186e:	47a0      	blx	r4
 8011870:	6835      	ldr	r5, [r6, #0]
 8011872:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
 8011876:	3b04      	subs	r3, #4
 8011878:	2b14      	cmp	r3, #20
 801187a:	d86f      	bhi.n	801195c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 801187c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011880:	006e0015 	.word	0x006e0015
 8011884:	00b90044 	.word	0x00b90044
 8011888:	00ce00c6 	.word	0x00ce00c6
 801188c:	00fc006e 	.word	0x00fc006e
 8011890:	012f0122 	.word	0x012f0122
 8011894:	0137006e 	.word	0x0137006e
 8011898:	0172006e 	.word	0x0172006e
 801189c:	018c006e 	.word	0x018c006e
 80118a0:	006e0194 	.word	0x006e0194
 80118a4:	020401c2 	.word	0x020401c2
 80118a8:	020c      	.short	0x020c
 80118aa:	2305      	movs	r3, #5
 80118ac:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 80118b0:	2300      	movs	r3, #0
 80118b2:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 80118b6:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 80118ba:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	4ba3      	ldr	r3, [pc, #652]	; (8011b50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 80118c8:	440a      	add	r2, r1
 80118ca:	2101      	movs	r1, #1
 80118cc:	f7fd f840 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 80118d0:	2001      	movs	r0, #1
 80118d2:	f7ff fe5f 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 80118d6:	6833      	ldr	r3, [r6, #0]
 80118d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80118dc:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 80118e0:	b10f      	cbz	r7, 80118e6 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x8e>
 80118e2:	2001      	movs	r0, #1
 80118e4:	47b8      	blx	r7
 80118e6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80118ea:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80118ec:	f995 11d9 	ldrsb.w	r1, [r5, #473]	; 0x1d9
 80118f0:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 80118f4:	f7f4 fca6 	bl	8006244 <EMBENET_RADIO_TxEnable>
 80118f8:	b10f      	cbz	r7, 80118fe <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xa6>
 80118fa:	2000      	movs	r0, #0
 80118fc:	47b8      	blx	r7
 80118fe:	6833      	ldr	r3, [r6, #0]
 8011900:	2206      	movs	r2, #6
 8011902:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8011906:	e02b      	b.n	8011960 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 8011908:	2307      	movs	r3, #7
 801190a:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 801190e:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
 8011912:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011916:	f04f 0800 	mov.w	r8, #0
 801191a:	4b8d      	ldr	r3, [pc, #564]	; (8011b50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 801191c:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011920:	f8cd 8004 	str.w	r8, [sp, #4]
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 801192a:	440a      	add	r2, r1
 801192c:	2101      	movs	r1, #1
 801192e:	f7fd f80f 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011932:	2002      	movs	r0, #2
 8011934:	f7ff fe2e 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011938:	6833      	ldr	r3, [r6, #0]
 801193a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801193e:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 8011942:	b9b7      	cbnz	r7, 8011972 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x11a>
 8011944:	f7f4 fcb4 	bl	80062b0 <EMBENET_RADIO_TxNow>
 8011948:	4606      	mov	r6, r0
 801194a:	3604      	adds	r6, #4
 801194c:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
 8011950:	d117      	bne.n	8011982 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x12a>
 8011952:	2240      	movs	r2, #64	; 0x40
 8011954:	705a      	strb	r2, [r3, #1]
 8011956:	2300      	movs	r3, #0
 8011958:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
 801195c:	f7ff feb4 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011960:	2c00      	cmp	r4, #0
 8011962:	f000 81a1 	beq.w	8011ca8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x450>
 8011966:	2000      	movs	r0, #0
 8011968:	4623      	mov	r3, r4
 801196a:	b011      	add	sp, #68	; 0x44
 801196c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	4718      	bx	r3
 8011972:	2001      	movs	r0, #1
 8011974:	47b8      	blx	r7
 8011976:	f7f4 fc9b 	bl	80062b0 <EMBENET_RADIO_TxNow>
 801197a:	4606      	mov	r6, r0
 801197c:	4640      	mov	r0, r8
 801197e:	47b8      	blx	r7
 8011980:	e7e3      	b.n	801194a <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xf2>
 8011982:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8011986:	3201      	adds	r2, #1
 8011988:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801198c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8011990:	930b      	str	r3, [sp, #44]	; 0x2c
 8011992:	f8d5 8031 	ldr.w	r8, [r5, #49]	; 0x31
 8011996:	f003 f95b 	bl	8014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 801199a:	900d      	str	r0, [sp, #52]	; 0x34
 801199c:	f003 f974 	bl	8014c88 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf>
 80119a0:	900c      	str	r0, [sp, #48]	; 0x30
 80119a2:	f003 f87f 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 80119a6:	4607      	mov	r7, r0
 80119a8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
 80119ac:	f995 a1d9 	ldrsb.w	sl, [r5, #473]	; 0x1d9
 80119b0:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
 80119b4:	f895 b048 	ldrb.w	fp, [r5, #72]	; 0x48
 80119b8:	3041      	adds	r0, #65	; 0x41
 80119ba:	f7fb fd39 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80119be:	4606      	mov	r6, r0
 80119c0:	2002      	movs	r0, #2
 80119c2:	460d      	mov	r5, r1
 80119c4:	f7fa fe30 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80119c8:	f7fb fd32 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80119cc:	f04f 0c01 	mov.w	ip, #1
 80119d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80119d4:	e9cd 6504 	strd	r6, r5, [sp, #16]
 80119d8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80119dc:	e9cd 7900 	strd	r7, r9, [sp]
 80119e0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80119e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119e6:	f8cd c020 	str.w	ip, [sp, #32]
 80119ea:	4640      	mov	r0, r8
 80119ec:	f009 f862 	bl	801aab4 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 80119f0:	e7b6      	b.n	8011960 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 80119f2:	f7ff fe69 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 80119f6:	2302      	movs	r3, #2
 80119f8:	930e      	str	r3, [sp, #56]	; 0x38
 80119fa:	4a56      	ldr	r2, [pc, #344]	; (8011b54 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2fc>)
 80119fc:	4b56      	ldr	r3, [pc, #344]	; (8011b58 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 80119fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a00:	ab10      	add	r3, sp, #64	; 0x40
 8011a02:	e913 0003 	ldmdb	r3, {r0, r1}
 8011a06:	f7fe fe15 	bl	8010634 <LOGGER_PrintLine>
 8011a0a:	e7a9      	b.n	8011960 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 8011a0c:	f7ff fe5c 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011a10:	2302      	movs	r3, #2
 8011a12:	930e      	str	r3, [sp, #56]	; 0x38
 8011a14:	4b50      	ldr	r3, [pc, #320]	; (8011b58 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 8011a16:	4a51      	ldr	r2, [pc, #324]	; (8011b5c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x304>)
 8011a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a1a:	e7f1      	b.n	8011a00 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 8011a1c:	230a      	movs	r3, #10
 8011a1e:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011a22:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 8011a26:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011a2a:	f04f 0800 	mov.w	r8, #0
 8011a2e:	4b48      	ldr	r3, [pc, #288]	; (8011b50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 8011a30:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011a34:	f8cd 8004 	str.w	r8, [sp, #4]
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8011a3e:	440a      	add	r2, r1
 8011a40:	2101      	movs	r1, #1
 8011a42:	f7fc ff85 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011a46:	2001      	movs	r0, #1
 8011a48:	f7ff fda4 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011a4c:	6833      	ldr	r3, [r6, #0]
 8011a4e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011a52:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 8011a56:	b157      	cbz	r7, 8011a6e <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x216>
 8011a58:	2001      	movs	r0, #1
 8011a5a:	47b8      	blx	r7
 8011a5c:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8011a60:	f7f4 fc44 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8011a64:	4640      	mov	r0, r8
 8011a66:	47b8      	blx	r7
 8011a68:	6833      	ldr	r3, [r6, #0]
 8011a6a:	220b      	movs	r2, #11
 8011a6c:	e749      	b.n	8011902 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 8011a6e:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8011a72:	f7f4 fc3b 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8011a76:	e7f7      	b.n	8011a68 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x210>
 8011a78:	230c      	movs	r3, #12
 8011a7a:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011a7e:	2003      	movs	r0, #3
 8011a80:	f7ff fd88 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011a84:	6833      	ldr	r3, [r6, #0]
 8011a86:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011a8a:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	; 0x3f8
 8011a8e:	b996      	cbnz	r6, 8011ab6 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x25e>
 8011a90:	f7f4 fc54 	bl	800633c <EMBENET_RADIO_RxNow>
 8011a94:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011a98:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8011a9c:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	9301      	str	r3, [sp, #4]
 8011aa4:	4b2a      	ldr	r3, [pc, #168]	; (8011b50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	440a      	add	r2, r1
 8011aaa:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8011aae:	2101      	movs	r1, #1
 8011ab0:	f7fc ff4e 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011ab4:	e754      	b.n	8011960 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x108>
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	47b0      	blx	r6
 8011aba:	f7f4 fc3f 	bl	800633c <EMBENET_RADIO_RxNow>
 8011abe:	2000      	movs	r0, #0
 8011ac0:	47b0      	blx	r6
 8011ac2:	e7e7      	b.n	8011a94 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x23c>
 8011ac4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
 8011ac8:	f890 2055 	ldrb.w	r2, [r0, #85]	; 0x55
 8011acc:	f1c2 0203 	rsb	r2, r2, #3
 8011ad0:	f100 011d 	add.w	r1, r0, #29
 8011ad4:	b2d2      	uxtb	r2, r2
 8011ad6:	3041      	adds	r0, #65	; 0x41
 8011ad8:	f008 ff42 	bl	801a960 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d>
 8011adc:	e73e      	b.n	801195c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 8011ade:	f7ff fdf3 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8011ae6:	4b1c      	ldr	r3, [pc, #112]	; (8011b58 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x300>)
 8011ae8:	4a1d      	ldr	r2, [pc, #116]	; (8011b60 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x308>)
 8011aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8011aec:	e788      	b.n	8011a00 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 8011aee:	2310      	movs	r3, #16
 8011af0:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011af4:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 8011af8:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011afc:	f04f 0800 	mov.w	r8, #0
 8011b00:	4b13      	ldr	r3, [pc, #76]	; (8011b50 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2f8>)
 8011b02:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011b06:	f8cd 8004 	str.w	r8, [sp, #4]
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8011b10:	440a      	add	r2, r1
 8011b12:	2101      	movs	r1, #1
 8011b14:	f7fc ff1c 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011b18:	2001      	movs	r0, #1
 8011b1a:	f7ff fd3b 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011b1e:	6833      	ldr	r3, [r6, #0]
 8011b20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011b24:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 8011b28:	b157      	cbz	r7, 8011b40 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2e8>
 8011b2a:	2001      	movs	r0, #1
 8011b2c:	47b8      	blx	r7
 8011b2e:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8011b32:	f7f4 fbdb 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8011b36:	4640      	mov	r0, r8
 8011b38:	47b8      	blx	r7
 8011b3a:	6833      	ldr	r3, [r6, #0]
 8011b3c:	2211      	movs	r2, #17
 8011b3e:	e6e0      	b.n	8011902 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 8011b40:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8011b44:	f7f4 fbd2 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8011b48:	e7f7      	b.n	8011b3a <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x2e2>
 8011b4a:	bf00      	nop
 8011b4c:	20000040 	.word	0x20000040
 8011b50:	08011859 	.word	0x08011859
 8011b54:	08020784 	.word	0x08020784
 8011b58:	08020778 	.word	0x08020778
 8011b5c:	08020793 	.word	0x08020793
 8011b60:	080207ad 	.word	0x080207ad
 8011b64:	2312      	movs	r3, #18
 8011b66:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011b6a:	2003      	movs	r0, #3
 8011b6c:	f7ff fd12 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011b70:	6833      	ldr	r3, [r6, #0]
 8011b72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011b76:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	; 0x3f8
 8011b7a:	b936      	cbnz	r6, 8011b8a <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x332>
 8011b7c:	f7f4 fbde 	bl	800633c <EMBENET_RADIO_RxNow>
 8011b80:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011b84:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8011b88:	e788      	b.n	8011a9c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x244>
 8011b8a:	2001      	movs	r0, #1
 8011b8c:	47b0      	blx	r6
 8011b8e:	f7f4 fbd5 	bl	800633c <EMBENET_RADIO_RxNow>
 8011b92:	2000      	movs	r0, #0
 8011b94:	47b0      	blx	r6
 8011b96:	e7f3      	b.n	8011b80 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x328>
 8011b98:	f7ff fd96 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8011ba0:	4b43      	ldr	r3, [pc, #268]	; (8011cb0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 8011ba2:	4a44      	ldr	r2, [pc, #272]	; (8011cb4 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x45c>)
 8011ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ba6:	e72b      	b.n	8011a00 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 8011ba8:	2315      	movs	r3, #21
 8011baa:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011bb4:	f8d5 222c 	ldr.w	r2, [r5, #556]	; 0x22c
 8011bb8:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	4b3e      	ldr	r3, [pc, #248]	; (8011cb8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x460>)
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8011bc6:	440a      	add	r2, r1
 8011bc8:	2101      	movs	r1, #1
 8011bca:	f7fc fec1 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011bce:	2001      	movs	r0, #1
 8011bd0:	f7ff fce0 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011bd4:	6833      	ldr	r3, [r6, #0]
 8011bd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011bda:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 8011bde:	b10f      	cbz	r7, 8011be4 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x38c>
 8011be0:	2001      	movs	r0, #1
 8011be2:	47b8      	blx	r7
 8011be4:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
 8011be8:	f995 11d9 	ldrsb.w	r1, [r5, #473]	; 0x1d9
 8011bec:	7a13      	ldrb	r3, [r2, #8]
 8011bee:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8011bf2:	6852      	ldr	r2, [r2, #4]
 8011bf4:	f7f4 fb26 	bl	8006244 <EMBENET_RADIO_TxEnable>
 8011bf8:	b10f      	cbz	r7, 8011bfe <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x3a6>
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	47b8      	blx	r7
 8011bfe:	6833      	ldr	r3, [r6, #0]
 8011c00:	2216      	movs	r2, #22
 8011c02:	e67e      	b.n	8011902 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0xaa>
 8011c04:	2317      	movs	r3, #23
 8011c06:	f8d5 11d0 	ldr.w	r1, [r5, #464]	; 0x1d0
 8011c0a:	f8d5 2230 	ldr.w	r2, [r5, #560]	; 0x230
 8011c0e:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
 8011c12:	f04f 0800 	mov.w	r8, #0
 8011c16:	4b28      	ldr	r3, [pc, #160]	; (8011cb8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x460>)
 8011c18:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8011c1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011c20:	9300      	str	r3, [sp, #0]
 8011c22:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8011c26:	440a      	add	r2, r1
 8011c28:	2101      	movs	r1, #1
 8011c2a:	f7fc fe91 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011c2e:	2002      	movs	r0, #2
 8011c30:	f7ff fcb0 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8011c34:	6833      	ldr	r3, [r6, #0]
 8011c36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011c3a:	f8d3 73f8 	ldr.w	r7, [r3, #1016]	; 0x3f8
 8011c3e:	b1ff      	cbz	r7, 8011c80 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x428>
 8011c40:	2001      	movs	r0, #1
 8011c42:	47b8      	blx	r7
 8011c44:	f7f4 fb34 	bl	80062b0 <EMBENET_RADIO_TxNow>
 8011c48:	4606      	mov	r6, r0
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	47b8      	blx	r7
 8011c4e:	3604      	adds	r6, #4
 8011c50:	f43f ae84 	beq.w	801195c <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x104>
 8011c54:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8011c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c5a:	f8d5 8031 	ldr.w	r8, [r5, #49]	; 0x31
 8011c5e:	f002 fff7 	bl	8014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 8011c62:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8011c64:	900d      	str	r0, [sp, #52]	; 0x34
 8011c66:	930c      	str	r3, [sp, #48]	; 0x30
 8011c68:	f002 ff1c 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	f8d5 01c8 	ldr.w	r0, [r5, #456]	; 0x1c8
 8011c72:	f995 a1d9 	ldrsb.w	sl, [r5, #473]	; 0x1d9
 8011c76:	f890 9052 	ldrb.w	r9, [r0, #82]	; 0x52
 8011c7a:	f890 b008 	ldrb.w	fp, [r0, #8]
 8011c7e:	e69b      	b.n	80119b8 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x160>
 8011c80:	f7f4 fb16 	bl	80062b0 <EMBENET_RADIO_TxNow>
 8011c84:	4606      	mov	r6, r0
 8011c86:	e7e2      	b.n	8011c4e <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x3f6>
 8011c88:	f7ff fd1e 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011c8c:	2302      	movs	r3, #2
 8011c8e:	930e      	str	r3, [sp, #56]	; 0x38
 8011c90:	4b07      	ldr	r3, [pc, #28]	; (8011cb0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 8011c92:	4a0a      	ldr	r2, [pc, #40]	; (8011cbc <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x464>)
 8011c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c96:	e6b3      	b.n	8011a00 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 8011c98:	f7ff fd16 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	930e      	str	r3, [sp, #56]	; 0x38
 8011ca0:	4b03      	ldr	r3, [pc, #12]	; (8011cb0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x458>)
 8011ca2:	4a07      	ldr	r2, [pc, #28]	; (8011cc0 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x468>)
 8011ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ca6:	e6ab      	b.n	8011a00 <0ec428ec777fdcd1df5061356b63c4cb7d8159a6+0x1a8>
 8011ca8:	b011      	add	sp, #68	; 0x44
 8011caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cae:	bf00      	nop
 8011cb0:	08020778 	.word	0x08020778
 8011cb4:	080207c6 	.word	0x080207c6
 8011cb8:	08011859 	.word	0x08011859
 8011cbc:	080207e0 	.word	0x080207e0
 8011cc0:	080207ee 	.word	0x080207ee

08011cc4 <e0d63f279bcffa109806a257de8645074809531c>:
 8011cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc8:	4e35      	ldr	r6, [pc, #212]	; (8011da0 <e0d63f279bcffa109806a257de8645074809531c+0xdc>)
 8011cca:	b088      	sub	sp, #32
 8011ccc:	f7ff fcfc 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011cd0:	2141      	movs	r1, #65	; 0x41
 8011cd2:	2040      	movs	r0, #64	; 0x40
 8011cd4:	6835      	ldr	r5, [r6, #0]
 8011cd6:	f7fc fd49 	bl	800e76c <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>
 8011cda:	f04f 0800 	mov.w	r8, #0
 8011cde:	4604      	mov	r4, r0
 8011ce0:	f105 0731 	add.w	r7, r5, #49	; 0x31
 8011ce4:	2c00      	cmp	r4, #0
 8011ce6:	d143      	bne.n	8011d70 <e0d63f279bcffa109806a257de8645074809531c+0xac>
 8011ce8:	4620      	mov	r0, r4
 8011cea:	6837      	ldr	r7, [r6, #0]
 8011cec:	f002 f8e4 	bl	8013eb8 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 8011cf0:	6833      	ldr	r3, [r6, #0]
 8011cf2:	f887 403c 	strb.w	r4, [r7, #60]	; 0x3c
 8011cf6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8011cfa:	3201      	adds	r2, #1
 8011cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8011d00:	e9c3 4400 	strd	r4, r4, [r3]
 8011d04:	f007 fa1c 	bl	8019140 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>
 8011d08:	f7fb fa9c 	bl	800d244 <112b6c7ff0378e3d771f72ee1fe6c65d1cd5ff37>
 8011d0c:	f7fb ff86 	bl	800dc1c <5abd2f358b9e462fcede09cdd96a94c4ca379573>
 8011d10:	2210      	movs	r2, #16
 8011d12:	4621      	mov	r1, r4
 8011d14:	f10d 000d 	add.w	r0, sp, #13
 8011d18:	f00a f946 	bl	801bfa8 <memset>
 8011d1c:	2306      	movs	r3, #6
 8011d1e:	f88d 300c 	strb.w	r3, [sp, #12]
 8011d22:	f505 76ec 	add.w	r6, r5, #472	; 0x1d8
 8011d26:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8011d2a:	42a3      	cmp	r3, r4
 8011d2c:	d831      	bhi.n	8011d92 <e0d63f279bcffa109806a257de8645074809531c+0xce>
 8011d2e:	2400      	movs	r4, #0
 8011d30:	ab01      	add	r3, sp, #4
 8011d32:	9401      	str	r4, [sp, #4]
 8011d34:	f8ad 4008 	strh.w	r4, [sp, #8]
 8011d38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d3c:	f002 f9f6 	bl	801412c <6759635076cb4c933592248ebd293b63832a7e9b>
 8011d40:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8011d44:	f8c5 41e0 	str.w	r4, [r5, #480]	; 0x1e0
 8011d48:	3301      	adds	r3, #1
 8011d4a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8011d4e:	f7fc ff0f 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8011d52:	2101      	movs	r1, #1
 8011d54:	f7fd f89a 	bl	800ee8c <9506f9c37a945216115ab5227293f46163fc6230>
 8011d58:	2301      	movs	r3, #1
 8011d5a:	872b      	strh	r3, [r5, #56]	; 0x38
 8011d5c:	86ec      	strh	r4, [r5, #54]	; 0x36
 8011d5e:	f7fc ff07 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8011d62:	f8c5 01f4 	str.w	r0, [r5, #500]	; 0x1f4
 8011d66:	f008 fdef 	bl	801a948 <e9a40864df7737216396ae2e57c8bf2439468a7c>
 8011d6a:	b008      	add	sp, #32
 8011d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d70:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 8011d7a:	793b      	ldrb	r3, [r7, #4]
 8011d7c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8011d80:	2000      	movs	r0, #0
 8011d82:	f003 fea9 	bl	8015ad8 <249d70512359d3b556e86d60c45850a37e74e9ce>
 8011d86:	2141      	movs	r1, #65	; 0x41
 8011d88:	2040      	movs	r0, #64	; 0x40
 8011d8a:	f7fc fcef 	bl	800e76c <6e9ad617bf3c14b2ac474e5b98f5ac57b3d3da73>
 8011d8e:	4604      	mov	r4, r0
 8011d90:	e7a8      	b.n	8011ce4 <e0d63f279bcffa109806a257de8645074809531c+0x20>
 8011d92:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8011d96:	a903      	add	r1, sp, #12
 8011d98:	f002 fb76 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	e7c2      	b.n	8011d26 <e0d63f279bcffa109806a257de8645074809531c+0x62>
 8011da0:	20000040 	.word	0x20000040

08011da4 <251b1d447757d9850ec5af8486c96e3050487f39>:
 8011da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011da6:	4c40      	ldr	r4, [pc, #256]	; (8011ea8 <251b1d447757d9850ec5af8486c96e3050487f39+0x104>)
 8011da8:	6823      	ldr	r3, [r4, #0]
 8011daa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011dae:	460e      	mov	r6, r1
 8011db0:	f8d3 53fc 	ldr.w	r5, [r3, #1020]	; 0x3fc
 8011db4:	b10d      	cbz	r5, 8011dba <251b1d447757d9850ec5af8486c96e3050487f39+0x16>
 8011db6:	2001      	movs	r0, #1
 8011db8:	47a8      	blx	r5
 8011dba:	6820      	ldr	r0, [r4, #0]
 8011dbc:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8011dc0:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
 8011dc4:	1af2      	subs	r2, r6, r3
 8011dc6:	b191      	cbz	r1, 8011dee <251b1d447757d9850ec5af8486c96e3050487f39+0x4a>
 8011dc8:	4c38      	ldr	r4, [pc, #224]	; (8011eac <251b1d447757d9850ec5af8486c96e3050487f39+0x108>)
 8011dca:	6921      	ldr	r1, [r4, #16]
 8011dcc:	4291      	cmp	r1, r2
 8011dce:	d21f      	bcs.n	8011e10 <251b1d447757d9850ec5af8486c96e3050487f39+0x6c>
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	9202      	str	r2, [sp, #8]
 8011dd4:	4a36      	ldr	r2, [pc, #216]	; (8011eb0 <251b1d447757d9850ec5af8486c96e3050487f39+0x10c>)
 8011dd6:	9203      	str	r2, [sp, #12]
 8011dd8:	9300      	str	r3, [sp, #0]
 8011dda:	a904      	add	r1, sp, #16
 8011ddc:	e911 0003 	ldmdb	r1, {r0, r1}
 8011de0:	4a34      	ldr	r2, [pc, #208]	; (8011eb4 <251b1d447757d9850ec5af8486c96e3050487f39+0x110>)
 8011de2:	4633      	mov	r3, r6
 8011de4:	f7fe fc26 	bl	8010634 <LOGGER_PrintLine>
 8011de8:	f7ff fc6e 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8011dec:	e008      	b.n	8011e00 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 8011dee:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d104      	bne.n	8011e00 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 8011df6:	e9c0 2274 	strd	r2, r2, [r0, #464]	; 0x1d0
 8011dfa:	2302      	movs	r3, #2
 8011dfc:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
 8011e00:	2d00      	cmp	r5, #0
 8011e02:	d04f      	beq.n	8011ea4 <251b1d447757d9850ec5af8486c96e3050487f39+0x100>
 8011e04:	2000      	movs	r0, #0
 8011e06:	462b      	mov	r3, r5
 8011e08:	b004      	add	sp, #16
 8011e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e0e:	4718      	bx	r3
 8011e10:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
 8011e14:	3907      	subs	r1, #7
 8011e16:	2910      	cmp	r1, #16
 8011e18:	d8e6      	bhi.n	8011de8 <251b1d447757d9850ec5af8486c96e3050487f39+0x44>
 8011e1a:	a601      	add	r6, pc, #4	; (adr r6, 8011e20 <251b1d447757d9850ec5af8486c96e3050487f39+0x7c>)
 8011e1c:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8011e20:	08011e65 	.word	0x08011e65
 8011e24:	08011de9 	.word	0x08011de9
 8011e28:	08011de9 	.word	0x08011de9
 8011e2c:	08011de9 	.word	0x08011de9
 8011e30:	08011e87 	.word	0x08011e87
 8011e34:	08011e87 	.word	0x08011e87
 8011e38:	08011de9 	.word	0x08011de9
 8011e3c:	08011de9 	.word	0x08011de9
 8011e40:	08011de9 	.word	0x08011de9
 8011e44:	08011de9 	.word	0x08011de9
 8011e48:	08011e95 	.word	0x08011e95
 8011e4c:	08011e95 	.word	0x08011e95
 8011e50:	08011de9 	.word	0x08011de9
 8011e54:	08011de9 	.word	0x08011de9
 8011e58:	08011de9 	.word	0x08011de9
 8011e5c:	08011de9 	.word	0x08011de9
 8011e60:	08011ea1 	.word	0x08011ea1
 8011e64:	2108      	movs	r1, #8
 8011e66:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 8011e6a:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 8011e6e:	69a1      	ldr	r1, [r4, #24]
 8011e70:	f890 01f0 	ldrb.w	r0, [r0, #496]	; 0x1f0
 8011e74:	2400      	movs	r4, #0
 8011e76:	9401      	str	r4, [sp, #4]
 8011e78:	4c0f      	ldr	r4, [pc, #60]	; (8011eb8 <251b1d447757d9850ec5af8486c96e3050487f39+0x114>)
 8011e7a:	9400      	str	r4, [sp, #0]
 8011e7c:	440a      	add	r2, r1
 8011e7e:	2101      	movs	r1, #1
 8011e80:	f7fc fd66 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8011e84:	e7bc      	b.n	8011e00 <251b1d447757d9850ec5af8486c96e3050487f39+0x5c>
 8011e86:	210d      	movs	r1, #13
 8011e88:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 8011e8c:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 8011e90:	69e1      	ldr	r1, [r4, #28]
 8011e92:	e7ed      	b.n	8011e70 <251b1d447757d9850ec5af8486c96e3050487f39+0xcc>
 8011e94:	2113      	movs	r1, #19
 8011e96:	e9c0 2274 	strd	r2, r2, [r0, #464]	; 0x1d0
 8011e9a:	f880 11bd 	strb.w	r1, [r0, #445]	; 0x1bd
 8011e9e:	e7e6      	b.n	8011e6e <251b1d447757d9850ec5af8486c96e3050487f39+0xca>
 8011ea0:	2118      	movs	r1, #24
 8011ea2:	e7f1      	b.n	8011e88 <251b1d447757d9850ec5af8486c96e3050487f39+0xe4>
 8011ea4:	b004      	add	sp, #16
 8011ea6:	bd70      	pop	{r4, r5, r6, pc}
 8011ea8:	20000040 	.word	0x20000040
 8011eac:	0801f014 	.word	0x0801f014
 8011eb0:	08020778 	.word	0x08020778
 8011eb4:	08020807 	.word	0x08020807
 8011eb8:	08011859 	.word	0x08011859

08011ebc <notifyFreeSlots>:
 8011ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ebe:	4b1b      	ldr	r3, [pc, #108]	; (8011f2c <notifyFreeSlots+0x70>)
 8011ec0:	681f      	ldr	r7, [r3, #0]
 8011ec2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011ec6:	b31b      	cbz	r3, 8011f10 <notifyFreeSlots+0x54>
 8011ec8:	f7f3 ffdc 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8011ecc:	f8d7 4031 	ldr.w	r4, [r7, #49]	; 0x31
 8011ed0:	4b17      	ldr	r3, [pc, #92]	; (8011f30 <notifyFreeSlots+0x74>)
 8011ed2:	f897 5035 	ldrb.w	r5, [r7, #53]	; 0x35
 8011ed6:	691e      	ldr	r6, [r3, #16]
 8011ed8:	f8b7 71fa 	ldrh.w	r7, [r7, #506]	; 0x1fa
 8011edc:	3401      	adds	r4, #1
 8011ede:	f145 0500 	adc.w	r5, r5, #0
 8011ee2:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8011ee6:	f7f3 ffed 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8011eea:	fba6 0104 	umull	r0, r1, r6, r4
 8011eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	fb06 1105 	mla	r1, r6, r5, r1
 8011ef8:	f7ee fe88 	bl	8000c0c <__aeabi_uldivmod>
 8011efc:	4377      	muls	r7, r6
 8011efe:	4602      	mov	r2, r0
 8011f00:	460b      	mov	r3, r1
 8011f02:	9700      	str	r7, [sp, #0]
 8011f04:	4620      	mov	r0, r4
 8011f06:	4629      	mov	r1, r5
 8011f08:	f008 fe30 	bl	801ab6c <EMBENET_INTERNAL_TRACE_OnFreeSlots>
 8011f0c:	b003      	add	sp, #12
 8011f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011f14:	b133      	cbz	r3, 8011f24 <notifyFreeSlots+0x68>
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4619      	mov	r1, r3
 8011f20:	f008 fe24 	bl	801ab6c <EMBENET_INTERNAL_TRACE_OnFreeSlots>
 8011f24:	2300      	movs	r3, #0
 8011f26:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8011f2a:	e7ef      	b.n	8011f0c <notifyFreeSlots+0x50>
 8011f2c:	20000040 	.word	0x20000040
 8011f30:	0801f014 	.word	0x0801f014

08011f34 <processEb.constprop.0>:
 8011f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f38:	4b79      	ldr	r3, [pc, #484]	; (8012120 <processEb.constprop.0+0x1ec>)
 8011f3a:	b089      	sub	sp, #36	; 0x24
 8011f3c:	681f      	ldr	r7, [r3, #0]
 8011f3e:	9104      	str	r1, [sp, #16]
 8011f40:	7a01      	ldrb	r1, [r0, #8]
 8011f42:	4605      	mov	r5, r0
 8011f44:	2600      	movs	r6, #0
 8011f46:	428e      	cmp	r6, r1
 8011f48:	d303      	bcc.n	8011f52 <processEb.constprop.0+0x1e>
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	b009      	add	sp, #36	; 0x24
 8011f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f52:	686a      	ldr	r2, [r5, #4]
 8011f54:	5d93      	ldrb	r3, [r2, r6]
 8011f56:	4432      	add	r2, r6
 8011f58:	3602      	adds	r6, #2
 8011f5a:	7852      	ldrb	r2, [r2, #1]
 8011f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011f60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011f64:	9202      	str	r2, [sp, #8]
 8011f66:	f3c3 22c3 	ubfx	r2, r3, #11, #4
 8011f6a:	2a01      	cmp	r2, #1
 8011f6c:	b2f6      	uxtb	r6, r6
 8011f6e:	9205      	str	r2, [sp, #20]
 8011f70:	d121      	bne.n	8011fb6 <processEb.constprop.0+0x82>
 8011f72:	041b      	lsls	r3, r3, #16
 8011f74:	d51f      	bpl.n	8011fb6 <processEb.constprop.0+0x82>
 8011f76:	f04f 0900 	mov.w	r9, #0
 8011f7a:	4634      	mov	r4, r6
 8011f7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f80:	46ca      	mov	sl, r9
 8011f82:	46c8      	mov	r8, r9
 8011f84:	46cb      	mov	fp, r9
 8011f86:	9b02      	ldr	r3, [sp, #8]
 8011f88:	18f1      	adds	r1, r6, r3
 8011f8a:	428c      	cmp	r4, r1
 8011f8c:	f080 80b6 	bcs.w	80120fc <processEb.constprop.0+0x1c8>
 8011f90:	f1b9 0f00 	cmp.w	r9, #0
 8011f94:	d013      	beq.n	8011fbe <processEb.constprop.0+0x8a>
 8011f96:	f1bb 0f00 	cmp.w	fp, #0
 8011f9a:	d010      	beq.n	8011fbe <processEb.constprop.0+0x8a>
 8011f9c:	f1b8 0f00 	cmp.w	r8, #0
 8011fa0:	d00d      	beq.n	8011fbe <processEb.constprop.0+0x8a>
 8011fa2:	f1ba 0f00 	cmp.w	sl, #0
 8011fa6:	d00a      	beq.n	8011fbe <processEb.constprop.0+0x8a>
 8011fa8:	9b01      	ldr	r3, [sp, #4]
 8011faa:	b143      	cbz	r3, 8011fbe <processEb.constprop.0+0x8a>
 8011fac:	9a04      	ldr	r2, [sp, #16]
 8011fae:	7a2b      	ldrb	r3, [r5, #8]
 8011fb0:	8013      	strh	r3, [r2, #0]
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	e7ca      	b.n	8011f4c <processEb.constprop.0+0x18>
 8011fb6:	9b02      	ldr	r3, [sp, #8]
 8011fb8:	441e      	add	r6, r3
 8011fba:	b2f6      	uxtb	r6, r6
 8011fbc:	e7c3      	b.n	8011f46 <processEb.constprop.0+0x12>
 8011fbe:	6868      	ldr	r0, [r5, #4]
 8011fc0:	1901      	adds	r1, r0, r4
 8011fc2:	f810 e004 	ldrb.w	lr, [r0, r4]
 8011fc6:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011fca:	f8cd e00c 	str.w	lr, [sp, #12]
 8011fce:	ea4e 210c 	orr.w	r1, lr, ip, lsl #8
 8011fd2:	3402      	adds	r4, #2
 8011fd4:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
 8011fd8:	b2e4      	uxtb	r4, r4
 8011fda:	d00e      	beq.n	8011ffa <processEb.constprop.0+0xc6>
 8011fdc:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 8011fe0:	2909      	cmp	r1, #9
 8011fe2:	d106      	bne.n	8011ff2 <processEb.constprop.0+0xbe>
 8011fe4:	5d01      	ldrb	r1, [r0, r4]
 8011fe6:	b921      	cbnz	r1, 8011ff2 <processEb.constprop.0+0xbe>
 8011fe8:	4a4d      	ldr	r2, [pc, #308]	; (8012120 <processEb.constprop.0+0x1ec>)
 8011fea:	6812      	ldr	r2, [r2, #0]
 8011fec:	46e3      	mov	fp, ip
 8011fee:	f882 11e5 	strb.w	r1, [r2, #485]	; 0x1e5
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	4423      	add	r3, r4
 8011ff6:	b2dc      	uxtb	r4, r3
 8011ff8:	e7c5      	b.n	8011f86 <processEb.constprop.0+0x52>
 8011ffa:	1209      	asrs	r1, r1, #8
 8011ffc:	291c      	cmp	r1, #28
 8011ffe:	d073      	beq.n	80120e8 <processEb.constprop.0+0x1b4>
 8012000:	dc41      	bgt.n	8012086 <processEb.constprop.0+0x152>
 8012002:	291a      	cmp	r1, #26
 8012004:	d05a      	beq.n	80120bc <processEb.constprop.0+0x188>
 8012006:	291b      	cmp	r1, #27
 8012008:	d1f3      	bne.n	8011ff2 <processEb.constprop.0+0xbe>
 801200a:	f1bb 0f00 	cmp.w	fp, #0
 801200e:	d0f0      	beq.n	8011ff2 <processEb.constprop.0+0xbe>
 8012010:	f1b8 0f00 	cmp.w	r8, #0
 8012014:	d0ed      	beq.n	8011ff2 <processEb.constprop.0+0xbe>
 8012016:	f10d 0b18 	add.w	fp, sp, #24
 801201a:	4658      	mov	r0, fp
 801201c:	f002 f8ae 	bl	801417c <362182124631b23da2866810d52fbd55ab277bcc>
 8012020:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8012024:	bb5a      	cbnz	r2, 801207e <processEb.constprop.0+0x14a>
 8012026:	686a      	ldr	r2, [r5, #4]
 8012028:	5d11      	ldrb	r1, [r2, r4]
 801202a:	f88d 101b 	strb.w	r1, [sp, #27]
 801202e:	4422      	add	r2, r4
 8012030:	7851      	ldrb	r1, [r2, #1]
 8012032:	f88d 101a 	strb.w	r1, [sp, #26]
 8012036:	7891      	ldrb	r1, [r2, #2]
 8012038:	78d2      	ldrb	r2, [r2, #3]
 801203a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 801203e:	2a0d      	cmp	r2, #13
 8012040:	d11f      	bne.n	8012082 <processEb.constprop.0+0x14e>
 8012042:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012046:	2201      	movs	r2, #1
 8012048:	f88d 201c 	strb.w	r2, [sp, #28]
 801204c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8012050:	f002 f86c 	bl	801412c <6759635076cb4c933592248ebd293b63832a7e9b>
 8012054:	686a      	ldr	r2, [r5, #4]
 8012056:	4422      	add	r2, r4
 8012058:	7912      	ldrb	r2, [r2, #4]
 801205a:	2a01      	cmp	r2, #1
 801205c:	4611      	mov	r1, r2
 801205e:	bf28      	it	cs
 8012060:	2101      	movcs	r1, #1
 8012062:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8012066:	b152      	cbz	r2, 801207e <processEb.constprop.0+0x14a>
 8012068:	686a      	ldr	r2, [r5, #4]
 801206a:	4422      	add	r2, r4
 801206c:	7951      	ldrb	r1, [r2, #5]
 801206e:	79d0      	ldrb	r0, [r2, #7]
 8012070:	7992      	ldrb	r2, [r2, #6]
 8012072:	f887 01dc 	strb.w	r0, [r7, #476]	; 0x1dc
 8012076:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 801207a:	f8a7 21da 	strh.w	r2, [r7, #474]	; 0x1da
 801207e:	f8cd 8004 	str.w	r8, [sp, #4]
 8012082:	46c3      	mov	fp, r8
 8012084:	e7b5      	b.n	8011ff2 <processEb.constprop.0+0xbe>
 8012086:	2937      	cmp	r1, #55	; 0x37
 8012088:	d1b3      	bne.n	8011ff2 <processEb.constprop.0+0xbe>
 801208a:	a906      	add	r1, sp, #24
 801208c:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8012090:	f7fb f8ee 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 8012094:	b178      	cbz	r0, 80120b6 <processEb.constprop.0+0x182>
 8012096:	686b      	ldr	r3, [r5, #4]
 8012098:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801209c:	5b19      	ldrh	r1, [r3, r4]
 801209e:	f7fa ff91 	bl	800cfc4 <NEIGHBORS_SetRxSlotCandidate>
 80120a2:	3402      	adds	r4, #2
 80120a4:	686b      	ldr	r3, [r5, #4]
 80120a6:	5d1b      	ldrb	r3, [r3, r4]
 80120a8:	b12b      	cbz	r3, 80120b6 <processEb.constprop.0+0x182>
 80120aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80120ae:	f107 0131 	add.w	r1, r7, #49	; 0x31
 80120b2:	f7fa fd19 	bl	800cae8 <027deecf67887395ef5db16208d3312ee727e45e>
 80120b6:	f04f 0901 	mov.w	r9, #1
 80120ba:	e79a      	b.n	8011ff2 <processEb.constprop.0+0xbe>
 80120bc:	1901      	adds	r1, r0, r4
 80120be:	5900      	ldr	r0, [r0, r4]
 80120c0:	f8c7 0031 	str.w	r0, [r7, #49]	; 0x31
 80120c4:	7909      	ldrb	r1, [r1, #4]
 80120c6:	f887 1035 	strb.w	r1, [r7, #53]	; 0x35
 80120ca:	6869      	ldr	r1, [r5, #4]
 80120cc:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 80120d0:	9b05      	ldr	r3, [sp, #20]
 80120d2:	4421      	add	r1, r4
 80120d4:	f04f 0a01 	mov.w	sl, #1
 80120d8:	7949      	ldrb	r1, [r1, #5]
 80120da:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
 80120de:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80120e2:	f881 309f 	strb.w	r3, [r1, #159]	; 0x9f
 80120e6:	e784      	b.n	8011ff2 <processEb.constprop.0+0xbe>
 80120e8:	5d01      	ldrb	r1, [r0, r4]
 80120ea:	2900      	cmp	r1, #0
 80120ec:	d181      	bne.n	8011ff2 <processEb.constprop.0+0xbe>
 80120ee:	4b0c      	ldr	r3, [pc, #48]	; (8012120 <processEb.constprop.0+0x1ec>)
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	f04f 0801 	mov.w	r8, #1
 80120f6:	f880 11e4 	strb.w	r1, [r0, #484]	; 0x1e4
 80120fa:	e77a      	b.n	8011ff2 <processEb.constprop.0+0xbe>
 80120fc:	f1bb 0f00 	cmp.w	fp, #0
 8012100:	f43f af23 	beq.w	8011f4a <processEb.constprop.0+0x16>
 8012104:	f1b8 0f00 	cmp.w	r8, #0
 8012108:	f43f af1f 	beq.w	8011f4a <processEb.constprop.0+0x16>
 801210c:	f1ba 0f00 	cmp.w	sl, #0
 8012110:	f43f af1b 	beq.w	8011f4a <processEb.constprop.0+0x16>
 8012114:	9b01      	ldr	r3, [sp, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	f43f af17 	beq.w	8011f4a <processEb.constprop.0+0x16>
 801211c:	e746      	b.n	8011fac <processEb.constprop.0+0x78>
 801211e:	bf00      	nop
 8012120:	20000040 	.word	0x20000040

08012124 <c6bd410106c16f549c325b1ca136c82e89930dcb>:
 8012124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012128:	4ec2      	ldr	r6, [pc, #776]	; (8012434 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x310>)
 801212a:	6833      	ldr	r3, [r6, #0]
 801212c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012130:	b0af      	sub	sp, #188	; 0xbc
 8012132:	f8d3 53fc 	ldr.w	r5, [r3, #1020]	; 0x3fc
 8012136:	4688      	mov	r8, r1
 8012138:	b10d      	cbz	r5, 801213e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x1a>
 801213a:	2001      	movs	r0, #1
 801213c:	47a8      	blx	r5
 801213e:	6834      	ldr	r4, [r6, #0]
 8012140:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8012144:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8012148:	b1a2      	cbz	r2, 8012174 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x50>
 801214a:	4abb      	ldr	r2, [pc, #748]	; (8012438 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x314>)
 801214c:	6912      	ldr	r2, [r2, #16]
 801214e:	eba8 0703 	sub.w	r7, r8, r3
 8012152:	42ba      	cmp	r2, r7
 8012154:	f080 817c 	bcs.w	8012450 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x32c>
 8012158:	2201      	movs	r2, #1
 801215a:	9219      	str	r2, [sp, #100]	; 0x64
 801215c:	4ab7      	ldr	r2, [pc, #732]	; (801243c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 801215e:	921a      	str	r2, [sp, #104]	; 0x68
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	4ab7      	ldr	r2, [pc, #732]	; (8012440 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x31c>)
 8012164:	49b5      	ldr	r1, [pc, #724]	; (801243c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 8012166:	4643      	mov	r3, r8
 8012168:	2001      	movs	r0, #1
 801216a:	f7fe fa63 	bl	8010634 <LOGGER_PrintLine>
 801216e:	f7ff faab 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8012172:	e072      	b.n	801225a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 8012174:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012178:	f7fc fce2 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801217c:	2001      	movs	r0, #1
 801217e:	f7ff fa09 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8012182:	6833      	ldr	r3, [r6, #0]
 8012184:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
 8012188:	2a02      	cmp	r2, #2
 801218a:	d143      	bne.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 801218c:	2203      	movs	r2, #3
 801218e:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8012192:	2031      	movs	r0, #49	; 0x31
 8012194:	f7fb fd70 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8012198:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 801219c:	2800      	cmp	r0, #0
 801219e:	d039      	beq.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80121a0:	2331      	movs	r3, #49	; 0x31
 80121a2:	7003      	strb	r3, [r0, #0]
 80121a4:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
 80121a8:	7053      	strb	r3, [r2, #1]
 80121aa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121ae:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 80121b2:	605a      	str	r2, [r3, #4]
 80121b4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121b8:	22c0      	movs	r2, #192	; 0xc0
 80121ba:	6859      	ldr	r1, [r3, #4]
 80121bc:	a812      	add	r0, sp, #72	; 0x48
 80121be:	f7f4 f8cd 	bl	800635c <EMBENET_RADIO_GetReceivedFrame>
 80121c2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121c8:	721a      	strb	r2, [r3, #8]
 80121ca:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121ce:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80121d2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 80121d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121da:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80121de:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 80121e2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80121e6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 80121ea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80121ee:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 80121f2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80121f6:	b16b      	cbz	r3, 8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80121f8:	7a03      	ldrb	r3, [r0, #8]
 80121fa:	1e5a      	subs	r2, r3, #1
 80121fc:	b2d2      	uxtb	r2, r2
 80121fe:	2abf      	cmp	r2, #191	; 0xbf
 8012200:	a919      	add	r1, sp, #100	; 0x64
 8012202:	d933      	bls.n	801226c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x148>
 8012204:	2201      	movs	r2, #1
 8012206:	9219      	str	r2, [sp, #100]	; 0x64
 8012208:	4a8c      	ldr	r2, [pc, #560]	; (801243c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 801220a:	921a      	str	r2, [sp, #104]	; 0x68
 801220c:	c903      	ldmia	r1, {r0, r1}
 801220e:	4a8d      	ldr	r2, [pc, #564]	; (8012444 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x320>)
 8012210:	f7fe fa10 	bl	8010634 <LOGGER_PrintLine>
 8012214:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 8012218:	f7fb fdec 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801221c:	6833      	ldr	r3, [r6, #0]
 801221e:	2700      	movs	r7, #0
 8012220:	2601      	movs	r6, #1
 8012222:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
 8012226:	f883 61bd 	strb.w	r6, [r3, #445]	; 0x1bd
 801222a:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
 801222e:	f7f4 f85d 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8012232:	f7f4 f883 	bl	800633c <EMBENET_RADIO_RxNow>
 8012236:	2003      	movs	r0, #3
 8012238:	f7ff f9ac 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 801223c:	f7fc fc98 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012240:	4a81      	ldr	r2, [pc, #516]	; (8012448 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x324>)
 8012242:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
 8012246:	4603      	mov	r3, r0
 8012248:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 801224c:	9200      	str	r2, [sp, #0]
 801224e:	4a7a      	ldr	r2, [pc, #488]	; (8012438 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x314>)
 8012250:	9701      	str	r7, [sp, #4]
 8012252:	6912      	ldr	r2, [r2, #16]
 8012254:	2101      	movs	r1, #1
 8012256:	f7fc fb7b 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 801225a:	2d00      	cmp	r5, #0
 801225c:	f000 84aa 	beq.w	8012bb4 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa90>
 8012260:	2000      	movs	r0, #0
 8012262:	462b      	mov	r3, r5
 8012264:	b02f      	add	sp, #188	; 0xbc
 8012266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226a:	4718      	bx	r3
 801226c:	f009 fa44 	bl	801b6f8 <93646682ea820ae310ba1b54d0fccca9d773749e>
 8012270:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012274:	2b00      	cmp	r3, #0
 8012276:	d0cd      	beq.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 8012278:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 801227c:	f89d 9066 	ldrb.w	r9, [sp, #102]	; 0x66
 8012280:	f883 9052 	strb.w	r9, [r3, #82]	; 0x52
 8012284:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8012288:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 801228c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012290:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8012294:	f10d 0291 	add.w	r2, sp, #145	; 0x91
 8012298:	3341      	adds	r3, #65	; 0x41
 801229a:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 801229e:	f852 0b04 	ldr.w	r0, [r2], #4
 80122a2:	f843 0b04 	str.w	r0, [r3], #4
 80122a6:	428a      	cmp	r2, r1
 80122a8:	d1f9      	bne.n	801229e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x17a>
 80122aa:	7812      	ldrb	r2, [r2, #0]
 80122ac:	701a      	strb	r2, [r3, #0]
 80122ae:	6837      	ldr	r7, [r6, #0]
 80122b0:	f8d4 a1c4 	ldr.w	sl, [r4, #452]	; 0x1c4
 80122b4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80122b8:	2301      	movs	r3, #1
 80122ba:	b142      	cbz	r2, 80122ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x1aa>
 80122bc:	9314      	str	r3, [sp, #80]	; 0x50
 80122be:	4b5f      	ldr	r3, [pc, #380]	; (801243c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x318>)
 80122c0:	4a62      	ldr	r2, [pc, #392]	; (801244c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x328>)
 80122c2:	9315      	str	r3, [sp, #84]	; 0x54
 80122c4:	4619      	mov	r1, r3
 80122c6:	2001      	movs	r0, #1
 80122c8:	f7fe f9b4 	bl	8010634 <LOGGER_PrintLine>
 80122cc:	e7a2      	b.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80122ce:	f1b9 0f00 	cmp.w	r9, #0
 80122d2:	d19f      	bne.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80122d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80122d6:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 80122da:	f7fa f9c7 	bl	800c66c <00481873317fdef387db1bb310377b408b8e47be>
 80122de:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 80122e2:	4650      	mov	r0, sl
 80122e4:	f008 fde6 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80122e8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80122ec:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d08f      	beq.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80122f4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d08b      	beq.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 80122fc:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012300:	2b00      	cmp	r3, #0
 8012302:	d187      	bne.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 8012304:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 8012308:	4650      	mov	r0, sl
 801230a:	f7ff fe13 	bl	8011f34 <processEb.constprop.0>
 801230e:	2800      	cmp	r0, #0
 8012310:	d080      	beq.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 8012312:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 8012316:	4650      	mov	r0, sl
 8012318:	f008 fd8c 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801231c:	2800      	cmp	r0, #0
 801231e:	f43f af79 	beq.w	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 8012322:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012326:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801232a:	4651      	mov	r1, sl
 801232c:	f8a8 9004 	strh.w	r9, [r8, #4]
 8012330:	f107 0031 	add.w	r0, r7, #49	; 0x31
 8012334:	f7ff f8ca 	bl	80114cc <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 8012338:	b920      	cbnz	r0, 8012344 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x220>
 801233a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801233e:	f001 fef5 	bl	801412c <6759635076cb4c933592248ebd293b63832a7e9b>
 8012342:	e767      	b.n	8012214 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xf0>
 8012344:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8012348:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 801234c:	f008 fdb2 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8012350:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 8012354:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8012358:	f008 fdac 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801235c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8012360:	f7fc fc06 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012364:	ba7f      	rev16	r7, r7
 8012366:	b2bf      	uxth	r7, r7
 8012368:	4601      	mov	r1, r0
 801236a:	4638      	mov	r0, r7
 801236c:	f7fc fdd4 	bl	800ef18 <d492673eb40b0122449614ddec3203e781e2c714>
 8012370:	2800      	cmp	r0, #0
 8012372:	d0e2      	beq.n	801233a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x216>
 8012374:	2210      	movs	r2, #16
 8012376:	2100      	movs	r1, #0
 8012378:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 801237c:	f009 fe14 	bl	801bfa8 <memset>
 8012380:	2306      	movs	r3, #6
 8012382:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8012386:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
 801238a:	4627      	mov	r7, r4
 801238c:	f104 0a31 	add.w	sl, r4, #49	; 0x31
 8012390:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
 8012394:	1b3b      	subs	r3, r7, r4
 8012396:	429a      	cmp	r2, r3
 8012398:	d835      	bhi.n	8012406 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x2e2>
 801239a:	f8d4 9031 	ldr.w	r9, [r4, #49]	; 0x31
 801239e:	f894 8035 	ldrb.w	r8, [r4, #53]	; 0x35
 80123a2:	f001 ff05 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80123a6:	2700      	movs	r7, #0
 80123a8:	4602      	mov	r2, r0
 80123aa:	463b      	mov	r3, r7
 80123ac:	4648      	mov	r0, r9
 80123ae:	4641      	mov	r1, r8
 80123b0:	f7ee fc2c 	bl	8000c0c <__aeabi_uldivmod>
 80123b4:	b290      	uxth	r0, r2
 80123b6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80123b8:	f002 fab2 	bl	8014920 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>
 80123bc:	f002 fb30 	bl	8014a20 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 80123c0:	8720      	strh	r0, [r4, #56]	; 0x38
 80123c2:	4638      	mov	r0, r7
 80123c4:	f7ff f8e6 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 80123c8:	f7f3 ff32 	bl	8006230 <EMBENET_RADIO_Idle>
 80123cc:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 80123d0:	f7ff f916 	bl	8011600 <66ac93647e4c684dee2227e883242cdee4e3524a>
 80123d4:	6836      	ldr	r6, [r6, #0]
 80123d6:	2001      	movs	r0, #1
 80123d8:	f001 fd6e 	bl	8013eb8 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 80123dc:	2301      	movs	r3, #1
 80123de:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 80123e2:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 80123e6:	ba76      	rev16	r6, r6
 80123e8:	b2b6      	uxth	r6, r6
 80123ea:	a929      	add	r1, sp, #164	; 0xa4
 80123ec:	4630      	mov	r0, r6
 80123ee:	f008 fa0f 	bl	801a810 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4>
 80123f2:	4630      	mov	r0, r6
 80123f4:	f008 fa9c 	bl	801a930 <658f5a28751601d813ae36c10ddb69a9ae00a793>
 80123f8:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 80123fc:	f7ff f930 	bl	8011660 <0d988943f13c94ad3b7af08357d5d17f9043f067>
 8012400:	f8c4 71c4 	str.w	r7, [r4, #452]	; 0x1c4
 8012404:	e6b3      	b.n	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012406:	f8da 0000 	ldr.w	r0, [sl]
 801240a:	f839 cf02 	ldrh.w	ip, [r9, #2]!
 801240e:	9002      	str	r0, [sp, #8]
 8012410:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8012414:	f88d 300c 	strb.w	r3, [sp, #12]
 8012418:	f8cd 8004 	str.w	r8, [sp, #4]
 801241c:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 8012420:	9300      	str	r3, [sp, #0]
 8012422:	2301      	movs	r3, #1
 8012424:	461a      	mov	r2, r3
 8012426:	2103      	movs	r1, #3
 8012428:	4660      	mov	r0, ip
 801242a:	f001 fed1 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 801242e:	3701      	adds	r7, #1
 8012430:	e7ae      	b.n	8012390 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x26c>
 8012432:	bf00      	nop
 8012434:	20000040 	.word	0x20000040
 8012438:	0801f014 	.word	0x0801f014
 801243c:	08020778 	.word	0x08020778
 8012440:	08020807 	.word	0x08020807
 8012444:	08020833 	.word	0x08020833
 8012448:	08012bc5 	.word	0x08012bc5
 801244c:	0802085b 	.word	0x0802085b
 8012450:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
 8012454:	2b13      	cmp	r3, #19
 8012456:	f000 8191 	beq.w	801277c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x658>
 801245a:	d811      	bhi.n	8012480 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x35c>
 801245c:	2b08      	cmp	r3, #8
 801245e:	d02c      	beq.n	80124ba <c6bd410106c16f549c325b1ca136c82e89930dcb+0x396>
 8012460:	2b0d      	cmp	r3, #13
 8012462:	f47f ae84 	bne.w	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012466:	2001      	movs	r0, #1
 8012468:	f7ff f894 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 801246c:	f7f3 fd0a 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8012470:	6833      	ldr	r3, [r6, #0]
 8012472:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8012476:	2b0d      	cmp	r3, #13
 8012478:	d05a      	beq.n	8012530 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x40c>
 801247a:	f7f3 fd23 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801247e:	e6ec      	b.n	801225a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 8012480:	2b18      	cmp	r3, #24
 8012482:	f47f ae74 	bne.w	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012486:	2319      	movs	r3, #25
 8012488:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
 801248c:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8012490:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 8012494:	f7fb fcae 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012498:	2300      	movs	r3, #0
 801249a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 801249e:	f7fa f8b5 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	f040 8381 	bne.w	8012baa <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 80124a8:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 80124ac:	3042      	adds	r0, #66	; 0x42
 80124ae:	f7fa fd1d 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	f000 8379 	beq.w	8012baa <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 80124b8:	e2c7      	b.n	8012a4a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 80124ba:	2309      	movs	r3, #9
 80124bc:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
 80124c0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 80124c4:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 80124c8:	b90b      	cbnz	r3, 80124ce <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3aa>
 80124ca:	f7ff f8fd 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 80124ce:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 80124d2:	3041      	adds	r0, #65	; 0x41
 80124d4:	f7fa ff7e 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 80124d8:	4603      	mov	r3, r0
 80124da:	b960      	cbnz	r0, 80124f6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3d2>
 80124dc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 80124e0:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80124e4:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 80124e8:	9301      	str	r3, [sp, #4]
 80124ea:	4b9e      	ldr	r3, [pc, #632]	; (8012764 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x640>)
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 80124f2:	440a      	add	r2, r1
 80124f4:	e6ae      	b.n	8012254 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x130>
 80124f6:	2201      	movs	r2, #1
 80124f8:	4611      	mov	r1, r2
 80124fa:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80124fe:	f002 fc93 	bl	8014e28 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 8012502:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 8012506:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 801250a:	b113      	cbz	r3, 8012512 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3ee>
 801250c:	3b01      	subs	r3, #1
 801250e:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 8012512:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 8012516:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 801251a:	b933      	cbnz	r3, 801252a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x406>
 801251c:	2101      	movs	r1, #1
 801251e:	f7ff f8bb 	bl	8011698 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 8012522:	2300      	movs	r3, #0
 8012524:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 8012528:	e621      	b.n	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 801252a:	2340      	movs	r3, #64	; 0x40
 801252c:	7043      	strb	r3, [r0, #1]
 801252e:	e7f8      	b.n	8012522 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x3fe>
 8012530:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012534:	f7fc fb04 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8012538:	f7f3 fcc4 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801253c:	6833      	ldr	r3, [r6, #0]
 801253e:	220e      	movs	r2, #14
 8012540:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8012544:	2031      	movs	r0, #49	; 0x31
 8012546:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 801254a:	f7fb fb95 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801254e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
 8012552:	2800      	cmp	r0, #0
 8012554:	f43f ae0b 	beq.w	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012558:	2331      	movs	r3, #49	; 0x31
 801255a:	7003      	strb	r3, [r0, #0]
 801255c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8012560:	7053      	strb	r3, [r2, #1]
 8012562:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8012566:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 801256a:	605a      	str	r2, [r3, #4]
 801256c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8012570:	22c0      	movs	r2, #192	; 0xc0
 8012572:	6859      	ldr	r1, [r3, #4]
 8012574:	a814      	add	r0, sp, #80	; 0x50
 8012576:	f7f3 fef1 	bl	800635c <EMBENET_RADIO_GetReceivedFrame>
 801257a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 801257e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8012582:	f99d 8050 	ldrsb.w	r8, [sp, #80]	; 0x50
 8012586:	f883 9008 	strb.w	r9, [r3, #8]
 801258a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 801258e:	f883 80b6 	strb.w	r8, [r3, #182]	; 0xb6
 8012592:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8012596:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 801259a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 801259e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 80125a2:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
 80125a6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80125aa:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 80125ae:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80125b2:	b183      	cbz	r3, 80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 80125b4:	7a03      	ldrb	r3, [r0, #8]
 80125b6:	3b01      	subs	r3, #1
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2bbf      	cmp	r3, #191	; 0xbf
 80125bc:	a919      	add	r1, sp, #100	; 0x64
 80125be:	d912      	bls.n	80125e6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4c2>
 80125c0:	2301      	movs	r3, #1
 80125c2:	9319      	str	r3, [sp, #100]	; 0x64
 80125c4:	4b68      	ldr	r3, [pc, #416]	; (8012768 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x644>)
 80125c6:	931a      	str	r3, [sp, #104]	; 0x68
 80125c8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80125cc:	4a67      	ldr	r2, [pc, #412]	; (801276c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x648>)
 80125ce:	7a1b      	ldrb	r3, [r3, #8]
 80125d0:	c903      	ldmia	r1, {r0, r1}
 80125d2:	f7fe f82f 	bl	8010634 <LOGGER_PrintLine>
 80125d6:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 80125da:	f7fb fc0b 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80125de:	2300      	movs	r3, #0
 80125e0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
 80125e4:	e5c3      	b.n	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 80125e6:	f009 f887 	bl	801b6f8 <93646682ea820ae310ba1b54d0fccca9d773749e>
 80125ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125ec:	4a60      	ldr	r2, [pc, #384]	; (8012770 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x64c>)
 80125ee:	f8d4 61c0 	ldr.w	r6, [r4, #448]	; 0x1c0
 80125f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80125f6:	4293      	cmp	r3, r2
 80125f8:	d1ed      	bne.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 80125fa:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80125fe:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
 8012602:	429a      	cmp	r2, r3
 8012604:	d1e7      	bne.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 8012606:	2004      	movs	r0, #4
 8012608:	f7fa f80e 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801260c:	4601      	mov	r1, r0
 801260e:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 8012612:	f7fa ffb5 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012616:	2800      	cmp	r0, #0
 8012618:	d0dd      	beq.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 801261a:	a820      	add	r0, sp, #128	; 0x80
 801261c:	f7fa f86c 	bl	800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8012620:	2800      	cmp	r0, #0
 8012622:	d0d8      	beq.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 8012624:	f106 0141 	add.w	r1, r6, #65	; 0x41
 8012628:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 801262c:	f7fa ffa8 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012630:	2800      	cmp	r0, #0
 8012632:	d0d0      	beq.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 8012634:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8012638:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 801263c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012640:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8012644:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8012648:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801264c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8012650:	f10d 0391 	add.w	r3, sp, #145	; 0x91
 8012654:	3241      	adds	r2, #65	; 0x41
 8012656:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 801265a:	f853 0b04 	ldr.w	r0, [r3], #4
 801265e:	f842 0b04 	str.w	r0, [r2], #4
 8012662:	428b      	cmp	r3, r1
 8012664:	d1f9      	bne.n	801265a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x536>
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	7013      	strb	r3, [r2, #0]
 801266a:	f104 0731 	add.w	r7, r4, #49	; 0x31
 801266e:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
 8012672:	4638      	mov	r0, r7
 8012674:	f7fe ff2a 	bl	80114cc <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 8012678:	2800      	cmp	r0, #0
 801267a:	d0ac      	beq.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 801267c:	f8d4 b031 	ldr.w	fp, [r4, #49]	; 0x31
 8012680:	f894 a035 	ldrb.w	sl, [r4, #53]	; 0x35
 8012684:	f002 fae4 	bl	8014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 8012688:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801268a:	930d      	str	r3, [sp, #52]	; 0x34
 801268c:	900e      	str	r0, [sp, #56]	; 0x38
 801268e:	f002 fa09 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 8012692:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012696:	900b      	str	r0, [sp, #44]	; 0x2c
 8012698:	a820      	add	r0, sp, #128	; 0x80
 801269a:	930a      	str	r3, [sp, #40]	; 0x28
 801269c:	f7fa fec8 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80126a0:	900c      	str	r0, [sp, #48]	; 0x30
 80126a2:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 80126a6:	460e      	mov	r6, r1
 80126a8:	f7fa fec2 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80126ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126ae:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80126b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126b4:	9301      	str	r3, [sp, #4]
 80126b6:	f04f 0c00 	mov.w	ip, #0
 80126ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126bc:	f8cd c020 	str.w	ip, [sp, #32]
 80126c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80126c4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	4658      	mov	r0, fp
 80126cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80126d0:	4651      	mov	r1, sl
 80126d2:	f008 f9ef 	bl	801aab4 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 80126d6:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 80126da:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 80126de:	f008 fbe9 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80126e2:	f7f9 ff93 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80126e6:	4680      	mov	r8, r0
 80126e8:	bb50      	cbnz	r0, 8012740 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 80126ea:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
 80126ee:	3042      	adds	r0, #66	; 0x42
 80126f0:	f7fa fbfc 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 80126f4:	b320      	cbz	r0, 8012740 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 80126f6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8012774 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x650>
 80126fa:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
 80126fe:	f8d9 6000 	ldr.w	r6, [r9]
 8012702:	17c3      	asrs	r3, r0, #31
 8012704:	e9c6 037a 	strd	r0, r3, [r6, #488]	; 0x1e8
 8012708:	4b1b      	ldr	r3, [pc, #108]	; (8012778 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x654>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	8773      	strh	r3, [r6, #58]	; 0x3a
 801270e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8012712:	b1ab      	cbz	r3, 8012740 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 8012714:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8012718:	bb03      	cbnz	r3, 801275c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x638>
 801271a:	f008 f9bf 	bl	801aa9c <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>
 801271e:	f8d9 3000 	ldr.w	r3, [r9]
 8012722:	e9d6 217a 	ldrd	r2, r1, [r6, #488]	; 0x1e8
 8012726:	681e      	ldr	r6, [r3, #0]
 8012728:	17f0      	asrs	r0, r6, #31
 801272a:	42b2      	cmp	r2, r6
 801272c:	685e      	ldr	r6, [r3, #4]
 801272e:	eb71 0000 	sbcs.w	r0, r1, r0
 8012732:	bfb8      	it	lt
 8012734:	601a      	strlt	r2, [r3, #0]
 8012736:	17f0      	asrs	r0, r6, #31
 8012738:	4296      	cmp	r6, r2
 801273a:	4188      	sbcs	r0, r1
 801273c:	da00      	bge.n	8012740 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 801273e:	605a      	str	r2, [r3, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	4611      	mov	r1, r2
 8012744:	4638      	mov	r0, r7
 8012746:	f002 fb6f 	bl	8014e28 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>
 801274a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
 801274e:	2101      	movs	r1, #1
 8012750:	f7fe ffa2 	bl	8011698 <fdc48e947b5f2f5ed5f47de398f99296ca12bee8>
 8012754:	2300      	movs	r3, #0
 8012756:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 801275a:	e73c      	b.n	80125d6 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4b2>
 801275c:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
 8012760:	e7ee      	b.n	8012740 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x61c>
 8012762:	bf00      	nop
 8012764:	08011859 	.word	0x08011859
 8012768:	08020778 	.word	0x08020778
 801276c:	08020833 	.word	0x08020833
 8012770:	00020001 	.word	0x00020001
 8012774:	20000040 	.word	0x20000040
 8012778:	0801f08c 	.word	0x0801f08c
 801277c:	2001      	movs	r0, #1
 801277e:	f7fe ff09 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8012782:	f7f3 fb7f 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8012786:	6833      	ldr	r3, [r6, #0]
 8012788:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 801278c:	2b13      	cmp	r3, #19
 801278e:	f47f ae74 	bne.w	801247a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x356>
 8012792:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012796:	f7fc f9d3 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801279a:	f7f3 fb93 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801279e:	6833      	ldr	r3, [r6, #0]
 80127a0:	2214      	movs	r2, #20
 80127a2:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 80127a6:	2031      	movs	r0, #49	; 0x31
 80127a8:	f7fb fa66 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 80127ac:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 80127b0:	2800      	cmp	r0, #0
 80127b2:	f43f acdc 	beq.w	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 80127b6:	2331      	movs	r3, #49	; 0x31
 80127b8:	7003      	strb	r3, [r0, #0]
 80127ba:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
 80127be:	7053      	strb	r3, [r2, #1]
 80127c0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80127c4:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 80127c8:	605a      	str	r2, [r3, #4]
 80127ca:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80127ce:	22c0      	movs	r2, #192	; 0xc0
 80127d0:	6859      	ldr	r1, [r3, #4]
 80127d2:	a812      	add	r0, sp, #72	; 0x48
 80127d4:	f7f3 fdc2 	bl	800635c <EMBENET_RADIO_GetReceivedFrame>
 80127d8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80127dc:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80127e0:	f883 9008 	strb.w	r9, [r3, #8]
 80127e4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80127e8:	f99d 8048 	ldrsb.w	r8, [sp, #72]	; 0x48
 80127ec:	f883 80b6 	strb.w	r8, [r3, #182]	; 0xb6
 80127f0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80127f4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80127f8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 80127fc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8012800:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
 8012804:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8012808:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 801280c:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 8012810:	b16b      	cbz	r3, 801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012812:	7a03      	ldrb	r3, [r0, #8]
 8012814:	1e5a      	subs	r2, r3, #1
 8012816:	b2d2      	uxtb	r2, r2
 8012818:	2abf      	cmp	r2, #191	; 0xbf
 801281a:	a919      	add	r1, sp, #100	; 0x64
 801281c:	d912      	bls.n	8012844 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x720>
 801281e:	2201      	movs	r2, #1
 8012820:	9219      	str	r2, [sp, #100]	; 0x64
 8012822:	4aa0      	ldr	r2, [pc, #640]	; (8012aa4 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x980>)
 8012824:	921a      	str	r2, [sp, #104]	; 0x68
 8012826:	c903      	ldmia	r1, {r0, r1}
 8012828:	4a9f      	ldr	r2, [pc, #636]	; (8012aa8 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x984>)
 801282a:	f7fd ff03 	bl	8010634 <LOGGER_PrintLine>
 801282e:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 8012832:	2800      	cmp	r0, #0
 8012834:	f43f ac9b 	beq.w	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012838:	f7fb fadc 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801283c:	2300      	movs	r3, #0
 801283e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 8012842:	e494      	b.n	801216e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x4a>
 8012844:	f008 ff58 	bl	801b6f8 <93646682ea820ae310ba1b54d0fccca9d773749e>
 8012848:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801284c:	2b00      	cmp	r3, #0
 801284e:	d0ee      	beq.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012850:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012854:	2b01      	cmp	r3, #1
 8012856:	d8ea      	bhi.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012858:	2004      	movs	r0, #4
 801285a:	f7f9 fee5 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801285e:	4601      	mov	r1, r0
 8012860:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 8012864:	f7fa fe8c 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012868:	b980      	cbnz	r0, 801288c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x768>
 801286a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801286e:	2b00      	cmp	r3, #0
 8012870:	d0dd      	beq.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012872:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012876:	2b01      	cmp	r3, #1
 8012878:	d8d9      	bhi.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 801287a:	2004      	movs	r0, #4
 801287c:	f7f9 fed4 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012880:	4601      	mov	r1, r0
 8012882:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 8012886:	f7fa fe7b 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801288a:	e7d0      	b.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 801288c:	a820      	add	r0, sp, #128	; 0x80
 801288e:	f7fa fda1 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8012892:	b920      	cbnz	r0, 801289e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x77a>
 8012894:	a820      	add	r0, sp, #128	; 0x80
 8012896:	f7f9 ff2f 	bl	800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 801289a:	2800      	cmp	r0, #0
 801289c:	d0e5      	beq.n	801286a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x746>
 801289e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80128a2:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
 80128a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80128aa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80128ae:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 80128b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80128b6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80128ba:	f10d 0291 	add.w	r2, sp, #145	; 0x91
 80128be:	3341      	adds	r3, #65	; 0x41
 80128c0:	f10d 01a1 	add.w	r1, sp, #161	; 0xa1
 80128c4:	f852 0b04 	ldr.w	r0, [r2], #4
 80128c8:	f843 0b04 	str.w	r0, [r3], #4
 80128cc:	428a      	cmp	r2, r1
 80128ce:	d1f9      	bne.n	80128c4 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x7a0>
 80128d0:	7812      	ldrb	r2, [r2, #0]
 80128d2:	701a      	strb	r2, [r3, #0]
 80128d4:	f8d4 61c4 	ldr.w	r6, [r4, #452]	; 0x1c4
 80128d8:	f002 f8e4 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 80128dc:	f886 009e 	strb.w	r0, [r6, #158]	; 0x9e
 80128e0:	a820      	add	r0, sp, #128	; 0x80
 80128e2:	f7fa fd77 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 80128e6:	b1f8      	cbz	r0, 8012928 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x804>
 80128e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 80128ec:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d019      	beq.n	8012928 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x804>
 80128f4:	2b03      	cmp	r3, #3
 80128f6:	d19a      	bne.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 80128f8:	2100      	movs	r1, #0
 80128fa:	2210      	movs	r2, #16
 80128fc:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 8012900:	f009 fb52 	bl	801bfa8 <memset>
 8012904:	2302      	movs	r3, #2
 8012906:	f10d 0151 	add.w	r1, sp, #81	; 0x51
 801290a:	2000      	movs	r0, #0
 801290c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8012910:	f7fa faa4 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8012914:	2800      	cmp	r0, #0
 8012916:	d08a      	beq.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012918:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 801291c:	a914      	add	r1, sp, #80	; 0x50
 801291e:	3041      	adds	r0, #65	; 0x41
 8012920:	f7fa fe2e 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012924:	2800      	cmp	r0, #0
 8012926:	d082      	beq.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012928:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801292c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
 8012930:	b13b      	cbz	r3, 8012942 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x81e>
 8012932:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
 8012936:	b123      	cbz	r3, 8012942 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x81e>
 8012938:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
 801293c:	2b05      	cmp	r3, #5
 801293e:	f43f af76 	beq.w	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012942:	f104 0631 	add.w	r6, r4, #49	; 0x31
 8012946:	4630      	mov	r0, r6
 8012948:	f7fe fdc0 	bl	80114cc <ccaf3079fe06f6d98cd1712d3ed21403c04581f9>
 801294c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012950:	4682      	mov	sl, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	f040 8089 	bne.w	8012a6a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 8012958:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801295c:	2b00      	cmp	r3, #0
 801295e:	f040 8084 	bne.w	8012a6a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 8012962:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8012966:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801296a:	2b05      	cmp	r3, #5
 801296c:	d17d      	bne.n	8012a6a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x946>
 801296e:	2800      	cmp	r0, #0
 8012970:	d070      	beq.n	8012a54 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x930>
 8012972:	2301      	movs	r3, #1
 8012974:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8012978:	a814      	add	r0, sp, #80	; 0x50
 801297a:	f7fc f9cd 	bl	800ed18 <7d0846c279c7703537dc22d139b898222dc42c28>
 801297e:	a814      	add	r0, sp, #80	; 0x50
 8012980:	f007 ff98 	bl	801a8b4 <6a7c8072467648b34afad307e6f084585ae97774>
 8012984:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
 8012988:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 801298c:	f008 fa92 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8012990:	2300      	movs	r3, #0
 8012992:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8012996:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801299a:	2b00      	cmp	r3, #0
 801299c:	d16a      	bne.n	8012a74 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x950>
 801299e:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
 80129a2:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 80129a6:	f008 fa85 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80129aa:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
 80129ae:	f8d4 b031 	ldr.w	fp, [r4, #49]	; 0x31
 80129b2:	f894 a035 	ldrb.w	sl, [r4, #53]	; 0x35
 80129b6:	f002 f94b 	bl	8014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 80129ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80129bc:	930e      	str	r3, [sp, #56]	; 0x38
 80129be:	900f      	str	r0, [sp, #60]	; 0x3c
 80129c0:	f002 f870 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 80129c4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80129c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80129ca:	a820      	add	r0, sp, #128	; 0x80
 80129cc:	930a      	str	r3, [sp, #40]	; 0x28
 80129ce:	f7fa fd2f 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80129d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80129d6:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 80129da:	f7fa fd29 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 80129de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129e0:	9304      	str	r3, [sp, #16]
 80129e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129e4:	9305      	str	r3, [sp, #20]
 80129e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129e8:	9301      	str	r3, [sp, #4]
 80129ea:	2700      	movs	r7, #0
 80129ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80129f4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80129f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80129fc:	9708      	str	r7, [sp, #32]
 80129fe:	4658      	mov	r0, fp
 8012a00:	4651      	mov	r1, sl
 8012a02:	f008 f857 	bl	801aab4 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>
 8012a06:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d14e      	bne.n	8012aac <c6bd410106c16f549c325b1ca136c82e89930dcb+0x988>
 8012a0e:	f7f9 fdfd 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8012a12:	4601      	mov	r1, r0
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f040 80c8 	bne.w	8012baa <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 8012a1a:	2210      	movs	r2, #16
 8012a1c:	f10d 0051 	add.w	r0, sp, #81	; 0x51
 8012a20:	f009 fac2 	bl	801bfa8 <memset>
 8012a24:	2302      	movs	r3, #2
 8012a26:	f10d 0151 	add.w	r1, sp, #81	; 0x51
 8012a2a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
 8012a2e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8012a32:	f7fa fa13 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8012a36:	b140      	cbz	r0, 8012a4a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 8012a38:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
 8012a3c:	a814      	add	r0, sp, #80	; 0x50
 8012a3e:	3141      	adds	r1, #65	; 0x41
 8012a40:	f7fa fd9e 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	f000 80aa 	beq.w	8012b9e <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa7a>
 8012a4a:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
 8012a4e:	f7fe fdd7 	bl	8011600 <66ac93647e4c684dee2227e883242cdee4e3524a>
 8012a52:	e0aa      	b.n	8012baa <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa86>
 8012a54:	f7fc f88c 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012a58:	4651      	mov	r1, sl
 8012a5a:	f7fc fa17 	bl	800ee8c <9506f9c37a945216115ab5227293f46163fc6230>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	f43f aee5 	beq.w	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012a64:	f007 ff3e 	bl	801a8e4 <d6f04be9d8ad12cb38262f1bba36a144854d1588>
 8012a68:	e6e1      	b.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012a6a:	f1ba 0f00 	cmp.w	sl, #0
 8012a6e:	f43f aede 	beq.w	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012a72:	e787      	b.n	8012984 <c6bd410106c16f549c325b1ca136c82e89930dcb+0x860>
 8012a74:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d190      	bne.n	801299e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 8012a7c:	2004      	movs	r0, #4
 8012a7e:	f7f9 fdd3 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012a82:	4601      	mov	r1, r0
 8012a84:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 8012a88:	f7fa fd7a 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d086      	beq.n	801299e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 8012a90:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 8012a94:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 8012a98:	f7ff fa4c 	bl	8011f34 <processEb.constprop.0>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	f47f af7e 	bne.w	801299e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x87a>
 8012aa2:	e6c4      	b.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012aa4:	08020778 	.word	0x08020778
 8012aa8:	08020833 	.word	0x08020833
 8012aac:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 8012ab0:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 8012ab4:	4b41      	ldr	r3, [pc, #260]	; (8012bbc <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa98>)
 8012ab6:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012aba:	9701      	str	r7, [sp, #4]
 8012abc:	9300      	str	r3, [sp, #0]
 8012abe:	440a      	add	r2, r1
 8012ac0:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	f7fb ff43 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8012aca:	2031      	movs	r0, #49	; 0x31
 8012acc:	f7fb f8d4 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8012ad0:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f43f aeaa 	beq.w	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012ada:	2331      	movs	r3, #49	; 0x31
 8012adc:	7003      	strb	r3, [r0, #0]
 8012ade:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
 8012ae2:	7053      	strb	r3, [r2, #1]
 8012ae4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8012ae8:	2202      	movs	r2, #2
 8012aea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8012aee:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 8012af2:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8012af6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8012afa:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 8012afe:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 8012b02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8012b06:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 8012b0a:	f892 20a2 	ldrb.w	r2, [r2, #162]	; 0xa2
 8012b0e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8012b12:	e9d4 2371 	ldrd	r2, r3, [r4, #452]	; 0x1c4
 8012b16:	f892 20a3 	ldrb.w	r2, [r2, #163]	; 0xa3
 8012b1a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8012b1e:	e9d4 1371 	ldrd	r1, r3, [r4, #452]	; 0x1c4
 8012b22:	f101 0241 	add.w	r2, r1, #65	; 0x41
 8012b26:	3341      	adds	r3, #65	; 0x41
 8012b28:	3151      	adds	r1, #81	; 0x51
 8012b2a:	f852 0b04 	ldr.w	r0, [r2], #4
 8012b2e:	f843 0b04 	str.w	r0, [r3], #4
 8012b32:	428a      	cmp	r2, r1
 8012b34:	d1f9      	bne.n	8012b2a <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa06>
 8012b36:	7812      	ldrb	r2, [r2, #0]
 8012b38:	701a      	strb	r2, [r3, #0]
 8012b3a:	e9d4 c071 	ldrd	ip, r0, [r4, #452]	; 0x1c4
 8012b3e:	2200      	movs	r2, #0
 8012b40:	4f1f      	ldr	r7, [pc, #124]	; (8012bc0 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa9c>)
 8012b42:	f89c e053 	ldrb.w	lr, [ip, #83]	; 0x53
 8012b46:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 8012b4a:	9202      	str	r2, [sp, #8]
 8012b4c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 8012b50:	683f      	ldr	r7, [r7, #0]
 8012b52:	1aff      	subs	r7, r7, r3
 8012b54:	b23f      	sxth	r7, r7
 8012b56:	9701      	str	r7, [sp, #4]
 8012b58:	f10c 0741 	add.w	r7, ip, #65	; 0x41
 8012b5c:	9700      	str	r7, [sp, #0]
 8012b5e:	4673      	mov	r3, lr
 8012b60:	f008 fcb8 	bl	801b4d4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4>
 8012b64:	4607      	mov	r7, r0
 8012b66:	b930      	cbnz	r0, 8012b76 <c6bd410106c16f549c325b1ca136c82e89930dcb+0xa52>
 8012b68:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8012b6c:	f7fb f942 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012b70:	f8c4 71c8 	str.w	r7, [r4, #456]	; 0x1c8
 8012b74:	e65b      	b.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012b76:	2002      	movs	r0, #2
 8012b78:	f7f9 fd56 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012b7c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
 8012b80:	1c41      	adds	r1, r0, #1
 8012b82:	4630      	mov	r0, r6
 8012b84:	f7fe fbb4 	bl	80112f0 <628044ebadd5376fad8b3928b1093d9e8f1976ae>
 8012b88:	4606      	mov	r6, r0
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	f47f ab65 	bne.w	801225a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x136>
 8012b90:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8012b94:	f7fb f92e 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012b98:	f8c4 61c8 	str.w	r6, [r4, #456]	; 0x1c8
 8012b9c:	e647      	b.n	801282e <c6bd410106c16f549c325b1ca136c82e89930dcb+0x70a>
 8012b9e:	a814      	add	r0, sp, #80	; 0x50
 8012ba0:	f001 fdcc 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	f43f af50 	beq.w	8012a4a <c6bd410106c16f549c325b1ca136c82e89930dcb+0x926>
 8012baa:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 8012bae:	f7fe fd57 	bl	8011660 <0d988943f13c94ad3b7af08357d5d17f9043f067>
 8012bb2:	e643      	b.n	801283c <c6bd410106c16f549c325b1ca136c82e89930dcb+0x718>
 8012bb4:	b02f      	add	sp, #188	; 0xbc
 8012bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bba:	bf00      	nop
 8012bbc:	08011859 	.word	0x08011859
 8012bc0:	0801f014 	.word	0x0801f014

08012bc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2>:
 8012bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bc8:	4dab      	ldr	r5, [pc, #684]	; (8012e78 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2b4>)
 8012bca:	682c      	ldr	r4, [r5, #0]
 8012bcc:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
 8012bd0:	3b02      	subs	r3, #2
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	b095      	sub	sp, #84	; 0x54
 8012bd6:	f240 826d 	bls.w	80130b4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f0>
 8012bda:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8012bde:	f8d3 63f4 	ldr.w	r6, [r3, #1012]	; 0x3f4
 8012be2:	b10e      	cbz	r6, 8012be8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x24>
 8012be4:	2001      	movs	r0, #1
 8012be6:	47b0      	blx	r6
 8012be8:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012bec:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8012e7c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2b8>
 8012bf0:	f7fb ffc0 	bl	800eb74 <19ac46e5c06ffb6c1640c5d4070de271a544b182>
 8012bf4:	4aa2      	ldr	r2, [pc, #648]	; (8012e80 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2bc>)
 8012bf6:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
 8012bfa:	6917      	ldr	r7, [r2, #16]
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	463a      	mov	r2, r7
 8012c00:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012c04:	9401      	str	r4, [sp, #4]
 8012c06:	2101      	movs	r1, #1
 8012c08:	f8cd 8000 	str.w	r8, [sp]
 8012c0c:	f7fb fea0 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8012c10:	499c      	ldr	r1, [pc, #624]	; (8012e84 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c0>)
 8012c12:	489d      	ldr	r0, [pc, #628]	; (8012e88 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c4>)
 8012c14:	2200      	movs	r2, #0
 8012c16:	f7f3 faf5 	bl	8006204 <EMBENET_RADIO_SetCallbacks>
 8012c1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	f040 8142 	bne.w	8012ea8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2e4>
 8012c24:	f7f9 fcf2 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	f000 80f5 	beq.w	8012e18 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x254>
 8012c2e:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
 8012c32:	f1b8 0f00 	cmp.w	r8, #0
 8012c36:	d13d      	bne.n	8012cb4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0xf0>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8012c3e:	f7fb ff97 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012c42:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
 8012c46:	2005      	movs	r0, #5
 8012c48:	f7f9 fcee 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	f8d0 0001 	ldr.w	r0, [r0, #1]
 8012c52:	f8d2 1005 	ldr.w	r1, [r2, #5]
 8012c56:	ab07      	add	r3, sp, #28
 8012c58:	c303      	stmia	r3!, {r0, r1}
 8012c5a:	2002      	movs	r0, #2
 8012c5c:	f7f9 fce4 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012c60:	4602      	mov	r2, r0
 8012c62:	f8d0 0001 	ldr.w	r0, [r0, #1]
 8012c66:	f8d2 1005 	ldr.w	r1, [r2, #5]
 8012c6a:	ab09      	add	r3, sp, #36	; 0x24
 8012c6c:	c303      	stmia	r3!, {r0, r1}
 8012c6e:	a807      	add	r0, sp, #28
 8012c70:	f006 ff4c 	bl	8019b0c <f5d01873bc96944b472aa031c0b65a87221c5869>
 8012c74:	f04f 31ff 	mov.w	r1, #4294967295
 8012c78:	4640      	mov	r0, r8
 8012c7a:	f7fb ffe5 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 8012c7e:	21ff      	movs	r1, #255	; 0xff
 8012c80:	4607      	mov	r7, r0
 8012c82:	4640      	mov	r0, r8
 8012c84:	f7fb ffe0 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 8012c88:	4407      	add	r7, r0
 8012c8a:	2002      	movs	r0, #2
 8012c8c:	9705      	str	r7, [sp, #20]
 8012c8e:	f88d 8018 	strb.w	r8, [sp, #24]
 8012c92:	f7f9 fcc9 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012c96:	2321      	movs	r3, #33	; 0x21
 8012c98:	aa0b      	add	r2, sp, #44	; 0x2c
 8012c9a:	a905      	add	r1, sp, #20
 8012c9c:	3001      	adds	r0, #1
 8012c9e:	f7fc fb01 	bl	800f2a4 <ce7cfafa044c34a88028e8cf12995b3096f9f973>
 8012ca2:	2002      	movs	r0, #2
 8012ca4:	f7f9 fcc0 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012ca8:	2321      	movs	r3, #33	; 0x21
 8012caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8012cac:	a905      	add	r1, sp, #20
 8012cae:	3001      	adds	r0, #1
 8012cb0:	f7fc fcae 	bl	800f610 <27342039fe058efec7af5218a4abe449221e7bb4>
 8012cb4:	2031      	movs	r0, #49	; 0x31
 8012cb6:	f7fb fa8f 	bl	800e1d8 <d9cd3de8850ba05653155beecb1d40906820436e>
 8012cba:	4607      	mov	r7, r0
 8012cbc:	b120      	cbz	r0, 8012cc8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x104>
 8012cbe:	7803      	ldrb	r3, [r0, #0]
 8012cc0:	2b90      	cmp	r3, #144	; 0x90
 8012cc2:	d00e      	beq.n	8012ce2 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x11e>
 8012cc4:	f7fb f896 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012cc8:	f7fb ff52 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012ccc:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 8012cd0:	1ac0      	subs	r0, r0, r3
 8012cd2:	4b6e      	ldr	r3, [pc, #440]	; (8012e8c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2c8>)
 8012cd4:	4298      	cmp	r0, r3
 8012cd6:	d973      	bls.n	8012dc0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 8012cd8:	496d      	ldr	r1, [pc, #436]	; (8012e90 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2cc>)
 8012cda:	486e      	ldr	r0, [pc, #440]	; (8012e94 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d0>)
 8012cdc:	f240 129b 	movw	r2, #411	; 0x19b
 8012ce0:	e098      	b.n	8012e14 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x250>
 8012ce2:	f890 8052 	ldrb.w	r8, [r0, #82]	; 0x52
 8012ce6:	f1b8 0f01 	cmp.w	r8, #1
 8012cea:	d1eb      	bne.n	8012cc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 8012cec:	7a03      	ldrb	r3, [r0, #8]
 8012cee:	2b21      	cmp	r3, #33	; 0x21
 8012cf0:	d1e8      	bne.n	8012cc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 8012cf2:	2002      	movs	r0, #2
 8012cf4:	f7f9 fc98 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8012cf8:	7a3a      	ldrb	r2, [r7, #8]
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	f7fc f9f3 	bl	800f0e8 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>
 8012d02:	b908      	cbnz	r0, 8012d08 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x144>
 8012d04:	4638      	mov	r0, r7
 8012d06:	e7dd      	b.n	8012cc4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x100>
 8012d08:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8012d0c:	4648      	mov	r0, r9
 8012d0e:	f7fc f803 	bl	800ed18 <7d0846c279c7703537dc22d139b898222dc42c28>
 8012d12:	4649      	mov	r1, r9
 8012d14:	4640      	mov	r0, r8
 8012d16:	f7fe fa83 	bl	8011220 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>
 8012d1a:	4638      	mov	r0, r7
 8012d1c:	f7fb f86a 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8012d20:	682f      	ldr	r7, [r5, #0]
 8012d22:	4640      	mov	r0, r8
 8012d24:	f001 f8c8 	bl	8013eb8 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>
 8012d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d2c:	f887 803c 	strb.w	r8, [r7, #60]	; 0x3c
 8012d30:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8012d32:	682b      	ldr	r3, [r5, #0]
 8012d34:	2500      	movs	r5, #0
 8012d36:	f883 51bd 	strb.w	r5, [r3, #445]	; 0x1bd
 8012d3a:	4b57      	ldr	r3, [pc, #348]	; (8012e98 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d4>)
 8012d3c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012d40:	4618      	mov	r0, r3
 8012d42:	9908      	ldr	r1, [sp, #32]
 8012d44:	9307      	str	r3, [sp, #28]
 8012d46:	f001 f9f1 	bl	801412c <6759635076cb4c933592248ebd293b63832a7e9b>
 8012d4a:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
 8012d4e:	f8a4 51da 	strh.w	r5, [r4, #474]	; 0x1da
 8012d52:	f884 51dc 	strb.w	r5, [r4, #476]	; 0x1dc
 8012d56:	4629      	mov	r1, r5
 8012d58:	2210      	movs	r2, #16
 8012d5a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8012d5e:	f009 f923 	bl	801bfa8 <memset>
 8012d62:	2306      	movs	r3, #6
 8012d64:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012d68:	f504 77ec 	add.w	r7, r4, #472	; 0x1d8
 8012d6c:	4625      	mov	r5, r4
 8012d6e:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8012d72:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
 8012d76:	1b2b      	subs	r3, r5, r4
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d830      	bhi.n	8012dde <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x21a>
 8012d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d80:	2000      	movs	r0, #0
 8012d82:	f7fb ff61 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 8012d86:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8012d8a:	f8c4 0031 	str.w	r0, [r4, #49]	; 0x31
 8012d8e:	2700      	movs	r7, #0
 8012d90:	f367 0307 	bfi	r3, r7, #0, #8
 8012d94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8012d98:	4605      	mov	r5, r0
 8012d9a:	f001 fa09 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8012d9e:	463b      	mov	r3, r7
 8012da0:	4602      	mov	r2, r0
 8012da2:	4639      	mov	r1, r7
 8012da4:	4628      	mov	r0, r5
 8012da6:	f7ed ff31 	bl	8000c0c <__aeabi_uldivmod>
 8012daa:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012dac:	f001 fe38 	bl	8014a20 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 8012db0:	2301      	movs	r3, #1
 8012db2:	8720      	strh	r0, [r4, #56]	; 0x38
 8012db4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8012db8:	f7fe fc86 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8012dbc:	f007 fd52 	bl	801a864 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>
 8012dc0:	f8d4 0031 	ldr.w	r0, [r4, #49]	; 0x31
 8012dc4:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8012dc8:	f7fb fd0c 	bl	800e7e4 <7b29e7e9f3d2a5fbd391fecca02c9843bed48afc>
 8012dcc:	2e00      	cmp	r6, #0
 8012dce:	f000 8171 	beq.w	80130b4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f0>
 8012dd2:	2000      	movs	r0, #0
 8012dd4:	4633      	mov	r3, r6
 8012dd6:	b015      	add	sp, #84	; 0x54
 8012dd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	4718      	bx	r3
 8012dde:	f8d8 0000 	ldr.w	r0, [r8]
 8012de2:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 8012de6:	9002      	str	r0, [sp, #8]
 8012de8:	f898 3004 	ldrb.w	r3, [r8, #4]
 8012dec:	f88d 300c 	strb.w	r3, [sp, #12]
 8012df0:	f8cd 9004 	str.w	r9, [sp, #4]
 8012df4:	f895 31dc 	ldrb.w	r3, [r5, #476]	; 0x1dc
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	2103      	movs	r1, #3
 8012e00:	4660      	mov	r0, ip
 8012e02:	f001 f9e5 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8012e06:	3501      	adds	r5, #1
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d1b2      	bne.n	8012d72 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1ae>
 8012e0c:	4920      	ldr	r1, [pc, #128]	; (8012e90 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2cc>)
 8012e0e:	4823      	ldr	r0, [pc, #140]	; (8012e9c <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2d8>)
 8012e10:	f240 128b 	movw	r2, #395	; 0x18b
 8012e14:	f7ee fd60 	bl	80018d8 <EXPECT_OnAbortHandler>
 8012e18:	682d      	ldr	r5, [r5, #0]
 8012e1a:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
 8012e1e:	2b02      	cmp	r3, #2
 8012e20:	d0ce      	beq.n	8012dc0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 8012e22:	f04f 0901 	mov.w	r9, #1
 8012e26:	f885 91bd 	strb.w	r9, [r5, #445]	; 0x1bd
 8012e2a:	f7fb fee9 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8012e2e:	4b1c      	ldr	r3, [pc, #112]	; (8012ea0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2dc>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	fbb0 f2f3 	udiv	r2, r0, r3
 8012e36:	fb02 0013 	mls	r0, r2, r3, r0
 8012e3a:	4b1a      	ldr	r3, [pc, #104]	; (8012ea4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2e0>)
 8012e3c:	5c1b      	ldrb	r3, [r3, r0]
 8012e3e:	f885 31d8 	strb.w	r3, [r5, #472]	; 0x1d8
 8012e42:	f7f3 f9f5 	bl	8006230 <EMBENET_RADIO_Idle>
 8012e46:	f895 01d8 	ldrb.w	r0, [r5, #472]	; 0x1d8
 8012e4a:	f7f3 fa4f 	bl	80062ec <EMBENET_RADIO_RxEnable>
 8012e4e:	f7f3 fa75 	bl	800633c <EMBENET_RADIO_RxNow>
 8012e52:	2003      	movs	r0, #3
 8012e54:	f7fe fb9e 	bl	8011594 <077287437cab717c06c53f5380059be6eda08357>
 8012e58:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
 8012e5c:	f895 01f0 	ldrb.w	r0, [r5, #496]	; 0x1f0
 8012e60:	e9cd 8500 	strd	r8, r5, [sp]
 8012e64:	230d      	movs	r3, #13
 8012e66:	435f      	muls	r7, r3
 8012e68:	1aba      	subs	r2, r7, r2
 8012e6a:	f8d5 31f4 	ldr.w	r3, [r5, #500]	; 0x1f4
 8012e6e:	4649      	mov	r1, r9
 8012e70:	f7fb fd6e 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 8012e74:	e7a4      	b.n	8012dc0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x1fc>
 8012e76:	bf00      	nop
 8012e78:	20000040 	.word	0x20000040
 8012e7c:	08012bc5 	.word	0x08012bc5
 8012e80:	0801f014 	.word	0x0801f014
 8012e84:	08012125 	.word	0x08012125
 8012e88:	08011da5 	.word	0x08011da5
 8012e8c:	002dc6c0 	.word	0x002dc6c0
 8012e90:	0802087f 	.word	0x0802087f
 8012e94:	0802090a 	.word	0x0802090a
 8012e98:	0100000d 	.word	0x0100000d
 8012e9c:	080208e1 	.word	0x080208e1
 8012ea0:	0801f080 	.word	0x0801f080
 8012ea4:	0801f084 	.word	0x0801f084
 8012ea8:	682b      	ldr	r3, [r5, #0]
 8012eaa:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
 8012eae:	2a00      	cmp	r2, #0
 8012eb0:	d18c      	bne.n	8012dcc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 8012eb2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012eb6:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8012eba:	b10b      	cbz	r3, 8012ec0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x2fc>
 8012ebc:	2001      	movs	r0, #1
 8012ebe:	4798      	blx	r3
 8012ec0:	682c      	ldr	r4, [r5, #0]
 8012ec2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8012ec4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012ec6:	1ad7      	subs	r7, r2, r3
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	b2bf      	uxth	r7, r7
 8012ecc:	d803      	bhi.n	8012ed6 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x312>
 8012ece:	f001 f96f 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8012ed2:	4438      	add	r0, r7
 8012ed4:	b287      	uxth	r7, r0
 8012ed6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012ed8:	86e3      	strh	r3, [r4, #54]	; 0x36
 8012eda:	f8d4 3031 	ldr.w	r3, [r4, #49]	; 0x31
 8012ede:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8012ee2:	19db      	adds	r3, r3, r7
 8012ee4:	f142 0200 	adc.w	r2, r2, #0
 8012ee8:	f8c4 3031 	str.w	r3, [r4, #49]	; 0x31
 8012eec:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8012ef0:	f7f9 fb8c 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8012ef4:	b920      	cbnz	r0, 8012f00 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x33c>
 8012ef6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8012ef8:	429f      	cmp	r7, r3
 8012efa:	d211      	bcs.n	8012f20 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 8012efc:	1bdb      	subs	r3, r3, r7
 8012efe:	8763      	strh	r3, [r4, #58]	; 0x3a
 8012f00:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012f02:	f001 fd0d 	bl	8014920 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>
 8012f06:	b970      	cbnz	r0, 8012f26 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x362>
 8012f08:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8012f0a:	f001 f951 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8012f0e:	3501      	adds	r5, #1
 8012f10:	fbb5 f3f0 	udiv	r3, r5, r0
 8012f14:	fb03 5510 	mls	r5, r3, r0, r5
 8012f18:	8725      	strh	r5, [r4, #56]	; 0x38
 8012f1a:	f7fe fbd5 	bl	80116c8 <b7931a89d28a92b314e0dd9484b762986b0a117e>
 8012f1e:	e755      	b.n	8012dcc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 8012f20:	f7fe fed0 	bl	8011cc4 <e0d63f279bcffa109806a257de8645074809531c>
 8012f24:	e752      	b.n	8012dcc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 8012f26:	f001 fe93 	bl	8014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>
 8012f2a:	682a      	ldr	r2, [r5, #0]
 8012f2c:	f8b2 71da 	ldrh.w	r7, [r2, #474]	; 0x1da
 8012f30:	f8d2 3031 	ldr.w	r3, [r2, #49]	; 0x31
 8012f34:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
 8012f38:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8012f3a:	4297      	cmp	r7, r2
 8012f3c:	d13c      	bne.n	8012fb8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3f4>
 8012f3e:	18c0      	adds	r0, r0, r3
 8012f40:	4b5e      	ldr	r3, [pc, #376]	; (80130bc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4f8>)
 8012f42:	f141 0100 	adc.w	r1, r1, #0
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	2300      	movs	r3, #0
 8012f4a:	f7ed fe5f 	bl	8000c0c <__aeabi_uldivmod>
 8012f4e:	4b5c      	ldr	r3, [pc, #368]	; (80130c0 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4fc>)
 8012f50:	5c9b      	ldrb	r3, [r3, r2]
 8012f52:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
 8012f56:	f001 fd63 	bl	8014a20 <265e4cb026b8783377b1f22e25c3b310527be0c4>
 8012f5a:	8720      	strh	r0, [r4, #56]	; 0x38
 8012f5c:	f001 fd86 	bl	8014a6c <23fc3861a84c8d8f435c2599ea00b6593300a215>
 8012f60:	4680      	mov	r8, r0
 8012f62:	f7f9 fb53 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8012f66:	4681      	mov	r9, r0
 8012f68:	b9f0      	cbnz	r0, 8012fa8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 8012f6a:	f001 fd9b 	bl	8014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>
 8012f6e:	2801      	cmp	r0, #1
 8012f70:	4607      	mov	r7, r0
 8012f72:	d119      	bne.n	8012fa8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 8012f74:	f7fb f80e 	bl	800df94 <QUEUE_MacNotifySuperframeStart>
 8012f78:	f7fb fdfa 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 8012f7c:	f7fb fef0 	bl	800ed60 <03d6da78285e4b5dbf21b3dd748386b7299cb1fe>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d0cd      	beq.n	8012f20 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 8012f84:	1f02      	subs	r2, r0, #4
 8012f86:	b2d2      	uxtb	r2, r2
 8012f88:	2a01      	cmp	r2, #1
 8012f8a:	d9c9      	bls.n	8012f20 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x35c>
 8012f8c:	2803      	cmp	r0, #3
 8012f8e:	d10b      	bne.n	8012fa8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 8012f90:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012f94:	b143      	cbz	r3, 8012fa8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x3e4>
 8012f96:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 8012f9a:	a80b      	add	r0, sp, #44	; 0x2c
 8012f9c:	f7fb febc 	bl	800ed18 <7d0846c279c7703537dc22d139b898222dc42c28>
 8012fa0:	a90b      	add	r1, sp, #44	; 0x2c
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7fe f93c 	bl	8011220 <73e350c4a17e38f6f89a1d19f29db6422776fe5d>
 8012fa8:	f108 33ff 	add.w	r3, r8, #4294967295
 8012fac:	2b03      	cmp	r3, #3
 8012fae:	d8b4      	bhi.n	8012f1a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 8012fb0:	e8df f003 	tbb	[pc, r3]
 8012fb4:	7c0c170c 	.word	0x7c0c170c
 8012fb8:	18c0      	adds	r0, r0, r3
 8012fba:	4b42      	ldr	r3, [pc, #264]	; (80130c4 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x500>)
 8012fbc:	f141 0100 	adc.w	r1, r1, #0
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	f7ed fe22 	bl	8000c0c <__aeabi_uldivmod>
 8012fc8:	4b3f      	ldr	r3, [pc, #252]	; (80130c8 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x504>)
 8012fca:	e7c1      	b.n	8012f50 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x38c>
 8012fcc:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8012fd0:	4638      	mov	r0, r7
 8012fd2:	f001 fd83 	bl	8014adc <ffe29f5c9712609bba4ef23834769dd10ed867f0>
 8012fd6:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
 8012fda:	b978      	cbnz	r0, 8012ffc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x438>
 8012fdc:	f1b8 0f01 	cmp.w	r8, #1
 8012fe0:	d09b      	beq.n	8012f1a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	220f      	movs	r2, #15
 8012fe6:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8012fea:	2300      	movs	r3, #0
 8012fec:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 8012ff0:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8012ff4:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8012ff8:	9301      	str	r3, [sp, #4]
 8012ffa:	e04e      	b.n	801309a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4d6>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	2204      	movs	r2, #4
 8013000:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
 8013004:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8013008:	2231      	movs	r2, #49	; 0x31
 801300a:	705a      	strb	r2, [r3, #1]
 801300c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8013010:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8013014:	b95a      	cbnz	r2, 801302e <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x46a>
 8013016:	2201      	movs	r2, #1
 8013018:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801301c:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
 8013020:	189a      	adds	r2, r3, r2
 8013022:	f884 21bc 	strb.w	r2, [r4, #444]	; 0x1bc
 8013026:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 801302a:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
 801302e:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8013032:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8013036:	4640      	mov	r0, r8
 8013038:	f007 ff92 	bl	801af60 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>
 801303c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8013040:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013044:	b9b3      	cbnz	r3, 8013074 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4b0>
 8013046:	f007 fc05 	bl	801a854 <a59be9f028c32d03d0e01d3447553913a8330c11>
 801304a:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 801304e:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
 8013052:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8013056:	9002      	str	r0, [sp, #8]
 8013058:	2500      	movs	r5, #0
 801305a:	f104 0081 	add.w	r0, r4, #129	; 0x81
 801305e:	9000      	str	r0, [sp, #0]
 8013060:	9501      	str	r5, [sp, #4]
 8013062:	4640      	mov	r0, r8
 8013064:	f008 fa36 	bl	801b4d4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4>
 8013068:	b930      	cbnz	r0, 8013078 <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4b4>
 801306a:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 801306e:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
 8013072:	e752      	b.n	8012f1a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 8013074:	2000      	movs	r0, #0
 8013076:	e7e8      	b.n	801304a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x486>
 8013078:	2002      	movs	r0, #2
 801307a:	f7f9 fad5 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801307e:	4642      	mov	r2, r8
 8013080:	1c41      	adds	r1, r0, #1
 8013082:	4638      	mov	r0, r7
 8013084:	f7fe f934 	bl	80112f0 <628044ebadd5376fad8b3928b1093d9e8f1976ae>
 8013088:	2800      	cmp	r0, #0
 801308a:	d0ee      	beq.n	801306a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x4a6>
 801308c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
 8013090:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8013094:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8013098:	9501      	str	r5, [sp, #4]
 801309a:	4b0c      	ldr	r3, [pc, #48]	; (80130cc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x508>)
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	440a      	add	r2, r1
 80130a0:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 80130a4:	2101      	movs	r1, #1
 80130a6:	f7fb fc53 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 80130aa:	e68f      	b.n	8012dcc <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x208>
 80130ac:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80130ae:	f000 fa05 	bl	80134bc <982333be2760117c5a90b228f88c7e9bbb3de31e>
 80130b2:	e732      	b.n	8012f1a <abf2f5bada35777870bbf0e66ae0f41535f0fbb2+0x356>
 80130b4:	b015      	add	sp, #84	; 0x54
 80130b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130ba:	bf00      	nop
 80130bc:	0801f080 	.word	0x0801f080
 80130c0:	0801f084 	.word	0x0801f084
 80130c4:	0801f034 	.word	0x0801f034
 80130c8:	0801f038 	.word	0x0801f038
 80130cc:	08011859 	.word	0x08011859

080130d0 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79>:
 80130d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d4:	4b4e      	ldr	r3, [pc, #312]	; (8013210 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x140>)
 80130d6:	4d4f      	ldr	r5, [pc, #316]	; (8013214 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x144>)
 80130d8:	681c      	ldr	r4, [r3, #0]
 80130da:	b085      	sub	sp, #20
 80130dc:	f44f 720e 	mov.w	r2, #568	; 0x238
 80130e0:	2100      	movs	r1, #0
 80130e2:	4620      	mov	r0, r4
 80130e4:	f008 ff60 	bl	801bfa8 <memset>
 80130e8:	f7fb fd42 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 80130ec:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
 80130f0:	f7f3 f9a4 	bl	800643c <EMBENET_RADIO_GetCapabilities>
 80130f4:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 80130f8:	e9d0 7803 	ldrd	r7, r8, [r0, #12]
 80130fc:	9303      	str	r3, [sp, #12]
 80130fe:	682b      	ldr	r3, [r5, #0]
 8013100:	6802      	ldr	r2, [r0, #0]
 8013102:	f990 a01d 	ldrsb.w	sl, [r0, #29]
 8013106:	eba3 0c08 	sub.w	ip, r3, r8
 801310a:	ebac 0202 	sub.w	r2, ip, r2
 801310e:	e9d0 b905 	ldrd	fp, r9, [r0, #20]
 8013112:	e9c4 2c81 	strd	r2, ip, [r4, #516]	; 0x204
 8013116:	696a      	ldr	r2, [r5, #20]
 8013118:	9201      	str	r2, [sp, #4]
 801311a:	eb0c 0e02 	add.w	lr, ip, r2
 801311e:	686a      	ldr	r2, [r5, #4]
 8013120:	9200      	str	r2, [sp, #0]
 8013122:	9900      	ldr	r1, [sp, #0]
 8013124:	68ea      	ldr	r2, [r5, #12]
 8013126:	f8c4 e20c 	str.w	lr, [r4, #524]	; 0x20c
 801312a:	1a88      	subs	r0, r1, r2
 801312c:	440a      	add	r2, r1
 801312e:	68a9      	ldr	r1, [r5, #8]
 8013130:	9102      	str	r1, [sp, #8]
 8013132:	1a59      	subs	r1, r3, r1
 8013134:	eba0 000b 	sub.w	r0, r0, fp
 8013138:	eba1 010b 	sub.w	r1, r1, fp
 801313c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013140:	445b      	add	r3, fp
 8013142:	444a      	add	r2, r9
 8013144:	444b      	add	r3, r9
 8013146:	f8dd 9000 	ldr.w	r9, [sp]
 801314a:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
 801314e:	eba9 0808 	sub.w	r8, r9, r8
 8013152:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013156:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 801315a:	eba8 0909 	sub.w	r9, r8, r9
 801315e:	1bc7      	subs	r7, r0, r7
 8013160:	1b8e      	subs	r6, r1, r6
 8013162:	e9c4 7084 	strd	r7, r0, [r4, #528]	; 0x210
 8013166:	e9c4 6187 	strd	r6, r1, [r4, #540]	; 0x21c
 801316a:	e9c4 988a 	strd	r9, r8, [r4, #552]	; 0x228
 801316e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013172:	692d      	ldr	r5, [r5, #16]
 8013174:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
 8013178:	44c1      	add	r9, r8
 801317a:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
 801317e:	f884 a1d9 	strb.w	sl, [r4, #473]	; 0x1d9
 8013182:	f1bc 0f00 	cmp.w	ip, #0
 8013186:	d022      	beq.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8013188:	45ac      	cmp	ip, r5
 801318a:	d220      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801318c:	f1be 0f00 	cmp.w	lr, #0
 8013190:	d01d      	beq.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8013192:	45ae      	cmp	lr, r5
 8013194:	d21b      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8013196:	b1d7      	cbz	r7, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 8013198:	42af      	cmp	r7, r5
 801319a:	d218      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801319c:	b1b8      	cbz	r0, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 801319e:	42a8      	cmp	r0, r5
 80131a0:	d215      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131a2:	b1a2      	cbz	r2, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131a4:	42aa      	cmp	r2, r5
 80131a6:	d212      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131a8:	b18e      	cbz	r6, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131aa:	42ae      	cmp	r6, r5
 80131ac:	d20f      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131ae:	b171      	cbz	r1, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131b0:	42a9      	cmp	r1, r5
 80131b2:	d20c      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131b4:	b15b      	cbz	r3, 80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131b6:	42ab      	cmp	r3, r5
 80131b8:	d209      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131ba:	f1b8 0f00 	cmp.w	r8, #0
 80131be:	d006      	beq.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131c0:	45a8      	cmp	r8, r5
 80131c2:	d204      	bcs.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131c4:	f1b9 0f00 	cmp.w	r9, #0
 80131c8:	d001      	beq.n	80131ce <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0xfe>
 80131ca:	45a9      	cmp	r9, r5
 80131cc:	d305      	bcc.n	80131da <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x10a>
 80131ce:	4912      	ldr	r1, [pc, #72]	; (8013218 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x148>)
 80131d0:	4812      	ldr	r0, [pc, #72]	; (801321c <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x14c>)
 80131d2:	f240 121b 	movw	r2, #283	; 0x11b
 80131d6:	f7ee fb7f 	bl	80018d8 <EXPECT_OnAbortHandler>
 80131da:	2200      	movs	r2, #0
 80131dc:	4910      	ldr	r1, [pc, #64]	; (8013220 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x150>)
 80131de:	4811      	ldr	r0, [pc, #68]	; (8013224 <f31ec2926d8265f853f9e0e8e92d0d3b7da49f79+0x154>)
 80131e0:	f7f3 f810 	bl	8006204 <EMBENET_RADIO_SetCallbacks>
 80131e4:	2000      	movs	r0, #0
 80131e6:	f7fb fb89 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80131ea:	f884 01f0 	strb.w	r0, [r4, #496]	; 0x1f0
 80131ee:	2001      	movs	r0, #1
 80131f0:	f7fb fb84 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80131f4:	230d      	movs	r3, #13
 80131f6:	fb03 f105 	mul.w	r1, r3, r5
 80131fa:	f884 01f8 	strb.w	r0, [r4, #504]	; 0x1f8
 80131fe:	0849      	lsrs	r1, r1, #1
 8013200:	2000      	movs	r0, #0
 8013202:	f7fb fd21 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 8013206:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
 801320a:	b005      	add	sp, #20
 801320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013210:	20000040 	.word	0x20000040
 8013214:	0801f014 	.word	0x0801f014
 8013218:	0802087f 	.word	0x0802087f
 801321c:	08020937 	.word	0x08020937
 8013220:	08012125 	.word	0x08012125
 8013224:	08011da5 	.word	0x08011da5

08013228 <f245cef569e100f3b51b8078c1d070e2f387d00a>:
 8013228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801322a:	4b09      	ldr	r3, [pc, #36]	; (8013250 <f245cef569e100f3b51b8078c1d070e2f387d00a+0x28>)
 801322c:	681c      	ldr	r4, [r3, #0]
 801322e:	f894 51f0 	ldrb.w	r5, [r4, #496]	; 0x1f0
 8013232:	f8d4 6234 	ldr.w	r6, [r4, #564]	; 0x234
 8013236:	f7fb fc9b 	bl	800eb70 <98bf14dc0e749cb1b7db48b40e4393705fb7926a>
 801323a:	4a06      	ldr	r2, [pc, #24]	; (8013254 <f245cef569e100f3b51b8078c1d070e2f387d00a+0x2c>)
 801323c:	9200      	str	r2, [sp, #0]
 801323e:	4603      	mov	r3, r0
 8013240:	9401      	str	r4, [sp, #4]
 8013242:	4632      	mov	r2, r6
 8013244:	2101      	movs	r1, #1
 8013246:	4628      	mov	r0, r5
 8013248:	f7fb fb82 	bl	800e950 <730eb7956d67b4105233f5dd87140a7c05a0a0f0>
 801324c:	b002      	add	sp, #8
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	20000040 	.word	0x20000040
 8013254:	08012bc5 	.word	0x08012bc5

08013258 <c37c52d5fcbad41724f29f060633d7770e309943>:
 8013258:	b510      	push	{r4, lr}
 801325a:	4b05      	ldr	r3, [pc, #20]	; (8013270 <c37c52d5fcbad41724f29f060633d7770e309943+0x18>)
 801325c:	681c      	ldr	r4, [r3, #0]
 801325e:	f7fe fd31 	bl	8011cc4 <e0d63f279bcffa109806a257de8645074809531c>
 8013262:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8013266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801326a:	f7fb bc69 	b.w	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801326e:	bf00      	nop
 8013270:	20000040 	.word	0x20000040

08013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>:
 8013274:	b513      	push	{r0, r1, r4, lr}
 8013276:	4604      	mov	r4, r0
 8013278:	f7f2 fe04 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 801327c:	4b09      	ldr	r3, [pc, #36]	; (80132a4 <21f13ea89246a8f3ee5116c9b445be3be24e58a5+0x30>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f8d3 0031 	ldr.w	r0, [r3, #49]	; 0x31
 8013284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013288:	9000      	str	r0, [sp, #0]
 801328a:	f88d 3004 	strb.w	r3, [sp, #4]
 801328e:	f7f2 fe19 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8013292:	9800      	ldr	r0, [sp, #0]
 8013294:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013298:	6020      	str	r0, [r4, #0]
 801329a:	4620      	mov	r0, r4
 801329c:	7123      	strb	r3, [r4, #4]
 801329e:	b002      	add	sp, #8
 80132a0:	bd10      	pop	{r4, pc}
 80132a2:	bf00      	nop
 80132a4:	20000040 	.word	0x20000040

080132a8 <57d2957de5f8b1f87a34ecc897e93650c3f2e297>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	4b0a      	ldr	r3, [pc, #40]	; (80132d4 <57d2957de5f8b1f87a34ecc897e93650c3f2e297+0x2c>)
 80132ac:	681d      	ldr	r5, [r3, #0]
 80132ae:	f7f2 fde9 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80132b2:	69a8      	ldr	r0, [r5, #24]
 80132b4:	69ee      	ldr	r6, [r5, #28]
 80132b6:	f242 7410 	movw	r4, #10000	; 0x2710
 80132ba:	fba0 0104 	umull	r0, r1, r0, r4
 80132be:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80132c2:	fb04 1106 	mla	r1, r4, r6, r1
 80132c6:	f7ed fca1 	bl	8000c0c <__aeabi_uldivmod>
 80132ca:	b284      	uxth	r4, r0
 80132cc:	f7f2 fdfa 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80132d0:	4620      	mov	r0, r4
 80132d2:	bd70      	pop	{r4, r5, r6, pc}
 80132d4:	20000040 	.word	0x20000040

080132d8 <430fd23aeea8952b7b416b6590815371f1106b85>:
 80132d8:	b570      	push	{r4, r5, r6, lr}
 80132da:	4b0a      	ldr	r3, [pc, #40]	; (8013304 <430fd23aeea8952b7b416b6590815371f1106b85+0x2c>)
 80132dc:	681d      	ldr	r5, [r3, #0]
 80132de:	f7f2 fdd1 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80132e2:	68a8      	ldr	r0, [r5, #8]
 80132e4:	68ee      	ldr	r6, [r5, #12]
 80132e6:	f242 7410 	movw	r4, #10000	; 0x2710
 80132ea:	fba0 0104 	umull	r0, r1, r0, r4
 80132ee:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80132f2:	fb04 1106 	mla	r1, r4, r6, r1
 80132f6:	f7ed fc89 	bl	8000c0c <__aeabi_uldivmod>
 80132fa:	b284      	uxth	r4, r0
 80132fc:	f7f2 fde2 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8013300:	4620      	mov	r0, r4
 8013302:	bd70      	pop	{r4, r5, r6, pc}
 8013304:	20000040 	.word	0x20000040

08013308 <2a6c61bbc29fcf617904472e829df358a186c125>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <2a6c61bbc29fcf617904472e829df358a186c125+0x2c>)
 801330c:	681d      	ldr	r5, [r3, #0]
 801330e:	f7f2 fdb9 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8013312:	6928      	ldr	r0, [r5, #16]
 8013314:	696e      	ldr	r6, [r5, #20]
 8013316:	f242 7410 	movw	r4, #10000	; 0x2710
 801331a:	fba0 0104 	umull	r0, r1, r0, r4
 801331e:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8013322:	fb04 1106 	mla	r1, r4, r6, r1
 8013326:	f7ed fc71 	bl	8000c0c <__aeabi_uldivmod>
 801332a:	b284      	uxth	r4, r0
 801332c:	f7f2 fdca 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8013330:	4620      	mov	r0, r4
 8013332:	bd70      	pop	{r4, r5, r6, pc}
 8013334:	20000040 	.word	0x20000040

08013338 <60f007314f15c808f67a076d33295282887c81e9>:
 8013338:	4b02      	ldr	r3, [pc, #8]	; (8013344 <60f007314f15c808f67a076d33295282887c81e9+0xc>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	20000040 	.word	0x20000040

08013348 <2fba4ddec868eb31998278adcb690f685bb9d2cf>:
 8013348:	f7fe bcbc 	b.w	8011cc4 <e0d63f279bcffa109806a257de8645074809531c>

0801334c <423de69afc5c7b88ba71928d815161412a3b9f11>:
 801334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334e:	4b0b      	ldr	r3, [pc, #44]	; (801337c <423de69afc5c7b88ba71928d815161412a3b9f11+0x30>)
 8013350:	681c      	ldr	r4, [r3, #0]
 8013352:	f894 703c 	ldrb.w	r7, [r4, #60]	; 0x3c
 8013356:	4605      	mov	r5, r0
 8013358:	460e      	mov	r6, r1
 801335a:	b167      	cbz	r7, 8013376 <423de69afc5c7b88ba71928d815161412a3b9f11+0x2a>
 801335c:	f7f2 fd92 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8013360:	f8d4 3031 	ldr.w	r3, [r4, #49]	; 0x31
 8013364:	602b      	str	r3, [r5, #0]
 8013366:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801336a:	712b      	strb	r3, [r5, #4]
 801336c:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8013370:	6033      	str	r3, [r6, #0]
 8013372:	f7f2 fda7 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8013376:	4638      	mov	r0, r7
 8013378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801337a:	bf00      	nop
 801337c:	20000040 	.word	0x20000040

08013380 <7fbb727db4b2b6715b092505673cb5922a0d63a8>:
 8013380:	b508      	push	{r3, lr}
 8013382:	4603      	mov	r3, r0
 8013384:	2000      	movs	r0, #0
 8013386:	7a1a      	ldrb	r2, [r3, #8]
 8013388:	b11a      	cbz	r2, 8013392 <7fbb727db4b2b6715b092505673cb5922a0d63a8+0x12>
 801338a:	7218      	strb	r0, [r3, #8]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	b103      	cbz	r3, 8013392 <7fbb727db4b2b6715b092505673cb5922a0d63a8+0x12>
 8013390:	4798      	blx	r3
 8013392:	bd08      	pop	{r3, pc}

08013394 <bcbd76277dc83b5a545ee18a3f2075697c040c84>:
 8013394:	4b03      	ldr	r3, [pc, #12]	; (80133a4 <bcbd76277dc83b5a545ee18a3f2075697c040c84+0x10>)
 8013396:	6819      	ldr	r1, [r3, #0]
 8013398:	2300      	movs	r3, #0
 801339a:	e9c1 33c5 	strd	r3, r3, [r1, #788]	; 0x314
 801339e:	f8c1 331c 	str.w	r3, [r1, #796]	; 0x31c
 80133a2:	4770      	bx	lr
 80133a4:	20000040 	.word	0x20000040

080133a8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f>:
 80133a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133aa:	4b3c      	ldr	r3, [pc, #240]	; (801349c <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf4>)
 80133ac:	681d      	ldr	r5, [r3, #0]
 80133ae:	f8b5 3314 	ldrh.w	r3, [r5, #788]	; 0x314
 80133b2:	4283      	cmp	r3, r0
 80133b4:	b08f      	sub	sp, #60	; 0x3c
 80133b6:	4604      	mov	r4, r0
 80133b8:	d123      	bne.n	8013402 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x5a>
 80133ba:	f000 fef9 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80133be:	2700      	movs	r7, #0
 80133c0:	f000 fef6 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80133c4:	b2be      	uxth	r6, r7
 80133c6:	4286      	cmp	r6, r0
 80133c8:	d204      	bcs.n	80133d4 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x2c>
 80133ca:	4630      	mov	r0, r6
 80133cc:	f001 f980 	bl	80146d0 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 80133d0:	b310      	cbz	r0, 8013418 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x70>
 80133d2:	b30e      	cbz	r6, 8013418 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x70>
 80133d4:	af09      	add	r7, sp, #36	; 0x24
 80133d6:	2100      	movs	r1, #0
 80133d8:	2211      	movs	r2, #17
 80133da:	4638      	mov	r0, r7
 80133dc:	f008 fde4 	bl	801bfa8 <memset>
 80133e0:	4639      	mov	r1, r7
 80133e2:	4620      	mov	r0, r4
 80133e4:	f001 f850 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80133e8:	b9c0      	cbnz	r0, 801341c <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x74>
 80133ea:	4b2d      	ldr	r3, [pc, #180]	; (80134a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 80133ec:	4a2d      	ldr	r2, [pc, #180]	; (80134a4 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xfc>)
 80133ee:	9007      	str	r0, [sp, #28]
 80133f0:	4619      	mov	r1, r3
 80133f2:	9308      	str	r3, [sp, #32]
 80133f4:	f7fd f91e 	bl	8010634 <LOGGER_PrintLine>
 80133f8:	492b      	ldr	r1, [pc, #172]	; (80134a8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x100>)
 80133fa:	482c      	ldr	r0, [pc, #176]	; (80134ac <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x104>)
 80133fc:	2264      	movs	r2, #100	; 0x64
 80133fe:	f7ee fa6b 	bl	80018d8 <EXPECT_OnAbortHandler>
 8013402:	2303      	movs	r3, #3
 8013404:	9309      	str	r3, [sp, #36]	; 0x24
 8013406:	4b26      	ldr	r3, [pc, #152]	; (80134a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 8013408:	4a29      	ldr	r2, [pc, #164]	; (80134b0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x108>)
 801340a:	930a      	str	r3, [sp, #40]	; 0x28
 801340c:	4619      	mov	r1, r3
 801340e:	2003      	movs	r0, #3
 8013410:	f7fd f910 	bl	8010634 <LOGGER_PrintLine>
 8013414:	2400      	movs	r4, #0
 8013416:	e01c      	b.n	8013452 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xaa>
 8013418:	3701      	adds	r7, #1
 801341a:	e7d1      	b.n	80133c0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x18>
 801341c:	f000 fec8 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8013420:	4286      	cmp	r6, r0
 8013422:	d029      	beq.n	8013478 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xd0>
 8013424:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8013428:	2300      	movs	r3, #0
 801342a:	f363 0207 	bfi	r2, r3, #0, #8
 801342e:	f88d 2018 	strb.w	r2, [sp, #24]
 8013432:	9906      	ldr	r1, [sp, #24]
 8013434:	f88d 100c 	strb.w	r1, [sp, #12]
 8013438:	e9cd 3700 	strd	r3, r7, [sp]
 801343c:	9305      	str	r3, [sp, #20]
 801343e:	9302      	str	r3, [sp, #8]
 8013440:	2206      	movs	r2, #6
 8013442:	2104      	movs	r1, #4
 8013444:	4630      	mov	r0, r6
 8013446:	f000 fec3 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 801344a:	4604      	mov	r4, r0
 801344c:	b120      	cbz	r0, 8013458 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xb0>
 801344e:	f8a5 6314 	strh.w	r6, [r5, #788]	; 0x314
 8013452:	4620      	mov	r0, r4
 8013454:	b00f      	add	sp, #60	; 0x3c
 8013456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013458:	2303      	movs	r3, #3
 801345a:	9307      	str	r3, [sp, #28]
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 801345e:	4a15      	ldr	r2, [pc, #84]	; (80134b4 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x10c>)
 8013460:	9308      	str	r3, [sp, #32]
 8013462:	4619      	mov	r1, r3
 8013464:	2003      	movs	r0, #3
 8013466:	f7fd f8e5 	bl	8010634 <LOGGER_PrintLine>
 801346a:	f8c5 4314 	str.w	r4, [r5, #788]	; 0x314
 801346e:	f8c5 4318 	str.w	r4, [r5, #792]	; 0x318
 8013472:	f8c5 431c 	str.w	r4, [r5, #796]	; 0x31c
 8013476:	e7cd      	b.n	8013414 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x6c>
 8013478:	2303      	movs	r3, #3
 801347a:	9307      	str	r3, [sp, #28]
 801347c:	4b08      	ldr	r3, [pc, #32]	; (80134a0 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0xf8>)
 801347e:	4a0e      	ldr	r2, [pc, #56]	; (80134b8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x110>)
 8013480:	9308      	str	r3, [sp, #32]
 8013482:	4619      	mov	r1, r3
 8013484:	2003      	movs	r0, #3
 8013486:	f7fd f8d5 	bl	8010634 <LOGGER_PrintLine>
 801348a:	2300      	movs	r3, #0
 801348c:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 8013490:	f8c5 3318 	str.w	r3, [r5, #792]	; 0x318
 8013494:	f8c5 331c 	str.w	r3, [r5, #796]	; 0x31c
 8013498:	e7bc      	b.n	8013414 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f+0x6c>
 801349a:	bf00      	nop
 801349c:	20000040 	.word	0x20000040
 80134a0:	08020950 	.word	0x08020950
 80134a4:	080209b6 	.word	0x080209b6
 80134a8:	080209e8 	.word	0x080209e8
 80134ac:	08020a43 	.word	0x08020a43
 80134b0:	080209a4 	.word	0x080209a4
 80134b4:	08020a74 	.word	0x08020a74
 80134b8:	08020a9e 	.word	0x08020a9e

080134bc <982333be2760117c5a90b228f88c7e9bbb3de31e>:
 80134bc:	4b07      	ldr	r3, [pc, #28]	; (80134dc <982333be2760117c5a90b228f88c7e9bbb3de31e+0x20>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f8b3 2314 	ldrh.w	r2, [r3, #788]	; 0x314
 80134c4:	4282      	cmp	r2, r0
 80134c6:	f503 7145 	add.w	r1, r3, #788	; 0x314
 80134ca:	d106      	bne.n	80134da <982333be2760117c5a90b228f88c7e9bbb3de31e+0x1e>
 80134cc:	2201      	movs	r2, #1
 80134ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 80134d2:	4803      	ldr	r0, [pc, #12]	; (80134e0 <982333be2760117c5a90b228f88c7e9bbb3de31e+0x24>)
 80134d4:	2212      	movs	r2, #18
 80134d6:	f7fc ba1f 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80134da:	4770      	bx	lr
 80134dc:	20000040 	.word	0x20000040
 80134e0:	08013381 	.word	0x08013381

080134e4 <f13b11cc0bbf49b03ea71d42a05b941abea0a520>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	4b0a      	ldr	r3, [pc, #40]	; (8013510 <f13b11cc0bbf49b03ea71d42a05b941abea0a520+0x2c>)
 80134e8:	b086      	sub	sp, #24
 80134ea:	681c      	ldr	r4, [r3, #0]
 80134ec:	2211      	movs	r2, #17
 80134ee:	2100      	movs	r1, #0
 80134f0:	a801      	add	r0, sp, #4
 80134f2:	f008 fd59 	bl	801bfa8 <memset>
 80134f6:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 80134fa:	b13b      	cbz	r3, 801350c <f13b11cc0bbf49b03ea71d42a05b941abea0a520+0x28>
 80134fc:	f8b4 0314 	ldrh.w	r0, [r4, #788]	; 0x314
 8013500:	a901      	add	r1, sp, #4
 8013502:	f000 ffc1 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8013506:	2300      	movs	r3, #0
 8013508:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
 801350c:	b006      	add	sp, #24
 801350e:	bd10      	pop	{r4, pc}
 8013510:	20000040 	.word	0x20000040

08013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>:
 8013514:	4b05      	ldr	r3, [pc, #20]	; (801352c <15dba1c7fc73543b1601dd226b614c09581a3c00+0x18>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 801351c:	2b04      	cmp	r3, #4
 801351e:	bf9a      	itte	ls
 8013520:	4a03      	ldrls	r2, [pc, #12]	; (8013530 <15dba1c7fc73543b1601dd226b614c09581a3c00+0x1c>)
 8013522:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 8013526:	4803      	ldrhi	r0, [pc, #12]	; (8013534 <15dba1c7fc73543b1601dd226b614c09581a3c00+0x20>)
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop
 801352c:	20000040 	.word	0x20000040
 8013530:	08020d4c 	.word	0x08020d4c
 8013534:	0801f4ff 	.word	0x0801f4ff

08013538 <05eb4bf7e3ef9650051a184f9a45beef977581cc>:
 8013538:	2000      	movs	r0, #0
 801353a:	4770      	bx	lr

0801353c <7d1cb8091a20cdd8ca4da922eaffd9d973c739dd>:
 801353c:	2000      	movs	r0, #0
 801353e:	4770      	bx	lr

08013540 <ea8791126746fbed7807350ad8e855f2738f0828>:
 8013540:	2000      	movs	r0, #0
 8013542:	4770      	bx	lr

08013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>:
 8013544:	7982      	ldrb	r2, [r0, #6]
 8013546:	2300      	movs	r3, #0
 8013548:	f362 231f 	bfi	r3, r2, #8, #24
 801354c:	79c2      	ldrb	r2, [r0, #7]
 801354e:	f362 0307 	bfi	r3, r2, #0, #8
 8013552:	4a08      	ldr	r2, [pc, #32]	; (8013574 <73cbc6b3efc5bccd854bcb41733d9be650914b6e+0x30>)
 8013554:	6810      	ldr	r0, [r2, #0]
 8013556:	b29b      	uxth	r3, r3
 8013558:	fbb3 f2f0 	udiv	r2, r3, r0
 801355c:	fb00 3212 	mls	r2, r0, r2, r3
 8013560:	708a      	strb	r2, [r1, #2]
 8013562:	220c      	movs	r2, #12
 8013564:	fbb3 f0f2 	udiv	r0, r3, r2
 8013568:	fb02 3310 	mls	r3, r2, r0, r3
 801356c:	3301      	adds	r3, #1
 801356e:	800b      	strh	r3, [r1, #0]
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop
 8013574:	0801f034 	.word	0x0801f034

08013578 <ea0b8bb8dfe469dd0c00b9aeff09f3d664539527>:
 8013578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801357a:	2300      	movs	r3, #0
 801357c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013580:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	2301      	movs	r3, #1
 8013588:	f100 010e 	add.w	r1, r0, #14
 801358c:	461a      	mov	r2, r3
 801358e:	2007      	movs	r0, #7
 8013590:	f002 f82e 	bl	80155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8013594:	b007      	add	sp, #28
 8013596:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801359c <getRandomChannelOffset>:
 801359c:	b508      	push	{r3, lr}
 801359e:	f7fb fb2f 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 80135a2:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <getRandomChannelOffset+0x18>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	fbb0 f2f3 	udiv	r2, r0, r3
 80135aa:	fb02 0013 	mls	r0, r2, r3, r0
 80135ae:	b2c0      	uxtb	r0, r0
 80135b0:	bd08      	pop	{r3, pc}
 80135b2:	bf00      	nop
 80135b4:	0801f034 	.word	0x0801f034

080135b8 <44dfb88cdd7607734702d454330b85a9c16a18d6>:
 80135b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135ba:	f100 030e 	add.w	r3, r0, #14
 80135be:	4604      	mov	r4, r0
 80135c0:	f102 0010 	add.w	r0, r2, #16
 80135c4:	f852 5b04 	ldr.w	r5, [r2], #4
 80135c8:	f843 5b04 	str.w	r5, [r3], #4
 80135cc:	4282      	cmp	r2, r0
 80135ce:	d1f9      	bne.n	80135c4 <44dfb88cdd7607734702d454330b85a9c16a18d6+0xc>
 80135d0:	7812      	ldrb	r2, [r2, #0]
 80135d2:	701a      	strb	r2, [r3, #0]
 80135d4:	1f8b      	subs	r3, r1, #6
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d811      	bhi.n	80135fe <44dfb88cdd7607734702d454330b85a9c16a18d6+0x46>
 80135da:	2304      	movs	r3, #4
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	4b0b      	ldr	r3, [pc, #44]	; (801360c <44dfb88cdd7607734702d454330b85a9c16a18d6+0x54>)
 80135e0:	9301      	str	r3, [sp, #4]
 80135e2:	ab02      	add	r3, sp, #8
 80135e4:	e913 0003 	ldmdb	r3, {r0, r1}
 80135e8:	4a09      	ldr	r2, [pc, #36]	; (8013610 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x58>)
 80135ea:	f7fd f823 	bl	8010634 <LOGGER_PrintLine>
 80135ee:	4809      	ldr	r0, [pc, #36]	; (8013614 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x5c>)
 80135f0:	2207      	movs	r2, #7
 80135f2:	4621      	mov	r1, r4
 80135f4:	b003      	add	sp, #12
 80135f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135fa:	f7fc b98d 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 80135fe:	b919      	cbnz	r1, 8013608 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x50>
 8013600:	4805      	ldr	r0, [pc, #20]	; (8013618 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x60>)
 8013602:	2207      	movs	r2, #7
 8013604:	4621      	mov	r1, r4
 8013606:	e7f5      	b.n	80135f4 <44dfb88cdd7607734702d454330b85a9c16a18d6+0x3c>
 8013608:	b003      	add	sp, #12
 801360a:	bd30      	pop	{r4, r5, pc}
 801360c:	08020ab3 	.word	0x08020ab3
 8013610:	08020ab7 	.word	0x08020ab7
 8013614:	08013579 	.word	0x08013579
 8013618:	08013ded 	.word	0x08013ded

0801361c <candidateAddCellList.part.0.constprop.0>:
 801361c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013620:	b08b      	sub	sp, #44	; 0x2c
 8013622:	460c      	mov	r4, r1
 8013624:	2219      	movs	r2, #25
 8013626:	2100      	movs	r1, #0
 8013628:	af03      	add	r7, sp, #12
 801362a:	4606      	mov	r6, r0
 801362c:	f008 fcbc 	bl	801bfa8 <memset>
 8013630:	221a      	movs	r2, #26
 8013632:	21ff      	movs	r1, #255	; 0xff
 8013634:	4638      	mov	r0, r7
 8013636:	f008 fcb7 	bl	801bfa8 <memset>
 801363a:	4620      	mov	r0, r4
 801363c:	f7f9 fcdc 	bl	800cff8 <NEIGHBORS_GetRxSlotCandidate>
 8013640:	f100 0801 	add.w	r8, r0, #1
 8013644:	230d      	movs	r3, #13
 8013646:	fa1f f888 	uxth.w	r8, r8
 801364a:	fbb8 f2f3 	udiv	r2, r8, r3
 801364e:	fb03 8812 	mls	r8, r3, r2, r8
 8013652:	fa1f f888 	uxth.w	r8, r8
 8013656:	2500      	movs	r5, #0
 8013658:	462c      	mov	r4, r5
 801365a:	eb08 0a03 	add.w	sl, r8, r3
 801365e:	2d00      	cmp	r5, #0
 8013660:	bf08      	it	eq
 8013662:	2501      	moveq	r5, #1
 8013664:	fa1f f985 	uxth.w	r9, r5
 8013668:	45c8      	cmp	r8, r9
 801366a:	bf8c      	ite	hi
 801366c:	eba8 0909 	subhi.w	r9, r8, r9
 8013670:	ebaa 0909 	subls.w	r9, sl, r9
 8013674:	fa1f f989 	uxth.w	r9, r9
 8013678:	4648      	mov	r0, r9
 801367a:	f001 f829 	bl	80146d0 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 801367e:	b130      	cbz	r0, 801368e <candidateAddCellList.part.0.constprop.0+0x72>
 8013680:	aa0a      	add	r2, sp, #40	; 0x28
 8013682:	1c63      	adds	r3, r4, #1
 8013684:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013688:	f824 9c1c 	strh.w	r9, [r4, #-28]
 801368c:	b29c      	uxth	r4, r3
 801368e:	3501      	adds	r5, #1
 8013690:	2d0d      	cmp	r5, #13
 8013692:	d1e4      	bne.n	801365e <candidateAddCellList.part.0.constprop.0+0x42>
 8013694:	2c05      	cmp	r4, #5
 8013696:	d816      	bhi.n	80136c6 <candidateAddCellList.part.0.constprop.0+0xaa>
 8013698:	2500      	movs	r5, #0
 801369a:	f04f 0801 	mov.w	r8, #1
 801369e:	f837 3b02 	ldrh.w	r3, [r7], #2
 80136a2:	f8a6 3001 	strh.w	r3, [r6, #1]
 80136a6:	f7ff ff79 	bl	801359c <getRandomChannelOffset>
 80136aa:	3501      	adds	r5, #1
 80136ac:	b2ab      	uxth	r3, r5
 80136ae:	42a3      	cmp	r3, r4
 80136b0:	f8a6 0003 	strh.w	r0, [r6, #3]
 80136b4:	f806 8b05 	strb.w	r8, [r6], #5
 80136b8:	d9f1      	bls.n	801369e <candidateAddCellList.part.0.constprop.0+0x82>
 80136ba:	1e20      	subs	r0, r4, #0
 80136bc:	bf18      	it	ne
 80136be:	2001      	movne	r0, #1
 80136c0:	b00b      	add	sp, #44	; 0x2c
 80136c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c6:	f106 0314 	add.w	r3, r6, #20
 80136ca:	f04f 0a00 	mov.w	sl, #0
 80136ce:	f04f 0901 	mov.w	r9, #1
 80136d2:	9301      	str	r3, [sp, #4]
 80136d4:	f1ba 0f04 	cmp.w	sl, #4
 80136d8:	d143      	bne.n	8013762 <candidateAddCellList.part.0.constprop.0+0x146>
 80136da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80136de:	f7fb fa8f 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 80136e2:	fbb0 f3f5 	udiv	r3, r0, r5
 80136e6:	fb03 0315 	mls	r3, r3, r5, r0
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	4639      	mov	r1, r7
 80136ee:	2200      	movs	r2, #0
 80136f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80136f4:	f831 cb02 	ldrh.w	ip, [r1], #2
 80136f8:	4584      	cmp	ip, r0
 80136fa:	d103      	bne.n	8013704 <candidateAddCellList.part.0.constprop.0+0xe8>
 80136fc:	3201      	adds	r2, #1
 80136fe:	42a2      	cmp	r2, r4
 8013700:	d3f8      	bcc.n	80136f4 <candidateAddCellList.part.0.constprop.0+0xd8>
 8013702:	2200      	movs	r2, #0
 8013704:	b1c3      	cbz	r3, 8013738 <candidateAddCellList.part.0.constprop.0+0x11c>
 8013706:	f04f 0c00 	mov.w	ip, #0
 801370a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801370e:	2001      	movs	r0, #1
 8013710:	1811      	adds	r1, r2, r0
 8013712:	fbb1 fbf4 	udiv	fp, r1, r4
 8013716:	fb04 111b 	mls	r1, r4, fp, r1
 801371a:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 801371e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8013722:	f83b bc1c 	ldrh.w	fp, [fp, #-28]
 8013726:	45f3      	cmp	fp, lr
 8013728:	d125      	bne.n	8013776 <candidateAddCellList.part.0.constprop.0+0x15a>
 801372a:	3001      	adds	r0, #1
 801372c:	42a0      	cmp	r0, r4
 801372e:	d3ef      	bcc.n	8013710 <candidateAddCellList.part.0.constprop.0+0xf4>
 8013730:	f10c 0c01 	add.w	ip, ip, #1
 8013734:	4563      	cmp	r3, ip
 8013736:	d8ea      	bhi.n	801370e <candidateAddCellList.part.0.constprop.0+0xf2>
 8013738:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 801373c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013740:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
 8013744:	f8a8 3001 	strh.w	r3, [r8, #1]
 8013748:	f7ff ff28 	bl	801359c <getRandomChannelOffset>
 801374c:	f10a 0a01 	add.w	sl, sl, #1
 8013750:	f1ba 0f05 	cmp.w	sl, #5
 8013754:	f8a8 0003 	strh.w	r0, [r8, #3]
 8013758:	f888 9000 	strb.w	r9, [r8]
 801375c:	d1ba      	bne.n	80136d4 <candidateAddCellList.part.0.constprop.0+0xb8>
 801375e:	2001      	movs	r0, #1
 8013760:	e7ae      	b.n	80136c0 <candidateAddCellList.part.0.constprop.0+0xa4>
 8013762:	f7fb fa4d 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8013766:	fa09 f30a 	lsl.w	r3, r9, sl
 801376a:	eb0a 088a 	add.w	r8, sl, sl, lsl #2
 801376e:	3b01      	subs	r3, #1
 8013770:	44b0      	add	r8, r6
 8013772:	4003      	ands	r3, r0
 8013774:	e7b9      	b.n	80136ea <candidateAddCellList.part.0.constprop.0+0xce>
 8013776:	460a      	mov	r2, r1
 8013778:	e7da      	b.n	8013730 <candidateAddCellList.part.0.constprop.0+0x114>

0801377a <857de3c8f5260b81d9c8f1309c962f70e86f8d45>:
 801377a:	b570      	push	{r4, r5, r6, lr}
 801377c:	b08e      	sub	sp, #56	; 0x38
 801377e:	4604      	mov	r4, r0
 8013780:	460d      	mov	r5, r1
 8013782:	f7ff fdd9 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 8013786:	b188      	cbz	r0, 80137ac <857de3c8f5260b81d9c8f1309c962f70e86f8d45+0x32>
 8013788:	ae07      	add	r6, sp, #28
 801378a:	4629      	mov	r1, r5
 801378c:	4630      	mov	r0, r6
 801378e:	f7ff ff45 	bl	801361c <candidateAddCellList.part.0.constprop.0>
 8013792:	b158      	cbz	r0, 80137ac <857de3c8f5260b81d9c8f1309c962f70e86f8d45+0x32>
 8013794:	2300      	movs	r3, #0
 8013796:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801379a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801379e:	2301      	movs	r3, #1
 80137a0:	9600      	str	r6, [sp, #0]
 80137a2:	461a      	mov	r2, r3
 80137a4:	4621      	mov	r1, r4
 80137a6:	4618      	mov	r0, r3
 80137a8:	f001 ff22 	bl	80155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 80137ac:	b00e      	add	sp, #56	; 0x38
 80137ae:	bd70      	pop	{r4, r5, r6, pc}

080137b0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	4bbb      	ldr	r3, [pc, #748]	; (8013aa4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f4>)
 80137b6:	b0c1      	sub	sp, #260	; 0x104
 80137b8:	681c      	ldr	r4, [r3, #0]
 80137ba:	f7f8 ff27 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80137be:	4605      	mov	r5, r0
 80137c0:	b9d8      	cbnz	r0, 80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 80137c2:	f000 fcf5 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80137c6:	4606      	mov	r6, r0
 80137c8:	a817      	add	r0, sp, #92	; 0x5c
 80137ca:	f7ff fd53 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 80137ce:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80137d0:	f89d 9060 	ldrb.w	r9, [sp, #96]	; 0x60
 80137d4:	42ae      	cmp	r6, r5
 80137d6:	d113      	bne.n	8013800 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x50>
 80137d8:	2210      	movs	r2, #16
 80137da:	2100      	movs	r1, #0
 80137dc:	f10d 0065 	add.w	r0, sp, #101	; 0x65
 80137e0:	2502      	movs	r5, #2
 80137e2:	f008 fbe1 	bl	801bfa8 <memset>
 80137e6:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
 80137ea:	f7ff fda5 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d16d      	bne.n	80138ce <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11e>
 80137f2:	f001 f833 	bl	801485c <6ddbbbac57a040e4656a8033d785bd5c35bb4db8>
 80137f6:	f001 f877 	bl	80148e8 <1baccc0636a0c0164401b195d5e58f3f8da51c03>
 80137fa:	b041      	add	sp, #260	; 0x104
 80137fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013800:	4629      	mov	r1, r5
 8013802:	a830      	add	r0, sp, #192	; 0xc0
 8013804:	f000 feec 	bl	80145e0 <SCHEDULE_GetCellInfo>
 8013808:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
 801380c:	f105 0801 	add.w	r8, r5, #1
 8013810:	2b05      	cmp	r3, #5
 8013812:	fa1f f888 	uxth.w	r8, r8
 8013816:	d158      	bne.n	80138ca <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8013818:	f8dd 20d7 	ldr.w	r2, [sp, #215]	; 0xd7
 801381c:	f89d 30db 	ldrb.w	r3, [sp, #219]	; 0xdb
 8013820:	1aba      	subs	r2, r7, r2
 8013822:	eb69 0303 	sbc.w	r3, r9, r3
 8013826:	f240 71d1 	movw	r1, #2001	; 0x7d1
 801382a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801382e:	428a      	cmp	r2, r1
 8013830:	f173 0300 	sbcs.w	r3, r3, #0
 8013834:	d349      	bcc.n	80138ca <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8013836:	46c3      	mov	fp, r8
 8013838:	f04f 0a01 	mov.w	sl, #1
 801383c:	e020      	b.n	8013880 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xd0>
 801383e:	4659      	mov	r1, fp
 8013840:	a838      	add	r0, sp, #224	; 0xe0
 8013842:	f000 fecd 	bl	80145e0 <SCHEDULE_GetCellInfo>
 8013846:	f89d 20f2 	ldrb.w	r2, [sp, #242]	; 0xf2
 801384a:	2a05      	cmp	r2, #5
 801384c:	d114      	bne.n	8013878 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xc8>
 801384e:	a938      	add	r1, sp, #224	; 0xe0
 8013850:	a830      	add	r0, sp, #192	; 0xc0
 8013852:	f7f9 fe95 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8013856:	b178      	cbz	r0, 8013878 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xc8>
 8013858:	f8dd 10f7 	ldr.w	r1, [sp, #247]	; 0xf7
 801385c:	f89d 20fb 	ldrb.w	r2, [sp, #251]	; 0xfb
 8013860:	1a79      	subs	r1, r7, r1
 8013862:	eb69 0202 	sbc.w	r2, r9, r2
 8013866:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 801386a:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 801386e:	f172 0200 	sbcs.w	r2, r2, #0
 8013872:	bf38      	it	cc
 8013874:	f04f 0a00 	movcc.w	sl, #0
 8013878:	f10b 0301 	add.w	r3, fp, #1
 801387c:	fa1f fb83 	uxth.w	fp, r3
 8013880:	455e      	cmp	r6, fp
 8013882:	d1dc      	bne.n	801383e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x8e>
 8013884:	f1ba 0f00 	cmp.w	sl, #0
 8013888:	d01f      	beq.n	80138ca <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 801388a:	a930      	add	r1, sp, #192	; 0xc0
 801388c:	4628      	mov	r0, r5
 801388e:	f000 fdfb 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8013892:	f7fc fea9 	bl	80105e8 <LOGGER_StartSection>
 8013896:	b1c0      	cbz	r0, 80138ca <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x11a>
 8013898:	2303      	movs	r3, #3
 801389a:	9338      	str	r3, [sp, #224]	; 0xe0
 801389c:	4b82      	ldr	r3, [pc, #520]	; (8013aa8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>)
 801389e:	9339      	str	r3, [sp, #228]	; 0xe4
 80138a0:	4619      	mov	r1, r3
 80138a2:	2003      	movs	r0, #3
 80138a4:	f7fc fea8 	bl	80105f8 <LOGGER_PrintHeader>
 80138a8:	aa30      	add	r2, sp, #192	; 0xc0
 80138aa:	2307      	movs	r3, #7
 80138ac:	a928      	add	r1, sp, #160	; 0xa0
 80138ae:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80138b2:	5458      	strb	r0, [r3, r1]
 80138b4:	3b01      	subs	r3, #1
 80138b6:	d2fa      	bcs.n	80138ae <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xfe>
 80138b8:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80138bc:	487b      	ldr	r0, [pc, #492]	; (8013aac <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2fc>)
 80138be:	f7fc fe81 	bl	80105c4 <LOGGER_Print>
 80138c2:	f7fc fe77 	bl	80105b4 <LOGGER_PrintNL>
 80138c6:	f7fc fe95 	bl	80105f4 <LOGGER_EndSection>
 80138ca:	4645      	mov	r5, r8
 80138cc:	e782      	b.n	80137d4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x24>
 80138ce:	f10d 0165 	add.w	r1, sp, #101	; 0x65
 80138d2:	f10d 0047 	add.w	r0, sp, #71	; 0x47
 80138d6:	f7f9 fac1 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80138da:	2800      	cmp	r0, #0
 80138dc:	d089      	beq.n	80137f2 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x42>
 80138de:	2210      	movs	r2, #16
 80138e0:	2100      	movs	r1, #0
 80138e2:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 80138e6:	f008 fb5f 	bl	801bfa8 <memset>
 80138ea:	a81e      	add	r0, sp, #120	; 0x78
 80138ec:	f504 7648 	add.w	r6, r4, #800	; 0x320
 80138f0:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
 80138f4:	f000 ffce 	bl	8014894 <0a6eef3dd890049c6feb9f053ae4732930866b35>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	f000 808a 	beq.w	8013a12 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x262>
 80138fe:	a919      	add	r1, sp, #100	; 0x64
 8013900:	a81e      	add	r0, sp, #120	; 0x78
 8013902:	f7f9 fe3d 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8013906:	4607      	mov	r7, r0
 8013908:	2800      	cmp	r0, #0
 801390a:	d165      	bne.n	80139d8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x228>
 801390c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8013aa8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>
 8013910:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
 8013914:	f04f 0a05 	mov.w	sl, #5
 8013918:	f8cd a0e0 	str.w	sl, [sp, #224]	; 0xe0
 801391c:	ad38      	add	r5, sp, #224	; 0xe0
 801391e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013922:	4a63      	ldr	r2, [pc, #396]	; (8013ab0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x300>)
 8013924:	f7fc fe86 	bl	8010634 <LOGGER_PrintLine>
 8013928:	a81e      	add	r0, sp, #120	; 0x78
 801392a:	f000 ff07 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 801392e:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8013932:	4681      	mov	r9, r0
 8013934:	b163      	cbz	r3, 8013950 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1a0>
 8013936:	f8a4 732c 	strh.w	r7, [r4, #812]	; 0x32c
 801393a:	4630      	mov	r0, r6
 801393c:	e9cd a838 	strd	sl, r8, [sp, #224]	; 0xe0
 8013940:	f7ff fde8 	bl	8013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8013944:	4a5b      	ldr	r2, [pc, #364]	; (8013ab4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 8013946:	4603      	mov	r3, r0
 8013948:	e895 0003 	ldmia.w	r5, {r0, r1}
 801394c:	f7fc fe72 	bl	8010634 <LOGGER_PrintLine>
 8013950:	f1b9 0f00 	cmp.w	r9, #0
 8013954:	d026      	beq.n	80139a4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1f4>
 8013956:	f894 732c 	ldrb.w	r7, [r4, #812]	; 0x32c
 801395a:	b9c7      	cbnz	r7, 801398e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1de>
 801395c:	2305      	movs	r3, #5
 801395e:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 8013962:	4a55      	ldr	r2, [pc, #340]	; (8013ab8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x308>)
 8013964:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013968:	f7fc fe64 	bl	8010634 <LOGGER_PrintLine>
 801396c:	2301      	movs	r3, #1
 801396e:	461a      	mov	r2, r3
 8013970:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8013974:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8013978:	9700      	str	r7, [sp, #0]
 801397a:	a91e      	add	r1, sp, #120	; 0x78
 801397c:	2007      	movs	r0, #7
 801397e:	f001 fe37 	bl	80155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8013982:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8013986:	3301      	adds	r3, #1
 8013988:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 801398c:	e735      	b.n	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 801398e:	2304      	movs	r3, #4
 8013990:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 8013994:	4a49      	ldr	r2, [pc, #292]	; (8013abc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x30c>)
 8013996:	e895 0003 	ldmia.w	r5, {r0, r1}
 801399a:	f7fc fe4b 	bl	8010634 <LOGGER_PrintLine>
 801399e:	a81e      	add	r0, sp, #120	; 0x78
 80139a0:	f000 ff22 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 80139a4:	a912      	add	r1, sp, #72	; 0x48
 80139a6:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 80139aa:	f7ff fdcb 	bl	8013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80139ae:	a91e      	add	r1, sp, #120	; 0x78
 80139b0:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 80139b4:	f000 fd68 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80139b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139bc:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 80139c0:	4630      	mov	r0, r6
 80139c2:	2305      	movs	r3, #5
 80139c4:	e9cd 3838 	strd	r3, r8, [sp, #224]	; 0xe0
 80139c8:	f7ff fda4 	bl	8013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>
 80139cc:	4a39      	ldr	r2, [pc, #228]	; (8013ab4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 80139ce:	4603      	mov	r3, r0
 80139d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80139d4:	f7fc fe2e 	bl	8010634 <LOGGER_PrintLine>
 80139d8:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d01b      	beq.n	8013a18 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x268>
 80139e0:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80139e4:	2b02      	cmp	r3, #2
 80139e6:	f040 80e1 	bne.w	8013bac <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3fc>
 80139ea:	a819      	add	r0, sp, #100	; 0x64
 80139ec:	f000 fea6 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	f040 80c5 	bne.w	8013b80 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3d0>
 80139f6:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 80139fa:	2b04      	cmp	r3, #4
 80139fc:	f200 80b4 	bhi.w	8013b68 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x3b8>
 8013a00:	3301      	adds	r3, #1
 8013a02:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 8013a06:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8013a0a:	a819      	add	r0, sp, #100	; 0x64
 8013a0c:	f7ff feb5 	bl	801377a <857de3c8f5260b81d9c8f1309c962f70e86f8d45>
 8013a10:	e6f3      	b.n	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013a12:	2301      	movs	r3, #1
 8013a14:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8013a18:	a912      	add	r1, sp, #72	; 0x48
 8013a1a:	f10d 0065 	add.w	r0, sp, #101	; 0x65
 8013a1e:	f7ff fd91 	bl	8013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 8013a22:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8013a26:	a830      	add	r0, sp, #192	; 0xc0
 8013a28:	4639      	mov	r1, r7
 8013a2a:	f000 fdd9 	bl	80145e0 <SCHEDULE_GetCellInfo>
 8013a2e:	f89d b0d1 	ldrb.w	fp, [sp, #209]	; 0xd1
 8013a32:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
 8013a36:	f89d 80d2 	ldrb.w	r8, [sp, #210]	; 0xd2
 8013a3a:	9306      	str	r3, [sp, #24]
 8013a3c:	f1bb 0f04 	cmp.w	fp, #4
 8013a40:	d102      	bne.n	8013a48 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x298>
 8013a42:	4638      	mov	r0, r7
 8013a44:	f7ff fcb0 	bl	80133a8 <7d76a56aa2790d7b3ba433ec1df82e5a4bdd5a6f>
 8013a48:	f1a8 0303 	sub.w	r3, r8, #3
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8013aa8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2f8>
 8013a52:	d916      	bls.n	8013a82 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2d2>
 8013a54:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8013a58:	d132      	bne.n	8013ac0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x310>
 8013a5a:	f89d 804a 	ldrb.w	r8, [sp, #74]	; 0x4a
 8013a5e:	ad13      	add	r5, sp, #76	; 0x4c
 8013a60:	4628      	mov	r0, r5
 8013a62:	f7ff fc07 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8013a66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013a6a:	ab19      	add	r3, sp, #100	; 0x64
 8013a6c:	2203      	movs	r2, #3
 8013a6e:	e9cd 8300 	strd	r8, r3, [sp]
 8013a72:	9002      	str	r0, [sp, #8]
 8013a74:	f88d 100c 	strb.w	r1, [sp, #12]
 8013a78:	2301      	movs	r3, #1
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	f000 fba7 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8013a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a86:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	2305      	movs	r3, #5
 8013a8e:	e9cd 3938 	strd	r3, r9, [sp, #224]	; 0xe0
 8013a92:	f7ff fd3f 	bl	8013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8013a96:	4649      	mov	r1, r9
 8013a98:	4603      	mov	r3, r0
 8013a9a:	4a06      	ldr	r2, [pc, #24]	; (8013ab4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x304>)
 8013a9c:	2005      	movs	r0, #5
 8013a9e:	f7fc fdc9 	bl	8010634 <LOGGER_PrintLine>
 8013aa2:	e79d      	b.n	80139e0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x230>
 8013aa4:	20000040 	.word	0x20000040
 8013aa8:	08020ab3 	.word	0x08020ab3
 8013aac:	08020ae4 	.word	0x08020ae4
 8013ab0:	08020b01 	.word	0x08020b01
 8013ab4:	08020b23 	.word	0x08020b23
 8013ab8:	08020b39 	.word	0x08020b39
 8013abc:	08020b72 	.word	0x08020b72
 8013ac0:	f1b8 0f05 	cmp.w	r8, #5
 8013ac4:	d1dd      	bne.n	8013a82 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2d2>
 8013ac6:	ad30      	add	r5, sp, #192	; 0xc0
 8013ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013aca:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
 8013ace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ad2:	682b      	ldr	r3, [r5, #0]
 8013ad4:	f88c 3000 	strb.w	r3, [ip]
 8013ad8:	f894 a32c 	ldrb.w	sl, [r4, #812]	; 0x32c
 8013adc:	ad38      	add	r5, sp, #224	; 0xe0
 8013ade:	f1ba 0f00 	cmp.w	sl, #0
 8013ae2:	d131      	bne.n	8013b48 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x398>
 8013ae4:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
 8013ae8:	4ab8      	ldr	r2, [pc, #736]	; (8013dcc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x61c>)
 8013aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013aee:	f7fc fda1 	bl	8010634 <LOGGER_PrintLine>
 8013af2:	af28      	add	r7, sp, #160	; 0xa0
 8013af4:	2214      	movs	r2, #20
 8013af6:	4651      	mov	r1, sl
 8013af8:	f10d 00e5 	add.w	r0, sp, #229	; 0xe5
 8013afc:	f008 fa54 	bl	801bfa8 <memset>
 8013b00:	2601      	movs	r6, #1
 8013b02:	9b06      	ldr	r3, [sp, #24]
 8013b04:	f89d 20d6 	ldrb.w	r2, [sp, #214]	; 0xd6
 8013b08:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8013b0c:	f88d 60e0 	strb.w	r6, [sp, #224]	; 0xe0
 8013b10:	4638      	mov	r0, r7
 8013b12:	f8ad 30e1 	strh.w	r3, [sp, #225]	; 0xe1
 8013b16:	f8ad 20e3 	strh.w	r2, [sp, #227]	; 0xe3
 8013b1a:	f7ff fd7f 	bl	801361c <candidateAddCellList.part.0.constprop.0>
 8013b1e:	b920      	cbnz	r0, 8013b2a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x37a>
 8013b20:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8013b24:	4433      	add	r3, r6
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	e72e      	b.n	8013988 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x1d8>
 8013b2a:	465b      	mov	r3, fp
 8013b2c:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8013b30:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8013b34:	9700      	str	r7, [sp, #0]
 8013b36:	4632      	mov	r2, r6
 8013b38:	a923      	add	r1, sp, #140	; 0x8c
 8013b3a:	2003      	movs	r0, #3
 8013b3c:	f001 fd58 	bl	80155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8013b40:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8013b44:	3301      	adds	r3, #1
 8013b46:	e7ee      	b.n	8013b26 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x376>
 8013b48:	2304      	movs	r3, #4
 8013b4a:	e9cd 3938 	strd	r3, r9, [sp, #224]	; 0xe0
 8013b4e:	4aa0      	ldr	r2, [pc, #640]	; (8013dd0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x620>)
 8013b50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013b54:	f7fc fd6e 	bl	8010634 <LOGGER_PrintLine>
 8013b58:	9806      	ldr	r0, [sp, #24]
 8013b5a:	a923      	add	r1, sp, #140	; 0x8c
 8013b5c:	f000 fc94 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8013b60:	ad15      	add	r5, sp, #84	; 0x54
 8013b62:	f89d 804a 	ldrb.w	r8, [sp, #74]	; 0x4a
 8013b66:	e77b      	b.n	8013a60 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x2b0>
 8013b68:	2303      	movs	r3, #3
 8013b6a:	9338      	str	r3, [sp, #224]	; 0xe0
 8013b6c:	4b99      	ldr	r3, [pc, #612]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013b6e:	4a9a      	ldr	r2, [pc, #616]	; (8013dd8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x628>)
 8013b70:	9339      	str	r3, [sp, #228]	; 0xe4
 8013b72:	4619      	mov	r1, r3
 8013b74:	2003      	movs	r0, #3
 8013b76:	f7fc fd5d 	bl	8010634 <LOGGER_PrintLine>
 8013b7a:	f005 ff89 	bl	8019a90 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>
 8013b7e:	e63c      	b.n	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013b84:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8013b8e:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
 8013b92:	2305      	movs	r3, #5
 8013b94:	9338      	str	r3, [sp, #224]	; 0xe0
 8013b96:	4630      	mov	r0, r6
 8013b98:	4b8e      	ldr	r3, [pc, #568]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013b9a:	9339      	str	r3, [sp, #228]	; 0xe4
 8013b9c:	f7ff fcba 	bl	8013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8013ba0:	498c      	ldr	r1, [pc, #560]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013ba2:	4a8e      	ldr	r2, [pc, #568]	; (8013ddc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x62c>)
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2005      	movs	r0, #5
 8013ba8:	f7fc fd44 	bl	8010634 <LOGGER_PrintLine>
 8013bac:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	d112      	bne.n	8013bda <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x42a>
 8013bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bb8:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8013bbc:	2305      	movs	r3, #5
 8013bbe:	9338      	str	r3, [sp, #224]	; 0xe0
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	4b84      	ldr	r3, [pc, #528]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013bc4:	9339      	str	r3, [sp, #228]	; 0xe4
 8013bc6:	f7ff fca5 	bl	8013514 <15dba1c7fc73543b1601dd226b614c09581a3c00>
 8013bca:	4982      	ldr	r1, [pc, #520]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013bcc:	4a83      	ldr	r2, [pc, #524]	; (8013ddc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x62c>)
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2005      	movs	r0, #5
 8013bd2:	f7fc fd2f 	bl	8010634 <LOGGER_PrintLine>
 8013bd6:	f005 fca5 	bl	8019524 <85bee7284ee25f7a29b50481cf48923ac2abd69d>
 8013bda:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8013bde:	2b04      	cmp	r3, #4
 8013be0:	f47f ae0b 	bne.w	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013be4:	a819      	add	r0, sp, #100	; 0x64
 8013be6:	f000 fda9 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	f000 80e8 	beq.w	8013dc0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x610>
 8013bf0:	f994 3323 	ldrsb.w	r3, [r4, #803]	; 0x323
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	ad38      	add	r5, sp, #224	; 0xe0
 8013bf8:	dd0e      	ble.n	8013c18 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x468>
 8013bfa:	2305      	movs	r3, #5
 8013bfc:	9338      	str	r3, [sp, #224]	; 0xe0
 8013bfe:	4b75      	ldr	r3, [pc, #468]	; (8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>)
 8013c00:	9339      	str	r3, [sp, #228]	; 0xe4
 8013c02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013c06:	4a76      	ldr	r2, [pc, #472]	; (8013de0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x630>)
 8013c08:	f7fc fd14 	bl	8010634 <LOGGER_PrintLine>
 8013c0c:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8013c10:	3b01      	subs	r3, #1
 8013c12:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8013c16:	e6f6      	b.n	8013a06 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x256>
 8013c18:	f000 809b 	beq.w	8013d52 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5a2>
 8013c1c:	a819      	add	r0, sp, #100	; 0x64
 8013c1e:	f000 fd8d 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8013c22:	2801      	cmp	r0, #1
 8013c24:	4606      	mov	r6, r0
 8013c26:	f240 8091 	bls.w	8013d4c <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x59c>
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	f000 fda8 	bl	8014780 <ee504f8deafedb03386eec1c989207132bd15110>
 8013c30:	3801      	subs	r0, #1
 8013c32:	ebb6 0f50 	cmp.w	r6, r0, lsr #1
 8013c36:	f240 8089 	bls.w	8013d4c <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x59c>
 8013c3a:	2305      	movs	r3, #5
 8013c3c:	f8df b194 	ldr.w	fp, [pc, #404]	; 8013dd4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x624>
 8013c40:	9338      	str	r3, [sp, #224]	; 0xe0
 8013c42:	f8cd b0e4 	str.w	fp, [sp, #228]	; 0xe4
 8013c46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013c4a:	4a66      	ldr	r2, [pc, #408]	; (8013de4 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x634>)
 8013c4c:	f7fc fcf2 	bl	8010634 <LOGGER_PrintLine>
 8013c50:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8013c54:	3301      	adds	r3, #1
 8013c56:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8013c5a:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
 8013c5e:	f7ff fb6b 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f43f adc9 	beq.w	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013c68:	a819      	add	r0, sp, #100	; 0x64
 8013c6a:	f000 fd67 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8013c6e:	2801      	cmp	r0, #1
 8013c70:	f67f adc3 	bls.w	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013c74:	af28      	add	r7, sp, #160	; 0xa0
 8013c76:	2219      	movs	r2, #25
 8013c78:	2100      	movs	r1, #0
 8013c7a:	4638      	mov	r0, r7
 8013c7c:	f008 f994 	bl	801bfa8 <memset>
 8013c80:	f000 fa96 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8013c84:	4680      	mov	r8, r0
 8013c86:	4620      	mov	r0, r4
 8013c88:	f7f9 f9b6 	bl	800cff8 <NEIGHBORS_GetRxSlotCandidate>
 8013c8c:	f04f 0900 	mov.w	r9, #0
 8013c90:	9006      	str	r0, [sp, #24]
 8013c92:	464e      	mov	r6, r9
 8013c94:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013c98:	fa1f f489 	uxth.w	r4, r9
 8013c9c:	4544      	cmp	r4, r8
 8013c9e:	d30f      	bcc.n	8013cc0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x510>
 8013ca0:	2e00      	cmp	r6, #0
 8013ca2:	f43f adaa 	beq.w	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013cac:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013cb0:	9300      	str	r3, [sp, #0]
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	a919      	add	r1, sp, #100	; 0x64
 8013cb8:	2002      	movs	r0, #2
 8013cba:	f001 fc99 	bl	80155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>
 8013cbe:	e59c      	b.n	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013cc0:	9b06      	ldr	r3, [sp, #24]
 8013cc2:	441c      	add	r4, r3
 8013cc4:	b2a4      	uxth	r4, r4
 8013cc6:	fbb4 f3f8 	udiv	r3, r4, r8
 8013cca:	fb08 4413 	mls	r4, r8, r3, r4
 8013cce:	b2a4      	uxth	r4, r4
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	a808      	add	r0, sp, #32
 8013cd4:	f000 fc84 	bl	80145e0 <SCHEDULE_GetCellInfo>
 8013cd8:	aa08      	add	r2, sp, #32
 8013cda:	462b      	mov	r3, r5
 8013cdc:	6810      	ldr	r0, [r2, #0]
 8013cde:	6851      	ldr	r1, [r2, #4]
 8013ce0:	469c      	mov	ip, r3
 8013ce2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013ce6:	3208      	adds	r2, #8
 8013ce8:	4552      	cmp	r2, sl
 8013cea:	4663      	mov	r3, ip
 8013cec:	d1f6      	bne.n	8013cdc <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x52c>
 8013cee:	f8da 0000 	ldr.w	r0, [sl]
 8013cf2:	f8cc 0000 	str.w	r0, [ip]
 8013cf6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8013cfa:	f8ac 2004 	strh.w	r2, [ip, #4]
 8013cfe:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
 8013d02:	2b05      	cmp	r3, #5
 8013d04:	d11f      	bne.n	8013d46 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x596>
 8013d06:	4629      	mov	r1, r5
 8013d08:	a819      	add	r0, sp, #100	; 0x64
 8013d0a:	9307      	str	r3, [sp, #28]
 8013d0c:	f7f9 fc38 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8013d10:	9b07      	ldr	r3, [sp, #28]
 8013d12:	b1c0      	cbz	r0, 8013d46 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x596>
 8013d14:	e9cd 3b23 	strd	r3, fp, [sp, #140]	; 0x8c
 8013d18:	4a33      	ldr	r2, [pc, #204]	; (8013de8 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x638>)
 8013d1a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8013d1c:	4623      	mov	r3, r4
 8013d1e:	4659      	mov	r1, fp
 8013d20:	f7fc fc88 	bl	8010634 <LOGGER_PrintLine>
 8013d24:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8013d28:	18fa      	adds	r2, r7, r3
 8013d2a:	f8bd 10f4 	ldrh.w	r1, [sp, #244]	; 0xf4
 8013d2e:	f8a2 1001 	strh.w	r1, [r2, #1]
 8013d32:	f89d 10f6 	ldrb.w	r1, [sp, #246]	; 0xf6
 8013d36:	f8a2 1003 	strh.w	r1, [r2, #3]
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	4416      	add	r6, r2
 8013d3e:	b2b6      	uxth	r6, r6
 8013d40:	2e04      	cmp	r6, #4
 8013d42:	54fa      	strb	r2, [r7, r3]
 8013d44:	d8af      	bhi.n	8013ca6 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4f6>
 8013d46:	f109 0901 	add.w	r9, r9, #1
 8013d4a:	e7a5      	b.n	8013c98 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4e8>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 8013d52:	a919      	add	r1, sp, #100	; 0x64
 8013d54:	4628      	mov	r0, r5
 8013d56:	f000 ffb3 	bl	8014cc0 <e1a4ca54296e83210dff3006a7ef95c89a4943bb>
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	f43f ad4d 	beq.w	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013d60:	ac28      	add	r4, sp, #160	; 0xa0
 8013d62:	2219      	movs	r2, #25
 8013d64:	2100      	movs	r1, #0
 8013d66:	4620      	mov	r0, r4
 8013d68:	f008 f91e 	bl	801bfa8 <memset>
 8013d6c:	2700      	movs	r7, #0
 8013d6e:	eb07 0687 	add.w	r6, r7, r7, lsl #2
 8013d72:	5dab      	ldrb	r3, [r5, r6]
 8013d74:	b19b      	cbz	r3, 8013d9e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5ee>
 8013d76:	2301      	movs	r3, #1
 8013d78:	55a3      	strb	r3, [r4, r6]
 8013d7a:	f7ff fc0f 	bl	801359c <getRandomChannelOffset>
 8013d7e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8013d82:	eb0d 0603 	add.w	r6, sp, r3
 8013d86:	f1a6 0820 	sub.w	r8, r6, #32
 8013d8a:	f826 0c5d 	strh.w	r0, [r6, #-93]
 8013d8e:	f8b8 2003 	ldrh.w	r2, [r8, #3]
 8013d92:	4282      	cmp	r2, r0
 8013d94:	d011      	beq.n	8013dba <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x60a>
 8013d96:	f8b8 2001 	ldrh.w	r2, [r8, #1]
 8013d9a:	f826 2c5f 	strh.w	r2, [r6, #-95]
 8013d9e:	3701      	adds	r7, #1
 8013da0:	2f05      	cmp	r7, #5
 8013da2:	d1e4      	bne.n	8013d6e <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5be>
 8013da4:	2300      	movs	r3, #0
 8013da6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013daa:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8013dae:	2301      	movs	r3, #1
 8013db0:	9400      	str	r4, [sp, #0]
 8013db2:	461a      	mov	r2, r3
 8013db4:	a919      	add	r1, sp, #100	; 0x64
 8013db6:	2003      	movs	r0, #3
 8013db8:	e77f      	b.n	8013cba <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x50a>
 8013dba:	f7ff fbef 	bl	801359c <getRandomChannelOffset>
 8013dbe:	e7e4      	b.n	8013d8a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x5da>
 8013dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dc4:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
 8013dc8:	e517      	b.n	80137fa <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4a>
 8013dca:	bf00      	nop
 8013dcc:	08020bca 	.word	0x08020bca
 8013dd0:	08020bfd 	.word	0x08020bfd
 8013dd4:	08020ab3 	.word	0x08020ab3
 8013dd8:	08020c23 	.word	0x08020c23
 8013ddc:	08020b23 	.word	0x08020b23
 8013de0:	08020c40 	.word	0x08020c40
 8013de4:	08020c65 	.word	0x08020c65
 8013de8:	08020c8b 	.word	0x08020c8b

08013dec <b72e07a39f6da27974c9147939138222c897d050>:
 8013dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dee:	6881      	ldr	r1, [r0, #8]
 8013df0:	7905      	ldrb	r5, [r0, #4]
 8013df2:	4604      	mov	r4, r0
 8013df4:	4608      	mov	r0, r1
 8013df6:	f7fa ff49 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8013dfa:	4b06      	ldr	r3, [pc, #24]	; (8013e14 <b72e07a39f6da27974c9147939138222c897d050+0x28>)
 8013dfc:	9400      	str	r4, [sp, #0]
 8013dfe:	4602      	mov	r2, r0
 8013e00:	2101      	movs	r1, #1
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7fa fe8a 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8013e08:	b003      	add	sp, #12
 8013e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e0e:	f7ff bccf 	b.w	80137b0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>
 8013e12:	bf00      	nop
 8013e14:	08013ded 	.word	0x08013ded

08013e18 <d3d7042d854d8905136f03fa99a8893947aafdc7>:
 8013e18:	b510      	push	{r4, lr}
 8013e1a:	4b07      	ldr	r3, [pc, #28]	; (8013e38 <d3d7042d854d8905136f03fa99a8893947aafdc7+0x20>)
 8013e1c:	2001      	movs	r0, #1
 8013e1e:	681c      	ldr	r4, [r3, #0]
 8013e20:	f7fa fd6c 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8013e24:	4b05      	ldr	r3, [pc, #20]	; (8013e3c <d3d7042d854d8905136f03fa99a8893947aafdc7+0x24>)
 8013e26:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	f884 0324 	strb.w	r0, [r4, #804]	; 0x324
 8013e30:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 8013e34:	bd10      	pop	{r4, pc}
 8013e36:	bf00      	nop
 8013e38:	20000040 	.word	0x20000040
 8013e3c:	00e4e1c0 	.word	0x00e4e1c0

08013e40 <530f39758cfcff95a518bf89df4776da9faf92b4>:
 8013e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e42:	4b0d      	ldr	r3, [pc, #52]	; (8013e78 <530f39758cfcff95a518bf89df4776da9faf92b4+0x38>)
 8013e44:	4a0d      	ldr	r2, [pc, #52]	; (8013e7c <530f39758cfcff95a518bf89df4776da9faf92b4+0x3c>)
 8013e46:	681c      	ldr	r4, [r3, #0]
 8013e48:	490d      	ldr	r1, [pc, #52]	; (8013e80 <530f39758cfcff95a518bf89df4776da9faf92b4+0x40>)
 8013e4a:	4b0e      	ldr	r3, [pc, #56]	; (8013e84 <530f39758cfcff95a518bf89df4776da9faf92b4+0x44>)
 8013e4c:	480e      	ldr	r0, [pc, #56]	; (8013e88 <530f39758cfcff95a518bf89df4776da9faf92b4+0x48>)
 8013e4e:	f504 7548 	add.w	r5, r4, #800	; 0x320
 8013e52:	9500      	str	r5, [sp, #0]
 8013e54:	f001 fb98 	bl	8015588 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>
 8013e58:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
 8013e5c:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
 8013e60:	4608      	mov	r0, r1
 8013e62:	f7fa ff13 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8013e66:	4b09      	ldr	r3, [pc, #36]	; (8013e8c <530f39758cfcff95a518bf89df4776da9faf92b4+0x4c>)
 8013e68:	9500      	str	r5, [sp, #0]
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	2101      	movs	r1, #1
 8013e6e:	4630      	mov	r0, r6
 8013e70:	f7fa fe54 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8013e74:	b002      	add	sp, #8
 8013e76:	bd70      	pop	{r4, r5, r6, pc}
 8013e78:	20000040 	.word	0x20000040
 8013e7c:	08013541 	.word	0x08013541
 8013e80:	0801353d 	.word	0x0801353d
 8013e84:	080135b9 	.word	0x080135b9
 8013e88:	08013539 	.word	0x08013539
 8013e8c:	08013ded 	.word	0x08013ded

08013e90 <53bc4933f2d7947a48dac4db096e7506c8e8667c>:
 8013e90:	b507      	push	{r0, r1, r2, lr}
 8013e92:	4b08      	ldr	r3, [pc, #32]	; (8013eb4 <53bc4933f2d7947a48dac4db096e7506c8e8667c+0x24>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	f893 0324 	ldrb.w	r0, [r3, #804]	; 0x324
 8013e9a:	f7fa fe51 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f001 fb6e 	bl	8015588 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>
 8013eac:	b003      	add	sp, #12
 8013eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8013eb2:	bf00      	nop
 8013eb4:	20000040 	.word	0x20000040

08013eb8 <a4805eff5c63b0d94a41387b77d7c2398243d1cd>:
 8013eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ebc:	b08f      	sub	sp, #60	; 0x3c
 8013ebe:	2210      	movs	r2, #16
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8013ec8:	f008 f86e 	bl	801bfa8 <memset>
 8013ecc:	2306      	movs	r3, #6
 8013ece:	2002      	movs	r0, #2
 8013ed0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013ed4:	f7f8 fba8 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8013ed8:	a904      	add	r1, sp, #16
 8013eda:	3001      	adds	r0, #1
 8013edc:	f7ff fb32 	bl	8013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 8013ee0:	4f1a      	ldr	r7, [pc, #104]	; (8013f4c <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x94>)
 8013ee2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8013ee6:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8013eea:	ac07      	add	r4, sp, #28
 8013eec:	b306      	cbz	r6, 8013f30 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x78>
 8013eee:	ae05      	add	r6, sp, #20
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f89d 9012 	ldrb.w	r9, [sp, #18]
 8013ef6:	f7ff f9bd 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8013efa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013efe:	2300      	movs	r3, #0
 8013f00:	9002      	str	r0, [sp, #8]
 8013f02:	f88d 100c 	strb.w	r1, [sp, #12]
 8013f06:	2202      	movs	r2, #2
 8013f08:	e9cd 9800 	strd	r9, r8, [sp]
 8013f0c:	2103      	movs	r1, #3
 8013f0e:	4628      	mov	r0, r5
 8013f10:	f000 f95e 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8013f14:	2305      	movs	r3, #5
 8013f16:	4a0e      	ldr	r2, [pc, #56]	; (8013f50 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x98>)
 8013f18:	f8cd 9000 	str.w	r9, [sp]
 8013f1c:	e9cd 3707 	strd	r3, r7, [sp, #28]
 8013f20:	462b      	mov	r3, r5
 8013f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f26:	f7fc fb85 	bl	8010634 <LOGGER_PrintLine>
 8013f2a:	b00f      	add	sp, #60	; 0x3c
 8013f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f30:	4641      	mov	r1, r8
 8013f32:	4628      	mov	r0, r5
 8013f34:	f000 faa8 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8013f38:	2305      	movs	r3, #5
 8013f3a:	e9cd 3707 	strd	r3, r7, [sp, #28]
 8013f3e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	4a03      	ldr	r2, [pc, #12]	; (8013f54 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x9c>)
 8013f46:	462b      	mov	r3, r5
 8013f48:	e7eb      	b.n	8013f22 <a4805eff5c63b0d94a41387b77d7c2398243d1cd+0x6a>
 8013f4a:	bf00      	nop
 8013f4c:	08020ab3 	.word	0x08020ab3
 8013f50:	08020ca0 	.word	0x08020ca0
 8013f54:	08020cc5 	.word	0x08020cc5

08013f58 <a8d9689c957cda0372b2d720a687974af26c85d2>:
 8013f58:	b530      	push	{r4, r5, lr}
 8013f5a:	4b0f      	ldr	r3, [pc, #60]	; (8013f98 <a8d9689c957cda0372b2d720a687974af26c85d2+0x40>)
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	b150      	cbz	r0, 8013f76 <a8d9689c957cda0372b2d720a687974af26c85d2+0x1e>
 8013f60:	f8b2 4342 	ldrh.w	r4, [r2, #834]	; 0x342
 8013f64:	b1a4      	cbz	r4, 8013f90 <a8d9689c957cda0372b2d720a687974af26c85d2+0x38>
 8013f66:	f8b2 3340 	ldrh.w	r3, [r2, #832]	; 0x340
 8013f6a:	f242 7510 	movw	r5, #10000	; 0x2710
 8013f6e:	436b      	muls	r3, r5
 8013f70:	fbb3 f3f4 	udiv	r3, r3, r4
 8013f74:	8003      	strh	r3, [r0, #0]
 8013f76:	b151      	cbz	r1, 8013f8e <a8d9689c957cda0372b2d720a687974af26c85d2+0x36>
 8013f78:	f8b2 0346 	ldrh.w	r0, [r2, #838]	; 0x346
 8013f7c:	b150      	cbz	r0, 8013f94 <a8d9689c957cda0372b2d720a687974af26c85d2+0x3c>
 8013f7e:	f8b2 3344 	ldrh.w	r3, [r2, #836]	; 0x344
 8013f82:	f242 7210 	movw	r2, #10000	; 0x2710
 8013f86:	4353      	muls	r3, r2
 8013f88:	fbb3 f3f0 	udiv	r3, r3, r0
 8013f8c:	800b      	strh	r3, [r1, #0]
 8013f8e:	bd30      	pop	{r4, r5, pc}
 8013f90:	8004      	strh	r4, [r0, #0]
 8013f92:	e7f0      	b.n	8013f76 <a8d9689c957cda0372b2d720a687974af26c85d2+0x1e>
 8013f94:	8008      	strh	r0, [r1, #0]
 8013f96:	e7fa      	b.n	8013f8e <a8d9689c957cda0372b2d720a687974af26c85d2+0x36>
 8013f98:	20000040 	.word	0x20000040

08013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	4b2e      	ldr	r3, [pc, #184]	; (8014058 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0xbc>)
 8013fa0:	460d      	mov	r5, r1
 8013fa2:	681c      	ldr	r4, [r3, #0]
 8013fa4:	b3d8      	cbz	r0, 801401e <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x82>
 8013fa6:	3001      	adds	r0, #1
 8013fa8:	f7f8 ffa0 	bl	800ceec <fdce4034d9451f08e0a61574976ed9ce452b5ba4>
 8013fac:	b390      	cbz	r0, 8014014 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8013fae:	f8b4 2342 	ldrh.w	r2, [r4, #834]	; 0x342
 8013fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d108      	bne.n	8013fcc <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x30>
 8013fba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013fbe:	f8a4 3342 	strh.w	r3, [r4, #834]	; 0x342
 8013fc2:	f8b4 3340 	ldrh.w	r3, [r4, #832]	; 0x340
 8013fc6:	085b      	lsrs	r3, r3, #1
 8013fc8:	f8a4 3340 	strh.w	r3, [r4, #832]	; 0x340
 8013fcc:	f8b4 3342 	ldrh.w	r3, [r4, #834]	; 0x342
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	f8a4 3342 	strh.w	r3, [r4, #834]	; 0x342
 8013fd6:	b14d      	cbz	r5, 8013fec <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x50>
 8013fd8:	f8b4 3340 	ldrh.w	r3, [r4, #832]	; 0x340
 8013fdc:	3301      	adds	r3, #1
 8013fde:	f8a4 3340 	strh.w	r3, [r4, #832]	; 0x340
 8013fe2:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
 8013fec:	f894 3321 	ldrb.w	r3, [r4, #801]	; 0x321
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	2b10      	cmp	r3, #16
 8013ff6:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8013ffa:	d10b      	bne.n	8014014 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8013ffc:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8014000:	2b0c      	cmp	r3, #12
 8014002:	d908      	bls.n	8014016 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x7a>
 8014004:	2301      	movs	r3, #1
 8014006:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
 801400a:	2300      	movs	r3, #0
 801400c:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
 8014010:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
 8014014:	bd38      	pop	{r3, r4, r5, pc}
 8014016:	2b01      	cmp	r3, #1
 8014018:	d8f7      	bhi.n	801400a <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x6e>
 801401a:	23ff      	movs	r3, #255	; 0xff
 801401c:	e7f3      	b.n	8014006 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x6a>
 801401e:	f8b4 2346 	ldrh.w	r2, [r4, #838]	; 0x346
 8014022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014026:	429a      	cmp	r2, r3
 8014028:	d108      	bne.n	801403c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0xa0>
 801402a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801402e:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
 8014032:	f8b4 3344 	ldrh.w	r3, [r4, #836]	; 0x344
 8014036:	085b      	lsrs	r3, r3, #1
 8014038:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
 801403c:	f8b4 3346 	ldrh.w	r3, [r4, #838]	; 0x346
 8014040:	3301      	adds	r3, #1
 8014042:	f8a4 3346 	strh.w	r3, [r4, #838]	; 0x346
 8014046:	2d00      	cmp	r5, #0
 8014048:	d0e4      	beq.n	8014014 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 801404a:	f8b4 3344 	ldrh.w	r3, [r4, #836]	; 0x344
 801404e:	3301      	adds	r3, #1
 8014050:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
 8014054:	e7de      	b.n	8014014 <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed+0x78>
 8014056:	bf00      	nop
 8014058:	20000040 	.word	0x20000040

0801405c <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>:
 801405c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801405e:	4b11      	ldr	r3, [pc, #68]	; (80140a4 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x48>)
 8014060:	681c      	ldr	r4, [r3, #0]
 8014062:	4615      	mov	r5, r2
 8014064:	f504 7648 	add.w	r6, r4, #800	; 0x320
 8014068:	b928      	cbnz	r0, 8014076 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x1a>
 801406a:	b921      	cbnz	r1, 8014076 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x1a>
 801406c:	f000 fc3c 	bl	80148e8 <1baccc0636a0c0164401b195d5e58f3f8da51c03>
 8014070:	4628      	mov	r0, r5
 8014072:	f000 fbb9 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8014076:	f894 0324 	ldrb.w	r0, [r4, #804]	; 0x324
 801407a:	f7fa fd61 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801407e:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
 8014082:	f894 5324 	ldrb.w	r5, [r4, #804]	; 0x324
 8014086:	4608      	mov	r0, r1
 8014088:	f7fa fe00 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 801408c:	4b06      	ldr	r3, [pc, #24]	; (80140a8 <4d4d07b4e30904d5f2361bdbdd317c9b751af65f+0x4c>)
 801408e:	9600      	str	r6, [sp, #0]
 8014090:	4602      	mov	r2, r0
 8014092:	2101      	movs	r1, #1
 8014094:	4628      	mov	r0, r5
 8014096:	f7fa fd41 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 801409a:	b002      	add	sp, #8
 801409c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140a0:	f7ff bb86 	b.w	80137b0 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>
 80140a4:	20000040 	.word	0x20000040
 80140a8:	08013ded 	.word	0x08013ded

080140ac <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>:
 80140ac:	b513      	push	{r0, r1, r4, lr}
 80140ae:	4604      	mov	r4, r0
 80140b0:	2002      	movs	r0, #2
 80140b2:	f7f8 fab9 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80140b6:	4669      	mov	r1, sp
 80140b8:	3001      	adds	r0, #1
 80140ba:	f7ff fa43 	bl	8013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80140be:	4620      	mov	r0, r4
 80140c0:	a901      	add	r1, sp, #4
 80140c2:	f7ff fa3f 	bl	8013544 <73cbc6b3efc5bccd854bcb41733d9be650914b6e>
 80140c6:	f8bd 0000 	ldrh.w	r0, [sp]
 80140ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80140ce:	1ac3      	subs	r3, r0, r3
 80140d0:	4258      	negs	r0, r3
 80140d2:	4158      	adcs	r0, r3
 80140d4:	b002      	add	sp, #8
 80140d6:	bd10      	pop	{r4, pc}

080140d8 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>:
 80140d8:	b508      	push	{r3, lr}
 80140da:	2228      	movs	r2, #40	; 0x28
 80140dc:	2100      	movs	r1, #0
 80140de:	f007 ff63 	bl	801bfa8 <memset>
 80140e2:	bd08      	pop	{r3, pc}

080140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 80140e4:	3901      	subs	r1, #1
 80140e6:	f100 0308 	add.w	r3, r0, #8
 80140ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80140ee:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80140f2:	4283      	cmp	r3, r0
 80140f4:	d1f9      	bne.n	80140ea <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 80140f6:	4770      	bx	lr

080140f8 <eea52b91d7a1bb91cb2c756cbb75125f1315d891>:
 80140f8:	b538      	push	{r3, r4, r5, lr}
 80140fa:	4b0b      	ldr	r3, [pc, #44]	; (8014128 <eea52b91d7a1bb91cb2c756cbb75125f1315d891+0x30>)
 80140fc:	681d      	ldr	r5, [r3, #0]
 80140fe:	f505 7453 	add.w	r4, r5, #844	; 0x34c
 8014102:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014106:	2100      	movs	r1, #0
 8014108:	4620      	mov	r0, r4
 801410a:	f007 ff4d 	bl	801bfa8 <memset>
 801410e:	230d      	movs	r3, #13
 8014110:	f8a5 3558 	strh.w	r3, [r5, #1368]	; 0x558
 8014114:	f205 5554 	addw	r5, r5, #1364	; 0x554
 8014118:	4620      	mov	r0, r4
 801411a:	3428      	adds	r4, #40	; 0x28
 801411c:	f7ff ffdc 	bl	80140d8 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 8014120:	42ac      	cmp	r4, r5
 8014122:	d1f9      	bne.n	8014118 <eea52b91d7a1bb91cb2c756cbb75125f1315d891+0x20>
 8014124:	bd38      	pop	{r3, r4, r5, pc}
 8014126:	bf00      	nop
 8014128:	20000040 	.word	0x20000040

0801412c <6759635076cb4c933592248ebd293b63832a7e9b>:
 801412c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801412e:	ab02      	add	r3, sp, #8
 8014130:	e903 0003 	stmdb	r3, {r0, r1}
 8014134:	4b10      	ldr	r3, [pc, #64]	; (8014178 <6759635076cb4c933592248ebd293b63832a7e9b+0x4c>)
 8014136:	f8bd 5000 	ldrh.w	r5, [sp]
 801413a:	681c      	ldr	r4, [r3, #0]
 801413c:	f7f1 fea2 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014140:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014144:	b193      	cbz	r3, 801416c <6759635076cb4c933592248ebd293b63832a7e9b+0x40>
 8014146:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801414a:	f8a4 355c 	strh.w	r3, [r4, #1372]	; 0x55c
 801414e:	2d0d      	cmp	r5, #13
 8014150:	f04f 0301 	mov.w	r3, #1
 8014154:	f8a4 555a 	strh.w	r5, [r4, #1370]	; 0x55a
 8014158:	bf98      	it	ls
 801415a:	f8a4 5558 	strhls.w	r5, [r4, #1368]	; 0x558
 801415e:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e
 8014162:	b003      	add	sp, #12
 8014164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014168:	f7f1 beac 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801416c:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e
 8014170:	230d      	movs	r3, #13
 8014172:	f8a4 3558 	strh.w	r3, [r4, #1368]	; 0x558
 8014176:	e7f4      	b.n	8014162 <6759635076cb4c933592248ebd293b63832a7e9b+0x36>
 8014178:	20000040 	.word	0x20000040

0801417c <362182124631b23da2866810d52fbd55ab277bcc>:
 801417c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801417e:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <362182124631b23da2866810d52fbd55ab277bcc+0x30>)
 8014180:	681d      	ldr	r5, [r3, #0]
 8014182:	4604      	mov	r4, r0
 8014184:	f7f1 fe7e 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014188:	f8d5 055a 	ldr.w	r0, [r5, #1370]	; 0x55a
 801418c:	f8b5 355e 	ldrh.w	r3, [r5, #1374]	; 0x55e
 8014190:	9000      	str	r0, [sp, #0]
 8014192:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014196:	f7f1 fe95 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801419a:	9800      	ldr	r0, [sp, #0]
 801419c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80141a0:	6020      	str	r0, [r4, #0]
 80141a2:	4620      	mov	r0, r4
 80141a4:	80a3      	strh	r3, [r4, #4]
 80141a6:	b003      	add	sp, #12
 80141a8:	bd30      	pop	{r4, r5, pc}
 80141aa:	bf00      	nop
 80141ac:	20000040 	.word	0x20000040

080141b0 <8342496502f723d085ab3cae139cfe28db3db880>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4b06      	ldr	r3, [pc, #24]	; (80141cc <8342496502f723d085ab3cae139cfe28db3db880+0x1c>)
 80141b4:	681d      	ldr	r5, [r3, #0]
 80141b6:	f7f1 fe65 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80141ba:	f895 455e 	ldrb.w	r4, [r5, #1374]	; 0x55e
 80141be:	b10c      	cbz	r4, 80141c4 <8342496502f723d085ab3cae139cfe28db3db880+0x14>
 80141c0:	f8b5 455a 	ldrh.w	r4, [r5, #1370]	; 0x55a
 80141c4:	f7f1 fe7e 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80141c8:	4620      	mov	r0, r4
 80141ca:	bd38      	pop	{r3, r4, r5, pc}
 80141cc:	20000040 	.word	0x20000040

080141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>:
 80141d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d4:	469a      	mov	sl, r3
 80141d6:	b089      	sub	sp, #36	; 0x24
 80141d8:	4b9e      	ldr	r3, [pc, #632]	; (8014454 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x284>)
 80141da:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80141de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80141e0:	f8d3 b000 	ldr.w	fp, [r3]
 80141e4:	4607      	mov	r7, r0
 80141e6:	4688      	mov	r8, r1
 80141e8:	4616      	mov	r6, r2
 80141ea:	f7fc f9fd 	bl	80105e8 <LOGGER_StartSection>
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d030      	beq.n	8014254 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x84>
 80141f2:	2305      	movs	r3, #5
 80141f4:	9306      	str	r3, [sp, #24]
 80141f6:	4b98      	ldr	r3, [pc, #608]	; (8014458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 80141f8:	9307      	str	r3, [sp, #28]
 80141fa:	ab08      	add	r3, sp, #32
 80141fc:	e913 0003 	ldmdb	r3, {r0, r1}
 8014200:	f7fc f9fa 	bl	80105f8 <LOGGER_PrintHeader>
 8014204:	a804      	add	r0, sp, #16
 8014206:	1c69      	adds	r1, r5, #1
 8014208:	f7ff ff6c 	bl	80140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 801420c:	4893      	ldr	r0, [pc, #588]	; (801445c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x28c>)
 801420e:	f7fc f9d9 	bl	80105c4 <LOGGER_Print>
 8014212:	f1ba 0f00 	cmp.w	sl, #0
 8014216:	d03c      	beq.n	8014292 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xc2>
 8014218:	4891      	ldr	r0, [pc, #580]	; (8014460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 801421a:	f7fc f9d3 	bl	80105c4 <LOGGER_Print>
 801421e:	f1b8 0f04 	cmp.w	r8, #4
 8014222:	bf96      	itet	ls
 8014224:	4b8f      	ldrls	r3, [pc, #572]	; (8014464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 8014226:	4990      	ldrhi	r1, [pc, #576]	; (8014468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 8014228:	f853 1028 	ldrls.w	r1, [r3, r8, lsl #2]
 801422c:	488f      	ldr	r0, [pc, #572]	; (801446c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 801422e:	f8cd 9000 	str.w	r9, [sp]
 8014232:	2e05      	cmp	r6, #5
 8014234:	bf96      	itet	ls
 8014236:	4b8e      	ldrls	r3, [pc, #568]	; (8014470 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 8014238:	4a8e      	ldrhi	r2, [pc, #568]	; (8014474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 801423a:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
 801423e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014242:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014246:	463b      	mov	r3, r7
 8014248:	f7fc f9bc 	bl	80105c4 <LOGGER_Print>
 801424c:	f7fc f9b2 	bl	80105b4 <LOGGER_PrintNL>
 8014250:	f7fc f9d0 	bl	80105f4 <LOGGER_EndSection>
 8014254:	f7f1 fe16 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014258:	f8bb 3558 	ldrh.w	r3, [fp, #1368]	; 0x558
 801425c:	2228      	movs	r2, #40	; 0x28
 801425e:	fb02 b303 	mla	r3, r2, r3, fp
 8014262:	f50b 7453 	add.w	r4, fp, #844	; 0x34c
 8014266:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801426a:	78e2      	ldrb	r2, [r4, #3]
 801426c:	b1aa      	cbz	r2, 801429a <d34d9cc57da987921722d6f0e44d498b73ec396e+0xca>
 801426e:	429c      	cmp	r4, r3
 8014270:	d311      	bcc.n	8014296 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xc6>
 8014272:	f7f1 fe27 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014276:	2303      	movs	r3, #3
 8014278:	9306      	str	r3, [sp, #24]
 801427a:	4b77      	ldr	r3, [pc, #476]	; (8014458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 801427c:	9307      	str	r3, [sp, #28]
 801427e:	ab08      	add	r3, sp, #32
 8014280:	e913 0003 	ldmdb	r3, {r0, r1}
 8014284:	4a7c      	ldr	r2, [pc, #496]	; (8014478 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a8>)
 8014286:	f7fc f9d5 	bl	8010634 <LOGGER_PrintLine>
 801428a:	2000      	movs	r0, #0
 801428c:	b009      	add	sp, #36	; 0x24
 801428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014292:	487a      	ldr	r0, [pc, #488]	; (801447c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 8014294:	e7c1      	b.n	801421a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x4a>
 8014296:	3428      	adds	r4, #40	; 0x28
 8014298:	e7e7      	b.n	801426a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x9a>
 801429a:	429c      	cmp	r4, r3
 801429c:	d2e9      	bcs.n	8014272 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xa2>
 801429e:	4620      	mov	r0, r4
 80142a0:	f7ff ff1a 	bl	80140d8 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 80142a4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80142a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80142aa:	61e2      	str	r2, [r4, #28]
 80142ac:	f884 3020 	strb.w	r3, [r4, #32]
 80142b0:	8027      	strh	r7, [r4, #0]
 80142b2:	f884 8003 	strb.w	r8, [r4, #3]
 80142b6:	7126      	strb	r6, [r4, #4]
 80142b8:	f884 a005 	strb.w	sl, [r4, #5]
 80142bc:	f884 9002 	strb.w	r9, [r4, #2]
 80142c0:	462b      	mov	r3, r5
 80142c2:	1de2      	adds	r2, r4, #7
 80142c4:	f105 0110 	add.w	r1, r5, #16
 80142c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80142cc:	f842 0b04 	str.w	r0, [r2], #4
 80142d0:	428b      	cmp	r3, r1
 80142d2:	d1f9      	bne.n	80142c8 <d34d9cc57da987921722d6f0e44d498b73ec396e+0xf8>
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	7013      	strb	r3, [r2, #0]
 80142d8:	f8db 9554 	ldr.w	r9, [fp, #1364]	; 0x554
 80142dc:	f1b9 0f00 	cmp.w	r9, #0
 80142e0:	d116      	bne.n	8014310 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 80142e2:	6264      	str	r4, [r4, #36]	; 0x24
 80142e4:	f8cb 4554 	str.w	r4, [fp, #1364]	; 0x554
 80142e8:	2e05      	cmp	r6, #5
 80142ea:	d10d      	bne.n	8014308 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x138>
 80142ec:	f1b8 0f02 	cmp.w	r8, #2
 80142f0:	d10a      	bne.n	8014308 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x138>
 80142f2:	4628      	mov	r0, r5
 80142f4:	a906      	add	r1, sp, #24
 80142f6:	f800 8b01 	strb.w	r8, [r0], #1
 80142fa:	f7f8 ffb9 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 80142fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014302:	2101      	movs	r1, #1
 8014304:	f7f8 ffee 	bl	800d2e4 <ca04a83f27bd1933b342c8619a464a402518176b>
 8014308:	f7f1 fddc 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801430c:	2001      	movs	r0, #1
 801430e:	e7bd      	b.n	801428c <d34d9cc57da987921722d6f0e44d498b73ec396e+0xbc>
 8014310:	46cb      	mov	fp, r9
 8014312:	f8d9 9024 	ldr.w	r9, [r9, #36]	; 0x24
 8014316:	f8bb 3000 	ldrh.w	r3, [fp]
 801431a:	f8b9 2000 	ldrh.w	r2, [r9]
 801431e:	42bb      	cmp	r3, r7
 8014320:	d208      	bcs.n	8014334 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x164>
 8014322:	4297      	cmp	r7, r2
 8014324:	d301      	bcc.n	801432a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 8014326:	4293      	cmp	r3, r2
 8014328:	d3f2      	bcc.n	8014310 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 801432a:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
 801432e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8014332:	e7d9      	b.n	80142e8 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x118>
 8014334:	4297      	cmp	r7, r2
 8014336:	d201      	bcs.n	801433c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x16c>
 8014338:	4293      	cmp	r3, r2
 801433a:	d2f6      	bcs.n	801432a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 801433c:	42bb      	cmp	r3, r7
 801433e:	d1e7      	bne.n	8014310 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x140>
 8014340:	2e02      	cmp	r6, #2
 8014342:	d140      	bne.n	80143c6 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x1f6>
 8014344:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8014348:	2b03      	cmp	r3, #3
 801434a:	d144      	bne.n	80143d6 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x206>
 801434c:	2301      	movs	r3, #1
 801434e:	71a3      	strb	r3, [r4, #6]
 8014350:	f88b 3006 	strb.w	r3, [fp, #6]
 8014354:	f7fc f948 	bl	80105e8 <LOGGER_StartSection>
 8014358:	2800      	cmp	r0, #0
 801435a:	d0e6      	beq.n	801432a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 801435c:	2305      	movs	r3, #5
 801435e:	9306      	str	r3, [sp, #24]
 8014360:	4b3d      	ldr	r3, [pc, #244]	; (8014458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 8014362:	9307      	str	r3, [sp, #28]
 8014364:	ab08      	add	r3, sp, #32
 8014366:	e913 0003 	ldmdb	r3, {r0, r1}
 801436a:	f7fc f945 	bl	80105f8 <LOGGER_PrintHeader>
 801436e:	a804      	add	r0, sp, #16
 8014370:	f104 0108 	add.w	r1, r4, #8
 8014374:	f7ff feb6 	bl	80140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8014378:	4841      	ldr	r0, [pc, #260]	; (8014480 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2b0>)
 801437a:	f7fc f923 	bl	80105c4 <LOGGER_Print>
 801437e:	f1ba 0f00 	cmp.w	sl, #0
 8014382:	d026      	beq.n	80143d2 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x202>
 8014384:	4836      	ldr	r0, [pc, #216]	; (8014460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 8014386:	f7fc f91d 	bl	80105c4 <LOGGER_Print>
 801438a:	78e3      	ldrb	r3, [r4, #3]
 801438c:	2b04      	cmp	r3, #4
 801438e:	bf96      	itet	ls
 8014390:	4a34      	ldrls	r2, [pc, #208]	; (8014464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 8014392:	4f35      	ldrhi	r7, [pc, #212]	; (8014468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 8014394:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
 8014398:	7923      	ldrb	r3, [r4, #4]
 801439a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801439e:	2b05      	cmp	r3, #5
 80143a0:	bf96      	itet	ls
 80143a2:	4a33      	ldrls	r2, [pc, #204]	; (8014470 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 80143a4:	4a33      	ldrhi	r2, [pc, #204]	; (8014474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 80143a6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80143aa:	8823      	ldrh	r3, [r4, #0]
 80143ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143b0:	78a1      	ldrb	r1, [r4, #2]
 80143b2:	482e      	ldr	r0, [pc, #184]	; (801446c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 80143b4:	9100      	str	r1, [sp, #0]
 80143b6:	4639      	mov	r1, r7
 80143b8:	f7fc f904 	bl	80105c4 <LOGGER_Print>
 80143bc:	f7fc f8fa 	bl	80105b4 <LOGGER_PrintNL>
 80143c0:	f7fc f918 	bl	80105f4 <LOGGER_EndSection>
 80143c4:	e7b1      	b.n	801432a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x15a>
 80143c6:	2e03      	cmp	r6, #3
 80143c8:	d105      	bne.n	80143d6 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x206>
 80143ca:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80143ce:	2b02      	cmp	r3, #2
 80143d0:	e7bb      	b.n	801434a <d34d9cc57da987921722d6f0e44d498b73ec396e+0x17a>
 80143d2:	482a      	ldr	r0, [pc, #168]	; (801447c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 80143d4:	e7d7      	b.n	8014386 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x1b6>
 80143d6:	f7fc f907 	bl	80105e8 <LOGGER_StartSection>
 80143da:	2800      	cmp	r0, #0
 80143dc:	d032      	beq.n	8014444 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x274>
 80143de:	2303      	movs	r3, #3
 80143e0:	9306      	str	r3, [sp, #24]
 80143e2:	4b1d      	ldr	r3, [pc, #116]	; (8014458 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x288>)
 80143e4:	9307      	str	r3, [sp, #28]
 80143e6:	ab08      	add	r3, sp, #32
 80143e8:	e913 0003 	ldmdb	r3, {r0, r1}
 80143ec:	f7fc f904 	bl	80105f8 <LOGGER_PrintHeader>
 80143f0:	a804      	add	r0, sp, #16
 80143f2:	f104 0108 	add.w	r1, r4, #8
 80143f6:	f7ff fe75 	bl	80140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80143fa:	4822      	ldr	r0, [pc, #136]	; (8014484 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2b4>)
 80143fc:	f7fc f8e2 	bl	80105c4 <LOGGER_Print>
 8014400:	f1ba 0f00 	cmp.w	sl, #0
 8014404:	d024      	beq.n	8014450 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x280>
 8014406:	4816      	ldr	r0, [pc, #88]	; (8014460 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x290>)
 8014408:	f7fc f8dc 	bl	80105c4 <LOGGER_Print>
 801440c:	78e3      	ldrb	r3, [r4, #3]
 801440e:	2b04      	cmp	r3, #4
 8014410:	bf96      	itet	ls
 8014412:	4a14      	ldrls	r2, [pc, #80]	; (8014464 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x294>)
 8014414:	4914      	ldrhi	r1, [pc, #80]	; (8014468 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x298>)
 8014416:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 801441a:	7923      	ldrb	r3, [r4, #4]
 801441c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8014420:	2b05      	cmp	r3, #5
 8014422:	bf96      	itet	ls
 8014424:	4a12      	ldrls	r2, [pc, #72]	; (8014470 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a0>)
 8014426:	4a13      	ldrhi	r2, [pc, #76]	; (8014474 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2a4>)
 8014428:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 801442c:	8823      	ldrh	r3, [r4, #0]
 801442e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014432:	78a0      	ldrb	r0, [r4, #2]
 8014434:	9000      	str	r0, [sp, #0]
 8014436:	480d      	ldr	r0, [pc, #52]	; (801446c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x29c>)
 8014438:	f7fc f8c4 	bl	80105c4 <LOGGER_Print>
 801443c:	f7fc f8ba 	bl	80105b4 <LOGGER_PrintNL>
 8014440:	f7fc f8d8 	bl	80105f4 <LOGGER_EndSection>
 8014444:	4620      	mov	r0, r4
 8014446:	f7ff fe47 	bl	80140d8 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 801444a:	f7f1 fd3b 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801444e:	e71c      	b.n	801428a <d34d9cc57da987921722d6f0e44d498b73ec396e+0xba>
 8014450:	480a      	ldr	r0, [pc, #40]	; (801447c <d34d9cc57da987921722d6f0e44d498b73ec396e+0x2ac>)
 8014452:	e7d9      	b.n	8014408 <d34d9cc57da987921722d6f0e44d498b73ec396e+0x238>
 8014454:	20000040 	.word	0x20000040
 8014458:	08020d6c 	.word	0x08020d6c
 801445c:	08020d75 	.word	0x08020d75
 8014460:	08020d8d 	.word	0x08020d8d
 8014464:	08020f68 	.word	0x08020f68
 8014468:	08020d60 	.word	0x08020d60
 801446c:	08020d94 	.word	0x08020d94
 8014470:	08020f4c 	.word	0x08020f4c
 8014474:	08020d68 	.word	0x08020d68
 8014478:	08020dc7 	.word	0x08020dc7
 801447c:	08020d8a 	.word	0x08020d8a
 8014480:	08020ddb 	.word	0x08020ddb
 8014484:	08020df3 	.word	0x08020df3

08014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>:
 8014488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801448c:	4b4f      	ldr	r3, [pc, #316]	; (80145cc <77238aa43a8b504c643ddf656419f5fe633c06fa+0x144>)
 801448e:	4680      	mov	r8, r0
 8014490:	681d      	ldr	r5, [r3, #0]
 8014492:	460f      	mov	r7, r1
 8014494:	f7fc f8a8 	bl	80105e8 <LOGGER_StartSection>
 8014498:	b1b0      	cbz	r0, 80144c8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x40>
 801449a:	2305      	movs	r3, #5
 801449c:	9302      	str	r3, [sp, #8]
 801449e:	4b4c      	ldr	r3, [pc, #304]	; (80145d0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 80144a0:	9303      	str	r3, [sp, #12]
 80144a2:	ab04      	add	r3, sp, #16
 80144a4:	e913 0003 	ldmdb	r3, {r0, r1}
 80144a8:	f7fc f8a6 	bl	80105f8 <LOGGER_PrintHeader>
 80144ac:	1c79      	adds	r1, r7, #1
 80144ae:	4668      	mov	r0, sp
 80144b0:	f7ff fe18 	bl	80140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80144b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144b8:	4846      	ldr	r0, [pc, #280]	; (80145d4 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x14c>)
 80144ba:	4641      	mov	r1, r8
 80144bc:	f7fc f882 	bl	80105c4 <LOGGER_Print>
 80144c0:	f7fc f878 	bl	80105b4 <LOGGER_PrintNL>
 80144c4:	f7fc f896 	bl	80105f4 <LOGGER_EndSection>
 80144c8:	f7f1 fcdc 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80144cc:	f505 7453 	add.w	r4, r5, #844	; 0x34c
 80144d0:	46a1      	mov	r9, r4
 80144d2:	f04f 0a28 	mov.w	sl, #40	; 0x28
 80144d6:	f8b5 3558 	ldrh.w	r3, [r5, #1368]	; 0x558
 80144da:	fb0a 9303 	mla	r3, sl, r3, r9
 80144de:	429c      	cmp	r4, r3
 80144e0:	d211      	bcs.n	8014506 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x7e>
 80144e2:	8823      	ldrh	r3, [r4, #0]
 80144e4:	4543      	cmp	r3, r8
 80144e6:	d001      	beq.n	80144ec <77238aa43a8b504c643ddf656419f5fe633c06fa+0x64>
 80144e8:	3428      	adds	r4, #40	; 0x28
 80144ea:	e7f4      	b.n	80144d6 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x4e>
 80144ec:	1de1      	adds	r1, r4, #7
 80144ee:	4638      	mov	r0, r7
 80144f0:	f7f9 f846 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80144f4:	4606      	mov	r6, r0
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d0f6      	beq.n	80144e8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x60>
 80144fa:	f8b5 3558 	ldrh.w	r3, [r5, #1368]	; 0x558
 80144fe:	fb0a 9303 	mla	r3, sl, r3, r9
 8014502:	429c      	cmp	r4, r3
 8014504:	d30d      	bcc.n	8014522 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x9a>
 8014506:	f7f1 fcdd 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801450a:	2301      	movs	r3, #1
 801450c:	9302      	str	r3, [sp, #8]
 801450e:	4a32      	ldr	r2, [pc, #200]	; (80145d8 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x150>)
 8014510:	4b2f      	ldr	r3, [pc, #188]	; (80145d0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 8014512:	9303      	str	r3, [sp, #12]
 8014514:	ab04      	add	r3, sp, #16
 8014516:	e913 0003 	ldmdb	r3, {r0, r1}
 801451a:	f7fc f88b 	bl	8010634 <LOGGER_PrintLine>
 801451e:	2600      	movs	r6, #0
 8014520:	e02b      	b.n	801457a <77238aa43a8b504c643ddf656419f5fe633c06fa+0xf2>
 8014522:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 8014526:	b133      	cbz	r3, 8014536 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xae>
 8014528:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801452a:	42a2      	cmp	r2, r4
 801452c:	d129      	bne.n	8014582 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xfa>
 801452e:	2300      	movs	r3, #0
 8014530:	6263      	str	r3, [r4, #36]	; 0x24
 8014532:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
 8014536:	7923      	ldrb	r3, [r4, #4]
 8014538:	2b05      	cmp	r3, #5
 801453a:	d119      	bne.n	8014570 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 801453c:	78e3      	ldrb	r3, [r4, #3]
 801453e:	2b02      	cmp	r3, #2
 8014540:	d116      	bne.n	8014570 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 8014542:	230c      	movs	r3, #12
 8014544:	f895 2530 	ldrb.w	r2, [r5, #1328]	; 0x530
 8014548:	2a05      	cmp	r2, #5
 801454a:	d103      	bne.n	8014554 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xcc>
 801454c:	f895 252f 	ldrb.w	r2, [r5, #1327]	; 0x52f
 8014550:	2a02      	cmp	r2, #2
 8014552:	d00d      	beq.n	8014570 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xe8>
 8014554:	3b01      	subs	r3, #1
 8014556:	1c5a      	adds	r2, r3, #1
 8014558:	f1a5 0528 	sub.w	r5, r5, #40	; 0x28
 801455c:	d1f2      	bne.n	8014544 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xbc>
 801455e:	a902      	add	r1, sp, #8
 8014560:	1c78      	adds	r0, r7, #1
 8014562:	f7f8 fe85 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 8014566:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801456a:	2100      	movs	r1, #0
 801456c:	f7f8 feba 	bl	800d2e4 <ca04a83f27bd1933b342c8619a464a402518176b>
 8014570:	4620      	mov	r0, r4
 8014572:	f7ff fdb1 	bl	80140d8 <f28a7f5ab7578008c51f3fac008d0f632d1bdb54>
 8014576:	f7f1 fca5 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801457a:	4630      	mov	r0, r6
 801457c:	b004      	add	sp, #16
 801457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014582:	210d      	movs	r1, #13
 8014584:	4618      	mov	r0, r3
 8014586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014588:	42a3      	cmp	r3, r4
 801458a:	d009      	beq.n	80145a0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x118>
 801458c:	3901      	subs	r1, #1
 801458e:	d1f9      	bne.n	8014584 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xfc>
 8014590:	f7f1 fc98 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014594:	2301      	movs	r3, #1
 8014596:	9302      	str	r3, [sp, #8]
 8014598:	4b0d      	ldr	r3, [pc, #52]	; (80145d0 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x148>)
 801459a:	4a10      	ldr	r2, [pc, #64]	; (80145dc <77238aa43a8b504c643ddf656419f5fe633c06fa+0x154>)
 801459c:	9303      	str	r3, [sp, #12]
 801459e:	e7b9      	b.n	8014514 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x8c>
 80145a0:	6242      	str	r2, [r0, #36]	; 0x24
 80145a2:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 80145a6:	42a3      	cmp	r3, r4
 80145a8:	d101      	bne.n	80145ae <77238aa43a8b504c643ddf656419f5fe633c06fa+0x126>
 80145aa:	f8c5 2554 	str.w	r2, [r5, #1364]	; 0x554
 80145ae:	462b      	mov	r3, r5
 80145b0:	f505 7202 	add.w	r2, r5, #520	; 0x208
 80145b4:	2100      	movs	r1, #0
 80145b6:	f8b3 c34c 	ldrh.w	ip, [r3, #844]	; 0x34c
 80145ba:	8820      	ldrh	r0, [r4, #0]
 80145bc:	4584      	cmp	ip, r0
 80145be:	bf08      	it	eq
 80145c0:	f883 1352 	strbeq.w	r1, [r3, #850]	; 0x352
 80145c4:	3328      	adds	r3, #40	; 0x28
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d1f5      	bne.n	80145b6 <77238aa43a8b504c643ddf656419f5fe633c06fa+0x12e>
 80145ca:	e7b4      	b.n	8014536 <77238aa43a8b504c643ddf656419f5fe633c06fa+0xae>
 80145cc:	20000040 	.word	0x20000040
 80145d0:	08020d6c 	.word	0x08020d6c
 80145d4:	08020e04 	.word	0x08020e04
 80145d8:	08020e2b 	.word	0x08020e2b
 80145dc:	08020e3e 	.word	0x08020e3e

080145e0 <SCHEDULE_GetCellInfo>:
 80145e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145e4:	4b39      	ldr	r3, [pc, #228]	; (80146cc <SCHEDULE_GetCellInfo+0xec>)
 80145e6:	b088      	sub	sp, #32
 80145e8:	681c      	ldr	r4, [r3, #0]
 80145ea:	221e      	movs	r2, #30
 80145ec:	4605      	mov	r5, r0
 80145ee:	460e      	mov	r6, r1
 80145f0:	4668      	mov	r0, sp
 80145f2:	2100      	movs	r1, #0
 80145f4:	f007 fcd8 	bl	801bfa8 <memset>
 80145f8:	f7f1 fc44 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80145fc:	f8b4 2558 	ldrh.w	r2, [r4, #1368]	; 0x558
 8014600:	2128      	movs	r1, #40	; 0x28
 8014602:	f504 7353 	add.w	r3, r4, #844	; 0x34c
 8014606:	fb01 4402 	mla	r4, r1, r2, r4
 801460a:	f504 7453 	add.w	r4, r4, #844	; 0x34c
 801460e:	429c      	cmp	r4, r3
 8014610:	d802      	bhi.n	8014618 <SCHEDULE_GetCellInfo+0x38>
 8014612:	f7f1 fc57 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014616:	e037      	b.n	8014688 <SCHEDULE_GetCellInfo+0xa8>
 8014618:	881a      	ldrh	r2, [r3, #0]
 801461a:	42b2      	cmp	r2, r6
 801461c:	d153      	bne.n	80146c6 <SCHEDULE_GetCellInfo+0xe6>
 801461e:	799a      	ldrb	r2, [r3, #6]
 8014620:	f893 a003 	ldrb.w	sl, [r3, #3]
 8014624:	2a00      	cmp	r2, #0
 8014626:	d143      	bne.n	80146b0 <SCHEDULE_GetCellInfo+0xd0>
 8014628:	791f      	ldrb	r7, [r3, #4]
 801462a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801462e:	8b1c      	ldrh	r4, [r3, #24]
 8014630:	f88d 201b 	strb.w	r2, [sp, #27]
 8014634:	8b5a      	ldrh	r2, [r3, #26]
 8014636:	69d8      	ldr	r0, [r3, #28]
 8014638:	f893 9005 	ldrb.w	r9, [r3, #5]
 801463c:	f893 8002 	ldrb.w	r8, [r3, #2]
 8014640:	f8cd 0017 	str.w	r0, [sp, #23]
 8014644:	42a2      	cmp	r2, r4
 8014646:	d935      	bls.n	80146b4 <SCHEDULE_GetCellInfo+0xd4>
 8014648:	835c      	strh	r4, [r3, #26]
 801464a:	f242 7410 	movw	r4, #10000	; 0x2710
 801464e:	1dda      	adds	r2, r3, #7
 8014650:	46ec      	mov	ip, sp
 8014652:	3317      	adds	r3, #23
 8014654:	6810      	ldr	r0, [r2, #0]
 8014656:	6851      	ldr	r1, [r2, #4]
 8014658:	46e6      	mov	lr, ip
 801465a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801465e:	3208      	adds	r2, #8
 8014660:	429a      	cmp	r2, r3
 8014662:	46f4      	mov	ip, lr
 8014664:	d1f6      	bne.n	8014654 <SCHEDULE_GetCellInfo+0x74>
 8014666:	7813      	ldrb	r3, [r2, #0]
 8014668:	f88e 3000 	strb.w	r3, [lr]
 801466c:	f7f1 fc2a 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014670:	f88d a011 	strb.w	sl, [sp, #17]
 8014674:	f88d 7012 	strb.w	r7, [sp, #18]
 8014678:	f88d 9013 	strb.w	r9, [sp, #19]
 801467c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8014680:	f88d 8016 	strb.w	r8, [sp, #22]
 8014684:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014688:	466b      	mov	r3, sp
 801468a:	462a      	mov	r2, r5
 801468c:	ae06      	add	r6, sp, #24
 801468e:	461c      	mov	r4, r3
 8014690:	cc03      	ldmia	r4!, {r0, r1}
 8014692:	42b4      	cmp	r4, r6
 8014694:	6010      	str	r0, [r2, #0]
 8014696:	6051      	str	r1, [r2, #4]
 8014698:	4623      	mov	r3, r4
 801469a:	f102 0208 	add.w	r2, r2, #8
 801469e:	d1f6      	bne.n	801468e <SCHEDULE_GetCellInfo+0xae>
 80146a0:	6820      	ldr	r0, [r4, #0]
 80146a2:	6010      	str	r0, [r2, #0]
 80146a4:	88a3      	ldrh	r3, [r4, #4]
 80146a6:	8093      	strh	r3, [r2, #4]
 80146a8:	4628      	mov	r0, r5
 80146aa:	b008      	add	sp, #32
 80146ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b0:	2704      	movs	r7, #4
 80146b2:	e7ba      	b.n	801462a <SCHEDULE_GetCellInfo+0x4a>
 80146b4:	2c00      	cmp	r4, #0
 80146b6:	d0ca      	beq.n	801464e <SCHEDULE_GetCellInfo+0x6e>
 80146b8:	f242 7110 	movw	r1, #10000	; 0x2710
 80146bc:	434a      	muls	r2, r1
 80146be:	fbb2 f2f4 	udiv	r2, r2, r4
 80146c2:	b294      	uxth	r4, r2
 80146c4:	e7c3      	b.n	801464e <SCHEDULE_GetCellInfo+0x6e>
 80146c6:	3328      	adds	r3, #40	; 0x28
 80146c8:	e7a1      	b.n	801460e <SCHEDULE_GetCellInfo+0x2e>
 80146ca:	bf00      	nop
 80146cc:	20000040 	.word	0x20000040

080146d0 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4b0e      	ldr	r3, [pc, #56]	; (801470c <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x3c>)
 80146d4:	681d      	ldr	r5, [r3, #0]
 80146d6:	4604      	mov	r4, r0
 80146d8:	f7f1 fbd4 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80146dc:	f8b5 355a 	ldrh.w	r3, [r5, #1370]	; 0x55a
 80146e0:	42a3      	cmp	r3, r4
 80146e2:	d803      	bhi.n	80146ec <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x1c>
 80146e4:	f7f1 fbee 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80146e8:	2000      	movs	r0, #0
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	f8d5 2554 	ldr.w	r2, [r5, #1364]	; 0x554
 80146f0:	b91a      	cbnz	r2, 80146fa <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x2a>
 80146f2:	f7f1 fbe7 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80146f6:	2001      	movs	r0, #1
 80146f8:	e7f7      	b.n	80146ea <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x1a>
 80146fa:	4613      	mov	r3, r2
 80146fc:	8819      	ldrh	r1, [r3, #0]
 80146fe:	42a1      	cmp	r1, r4
 8014700:	d0f0      	beq.n	80146e4 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x14>
 8014702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014704:	429a      	cmp	r2, r3
 8014706:	d1f9      	bne.n	80146fc <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x2c>
 8014708:	e7f3      	b.n	80146f2 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34+0x22>
 801470a:	bf00      	nop
 801470c:	20000040 	.word	0x20000040

08014710 <a332c320f50553856ddcee95ff765027b8f3e118>:
 8014710:	b510      	push	{r4, lr}
 8014712:	4b09      	ldr	r3, [pc, #36]	; (8014738 <a332c320f50553856ddcee95ff765027b8f3e118+0x28>)
 8014714:	681c      	ldr	r4, [r3, #0]
 8014716:	f7f1 fbb5 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 801471a:	4623      	mov	r3, r4
 801471c:	f504 7202 	add.w	r2, r4, #520	; 0x208
 8014720:	2400      	movs	r4, #0
 8014722:	f893 134f 	ldrb.w	r1, [r3, #847]	; 0x34f
 8014726:	b901      	cbnz	r1, 801472a <a332c320f50553856ddcee95ff765027b8f3e118+0x1a>
 8014728:	3401      	adds	r4, #1
 801472a:	3328      	adds	r3, #40	; 0x28
 801472c:	4293      	cmp	r3, r2
 801472e:	d1f8      	bne.n	8014722 <a332c320f50553856ddcee95ff765027b8f3e118+0x12>
 8014730:	f7f1 fbc8 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014734:	b2e0      	uxtb	r0, r4
 8014736:	bd10      	pop	{r4, pc}
 8014738:	20000040 	.word	0x20000040

0801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>:
 801473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801473e:	4b0f      	ldr	r3, [pc, #60]	; (801477c <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x40>)
 8014740:	4607      	mov	r7, r0
 8014742:	681d      	ldr	r5, [r3, #0]
 8014744:	f7f1 fb9e 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014748:	f205 3453 	addw	r4, r5, #851	; 0x353
 801474c:	2600      	movs	r6, #0
 801474e:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 8014752:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8014756:	2b05      	cmp	r3, #5
 8014758:	d109      	bne.n	801476e <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 801475a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d105      	bne.n	801476e <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 8014762:	4639      	mov	r1, r7
 8014764:	4620      	mov	r0, r4
 8014766:	f7f8 ff0b 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801476a:	b100      	cbz	r0, 801476e <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x32>
 801476c:	3601      	adds	r6, #1
 801476e:	3428      	adds	r4, #40	; 0x28
 8014770:	42ac      	cmp	r4, r5
 8014772:	d1ee      	bne.n	8014752 <45512773dac7d59ca8bf45f1f7d9d11b7c610605+0x16>
 8014774:	f7f1 fba6 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014778:	b2f0      	uxtb	r0, r6
 801477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801477c:	20000040 	.word	0x20000040

08014780 <ee504f8deafedb03386eec1c989207132bd15110>:
 8014780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014782:	4b18      	ldr	r3, [pc, #96]	; (80147e4 <ee504f8deafedb03386eec1c989207132bd15110+0x64>)
 8014784:	4607      	mov	r7, r0
 8014786:	681c      	ldr	r4, [r3, #0]
 8014788:	f7f1 fb7c 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 801478c:	b1cf      	cbz	r7, 80147c2 <ee504f8deafedb03386eec1c989207132bd15110+0x42>
 801478e:	f204 3653 	addw	r6, r4, #851	; 0x353
 8014792:	2500      	movs	r5, #0
 8014794:	f204 545b 	addw	r4, r4, #1371	; 0x55b
 8014798:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 801479c:	2b05      	cmp	r3, #5
 801479e:	d109      	bne.n	80147b4 <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 80147a0:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 80147a4:	2b02      	cmp	r3, #2
 80147a6:	d105      	bne.n	80147b4 <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 80147a8:	4639      	mov	r1, r7
 80147aa:	4630      	mov	r0, r6
 80147ac:	f7f8 fee8 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80147b0:	b100      	cbz	r0, 80147b4 <ee504f8deafedb03386eec1c989207132bd15110+0x34>
 80147b2:	3501      	adds	r5, #1
 80147b4:	3628      	adds	r6, #40	; 0x28
 80147b6:	42a6      	cmp	r6, r4
 80147b8:	d1ee      	bne.n	8014798 <ee504f8deafedb03386eec1c989207132bd15110+0x18>
 80147ba:	f7f1 fb83 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80147be:	4628      	mov	r0, r5
 80147c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147c2:	4623      	mov	r3, r4
 80147c4:	f504 7202 	add.w	r2, r4, #520	; 0x208
 80147c8:	463d      	mov	r5, r7
 80147ca:	f893 1350 	ldrb.w	r1, [r3, #848]	; 0x350
 80147ce:	2905      	cmp	r1, #5
 80147d0:	d104      	bne.n	80147dc <ee504f8deafedb03386eec1c989207132bd15110+0x5c>
 80147d2:	f893 134f 	ldrb.w	r1, [r3, #847]	; 0x34f
 80147d6:	2902      	cmp	r1, #2
 80147d8:	bf08      	it	eq
 80147da:	3501      	addeq	r5, #1
 80147dc:	3328      	adds	r3, #40	; 0x28
 80147de:	4293      	cmp	r3, r2
 80147e0:	d1f3      	bne.n	80147ca <ee504f8deafedb03386eec1c989207132bd15110+0x4a>
 80147e2:	e7ea      	b.n	80147ba <ee504f8deafedb03386eec1c989207132bd15110+0x3a>
 80147e4:	20000040 	.word	0x20000040

080147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>:
 80147e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80147ea:	4b19      	ldr	r3, [pc, #100]	; (8014850 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x68>)
 80147ec:	4605      	mov	r5, r0
 80147ee:	681e      	ldr	r6, [r3, #0]
 80147f0:	f7fb fefa 	bl	80105e8 <LOGGER_StartSection>
 80147f4:	b1a8      	cbz	r0, 8014822 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x3a>
 80147f6:	2305      	movs	r3, #5
 80147f8:	9302      	str	r3, [sp, #8]
 80147fa:	4b16      	ldr	r3, [pc, #88]	; (8014854 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x6c>)
 80147fc:	9303      	str	r3, [sp, #12]
 80147fe:	ab04      	add	r3, sp, #16
 8014800:	e913 0003 	ldmdb	r3, {r0, r1}
 8014804:	f7fb fef8 	bl	80105f8 <LOGGER_PrintHeader>
 8014808:	1c69      	adds	r1, r5, #1
 801480a:	4668      	mov	r0, sp
 801480c:	f7ff fc6a 	bl	80140e4 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8014810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014814:	4810      	ldr	r0, [pc, #64]	; (8014858 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x70>)
 8014816:	f7fb fed5 	bl	80105c4 <LOGGER_Print>
 801481a:	f7fb fecb 	bl	80105b4 <LOGGER_PrintNL>
 801481e:	f7fb fee9 	bl	80105f4 <LOGGER_EndSection>
 8014822:	f206 3453 	addw	r4, r6, #851	; 0x353
 8014826:	f206 565b 	addw	r6, r6, #1371	; 0x55b
 801482a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 801482e:	2b05      	cmp	r3, #5
 8014830:	d109      	bne.n	8014846 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x5e>
 8014832:	4629      	mov	r1, r5
 8014834:	4620      	mov	r0, r4
 8014836:	f7f8 fea3 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801483a:	b120      	cbz	r0, 8014846 <b3b14ea0535ea7766b14c305344e9dd58438abce+0x5e>
 801483c:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 8014840:	4629      	mov	r1, r5
 8014842:	f7ff fe21 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8014846:	3428      	adds	r4, #40	; 0x28
 8014848:	42b4      	cmp	r4, r6
 801484a:	d1ee      	bne.n	801482a <b3b14ea0535ea7766b14c305344e9dd58438abce+0x42>
 801484c:	b004      	add	sp, #16
 801484e:	bd70      	pop	{r4, r5, r6, pc}
 8014850:	20000040 	.word	0x20000040
 8014854:	08020d6c 	.word	0x08020d6c
 8014858:	08020e64 	.word	0x08020e64

0801485c <6ddbbbac57a040e4656a8033d785bd5c35bb4db8>:
 801485c:	b538      	push	{r3, r4, r5, lr}
 801485e:	4b0c      	ldr	r3, [pc, #48]	; (8014890 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x34>)
 8014860:	681d      	ldr	r5, [r3, #0]
 8014862:	f7f1 fb0f 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014866:	f205 3453 	addw	r4, r5, #851	; 0x353
 801486a:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 801486e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8014872:	2b05      	cmp	r3, #5
 8014874:	d104      	bne.n	8014880 <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x24>
 8014876:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 801487a:	4621      	mov	r1, r4
 801487c:	f7ff fe04 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 8014880:	3428      	adds	r4, #40	; 0x28
 8014882:	42ac      	cmp	r4, r5
 8014884:	d1f3      	bne.n	801486e <6ddbbbac57a040e4656a8033d785bd5c35bb4db8+0x12>
 8014886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801488a:	f7f1 bb1b 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801488e:	bf00      	nop
 8014890:	20000040 	.word	0x20000040

08014894 <0a6eef3dd890049c6feb9f053ae4732930866b35>:
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	4b13      	ldr	r3, [pc, #76]	; (80148e4 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x50>)
 8014898:	681c      	ldr	r4, [r3, #0]
 801489a:	4605      	mov	r5, r0
 801489c:	f7f1 faf2 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80148a0:	2300      	movs	r3, #0
 80148a2:	2128      	movs	r1, #40	; 0x28
 80148a4:	f504 7054 	add.w	r0, r4, #848	; 0x350
 80148a8:	fb01 f203 	mul.w	r2, r1, r3
 80148ac:	5c86      	ldrb	r6, [r0, r2]
 80148ae:	2e03      	cmp	r6, #3
 80148b0:	d111      	bne.n	80148d6 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x42>
 80148b2:	f202 3253 	addw	r2, r2, #851	; 0x353
 80148b6:	18a3      	adds	r3, r4, r2
 80148b8:	4628      	mov	r0, r5
 80148ba:	f103 0210 	add.w	r2, r3, #16
 80148be:	f853 1b04 	ldr.w	r1, [r3], #4
 80148c2:	f840 1b04 	str.w	r1, [r0], #4
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d1f9      	bne.n	80148be <0a6eef3dd890049c6feb9f053ae4732930866b35+0x2a>
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	7003      	strb	r3, [r0, #0]
 80148ce:	f7f1 faf9 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80148d2:	2001      	movs	r0, #1
 80148d4:	bd70      	pop	{r4, r5, r6, pc}
 80148d6:	3301      	adds	r3, #1
 80148d8:	2b0d      	cmp	r3, #13
 80148da:	d1e5      	bne.n	80148a8 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x14>
 80148dc:	f7f1 faf2 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80148e0:	2000      	movs	r0, #0
 80148e2:	e7f7      	b.n	80148d4 <0a6eef3dd890049c6feb9f053ae4732930866b35+0x40>
 80148e4:	20000040 	.word	0x20000040

080148e8 <1baccc0636a0c0164401b195d5e58f3f8da51c03>:
 80148e8:	b538      	push	{r3, r4, r5, lr}
 80148ea:	4b0c      	ldr	r3, [pc, #48]	; (801491c <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x34>)
 80148ec:	681d      	ldr	r5, [r3, #0]
 80148ee:	f7f1 fac9 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 80148f2:	f205 3453 	addw	r4, r5, #851	; 0x353
 80148f6:	f205 555b 	addw	r5, r5, #1371	; 0x55b
 80148fa:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 80148fe:	2b03      	cmp	r3, #3
 8014900:	d104      	bne.n	801490c <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x24>
 8014902:	f834 0c07 	ldrh.w	r0, [r4, #-7]
 8014906:	4621      	mov	r1, r4
 8014908:	f7ff fdbe 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 801490c:	3428      	adds	r4, #40	; 0x28
 801490e:	42ac      	cmp	r4, r5
 8014910:	d1f3      	bne.n	80148fa <1baccc0636a0c0164401b195d5e58f3f8da51c03+0x12>
 8014912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014916:	f7f1 bad5 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801491a:	bf00      	nop
 801491c:	20000040 	.word	0x20000040

08014920 <d611da576de3e6e1bad875dccfd97dcae1d67b2b>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	4b3c      	ldr	r3, [pc, #240]	; (8014a14 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xf4>)
 8014924:	681c      	ldr	r4, [r3, #0]
 8014926:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 801492a:	b086      	sub	sp, #24
 801492c:	4606      	mov	r6, r0
 801492e:	b92b      	cbnz	r3, 801493c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x1c>
 8014930:	4939      	ldr	r1, [pc, #228]	; (8014a18 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xf8>)
 8014932:	483a      	ldr	r0, [pc, #232]	; (8014a1c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xfc>)
 8014934:	f240 2267 	movw	r2, #615	; 0x267
 8014938:	f7ec ffce 	bl	80018d8 <EXPECT_OnAbortHandler>
 801493c:	f7f1 faa2 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014940:	250e      	movs	r5, #14
 8014942:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014946:	881a      	ldrh	r2, [r3, #0]
 8014948:	42b2      	cmp	r2, r6
 801494a:	d12b      	bne.n	80149a4 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x84>
 801494c:	799a      	ldrb	r2, [r3, #6]
 801494e:	2a00      	cmp	r2, #0
 8014950:	d051      	beq.n	80149f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 8014952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014954:	7991      	ldrb	r1, [r2, #6]
 8014956:	2900      	cmp	r1, #0
 8014958:	d04d      	beq.n	80149f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 801495a:	8811      	ldrh	r1, [r2, #0]
 801495c:	42b1      	cmp	r1, r6
 801495e:	d14a      	bne.n	80149f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 8014960:	7919      	ldrb	r1, [r3, #4]
 8014962:	2903      	cmp	r1, #3
 8014964:	d128      	bne.n	80149b8 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x98>
 8014966:	1dda      	adds	r2, r3, #7
 8014968:	ad01      	add	r5, sp, #4
 801496a:	3317      	adds	r3, #23
 801496c:	6810      	ldr	r0, [r2, #0]
 801496e:	6851      	ldr	r1, [r2, #4]
 8014970:	462e      	mov	r6, r5
 8014972:	c603      	stmia	r6!, {r0, r1}
 8014974:	3208      	adds	r2, #8
 8014976:	429a      	cmp	r2, r3
 8014978:	4635      	mov	r5, r6
 801497a:	d1f7      	bne.n	801496c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x4c>
 801497c:	7813      	ldrb	r3, [r2, #0]
 801497e:	702b      	strb	r3, [r5, #0]
 8014980:	a801      	add	r0, sp, #4
 8014982:	f7ff fedb 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8014986:	bb20      	cbnz	r0, 80149d2 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xb2>
 8014988:	2140      	movs	r1, #64	; 0x40
 801498a:	a801      	add	r0, sp, #4
 801498c:	f7f9 fcae 	bl	800e2ec <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>
 8014990:	b1f8      	cbz	r0, 80149d2 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xb2>
 8014992:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014998:	791a      	ldrb	r2, [r3, #4]
 801499a:	2a03      	cmp	r2, #3
 801499c:	d12b      	bne.n	80149f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 801499e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 80149a2:	e028      	b.n	80149f6 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xd6>
 80149a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 80149aa:	3d01      	subs	r5, #1
 80149ac:	d1c9      	bne.n	8014942 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x22>
 80149ae:	f7f1 fa89 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80149b2:	4628      	mov	r0, r5
 80149b4:	b006      	add	sp, #24
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
 80149b8:	1dd3      	adds	r3, r2, #7
 80149ba:	ad01      	add	r5, sp, #4
 80149bc:	3217      	adds	r2, #23
 80149be:	6818      	ldr	r0, [r3, #0]
 80149c0:	6859      	ldr	r1, [r3, #4]
 80149c2:	462e      	mov	r6, r5
 80149c4:	c603      	stmia	r6!, {r0, r1}
 80149c6:	3308      	adds	r3, #8
 80149c8:	4293      	cmp	r3, r2
 80149ca:	4635      	mov	r5, r6
 80149cc:	d1f7      	bne.n	80149be <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x9e>
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	e7d5      	b.n	801497e <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x5e>
 80149d2:	2302      	movs	r3, #2
 80149d4:	f10d 0105 	add.w	r1, sp, #5
 80149d8:	2000      	movs	r0, #0
 80149da:	f88d 3004 	strb.w	r3, [sp, #4]
 80149de:	f7f8 fa3d 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80149e2:	2140      	movs	r1, #64	; 0x40
 80149e4:	b100      	cbz	r0, 80149e8 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xc8>
 80149e6:	a801      	add	r0, sp, #4
 80149e8:	f7f9 fcd6 	bl	800e398 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>
 80149ec:	b938      	cbnz	r0, 80149fe <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xde>
 80149ee:	f7fa f907 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 80149f2:	07c3      	lsls	r3, r0, #31
 80149f4:	d409      	bmi.n	8014a0a <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0xea>
 80149f6:	f7f1 fa65 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 80149fa:	2001      	movs	r0, #1
 80149fc:	e7da      	b.n	80149b4 <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x94>
 80149fe:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a04:	791a      	ldrb	r2, [r3, #4]
 8014a06:	2a02      	cmp	r2, #2
 8014a08:	e7c8      	b.n	801499c <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x7c>
 8014a0a:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a10:	e7c5      	b.n	801499e <d611da576de3e6e1bad875dccfd97dcae1d67b2b+0x7e>
 8014a12:	bf00      	nop
 8014a14:	20000040 	.word	0x20000040
 8014a18:	08020e88 	.word	0x08020e88
 8014a1c:	08020ee8 	.word	0x08020ee8

08014a20 <265e4cb026b8783377b1f22e25c3b310527be0c4>:
 8014a20:	b510      	push	{r4, lr}
 8014a22:	4b0f      	ldr	r3, [pc, #60]	; (8014a60 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x40>)
 8014a24:	681c      	ldr	r4, [r3, #0]
 8014a26:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014a2a:	b92b      	cbnz	r3, 8014a38 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x18>
 8014a2c:	490d      	ldr	r1, [pc, #52]	; (8014a64 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x44>)
 8014a2e:	480e      	ldr	r0, [pc, #56]	; (8014a68 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x48>)
 8014a30:	f240 22b1 	movw	r2, #689	; 0x2b1
 8014a34:	f7ec ff50 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014a38:	f7f1 fa24 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014a3c:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014a40:	7991      	ldrb	r1, [r2, #6]
 8014a42:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8014a44:	b131      	cbz	r1, 8014a54 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x34>
 8014a46:	7999      	ldrb	r1, [r3, #6]
 8014a48:	b121      	cbz	r1, 8014a54 <265e4cb026b8783377b1f22e25c3b310527be0c4+0x34>
 8014a4a:	8811      	ldrh	r1, [r2, #0]
 8014a4c:	881a      	ldrh	r2, [r3, #0]
 8014a4e:	4291      	cmp	r1, r2
 8014a50:	bf08      	it	eq
 8014a52:	6a5b      	ldreq	r3, [r3, #36]	; 0x24
 8014a54:	881c      	ldrh	r4, [r3, #0]
 8014a56:	f7f1 fa35 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	bd10      	pop	{r4, pc}
 8014a5e:	bf00      	nop
 8014a60:	20000040 	.word	0x20000040
 8014a64:	08020e88 	.word	0x08020e88
 8014a68:	08020ee8 	.word	0x08020ee8

08014a6c <23fc3861a84c8d8f435c2599ea00b6593300a215>:
 8014a6c:	b510      	push	{r4, lr}
 8014a6e:	4b0a      	ldr	r3, [pc, #40]	; (8014a98 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x2c>)
 8014a70:	681c      	ldr	r4, [r3, #0]
 8014a72:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014a76:	b92b      	cbnz	r3, 8014a84 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x18>
 8014a78:	4908      	ldr	r1, [pc, #32]	; (8014a9c <23fc3861a84c8d8f435c2599ea00b6593300a215+0x30>)
 8014a7a:	4809      	ldr	r0, [pc, #36]	; (8014aa0 <23fc3861a84c8d8f435c2599ea00b6593300a215+0x34>)
 8014a7c:	f240 22c9 	movw	r2, #713	; 0x2c9
 8014a80:	f7ec ff2a 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014a84:	f7f1 f9fe 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014a88:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014a8c:	78dc      	ldrb	r4, [r3, #3]
 8014a8e:	f7f1 fa19 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014a92:	4620      	mov	r0, r4
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	bf00      	nop
 8014a98:	20000040 	.word	0x20000040
 8014a9c:	08020e88 	.word	0x08020e88
 8014aa0:	08020ee8 	.word	0x08020ee8

08014aa4 <b800951da4b2039f1ee67c6e225564a563003bc0>:
 8014aa4:	b510      	push	{r4, lr}
 8014aa6:	4b0a      	ldr	r3, [pc, #40]	; (8014ad0 <b800951da4b2039f1ee67c6e225564a563003bc0+0x2c>)
 8014aa8:	681c      	ldr	r4, [r3, #0]
 8014aaa:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014aae:	b92b      	cbnz	r3, 8014abc <b800951da4b2039f1ee67c6e225564a563003bc0+0x18>
 8014ab0:	4908      	ldr	r1, [pc, #32]	; (8014ad4 <b800951da4b2039f1ee67c6e225564a563003bc0+0x30>)
 8014ab2:	4809      	ldr	r0, [pc, #36]	; (8014ad8 <b800951da4b2039f1ee67c6e225564a563003bc0+0x34>)
 8014ab4:	f240 22de 	movw	r2, #734	; 0x2de
 8014ab8:	f7ec ff0e 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014abc:	f7f1 f9e2 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014ac0:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014ac4:	791c      	ldrb	r4, [r3, #4]
 8014ac6:	f7f1 f9fd 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014aca:	4620      	mov	r0, r4
 8014acc:	bd10      	pop	{r4, pc}
 8014ace:	bf00      	nop
 8014ad0:	20000040 	.word	0x20000040
 8014ad4:	08020e88 	.word	0x08020e88
 8014ad8:	08020ee8 	.word	0x08020ee8

08014adc <ffe29f5c9712609bba4ef23834769dd10ed867f0>:
 8014adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	4b58      	ldr	r3, [pc, #352]	; (8014c44 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x168>)
 8014ae2:	f8d3 9000 	ldr.w	r9, [r3]
 8014ae6:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8014aea:	b08b      	sub	sp, #44	; 0x2c
 8014aec:	4606      	mov	r6, r0
 8014aee:	b92b      	cbnz	r3, 8014afc <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x20>
 8014af0:	4955      	ldr	r1, [pc, #340]	; (8014c48 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x16c>)
 8014af2:	4856      	ldr	r0, [pc, #344]	; (8014c4c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x170>)
 8014af4:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014af8:	f7ec feee 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014afc:	f7f1 f9c2 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014b00:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8014b04:	466c      	mov	r4, sp
 8014b06:	1dda      	adds	r2, r3, #7
 8014b08:	f103 0c17 	add.w	ip, r3, #23
 8014b0c:	4625      	mov	r5, r4
 8014b0e:	6810      	ldr	r0, [r2, #0]
 8014b10:	6851      	ldr	r1, [r2, #4]
 8014b12:	4627      	mov	r7, r4
 8014b14:	c703      	stmia	r7!, {r0, r1}
 8014b16:	3208      	adds	r2, #8
 8014b18:	4562      	cmp	r2, ip
 8014b1a:	463c      	mov	r4, r7
 8014b1c:	d1f7      	bne.n	8014b0e <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x32>
 8014b1e:	7812      	ldrb	r2, [r2, #0]
 8014b20:	703a      	strb	r2, [r7, #0]
 8014b22:	791f      	ldrb	r7, [r3, #4]
 8014b24:	f893 8003 	ldrb.w	r8, [r3, #3]
 8014b28:	2f02      	cmp	r7, #2
 8014b2a:	d01b      	beq.n	8014b64 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8014b2c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8014b30:	b1c2      	cbz	r2, 8014b64 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8014b32:	3a01      	subs	r2, #1
 8014b34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8014b38:	f8d9 3554 	ldr.w	r3, [r9, #1364]	; 0x554
 8014b3c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014b40:	b183      	cbz	r3, 8014b64 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x88>
 8014b42:	2f05      	cmp	r7, #5
 8014b44:	d103      	bne.n	8014b4e <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x72>
 8014b46:	2101      	movs	r1, #1
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f7ff fa27 	bl	8013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8014b4e:	2101      	movs	r1, #1
 8014b50:	2000      	movs	r0, #0
 8014b52:	f7ff fa23 	bl	8013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8014b56:	f7f1 f9b5 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014b5a:	2400      	movs	r4, #0
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	b00b      	add	sp, #44	; 0x2c
 8014b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b64:	f7f1 f9ae 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014b68:	2210      	movs	r2, #16
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	f10d 0015 	add.w	r0, sp, #21
 8014b70:	f007 fa1a 	bl	801bfa8 <memset>
 8014b74:	2302      	movs	r3, #2
 8014b76:	f10d 0115 	add.w	r1, sp, #21
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	f88d 3014 	strb.w	r3, [sp, #20]
 8014b80:	f7f8 f96c 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8014b84:	1e7b      	subs	r3, r7, #1
 8014b86:	2b04      	cmp	r3, #4
 8014b88:	d8e7      	bhi.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014b8a:	a201      	add	r2, pc, #4	; (adr r2, 8014b90 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0xb4>)
 8014b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b90:	08014ba5 	.word	0x08014ba5
 8014b94:	08014beb 	.word	0x08014beb
 8014b98:	08014c09 	.word	0x08014c09
 8014b9c:	08014b5b 	.word	0x08014b5b
 8014ba0:	08014c1f 	.word	0x08014c1f
 8014ba4:	2031      	movs	r0, #49	; 0x31
 8014ba6:	f7f9 fb17 	bl	800e1d8 <d9cd3de8850ba05653155beecb1d40906820436e>
 8014baa:	4604      	mov	r4, r0
 8014bac:	2800      	cmp	r0, #0
 8014bae:	d0d4      	beq.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014bb0:	7803      	ldrb	r3, [r0, #0]
 8014bb2:	2b50      	cmp	r3, #80	; 0x50
 8014bb4:	d10b      	bne.n	8014bce <ffe29f5c9712609bba4ef23834769dd10ed867f0+0xf2>
 8014bb6:	f004 fab3 	bl	8019120 <93f4deb1287f872116dccf0c4dae004ac9b29b84>
 8014bba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8014bbe:	6832      	ldr	r2, [r6, #0]
 8014bc0:	601a      	str	r2, [r3, #0]
 8014bc2:	7932      	ldrb	r2, [r6, #4]
 8014bc4:	711a      	strb	r2, [r3, #4]
 8014bc6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8014bca:	3801      	subs	r0, #1
 8014bcc:	7158      	strb	r0, [r3, #5]
 8014bce:	7823      	ldrb	r3, [r4, #0]
 8014bd0:	2b90      	cmp	r3, #144	; 0x90
 8014bd2:	d107      	bne.n	8014be4 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8014bd4:	68e2      	ldr	r2, [r4, #12]
 8014bd6:	b12a      	cbz	r2, 8014be4 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8014bd8:	2321      	movs	r3, #33	; 0x21
 8014bda:	4631      	mov	r1, r6
 8014bdc:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8014be0:	f7fa fb60 	bl	800f2a4 <ce7cfafa044c34a88028e8cf12995b3096f9f973>
 8014be4:	f884 709e 	strb.w	r7, [r4, #158]	; 0x9e
 8014be8:	e7b8      	b.n	8014b5c <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x80>
 8014bea:	2131      	movs	r1, #49	; 0x31
 8014bec:	b100      	cbz	r0, 8014bf0 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x114>
 8014bee:	a805      	add	r0, sp, #20
 8014bf0:	f7f9 fbd2 	bl	800e398 <b889de2f10cc0917d24c2de3fa3fd08176b8c62f>
 8014bf4:	1e01      	subs	r1, r0, #0
 8014bf6:	4604      	mov	r4, r0
 8014bf8:	bf18      	it	ne
 8014bfa:	2101      	movne	r1, #1
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	f7ff f9cd 	bl	8013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8014c02:	2c00      	cmp	r4, #0
 8014c04:	d1ee      	bne.n	8014be4 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8014c06:	e7a8      	b.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014c08:	4628      	mov	r0, r5
 8014c0a:	f7ff fd97 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	d1a3      	bne.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014c12:	2131      	movs	r1, #49	; 0x31
 8014c14:	4628      	mov	r0, r5
 8014c16:	f7f9 fb69 	bl	800e2ec <e22731f1bc5e11c30d17c816b254bbe1a1e0e9ca>
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	e7f1      	b.n	8014c02 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x126>
 8014c1e:	f1b8 0f01 	cmp.w	r8, #1
 8014c22:	d19a      	bne.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014c24:	2131      	movs	r1, #49	; 0x31
 8014c26:	4628      	mov	r0, r5
 8014c28:	f7f9 fcea 	bl	800e600 <fc07e894741fc85c512f976929ce54659d763792>
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	b120      	cbz	r0, 8014c3a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x15e>
 8014c30:	4641      	mov	r1, r8
 8014c32:	4628      	mov	r0, r5
 8014c34:	f7ff f9b2 	bl	8013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8014c38:	e7d4      	b.n	8014be4 <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x108>
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	f7ff f9ad 	bl	8013f9c <9856fe7f99ddec4cee04e781ec13e80fb35fb8ed>
 8014c42:	e78a      	b.n	8014b5a <ffe29f5c9712609bba4ef23834769dd10ed867f0+0x7e>
 8014c44:	20000040 	.word	0x20000040
 8014c48:	08020e88 	.word	0x08020e88
 8014c4c:	08020ee8 	.word	0x08020ee8

08014c50 <132157aa3fd4bf1277c4734fe270cbaef9b35a98>:
 8014c50:	b510      	push	{r4, lr}
 8014c52:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x2c>)
 8014c54:	681c      	ldr	r4, [r3, #0]
 8014c56:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014c5a:	b92b      	cbnz	r3, 8014c68 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x18>
 8014c5c:	4908      	ldr	r1, [pc, #32]	; (8014c80 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x30>)
 8014c5e:	4809      	ldr	r0, [pc, #36]	; (8014c84 <132157aa3fd4bf1277c4734fe270cbaef9b35a98+0x34>)
 8014c60:	f240 3259 	movw	r2, #857	; 0x359
 8014c64:	f7ec fe38 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014c68:	f7f1 f90c 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014c6c:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014c70:	789c      	ldrb	r4, [r3, #2]
 8014c72:	f7f1 f927 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014c76:	4620      	mov	r0, r4
 8014c78:	bd10      	pop	{r4, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20000040 	.word	0x20000040
 8014c80:	08020e88 	.word	0x08020e88
 8014c84:	08020ee8 	.word	0x08020ee8

08014c88 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf>:
 8014c88:	b510      	push	{r4, lr}
 8014c8a:	4b0a      	ldr	r3, [pc, #40]	; (8014cb4 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x2c>)
 8014c8c:	681c      	ldr	r4, [r3, #0]
 8014c8e:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014c92:	b92b      	cbnz	r3, 8014ca0 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x18>
 8014c94:	4908      	ldr	r1, [pc, #32]	; (8014cb8 <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x30>)
 8014c96:	4809      	ldr	r0, [pc, #36]	; (8014cbc <0be11d8c56927ea5d7f03e6fc26e8da8ab6824cf+0x34>)
 8014c98:	f240 3269 	movw	r2, #873	; 0x369
 8014c9c:	f7ec fe1c 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014ca0:	f7f1 f8f0 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014ca4:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014ca8:	881c      	ldrh	r4, [r3, #0]
 8014caa:	f7f1 f90b 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014cae:	4620      	mov	r0, r4
 8014cb0:	bd10      	pop	{r4, pc}
 8014cb2:	bf00      	nop
 8014cb4:	20000040 	.word	0x20000040
 8014cb8:	08020e88 	.word	0x08020e88
 8014cbc:	08020ee8 	.word	0x08020ee8

08014cc0 <e1a4ca54296e83210dff3006a7ef95c89a4943bb>:
 8014cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc4:	4b3a      	ldr	r3, [pc, #232]	; (8014db0 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf0>)
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	681e      	ldr	r6, [r3, #0]
 8014cca:	468b      	mov	fp, r1
 8014ccc:	4607      	mov	r7, r0
 8014cce:	f7f8 fb35 	bl	800d33c <a72cb89288ba405a2fc975c124a720574840c109>
 8014cd2:	f04f 0900 	mov.w	r9, #0
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	f7f1 f8d4 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014cdc:	2219      	movs	r2, #25
 8014cde:	2100      	movs	r1, #0
 8014ce0:	4638      	mov	r0, r7
 8014ce2:	f007 f961 	bl	801bfa8 <memset>
 8014ce6:	f206 3553 	addw	r5, r6, #851	; 0x353
 8014cea:	f206 5a5b 	addw	sl, r6, #1371	; 0x55b
 8014cee:	2301      	movs	r3, #1
 8014cf0:	464e      	mov	r6, r9
 8014cf2:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8014cf6:	2a05      	cmp	r2, #5
 8014cf8:	d103      	bne.n	8014d02 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8014cfa:	f815 2c04 	ldrb.w	r2, [r5, #-4]
 8014cfe:	2a01      	cmp	r2, #1
 8014d00:	d014      	beq.n	8014d2c <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x6c>
 8014d02:	46b0      	mov	r8, r6
 8014d04:	3528      	adds	r5, #40	; 0x28
 8014d06:	45aa      	cmp	sl, r5
 8014d08:	d10e      	bne.n	8014d28 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x68>
 8014d0a:	b13b      	cbz	r3, 8014d1c <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8014d0c:	f1b8 0f00 	cmp.w	r8, #0
 8014d10:	d004      	beq.n	8014d1c <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8014d12:	b11c      	cbz	r4, 8014d1c <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8014d14:	3c01      	subs	r4, #1
 8014d16:	b2e0      	uxtb	r0, r4
 8014d18:	f7f8 fb2a 	bl	800d370 <201075ddfc12155ac10a81b74045472dd935ece2>
 8014d1c:	f7f1 f8d2 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014d20:	7838      	ldrb	r0, [r7, #0]
 8014d22:	b005      	add	sp, #20
 8014d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d28:	4646      	mov	r6, r8
 8014d2a:	e7e2      	b.n	8014cf2 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x32>
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	4658      	mov	r0, fp
 8014d30:	9301      	str	r3, [sp, #4]
 8014d32:	f7f8 fc25 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8014d36:	9b01      	ldr	r3, [sp, #4]
 8014d38:	4680      	mov	r8, r0
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d0e1      	beq.n	8014d02 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8014d3e:	f8b5 2011 	ldrh.w	r2, [r5, #17]
 8014d42:	2a32      	cmp	r2, #50	; 0x32
 8014d44:	d9dd      	bls.n	8014d02 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x42>
 8014d46:	f8b5 6013 	ldrh.w	r6, [r5, #19]
 8014d4a:	2164      	movs	r1, #100	; 0x64
 8014d4c:	2c03      	cmp	r4, #3
 8014d4e:	fb01 f606 	mul.w	r6, r1, r6
 8014d52:	fbb6 f6f2 	udiv	r6, r6, r2
 8014d56:	d824      	bhi.n	8014da2 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xe2>
 8014d58:	2e45      	cmp	r6, #69	; 0x45
 8014d5a:	d8d3      	bhi.n	8014d04 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8014d5c:	3401      	adds	r4, #1
 8014d5e:	b2e4      	uxtb	r4, r4
 8014d60:	4620      	mov	r0, r4
 8014d62:	f7f8 fb05 	bl	800d370 <201075ddfc12155ac10a81b74045472dd935ece2>
 8014d66:	2304      	movs	r3, #4
 8014d68:	9302      	str	r3, [sp, #8]
 8014d6a:	4b12      	ldr	r3, [pc, #72]	; (8014db4 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf4>)
 8014d6c:	9303      	str	r3, [sp, #12]
 8014d6e:	a904      	add	r1, sp, #16
 8014d70:	e911 0003 	ldmdb	r1, {r0, r1}
 8014d74:	4a10      	ldr	r2, [pc, #64]	; (8014db8 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xf8>)
 8014d76:	4633      	mov	r3, r6
 8014d78:	f7fb fc5c 	bl	8010634 <LOGGER_PrintLine>
 8014d7c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8014d80:	2101      	movs	r1, #1
 8014d82:	54b9      	strb	r1, [r7, r2]
 8014d84:	18bb      	adds	r3, r7, r2
 8014d86:	f835 2c07 	ldrh.w	r2, [r5, #-7]
 8014d8a:	f8a3 2001 	strh.w	r2, [r3, #1]
 8014d8e:	4489      	add	r9, r1
 8014d90:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8014d94:	f8a3 2003 	strh.w	r2, [r3, #3]
 8014d98:	f1b9 0f04 	cmp.w	r9, #4
 8014d9c:	d8be      	bhi.n	8014d1c <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x5c>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	e7b0      	b.n	8014d04 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8014da2:	2e27      	cmp	r6, #39	; 0x27
 8014da4:	d9df      	bls.n	8014d66 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0xa6>
 8014da6:	2e45      	cmp	r6, #69	; 0x45
 8014da8:	bf98      	it	ls
 8014daa:	2300      	movls	r3, #0
 8014dac:	e7aa      	b.n	8014d04 <e1a4ca54296e83210dff3006a7ef95c89a4943bb+0x44>
 8014dae:	bf00      	nop
 8014db0:	20000040 	.word	0x20000040
 8014db4:	08020d6c 	.word	0x08020d6c
 8014db8:	08020efe 	.word	0x08020efe

08014dbc <SCHEDULE_GetCellsCount>:
 8014dbc:	b570      	push	{r4, r5, r6, lr}
 8014dbe:	4b09      	ldr	r3, [pc, #36]	; (8014de4 <SCHEDULE_GetCellsCount+0x28>)
 8014dc0:	681c      	ldr	r4, [r3, #0]
 8014dc2:	2500      	movs	r5, #0
 8014dc4:	f504 7602 	add.w	r6, r4, #520	; 0x208
 8014dc8:	f7f1 f85c 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014dcc:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
 8014dd0:	b103      	cbz	r3, 8014dd4 <SCHEDULE_GetCellsCount+0x18>
 8014dd2:	3501      	adds	r5, #1
 8014dd4:	3428      	adds	r4, #40	; 0x28
 8014dd6:	f7f1 f875 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014dda:	42b4      	cmp	r4, r6
 8014ddc:	d1f4      	bne.n	8014dc8 <SCHEDULE_GetCellsCount+0xc>
 8014dde:	4628      	mov	r0, r5
 8014de0:	bd70      	pop	{r4, r5, r6, pc}
 8014de2:	bf00      	nop
 8014de4:	20000040 	.word	0x20000040

08014de8 <c44994d9507f8e8896ef91cc0ed0c665b4e74466>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4b0c      	ldr	r3, [pc, #48]	; (8014e1c <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x34>)
 8014dec:	681d      	ldr	r5, [r3, #0]
 8014dee:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 8014df2:	4604      	mov	r4, r0
 8014df4:	b92b      	cbnz	r3, 8014e02 <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x1a>
 8014df6:	490a      	ldr	r1, [pc, #40]	; (8014e20 <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x38>)
 8014df8:	480a      	ldr	r0, [pc, #40]	; (8014e24 <c44994d9507f8e8896ef91cc0ed0c665b4e74466+0x3c>)
 8014dfa:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014dfe:	f7ec fd6b 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014e02:	f7f1 f83f 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014e06:	f8d5 3554 	ldr.w	r3, [r5, #1364]	; 0x554
 8014e0a:	6820      	ldr	r0, [r4, #0]
 8014e0c:	61d8      	str	r0, [r3, #28]
 8014e0e:	7922      	ldrb	r2, [r4, #4]
 8014e10:	f883 2020 	strb.w	r2, [r3, #32]
 8014e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e18:	f7f1 b854 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014e1c:	20000040 	.word	0x20000040
 8014e20:	08020e88 	.word	0x08020e88
 8014e24:	08020ee8 	.word	0x08020ee8

08014e28 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f>:
 8014e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2a:	4b32      	ldr	r3, [pc, #200]	; (8014ef4 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xcc>)
 8014e2c:	681c      	ldr	r4, [r3, #0]
 8014e2e:	4606      	mov	r6, r0
 8014e30:	f8d4 0554 	ldr.w	r0, [r4, #1364]	; 0x554
 8014e34:	460d      	mov	r5, r1
 8014e36:	4617      	mov	r7, r2
 8014e38:	b928      	cbnz	r0, 8014e46 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x1e>
 8014e3a:	492f      	ldr	r1, [pc, #188]	; (8014ef8 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xd0>)
 8014e3c:	482f      	ldr	r0, [pc, #188]	; (8014efc <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xd4>)
 8014e3e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014e42:	f7ec fd49 	bl	80018d8 <EXPECT_OnAbortHandler>
 8014e46:	b381      	cbz	r1, 8014eaa <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x82>
 8014e48:	f7f1 f81c 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014e4c:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014e50:	8b13      	ldrh	r3, [r2, #24]
 8014e52:	3301      	adds	r3, #1
 8014e54:	8313      	strh	r3, [r2, #24]
 8014e56:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014e5a:	8b53      	ldrh	r3, [r2, #26]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	8353      	strh	r3, [r2, #26]
 8014e60:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014e64:	8b19      	ldrh	r1, [r3, #24]
 8014e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e6a:	4291      	cmp	r1, r2
 8014e6c:	d107      	bne.n	8014e7e <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x56>
 8014e6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014e72:	831a      	strh	r2, [r3, #24]
 8014e74:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014e78:	8b53      	ldrh	r3, [r2, #26]
 8014e7a:	085b      	lsrs	r3, r3, #1
 8014e7c:	8353      	strh	r3, [r2, #26]
 8014e7e:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
 8014e82:	6830      	ldr	r0, [r6, #0]
 8014e84:	61d8      	str	r0, [r3, #28]
 8014e86:	7932      	ldrb	r2, [r6, #4]
 8014e88:	f883 2020 	strb.w	r2, [r3, #32]
 8014e8c:	f8d4 1554 	ldr.w	r1, [r4, #1364]	; 0x554
 8014e90:	b905      	cbnz	r5, 8014e94 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x6c>
 8014e92:	b1d7      	cbz	r7, 8014eca <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0xa2>
 8014e94:	2300      	movs	r3, #0
 8014e96:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
 8014e9a:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014e9e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
 8014ea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ea6:	f7f1 b80d 	b.w	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014eaa:	7903      	ldrb	r3, [r0, #4]
 8014eac:	2b05      	cmp	r3, #5
 8014eae:	d104      	bne.n	8014eba <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x92>
 8014eb0:	3007      	adds	r0, #7
 8014eb2:	f7f8 fabd 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8014eb6:	f005 fd73 	bl	801a9a0 <e097653d016fa9f6f38b73037603a15c791aa10d>
 8014eba:	f7f0 ffe3 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014ebe:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014ec2:	8b13      	ldrh	r3, [r2, #24]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	8313      	strh	r3, [r2, #24]
 8014ec8:	e7ca      	b.n	8014e60 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x38>
 8014eca:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8014ece:	2b03      	cmp	r3, #3
 8014ed0:	bf9c      	itt	ls
 8014ed2:	3301      	addls	r3, #1
 8014ed4:	f881 3021 	strbls.w	r3, [r1, #33]	; 0x21
 8014ed8:	f7f9 fe92 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8014edc:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8014ee0:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	408b      	lsls	r3, r1
 8014ee8:	3b01      	subs	r3, #1
 8014eea:	4018      	ands	r0, r3
 8014eec:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
 8014ef0:	e7d7      	b.n	8014ea2 <aeb5f65936f4e5306bdeeda4df8abd03e176b12f+0x7a>
 8014ef2:	bf00      	nop
 8014ef4:	20000040 	.word	0x20000040
 8014ef8:	08020e88 	.word	0x08020e88
 8014efc:	08020ee8 	.word	0x08020ee8

08014f00 <SCHEDULE_GetBestRxCellCandidate>:
 8014f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f02:	4b35      	ldr	r3, [pc, #212]	; (8014fd8 <SCHEDULE_GetBestRxCellCandidate+0xd8>)
 8014f04:	681d      	ldr	r5, [r3, #0]
 8014f06:	f7ff f953 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	b1f0      	cbz	r0, 8014f4c <SCHEDULE_GetBestRxCellCandidate+0x4c>
 8014f0e:	f7f9 fe77 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8014f12:	230d      	movs	r3, #13
 8014f14:	fbb0 f2f3 	udiv	r2, r0, r3
 8014f18:	fb02 0413 	mls	r4, r2, r3, r0
 8014f1c:	b2a4      	uxth	r4, r4
 8014f1e:	2c01      	cmp	r4, #1
 8014f20:	bf38      	it	cc
 8014f22:	2401      	movcc	r4, #1
 8014f24:	f7f0 ffae 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014f28:	462b      	mov	r3, r5
 8014f2a:	f505 7202 	add.w	r2, r5, #520	; 0x208
 8014f2e:	2100      	movs	r1, #0
 8014f30:	f893 034f 	ldrb.w	r0, [r3, #847]	; 0x34f
 8014f34:	b108      	cbz	r0, 8014f3a <SCHEDULE_GetBestRxCellCandidate+0x3a>
 8014f36:	3101      	adds	r1, #1
 8014f38:	b289      	uxth	r1, r1
 8014f3a:	3328      	adds	r3, #40	; 0x28
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d1f7      	bne.n	8014f30 <SCHEDULE_GetBestRxCellCandidate+0x30>
 8014f40:	290d      	cmp	r1, #13
 8014f42:	d001      	beq.n	8014f48 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8014f44:	2901      	cmp	r1, #1
 8014f46:	d803      	bhi.n	8014f50 <SCHEDULE_GetBestRxCellCandidate+0x50>
 8014f48:	f7f0 ffbc 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f50:	f8d5 0554 	ldr.w	r0, [r5, #1364]	; 0x554
 8014f54:	2300      	movs	r3, #0
 8014f56:	7902      	ldrb	r2, [r0, #4]
 8014f58:	2a05      	cmp	r2, #5
 8014f5a:	d102      	bne.n	8014f62 <SCHEDULE_GetBestRxCellCandidate+0x62>
 8014f5c:	78c2      	ldrb	r2, [r0, #3]
 8014f5e:	2a01      	cmp	r2, #1
 8014f60:	d004      	beq.n	8014f6c <SCHEDULE_GetBestRxCellCandidate+0x6c>
 8014f62:	3301      	adds	r3, #1
 8014f64:	4299      	cmp	r1, r3
 8014f66:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014f68:	d8f5      	bhi.n	8014f56 <SCHEDULE_GetBestRxCellCandidate+0x56>
 8014f6a:	e7ed      	b.n	8014f48 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	270d      	movs	r7, #13
 8014f70:	2600      	movs	r6, #0
 8014f72:	f101 3cff 	add.w	ip, r1, #4294967295
 8014f76:	791a      	ldrb	r2, [r3, #4]
 8014f78:	2a05      	cmp	r2, #5
 8014f7a:	d103      	bne.n	8014f84 <SCHEDULE_GetBestRxCellCandidate+0x84>
 8014f7c:	78da      	ldrb	r2, [r3, #3]
 8014f7e:	2a01      	cmp	r2, #1
 8014f80:	bf08      	it	eq
 8014f82:	4618      	moveq	r0, r3
 8014f84:	461d      	mov	r5, r3
 8014f86:	2200      	movs	r2, #0
 8014f88:	3201      	adds	r2, #1
 8014f8a:	4562      	cmp	r2, ip
 8014f8c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8014f8e:	dbfb      	blt.n	8014f88 <SCHEDULE_GetBestRxCellCandidate+0x88>
 8014f90:	882a      	ldrh	r2, [r5, #0]
 8014f92:	881b      	ldrh	r3, [r3, #0]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	bf86      	itte	hi
 8014f98:	f1c2 020d 	rsbhi	r2, r2, #13
 8014f9c:	18d2      	addhi	r2, r2, r3
 8014f9e:	1a9a      	subls	r2, r3, r2
 8014fa0:	b292      	uxth	r2, r2
 8014fa2:	2a01      	cmp	r2, #1
 8014fa4:	d90e      	bls.n	8014fc4 <SCHEDULE_GetBestRxCellCandidate+0xc4>
 8014fa6:	b193      	cbz	r3, 8014fce <SCHEDULE_GetBestRxCellCandidate+0xce>
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	8802      	ldrh	r2, [r0, #0]
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	bf28      	it	cs
 8014fb2:	320d      	addcs	r2, #13
 8014fb4:	1ad2      	subs	r2, r2, r3
 8014fb6:	b292      	uxth	r2, r2
 8014fb8:	42ba      	cmp	r2, r7
 8014fba:	d203      	bcs.n	8014fc4 <SCHEDULE_GetBestRxCellCandidate+0xc4>
 8014fbc:	2a01      	cmp	r2, #1
 8014fbe:	d008      	beq.n	8014fd2 <SCHEDULE_GetBestRxCellCandidate+0xd2>
 8014fc0:	4617      	mov	r7, r2
 8014fc2:	461c      	mov	r4, r3
 8014fc4:	3601      	adds	r6, #1
 8014fc6:	42b1      	cmp	r1, r6
 8014fc8:	d9be      	bls.n	8014f48 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8014fca:	462b      	mov	r3, r5
 8014fcc:	e7d3      	b.n	8014f76 <SCHEDULE_GetBestRxCellCandidate+0x76>
 8014fce:	230c      	movs	r3, #12
 8014fd0:	e7ec      	b.n	8014fac <SCHEDULE_GetBestRxCellCandidate+0xac>
 8014fd2:	461c      	mov	r4, r3
 8014fd4:	e7b8      	b.n	8014f48 <SCHEDULE_GetBestRxCellCandidate+0x48>
 8014fd6:	bf00      	nop
 8014fd8:	20000040 	.word	0x20000040

08014fdc <1f2424ac27c2cb6c4102eeae83b319f761410057>:
 8014fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fde:	461f      	mov	r7, r3
 8014fe0:	4b0e      	ldr	r3, [pc, #56]	; (801501c <1f2424ac27c2cb6c4102eeae83b319f761410057+0x40>)
 8014fe2:	681c      	ldr	r4, [r3, #0]
 8014fe4:	f504 7453 	add.w	r4, r4, #844	; 0x34c
 8014fe8:	460d      	mov	r5, r1
 8014fea:	4616      	mov	r6, r2
 8014fec:	f7f0 ff4a 	bl	8005e84 <EMBENET_CRITICAL_SECTION_Enter>
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	78c3      	ldrb	r3, [r0, #3]
 8014ff4:	42b3      	cmp	r3, r6
 8014ff6:	d10b      	bne.n	8015010 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x34>
 8014ff8:	8803      	ldrh	r3, [r0, #0]
 8014ffa:	42ab      	cmp	r3, r5
 8014ffc:	d308      	bcc.n	8015010 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x34>
 8014ffe:	803b      	strh	r3, [r7, #0]
 8015000:	9b06      	ldr	r3, [sp, #24]
 8015002:	7882      	ldrb	r2, [r0, #2]
 8015004:	701a      	strb	r2, [r3, #0]
 8015006:	2401      	movs	r4, #1
 8015008:	f7f0 ff5c 	bl	8005ec4 <EMBENET_CRITICAL_SECTION_Exit>
 801500c:	4620      	mov	r0, r4
 801500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015010:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015012:	4284      	cmp	r4, r0
 8015014:	d1ed      	bne.n	8014ff2 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x16>
 8015016:	2400      	movs	r4, #0
 8015018:	e7f6      	b.n	8015008 <1f2424ac27c2cb6c4102eeae83b319f761410057+0x2c>
 801501a:	bf00      	nop
 801501c:	20000040 	.word	0x20000040

08015020 <send_internal>:
 8015020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015022:	4604      	mov	r4, r0
 8015024:	3041      	adds	r0, #65	; 0x41
 8015026:	f7f8 f9d5 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801502a:	b348      	cbz	r0, 8015080 <send_internal+0x60>
 801502c:	2301      	movs	r3, #1
 801502e:	f104 051d 	add.w	r5, r4, #29
 8015032:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015036:	4628      	mov	r0, r5
 8015038:	f7f8 f9cc 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801503c:	b138      	cbz	r0, 801504e <send_internal+0x2e>
 801503e:	4628      	mov	r0, r5
 8015040:	f7f8 fa30 	bl	800d4a4 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 8015044:	b918      	cbnz	r0, 801504e <send_internal+0x2e>
 8015046:	2302      	movs	r3, #2
 8015048:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801504c:	e006      	b.n	801505c <send_internal+0x3c>
 801504e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8015052:	2b02      	cmp	r3, #2
 8015054:	d102      	bne.n	801505c <send_internal+0x3c>
 8015056:	7f63      	ldrb	r3, [r4, #29]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d0f4      	beq.n	8015046 <send_internal+0x26>
 801505c:	2300      	movs	r3, #0
 801505e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8015062:	4668      	mov	r0, sp
 8015064:	f7fe f906 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8015068:	9b00      	ldr	r3, [sp, #0]
 801506a:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 801506e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015072:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8015076:	2001      	movs	r0, #1
 8015078:	2340      	movs	r3, #64	; 0x40
 801507a:	7063      	strb	r3, [r4, #1]
 801507c:	b003      	add	sp, #12
 801507e:	bd30      	pop	{r4, r5, pc}
 8015080:	2304      	movs	r3, #4
 8015082:	e7e1      	b.n	8015048 <send_internal+0x28>

08015084 <225fdc1664c4e3cff7509f058a004348ebce99b7>:
 8015084:	b570      	push	{r4, r5, r6, lr}
 8015086:	b088      	sub	sp, #32
 8015088:	f7f9 fdba 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 801508c:	4604      	mov	r4, r0
 801508e:	f7f7 fbaf 	bl	800c7f0 <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 8015092:	2306      	movs	r3, #6
 8015094:	fb00 3303 	mla	r3, r0, r3, r3
 8015098:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801509c:	fbb6 f3f3 	udiv	r3, r6, r3
 80150a0:	429c      	cmp	r4, r3
 80150a2:	da0f      	bge.n	80150c4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 80150a4:	4b47      	ldr	r3, [pc, #284]	; (80151c4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x140>)
 80150a6:	2211      	movs	r2, #17
 80150a8:	2100      	movs	r1, #0
 80150aa:	a803      	add	r0, sp, #12
 80150ac:	681d      	ldr	r5, [r3, #0]
 80150ae:	f006 ff7b 	bl	801bfa8 <memset>
 80150b2:	f7fe f941 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 80150b6:	b938      	cbnz	r0, 80150c8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x44>
 80150b8:	2050      	movs	r0, #80	; 0x50
 80150ba:	f7f8 fd4d 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 80150be:	2300      	movs	r3, #0
 80150c0:	f8a5 3564 	strh.w	r3, [r5, #1380]	; 0x564
 80150c4:	b008      	add	sp, #32
 80150c6:	bd70      	pop	{r4, r5, r6, pc}
 80150c8:	f004 f832 	bl	8019130 <eada7656be7f8681f934187ead57a12001632399>
 80150cc:	42b0      	cmp	r0, r6
 80150ce:	d0f3      	beq.n	80150b8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x34>
 80150d0:	f004 f884 	bl	80191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d0ef      	beq.n	80150b8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x34>
 80150d8:	f895 3565 	ldrb.w	r3, [r5, #1381]	; 0x565
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d1f1      	bne.n	80150c4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 80150e0:	2050      	movs	r0, #80	; 0x50
 80150e2:	f7f8 fdc9 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 80150e6:	4604      	mov	r4, r0
 80150e8:	b958      	cbnz	r0, 8015102 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x7e>
 80150ea:	2303      	movs	r3, #3
 80150ec:	9301      	str	r3, [sp, #4]
 80150ee:	4b36      	ldr	r3, [pc, #216]	; (80151c8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x144>)
 80150f0:	4a36      	ldr	r2, [pc, #216]	; (80151cc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x148>)
 80150f2:	9302      	str	r3, [sp, #8]
 80150f4:	4619      	mov	r1, r3
 80150f6:	2003      	movs	r0, #3
 80150f8:	b008      	add	sp, #32
 80150fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150fe:	f7fb ba99 	b.w	8010634 <LOGGER_PrintLine>
 8015102:	f245 0350 	movw	r3, #20560	; 0x5050
 8015106:	8003      	strh	r3, [r0, #0]
 8015108:	2121      	movs	r1, #33	; 0x21
 801510a:	f005 fe93 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801510e:	4b30      	ldr	r3, [pc, #192]	; (80151d0 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x14c>)
 8015110:	6862      	ldr	r2, [r4, #4]
 8015112:	f103 0120 	add.w	r1, r3, #32
 8015116:	f853 0b04 	ldr.w	r0, [r3], #4
 801511a:	f842 0b04 	str.w	r0, [r2], #4
 801511e:	428b      	cmp	r3, r1
 8015120:	d1f9      	bne.n	8015116 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x92>
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	7013      	strb	r3, [r2, #0]
 8015126:	f7ff feeb 	bl	8014f00 <SCHEDULE_GetBestRxCellCandidate>
 801512a:	6863      	ldr	r3, [r4, #4]
 801512c:	83d8      	strh	r0, [r3, #30]
 801512e:	f7ff faef 	bl	8014710 <a332c320f50553856ddcee95ff765027b8f3e118>
 8015132:	f895 3566 	ldrb.w	r3, [r5, #1382]	; 0x566
 8015136:	2b00      	cmp	r3, #0
 8015138:	d038      	beq.n	80151ac <225fdc1664c4e3cff7509f058a004348ebce99b7+0x128>
 801513a:	2801      	cmp	r0, #1
 801513c:	d93b      	bls.n	80151b6 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x132>
 801513e:	2300      	movs	r3, #0
 8015140:	f885 3566 	strb.w	r3, [r5, #1382]	; 0x566
 8015144:	6863      	ldr	r3, [r4, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	f883 2020 	strb.w	r2, [r3, #32]
 801514c:	f7ff f830 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8015150:	6863      	ldr	r3, [r4, #4]
 8015152:	7518      	strb	r0, [r3, #20]
 8015154:	f7ff f82c 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8015158:	6863      	ldr	r3, [r4, #4]
 801515a:	0a00      	lsrs	r0, r0, #8
 801515c:	7558      	strb	r0, [r3, #21]
 801515e:	6863      	ldr	r3, [r4, #4]
 8015160:	3304      	adds	r3, #4
 8015162:	2601      	movs	r6, #1
 8015164:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8015168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801516c:	2300      	movs	r3, #0
 801516e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8015172:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
 8015176:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
 801517a:	f884 609d 	strb.w	r6, [r4, #157]	; 0x9d
 801517e:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
 8015182:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8015186:	f7fc f829 	bl	80111dc <281684afe20744fe8e8db0e02bb6f53b74a050bd>
 801518a:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 801518e:	4620      	mov	r0, r4
 8015190:	f7ff ff46 	bl	8015020 <send_internal>
 8015194:	b990      	cbnz	r0, 80151bc <225fdc1664c4e3cff7509f058a004348ebce99b7+0x138>
 8015196:	4620      	mov	r0, r4
 8015198:	f7f8 fe2c 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801519c:	2304      	movs	r3, #4
 801519e:	9301      	str	r3, [sp, #4]
 80151a0:	4b09      	ldr	r3, [pc, #36]	; (80151c8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x144>)
 80151a2:	4a0c      	ldr	r2, [pc, #48]	; (80151d4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x150>)
 80151a4:	9302      	str	r3, [sp, #8]
 80151a6:	4619      	mov	r1, r3
 80151a8:	2004      	movs	r0, #4
 80151aa:	e7a5      	b.n	80150f8 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x74>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d1c9      	bne.n	8015144 <225fdc1664c4e3cff7509f058a004348ebce99b7+0xc0>
 80151b0:	2301      	movs	r3, #1
 80151b2:	f885 3566 	strb.w	r3, [r5, #1382]	; 0x566
 80151b6:	6863      	ldr	r3, [r4, #4]
 80151b8:	2201      	movs	r2, #1
 80151ba:	e7c5      	b.n	8015148 <225fdc1664c4e3cff7509f058a004348ebce99b7+0xc4>
 80151bc:	f885 6565 	strb.w	r6, [r5, #1381]	; 0x565
 80151c0:	e780      	b.n	80150c4 <225fdc1664c4e3cff7509f058a004348ebce99b7+0x40>
 80151c2:	bf00      	nop
 80151c4:	20000040 	.word	0x20000040
 80151c8:	08020f80 	.word	0x08020f80
 80151cc:	0801fc42 	.word	0x0801fc42
 80151d0:	0801ee97 	.word	0x0801ee97
 80151d4:	08020f87 	.word	0x08020f87

080151d8 <45a0de43b00f668f42645b8c08621371fe4b9150>:
 80151d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151da:	b091      	sub	sp, #68	; 0x44
 80151dc:	2100      	movs	r1, #0
 80151de:	2210      	movs	r2, #16
 80151e0:	f10d 0019 	add.w	r0, sp, #25
 80151e4:	f006 fee0 	bl	801bfa8 <memset>
 80151e8:	2302      	movs	r3, #2
 80151ea:	f10d 0119 	add.w	r1, sp, #25
 80151ee:	2000      	movs	r0, #0
 80151f0:	f88d 3018 	strb.w	r3, [sp, #24]
 80151f4:	f7f7 fe32 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80151f8:	b168      	cbz	r0, 8015216 <45a0de43b00f668f42645b8c08621371fe4b9150+0x3e>
 80151fa:	f10d 0119 	add.w	r1, sp, #25
 80151fe:	2000      	movs	r0, #0
 8015200:	f7f7 fe2c 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8015204:	b9a0      	cbnz	r0, 8015230 <45a0de43b00f668f42645b8c08621371fe4b9150+0x58>
 8015206:	466c      	mov	r4, sp
 8015208:	4620      	mov	r0, r4
 801520a:	f7fe f833 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 801520e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015212:	f7f7 fe7d 	bl	800cf10 <aee20a6aed232d40647d21a3bace71ea0c450c20>
 8015216:	4b37      	ldr	r3, [pc, #220]	; (80152f4 <45a0de43b00f668f42645b8c08621371fe4b9150+0x11c>)
 8015218:	681d      	ldr	r5, [r3, #0]
 801521a:	f7fe f88d 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 801521e:	4604      	mov	r4, r0
 8015220:	b960      	cbnz	r0, 801523c <45a0de43b00f668f42645b8c08621371fe4b9150+0x64>
 8015222:	2050      	movs	r0, #80	; 0x50
 8015224:	f7f8 fc98 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8015228:	f8a5 4564 	strh.w	r4, [r5, #1380]	; 0x564
 801522c:	b011      	add	sp, #68	; 0x44
 801522e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015230:	a806      	add	r0, sp, #24
 8015232:	f7ff fb2f 	bl	8014894 <0a6eef3dd890049c6feb9f053ae4732930866b35>
 8015236:	2800      	cmp	r0, #0
 8015238:	d1e5      	bne.n	8015206 <45a0de43b00f668f42645b8c08621371fe4b9150+0x2e>
 801523a:	e7ec      	b.n	8015216 <45a0de43b00f668f42645b8c08621371fe4b9150+0x3e>
 801523c:	f895 3564 	ldrb.w	r3, [r5, #1380]	; 0x564
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1f3      	bne.n	801522c <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 8015244:	ac02      	add	r4, sp, #8
 8015246:	4620      	mov	r0, r4
 8015248:	f7fe f814 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 801524c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015250:	f8d5 056a 	ldr.w	r0, [r5, #1386]	; 0x56a
 8015254:	f895 156e 	ldrb.w	r1, [r5, #1390]	; 0x56e
 8015258:	f7f7 fe14 	bl	800ce84 <0fa1209e048698b86219960838c5b2bdc21151fc>
 801525c:	2800      	cmp	r0, #0
 801525e:	d0e5      	beq.n	801522c <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 8015260:	2302      	movs	r3, #2
 8015262:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015266:	6803      	ldr	r3, [r0, #0]
 8015268:	f8cd 302d 	str.w	r3, [sp, #45]	; 0x2d
 801526c:	6843      	ldr	r3, [r0, #4]
 801526e:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 8015272:	a80b      	add	r0, sp, #44	; 0x2c
 8015274:	f7ff fa62 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8015278:	4604      	mov	r4, r0
 801527a:	2050      	movs	r0, #80	; 0x50
 801527c:	2c00      	cmp	r4, #0
 801527e:	d0d1      	beq.n	8015224 <45a0de43b00f668f42645b8c08621371fe4b9150+0x4c>
 8015280:	f7f8 fcfa 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8015284:	4604      	mov	r4, r0
 8015286:	b948      	cbnz	r0, 801529c <45a0de43b00f668f42645b8c08621371fe4b9150+0xc4>
 8015288:	2303      	movs	r3, #3
 801528a:	9304      	str	r3, [sp, #16]
 801528c:	4b1a      	ldr	r3, [pc, #104]	; (80152f8 <45a0de43b00f668f42645b8c08621371fe4b9150+0x120>)
 801528e:	4a1b      	ldr	r2, [pc, #108]	; (80152fc <45a0de43b00f668f42645b8c08621371fe4b9150+0x124>)
 8015290:	9305      	str	r3, [sp, #20]
 8015292:	4619      	mov	r1, r3
 8015294:	2003      	movs	r0, #3
 8015296:	f7fb f9cd 	bl	8010634 <LOGGER_PrintLine>
 801529a:	e7c7      	b.n	801522c <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 801529c:	f245 0350 	movw	r3, #20560	; 0x5050
 80152a0:	8003      	strh	r3, [r0, #0]
 80152a2:	2301      	movs	r3, #1
 80152a4:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 80152a8:	f100 0241 	add.w	r2, r0, #65	; 0x41
 80152ac:	ab0b      	add	r3, sp, #44	; 0x2c
 80152ae:	af0f      	add	r7, sp, #60	; 0x3c
 80152b0:	461e      	mov	r6, r3
 80152b2:	ce03      	ldmia	r6!, {r0, r1}
 80152b4:	42be      	cmp	r6, r7
 80152b6:	6010      	str	r0, [r2, #0]
 80152b8:	6051      	str	r1, [r2, #4]
 80152ba:	4633      	mov	r3, r6
 80152bc:	f102 0208 	add.w	r2, r2, #8
 80152c0:	d1f6      	bne.n	80152b0 <45a0de43b00f668f42645b8c08621371fe4b9150+0xd8>
 80152c2:	7833      	ldrb	r3, [r6, #0]
 80152c4:	7013      	strb	r3, [r2, #0]
 80152c6:	2305      	movs	r3, #5
 80152c8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80152cc:	2300      	movs	r3, #0
 80152ce:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80152d2:	f7fb ff8b 	bl	80111ec <6339f3934eecab924c4cd30c35957a539872f6f3>
 80152d6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80152da:	4620      	mov	r0, r4
 80152dc:	f7ff fea0 	bl	8015020 <send_internal>
 80152e0:	b918      	cbnz	r0, 80152ea <45a0de43b00f668f42645b8c08621371fe4b9150+0x112>
 80152e2:	4620      	mov	r0, r4
 80152e4:	f7f8 fd86 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80152e8:	e7a0      	b.n	801522c <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 80152ea:	2301      	movs	r3, #1
 80152ec:	f885 3564 	strb.w	r3, [r5, #1380]	; 0x564
 80152f0:	e79c      	b.n	801522c <45a0de43b00f668f42645b8c08621371fe4b9150+0x54>
 80152f2:	bf00      	nop
 80152f4:	20000040 	.word	0x20000040
 80152f8:	08020f80 	.word	0x08020f80
 80152fc:	0801fc42 	.word	0x0801fc42

08015300 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57>:
 8015300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015302:	7ac3      	ldrb	r3, [r0, #11]
 8015304:	2b0c      	cmp	r3, #12
 8015306:	4604      	mov	r4, r0
 8015308:	d10d      	bne.n	8015326 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x26>
 801530a:	f100 050c 	add.w	r5, r0, #12
 801530e:	4628      	mov	r0, r5
 8015310:	f7ff fa6a 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8015314:	f104 000d 	add.w	r0, r4, #13
 8015318:	f7f7 fcc4 	bl	800cca4 <cbc0e88a681a951e559d988b61bbaa7895224382>
 801531c:	2211      	movs	r2, #17
 801531e:	2100      	movs	r1, #0
 8015320:	4628      	mov	r0, r5
 8015322:	f006 fe41 	bl	801bfa8 <memset>
 8015326:	2300      	movs	r3, #0
 8015328:	7960      	ldrb	r0, [r4, #5]
 801532a:	72e3      	strb	r3, [r4, #11]
 801532c:	f7f9 fc08 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8015330:	2304      	movs	r3, #4
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	4b05      	ldr	r3, [pc, #20]	; (801534c <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x4c>)
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	ab02      	add	r3, sp, #8
 801533a:	e913 0003 	ldmdb	r3, {r0, r1}
 801533e:	4a04      	ldr	r2, [pc, #16]	; (8015350 <2c5aa1cbb5cbaefbc2f62010f757fa213ae59f57+0x50>)
 8015340:	b003      	add	sp, #12
 8015342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015346:	f7fb b975 	b.w	8010634 <LOGGER_PrintLine>
 801534a:	bf00      	nop
 801534c:	08020f80 	.word	0x08020f80
 8015350:	08020f99 	.word	0x08020f99

08015354 <ccc806ca1165fb175d70c767b8da618b114a1c9f>:
 8015354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015358:	2a02      	cmp	r2, #2
 801535a:	b08f      	sub	sp, #60	; 0x3c
 801535c:	4607      	mov	r7, r0
 801535e:	4688      	mov	r8, r1
 8015360:	4616      	mov	r6, r2
 8015362:	d00b      	beq.n	801537c <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x28>
 8015364:	2a07      	cmp	r2, #7
 8015366:	d119      	bne.n	801539c <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x48>
 8015368:	2210      	movs	r2, #16
 801536a:	2100      	movs	r1, #0
 801536c:	f10d 0005 	add.w	r0, sp, #5
 8015370:	f006 fe1a 	bl	801bfa8 <memset>
 8015374:	2306      	movs	r3, #6
 8015376:	f88d 3004 	strb.w	r3, [sp, #4]
 801537a:	2603      	movs	r6, #3
 801537c:	1e7b      	subs	r3, r7, #1
 801537e:	2b04      	cmp	r3, #4
 8015380:	d90e      	bls.n	80153a0 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x4c>
 8015382:	2303      	movs	r3, #3
 8015384:	9306      	str	r3, [sp, #24]
 8015386:	4b1c      	ldr	r3, [pc, #112]	; (80153f8 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0xa4>)
 8015388:	4a1c      	ldr	r2, [pc, #112]	; (80153fc <ccc806ca1165fb175d70c767b8da618b114a1c9f+0xa8>)
 801538a:	9307      	str	r3, [sp, #28]
 801538c:	4619      	mov	r1, r3
 801538e:	2003      	movs	r0, #3
 8015390:	f7fb f950 	bl	8010634 <LOGGER_PrintLine>
 8015394:	2000      	movs	r0, #0
 8015396:	b00f      	add	sp, #60	; 0x3c
 8015398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801539c:	2601      	movs	r6, #1
 801539e:	e7ed      	b.n	801537c <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x28>
 80153a0:	2500      	movs	r5, #0
 80153a2:	46c1      	mov	r9, r8
 80153a4:	462c      	mov	r4, r5
 80153a6:	f899 3000 	ldrb.w	r3, [r9]
 80153aa:	b153      	cbz	r3, 80153c2 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x6e>
 80153ac:	f8b9 1001 	ldrh.w	r1, [r9, #1]
 80153b0:	a806      	add	r0, sp, #24
 80153b2:	f7ff f915 	bl	80145e0 <SCHEDULE_GetCellInfo>
 80153b6:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80153ba:	42b3      	cmp	r3, r6
 80153bc:	d1ea      	bne.n	8015394 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x40>
 80153be:	3501      	adds	r5, #1
 80153c0:	b2ed      	uxtb	r5, r5
 80153c2:	1c63      	adds	r3, r4, #1
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	2a05      	cmp	r2, #5
 80153c8:	b25c      	sxtb	r4, r3
 80153ca:	d012      	beq.n	80153f2 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x9e>
 80153cc:	42af      	cmp	r7, r5
 80153ce:	f109 0905 	add.w	r9, r9, #5
 80153d2:	d8e8      	bhi.n	80153a6 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x52>
 80153d4:	42af      	cmp	r7, r5
 80153d6:	d1dd      	bne.n	8015394 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x40>
 80153d8:	4623      	mov	r3, r4
 80153da:	2100      	movs	r1, #0
 80153dc:	b25a      	sxtb	r2, r3
 80153de:	2a05      	cmp	r2, #5
 80153e0:	d101      	bne.n	80153e6 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x92>
 80153e2:	2001      	movs	r0, #1
 80153e4:	e7d7      	b.n	8015396 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x42>
 80153e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80153ea:	3301      	adds	r3, #1
 80153ec:	f808 1002 	strb.w	r1, [r8, r2]
 80153f0:	e7f4      	b.n	80153dc <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x88>
 80153f2:	4614      	mov	r4, r2
 80153f4:	e7ee      	b.n	80153d4 <ccc806ca1165fb175d70c767b8da618b114a1c9f+0x80>
 80153f6:	bf00      	nop
 80153f8:	08020f80 	.word	0x08020f80
 80153fc:	08020fb2 	.word	0x08020fb2

08015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 8015400:	3901      	subs	r1, #1
 8015402:	f100 0308 	add.w	r3, r0, #8
 8015406:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801540a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 801540e:	4283      	cmp	r3, r0
 8015410:	d1f9      	bne.n	8015406 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 8015412:	4770      	bx	lr

08015414 <496ca019b627ff9d4bd45a012282bf5fa5089406>:
 8015414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015418:	2a02      	cmp	r2, #2
 801541a:	b087      	sub	sp, #28
 801541c:	4606      	mov	r6, r0
 801541e:	4688      	mov	r8, r1
 8015420:	4614      	mov	r4, r2
 8015422:	d034      	beq.n	801548e <496ca019b627ff9d4bd45a012282bf5fa5089406+0x7a>
 8015424:	2a07      	cmp	r2, #7
 8015426:	d00e      	beq.n	8015446 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x32>
 8015428:	2a01      	cmp	r2, #1
 801542a:	d030      	beq.n	801548e <496ca019b627ff9d4bd45a012282bf5fa5089406+0x7a>
 801542c:	2303      	movs	r3, #3
 801542e:	9304      	str	r3, [sp, #16]
 8015430:	4b18      	ldr	r3, [pc, #96]	; (8015494 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x80>)
 8015432:	9305      	str	r3, [sp, #20]
 8015434:	ab06      	add	r3, sp, #24
 8015436:	e913 0003 	ldmdb	r3, {r0, r1}
 801543a:	4a17      	ldr	r2, [pc, #92]	; (8015498 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x84>)
 801543c:	b007      	add	sp, #28
 801543e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015442:	f7fb b8f7 	b.w	8010634 <LOGGER_PrintLine>
 8015446:	2403      	movs	r4, #3
 8015448:	2701      	movs	r7, #1
 801544a:	2500      	movs	r5, #0
 801544c:	f10d 0910 	add.w	r9, sp, #16
 8015450:	5d73      	ldrb	r3, [r6, r5]
 8015452:	b1b3      	cbz	r3, 8015482 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x6e>
 8015454:	1973      	adds	r3, r6, r5
 8015456:	4648      	mov	r0, r9
 8015458:	f8b3 b001 	ldrh.w	fp, [r3, #1]
 801545c:	f8b3 a003 	ldrh.w	sl, [r3, #3]
 8015460:	f7fd ff08 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8015464:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015468:	fa5f fa8a 	uxtb.w	sl, sl
 801546c:	9002      	str	r0, [sp, #8]
 801546e:	f88d 100c 	strb.w	r1, [sp, #12]
 8015472:	e9cd a800 	strd	sl, r8, [sp]
 8015476:	463b      	mov	r3, r7
 8015478:	2205      	movs	r2, #5
 801547a:	4621      	mov	r1, r4
 801547c:	4658      	mov	r0, fp
 801547e:	f7fe fea7 	bl	80141d0 <d34d9cc57da987921722d6f0e44d498b73ec396e>
 8015482:	3505      	adds	r5, #5
 8015484:	2d19      	cmp	r5, #25
 8015486:	d1e3      	bne.n	8015450 <496ca019b627ff9d4bd45a012282bf5fa5089406+0x3c>
 8015488:	b007      	add	sp, #28
 801548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801548e:	2700      	movs	r7, #0
 8015490:	e7db      	b.n	801544a <496ca019b627ff9d4bd45a012282bf5fa5089406+0x36>
 8015492:	bf00      	nop
 8015494:	08020f80 	.word	0x08020f80
 8015498:	08020fc5 	.word	0x08020fc5

0801549c <f18386c4166365fe64df7dd56bd097dc60fcee43>:
 801549c:	b570      	push	{r4, r5, r6, lr}
 801549e:	4605      	mov	r5, r0
 80154a0:	460e      	mov	r6, r1
 80154a2:	2400      	movs	r4, #0
 80154a4:	5d2b      	ldrb	r3, [r5, r4]
 80154a6:	b12b      	cbz	r3, 80154b4 <f18386c4166365fe64df7dd56bd097dc60fcee43+0x18>
 80154a8:	192b      	adds	r3, r5, r4
 80154aa:	4631      	mov	r1, r6
 80154ac:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 80154b0:	f7fe ffea 	bl	8014488 <77238aa43a8b504c643ddf656419f5fe633c06fa>
 80154b4:	3405      	adds	r4, #5
 80154b6:	2c19      	cmp	r4, #25
 80154b8:	d1f4      	bne.n	80154a4 <f18386c4166365fe64df7dd56bd097dc60fcee43+0x8>
 80154ba:	bd70      	pop	{r4, r5, r6, pc}

080154bc <fbe24b77062e695b9b69518d2423c2cc606c842f>:
 80154bc:	b570      	push	{r4, r5, r6, lr}
 80154be:	4b11      	ldr	r3, [pc, #68]	; (8015504 <fbe24b77062e695b9b69518d2423c2cc606c842f+0x48>)
 80154c0:	681c      	ldr	r4, [r3, #0]
 80154c2:	4b11      	ldr	r3, [pc, #68]	; (8015508 <fbe24b77062e695b9b69518d2423c2cc606c842f+0x4c>)
 80154c4:	2500      	movs	r5, #0
 80154c6:	224c      	movs	r2, #76	; 0x4c
 80154c8:	4629      	mov	r1, r5
 80154ca:	f204 5064 	addw	r0, r4, #1380	; 0x564
 80154ce:	681e      	ldr	r6, [r3, #0]
 80154d0:	f006 fd6a 	bl	801bfa8 <memset>
 80154d4:	f04f 0300 	mov.w	r3, #0
 80154d8:	f365 0307 	bfi	r3, r5, #0, #8
 80154dc:	f884 356e 	strb.w	r3, [r4, #1390]	; 0x56e
 80154e0:	f8c4 656a 	str.w	r6, [r4, #1386]	; 0x56a
 80154e4:	2001      	movs	r0, #1
 80154e6:	f7f9 fa09 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80154ea:	f884 0567 	strb.w	r0, [r4, #1383]	; 0x567
 80154ee:	2001      	movs	r0, #1
 80154f0:	f7f9 fa04 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80154f4:	f884 0568 	strb.w	r0, [r4, #1384]	; 0x568
 80154f8:	2001      	movs	r0, #1
 80154fa:	f7f9 f9ff 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 80154fe:	f884 0569 	strb.w	r0, [r4, #1385]	; 0x569
 8015502:	bd70      	pop	{r4, r5, r6, pc}
 8015504:	20000040 	.word	0x20000040
 8015508:	0801f088 	.word	0x0801f088

0801550c <5b77f5d059012f38360090be73e77f682e6af1b1>:
 801550c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801550e:	4b10      	ldr	r3, [pc, #64]	; (8015550 <5b77f5d059012f38360090be73e77f682e6af1b1+0x44>)
 8015510:	681c      	ldr	r4, [r3, #0]
 8015512:	f894 6568 	ldrb.w	r6, [r4, #1384]	; 0x568
 8015516:	f7f9 fb73 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 801551a:	b2c0      	uxtb	r0, r0
 801551c:	f204 5564 	addw	r5, r4, #1380	; 0x564
 8015520:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
 8015524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015528:	4342      	muls	r2, r0
 801552a:	4b0a      	ldr	r3, [pc, #40]	; (8015554 <5b77f5d059012f38360090be73e77f682e6af1b1+0x48>)
 801552c:	9500      	str	r5, [sp, #0]
 801552e:	4630      	mov	r0, r6
 8015530:	2100      	movs	r1, #0
 8015532:	f7f9 faf3 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8015536:	4b08      	ldr	r3, [pc, #32]	; (8015558 <5b77f5d059012f38360090be73e77f682e6af1b1+0x4c>)
 8015538:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
 801553c:	691a      	ldr	r2, [r3, #16]
 801553e:	9500      	str	r5, [sp, #0]
 8015540:	210d      	movs	r1, #13
 8015542:	434a      	muls	r2, r1
 8015544:	4b05      	ldr	r3, [pc, #20]	; (801555c <5b77f5d059012f38360090be73e77f682e6af1b1+0x50>)
 8015546:	2100      	movs	r1, #0
 8015548:	f7f9 fae8 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 801554c:	b002      	add	sp, #8
 801554e:	bd70      	pop	{r4, r5, r6, pc}
 8015550:	20000040 	.word	0x20000040
 8015554:	080151d9 	.word	0x080151d9
 8015558:	0801f014 	.word	0x0801f014
 801555c:	08015085 	.word	0x08015085

08015560 <ae19410868335b64a066b6d27dd8944b8c55271b>:
 8015560:	b510      	push	{r4, lr}
 8015562:	4b08      	ldr	r3, [pc, #32]	; (8015584 <ae19410868335b64a066b6d27dd8944b8c55271b+0x24>)
 8015564:	681c      	ldr	r4, [r3, #0]
 8015566:	f894 0568 	ldrb.w	r0, [r4, #1384]	; 0x568
 801556a:	f7f9 fae9 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801556e:	f894 0567 	ldrb.w	r0, [r4, #1383]	; 0x567
 8015572:	f7f9 fae5 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8015576:	f894 0569 	ldrb.w	r0, [r4, #1385]	; 0x569
 801557a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801557e:	f7f9 badf 	b.w	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8015582:	bf00      	nop
 8015584:	20000040 	.word	0x20000040

08015588 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41>:
 8015588:	b510      	push	{r4, lr}
 801558a:	4c07      	ldr	r4, [pc, #28]	; (80155a8 <c2e65bb9a83a19ef15c3f2ab85b29089d354be41+0x20>)
 801558c:	6824      	ldr	r4, [r4, #0]
 801558e:	f8c4 35a8 	str.w	r3, [r4, #1448]	; 0x5a8
 8015592:	9b02      	ldr	r3, [sp, #8]
 8015594:	f8c4 059c 	str.w	r0, [r4, #1436]	; 0x59c
 8015598:	f8c4 15a0 	str.w	r1, [r4, #1440]	; 0x5a0
 801559c:	f8c4 25a4 	str.w	r2, [r4, #1444]	; 0x5a4
 80155a0:	f8c4 35ac 	str.w	r3, [r4, #1452]	; 0x5ac
 80155a4:	bd10      	pop	{r4, pc}
 80155a6:	bf00      	nop
 80155a8:	20000040 	.word	0x20000040

080155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>:
 80155ac:	b510      	push	{r4, lr}
 80155ae:	2350      	movs	r3, #80	; 0x50
 80155b0:	7043      	strb	r3, [r0, #1]
 80155b2:	7803      	ldrb	r3, [r0, #0]
 80155b4:	2201      	movs	r2, #1
 80155b6:	2b90      	cmp	r3, #144	; 0x90
 80155b8:	4604      	mov	r4, r0
 80155ba:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
 80155be:	f04f 0300 	mov.w	r3, #0
 80155c2:	d10c      	bne.n	80155de <84a9c9a6c63997e804410fedf3e4beedf650a414+0x32>
 80155c4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
 80155c8:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
 80155cc:	f7fb fe06 	bl	80111dc <281684afe20744fe8e8db0e02bb6f53b74a050bd>
 80155d0:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80155d4:	4620      	mov	r0, r4
 80155d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155da:	f7ff bd21 	b.w	8015020 <send_internal>
 80155de:	2205      	movs	r2, #5
 80155e0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
 80155e4:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
 80155e8:	f7fb fe00 	bl	80111ec <6339f3934eecab924c4cd30c35957a539872f6f3>
 80155ec:	e7f0      	b.n	80155d0 <84a9c9a6c63997e804410fedf3e4beedf650a414+0x24>
	...

080155f0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928>:
 80155f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f4:	b095      	sub	sp, #84	; 0x54
 80155f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80155fa:	4ba7      	ldr	r3, [pc, #668]	; (8015898 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2a8>)
 80155fc:	681f      	ldr	r7, [r3, #0]
 80155fe:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8015602:	e9dd 981e 	ldrd	r9, r8, [sp, #120]	; 0x78
 8015606:	4606      	mov	r6, r0
 8015608:	468a      	mov	sl, r1
 801560a:	b923      	cbnz	r3, 8015616 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x26>
 801560c:	49a3      	ldr	r1, [pc, #652]	; (801589c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2ac>)
 801560e:	48a4      	ldr	r0, [pc, #656]	; (80158a0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b0>)
 8015610:	22f8      	movs	r2, #248	; 0xf8
 8015612:	f7ec f961 	bl	80018d8 <EXPECT_OnAbortHandler>
 8015616:	f897 556f 	ldrb.w	r5, [r7, #1391]	; 0x56f
 801561a:	b305      	cbz	r5, 801565e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x6e>
 801561c:	2303      	movs	r3, #3
 801561e:	9312      	str	r3, [sp, #72]	; 0x48
 8015620:	4ba0      	ldr	r3, [pc, #640]	; (80158a4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 8015622:	9313      	str	r3, [sp, #76]	; 0x4c
 8015624:	ab14      	add	r3, sp, #80	; 0x50
 8015626:	e913 0003 	ldmdb	r3, {r0, r1}
 801562a:	4a9f      	ldr	r2, [pc, #636]	; (80158a8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b8>)
 801562c:	f7fb f802 	bl	8010634 <LOGGER_PrintLine>
 8015630:	f897 0569 	ldrb.w	r0, [r7, #1385]	; 0x569
 8015634:	f7f9 faba 	bl	800ebac <56445be374e93738432324b7e0ececbd8047647a>
 8015638:	b968      	cbnz	r0, 8015656 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 801563a:	4a9c      	ldr	r2, [pc, #624]	; (80158ac <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2bc>)
 801563c:	f897 0569 	ldrb.w	r0, [r7, #1385]	; 0x569
 8015640:	6912      	ldr	r2, [r2, #16]
 8015642:	4b9b      	ldr	r3, [pc, #620]	; (80158b0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c0>)
 8015644:	f240 11c7 	movw	r1, #455	; 0x1c7
 8015648:	f207 5764 	addw	r7, r7, #1380	; 0x564
 801564c:	434a      	muls	r2, r1
 801564e:	9700      	str	r7, [sp, #0]
 8015650:	2101      	movs	r1, #1
 8015652:	f7f9 fa63 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8015656:	2000      	movs	r0, #0
 8015658:	b015      	add	sp, #84	; 0x54
 801565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565e:	b951      	cbnz	r1, 8015676 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x86>
 8015660:	2303      	movs	r3, #3
 8015662:	9312      	str	r3, [sp, #72]	; 0x48
 8015664:	4a93      	ldr	r2, [pc, #588]	; (80158b4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c4>)
 8015666:	4b8f      	ldr	r3, [pc, #572]	; (80158a4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 8015668:	9313      	str	r3, [sp, #76]	; 0x4c
 801566a:	ab14      	add	r3, sp, #80	; 0x50
 801566c:	e913 0003 	ldmdb	r3, {r0, r1}
 8015670:	f7fa ffe0 	bl	8010634 <LOGGER_PrintLine>
 8015674:	e7ef      	b.n	8015656 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 8015676:	f1b8 0f00 	cmp.w	r8, #0
 801567a:	d107      	bne.n	801568c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x9c>
 801567c:	2802      	cmp	r0, #2
 801567e:	d105      	bne.n	801568c <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x9c>
 8015680:	2303      	movs	r3, #3
 8015682:	9312      	str	r3, [sp, #72]	; 0x48
 8015684:	4b87      	ldr	r3, [pc, #540]	; (80158a4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 8015686:	4a8c      	ldr	r2, [pc, #560]	; (80158b8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2c8>)
 8015688:	9313      	str	r3, [sp, #76]	; 0x4c
 801568a:	e7ee      	b.n	801566a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x7a>
 801568c:	4650      	mov	r0, sl
 801568e:	f7f8 fcef 	bl	800e070 <43f11770a6d1a267a732a77a0ad450aed83746a6>
 8015692:	b110      	cbz	r0, 801569a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xaa>
 8015694:	4650      	mov	r0, sl
 8015696:	f7f8 fd2f 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 801569a:	2053      	movs	r0, #83	; 0x53
 801569c:	f7f8 faec 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 80156a0:	4604      	mov	r4, r0
 80156a2:	b928      	cbnz	r0, 80156b0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xc0>
 80156a4:	2303      	movs	r3, #3
 80156a6:	9312      	str	r3, [sp, #72]	; 0x48
 80156a8:	4b7e      	ldr	r3, [pc, #504]	; (80158a4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2b4>)
 80156aa:	4a84      	ldr	r2, [pc, #528]	; (80158bc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2cc>)
 80156ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80156ae:	e7dc      	b.n	801566a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x7a>
 80156b0:	4683      	mov	fp, r0
 80156b2:	f245 3353 	movw	r3, #21331	; 0x5353
 80156b6:	f82b 3b41 	strh.w	r3, [fp], #65
 80156ba:	f10a 0110 	add.w	r1, sl, #16
 80156be:	4653      	mov	r3, sl
 80156c0:	465a      	mov	r2, fp
 80156c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80156c6:	f842 0b04 	str.w	r0, [r2], #4
 80156ca:	428b      	cmp	r3, r1
 80156cc:	d1f9      	bne.n	80156c2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xd2>
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	7013      	strb	r3, [r2, #0]
 80156d2:	f1b8 0f00 	cmp.w	r8, #0
 80156d6:	d00c      	beq.n	80156f2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x102>
 80156d8:	4643      	mov	r3, r8
 80156da:	f207 5282 	addw	r2, r7, #1410	; 0x582
 80156de:	f108 0118 	add.w	r1, r8, #24
 80156e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80156e6:	f842 0b04 	str.w	r0, [r2], #4
 80156ea:	428b      	cmp	r3, r1
 80156ec:	d1f9      	bne.n	80156e2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0xf2>
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	7013      	strb	r3, [r2, #0]
 80156f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156f4:	f887 3581 	strb.w	r3, [r7, #1409]	; 0x581
 80156f8:	1e73      	subs	r3, r6, #1
 80156fa:	2b02      	cmp	r3, #2
 80156fc:	f200 80ad 	bhi.w	801585a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x26a>
 8015700:	2e01      	cmp	r6, #1
 8015702:	f04f 0314 	mov.w	r3, #20
 8015706:	d04c      	beq.n	80157a2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1b2>
 8015708:	2e02      	cmp	r6, #2
 801570a:	f000 8081 	beq.w	8015810 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x220>
 801570e:	f819 2003 	ldrb.w	r2, [r9, r3]
 8015712:	b1ea      	cbz	r2, 8015750 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x160>
 8015714:	eb09 0203 	add.w	r2, r9, r3
 8015718:	2104      	movs	r1, #4
 801571a:	4620      	mov	r0, r4
 801571c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015720:	f005 fb88 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015726:	6861      	ldr	r1, [r4, #4]
 8015728:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 801572c:	7008      	strb	r0, [r1, #0]
 801572e:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 8015732:	6860      	ldr	r0, [r4, #4]
 8015734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015736:	0a09      	lsrs	r1, r1, #8
 8015738:	7041      	strb	r1, [r0, #1]
 801573a:	6861      	ldr	r1, [r4, #4]
 801573c:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 8015740:	7088      	strb	r0, [r1, #2]
 8015742:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 8015746:	6861      	ldr	r1, [r4, #4]
 8015748:	0a12      	lsrs	r2, r2, #8
 801574a:	3504      	adds	r5, #4
 801574c:	70ca      	strb	r2, [r1, #3]
 801574e:	b2ed      	uxtb	r5, r5
 8015750:	3b05      	subs	r3, #5
 8015752:	1d59      	adds	r1, r3, #5
 8015754:	d1db      	bne.n	801570e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x11e>
 8015756:	2314      	movs	r3, #20
 8015758:	f818 2003 	ldrb.w	r2, [r8, r3]
 801575c:	b1ea      	cbz	r2, 801579a <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1aa>
 801575e:	eb08 0203 	add.w	r2, r8, r3
 8015762:	2104      	movs	r1, #4
 8015764:	4620      	mov	r0, r4
 8015766:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801576a:	f005 fb63 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801576e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015770:	6861      	ldr	r1, [r4, #4]
 8015772:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 8015776:	7008      	strb	r0, [r1, #0]
 8015778:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 801577c:	6860      	ldr	r0, [r4, #4]
 801577e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015780:	0a09      	lsrs	r1, r1, #8
 8015782:	7041      	strb	r1, [r0, #1]
 8015784:	6861      	ldr	r1, [r4, #4]
 8015786:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 801578a:	7088      	strb	r0, [r1, #2]
 801578c:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 8015790:	6861      	ldr	r1, [r4, #4]
 8015792:	0a12      	lsrs	r2, r2, #8
 8015794:	3504      	adds	r5, #4
 8015796:	70ca      	strb	r2, [r1, #3]
 8015798:	b2ed      	uxtb	r5, r5
 801579a:	3b05      	subs	r3, #5
 801579c:	1d5a      	adds	r2, r3, #5
 801579e:	d1db      	bne.n	8015758 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x168>
 80157a0:	e023      	b.n	80157ea <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1fa>
 80157a2:	f819 2003 	ldrb.w	r2, [r9, r3]
 80157a6:	b1ea      	cbz	r2, 80157e4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1f4>
 80157a8:	eb09 0203 	add.w	r2, r9, r3
 80157ac:	2104      	movs	r1, #4
 80157ae:	4620      	mov	r0, r4
 80157b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80157b4:	f005 fb3e 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80157b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80157ba:	6861      	ldr	r1, [r4, #4]
 80157bc:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 80157c0:	7008      	strb	r0, [r1, #0]
 80157c2:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 80157c6:	6860      	ldr	r0, [r4, #4]
 80157c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157ca:	0a09      	lsrs	r1, r1, #8
 80157cc:	7041      	strb	r1, [r0, #1]
 80157ce:	6861      	ldr	r1, [r4, #4]
 80157d0:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 80157d4:	7088      	strb	r0, [r1, #2]
 80157d6:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 80157da:	6861      	ldr	r1, [r4, #4]
 80157dc:	0a12      	lsrs	r2, r2, #8
 80157de:	3504      	adds	r5, #4
 80157e0:	70ca      	strb	r2, [r1, #3]
 80157e2:	b2ed      	uxtb	r5, r5
 80157e4:	3b05      	subs	r3, #5
 80157e6:	1d5a      	adds	r2, r3, #5
 80157e8:	d1db      	bne.n	80157a2 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1b2>
 80157ea:	2101      	movs	r1, #1
 80157ec:	4620      	mov	r0, r4
 80157ee:	f005 fb21 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80157f2:	6863      	ldr	r3, [r4, #4]
 80157f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157f6:	701a      	strb	r2, [r3, #0]
 80157f8:	3501      	adds	r5, #1
 80157fa:	b2ed      	uxtb	r5, r5
 80157fc:	2101      	movs	r1, #1
 80157fe:	4620      	mov	r0, r4
 8015800:	f005 fb18 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015804:	6863      	ldr	r3, [r4, #4]
 8015806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015808:	701a      	strb	r2, [r3, #0]
 801580a:	3501      	adds	r5, #1
 801580c:	b2ed      	uxtb	r5, r5
 801580e:	e059      	b.n	80158c4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2d4>
 8015810:	f818 2003 	ldrb.w	r2, [r8, r3]
 8015814:	b1ea      	cbz	r2, 8015852 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x262>
 8015816:	eb08 0203 	add.w	r2, r8, r3
 801581a:	2104      	movs	r1, #4
 801581c:	4620      	mov	r0, r4
 801581e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015822:	f005 fb07 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015828:	6861      	ldr	r1, [r4, #4]
 801582a:	f8b2 0001 	ldrh.w	r0, [r2, #1]
 801582e:	7008      	strb	r0, [r1, #0]
 8015830:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 8015834:	6860      	ldr	r0, [r4, #4]
 8015836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015838:	0a09      	lsrs	r1, r1, #8
 801583a:	7041      	strb	r1, [r0, #1]
 801583c:	6861      	ldr	r1, [r4, #4]
 801583e:	f8b2 0003 	ldrh.w	r0, [r2, #3]
 8015842:	7088      	strb	r0, [r1, #2]
 8015844:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 8015848:	6861      	ldr	r1, [r4, #4]
 801584a:	0a12      	lsrs	r2, r2, #8
 801584c:	3504      	adds	r5, #4
 801584e:	70ca      	strb	r2, [r1, #3]
 8015850:	b2ed      	uxtb	r5, r5
 8015852:	3b05      	subs	r3, #5
 8015854:	1d58      	adds	r0, r3, #5
 8015856:	d1db      	bne.n	8015810 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x220>
 8015858:	e7c7      	b.n	80157ea <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x1fa>
 801585a:	2e05      	cmp	r6, #5
 801585c:	d130      	bne.n	80158c0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x2d0>
 801585e:	2102      	movs	r1, #2
 8015860:	4620      	mov	r0, r4
 8015862:	f005 fae7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015866:	6863      	ldr	r3, [r4, #4]
 8015868:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801586c:	701a      	strb	r2, [r3, #0]
 801586e:	6863      	ldr	r3, [r4, #4]
 8015870:	2500      	movs	r5, #0
 8015872:	705d      	strb	r5, [r3, #1]
 8015874:	2102      	movs	r1, #2
 8015876:	4620      	mov	r0, r4
 8015878:	f005 fadc 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801587c:	6863      	ldr	r3, [r4, #4]
 801587e:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8015882:	701a      	strb	r2, [r3, #0]
 8015884:	6863      	ldr	r3, [r4, #4]
 8015886:	2101      	movs	r1, #1
 8015888:	705d      	strb	r5, [r3, #1]
 801588a:	4620      	mov	r0, r4
 801588c:	f005 fad2 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015890:	6863      	ldr	r3, [r4, #4]
 8015892:	701d      	strb	r5, [r3, #0]
 8015894:	4635      	mov	r5, r6
 8015896:	e7b1      	b.n	80157fc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x20c>
 8015898:	20000040 	.word	0x20000040
 801589c:	08020fdc 	.word	0x08020fdc
 80158a0:	0802103a 	.word	0x0802103a
 80158a4:	08020f80 	.word	0x08020f80
 80158a8:	0802104b 	.word	0x0802104b
 80158ac:	0801f014 	.word	0x0801f014
 80158b0:	08015301 	.word	0x08015301
 80158b4:	08021077 	.word	0x08021077
 80158b8:	080210b1 	.word	0x080210b1
 80158bc:	0801fc42 	.word	0x0801fc42
 80158c0:	2e07      	cmp	r6, #7
 80158c2:	d19b      	bne.n	80157fc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x20c>
 80158c4:	2102      	movs	r1, #2
 80158c6:	4620      	mov	r0, r4
 80158c8:	f005 fab4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80158cc:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80158d0:	4798      	blx	r3
 80158d2:	6863      	ldr	r3, [r4, #4]
 80158d4:	7018      	strb	r0, [r3, #0]
 80158d6:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80158da:	4798      	blx	r3
 80158dc:	6863      	ldr	r3, [r4, #4]
 80158de:	1200      	asrs	r0, r0, #8
 80158e0:	7058      	strb	r0, [r3, #1]
 80158e2:	2101      	movs	r1, #1
 80158e4:	4620      	mov	r0, r4
 80158e6:	f10a 0a01 	add.w	sl, sl, #1
 80158ea:	f005 faa3 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80158ee:	4650      	mov	r0, sl
 80158f0:	f7f7 f920 	bl	800cb34 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80158f4:	6863      	ldr	r3, [r4, #4]
 80158f6:	2101      	movs	r1, #1
 80158f8:	7018      	strb	r0, [r3, #0]
 80158fa:	4620      	mov	r0, r4
 80158fc:	f005 fa9a 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015900:	6863      	ldr	r3, [r4, #4]
 8015902:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8015906:	701a      	strb	r2, [r3, #0]
 8015908:	2101      	movs	r1, #1
 801590a:	4620      	mov	r0, r4
 801590c:	f005 fa92 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015910:	6863      	ldr	r3, [r4, #4]
 8015912:	2101      	movs	r1, #1
 8015914:	701e      	strb	r6, [r3, #0]
 8015916:	4620      	mov	r0, r4
 8015918:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
 801591c:	f005 fa8a 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8015920:	6862      	ldr	r2, [r4, #4]
 8015922:	2300      	movs	r3, #0
 8015924:	7013      	strb	r3, [r2, #0]
 8015926:	2101      	movs	r1, #1
 8015928:	4620      	mov	r0, r4
 801592a:	f005 fa83 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801592e:	6862      	ldr	r2, [r4, #4]
 8015930:	21c9      	movs	r1, #201	; 0xc9
 8015932:	7011      	strb	r1, [r2, #0]
 8015934:	4620      	mov	r0, r4
 8015936:	2102      	movs	r1, #2
 8015938:	f005 fa7c 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801593c:	6862      	ldr	r2, [r4, #4]
 801593e:	3507      	adds	r5, #7
 8015940:	7015      	strb	r5, [r2, #0]
 8015942:	6862      	ldr	r2, [r4, #4]
 8015944:	21a8      	movs	r1, #168	; 0xa8
 8015946:	7051      	strb	r1, [r2, #1]
 8015948:	2300      	movs	r3, #0
 801594a:	2201      	movs	r2, #1
 801594c:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8015950:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8015954:	f7fa fe48 	bl	80105e8 <LOGGER_StartSection>
 8015958:	2800      	cmp	r0, #0
 801595a:	d03b      	beq.n	80159d4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x3e4>
 801595c:	2305      	movs	r3, #5
 801595e:	9312      	str	r3, [sp, #72]	; 0x48
 8015960:	4b59      	ldr	r3, [pc, #356]	; (8015ac8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d8>)
 8015962:	9313      	str	r3, [sp, #76]	; 0x4c
 8015964:	ab14      	add	r3, sp, #80	; 0x50
 8015966:	e913 0003 	ldmdb	r3, {r0, r1}
 801596a:	f7fa fe45 	bl	80105f8 <LOGGER_PrintHeader>
 801596e:	1eb3      	subs	r3, r6, #2
 8015970:	2b01      	cmp	r3, #1
 8015972:	d82b      	bhi.n	80159cc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x3dc>
 8015974:	4651      	mov	r1, sl
 8015976:	a810      	add	r0, sp, #64	; 0x40
 8015978:	f7ff fd42 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 801597c:	f8b8 3017 	ldrh.w	r3, [r8, #23]
 8015980:	930a      	str	r3, [sp, #40]	; 0x28
 8015982:	f8b8 3015 	ldrh.w	r3, [r8, #21]
 8015986:	9309      	str	r3, [sp, #36]	; 0x24
 8015988:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 801598c:	9308      	str	r3, [sp, #32]
 801598e:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8015992:	9307      	str	r3, [sp, #28]
 8015994:	f8b8 300d 	ldrh.w	r3, [r8, #13]
 8015998:	9306      	str	r3, [sp, #24]
 801599a:	f8b8 300b 	ldrh.w	r3, [r8, #11]
 801599e:	9305      	str	r3, [sp, #20]
 80159a0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80159a4:	9304      	str	r3, [sp, #16]
 80159a6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80159aa:	9303      	str	r3, [sp, #12]
 80159ac:	f8b8 3003 	ldrh.w	r3, [r8, #3]
 80159b0:	9302      	str	r3, [sp, #8]
 80159b2:	f8b8 3001 	ldrh.w	r3, [r8, #1]
 80159b6:	4945      	ldr	r1, [pc, #276]	; (8015acc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4dc>)
 80159b8:	9301      	str	r3, [sp, #4]
 80159ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80159c2:	4843      	ldr	r0, [pc, #268]	; (8015ad0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4e0>)
 80159c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80159c8:	f7fa fdfc 	bl	80105c4 <LOGGER_Print>
 80159cc:	f7fa fdf2 	bl	80105b4 <LOGGER_PrintNL>
 80159d0:	f7fa fe10 	bl	80105f4 <LOGGER_EndSection>
 80159d4:	f7fa fe08 	bl	80105e8 <LOGGER_StartSection>
 80159d8:	2800      	cmp	r0, #0
 80159da:	d03c      	beq.n	8015a56 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x466>
 80159dc:	2305      	movs	r3, #5
 80159de:	9312      	str	r3, [sp, #72]	; 0x48
 80159e0:	4b39      	ldr	r3, [pc, #228]	; (8015ac8 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d8>)
 80159e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80159e4:	ab14      	add	r3, sp, #80	; 0x50
 80159e6:	e913 0003 	ldmdb	r3, {r0, r1}
 80159ea:	f7fa fe05 	bl	80105f8 <LOGGER_PrintHeader>
 80159ee:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d12b      	bne.n	8015a4e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x45e>
 80159f6:	4651      	mov	r1, sl
 80159f8:	a810      	add	r0, sp, #64	; 0x40
 80159fa:	f7ff fd01 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80159fe:	f8b9 3017 	ldrh.w	r3, [r9, #23]
 8015a02:	930a      	str	r3, [sp, #40]	; 0x28
 8015a04:	f8b9 3015 	ldrh.w	r3, [r9, #21]
 8015a08:	9309      	str	r3, [sp, #36]	; 0x24
 8015a0a:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8015a0e:	9308      	str	r3, [sp, #32]
 8015a10:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8015a14:	9307      	str	r3, [sp, #28]
 8015a16:	f8b9 300d 	ldrh.w	r3, [r9, #13]
 8015a1a:	9306      	str	r3, [sp, #24]
 8015a1c:	f8b9 300b 	ldrh.w	r3, [r9, #11]
 8015a20:	9305      	str	r3, [sp, #20]
 8015a22:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8015a26:	9304      	str	r3, [sp, #16]
 8015a28:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8015a2c:	9303      	str	r3, [sp, #12]
 8015a2e:	f8b9 3003 	ldrh.w	r3, [r9, #3]
 8015a32:	9302      	str	r3, [sp, #8]
 8015a34:	f8b9 3001 	ldrh.w	r3, [r9, #1]
 8015a38:	4924      	ldr	r1, [pc, #144]	; (8015acc <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4dc>)
 8015a3a:	9301      	str	r3, [sp, #4]
 8015a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8015a44:	4823      	ldr	r0, [pc, #140]	; (8015ad4 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4e4>)
 8015a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015a4a:	f7fa fdbb 	bl	80105c4 <LOGGER_Print>
 8015a4e:	f7fa fdb1 	bl	80105b4 <LOGGER_PrintNL>
 8015a52:	f7fa fdcf 	bl	80105f4 <LOGGER_EndSection>
 8015a56:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8015a5a:	f10b 0210 	add.w	r2, fp, #16
 8015a5e:	f85b 1b04 	ldr.w	r1, [fp], #4
 8015a62:	f843 1b04 	str.w	r1, [r3], #4
 8015a66:	4593      	cmp	fp, r2
 8015a68:	d1f9      	bne.n	8015a5e <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x46e>
 8015a6a:	f89b 2000 	ldrb.w	r2, [fp]
 8015a6e:	701a      	strb	r2, [r3, #0]
 8015a70:	4620      	mov	r0, r4
 8015a72:	f7ff fd9b 	bl	80155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>
 8015a76:	b318      	cbz	r0, 8015ac0 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4d0>
 8015a78:	3e01      	subs	r6, #1
 8015a7a:	2e06      	cmp	r6, #6
 8015a7c:	f63f adec 	bhi.w	8015658 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x68>
 8015a80:	a301      	add	r3, pc, #4	; (adr r3, 8015a88 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x498>)
 8015a82:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8015a86:	bf00      	nop
 8015a88:	08015aa5 	.word	0x08015aa5
 8015a8c:	08015aad 	.word	0x08015aad
 8015a90:	08015ab1 	.word	0x08015ab1
 8015a94:	08015ab5 	.word	0x08015ab5
 8015a98:	08015ab9 	.word	0x08015ab9
 8015a9c:	08015659 	.word	0x08015659
 8015aa0:	08015abd 	.word	0x08015abd
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	f887 356f 	strb.w	r3, [r7, #1391]	; 0x56f
 8015aaa:	e5d5      	b.n	8015658 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x68>
 8015aac:	2302      	movs	r3, #2
 8015aae:	e7fa      	b.n	8015aa6 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8015ab0:	2303      	movs	r3, #3
 8015ab2:	e7f8      	b.n	8015aa6 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8015ab4:	2304      	movs	r3, #4
 8015ab6:	e7f6      	b.n	8015aa6 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8015ab8:	2305      	movs	r3, #5
 8015aba:	e7f4      	b.n	8015aa6 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8015abc:	2306      	movs	r3, #6
 8015abe:	e7f2      	b.n	8015aa6 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x4b6>
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f7f8 f997 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015ac6:	e5c6      	b.n	8015656 <14badbfcf8ba87e6cb548e87226eea3b20d9e928+0x66>
 8015ac8:	08020f80 	.word	0x08020f80
 8015acc:	0802172c 	.word	0x0802172c
 8015ad0:	080210e4 	.word	0x080210e4
 8015ad4:	08021157 	.word	0x08021157

08015ad8 <249d70512359d3b556e86d60c45850a37e74e9ce>:
 8015ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015adc:	4d98      	ldr	r5, [pc, #608]	; (8015d40 <249d70512359d3b556e86d60c45850a37e74e9ce+0x268>)
 8015ade:	b089      	sub	sp, #36	; 0x24
 8015ae0:	682f      	ldr	r7, [r5, #0]
 8015ae2:	f7f8 fa7d 	bl	800dfe0 <207e15ee7bccb2eb76dd4c1d27604170dc079160>
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	b960      	cbnz	r0, 8015b04 <249d70512359d3b556e86d60c45850a37e74e9ce+0x2c>
 8015aea:	2302      	movs	r3, #2
 8015aec:	9306      	str	r3, [sp, #24]
 8015aee:	4b95      	ldr	r3, [pc, #596]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015af0:	9307      	str	r3, [sp, #28]
 8015af2:	ab08      	add	r3, sp, #32
 8015af4:	e913 0003 	ldmdb	r3, {r0, r1}
 8015af8:	4a93      	ldr	r2, [pc, #588]	; (8015d48 <249d70512359d3b556e86d60c45850a37e74e9ce+0x270>)
 8015afa:	b009      	add	sp, #36	; 0x24
 8015afc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b00:	f7fa bd98 	b.w	8010634 <LOGGER_PrintLine>
 8015b04:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
 8015b08:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
 8015b0c:	2350      	movs	r3, #80	; 0x50
 8015b0e:	7043      	strb	r3, [r0, #1]
 8015b10:	1f53      	subs	r3, r2, #5
 8015b12:	425a      	negs	r2, r3
 8015b14:	415a      	adcs	r2, r3
 8015b16:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015b1a:	f100 0642 	add.w	r6, r0, #66	; 0x42
 8015b1e:	3057      	adds	r0, #87	; 0x57
 8015b20:	9000      	str	r0, [sp, #0]
 8015b22:	b323      	cbz	r3, 8015b6e <249d70512359d3b556e86d60c45850a37e74e9ce+0x96>
 8015b24:	2301      	movs	r3, #1
 8015b26:	4630      	mov	r0, r6
 8015b28:	f7f7 f848 	bl	800cbbc <8c07271647b7d6eded14e64818e8777967155b78>
 8015b2c:	7823      	ldrb	r3, [r4, #0]
 8015b2e:	2b53      	cmp	r3, #83	; 0x53
 8015b30:	d036      	beq.n	8015ba0 <249d70512359d3b556e86d60c45850a37e74e9ce+0xc8>
 8015b32:	2b90      	cmp	r3, #144	; 0x90
 8015b34:	d015      	beq.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015b36:	2b50      	cmp	r3, #80	; 0x50
 8015b38:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8015b3c:	f040 80f9 	bne.w	8015d32 <249d70512359d3b556e86d60c45850a37e74e9ce+0x25a>
 8015b40:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8015b44:	b9eb      	cbnz	r3, 8015b82 <249d70512359d3b556e86d60c45850a37e74e9ce+0xaa>
 8015b46:	b949      	cbnz	r1, 8015b5c <249d70512359d3b556e86d60c45850a37e74e9ce+0x84>
 8015b48:	2304      	movs	r3, #4
 8015b4a:	9306      	str	r3, [sp, #24]
 8015b4c:	4b7d      	ldr	r3, [pc, #500]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015b4e:	9307      	str	r3, [sp, #28]
 8015b50:	ab08      	add	r3, sp, #32
 8015b52:	e913 0003 	ldmdb	r3, {r0, r1}
 8015b56:	4a7d      	ldr	r2, [pc, #500]	; (8015d4c <249d70512359d3b556e86d60c45850a37e74e9ce+0x274>)
 8015b58:	f7fa fd6c 	bl	8010634 <LOGGER_PrintLine>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f887 3565 	strb.w	r3, [r7, #1381]	; 0x565
 8015b62:	4620      	mov	r0, r4
 8015b64:	b009      	add	sp, #36	; 0x24
 8015b66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b6a:	f7f8 b943 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015b6e:	4630      	mov	r0, r6
 8015b70:	f7f7 f824 	bl	800cbbc <8c07271647b7d6eded14e64818e8777967155b78>
 8015b74:	f104 011d 	add.w	r1, r4, #29
 8015b78:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8015b7c:	f004 ff1c 	bl	801a9b8 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc>
 8015b80:	e7d4      	b.n	8015b2c <249d70512359d3b556e86d60c45850a37e74e9ce+0x54>
 8015b82:	b949      	cbnz	r1, 8015b98 <249d70512359d3b556e86d60c45850a37e74e9ce+0xc0>
 8015b84:	2304      	movs	r3, #4
 8015b86:	9306      	str	r3, [sp, #24]
 8015b88:	4b6e      	ldr	r3, [pc, #440]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015b8a:	9307      	str	r3, [sp, #28]
 8015b8c:	ab08      	add	r3, sp, #32
 8015b8e:	e913 0003 	ldmdb	r3, {r0, r1}
 8015b92:	4a6f      	ldr	r2, [pc, #444]	; (8015d50 <249d70512359d3b556e86d60c45850a37e74e9ce+0x278>)
 8015b94:	f7fa fd4e 	bl	8010634 <LOGGER_PrintLine>
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f887 3564 	strb.w	r3, [r7, #1380]	; 0x564
 8015b9e:	e7e0      	b.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015ba0:	682d      	ldr	r5, [r5, #0]
 8015ba2:	7063      	strb	r3, [r4, #1]
 8015ba4:	4631      	mov	r1, r6
 8015ba6:	a802      	add	r0, sp, #8
 8015ba8:	f894 7040 	ldrb.w	r7, [r4, #64]	; 0x40
 8015bac:	f7ff fc28 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8015bb0:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d147      	bne.n	8015c48 <249d70512359d3b556e86d60c45850a37e74e9ce+0x170>
 8015bb8:	b9af      	cbnz	r7, 8015be6 <249d70512359d3b556e86d60c45850a37e74e9ce+0x10e>
 8015bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bbe:	f885 756f 	strb.w	r7, [r5, #1391]	; 0x56f
 8015bc2:	2303      	movs	r3, #3
 8015bc4:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8015bc8:	9306      	str	r3, [sp, #24]
 8015bca:	e9cd 0100 	strd	r0, r1, [sp]
 8015bce:	4b5d      	ldr	r3, [pc, #372]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015bd0:	9307      	str	r3, [sp, #28]
 8015bd2:	4b60      	ldr	r3, [pc, #384]	; (8015d54 <249d70512359d3b556e86d60c45850a37e74e9ce+0x27c>)
 8015bd4:	a908      	add	r1, sp, #32
 8015bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bda:	4a5f      	ldr	r2, [pc, #380]	; (8015d58 <249d70512359d3b556e86d60c45850a37e74e9ce+0x280>)
 8015bdc:	e911 0003 	ldmdb	r1, {r0, r1}
 8015be0:	f7fa fd28 	bl	8010634 <LOGGER_PrintLine>
 8015be4:	e7bd      	b.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015be6:	f895 356f 	ldrb.w	r3, [r5, #1391]	; 0x56f
 8015bea:	2b06      	cmp	r3, #6
 8015bec:	d821      	bhi.n	8015c32 <249d70512359d3b556e86d60c45850a37e74e9ce+0x15a>
 8015bee:	e8df f003 	tbb	[pc, r3]
 8015bf2:	0407      	.short	0x0407
 8015bf4:	1a1c1816 	.word	0x1a1c1816
 8015bf8:	1e          	.byte	0x1e
 8015bf9:	00          	.byte	0x00
 8015bfa:	2307      	movs	r3, #7
 8015bfc:	f885 356f 	strb.w	r3, [r5, #1391]	; 0x56f
 8015c00:	4a56      	ldr	r2, [pc, #344]	; (8015d5c <249d70512359d3b556e86d60c45850a37e74e9ce+0x284>)
 8015c02:	f895 0569 	ldrb.w	r0, [r5, #1385]	; 0x569
 8015c06:	6912      	ldr	r2, [r2, #16]
 8015c08:	4b55      	ldr	r3, [pc, #340]	; (8015d60 <249d70512359d3b556e86d60c45850a37e74e9ce+0x288>)
 8015c0a:	f205 5564 	addw	r5, r5, #1380	; 0x564
 8015c0e:	f240 11c7 	movw	r1, #455	; 0x1c7
 8015c12:	434a      	muls	r2, r1
 8015c14:	9500      	str	r5, [sp, #0]
 8015c16:	2101      	movs	r1, #1
 8015c18:	f7f8 ff80 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8015c1c:	e7a1      	b.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015c1e:	2308      	movs	r3, #8
 8015c20:	e7ec      	b.n	8015bfc <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8015c22:	2309      	movs	r3, #9
 8015c24:	e7ea      	b.n	8015bfc <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8015c26:	230b      	movs	r3, #11
 8015c28:	e7e8      	b.n	8015bfc <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8015c2a:	230a      	movs	r3, #10
 8015c2c:	e7e6      	b.n	8015bfc <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8015c2e:	230c      	movs	r3, #12
 8015c30:	e7e4      	b.n	8015bfc <249d70512359d3b556e86d60c45850a37e74e9ce+0x124>
 8015c32:	2301      	movs	r3, #1
 8015c34:	9306      	str	r3, [sp, #24]
 8015c36:	4b43      	ldr	r3, [pc, #268]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015c38:	9307      	str	r3, [sp, #28]
 8015c3a:	ab08      	add	r3, sp, #32
 8015c3c:	e913 0003 	ldmdb	r3, {r0, r1}
 8015c40:	4a48      	ldr	r2, [pc, #288]	; (8015d64 <249d70512359d3b556e86d60c45850a37e74e9ce+0x28c>)
 8015c42:	f7fa fcf7 	bl	8010634 <LOGGER_PrintLine>
 8015c46:	e7db      	b.n	8015c00 <249d70512359d3b556e86d60c45850a37e74e9ce+0x128>
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d18a      	bne.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015c4c:	2f00      	cmp	r7, #0
 8015c4e:	d063      	beq.n	8015d18 <249d70512359d3b556e86d60c45850a37e74e9ce+0x240>
 8015c50:	4631      	mov	r1, r6
 8015c52:	a804      	add	r0, sp, #16
 8015c54:	f7ff fbd4 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8015c58:	4630      	mov	r0, r6
 8015c5a:	f7f6 fffd 	bl	800cc58 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>
 8015c5e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	f47f af7d 	bne.w	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015c68:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d107      	bne.n	8015c80 <249d70512359d3b556e86d60c45850a37e74e9ce+0x1a8>
 8015c70:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8015c74:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8015c78:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8015c7c:	f7ff fbca 	bl	8015414 <496ca019b627ff9d4bd45a012282bf5fa5089406>
 8015c80:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d105      	bne.n	8015c94 <249d70512359d3b556e86d60c45850a37e74e9ce+0x1bc>
 8015c88:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8015c8c:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8015c90:	f7ff fc04 	bl	801549c <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8015c94:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	d122      	bne.n	8015ce2 <249d70512359d3b556e86d60c45850a37e74e9ce+0x20a>
 8015c9c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>
 8015ca0:	f8cd 801c 	str.w	r8, [sp, #28]
 8015ca4:	f04f 0905 	mov.w	r9, #5
 8015ca8:	f8cd 9018 	str.w	r9, [sp, #24]
 8015cac:	ad06      	add	r5, sp, #24
 8015cae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015cb2:	4a2d      	ldr	r2, [pc, #180]	; (8015d68 <249d70512359d3b556e86d60c45850a37e74e9ce+0x290>)
 8015cb4:	f104 0741 	add.w	r7, r4, #65	; 0x41
 8015cb8:	f7fa fcbc 	bl	8010634 <LOGGER_PrintLine>
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8015cc2:	f7ff fbeb 	bl	801549c <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8015cc6:	e9cd 9806 	strd	r9, r8, [sp, #24]
 8015cca:	4a28      	ldr	r2, [pc, #160]	; (8015d6c <249d70512359d3b556e86d60c45850a37e74e9ce+0x294>)
 8015ccc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015cd0:	f7fa fcb0 	bl	8010634 <LOGGER_PrintLine>
 8015cd4:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8015cd8:	4639      	mov	r1, r7
 8015cda:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8015cde:	f7ff fb99 	bl	8015414 <496ca019b627ff9d4bd45a012282bf5fa5089406>
 8015ce2:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8015ce6:	2b07      	cmp	r3, #7
 8015ce8:	f47f af3b 	bne.w	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015cec:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8015cf0:	f7fe fd7a 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	f7f6 ffd5 	bl	800cca4 <cbc0e88a681a951e559d988b61bbaa7895224382>
 8015cfa:	2305      	movs	r3, #5
 8015cfc:	9306      	str	r3, [sp, #24]
 8015cfe:	4b11      	ldr	r3, [pc, #68]	; (8015d44 <249d70512359d3b556e86d60c45850a37e74e9ce+0x26c>)
 8015d00:	9307      	str	r3, [sp, #28]
 8015d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d06:	e9cd 2300 	strd	r2, r3, [sp]
 8015d0a:	ab08      	add	r3, sp, #32
 8015d0c:	e913 0003 	ldmdb	r3, {r0, r1}
 8015d10:	4a17      	ldr	r2, [pc, #92]	; (8015d70 <249d70512359d3b556e86d60c45850a37e74e9ce+0x298>)
 8015d12:	f7fa fc8f 	bl	8010634 <LOGGER_PrintLine>
 8015d16:	e724      	b.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015d18:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8015d1c:	2b07      	cmp	r3, #7
 8015d1e:	f47f af20 	bne.w	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015d22:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8015d26:	f7fe fd5f 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f7f6 ffba 	bl	800cca4 <cbc0e88a681a951e559d988b61bbaa7895224382>
 8015d30:	e717      	b.n	8015b62 <249d70512359d3b556e86d60c45850a37e74e9ce+0x8a>
 8015d32:	4620      	mov	r0, r4
 8015d34:	b009      	add	sp, #36	; 0x24
 8015d36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d3a:	f001 bcb9 	b.w	80176b0 <c4cc1e8c684869221cde02c1ffd97d6034352506>
 8015d3e:	bf00      	nop
 8015d40:	20000040 	.word	0x20000040
 8015d44:	08020f80 	.word	0x08020f80
 8015d48:	080211c6 	.word	0x080211c6
 8015d4c:	080211eb 	.word	0x080211eb
 8015d50:	08021201 	.word	0x08021201
 8015d54:	0802172c 	.word	0x0802172c
 8015d58:	08021213 	.word	0x08021213
 8015d5c:	0801f014 	.word	0x0801f014
 8015d60:	08015301 	.word	0x08015301
 8015d64:	0802123d 	.word	0x0802123d
 8015d68:	08021266 	.word	0x08021266
 8015d6c:	08021276 	.word	0x08021276
 8015d70:	08021283 	.word	0x08021283

08015d74 <b5c72b6730fdfd332fa9751af01c9df74e6e3448>:
 8015d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d78:	b097      	sub	sp, #92	; 0x5c
 8015d7a:	f7f8 f955 	bl	800e028 <52883b33bb80ca8d67a0717f5cdfbf4b90874f00>
 8015d7e:	4604      	mov	r4, r0
 8015d80:	b958      	cbnz	r0, 8015d9a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x26>
 8015d82:	2304      	movs	r3, #4
 8015d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d86:	4a7d      	ldr	r2, [pc, #500]	; (8015f7c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x208>)
 8015d88:	4b7d      	ldr	r3, [pc, #500]	; (8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8015d8a:	9310      	str	r3, [sp, #64]	; 0x40
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	2004      	movs	r0, #4
 8015d90:	b017      	add	sp, #92	; 0x5c
 8015d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d96:	f7fa bc4d 	b.w	8010634 <LOGGER_PrintLine>
 8015d9a:	2350      	movs	r3, #80	; 0x50
 8015d9c:	7043      	strb	r3, [r0, #1]
 8015d9e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8015da2:	f100 0842 	add.w	r8, r0, #66	; 0x42
 8015da6:	b9b3      	cbnz	r3, 8015dd6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x62>
 8015da8:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d112      	bne.n	8015dd6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x62>
 8015db0:	7a02      	ldrb	r2, [r0, #8]
 8015db2:	6841      	ldr	r1, [r0, #4]
 8015db4:	4640      	mov	r0, r8
 8015db6:	f7f9 f997 	bl	800f0e8 <19861f752ed5b4a4fab486514c3b7aa2c914e6fa>
 8015dba:	b930      	cbnz	r0, 8015dca <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8015dbc:	7a23      	ldrb	r3, [r4, #8]
 8015dbe:	6862      	ldr	r2, [r4, #4]
 8015dc0:	f104 0157 	add.w	r1, r4, #87	; 0x57
 8015dc4:	4640      	mov	r0, r8
 8015dc6:	f7f9 fc23 	bl	800f610 <27342039fe058efec7af5218a4abe449221e7bb4>
 8015dca:	4620      	mov	r0, r4
 8015dcc:	b017      	add	sp, #92	; 0x5c
 8015dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd2:	f7f8 b80f 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015dd6:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8015dda:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8015dde:	f994 10b6 	ldrsb.w	r1, [r4, #182]	; 0xb6
 8015de2:	fab2 f282 	clz	r2, r2
 8015de6:	0952      	lsrs	r2, r2, #5
 8015de8:	9201      	str	r2, [sp, #4]
 8015dea:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8015dee:	9200      	str	r2, [sp, #0]
 8015df0:	4640      	mov	r0, r8
 8015df2:	f104 0257 	add.w	r2, r4, #87	; 0x57
 8015df6:	f7f7 f9b7 	bl	800d168 <9f1a6cf98ed84541f8f0a98d41c73f676d47aa86>
 8015dfa:	b940      	cbnz	r0, 8015e0e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9a>
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f7f7 fff9 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8015e02:	2304      	movs	r3, #4
 8015e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e06:	4b5e      	ldr	r3, [pc, #376]	; (8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8015e08:	4a5e      	ldr	r2, [pc, #376]	; (8015f84 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x210>)
 8015e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8015e0c:	e7be      	b.n	8015d8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x18>
 8015e0e:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8015e12:	2b05      	cmp	r3, #5
 8015e14:	d002      	beq.n	8015e1c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa8>
 8015e16:	3b02      	subs	r3, #2
 8015e18:	2b01      	cmp	r3, #1
 8015e1a:	d822      	bhi.n	8015e62 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xee>
 8015e1c:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 8015e20:	f8cd 8000 	str.w	r8, [sp]
 8015e24:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 8015e28:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
 8015e2c:	f7f6 ff7a 	bl	800cd24 <e5d2a5998d8277723156e3d7efef427ee7af0c3f>
 8015e30:	4603      	mov	r3, r0
 8015e32:	b148      	cbz	r0, 8015e48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd4>
 8015e34:	2305      	movs	r3, #5
 8015e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e38:	4b51      	ldr	r3, [pc, #324]	; (8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8015e3a:	4a53      	ldr	r2, [pc, #332]	; (8015f88 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x214>)
 8015e3c:	9310      	str	r3, [sp, #64]	; 0x40
 8015e3e:	4619      	mov	r1, r3
 8015e40:	2005      	movs	r0, #5
 8015e42:	f7fa fbf7 	bl	8010634 <LOGGER_PrintLine>
 8015e46:	e7c0      	b.n	8015dca <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8015e48:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 8015e4c:	f8cd 8000 	str.w	r8, [sp]
 8015e50:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 8015e54:	f8d4 2057 	ldr.w	r2, [r4, #87]	; 0x57
 8015e58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015e5c:	430b      	orrs	r3, r1
 8015e5e:	f7f6 ff3f 	bl	800cce0 <5e760e12acdfba35bd9ad67595126b5a8623f934>
 8015e62:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	f040 85fe 	bne.w	8016a68 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcf4>
 8015e6c:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 8015e70:	2900      	cmp	r1, #0
 8015e72:	d06b      	beq.n	8015f4c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d8>
 8015e74:	6863      	ldr	r3, [r4, #4]
 8015e76:	8819      	ldrh	r1, [r3, #0]
 8015e78:	f401 4278 	and.w	r2, r1, #63488	; 0xf800
 8015e7c:	f5b2 4f28 	cmp.w	r2, #43008	; 0xa800
 8015e80:	d007      	beq.n	8015e92 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x11e>
 8015e82:	2303      	movs	r3, #3
 8015e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e86:	4a41      	ldr	r2, [pc, #260]	; (8015f8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x218>)
 8015e88:	4b3d      	ldr	r3, [pc, #244]	; (8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8015e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	2003      	movs	r0, #3
 8015e90:	e7d7      	b.n	8015e42 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xce>
 8015e92:	789a      	ldrb	r2, [r3, #2]
 8015e94:	2ac9      	cmp	r2, #201	; 0xc9
 8015e96:	d1f4      	bne.n	8015e82 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x10e>
 8015e98:	78df      	ldrb	r7, [r3, #3]
 8015e9a:	093a      	lsrs	r2, r7, #4
 8015e9c:	2a03      	cmp	r2, #3
 8015e9e:	d106      	bne.n	8015eae <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x13a>
 8015ea0:	4b37      	ldr	r3, [pc, #220]	; (8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>)
 8015ea2:	920f      	str	r2, [sp, #60]	; 0x3c
 8015ea4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015ea6:	4a39      	ldr	r2, [pc, #228]	; (8015f8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x218>)
 8015ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8015eaa:	4619      	mov	r1, r3
 8015eac:	e7c9      	b.n	8015e42 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xce>
 8015eae:	f3c1 000a 	ubfx	r0, r1, #0, #11
 8015eb2:	f893 a005 	ldrb.w	sl, [r3, #5]
 8015eb6:	9009      	str	r0, [sp, #36]	; 0x24
 8015eb8:	7918      	ldrb	r0, [r3, #4]
 8015eba:	799b      	ldrb	r3, [r3, #6]
 8015ebc:	9306      	str	r3, [sp, #24]
 8015ebe:	b2cb      	uxtb	r3, r1
 8015ec0:	9307      	str	r3, [sp, #28]
 8015ec2:	4b33      	ldr	r3, [pc, #204]	; (8015f90 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x21c>)
 8015ec4:	9004      	str	r0, [sp, #16]
 8015ec6:	681e      	ldr	r6, [r3, #0]
 8015ec8:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 8015ecc:	b143      	cbz	r3, 8015ee0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8015ece:	f8d6 35a4 	ldr.w	r3, [r6, #1444]	; 0x5a4
 8015ed2:	b12b      	cbz	r3, 8015ee0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8015ed4:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 8015ed8:	b113      	cbz	r3, 8015ee0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x16c>
 8015eda:	f8d6 35a8 	ldr.w	r3, [r6, #1448]	; 0x5a8
 8015ede:	b92b      	cbnz	r3, 8015eec <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x178>
 8015ee0:	492c      	ldr	r1, [pc, #176]	; (8015f94 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x220>)
 8015ee2:	482d      	ldr	r0, [pc, #180]	; (8015f98 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x224>)
 8015ee4:	f240 424d 	movw	r2, #1101	; 0x44d
 8015ee8:	f7eb fcf6 	bl	80018d8 <EXPECT_OnAbortHandler>
 8015eec:	2a00      	cmp	r2, #0
 8015eee:	f040 83dd 	bne.w	80166ac <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x938>
 8015ef2:	4641      	mov	r1, r8
 8015ef4:	a80c      	add	r0, sp, #48	; 0x30
 8015ef6:	f7ff fa83 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8015efa:	2305      	movs	r3, #5
 8015efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015efe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f02:	e9cd 2300 	strd	r2, r3, [sp]
 8015f06:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015f80 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x20c>
 8015f0a:	9a04      	ldr	r2, [sp, #16]
 8015f0c:	4b23      	ldr	r3, [pc, #140]	; (8015f9c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x228>)
 8015f0e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8015f12:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
 8015f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f1a:	4a21      	ldr	r2, [pc, #132]	; (8015fa0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x22c>)
 8015f1c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f20:	f7fa fb88 	bl	8010634 <LOGGER_PrintLine>
 8015f24:	f7f8 f8cc 	bl	800e0c0 <794cbfdf72fe426231c38719436bf778a99748c2>
 8015f28:	2805      	cmp	r0, #5
 8015f2a:	d80d      	bhi.n	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8015f2c:	2053      	movs	r0, #83	; 0x53
 8015f2e:	f7f7 fea3 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8015f32:	4605      	mov	r5, r0
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d137      	bne.n	8015fa8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x234>
 8015f38:	2303      	movs	r3, #3
 8015f3a:	e9cd 3b0f 	strd	r3, fp, [sp, #60]	; 0x3c
 8015f3e:	4a19      	ldr	r2, [pc, #100]	; (8015fa4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x230>)
 8015f40:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f44:	f7fa fb76 	bl	8010634 <LOGGER_PrintLine>
 8015f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f4a:	3102      	adds	r1, #2
 8015f4c:	b2c9      	uxtb	r1, r1
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f004 ffb0 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8015f54:	2300      	movs	r3, #0
 8015f56:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 8015f5a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8015f5e:	2b03      	cmp	r3, #3
 8015f60:	f63f af33 	bhi.w	8015dca <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8015f64:	a201      	add	r2, pc, #4	; (adr r2, 8015f6c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1f8>)
 8015f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f6a:	bf00      	nop
 8015f6c:	08015dcb 	.word	0x08015dcb
 8015f70:	08016a6f 	.word	0x08016a6f
 8015f74:	08016a89 	.word	0x08016a89
 8015f78:	08016a97 	.word	0x08016a97
 8015f7c:	0802129b 	.word	0x0802129b
 8015f80:	08020f80 	.word	0x08020f80
 8015f84:	080212bd 	.word	0x080212bd
 8015f88:	080212ed 	.word	0x080212ed
 8015f8c:	080212fb 	.word	0x080212fb
 8015f90:	20000040 	.word	0x20000040
 8015f94:	08020fdc 	.word	0x08020fdc
 8015f98:	0802130e 	.word	0x0802130e
 8015f9c:	0802172c 	.word	0x0802172c
 8015fa0:	08021320 	.word	0x08021320
 8015fa4:	0801fc42 	.word	0x0801fc42
 8015fa8:	f100 0379 	add.w	r3, r0, #121	; 0x79
 8015fac:	4618      	mov	r0, r3
 8015fae:	2219      	movs	r2, #25
 8015fb0:	2100      	movs	r1, #0
 8015fb2:	9308      	str	r3, [sp, #32]
 8015fb4:	f005 fff8 	bl	801bfa8 <memset>
 8015fb8:	2219      	movs	r2, #25
 8015fba:	2100      	movs	r1, #0
 8015fbc:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8015fc0:	f005 fff2 	bl	801bfa8 <memset>
 8015fc4:	462b      	mov	r3, r5
 8015fc6:	f245 3253 	movw	r2, #21331	; 0x5353
 8015fca:	f104 0941 	add.w	r9, r4, #65	; 0x41
 8015fce:	f823 2b41 	strh.w	r2, [r3], #65
 8015fd2:	f104 0151 	add.w	r1, r4, #81	; 0x51
 8015fd6:	464a      	mov	r2, r9
 8015fd8:	f852 0b04 	ldr.w	r0, [r2], #4
 8015fdc:	f843 0b04 	str.w	r0, [r3], #4
 8015fe0:	428a      	cmp	r2, r1
 8015fe2:	d1f9      	bne.n	8015fd8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x264>
 8015fe4:	7812      	ldrb	r2, [r2, #0]
 8015fe6:	701a      	strb	r2, [r3, #0]
 8015fe8:	2f00      	cmp	r7, #0
 8015fea:	d05e      	beq.n	80160aa <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x336>
 8015fec:	2303      	movs	r3, #3
 8015fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ff0:	4bb3      	ldr	r3, [pc, #716]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8015ff2:	4ab4      	ldr	r2, [pc, #720]	; (80162c4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x550>)
 8015ff4:	9310      	str	r3, [sp, #64]	; 0x40
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	2003      	movs	r0, #3
 8015ffa:	f7fa fb1b 	bl	8010634 <LOGGER_PrintLine>
 8015ffe:	23ff      	movs	r3, #255	; 0xff
 8016000:	9303      	str	r3, [sp, #12]
 8016002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016006:	2700      	movs	r7, #0
 8016008:	9305      	str	r3, [sp, #20]
 801600a:	f04f 0b04 	mov.w	fp, #4
 801600e:	9b04      	ldr	r3, [sp, #16]
 8016010:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
 8016014:	9b05      	ldr	r3, [sp, #20]
 8016016:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 801601a:	9b03      	ldr	r3, [sp, #12]
 801601c:	f885 b096 	strb.w	fp, [r5, #150]	; 0x96
 8016020:	f003 0303 	and.w	r3, r3, #3
 8016024:	2b03      	cmp	r3, #3
 8016026:	bf1e      	ittt	ne
 8016028:	9b03      	ldrne	r3, [sp, #12]
 801602a:	f083 0303 	eorne.w	r3, r3, #3
 801602e:	9303      	strne	r3, [sp, #12]
 8016030:	9b03      	ldr	r3, [sp, #12]
 8016032:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
 8016036:	2101      	movs	r1, #1
 8016038:	4628      	mov	r0, r5
 801603a:	f004 fefb 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801603e:	686b      	ldr	r3, [r5, #4]
 8016040:	9a06      	ldr	r2, [sp, #24]
 8016042:	701a      	strb	r2, [r3, #0]
 8016044:	2101      	movs	r1, #1
 8016046:	4628      	mov	r0, r5
 8016048:	f004 fef4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801604c:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 8016050:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8016054:	4798      	blx	r3
 8016056:	2101      	movs	r1, #1
 8016058:	f888 0000 	strb.w	r0, [r8]
 801605c:	4628      	mov	r0, r5
 801605e:	f004 fee9 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016062:	686b      	ldr	r3, [r5, #4]
 8016064:	2101      	movs	r1, #1
 8016066:	f883 b000 	strb.w	fp, [r3]
 801606a:	4628      	mov	r0, r5
 801606c:	f004 fee2 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016070:	686b      	ldr	r3, [r5, #4]
 8016072:	2210      	movs	r2, #16
 8016074:	701a      	strb	r2, [r3, #0]
 8016076:	2101      	movs	r1, #1
 8016078:	4628      	mov	r0, r5
 801607a:	f004 fedb 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801607e:	686b      	ldr	r3, [r5, #4]
 8016080:	22c9      	movs	r2, #201	; 0xc9
 8016082:	701a      	strb	r2, [r3, #0]
 8016084:	2102      	movs	r1, #2
 8016086:	4628      	mov	r0, r5
 8016088:	f004 fed4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801608c:	686b      	ldr	r3, [r5, #4]
 801608e:	3705      	adds	r7, #5
 8016090:	701f      	strb	r7, [r3, #0]
 8016092:	686b      	ldr	r3, [r5, #4]
 8016094:	22a8      	movs	r2, #168	; 0xa8
 8016096:	705a      	strb	r2, [r3, #1]
 8016098:	2301      	movs	r3, #1
 801609a:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
 801609e:	f885 3093 	strb.w	r3, [r5, #147]	; 0x93
 80160a2:	4628      	mov	r0, r5
 80160a4:	f7ff fa82 	bl	80155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>
 80160a8:	e74e      	b.n	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80160aa:	f8d6 359c 	ldr.w	r3, [r6, #1436]	; 0x59c
 80160ae:	4798      	blx	r3
 80160b0:	4582      	cmp	sl, r0
 80160b2:	d010      	beq.n	80160d6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x362>
 80160b4:	2303      	movs	r3, #3
 80160b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80160b8:	4b81      	ldr	r3, [pc, #516]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 80160ba:	4a83      	ldr	r2, [pc, #524]	; (80162c8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x554>)
 80160bc:	9310      	str	r3, [sp, #64]	; 0x40
 80160be:	4619      	mov	r1, r3
 80160c0:	2003      	movs	r0, #3
 80160c2:	f7fa fab7 	bl	8010634 <LOGGER_PrintLine>
 80160c6:	23ff      	movs	r3, #255	; 0xff
 80160c8:	9303      	str	r3, [sp, #12]
 80160ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160ce:	9305      	str	r3, [sp, #20]
 80160d0:	f04f 0b05 	mov.w	fp, #5
 80160d4:	e79b      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80160d6:	4640      	mov	r0, r8
 80160d8:	f7f6 fd2c 	bl	800cb34 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80160dc:	9b06      	ldr	r3, [sp, #24]
 80160de:	4283      	cmp	r3, r0
 80160e0:	d018      	beq.n	8016114 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3a0>
 80160e2:	9b04      	ldr	r3, [sp, #16]
 80160e4:	2b07      	cmp	r3, #7
 80160e6:	d015      	beq.n	8016114 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3a0>
 80160e8:	2303      	movs	r3, #3
 80160ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80160ec:	4640      	mov	r0, r8
 80160ee:	4b74      	ldr	r3, [pc, #464]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 80160f0:	9310      	str	r3, [sp, #64]	; 0x40
 80160f2:	f7f6 fd1f 	bl	800cb34 <0a8a8543f799df9767389ce496f81ab8433a71f4>
 80160f6:	9b06      	ldr	r3, [sp, #24]
 80160f8:	9000      	str	r0, [sp, #0]
 80160fa:	4a74      	ldr	r2, [pc, #464]	; (80162cc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x558>)
 80160fc:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8016100:	f7fa fa98 	bl	8010634 <LOGGER_PrintLine>
 8016104:	23ff      	movs	r3, #255	; 0xff
 8016106:	9303      	str	r3, [sp, #12]
 8016108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801610c:	9305      	str	r3, [sp, #20]
 801610e:	f04f 0b06 	mov.w	fp, #6
 8016112:	e77c      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8016114:	f896 856f 	ldrb.w	r8, [r6, #1391]	; 0x56f
 8016118:	f1b8 0f00 	cmp.w	r8, #0
 801611c:	d010      	beq.n	8016140 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3cc>
 801611e:	2303      	movs	r3, #3
 8016120:	930f      	str	r3, [sp, #60]	; 0x3c
 8016122:	4b67      	ldr	r3, [pc, #412]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8016124:	4a6a      	ldr	r2, [pc, #424]	; (80162d0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x55c>)
 8016126:	9310      	str	r3, [sp, #64]	; 0x40
 8016128:	4619      	mov	r1, r3
 801612a:	2003      	movs	r0, #3
 801612c:	f7fa fa82 	bl	8010634 <LOGGER_PrintLine>
 8016130:	23ff      	movs	r3, #255	; 0xff
 8016132:	9303      	str	r3, [sp, #12]
 8016134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016138:	9305      	str	r3, [sp, #20]
 801613a:	f04f 0b08 	mov.w	fp, #8
 801613e:	e766      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8016140:	f8d6 35a4 	ldr.w	r3, [r6, #1444]	; 0x5a4
 8016144:	4798      	blx	r3
 8016146:	4683      	mov	fp, r0
 8016148:	b188      	cbz	r0, 801616e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3fa>
 801614a:	2303      	movs	r3, #3
 801614c:	930f      	str	r3, [sp, #60]	; 0x3c
 801614e:	4b5c      	ldr	r3, [pc, #368]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8016150:	4a60      	ldr	r2, [pc, #384]	; (80162d4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x560>)
 8016152:	9310      	str	r3, [sp, #64]	; 0x40
 8016154:	4619      	mov	r1, r3
 8016156:	2003      	movs	r0, #3
 8016158:	f7fa fa6c 	bl	8010634 <LOGGER_PrintLine>
 801615c:	23ff      	movs	r3, #255	; 0xff
 801615e:	9303      	str	r3, [sp, #12]
 8016160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016164:	4647      	mov	r7, r8
 8016166:	9305      	str	r3, [sp, #20]
 8016168:	f04f 0b02 	mov.w	fp, #2
 801616c:	e74f      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 801616e:	6863      	ldr	r3, [r4, #4]
 8016170:	f8b3 2007 	ldrh.w	r2, [r3, #7]
 8016174:	9205      	str	r2, [sp, #20]
 8016176:	9a04      	ldr	r2, [sp, #16]
 8016178:	2a07      	cmp	r2, #7
 801617a:	f000 8291 	beq.w	80166a0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x92c>
 801617e:	7a5a      	ldrb	r2, [r3, #9]
 8016180:	9203      	str	r2, [sp, #12]
 8016182:	f002 0e03 	and.w	lr, r2, #3
 8016186:	9a04      	ldr	r2, [sp, #16]
 8016188:	2a05      	cmp	r2, #5
 801618a:	d162      	bne.n	8016252 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4de>
 801618c:	f1be 0f03 	cmp.w	lr, #3
 8016190:	f8b3 800b 	ldrh.w	r8, [r3, #11]
 8016194:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8016198:	9307      	str	r3, [sp, #28]
 801619a:	bf16      	itet	ne
 801619c:	9b03      	ldrne	r3, [sp, #12]
 801619e:	f8dd a00c 	ldreq.w	sl, [sp, #12]
 80161a2:	f083 0a03 	eorne.w	sl, r3, #3
 80161a6:	f04f 0900 	mov.w	r9, #0
 80161aa:	9b07      	ldr	r3, [sp, #28]
 80161ac:	ea4f 0789 	mov.w	r7, r9, lsl #2
 80161b0:	4599      	cmp	r9, r3
 80161b2:	b2ff      	uxtb	r7, r7
 80161b4:	da34      	bge.n	8016220 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4ac>
 80161b6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	9805      	ldr	r0, [sp, #20]
 80161be:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80161c2:	4652      	mov	r2, sl
 80161c4:	4641      	mov	r1, r8
 80161c6:	f7fe ff09 	bl	8014fdc <1f2424ac27c2cb6c4102eeae83b319f761410057>
 80161ca:	b1f0      	cbz	r0, 801620a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x496>
 80161cc:	2104      	movs	r1, #4
 80161ce:	4628      	mov	r0, r5
 80161d0:	f004 fe30 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80161d4:	686b      	ldr	r3, [r5, #4]
 80161d6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80161da:	701a      	strb	r2, [r3, #0]
 80161dc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80161e0:	686a      	ldr	r2, [r5, #4]
 80161e2:	0a1b      	lsrs	r3, r3, #8
 80161e4:	7053      	strb	r3, [r2, #1]
 80161e6:	686b      	ldr	r3, [r5, #4]
 80161e8:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80161ec:	709a      	strb	r2, [r3, #2]
 80161ee:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 80161f2:	686b      	ldr	r3, [r5, #4]
 80161f4:	2200      	movs	r2, #0
 80161f6:	f108 0801 	add.w	r8, r8, #1
 80161fa:	f109 0901 	add.w	r9, r9, #1
 80161fe:	70da      	strb	r2, [r3, #3]
 8016200:	fa1f f888 	uxth.w	r8, r8
 8016204:	fa0f f989 	sxth.w	r9, r9
 8016208:	e7cf      	b.n	80161aa <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x436>
 801620a:	2303      	movs	r3, #3
 801620c:	930f      	str	r3, [sp, #60]	; 0x3c
 801620e:	4b2c      	ldr	r3, [pc, #176]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8016210:	4a31      	ldr	r2, [pc, #196]	; (80162d8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x564>)
 8016212:	9310      	str	r3, [sp, #64]	; 0x40
 8016214:	4619      	mov	r1, r3
 8016216:	2003      	movs	r0, #3
 8016218:	f7fa fa0c 	bl	8010634 <LOGGER_PrintLine>
 801621c:	f04f 0b01 	mov.w	fp, #1
 8016220:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8016224:	9300      	str	r3, [sp, #0]
 8016226:	9805      	ldr	r0, [sp, #20]
 8016228:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801622c:	4652      	mov	r2, sl
 801622e:	4641      	mov	r1, r8
 8016230:	f7fe fed4 	bl	8014fdc <1f2424ac27c2cb6c4102eeae83b319f761410057>
 8016234:	2800      	cmp	r0, #0
 8016236:	f47f aeea 	bne.w	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 801623a:	2303      	movs	r3, #3
 801623c:	930f      	str	r3, [sp, #60]	; 0x3c
 801623e:	4b20      	ldr	r3, [pc, #128]	; (80162c0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x54c>)
 8016240:	4a25      	ldr	r2, [pc, #148]	; (80162d8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x564>)
 8016242:	9310      	str	r3, [sp, #64]	; 0x40
 8016244:	4619      	mov	r1, r3
 8016246:	2003      	movs	r0, #3
 8016248:	f7fa f9f4 	bl	8010634 <LOGGER_PrintLine>
 801624c:	f04f 0b01 	mov.w	fp, #1
 8016250:	e6dd      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8016252:	9a04      	ldr	r2, [sp, #16]
 8016254:	2a04      	cmp	r2, #4
 8016256:	d141      	bne.n	80162dc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x568>
 8016258:	f1be 0f03 	cmp.w	lr, #3
 801625c:	bf14      	ite	ne
 801625e:	9b03      	ldrne	r3, [sp, #12]
 8016260:	f8dd a00c 	ldreq.w	sl, [sp, #12]
 8016264:	f04f 0900 	mov.w	r9, #0
 8016268:	bf18      	it	ne
 801626a:	f083 0a03 	eorne.w	sl, r3, #3
 801626e:	464f      	mov	r7, r9
 8016270:	46c8      	mov	r8, r9
 8016272:	f7fd ff9d 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 8016276:	fa0f f389 	sxth.w	r3, r9
 801627a:	4283      	cmp	r3, r0
 801627c:	db0a      	blt.n	8016294 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x520>
 801627e:	2102      	movs	r1, #2
 8016280:	4628      	mov	r0, r5
 8016282:	f004 fdd7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8016286:	686b      	ldr	r3, [r5, #4]
 8016288:	701f      	strb	r7, [r3, #0]
 801628a:	686b      	ldr	r3, [r5, #4]
 801628c:	0a3f      	lsrs	r7, r7, #8
 801628e:	705f      	strb	r7, [r3, #1]
 8016290:	2702      	movs	r7, #2
 8016292:	e6bc      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8016294:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	9805      	ldr	r0, [sp, #20]
 801629c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80162a0:	4652      	mov	r2, sl
 80162a2:	4641      	mov	r1, r8
 80162a4:	f7fe fe9a 	bl	8014fdc <1f2424ac27c2cb6c4102eeae83b319f761410057>
 80162a8:	b138      	cbz	r0, 80162ba <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x546>
 80162aa:	f8bd 802e 	ldrh.w	r8, [sp, #46]	; 0x2e
 80162ae:	3701      	adds	r7, #1
 80162b0:	f108 0801 	add.w	r8, r8, #1
 80162b4:	b2bf      	uxth	r7, r7
 80162b6:	fa1f f888 	uxth.w	r8, r8
 80162ba:	f109 0901 	add.w	r9, r9, #1
 80162be:	e7d8      	b.n	8016272 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x4fe>
 80162c0:	08020f80 	.word	0x08020f80
 80162c4:	0802133d 	.word	0x0802133d
 80162c8:	08021350 	.word	0x08021350
 80162cc:	08021364 	.word	0x08021364
 80162d0:	0802138f 	.word	0x0802138f
 80162d4:	080213b7 	.word	0x080213b7
 80162d8:	080213cc 	.word	0x080213cc
 80162dc:	7a9f      	ldrb	r7, [r3, #10]
 80162de:	9b07      	ldr	r3, [sp, #28]
 80162e0:	f1a3 0a09 	sub.w	sl, r3, #9
 80162e4:	9b04      	ldr	r3, [sp, #16]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	fa5f fa8a 	uxtb.w	sl, sl
 80162ec:	f040 808d 	bne.w	801640a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x696>
 80162f0:	f7fe fa0e 	bl	8014710 <a332c320f50553856ddcee95ff765027b8f3e118>
 80162f4:	9007      	str	r0, [sp, #28]
 80162f6:	4648      	mov	r0, r9
 80162f8:	f7fe fa42 	bl	8014780 <ee504f8deafedb03386eec1c989207132bd15110>
 80162fc:	9b07      	ldr	r3, [sp, #28]
 80162fe:	429f      	cmp	r7, r3
 8016300:	d97b      	bls.n	80163fa <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x686>
 8016302:	2304      	movs	r3, #4
 8016304:	930f      	str	r3, [sp, #60]	; 0x3c
 8016306:	4ab9      	ldr	r2, [pc, #740]	; (80165ec <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x878>)
 8016308:	4bb9      	ldr	r3, [pc, #740]	; (80165f0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 801630a:	9310      	str	r3, [sp, #64]	; 0x40
 801630c:	4619      	mov	r1, r3
 801630e:	2004      	movs	r0, #4
 8016310:	f7fa f990 	bl	8010634 <LOGGER_PrintLine>
 8016314:	2700      	movs	r7, #0
 8016316:	e67a      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 8016318:	6862      	ldr	r2, [r4, #4]
 801631a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801631e:	442b      	add	r3, r5
 8016320:	5c12      	ldrb	r2, [r2, r0]
 8016322:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
 8016326:	6861      	ldr	r1, [r4, #4]
 8016328:	4401      	add	r1, r0
 801632a:	7849      	ldrb	r1, [r1, #1]
 801632c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016330:	f8a3 2061 	strh.w	r2, [r3, #97]	; 0x61
 8016334:	6861      	ldr	r1, [r4, #4]
 8016336:	4401      	add	r1, r0
 8016338:	7889      	ldrb	r1, [r1, #2]
 801633a:	f8a3 1063 	strh.w	r1, [r3, #99]	; 0x63
 801633e:	6862      	ldr	r2, [r4, #4]
 8016340:	4402      	add	r2, r0
 8016342:	78d2      	ldrb	r2, [r2, #3]
 8016344:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8016348:	9a04      	ldr	r2, [sp, #16]
 801634a:	f8a3 1063 	strh.w	r1, [r3, #99]	; 0x63
 801634e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8016352:	f1ab 0304 	sub.w	r3, fp, #4
 8016356:	fa5f fb83 	uxtb.w	fp, r3
 801635a:	ea4f 0088 	mov.w	r0, r8, lsl #2
 801635e:	300b      	adds	r0, #11
 8016360:	fa0f f388 	sxth.w	r3, r8
 8016364:	b2c0      	uxtb	r0, r0
 8016366:	f108 0801 	add.w	r8, r8, #1
 801636a:	f1bb 0f00 	cmp.w	fp, #0
 801636e:	d1d3      	bne.n	8016318 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a4>
 8016370:	1e7b      	subs	r3, r7, #1
 8016372:	2b04      	cmp	r3, #4
 8016374:	d843      	bhi.n	80163fe <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x68a>
 8016376:	46d8      	mov	r8, fp
 8016378:	f04f 0960 	mov.w	r9, #96	; 0x60
 801637c:	eb05 0309 	add.w	r3, r5, r9
 8016380:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8016384:	f7fe f9a4 	bl	80146d0 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 8016388:	b130      	cbz	r0, 8016398 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x624>
 801638a:	4547      	cmp	r7, r8
 801638c:	bf86      	itte	hi
 801638e:	f108 0801 	addhi.w	r8, r8, #1
 8016392:	fa5f f888 	uxtbhi.w	r8, r8
 8016396:	2000      	movls	r0, #0
 8016398:	f805 0009 	strb.w	r0, [r5, r9]
 801639c:	f109 0905 	add.w	r9, r9, #5
 80163a0:	f1b9 0f79 	cmp.w	r9, #121	; 0x79
 80163a4:	d1ea      	bne.n	801637c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x608>
 80163a6:	f1b8 0f00 	cmp.w	r8, #0
 80163aa:	d028      	beq.n	80163fe <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x68a>
 80163ac:	2700      	movs	r7, #0
 80163ae:	f04f 0904 	mov.w	r9, #4
 80163b2:	f105 0a60 	add.w	sl, r5, #96	; 0x60
 80163b6:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80163ba:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80163be:	b1c3      	cbz	r3, 80163f2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x67e>
 80163c0:	44a8      	add	r8, r5
 80163c2:	2104      	movs	r1, #4
 80163c4:	4628      	mov	r0, r5
 80163c6:	f004 fd35 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80163ca:	686b      	ldr	r3, [r5, #4]
 80163cc:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80163d0:	701a      	strb	r2, [r3, #0]
 80163d2:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80163d6:	686b      	ldr	r3, [r5, #4]
 80163d8:	0a12      	lsrs	r2, r2, #8
 80163da:	705a      	strb	r2, [r3, #1]
 80163dc:	686b      	ldr	r3, [r5, #4]
 80163de:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80163e2:	709a      	strb	r2, [r3, #2]
 80163e4:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80163e8:	686b      	ldr	r3, [r5, #4]
 80163ea:	0a12      	lsrs	r2, r2, #8
 80163ec:	3704      	adds	r7, #4
 80163ee:	70da      	strb	r2, [r3, #3]
 80163f0:	b2ff      	uxtb	r7, r7
 80163f2:	f1b9 0901 	subs.w	r9, r9, #1
 80163f6:	d2de      	bcs.n	80163b6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x642>
 80163f8:	e609      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80163fa:	46d3      	mov	fp, sl
 80163fc:	e7ad      	b.n	801635a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5e6>
 80163fe:	2304      	movs	r3, #4
 8016400:	930f      	str	r3, [sp, #60]	; 0x3c
 8016402:	4b7b      	ldr	r3, [pc, #492]	; (80165f0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 8016404:	4a7b      	ldr	r2, [pc, #492]	; (80165f4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x880>)
 8016406:	9310      	str	r3, [sp, #64]	; 0x40
 8016408:	e780      	b.n	801630c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x598>
 801640a:	9b04      	ldr	r3, [sp, #16]
 801640c:	2b02      	cmp	r3, #2
 801640e:	d170      	bne.n	80164f2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x77e>
 8016410:	4602      	mov	r2, r0
 8016412:	2001      	movs	r0, #1
 8016414:	e021      	b.n	801645a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x6e6>
 8016416:	6861      	ldr	r1, [r4, #4]
 8016418:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801641c:	44ac      	add	ip, r5
 801641e:	f811 8003 	ldrb.w	r8, [r1, r3]
 8016422:	f8ac 807a 	strh.w	r8, [ip, #122]	; 0x7a
 8016426:	6861      	ldr	r1, [r4, #4]
 8016428:	4419      	add	r1, r3
 801642a:	f1aa 0a04 	sub.w	sl, sl, #4
 801642e:	7849      	ldrb	r1, [r1, #1]
 8016430:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
 8016434:	f8ac 807a 	strh.w	r8, [ip, #122]	; 0x7a
 8016438:	6861      	ldr	r1, [r4, #4]
 801643a:	4419      	add	r1, r3
 801643c:	fa5f fa8a 	uxtb.w	sl, sl
 8016440:	f891 8002 	ldrb.w	r8, [r1, #2]
 8016444:	f8ac 807c 	strh.w	r8, [ip, #124]	; 0x7c
 8016448:	6861      	ldr	r1, [r4, #4]
 801644a:	4419      	add	r1, r3
 801644c:	78cb      	ldrb	r3, [r1, #3]
 801644e:	f88c 0079 	strb.w	r0, [ip, #121]	; 0x79
 8016452:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
 8016456:	f8ac 807c 	strh.w	r8, [ip, #124]	; 0x7c
 801645a:	0093      	lsls	r3, r2, #2
 801645c:	330b      	adds	r3, #11
 801645e:	fa0f fc82 	sxth.w	ip, r2
 8016462:	b2db      	uxtb	r3, r3
 8016464:	3201      	adds	r2, #1
 8016466:	f1ba 0f00 	cmp.w	sl, #0
 801646a:	d1d4      	bne.n	8016416 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x6a2>
 801646c:	f1be 0f03 	cmp.w	lr, #3
 8016470:	bf14      	ite	ne
 8016472:	9b03      	ldrne	r3, [sp, #12]
 8016474:	9a03      	ldreq	r2, [sp, #12]
 8016476:	9908      	ldr	r1, [sp, #32]
 8016478:	bf18      	it	ne
 801647a:	f083 0203 	eorne.w	r2, r3, #3
 801647e:	4638      	mov	r0, r7
 8016480:	f7fe ff68 	bl	8015354 <ccc806ca1165fb175d70c767b8da618b114a1c9f>
 8016484:	b340      	cbz	r0, 80164d8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x764>
 8016486:	2700      	movs	r7, #0
 8016488:	f04f 0904 	mov.w	r9, #4
 801648c:	f105 0a79 	add.w	sl, r5, #121	; 0x79
 8016490:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 8016494:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8016498:	b1c3      	cbz	r3, 80164cc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x758>
 801649a:	44a8      	add	r8, r5
 801649c:	2104      	movs	r1, #4
 801649e:	4628      	mov	r0, r5
 80164a0:	f004 fcc8 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80164a4:	686b      	ldr	r3, [r5, #4]
 80164a6:	f8b8 207a 	ldrh.w	r2, [r8, #122]	; 0x7a
 80164aa:	701a      	strb	r2, [r3, #0]
 80164ac:	f8b8 207a 	ldrh.w	r2, [r8, #122]	; 0x7a
 80164b0:	686b      	ldr	r3, [r5, #4]
 80164b2:	0a12      	lsrs	r2, r2, #8
 80164b4:	705a      	strb	r2, [r3, #1]
 80164b6:	686b      	ldr	r3, [r5, #4]
 80164b8:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
 80164bc:	709a      	strb	r2, [r3, #2]
 80164be:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
 80164c2:	686b      	ldr	r3, [r5, #4]
 80164c4:	0a12      	lsrs	r2, r2, #8
 80164c6:	3704      	adds	r7, #4
 80164c8:	70da      	strb	r2, [r3, #3]
 80164ca:	b2ff      	uxtb	r7, r7
 80164cc:	f1b9 0901 	subs.w	r9, r9, #1
 80164d0:	d2de      	bcs.n	8016490 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x71c>
 80164d2:	f04f 0b00 	mov.w	fp, #0
 80164d6:	e59a      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80164d8:	2303      	movs	r3, #3
 80164da:	930f      	str	r3, [sp, #60]	; 0x3c
 80164dc:	4b44      	ldr	r3, [pc, #272]	; (80165f0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x87c>)
 80164de:	4a46      	ldr	r2, [pc, #280]	; (80165f8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x884>)
 80164e0:	9310      	str	r3, [sp, #64]	; 0x40
 80164e2:	4619      	mov	r1, r3
 80164e4:	2003      	movs	r0, #3
 80164e6:	f7fa f8a5 	bl	8010634 <LOGGER_PrintLine>
 80164ea:	2700      	movs	r7, #0
 80164ec:	f04f 0b07 	mov.w	fp, #7
 80164f0:	e58d      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80164f2:	9b04      	ldr	r3, [sp, #16]
 80164f4:	2b03      	cmp	r3, #3
 80164f6:	f040 80d7 	bne.w	80166a8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x934>
 80164fa:	fa0f f987 	sxth.w	r9, r7
 80164fe:	4602      	mov	r2, r0
 8016500:	f04f 0801 	mov.w	r8, #1
 8016504:	0093      	lsls	r3, r2, #2
 8016506:	f103 0c0b 	add.w	ip, r3, #11
 801650a:	4591      	cmp	r9, r2
 801650c:	fa5f fc8c 	uxtb.w	ip, ip
 8016510:	d174      	bne.n	80165fc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x888>
 8016512:	f1be 0f03 	cmp.w	lr, #3
 8016516:	bf14      	ite	ne
 8016518:	9b03      	ldrne	r3, [sp, #12]
 801651a:	9a03      	ldreq	r2, [sp, #12]
 801651c:	9908      	ldr	r1, [sp, #32]
 801651e:	bf18      	it	ne
 8016520:	f083 0203 	eorne.w	r2, r3, #3
 8016524:	4638      	mov	r0, r7
 8016526:	f7fe ff15 	bl	8015354 <ccc806ca1165fb175d70c767b8da618b114a1c9f>
 801652a:	2800      	cmp	r0, #0
 801652c:	d0d4      	beq.n	80164d8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x764>
 801652e:	00ba      	lsls	r2, r7, #2
 8016530:	b2d2      	uxtb	r2, r2
 8016532:	f102 030b 	add.w	r3, r2, #11
 8016536:	ebaa 0a02 	sub.w	sl, sl, r2
 801653a:	b2db      	uxtb	r3, r3
 801653c:	fa5f fa8a 	uxtb.w	sl, sl
 8016540:	2200      	movs	r2, #0
 8016542:	2001      	movs	r0, #1
 8016544:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8016548:	fa5f f18c 	uxtb.w	r1, ip
 801654c:	458a      	cmp	sl, r1
 801654e:	d174      	bne.n	801663a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x8c6>
 8016550:	1e7b      	subs	r3, r7, #1
 8016552:	2b04      	cmp	r3, #4
 8016554:	f63f aede 	bhi.w	8016314 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a0>
 8016558:	f105 0a19 	add.w	sl, r5, #25
 801655c:	46a9      	mov	r9, r5
 801655e:	f04f 0800 	mov.w	r8, #0
 8016562:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
 8016566:	b1ab      	cbz	r3, 8016594 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x820>
 8016568:	45b8      	cmp	r8, r7
 801656a:	f080 8097 	bcs.w	801669c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x928>
 801656e:	f109 0360 	add.w	r3, r9, #96	; 0x60
 8016572:	f8b9 0061 	ldrh.w	r0, [r9, #97]	; 0x61
 8016576:	9307      	str	r3, [sp, #28]
 8016578:	f7fe f8aa 	bl	80146d0 <b38708bb53cf1fbf63b374e0cd07b43c485a3c34>
 801657c:	2800      	cmp	r0, #0
 801657e:	d07e      	beq.n	801667e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x90a>
 8016580:	f108 0801 	add.w	r8, r8, #1
 8016584:	fa5f f888 	uxtb.w	r8, r8
 8016588:	f889 0060 	strb.w	r0, [r9, #96]	; 0x60
 801658c:	f109 0905 	add.w	r9, r9, #5
 8016590:	45ca      	cmp	sl, r9
 8016592:	d1e6      	bne.n	8016562 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x7ee>
 8016594:	f1b8 0f00 	cmp.w	r8, #0
 8016598:	f43f aebc 	beq.w	8016314 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x5a0>
 801659c:	2700      	movs	r7, #0
 801659e:	f04f 0904 	mov.w	r9, #4
 80165a2:	f105 0a60 	add.w	sl, r5, #96	; 0x60
 80165a6:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80165aa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80165ae:	b1c3      	cbz	r3, 80165e2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x86e>
 80165b0:	44a8      	add	r8, r5
 80165b2:	2104      	movs	r1, #4
 80165b4:	4628      	mov	r0, r5
 80165b6:	f004 fc3d 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80165ba:	686b      	ldr	r3, [r5, #4]
 80165bc:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80165c0:	701a      	strb	r2, [r3, #0]
 80165c2:	f8b8 2061 	ldrh.w	r2, [r8, #97]	; 0x61
 80165c6:	686b      	ldr	r3, [r5, #4]
 80165c8:	0a12      	lsrs	r2, r2, #8
 80165ca:	705a      	strb	r2, [r3, #1]
 80165cc:	686b      	ldr	r3, [r5, #4]
 80165ce:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80165d2:	709a      	strb	r2, [r3, #2]
 80165d4:	f8b8 2063 	ldrh.w	r2, [r8, #99]	; 0x63
 80165d8:	686b      	ldr	r3, [r5, #4]
 80165da:	0a12      	lsrs	r2, r2, #8
 80165dc:	3704      	adds	r7, #4
 80165de:	70da      	strb	r2, [r3, #3]
 80165e0:	b2ff      	uxtb	r7, r7
 80165e2:	f1b9 0901 	subs.w	r9, r9, #1
 80165e6:	d2de      	bcs.n	80165a6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x832>
 80165e8:	e511      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80165ea:	bf00      	nop
 80165ec:	080213da 	.word	0x080213da
 80165f0:	08020f80 	.word	0x08020f80
 80165f4:	080213f0 	.word	0x080213f0
 80165f8:	08021411 	.word	0x08021411
 80165fc:	6861      	ldr	r1, [r4, #4]
 80165fe:	4413      	add	r3, r2
 8016600:	442b      	add	r3, r5
 8016602:	f811 100c 	ldrb.w	r1, [r1, ip]
 8016606:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
 801660a:	6860      	ldr	r0, [r4, #4]
 801660c:	4460      	add	r0, ip
 801660e:	3201      	adds	r2, #1
 8016610:	7840      	ldrb	r0, [r0, #1]
 8016612:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8016616:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
 801661a:	6860      	ldr	r0, [r4, #4]
 801661c:	4460      	add	r0, ip
 801661e:	b212      	sxth	r2, r2
 8016620:	7880      	ldrb	r0, [r0, #2]
 8016622:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 8016626:	6861      	ldr	r1, [r4, #4]
 8016628:	4461      	add	r1, ip
 801662a:	78c9      	ldrb	r1, [r1, #3]
 801662c:	f883 8079 	strb.w	r8, [r3, #121]	; 0x79
 8016630:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8016634:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 8016638:	e764      	b.n	8016504 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x790>
 801663a:	6861      	ldr	r1, [r4, #4]
 801663c:	4494      	add	ip, r2
 801663e:	44ac      	add	ip, r5
 8016640:	f811 e003 	ldrb.w	lr, [r1, r3]
 8016644:	f8ac e061 	strh.w	lr, [ip, #97]	; 0x61
 8016648:	6861      	ldr	r1, [r4, #4]
 801664a:	4419      	add	r1, r3
 801664c:	3201      	adds	r2, #1
 801664e:	7849      	ldrb	r1, [r1, #1]
 8016650:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
 8016654:	f8ac e061 	strh.w	lr, [ip, #97]	; 0x61
 8016658:	6861      	ldr	r1, [r4, #4]
 801665a:	4419      	add	r1, r3
 801665c:	b212      	sxth	r2, r2
 801665e:	f891 e002 	ldrb.w	lr, [r1, #2]
 8016662:	f8ac e063 	strh.w	lr, [ip, #99]	; 0x63
 8016666:	6861      	ldr	r1, [r4, #4]
 8016668:	4419      	add	r1, r3
 801666a:	3304      	adds	r3, #4
 801666c:	78c9      	ldrb	r1, [r1, #3]
 801666e:	f88c 0060 	strb.w	r0, [ip, #96]	; 0x60
 8016672:	ea4e 2e01 	orr.w	lr, lr, r1, lsl #8
 8016676:	f8ac e063 	strh.w	lr, [ip, #99]	; 0x63
 801667a:	b2db      	uxtb	r3, r3
 801667c:	e762      	b.n	8016544 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x7d0>
 801667e:	2379      	movs	r3, #121	; 0x79
 8016680:	5ce8      	ldrb	r0, [r5, r3]
 8016682:	b140      	cbz	r0, 8016696 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x922>
 8016684:	18ea      	adds	r2, r5, r3
 8016686:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 801668a:	9a07      	ldr	r2, [sp, #28]
 801668c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8016690:	4291      	cmp	r1, r2
 8016692:	f43f af75 	beq.w	8016580 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x80c>
 8016696:	3305      	adds	r3, #5
 8016698:	2b92      	cmp	r3, #146	; 0x92
 801669a:	d1f1      	bne.n	8016680 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x90c>
 801669c:	2000      	movs	r0, #0
 801669e:	e773      	b.n	8016588 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x814>
 80166a0:	23ff      	movs	r3, #255	; 0xff
 80166a2:	4607      	mov	r7, r0
 80166a4:	9303      	str	r3, [sp, #12]
 80166a6:	e4b2      	b.n	801600e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x29a>
 80166a8:	4607      	mov	r7, r0
 80166aa:	e55d      	b.n	8016168 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x3f4>
 80166ac:	2a01      	cmp	r2, #1
 80166ae:	f47f ac4b 	bne.w	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 80166b2:	4641      	mov	r1, r8
 80166b4:	a80c      	add	r0, sp, #48	; 0x30
 80166b6:	f7fe fea3 	bl	8015400 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 80166ba:	2305      	movs	r3, #5
 80166bc:	9a04      	ldr	r2, [sp, #16]
 80166be:	930f      	str	r3, [sp, #60]	; 0x3c
 80166c0:	4bd1      	ldr	r3, [pc, #836]	; (8016a08 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc94>)
 80166c2:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8016a0c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc98>
 80166c6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80166ca:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80166ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80166d2:	e9cd 2300 	strd	r2, r3, [sp]
 80166d6:	ad0f      	add	r5, sp, #60	; 0x3c
 80166d8:	465b      	mov	r3, fp
 80166da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166de:	4acc      	ldr	r2, [pc, #816]	; (8016a10 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc9c>)
 80166e0:	f7f9 ffa8 	bl	8010634 <LOGGER_PrintLine>
 80166e4:	f896 356f 	ldrb.w	r3, [r6, #1391]	; 0x56f
 80166e8:	f506 6aae 	add.w	sl, r6, #1392	; 0x570
 80166ec:	f104 0741 	add.w	r7, r4, #65	; 0x41
 80166f0:	b1f3      	cbz	r3, 8016730 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9bc>
 80166f2:	4639      	mov	r1, r7
 80166f4:	4650      	mov	r0, sl
 80166f6:	f7f6 ff43 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80166fa:	b9c8      	cbnz	r0, 8016730 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x9bc>
 80166fc:	f7f9 ff74 	bl	80105e8 <LOGGER_StartSection>
 8016700:	2800      	cmp	r0, #0
 8016702:	f43f ac21 	beq.w	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8016706:	2304      	movs	r3, #4
 8016708:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 801670c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016710:	f7f9 ff72 	bl	80105f8 <LOGGER_PrintHeader>
 8016714:	48bf      	ldr	r0, [pc, #764]	; (8016a14 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca0>)
 8016716:	f7f9 ff55 	bl	80105c4 <LOGGER_Print>
 801671a:	4650      	mov	r0, sl
 801671c:	f7f6 ff44 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 8016720:	4638      	mov	r0, r7
 8016722:	f7f6 ff41 	bl	800d5a8 <706a956218859121b399480423d2fbe6bb70cd71>
 8016726:	f7f9 ff45 	bl	80105b4 <LOGGER_PrintNL>
 801672a:	f7f9 ff63 	bl	80105f4 <LOGGER_EndSection>
 801672e:	e40b      	b.n	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8016730:	2211      	movs	r2, #17
 8016732:	2100      	movs	r1, #0
 8016734:	4650      	mov	r0, sl
 8016736:	f005 fc37 	bl	801bfa8 <memset>
 801673a:	9b04      	ldr	r3, [sp, #16]
 801673c:	2b01      	cmp	r3, #1
 801673e:	f896 356f 	ldrb.w	r3, [r6, #1391]	; 0x56f
 8016742:	f200 8185 	bhi.w	8016a50 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcdc>
 8016746:	9a07      	ldr	r2, [sp, #28]
 8016748:	f1a2 0a05 	sub.w	sl, r2, #5
 801674c:	1e5a      	subs	r2, r3, #1
 801674e:	fa5f fa8a 	uxtb.w	sl, sl
 8016752:	2a0b      	cmp	r2, #11
 8016754:	f200 8170 	bhi.w	8016a38 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcc4>
 8016758:	e8df f012 	tbh	[pc, r2, lsl #1]
 801675c:	0052000c 	.word	0x0052000c
 8016760:	00f00099 	.word	0x00f00099
 8016764:	013400fc 	.word	0x013400fc
 8016768:	005d0017 	.word	0x005d0017
 801676c:	007600a4 	.word	0x007600a4
 8016770:	013f0107 	.word	0x013f0107
 8016774:	2303      	movs	r3, #3
 8016776:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 801677a:	4aa7      	ldr	r2, [pc, #668]	; (8016a18 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca4>)
 801677c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016780:	f7f9 ff58 	bl	8010634 <LOGGER_PrintLine>
 8016784:	4638      	mov	r0, r7
 8016786:	f7f7 fcb7 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 801678a:	f104 0560 	add.w	r5, r4, #96	; 0x60
 801678e:	2100      	movs	r1, #0
 8016790:	2219      	movs	r2, #25
 8016792:	4628      	mov	r0, r5
 8016794:	f005 fc08 	bl	801bfa8 <memset>
 8016798:	2100      	movs	r1, #0
 801679a:	f04f 0e01 	mov.w	lr, #1
 801679e:	008b      	lsls	r3, r1, #2
 80167a0:	3307      	adds	r3, #7
 80167a2:	b20a      	sxth	r2, r1
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	3101      	adds	r1, #1
 80167a8:	f1ba 0f00 	cmp.w	sl, #0
 80167ac:	d109      	bne.n	80167c2 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa4e>
 80167ae:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 80167b2:	4798      	blx	r3
 80167b4:	f896 2581 	ldrb.w	r2, [r6, #1409]	; 0x581
 80167b8:	4639      	mov	r1, r7
 80167ba:	4628      	mov	r0, r5
 80167bc:	f7fe fe2a 	bl	8015414 <496ca019b627ff9d4bd45a012282bf5fa5089406>
 80167c0:	e042      	b.n	8016848 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 80167c2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80167c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80167ca:	4422      	add	r2, r4
 80167cc:	f81c 0003 	ldrb.w	r0, [ip, r3]
 80167d0:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 80167d4:	4463      	add	r3, ip
 80167d6:	f1aa 0a04 	sub.w	sl, sl, #4
 80167da:	f893 c001 	ldrb.w	ip, [r3, #1]
 80167de:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80167e2:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 80167e6:	7898      	ldrb	r0, [r3, #2]
 80167e8:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 80167ec:	78db      	ldrb	r3, [r3, #3]
 80167ee:	f882 e060 	strb.w	lr, [r2, #96]	; 0x60
 80167f2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80167f6:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 80167fa:	fa5f fa8a 	uxtb.w	sl, sl
 80167fe:	e7ce      	b.n	801679e <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa2a>
 8016800:	2303      	movs	r3, #3
 8016802:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8016806:	4a85      	ldr	r2, [pc, #532]	; (8016a1c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xca8>)
 8016808:	e895 0003 	ldmia.w	r5, {r0, r1}
 801680c:	f7f9 ff12 	bl	8010634 <LOGGER_PrintLine>
 8016810:	4638      	mov	r0, r7
 8016812:	f7f7 fc71 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 8016816:	f104 0579 	add.w	r5, r4, #121	; 0x79
 801681a:	2100      	movs	r1, #0
 801681c:	2219      	movs	r2, #25
 801681e:	4628      	mov	r0, r5
 8016820:	f005 fbc2 	bl	801bfa8 <memset>
 8016824:	2100      	movs	r1, #0
 8016826:	f04f 0e01 	mov.w	lr, #1
 801682a:	008b      	lsls	r3, r1, #2
 801682c:	3307      	adds	r3, #7
 801682e:	b20a      	sxth	r2, r1
 8016830:	b2db      	uxtb	r3, r3
 8016832:	3101      	adds	r1, #1
 8016834:	f1ba 0f00 	cmp.w	sl, #0
 8016838:	d10a      	bne.n	8016850 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xadc>
 801683a:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 801683e:	4798      	blx	r3
 8016840:	4639      	mov	r1, r7
 8016842:	4628      	mov	r0, r5
 8016844:	f7fe fe2a 	bl	801549c <f18386c4166365fe64df7dd56bd097dc60fcee43>
 8016848:	4640      	mov	r0, r8
 801684a:	f7f6 fa05 	bl	800cc58 <cf0ffb3730b01ad23c777b55262f1b704e362e5b>
 801684e:	e0ca      	b.n	80169e6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8016850:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8016854:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016858:	4422      	add	r2, r4
 801685a:	f81c 0003 	ldrb.w	r0, [ip, r3]
 801685e:	f8a2 007a 	strh.w	r0, [r2, #122]	; 0x7a
 8016862:	4463      	add	r3, ip
 8016864:	f1aa 0a04 	sub.w	sl, sl, #4
 8016868:	f893 c001 	ldrb.w	ip, [r3, #1]
 801686c:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8016870:	f8a2 007a 	strh.w	r0, [r2, #122]	; 0x7a
 8016874:	7898      	ldrb	r0, [r3, #2]
 8016876:	f8a2 007c 	strh.w	r0, [r2, #124]	; 0x7c
 801687a:	78db      	ldrb	r3, [r3, #3]
 801687c:	f882 e079 	strb.w	lr, [r2, #121]	; 0x79
 8016880:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8016884:	f8a2 007c 	strh.w	r0, [r2, #124]	; 0x7c
 8016888:	fa5f fa8a 	uxtb.w	sl, sl
 801688c:	e7cd      	b.n	801682a <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xab6>
 801688e:	2303      	movs	r3, #3
 8016890:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8016894:	4a62      	ldr	r2, [pc, #392]	; (8016a20 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcac>)
 8016896:	e895 0003 	ldmia.w	r5, {r0, r1}
 801689a:	f7f9 fecb 	bl	8010634 <LOGGER_PrintLine>
 801689e:	4638      	mov	r0, r7
 80168a0:	f7f7 fc2a 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 80168a4:	f104 0560 	add.w	r5, r4, #96	; 0x60
 80168a8:	2100      	movs	r1, #0
 80168aa:	2219      	movs	r2, #25
 80168ac:	4628      	mov	r0, r5
 80168ae:	f005 fb7b 	bl	801bfa8 <memset>
 80168b2:	2100      	movs	r1, #0
 80168b4:	f04f 0e01 	mov.w	lr, #1
 80168b8:	008b      	lsls	r3, r1, #2
 80168ba:	3307      	adds	r3, #7
 80168bc:	b20a      	sxth	r2, r1
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	3101      	adds	r1, #1
 80168c2:	f1ba 0f00 	cmp.w	sl, #0
 80168c6:	d11a      	bne.n	80168fe <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xb8a>
 80168c8:	f04f 0b05 	mov.w	fp, #5
 80168cc:	e9cd b90f 	strd	fp, r9, [sp, #60]	; 0x3c
 80168d0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80168d4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80168d8:	4a52      	ldr	r2, [pc, #328]	; (8016a24 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb0>)
 80168da:	f7f9 feab 	bl	8010634 <LOGGER_PrintLine>
 80168de:	f8d6 35a0 	ldr.w	r3, [r6, #1440]	; 0x5a0
 80168e2:	4798      	blx	r3
 80168e4:	4639      	mov	r1, r7
 80168e6:	f206 5082 	addw	r0, r6, #1410	; 0x582
 80168ea:	f7fe fdd7 	bl	801549c <f18386c4166365fe64df7dd56bd097dc60fcee43>
 80168ee:	e9cd b90f 	strd	fp, r9, [sp, #60]	; 0x3c
 80168f2:	4a4d      	ldr	r2, [pc, #308]	; (8016a28 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb4>)
 80168f4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80168f8:	f7f9 fe9c 	bl	8010634 <LOGGER_PrintLine>
 80168fc:	e757      	b.n	80167ae <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xa3a>
 80168fe:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8016902:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016906:	4422      	add	r2, r4
 8016908:	f81c 0003 	ldrb.w	r0, [ip, r3]
 801690c:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 8016910:	4463      	add	r3, ip
 8016912:	f1aa 0a04 	sub.w	sl, sl, #4
 8016916:	f893 c001 	ldrb.w	ip, [r3, #1]
 801691a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 801691e:	f8a2 0061 	strh.w	r0, [r2, #97]	; 0x61
 8016922:	7898      	ldrb	r0, [r3, #2]
 8016924:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 8016928:	78db      	ldrb	r3, [r3, #3]
 801692a:	f882 e060 	strb.w	lr, [r2, #96]	; 0x60
 801692e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8016932:	f8a2 0063 	strh.w	r0, [r2, #99]	; 0x63
 8016936:	fa5f fa8a 	uxtb.w	sl, sl
 801693a:	e7bd      	b.n	80168b8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xb44>
 801693c:	2303      	movs	r3, #3
 801693e:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8016942:	4a3a      	ldr	r2, [pc, #232]	; (8016a2c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcb8>)
 8016944:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016948:	f7f9 fe74 	bl	8010634 <LOGGER_PrintLine>
 801694c:	4638      	mov	r0, r7
 801694e:	f7f7 fbd3 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 8016952:	e779      	b.n	8016848 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 8016954:	2303      	movs	r3, #3
 8016956:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 801695a:	4a35      	ldr	r2, [pc, #212]	; (8016a30 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcbc>)
 801695c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016960:	f7f9 fe68 	bl	8010634 <LOGGER_PrintLine>
 8016964:	4638      	mov	r0, r7
 8016966:	f7f7 fbc7 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 801696a:	2100      	movs	r1, #0
 801696c:	2219      	movs	r2, #25
 801696e:	4628      	mov	r0, r5
 8016970:	f005 fb1a 	bl	801bfa8 <memset>
 8016974:	2100      	movs	r1, #0
 8016976:	2001      	movs	r0, #1
 8016978:	008a      	lsls	r2, r1, #2
 801697a:	3207      	adds	r2, #7
 801697c:	b20b      	sxth	r3, r1
 801697e:	b2d2      	uxtb	r2, r2
 8016980:	3101      	adds	r1, #1
 8016982:	f1ba 0f00 	cmp.w	sl, #0
 8016986:	f43f af5f 	beq.w	8016848 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xad4>
 801698a:	6865      	ldr	r5, [r4, #4]
 801698c:	eb05 0c02 	add.w	ip, r5, r2
 8016990:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016994:	5caa      	ldrb	r2, [r5, r2]
 8016996:	f89c e001 	ldrb.w	lr, [ip, #1]
 801699a:	f89c 5003 	ldrb.w	r5, [ip, #3]
 801699e:	3358      	adds	r3, #88	; 0x58
 80169a0:	446b      	add	r3, sp
 80169a2:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80169a6:	f823 2c1b 	strh.w	r2, [r3, #-27]
 80169aa:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80169ae:	f803 0c1c 	strb.w	r0, [r3, #-28]
 80169b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80169b6:	f1aa 0a04 	sub.w	sl, sl, #4
 80169ba:	f823 2c19 	strh.w	r2, [r3, #-25]
 80169be:	fa5f fa8a 	uxtb.w	sl, sl
 80169c2:	e7d9      	b.n	8016978 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc04>
 80169c4:	2303      	movs	r3, #3
 80169c6:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 80169ca:	4a1a      	ldr	r2, [pc, #104]	; (8016a34 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xcc0>)
 80169cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80169d0:	f7f9 fe30 	bl	8010634 <LOGGER_PrintLine>
 80169d4:	4638      	mov	r0, r7
 80169d6:	f7f7 fb8f 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 80169da:	4638      	mov	r0, r7
 80169dc:	f7fd ff04 	bl	80147e8 <b3b14ea0535ea7766b14c305344e9dd58438abce>
 80169e0:	4640      	mov	r0, r8
 80169e2:	f7f6 f95f 	bl	800cca4 <cbc0e88a681a951e559d988b61bbaa7895224382>
 80169e6:	2300      	movs	r3, #0
 80169e8:	f896 0569 	ldrb.w	r0, [r6, #1385]	; 0x569
 80169ec:	f886 356f 	strb.w	r3, [r6, #1391]	; 0x56f
 80169f0:	f7f8 f8a6 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 80169f4:	f8d6 35a8 	ldr.w	r3, [r6, #1448]	; 0x5a8
 80169f8:	9904      	ldr	r1, [sp, #16]
 80169fa:	f8d6 05ac 	ldr.w	r0, [r6, #1452]	; 0x5ac
 80169fe:	463a      	mov	r2, r7
 8016a00:	4798      	blx	r3
 8016a02:	f7ff baa1 	b.w	8015f48 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d4>
 8016a06:	bf00      	nop
 8016a08:	08021704 	.word	0x08021704
 8016a0c:	08020f80 	.word	0x08020f80
 8016a10:	08021420 	.word	0x08021420
 8016a14:	0802143e 	.word	0x0802143e
 8016a18:	08021467 	.word	0x08021467
 8016a1c:	080214ac 	.word	0x080214ac
 8016a20:	080214f4 	.word	0x080214f4
 8016a24:	08021266 	.word	0x08021266
 8016a28:	08021276 	.word	0x08021276
 8016a2c:	0802153e 	.word	0x0802153e
 8016a30:	08021585 	.word	0x08021585
 8016a34:	080215cb 	.word	0x080215cb
 8016a38:	2203      	movs	r2, #3
 8016a3a:	e9cd 290f 	strd	r2, r9, [sp, #60]	; 0x3c
 8016a3e:	4a1b      	ldr	r2, [pc, #108]	; (8016aac <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd38>)
 8016a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016a44:	f7f9 fdf6 	bl	8010634 <LOGGER_PrintLine>
 8016a48:	4638      	mov	r0, r7
 8016a4a:	f7f7 fb55 	bl	800e0f8 <9384e57fa8b386170558ee17f590b88f318c4273>
 8016a4e:	e7ca      	b.n	80169e6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d0c8      	beq.n	80169e6 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xc72>
 8016a54:	2304      	movs	r3, #4
 8016a56:	e9cd 390f 	strd	r3, r9, [sp, #60]	; 0x3c
 8016a5a:	4a15      	ldr	r2, [pc, #84]	; (8016ab0 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd3c>)
 8016a5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016a60:	465b      	mov	r3, fp
 8016a62:	f7f9 fde7 	bl	8010634 <LOGGER_PrintLine>
 8016a66:	e771      	b.n	801694c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xbd8>
 8016a68:	2100      	movs	r1, #0
 8016a6a:	f7ff ba6f 	b.w	8015f4c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x1d8>
 8016a6e:	7a23      	ldrb	r3, [r4, #8]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	f43f a9aa 	beq.w	8015dca <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x56>
 8016a76:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8016a7a:	b19b      	cbz	r3, 8016aa4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd30>
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	b017      	add	sp, #92	; 0x5c
 8016a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	f000 bf90 	b.w	80179a8 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69>
 8016a88:	2303      	movs	r3, #3
 8016a8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a8c:	4b09      	ldr	r3, [pc, #36]	; (8016ab4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd40>)
 8016a8e:	4a0a      	ldr	r2, [pc, #40]	; (8016ab8 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd44>)
 8016a90:	9310      	str	r3, [sp, #64]	; 0x40
 8016a92:	f7ff b9fb 	b.w	8015e8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x118>
 8016a96:	2303      	movs	r3, #3
 8016a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a9a:	4b06      	ldr	r3, [pc, #24]	; (8016ab4 <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd40>)
 8016a9c:	4a07      	ldr	r2, [pc, #28]	; (8016abc <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0xd48>)
 8016a9e:	9310      	str	r3, [sp, #64]	; 0x40
 8016aa0:	f7ff b9f4 	b.w	8015e8c <b5c72b6730fdfd332fa9751af01c9df74e6e3448+0x118>
 8016aa4:	b017      	add	sp, #92	; 0x5c
 8016aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aaa:	bf00      	nop
 8016aac:	08021612 	.word	0x08021612
 8016ab0:	08021635 	.word	0x08021635
 8016ab4:	08020f80 	.word	0x08020f80
 8016ab8:	08021647 	.word	0x08021647
 8016abc:	08021665 	.word	0x08021665

08016ac0 <retrieveIPv6Header.constprop.0>:
 8016ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac4:	f04f 0a00 	mov.w	sl, #0
 8016ac8:	f883 a000 	strb.w	sl, [r3]
 8016acc:	f881 a048 	strb.w	sl, [r1, #72]	; 0x48
 8016ad0:	f882 a048 	strb.w	sl, [r2, #72]	; 0x48
 8016ad4:	f881 a025 	strb.w	sl, [r1, #37]	; 0x25
 8016ad8:	4699      	mov	r9, r3
 8016ada:	6843      	ldr	r3, [r0, #4]
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	4614      	mov	r4, r2
 8016ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016ae4:	2af0      	cmp	r2, #240	; 0xf0
 8016ae6:	b095      	sub	sp, #84	; 0x54
 8016ae8:	4607      	mov	r7, r0
 8016aea:	4688      	mov	r8, r1
 8016aec:	f040 81bc 	bne.w	8016e68 <retrieveIPv6Header.constprop.0+0x3a8>
 8016af0:	2201      	movs	r2, #1
 8016af2:	f003 030f 	and.w	r3, r3, #15
 8016af6:	4293      	cmp	r3, r2
 8016af8:	f889 2000 	strb.w	r2, [r9]
 8016afc:	f040 81b2 	bne.w	8016e64 <retrieveIPv6Header.constprop.0+0x3a4>
 8016b00:	6842      	ldr	r2, [r0, #4]
 8016b02:	7856      	ldrb	r6, [r2, #1]
 8016b04:	4655      	mov	r5, sl
 8016b06:	f006 02e0 	and.w	r2, r6, #224	; 0xe0
 8016b0a:	2a80      	cmp	r2, #128	; 0x80
 8016b0c:	f899 1000 	ldrb.w	r1, [r9]
 8016b10:	f000 80b7 	beq.w	8016c82 <retrieveIPv6Header.constprop.0+0x1c2>
 8016b14:	2aa0      	cmp	r2, #160	; 0xa0
 8016b16:	d071      	beq.n	8016bfc <retrieveIPv6Header.constprop.0+0x13c>
 8016b18:	b123      	cbz	r3, 8016b24 <retrieveIPv6Header.constprop.0+0x64>
 8016b1a:	f899 3000 	ldrb.w	r3, [r9]
 8016b1e:	3b01      	subs	r3, #1
 8016b20:	f889 3000 	strb.w	r3, [r9]
 8016b24:	f899 2000 	ldrb.w	r2, [r9]
 8016b28:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8016b2c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8016b30:	4413      	add	r3, r2
 8016b32:	441d      	add	r5, r3
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	b2ed      	uxtb	r5, r5
 8016b38:	440b      	add	r3, r1
 8016b3a:	5d5b      	ldrb	r3, [r3, r5]
 8016b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016b40:	2af0      	cmp	r2, #240	; 0xf0
 8016b42:	f000 819b 	beq.w	8016e7c <retrieveIPv6Header.constprop.0+0x3bc>
 8016b46:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	f101 0c01 	add.w	ip, r1, #1
 8016b50:	442b      	add	r3, r5
 8016b52:	fa5f fc8c 	uxtb.w	ip, ip
 8016b56:	5c5a      	ldrb	r2, [r3, r1]
 8016b58:	f884 c048 	strb.w	ip, [r4, #72]	; 0x48
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	4428      	add	r0, r5
 8016b60:	f3c2 03c1 	ubfx	r3, r2, #3, #2
 8016b64:	f810 800c 	ldrb.w	r8, [r0, ip]
 8016b68:	f3c2 0b80 	ubfx	fp, r2, #2, #1
 8016b6c:	f002 0603 	and.w	r6, r2, #3
 8016b70:	0952      	lsrs	r2, r2, #5
 8016b72:	3102      	adds	r1, #2
 8016b74:	2a03      	cmp	r2, #3
 8016b76:	f3c8 1a01 	ubfx	sl, r8, #4, #2
 8016b7a:	f3c8 09c0 	ubfx	r9, r8, #3, #1
 8016b7e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8016b82:	f008 0803 	and.w	r8, r8, #3
 8016b86:	d00a      	beq.n	8016b9e <retrieveIPv6Header.constprop.0+0xde>
 8016b88:	2203      	movs	r2, #3
 8016b8a:	920a      	str	r2, [sp, #40]	; 0x28
 8016b8c:	4ab7      	ldr	r2, [pc, #732]	; (8016e6c <retrieveIPv6Header.constprop.0+0x3ac>)
 8016b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016b90:	49b6      	ldr	r1, [pc, #728]	; (8016e6c <retrieveIPv6Header.constprop.0+0x3ac>)
 8016b92:	4ab7      	ldr	r2, [pc, #732]	; (8016e70 <retrieveIPv6Header.constprop.0+0x3b0>)
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	2003      	movs	r0, #3
 8016b98:	f7f9 fd4c 	bl	8010634 <LOGGER_PrintLine>
 8016b9c:	9b01      	ldr	r3, [sp, #4]
 8016b9e:	2b02      	cmp	r3, #2
 8016ba0:	f04f 0100 	mov.w	r1, #0
 8016ba4:	f000 8247 	beq.w	8017036 <retrieveIPv6Header.constprop.0+0x576>
 8016ba8:	2b03      	cmp	r3, #3
 8016baa:	f000 81c0 	beq.w	8016f2e <retrieveIPv6Header.constprop.0+0x46e>
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8016bb4:	6061      	str	r1, [r4, #4]
 8016bb6:	f040 821b 	bne.w	8016ff0 <retrieveIPv6Header.constprop.0+0x530>
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	442b      	add	r3, r5
 8016bc2:	041b      	lsls	r3, r3, #16
 8016bc4:	1c50      	adds	r0, r2, #1
 8016bc6:	b2c0      	uxtb	r0, r0
 8016bc8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8016bcc:	6063      	str	r3, [r4, #4]
 8016bce:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8016bd2:	6879      	ldr	r1, [r7, #4]
 8016bd4:	7809      	ldrb	r1, [r1, #0]
 8016bd6:	4401      	add	r1, r0
 8016bd8:	4429      	add	r1, r5
 8016bda:	1c90      	adds	r0, r2, #2
 8016bdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8016be0:	b2c0      	uxtb	r0, r0
 8016be2:	6063      	str	r3, [r4, #4]
 8016be4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8016be8:	6879      	ldr	r1, [r7, #4]
 8016bea:	7809      	ldrb	r1, [r1, #0]
 8016bec:	4401      	add	r1, r0
 8016bee:	4429      	add	r1, r5
 8016bf0:	430b      	orrs	r3, r1
 8016bf2:	6063      	str	r3, [r4, #4]
 8016bf4:	1cd3      	adds	r3, r2, #3
 8016bf6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016bfa:	e199      	b.n	8016f30 <retrieveIPv6Header.constprop.0+0x470>
 8016bfc:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	441a      	add	r2, r3
 8016c04:	442a      	add	r2, r5
 8016c06:	440a      	add	r2, r1
 8016c08:	f006 061f 	and.w	r6, r6, #31
 8016c0c:	7852      	ldrb	r2, [r2, #1]
 8016c0e:	2a06      	cmp	r2, #6
 8016c10:	f040 8114 	bne.w	8016e3c <retrieveIPv6Header.constprop.0+0x37c>
 8016c14:	1c98      	adds	r0, r3, #2
 8016c16:	b2c0      	uxtb	r0, r0
 8016c18:	f888 0048 	strb.w	r0, [r8, #72]	; 0x48
 8016c1c:	687a      	ldr	r2, [r7, #4]
 8016c1e:	f899 1000 	ldrb.w	r1, [r9]
 8016c22:	442a      	add	r2, r5
 8016c24:	4402      	add	r2, r0
 8016c26:	3303      	adds	r3, #3
 8016c28:	5c52      	ldrb	r2, [r2, r1]
 8016c2a:	f888 2024 	strb.w	r2, [r8, #36]	; 0x24
 8016c2e:	2100      	movs	r1, #0
 8016c30:	fa5f fb83 	uxtb.w	fp, r3
 8016c34:	f888 1037 	strb.w	r1, [r8, #55]	; 0x37
 8016c38:	f888 b048 	strb.w	fp, [r8, #72]	; 0x48
 8016c3c:	2210      	movs	r2, #16
 8016c3e:	f108 0038 	add.w	r0, r8, #56	; 0x38
 8016c42:	f005 f9b1 	bl	801bfa8 <memset>
 8016c46:	2e01      	cmp	r6, #1
 8016c48:	f04f 0100 	mov.w	r1, #0
 8016c4c:	f040 8091 	bne.w	8016d72 <retrieveIPv6Header.constprop.0+0x2b2>
 8016c50:	f108 0626 	add.w	r6, r8, #38	; 0x26
 8016c54:	2211      	movs	r2, #17
 8016c56:	4630      	mov	r0, r6
 8016c58:	f005 f9a6 	bl	801bfa8 <memset>
 8016c5c:	2005      	movs	r0, #5
 8016c5e:	f7f5 fce3 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016c62:	4a84      	ldr	r2, [pc, #528]	; (8016e74 <retrieveIPv6Header.constprop.0+0x3b4>)
 8016c64:	4601      	mov	r1, r0
 8016c66:	a802      	add	r0, sp, #8
 8016c68:	f7f6 fd9c 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8016c6c:	ab02      	add	r3, sp, #8
 8016c6e:	aa06      	add	r2, sp, #24
 8016c70:	f853 1b04 	ldr.w	r1, [r3], #4
 8016c74:	f846 1b04 	str.w	r1, [r6], #4
 8016c78:	4293      	cmp	r3, r2
 8016c7a:	d1f9      	bne.n	8016c70 <retrieveIPv6Header.constprop.0+0x1b0>
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	7033      	strb	r3, [r6, #0]
 8016c80:	e041      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	442b      	add	r3, r5
 8016c86:	440b      	add	r3, r1
 8016c88:	785b      	ldrb	r3, [r3, #1]
 8016c8a:	1f5a      	subs	r2, r3, #5
 8016c8c:	b2d2      	uxtb	r2, r2
 8016c8e:	2af7      	cmp	r2, #247	; 0xf7
 8016c90:	d956      	bls.n	8016d40 <retrieveIPv6Header.constprop.0+0x280>
 8016c92:	fa5f f28a 	uxtb.w	r2, sl
 8016c96:	2a05      	cmp	r2, #5
 8016c98:	d109      	bne.n	8016cae <retrieveIPv6Header.constprop.0+0x1ee>
 8016c9a:	2303      	movs	r3, #3
 8016c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8016c9e:	4a76      	ldr	r2, [pc, #472]	; (8016e78 <retrieveIPv6Header.constprop.0+0x3b8>)
 8016ca0:	4b72      	ldr	r3, [pc, #456]	; (8016e6c <retrieveIPv6Header.constprop.0+0x3ac>)
 8016ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	2003      	movs	r0, #3
 8016ca8:	f7f9 fcc4 	bl	8010634 <LOGGER_PrintLine>
 8016cac:	e2b9      	b.n	8017222 <retrieveIPv6Header.constprop.0+0x762>
 8016cae:	b92a      	cbnz	r2, 8016cbc <retrieveIPv6Header.constprop.0+0x1fc>
 8016cb0:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8016cb4:	b911      	cbnz	r1, 8016cbc <retrieveIPv6Header.constprop.0+0x1fc>
 8016cb6:	212b      	movs	r1, #43	; 0x2b
 8016cb8:	f888 1009 	strb.w	r1, [r8, #9]
 8016cbc:	f899 0000 	ldrb.w	r0, [r9]
 8016cc0:	6879      	ldr	r1, [r7, #4]
 8016cc2:	4428      	add	r0, r5
 8016cc4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8016cc8:	4401      	add	r1, r0
 8016cca:	f006 061f 	and.w	r6, r6, #31
 8016cce:	2b04      	cmp	r3, #4
 8016cd0:	60d1      	str	r1, [r2, #12]
 8016cd2:	f106 0601 	add.w	r6, r6, #1
 8016cd6:	f105 0502 	add.w	r5, r5, #2
 8016cda:	d806      	bhi.n	8016cea <retrieveIPv6Header.constprop.0+0x22a>
 8016cdc:	3b01      	subs	r3, #1
 8016cde:	2b03      	cmp	r3, #3
 8016ce0:	d809      	bhi.n	8016cf6 <retrieveIPv6Header.constprop.0+0x236>
 8016ce2:	e8df f003 	tbb	[pc, r3]
 8016ce6:	0c24      	.short	0x0c24
 8016ce8:	1f1c      	.short	0x1f1c
 8016cea:	2bfe      	cmp	r3, #254	; 0xfe
 8016cec:	d01d      	beq.n	8016d2a <retrieveIPv6Header.constprop.0+0x26a>
 8016cee:	2bff      	cmp	r3, #255	; 0xff
 8016cf0:	d020      	beq.n	8016d34 <retrieveIPv6Header.constprop.0+0x274>
 8016cf2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8016cf6:	fa56 f685 	uxtab	r6, r6, r5
 8016cfa:	b2f5      	uxtb	r5, r6
 8016cfc:	e003      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016cfe:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8016d02:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f899 1000 	ldrb.w	r1, [r9]
 8016d0c:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8016d10:	442b      	add	r3, r5
 8016d12:	440b      	add	r3, r1
 8016d14:	f10a 0a01 	add.w	sl, sl, #1
 8016d18:	5c9e      	ldrb	r6, [r3, r2]
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	e6f3      	b.n	8016b06 <retrieveIPv6Header.constprop.0+0x46>
 8016d1e:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8016d22:	e7ee      	b.n	8016d02 <retrieveIPv6Header.constprop.0+0x242>
 8016d24:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8016d28:	e7eb      	b.n	8016d02 <retrieveIPv6Header.constprop.0+0x242>
 8016d2a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016d2e:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8016d32:	e7e6      	b.n	8016d02 <retrieveIPv6Header.constprop.0+0x242>
 8016d34:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8016d38:	fa56 f585 	uxtab	r5, r6, r5
 8016d3c:	b2ed      	uxtb	r5, r5
 8016d3e:	e7e2      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016d40:	2b05      	cmp	r3, #5
 8016d42:	d171      	bne.n	8016e28 <retrieveIPv6Header.constprop.0+0x368>
 8016d44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d48:	b90b      	cbnz	r3, 8016d4e <retrieveIPv6Header.constprop.0+0x28e>
 8016d4a:	f888 3009 	strb.w	r3, [r8, #9]
 8016d4e:	f899 2000 	ldrb.w	r2, [r9]
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	442a      	add	r2, r5
 8016d56:	f006 0603 	and.w	r6, r6, #3
 8016d5a:	4413      	add	r3, r2
 8016d5c:	2e03      	cmp	r6, #3
 8016d5e:	f8c8 3020 	str.w	r3, [r8, #32]
 8016d62:	d004      	beq.n	8016d6e <retrieveIPv6Header.constprop.0+0x2ae>
 8016d64:	b90e      	cbnz	r6, 8016d6a <retrieveIPv6Header.constprop.0+0x2aa>
 8016d66:	3505      	adds	r5, #5
 8016d68:	e7e8      	b.n	8016d3c <retrieveIPv6Header.constprop.0+0x27c>
 8016d6a:	3504      	adds	r5, #4
 8016d6c:	e7e6      	b.n	8016d3c <retrieveIPv6Header.constprop.0+0x27c>
 8016d6e:	3503      	adds	r5, #3
 8016d70:	e7e4      	b.n	8016d3c <retrieveIPv6Header.constprop.0+0x27c>
 8016d72:	2e09      	cmp	r6, #9
 8016d74:	f106 32ff 	add.w	r2, r6, #4294967295
 8016d78:	d01e      	beq.n	8016db8 <retrieveIPv6Header.constprop.0+0x2f8>
 8016d7a:	2a10      	cmp	r2, #16
 8016d7c:	d154      	bne.n	8016e28 <retrieveIPv6Header.constprop.0+0x368>
 8016d7e:	f899 6000 	ldrb.w	r6, [r9]
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	445e      	add	r6, fp
 8016d86:	442e      	add	r6, r5
 8016d88:	460b      	mov	r3, r1
 8016d8a:	2203      	movs	r2, #3
 8016d8c:	1981      	adds	r1, r0, r6
 8016d8e:	a802      	add	r0, sp, #8
 8016d90:	f004 f81b 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 8016d94:	ab02      	add	r3, sp, #8
 8016d96:	f108 0226 	add.w	r2, r8, #38	; 0x26
 8016d9a:	a906      	add	r1, sp, #24
 8016d9c:	f853 0b04 	ldr.w	r0, [r3], #4
 8016da0:	f842 0b04 	str.w	r0, [r2], #4
 8016da4:	428b      	cmp	r3, r1
 8016da6:	d1f9      	bne.n	8016d9c <retrieveIPv6Header.constprop.0+0x2dc>
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	7013      	strb	r3, [r2, #0]
 8016dac:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8016db0:	3310      	adds	r3, #16
 8016db2:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
 8016db6:	e7a6      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016db8:	f899 6000 	ldrb.w	r6, [r9]
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	445e      	add	r6, fp
 8016dc0:	442e      	add	r6, r5
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	2202      	movs	r2, #2
 8016dc6:	1981      	adds	r1, r0, r6
 8016dc8:	a802      	add	r0, sp, #8
 8016dca:	f003 fffe 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 8016dce:	ae06      	add	r6, sp, #24
 8016dd0:	f10d 0c08 	add.w	ip, sp, #8
 8016dd4:	ab0f      	add	r3, sp, #60	; 0x3c
 8016dd6:	f8dc 0000 	ldr.w	r0, [ip]
 8016dda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016dde:	469e      	mov	lr, r3
 8016de0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016de4:	f10c 0c08 	add.w	ip, ip, #8
 8016de8:	45b4      	cmp	ip, r6
 8016dea:	4673      	mov	r3, lr
 8016dec:	d1f3      	bne.n	8016dd6 <retrieveIPv6Header.constprop.0+0x316>
 8016dee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8016df2:	f88e 1000 	strb.w	r1, [lr]
 8016df6:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8016dfa:	3308      	adds	r3, #8
 8016dfc:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
 8016e00:	2005      	movs	r0, #5
 8016e02:	f7f5 fc11 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016e06:	aa0f      	add	r2, sp, #60	; 0x3c
 8016e08:	4601      	mov	r1, r0
 8016e0a:	a802      	add	r0, sp, #8
 8016e0c:	f7f6 fcca 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8016e10:	ab02      	add	r3, sp, #8
 8016e12:	f108 0226 	add.w	r2, r8, #38	; 0x26
 8016e16:	f853 1b04 	ldr.w	r1, [r3], #4
 8016e1a:	f842 1b04 	str.w	r1, [r2], #4
 8016e1e:	42b3      	cmp	r3, r6
 8016e20:	d1f9      	bne.n	8016e16 <retrieveIPv6Header.constprop.0+0x356>
 8016e22:	781b      	ldrb	r3, [r3, #0]
 8016e24:	7013      	strb	r3, [r2, #0]
 8016e26:	e76e      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016e28:	2303      	movs	r3, #3
 8016e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8016e2c:	4b0f      	ldr	r3, [pc, #60]	; (8016e6c <retrieveIPv6Header.constprop.0+0x3ac>)
 8016e2e:	4a12      	ldr	r2, [pc, #72]	; (8016e78 <retrieveIPv6Header.constprop.0+0x3b8>)
 8016e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e32:	4619      	mov	r1, r3
 8016e34:	2003      	movs	r0, #3
 8016e36:	f7f9 fbfd 	bl	8010634 <LOGGER_PrintLine>
 8016e3a:	e764      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016e3c:	2303      	movs	r3, #3
 8016e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e40:	4b0a      	ldr	r3, [pc, #40]	; (8016e6c <retrieveIPv6Header.constprop.0+0x3ac>)
 8016e42:	4a0d      	ldr	r2, [pc, #52]	; (8016e78 <retrieveIPv6Header.constprop.0+0x3b8>)
 8016e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e46:	4619      	mov	r1, r3
 8016e48:	2003      	movs	r0, #3
 8016e4a:	f7f9 fbf3 	bl	8010634 <LOGGER_PrintLine>
 8016e4e:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
 8016e52:	3502      	adds	r5, #2
 8016e54:	3302      	adds	r3, #2
 8016e56:	fa56 f585 	uxtab	r5, r6, r5
 8016e5a:	441e      	add	r6, r3
 8016e5c:	b2ed      	uxtb	r5, r5
 8016e5e:	f888 6025 	strb.w	r6, [r8, #37]	; 0x25
 8016e62:	e750      	b.n	8016d06 <retrieveIPv6Header.constprop.0+0x246>
 8016e64:	4655      	mov	r5, sl
 8016e66:	e658      	b.n	8016b1a <retrieveIPv6Header.constprop.0+0x5a>
 8016e68:	4655      	mov	r5, sl
 8016e6a:	e65b      	b.n	8016b24 <retrieveIPv6Header.constprop.0+0x64>
 8016e6c:	0802177b 	.word	0x0802177b
 8016e70:	08021760 	.word	0x08021760
 8016e74:	08021838 	.word	0x08021838
 8016e78:	0802174c 	.word	0x0802174c
 8016e7c:	1c4a      	adds	r2, r1, #1
 8016e7e:	b2d2      	uxtb	r2, r2
 8016e80:	f013 030f 	ands.w	r3, r3, #15
 8016e84:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8016e88:	f43f ae5d 	beq.w	8016b46 <retrieveIPv6Header.constprop.0+0x86>
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	f040 81c8 	bne.w	8017222 <retrieveIPv6Header.constprop.0+0x762>
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	442b      	add	r3, r5
 8016e96:	f813 8002 	ldrb.w	r8, [r3, r2]
 8016e9a:	f008 03c0 	and.w	r3, r8, #192	; 0xc0
 8016e9e:	2b80      	cmp	r3, #128	; 0x80
 8016ea0:	f47f ae51 	bne.w	8016b46 <retrieveIPv6Header.constprop.0+0x86>
 8016ea4:	f008 03e0 	and.w	r3, r8, #224	; 0xe0
 8016ea8:	2ba0      	cmp	r3, #160	; 0xa0
 8016eaa:	f040 81ba 	bne.w	8017222 <retrieveIPv6Header.constprop.0+0x762>
 8016eae:	1c8b      	adds	r3, r1, #2
 8016eb0:	b2db      	uxtb	r3, r3
 8016eb2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	442a      	add	r2, r5
 8016eba:	5cd3      	ldrb	r3, [r2, r3]
 8016ebc:	2b06      	cmp	r3, #6
 8016ebe:	f040 81b0 	bne.w	8017222 <retrieveIPv6Header.constprop.0+0x762>
 8016ec2:	1ccb      	adds	r3, r1, #3
 8016ec4:	b2db      	uxtb	r3, r3
 8016ec6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016eca:	687a      	ldr	r2, [r7, #4]
 8016ecc:	442a      	add	r2, r5
 8016ece:	3104      	adds	r1, #4
 8016ed0:	5cd3      	ldrb	r3, [r2, r3]
 8016ed2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8016ed6:	b2ce      	uxtb	r6, r1
 8016ed8:	f04f 0900 	mov.w	r9, #0
 8016edc:	f008 081f 	and.w	r8, r8, #31
 8016ee0:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
 8016ee4:	f884 9037 	strb.w	r9, [r4, #55]	; 0x37
 8016ee8:	2210      	movs	r2, #16
 8016eea:	4649      	mov	r1, r9
 8016eec:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8016ef0:	f005 f85a 	bl	801bfa8 <memset>
 8016ef4:	f1b8 0f01 	cmp.w	r8, #1
 8016ef8:	f040 8253 	bne.w	80173a2 <retrieveIPv6Header.constprop.0+0x8e2>
 8016efc:	3426      	adds	r4, #38	; 0x26
 8016efe:	2211      	movs	r2, #17
 8016f00:	4649      	mov	r1, r9
 8016f02:	4620      	mov	r0, r4
 8016f04:	f005 f850 	bl	801bfa8 <memset>
 8016f08:	2005      	movs	r0, #5
 8016f0a:	f7f5 fb8d 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016f0e:	4aa0      	ldr	r2, [pc, #640]	; (8017190 <retrieveIPv6Header.constprop.0+0x6d0>)
 8016f10:	4601      	mov	r1, r0
 8016f12:	a802      	add	r0, sp, #8
 8016f14:	f7f6 fc46 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8016f18:	ab02      	add	r3, sp, #8
 8016f1a:	aa06      	add	r2, sp, #24
 8016f1c:	f853 1b04 	ldr.w	r1, [r3], #4
 8016f20:	f844 1b04 	str.w	r1, [r4], #4
 8016f24:	4293      	cmp	r3, r2
 8016f26:	d1f9      	bne.n	8016f1c <retrieveIPv6Header.constprop.0+0x45c>
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	7023      	strb	r3, [r4, #0]
 8016f2c:	e179      	b.n	8017222 <retrieveIPv6Header.constprop.0+0x762>
 8016f2e:	6061      	str	r1, [r4, #4]
 8016f30:	f1bb 0f00 	cmp.w	fp, #0
 8016f34:	f040 8084 	bne.w	8017040 <retrieveIPv6Header.constprop.0+0x580>
 8016f38:	f884 b008 	strb.w	fp, [r4, #8]
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016f42:	442a      	add	r2, r5
 8016f44:	5cd2      	ldrb	r2, [r2, r3]
 8016f46:	7262      	strb	r2, [r4, #9]
 8016f48:	3301      	adds	r3, #1
 8016f4a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016f4e:	2e02      	cmp	r6, #2
 8016f50:	d079      	beq.n	8017046 <retrieveIPv6Header.constprop.0+0x586>
 8016f52:	2e03      	cmp	r6, #3
 8016f54:	d07b      	beq.n	801704e <retrieveIPv6Header.constprop.0+0x58e>
 8016f56:	2e01      	cmp	r6, #1
 8016f58:	bf1b      	ittet	ne
 8016f5a:	687a      	ldrne	r2, [r7, #4]
 8016f5c:	f894 3048 	ldrbne.w	r3, [r4, #72]	; 0x48
 8016f60:	f884 6024 	strbeq.w	r6, [r4, #36]	; 0x24
 8016f64:	1952      	addne	r2, r2, r5
 8016f66:	bf1f      	itttt	ne
 8016f68:	5cd2      	ldrbne	r2, [r2, r3]
 8016f6a:	f884 2024 	strbne.w	r2, [r4, #36]	; 0x24
 8016f6e:	3301      	addne	r3, #1
 8016f70:	f884 3048 	strbne.w	r3, [r4, #72]	; 0x48
 8016f74:	f1ba 0f02 	cmp.w	sl, #2
 8016f78:	ae06      	add	r6, sp, #24
 8016f7a:	f000 80a9 	beq.w	80170d0 <retrieveIPv6Header.constprop.0+0x610>
 8016f7e:	f1ba 0f03 	cmp.w	sl, #3
 8016f82:	d066      	beq.n	8017052 <retrieveIPv6Header.constprop.0+0x592>
 8016f84:	f1ba 0f01 	cmp.w	sl, #1
 8016f88:	6879      	ldr	r1, [r7, #4]
 8016f8a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016f8e:	f040 80e6 	bne.w	801715e <retrieveIPv6Header.constprop.0+0x69e>
 8016f92:	1958      	adds	r0, r3, r5
 8016f94:	4401      	add	r1, r0
 8016f96:	2300      	movs	r3, #0
 8016f98:	2202      	movs	r2, #2
 8016f9a:	a802      	add	r0, sp, #8
 8016f9c:	f003 ff15 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 8016fa0:	ab0f      	add	r3, sp, #60	; 0x3c
 8016fa2:	f10d 0c08 	add.w	ip, sp, #8
 8016fa6:	469a      	mov	sl, r3
 8016fa8:	f8dc 0000 	ldr.w	r0, [ip]
 8016fac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	c203      	stmia	r2!, {r0, r1}
 8016fb4:	f10c 0c08 	add.w	ip, ip, #8
 8016fb8:	45b4      	cmp	ip, r6
 8016fba:	4613      	mov	r3, r2
 8016fbc:	d1f4      	bne.n	8016fa8 <retrieveIPv6Header.constprop.0+0x4e8>
 8016fbe:	7832      	ldrb	r2, [r6, #0]
 8016fc0:	701a      	strb	r2, [r3, #0]
 8016fc2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016fc6:	3308      	adds	r3, #8
 8016fc8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016fcc:	2005      	movs	r0, #5
 8016fce:	f7f5 fb2b 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8016fd2:	4652      	mov	r2, sl
 8016fd4:	4601      	mov	r1, r0
 8016fd6:	a802      	add	r0, sp, #8
 8016fd8:	f7f6 fbe4 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8016fdc:	aa02      	add	r2, sp, #8
 8016fde:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8016fe2:	f852 1b04 	ldr.w	r1, [r2], #4
 8016fe6:	f843 1b04 	str.w	r1, [r3], #4
 8016fea:	42b2      	cmp	r2, r6
 8016fec:	d1f9      	bne.n	8016fe2 <retrieveIPv6Header.constprop.0+0x522>
 8016fee:	e0b3      	b.n	8017158 <retrieveIPv6Header.constprop.0+0x698>
 8016ff0:	1c51      	adds	r1, r2, #1
 8016ff2:	b2c9      	uxtb	r1, r1
 8016ff4:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	440b      	add	r3, r1
 8016ffe:	442b      	add	r3, r5
 8017000:	041b      	lsls	r3, r3, #16
 8017002:	1c90      	adds	r0, r2, #2
 8017004:	b2c0      	uxtb	r0, r0
 8017006:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 801700a:	6063      	str	r3, [r4, #4]
 801700c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8017010:	6879      	ldr	r1, [r7, #4]
 8017012:	7809      	ldrb	r1, [r1, #0]
 8017014:	4401      	add	r1, r0
 8017016:	4429      	add	r1, r5
 8017018:	1cd0      	adds	r0, r2, #3
 801701a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801701e:	b2c0      	uxtb	r0, r0
 8017020:	6063      	str	r3, [r4, #4]
 8017022:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
 8017026:	6879      	ldr	r1, [r7, #4]
 8017028:	7809      	ldrb	r1, [r1, #0]
 801702a:	4401      	add	r1, r0
 801702c:	4429      	add	r1, r5
 801702e:	430b      	orrs	r3, r1
 8017030:	6063      	str	r3, [r4, #4]
 8017032:	1d13      	adds	r3, r2, #4
 8017034:	e5df      	b.n	8016bf6 <retrieveIPv6Header.constprop.0+0x136>
 8017036:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801703a:	6061      	str	r1, [r4, #4]
 801703c:	3301      	adds	r3, #1
 801703e:	e5da      	b.n	8016bf6 <retrieveIPv6Header.constprop.0+0x136>
 8017040:	2301      	movs	r3, #1
 8017042:	7223      	strb	r3, [r4, #8]
 8017044:	e783      	b.n	8016f4e <retrieveIPv6Header.constprop.0+0x48e>
 8017046:	2340      	movs	r3, #64	; 0x40
 8017048:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 801704c:	e792      	b.n	8016f74 <retrieveIPv6Header.constprop.0+0x4b4>
 801704e:	23ff      	movs	r3, #255	; 0xff
 8017050:	e7fa      	b.n	8017048 <retrieveIPv6Header.constprop.0+0x588>
 8017052:	2005      	movs	r0, #5
 8017054:	f7f5 fae8 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017058:	f107 0241 	add.w	r2, r7, #65	; 0x41
 801705c:	4601      	mov	r1, r0
 801705e:	a802      	add	r0, sp, #8
 8017060:	f7f6 fba0 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8017064:	aa02      	add	r2, sp, #8
 8017066:	f104 0326 	add.w	r3, r4, #38	; 0x26
 801706a:	f852 1b04 	ldr.w	r1, [r2], #4
 801706e:	f843 1b04 	str.w	r1, [r3], #4
 8017072:	42b2      	cmp	r2, r6
 8017074:	d1f9      	bne.n	801706a <retrieveIPv6Header.constprop.0+0x5aa>
 8017076:	7832      	ldrb	r2, [r6, #0]
 8017078:	701a      	strb	r2, [r3, #0]
 801707a:	f7f6 fd1f 	bl	800dabc <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 801707e:	6803      	ldr	r3, [r0, #0]
 8017080:	f8c4 3027 	str.w	r3, [r4, #39]	; 0x27
 8017084:	6843      	ldr	r3, [r0, #4]
 8017086:	f8c4 302b 	str.w	r3, [r4, #43]	; 0x2b
 801708a:	f1b9 0f00 	cmp.w	r9, #0
 801708e:	f000 80d5 	beq.w	801723c <retrieveIPv6Header.constprop.0+0x77c>
 8017092:	f1b8 0f02 	cmp.w	r8, #2
 8017096:	d07f      	beq.n	8017198 <retrieveIPv6Header.constprop.0+0x6d8>
 8017098:	f1b8 0f03 	cmp.w	r8, #3
 801709c:	f040 80c4 	bne.w	8017228 <retrieveIPv6Header.constprop.0+0x768>
 80170a0:	4b3c      	ldr	r3, [pc, #240]	; (8017194 <retrieveIPv6Header.constprop.0+0x6d4>)
 80170a2:	f104 0237 	add.w	r2, r4, #55	; 0x37
 80170a6:	f103 0110 	add.w	r1, r3, #16
 80170aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80170ae:	f842 0b04 	str.w	r0, [r2], #4
 80170b2:	428b      	cmp	r3, r1
 80170b4:	d1f9      	bne.n	80170aa <retrieveIPv6Header.constprop.0+0x5ea>
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	7013      	strb	r3, [r2, #0]
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80170c0:	442a      	add	r2, r5
 80170c2:	5cd2      	ldrb	r2, [r2, r3]
 80170c4:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
 80170c8:	3301      	adds	r3, #1
 80170ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80170ce:	e09b      	b.n	8017208 <retrieveIPv6Header.constprop.0+0x748>
 80170d0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	4429      	add	r1, r5
 80170d8:	2300      	movs	r3, #0
 80170da:	2201      	movs	r2, #1
 80170dc:	4401      	add	r1, r0
 80170de:	a802      	add	r0, sp, #8
 80170e0:	f003 fe73 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 80170e4:	ab0a      	add	r3, sp, #40	; 0x28
 80170e6:	aa02      	add	r2, sp, #8
 80170e8:	469e      	mov	lr, r3
 80170ea:	6810      	ldr	r0, [r2, #0]
 80170ec:	6851      	ldr	r1, [r2, #4]
 80170ee:	469c      	mov	ip, r3
 80170f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80170f4:	3208      	adds	r2, #8
 80170f6:	42b2      	cmp	r2, r6
 80170f8:	4663      	mov	r3, ip
 80170fa:	d1f6      	bne.n	80170ea <retrieveIPv6Header.constprop.0+0x62a>
 80170fc:	7832      	ldrb	r2, [r6, #0]
 80170fe:	f88c 2000 	strb.w	r2, [ip]
 8017102:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017106:	3302      	adds	r3, #2
 8017108:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801710c:	4671      	mov	r1, lr
 801710e:	a802      	add	r0, sp, #8
 8017110:	f7f6 fbe2 	bl	800d8d8 <9730579196d24a2a06a66ac441c59b7f99b57834>
 8017114:	ab0f      	add	r3, sp, #60	; 0x3c
 8017116:	f10d 0c08 	add.w	ip, sp, #8
 801711a:	469a      	mov	sl, r3
 801711c:	f8dc 0000 	ldr.w	r0, [ip]
 8017120:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017124:	461a      	mov	r2, r3
 8017126:	c203      	stmia	r2!, {r0, r1}
 8017128:	f10c 0c08 	add.w	ip, ip, #8
 801712c:	45b4      	cmp	ip, r6
 801712e:	4613      	mov	r3, r2
 8017130:	d1f4      	bne.n	801711c <retrieveIPv6Header.constprop.0+0x65c>
 8017132:	7832      	ldrb	r2, [r6, #0]
 8017134:	701a      	strb	r2, [r3, #0]
 8017136:	2005      	movs	r0, #5
 8017138:	f7f5 fa76 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801713c:	4652      	mov	r2, sl
 801713e:	4601      	mov	r1, r0
 8017140:	a802      	add	r0, sp, #8
 8017142:	f7f6 fb2f 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8017146:	aa02      	add	r2, sp, #8
 8017148:	f104 0326 	add.w	r3, r4, #38	; 0x26
 801714c:	f852 1b04 	ldr.w	r1, [r2], #4
 8017150:	f843 1b04 	str.w	r1, [r3], #4
 8017154:	42b2      	cmp	r2, r6
 8017156:	d1f9      	bne.n	801714c <retrieveIPv6Header.constprop.0+0x68c>
 8017158:	7832      	ldrb	r2, [r6, #0]
 801715a:	701a      	strb	r2, [r3, #0]
 801715c:	e795      	b.n	801708a <retrieveIPv6Header.constprop.0+0x5ca>
 801715e:	1958      	adds	r0, r3, r5
 8017160:	2203      	movs	r2, #3
 8017162:	2300      	movs	r3, #0
 8017164:	4401      	add	r1, r0
 8017166:	a802      	add	r0, sp, #8
 8017168:	f003 fe2f 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801716c:	aa02      	add	r2, sp, #8
 801716e:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8017172:	f852 1b04 	ldr.w	r1, [r2], #4
 8017176:	f843 1b04 	str.w	r1, [r3], #4
 801717a:	42b2      	cmp	r2, r6
 801717c:	d1f9      	bne.n	8017172 <retrieveIPv6Header.constprop.0+0x6b2>
 801717e:	7832      	ldrb	r2, [r6, #0]
 8017180:	701a      	strb	r2, [r3, #0]
 8017182:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017186:	3310      	adds	r3, #16
 8017188:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801718c:	e77d      	b.n	801708a <retrieveIPv6Header.constprop.0+0x5ca>
 801718e:	bf00      	nop
 8017190:	08021838 	.word	0x08021838
 8017194:	0801eeb8 	.word	0x0801eeb8
 8017198:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	4429      	add	r1, r5
 80171a0:	2300      	movs	r3, #0
 80171a2:	4401      	add	r1, r0
 80171a4:	2201      	movs	r2, #1
 80171a6:	a802      	add	r0, sp, #8
 80171a8:	f003 fe0f 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 80171ac:	ab0a      	add	r3, sp, #40	; 0x28
 80171ae:	f10d 0c08 	add.w	ip, sp, #8
 80171b2:	4699      	mov	r9, r3
 80171b4:	f8dc 0000 	ldr.w	r0, [ip]
 80171b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80171bc:	469e      	mov	lr, r3
 80171be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80171c2:	f10c 0c08 	add.w	ip, ip, #8
 80171c6:	45b4      	cmp	ip, r6
 80171c8:	4673      	mov	r3, lr
 80171ca:	d1f3      	bne.n	80171b4 <retrieveIPv6Header.constprop.0+0x6f4>
 80171cc:	7832      	ldrb	r2, [r6, #0]
 80171ce:	f88e 2000 	strb.w	r2, [lr]
 80171d2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80171d6:	46a0      	mov	r8, r4
 80171d8:	3302      	adds	r3, #2
 80171da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80171de:	2303      	movs	r3, #3
 80171e0:	f808 3f37 	strb.w	r3, [r8, #55]!
 80171e4:	2005      	movs	r0, #5
 80171e6:	f7f5 fa1f 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80171ea:	464a      	mov	r2, r9
 80171ec:	4601      	mov	r1, r0
 80171ee:	a802      	add	r0, sp, #8
 80171f0:	f7f6 fbb8 	bl	800d964 <144ed7de545b4a42832ce04a16bf065a50d4ff30>
 80171f4:	ab02      	add	r3, sp, #8
 80171f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80171fa:	f848 2b04 	str.w	r2, [r8], #4
 80171fe:	42b3      	cmp	r3, r6
 8017200:	d1f9      	bne.n	80171f6 <retrieveIPv6Header.constprop.0+0x736>
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	f888 3000 	strb.w	r3, [r8]
 8017208:	7a23      	ldrb	r3, [r4, #8]
 801720a:	b153      	cbz	r3, 8017222 <retrieveIPv6Header.constprop.0+0x762>
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8017212:	442b      	add	r3, r5
 8017214:	5c9b      	ldrb	r3, [r3, r2]
 8017216:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801721a:	2bf0      	cmp	r3, #240	; 0xf0
 801721c:	d101      	bne.n	8017222 <retrieveIPv6Header.constprop.0+0x762>
 801721e:	2311      	movs	r3, #17
 8017220:	7263      	strb	r3, [r4, #9]
 8017222:	b015      	add	sp, #84	; 0x54
 8017224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017228:	2303      	movs	r3, #3
 801722a:	9308      	str	r3, [sp, #32]
 801722c:	4b86      	ldr	r3, [pc, #536]	; (8017448 <retrieveIPv6Header.constprop.0+0x988>)
 801722e:	4a87      	ldr	r2, [pc, #540]	; (801744c <retrieveIPv6Header.constprop.0+0x98c>)
 8017230:	9309      	str	r3, [sp, #36]	; 0x24
 8017232:	4619      	mov	r1, r3
 8017234:	2003      	movs	r0, #3
 8017236:	f7f9 f9fd 	bl	8010634 <LOGGER_PrintLine>
 801723a:	e7e5      	b.n	8017208 <retrieveIPv6Header.constprop.0+0x748>
 801723c:	f1b8 0f02 	cmp.w	r8, #2
 8017240:	d052      	beq.n	80172e8 <retrieveIPv6Header.constprop.0+0x828>
 8017242:	f1b8 0f03 	cmp.w	r8, #3
 8017246:	d037      	beq.n	80172b8 <retrieveIPv6Header.constprop.0+0x7f8>
 8017248:	f1b8 0f01 	cmp.w	r8, #1
 801724c:	6879      	ldr	r1, [r7, #4]
 801724e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017252:	f040 8090 	bne.w	8017376 <retrieveIPv6Header.constprop.0+0x8b6>
 8017256:	1958      	adds	r0, r3, r5
 8017258:	4401      	add	r1, r0
 801725a:	464b      	mov	r3, r9
 801725c:	2202      	movs	r2, #2
 801725e:	a802      	add	r0, sp, #8
 8017260:	f003 fdb3 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 8017264:	ab0f      	add	r3, sp, #60	; 0x3c
 8017266:	f10d 0c08 	add.w	ip, sp, #8
 801726a:	4698      	mov	r8, r3
 801726c:	f8dc 0000 	ldr.w	r0, [ip]
 8017270:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017274:	469e      	mov	lr, r3
 8017276:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801727a:	f10c 0c08 	add.w	ip, ip, #8
 801727e:	45b4      	cmp	ip, r6
 8017280:	4673      	mov	r3, lr
 8017282:	d1f3      	bne.n	801726c <retrieveIPv6Header.constprop.0+0x7ac>
 8017284:	7832      	ldrb	r2, [r6, #0]
 8017286:	f88e 2000 	strb.w	r2, [lr]
 801728a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801728e:	3308      	adds	r3, #8
 8017290:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8017294:	2005      	movs	r0, #5
 8017296:	f7f5 f9c7 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801729a:	4642      	mov	r2, r8
 801729c:	4601      	mov	r1, r0
 801729e:	a802      	add	r0, sp, #8
 80172a0:	f7f6 fa80 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 80172a4:	ab02      	add	r3, sp, #8
 80172a6:	f104 0237 	add.w	r2, r4, #55	; 0x37
 80172aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80172ae:	f842 1b04 	str.w	r1, [r2], #4
 80172b2:	42b3      	cmp	r3, r6
 80172b4:	d1f9      	bne.n	80172aa <retrieveIPv6Header.constprop.0+0x7ea>
 80172b6:	e014      	b.n	80172e2 <retrieveIPv6Header.constprop.0+0x822>
 80172b8:	2005      	movs	r0, #5
 80172ba:	f7f5 f9b5 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80172be:	4680      	mov	r8, r0
 80172c0:	2002      	movs	r0, #2
 80172c2:	f7f5 f9b1 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80172c6:	4641      	mov	r1, r8
 80172c8:	4602      	mov	r2, r0
 80172ca:	a802      	add	r0, sp, #8
 80172cc:	f7f6 fa6a 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 80172d0:	ab02      	add	r3, sp, #8
 80172d2:	f104 0237 	add.w	r2, r4, #55	; 0x37
 80172d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80172da:	f842 1b04 	str.w	r1, [r2], #4
 80172de:	42b3      	cmp	r3, r6
 80172e0:	d1f9      	bne.n	80172d6 <retrieveIPv6Header.constprop.0+0x816>
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	7013      	strb	r3, [r2, #0]
 80172e6:	e78f      	b.n	8017208 <retrieveIPv6Header.constprop.0+0x748>
 80172e8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	4429      	add	r1, r5
 80172f0:	464b      	mov	r3, r9
 80172f2:	2201      	movs	r2, #1
 80172f4:	4401      	add	r1, r0
 80172f6:	a802      	add	r0, sp, #8
 80172f8:	f003 fd67 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 80172fc:	ab0a      	add	r3, sp, #40	; 0x28
 80172fe:	aa02      	add	r2, sp, #8
 8017300:	469e      	mov	lr, r3
 8017302:	6810      	ldr	r0, [r2, #0]
 8017304:	6851      	ldr	r1, [r2, #4]
 8017306:	469c      	mov	ip, r3
 8017308:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801730c:	3208      	adds	r2, #8
 801730e:	42b2      	cmp	r2, r6
 8017310:	4663      	mov	r3, ip
 8017312:	d1f6      	bne.n	8017302 <retrieveIPv6Header.constprop.0+0x842>
 8017314:	7832      	ldrb	r2, [r6, #0]
 8017316:	f88c 2000 	strb.w	r2, [ip]
 801731a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801731e:	3302      	adds	r3, #2
 8017320:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8017324:	4671      	mov	r1, lr
 8017326:	a802      	add	r0, sp, #8
 8017328:	f7f6 fad6 	bl	800d8d8 <9730579196d24a2a06a66ac441c59b7f99b57834>
 801732c:	ab0f      	add	r3, sp, #60	; 0x3c
 801732e:	f10d 0c08 	add.w	ip, sp, #8
 8017332:	4698      	mov	r8, r3
 8017334:	f8dc 0000 	ldr.w	r0, [ip]
 8017338:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801733c:	469e      	mov	lr, r3
 801733e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017342:	f10c 0c08 	add.w	ip, ip, #8
 8017346:	45b4      	cmp	ip, r6
 8017348:	4673      	mov	r3, lr
 801734a:	d1f3      	bne.n	8017334 <retrieveIPv6Header.constprop.0+0x874>
 801734c:	7832      	ldrb	r2, [r6, #0]
 801734e:	f88e 2000 	strb.w	r2, [lr]
 8017352:	2005      	movs	r0, #5
 8017354:	f7f5 f968 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017358:	4642      	mov	r2, r8
 801735a:	4601      	mov	r1, r0
 801735c:	a802      	add	r0, sp, #8
 801735e:	f7f6 fa21 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 8017362:	ab02      	add	r3, sp, #8
 8017364:	f104 0237 	add.w	r2, r4, #55	; 0x37
 8017368:	f853 1b04 	ldr.w	r1, [r3], #4
 801736c:	f842 1b04 	str.w	r1, [r2], #4
 8017370:	42b3      	cmp	r3, r6
 8017372:	d1f9      	bne.n	8017368 <retrieveIPv6Header.constprop.0+0x8a8>
 8017374:	e7b5      	b.n	80172e2 <retrieveIPv6Header.constprop.0+0x822>
 8017376:	1958      	adds	r0, r3, r5
 8017378:	2203      	movs	r2, #3
 801737a:	464b      	mov	r3, r9
 801737c:	4401      	add	r1, r0
 801737e:	a802      	add	r0, sp, #8
 8017380:	f003 fd23 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 8017384:	ab02      	add	r3, sp, #8
 8017386:	f104 0237 	add.w	r2, r4, #55	; 0x37
 801738a:	f853 1b04 	ldr.w	r1, [r3], #4
 801738e:	f842 1b04 	str.w	r1, [r2], #4
 8017392:	42b3      	cmp	r3, r6
 8017394:	d1f9      	bne.n	801738a <retrieveIPv6Header.constprop.0+0x8ca>
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	7013      	strb	r3, [r2, #0]
 801739a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801739e:	3310      	adds	r3, #16
 80173a0:	e693      	b.n	80170ca <retrieveIPv6Header.constprop.0+0x60a>
 80173a2:	f1b8 0f09 	cmp.w	r8, #9
 80173a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80173aa:	d01b      	beq.n	80173e4 <retrieveIPv6Header.constprop.0+0x924>
 80173ac:	2b10      	cmp	r3, #16
 80173ae:	d145      	bne.n	801743c <retrieveIPv6Header.constprop.0+0x97c>
 80173b0:	6879      	ldr	r1, [r7, #4]
 80173b2:	442e      	add	r6, r5
 80173b4:	464b      	mov	r3, r9
 80173b6:	2203      	movs	r2, #3
 80173b8:	4431      	add	r1, r6
 80173ba:	a802      	add	r0, sp, #8
 80173bc:	f003 fd05 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 80173c0:	ab02      	add	r3, sp, #8
 80173c2:	f104 0226 	add.w	r2, r4, #38	; 0x26
 80173c6:	a906      	add	r1, sp, #24
 80173c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80173cc:	f842 0b04 	str.w	r0, [r2], #4
 80173d0:	428b      	cmp	r3, r1
 80173d2:	d1f9      	bne.n	80173c8 <retrieveIPv6Header.constprop.0+0x908>
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	7013      	strb	r3, [r2, #0]
 80173d8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80173dc:	3310      	adds	r3, #16
 80173de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80173e2:	e71e      	b.n	8017222 <retrieveIPv6Header.constprop.0+0x762>
 80173e4:	6879      	ldr	r1, [r7, #4]
 80173e6:	442e      	add	r6, r5
 80173e8:	464b      	mov	r3, r9
 80173ea:	2202      	movs	r2, #2
 80173ec:	4431      	add	r1, r6
 80173ee:	a802      	add	r0, sp, #8
 80173f0:	f003 fceb 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 80173f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80173f6:	ad02      	add	r5, sp, #8
 80173f8:	af06      	add	r7, sp, #24
 80173fa:	4698      	mov	r8, r3
 80173fc:	6828      	ldr	r0, [r5, #0]
 80173fe:	6869      	ldr	r1, [r5, #4]
 8017400:	461e      	mov	r6, r3
 8017402:	c603      	stmia	r6!, {r0, r1}
 8017404:	3508      	adds	r5, #8
 8017406:	42bd      	cmp	r5, r7
 8017408:	4633      	mov	r3, r6
 801740a:	d1f7      	bne.n	80173fc <retrieveIPv6Header.constprop.0+0x93c>
 801740c:	783a      	ldrb	r2, [r7, #0]
 801740e:	7032      	strb	r2, [r6, #0]
 8017410:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8017414:	3308      	adds	r3, #8
 8017416:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801741a:	2005      	movs	r0, #5
 801741c:	f7f5 f904 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017420:	4642      	mov	r2, r8
 8017422:	4601      	mov	r1, r0
 8017424:	a802      	add	r0, sp, #8
 8017426:	f7f6 f9bd 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801742a:	3426      	adds	r4, #38	; 0x26
 801742c:	ab02      	add	r3, sp, #8
 801742e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017432:	f844 2b04 	str.w	r2, [r4], #4
 8017436:	42bb      	cmp	r3, r7
 8017438:	d1f9      	bne.n	801742e <retrieveIPv6Header.constprop.0+0x96e>
 801743a:	e575      	b.n	8016f28 <retrieveIPv6Header.constprop.0+0x468>
 801743c:	2303      	movs	r3, #3
 801743e:	930a      	str	r3, [sp, #40]	; 0x28
 8017440:	4b01      	ldr	r3, [pc, #4]	; (8017448 <retrieveIPv6Header.constprop.0+0x988>)
 8017442:	4a03      	ldr	r2, [pc, #12]	; (8017450 <retrieveIPv6Header.constprop.0+0x990>)
 8017444:	930b      	str	r3, [sp, #44]	; 0x2c
 8017446:	e42d      	b.n	8016ca4 <retrieveIPv6Header.constprop.0+0x1e4>
 8017448:	0802177b 	.word	0x0802177b
 801744c:	08021780 	.word	0x08021780
 8017450:	08021790 	.word	0x08021790

08017454 <13ccdc5f94324d1909629c7f21aeb736294bb0ba>:
 8017454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017458:	461d      	mov	r5, r3
 801745a:	2361      	movs	r3, #97	; 0x61
 801745c:	7043      	strb	r3, [r0, #1]
 801745e:	b092      	sub	sp, #72	; 0x48
 8017460:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017464:	f89d 9070 	ldrb.w	r9, [sp, #112]	; 0x70
 8017468:	4604      	mov	r4, r0
 801746a:	460e      	mov	r6, r1
 801746c:	2b00      	cmp	r3, #0
 801746e:	d058      	beq.n	8017522 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xce>
 8017470:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8017474:	b96b      	cbnz	r3, 8017492 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x3e>
 8017476:	2303      	movs	r3, #3
 8017478:	930d      	str	r3, [sp, #52]	; 0x34
 801747a:	4b8a      	ldr	r3, [pc, #552]	; (80176a4 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x250>)
 801747c:	4a8a      	ldr	r2, [pc, #552]	; (80176a8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x254>)
 801747e:	930e      	str	r3, [sp, #56]	; 0x38
 8017480:	4619      	mov	r1, r3
 8017482:	2003      	movs	r0, #3
 8017484:	f7f9 f8d6 	bl	8010634 <LOGGER_PrintLine>
 8017488:	2500      	movs	r5, #0
 801748a:	4628      	mov	r0, r5
 801748c:	b012      	add	sp, #72	; 0x48
 801748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017492:	3b01      	subs	r3, #1
 8017494:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 8017498:	f104 081d 	add.w	r8, r4, #29
 801749c:	4641      	mov	r1, r8
 801749e:	a803      	add	r0, sp, #12
 80174a0:	f104 072e 	add.w	r7, r4, #46	; 0x2e
 80174a4:	f7f6 f92e 	bl	800d704 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 80174a8:	4639      	mov	r1, r7
 80174aa:	a808      	add	r0, sp, #32
 80174ac:	f7f6 f92a 	bl	800d704 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 80174b0:	4640      	mov	r0, r8
 80174b2:	f7f5 ff8f 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 80174b6:	a908      	add	r1, sp, #32
 80174b8:	4682      	mov	sl, r0
 80174ba:	a803      	add	r0, sp, #12
 80174bc:	f7f6 f860 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d153      	bne.n	801756c <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x118>
 80174c4:	f1ba 0f00 	cmp.w	sl, #0
 80174c8:	d150      	bne.n	801756c <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x118>
 80174ca:	2005      	movs	r0, #5
 80174cc:	f7f5 f8ac 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80174d0:	4a76      	ldr	r2, [pc, #472]	; (80176ac <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x258>)
 80174d2:	4601      	mov	r1, r0
 80174d4:	a80d      	add	r0, sp, #52	; 0x34
 80174d6:	f7f6 f965 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 80174da:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 80174de:	b343      	cbz	r3, 8017532 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xde>
 80174e0:	a90d      	add	r1, sp, #52	; 0x34
 80174e2:	f106 0026 	add.w	r0, r6, #38	; 0x26
 80174e6:	f7f6 f84b 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 80174ea:	bb48      	cbnz	r0, 8017540 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0xec>
 80174ec:	2200      	movs	r2, #0
 80174ee:	4639      	mov	r1, r7
 80174f0:	4620      	mov	r0, r4
 80174f2:	f003 fcbf 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80174f6:	2101      	movs	r1, #1
 80174f8:	4620      	mov	r0, r4
 80174fa:	f003 fc9b 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80174fe:	6863      	ldr	r3, [r4, #4]
 8017500:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8017504:	701a      	strb	r2, [r3, #0]
 8017506:	2101      	movs	r1, #1
 8017508:	4620      	mov	r0, r4
 801750a:	f003 fc93 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801750e:	6863      	ldr	r3, [r4, #4]
 8017510:	2206      	movs	r2, #6
 8017512:	701a      	strb	r2, [r3, #0]
 8017514:	2101      	movs	r1, #1
 8017516:	4620      	mov	r0, r4
 8017518:	f003 fc8c 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801751c:	6863      	ldr	r3, [r4, #4]
 801751e:	22b1      	movs	r2, #177	; 0xb1
 8017520:	e023      	b.n	801756a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x116>
 8017522:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8017526:	2b00      	cmp	r3, #0
 8017528:	d0a5      	beq.n	8017476 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x22>
 801752a:	3b01      	subs	r3, #1
 801752c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017530:	e7b2      	b.n	8017498 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x44>
 8017532:	a90d      	add	r1, sp, #52	; 0x34
 8017534:	4638      	mov	r0, r7
 8017536:	f7f6 f823 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 801753a:	2800      	cmp	r0, #0
 801753c:	f000 809c 	beq.w	8017678 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x224>
 8017540:	2101      	movs	r1, #1
 8017542:	4620      	mov	r0, r4
 8017544:	f003 fc76 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017548:	6863      	ldr	r3, [r4, #4]
 801754a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 801754e:	701a      	strb	r2, [r3, #0]
 8017550:	2101      	movs	r1, #1
 8017552:	4620      	mov	r0, r4
 8017554:	f003 fc6e 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017558:	6863      	ldr	r3, [r4, #4]
 801755a:	2206      	movs	r2, #6
 801755c:	701a      	strb	r2, [r3, #0]
 801755e:	2101      	movs	r1, #1
 8017560:	4620      	mov	r0, r4
 8017562:	f003 fc67 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017566:	6863      	ldr	r3, [r4, #4]
 8017568:	22a1      	movs	r2, #161	; 0xa1
 801756a:	701a      	strb	r2, [r3, #0]
 801756c:	782b      	ldrb	r3, [r5, #0]
 801756e:	2b63      	cmp	r3, #99	; 0x63
 8017570:	d12e      	bne.n	80175d0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x17c>
 8017572:	4640      	mov	r0, r8
 8017574:	f7f5 ff2e 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017578:	bb50      	cbnz	r0, 80175d0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x17c>
 801757a:	786b      	ldrb	r3, [r5, #1]
 801757c:	07da      	lsls	r2, r3, #31
 801757e:	f100 8081 	bmi.w	8017684 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x230>
 8017582:	2102      	movs	r1, #2
 8017584:	4620      	mov	r0, r4
 8017586:	f003 fc55 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801758a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 801758e:	6862      	ldr	r2, [r4, #4]
 8017590:	0a1b      	lsrs	r3, r3, #8
 8017592:	7013      	strb	r3, [r2, #0]
 8017594:	6863      	ldr	r3, [r4, #4]
 8017596:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 801759a:	705a      	strb	r2, [r3, #1]
 801759c:	786b      	ldrb	r3, [r5, #1]
 801759e:	079b      	lsls	r3, r3, #30
 80175a0:	d406      	bmi.n	80175b0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x15c>
 80175a2:	2101      	movs	r1, #1
 80175a4:	4620      	mov	r0, r4
 80175a6:	f003 fc45 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80175aa:	6863      	ldr	r3, [r4, #4]
 80175ac:	78aa      	ldrb	r2, [r5, #2]
 80175ae:	701a      	strb	r2, [r3, #0]
 80175b0:	2101      	movs	r1, #1
 80175b2:	4620      	mov	r0, r4
 80175b4:	f003 fc3e 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	2205      	movs	r2, #5
 80175bc:	701a      	strb	r2, [r3, #0]
 80175be:	786d      	ldrb	r5, [r5, #1]
 80175c0:	2101      	movs	r1, #1
 80175c2:	4620      	mov	r0, r4
 80175c4:	f003 fc36 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80175c8:	6863      	ldr	r3, [r4, #4]
 80175ca:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80175ce:	701d      	strb	r5, [r3, #0]
 80175d0:	f1b9 0f00 	cmp.w	r9, #0
 80175d4:	d008      	beq.n	80175e8 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x194>
 80175d6:	4649      	mov	r1, r9
 80175d8:	4620      	mov	r0, r4
 80175da:	f003 fc2b 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80175de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80175e0:	6860      	ldr	r0, [r4, #4]
 80175e2:	464a      	mov	r2, r9
 80175e4:	f004 fd7f 	bl	801c0e6 <memcpy>
 80175e8:	6863      	ldr	r3, [r4, #4]
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80175f0:	2b80      	cmp	r3, #128	; 0x80
 80175f2:	d106      	bne.n	8017602 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x1ae>
 80175f4:	2101      	movs	r1, #1
 80175f6:	4620      	mov	r0, r4
 80175f8:	f003 fc1c 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80175fc:	6863      	ldr	r3, [r4, #4]
 80175fe:	22f1      	movs	r2, #241	; 0xf1
 8017600:	701a      	strb	r2, [r3, #0]
 8017602:	f7f5 f803 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8017606:	4605      	mov	r5, r0
 8017608:	2800      	cmp	r0, #0
 801760a:	d045      	beq.n	8017698 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x244>
 801760c:	4640      	mov	r0, r8
 801760e:	f7f5 ff49 	bl	800d4a4 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 8017612:	2800      	cmp	r0, #0
 8017614:	d140      	bne.n	8017698 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x244>
 8017616:	2005      	movs	r0, #5
 8017618:	f7f5 f806 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801761c:	4606      	mov	r6, r0
 801761e:	2002      	movs	r0, #2
 8017620:	f7f5 f802 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017624:	4631      	mov	r1, r6
 8017626:	4602      	mov	r2, r0
 8017628:	a80d      	add	r0, sp, #52	; 0x34
 801762a:	f7f6 f8bb 	bl	800d7a4 <e1f09b154ce8c1c840a8dd2e4c2e0aa8149bfcd4>
 801762e:	4639      	mov	r1, r7
 8017630:	a80d      	add	r0, sp, #52	; 0x34
 8017632:	f7f5 ffa5 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8017636:	b170      	cbz	r0, 8017656 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x202>
 8017638:	2002      	movs	r0, #2
 801763a:	f7f4 fff5 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801763e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8017642:	f100 0210 	add.w	r2, r0, #16
 8017646:	f850 1b04 	ldr.w	r1, [r0], #4
 801764a:	f843 1b04 	str.w	r1, [r3], #4
 801764e:	4290      	cmp	r0, r2
 8017650:	d1f9      	bne.n	8017646 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x1f2>
 8017652:	7802      	ldrb	r2, [r0, #0]
 8017654:	701a      	strb	r2, [r3, #0]
 8017656:	4668      	mov	r0, sp
 8017658:	f7fb fe0c 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 801765c:	9b00      	ldr	r3, [sp, #0]
 801765e:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
 8017662:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017666:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801766a:	4620      	mov	r0, r4
 801766c:	f7f7 f8fa 	bl	800e864 <db78e4d9b28d7c42d16d219c1384c29b20a49150>
 8017670:	4620      	mov	r0, r4
 8017672:	f7f6 fbbf 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017676:	e708      	b.n	801748a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x36>
 8017678:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 801767c:	2b00      	cmp	r3, #0
 801767e:	f43f af35 	beq.w	80174ec <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x98>
 8017682:	e72d      	b.n	80174e0 <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x8c>
 8017684:	2101      	movs	r1, #1
 8017686:	4620      	mov	r0, r4
 8017688:	f003 fbd4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801768c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 8017690:	6862      	ldr	r2, [r4, #4]
 8017692:	0a1b      	lsrs	r3, r3, #8
 8017694:	7013      	strb	r3, [r2, #0]
 8017696:	e781      	b.n	801759c <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x148>
 8017698:	4620      	mov	r0, r4
 801769a:	f7fd ff87 	bl	80155ac <84a9c9a6c63997e804410fedf3e4beedf650a414>
 801769e:	4605      	mov	r5, r0
 80176a0:	e6f3      	b.n	801748a <13ccdc5f94324d1909629c7f21aeb736294bb0ba+0x36>
 80176a2:	bf00      	nop
 80176a4:	0802177b 	.word	0x0802177b
 80176a8:	080217a4 	.word	0x080217a4
 80176ac:	08021838 	.word	0x08021838

080176b0 <c4cc1e8c684869221cde02c1ffd97d6034352506>:
 80176b0:	7803      	ldrb	r3, [r0, #0]
 80176b2:	2261      	movs	r2, #97	; 0x61
 80176b4:	2b60      	cmp	r3, #96	; 0x60
 80176b6:	7042      	strb	r2, [r0, #1]
 80176b8:	d101      	bne.n	80176be <c4cc1e8c684869221cde02c1ffd97d6034352506+0xe>
 80176ba:	f7f7 b8b7 	b.w	800e82c <c122f50a74e97b0b971f059f93cac9f52ab85af9>
 80176be:	f000 bb39 	b.w	8017d34 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2>
	...

080176c4 <2058bb475204def8ad39a4c1db4c087e75b9f860>:
 80176c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c8:	b087      	sub	sp, #28
 80176ca:	469a      	mov	sl, r3
 80176cc:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80176d0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80176d4:	9303      	str	r3, [sp, #12]
 80176d6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80176da:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80176de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80176e0:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
 80176e4:	4604      	mov	r4, r0
 80176e6:	468b      	mov	fp, r1
 80176e8:	4615      	mov	r5, r2
 80176ea:	2e03      	cmp	r6, #3
 80176ec:	d83b      	bhi.n	8017766 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xa2>
 80176ee:	e8df f006 	tbb	[pc, r6]
 80176f2:	2e34      	.short	0x2e34
 80176f4:	0214      	.short	0x0214
 80176f6:	f1b9 0f00 	cmp.w	r9, #0
 80176fa:	d007      	beq.n	801770c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 80176fc:	2101      	movs	r1, #1
 80176fe:	9319      	str	r3, [sp, #100]	; 0x64
 8017700:	f003 fb98 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017706:	6862      	ldr	r2, [r4, #4]
 8017708:	7c1b      	ldrb	r3, [r3, #16]
 801770a:	7013      	strb	r3, [r2, #0]
 801770c:	9a03      	ldr	r2, [sp, #12]
 801770e:	2a03      	cmp	r2, #3
 8017710:	d876      	bhi.n	8017800 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x13c>
 8017712:	e8df f002 	tbb	[pc, r2]
 8017716:	5561      	.short	0x5561
 8017718:	4b36      	.short	0x4b36
 801771a:	f1b9 0f00 	cmp.w	r9, #0
 801771e:	d1f5      	bne.n	801770c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8017720:	781a      	ldrb	r2, [r3, #0]
 8017722:	2a01      	cmp	r2, #1
 8017724:	d00d      	beq.n	8017742 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x7e>
 8017726:	2303      	movs	r3, #3
 8017728:	9304      	str	r3, [sp, #16]
 801772a:	4a79      	ldr	r2, [pc, #484]	; (8017910 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x24c>)
 801772c:	4b79      	ldr	r3, [pc, #484]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 801772e:	9305      	str	r3, [sp, #20]
 8017730:	ab06      	add	r3, sp, #24
 8017732:	e913 0003 	ldmdb	r3, {r0, r1}
 8017736:	f7f8 ff7d 	bl	8010634 <LOGGER_PrintLine>
 801773a:	2000      	movs	r0, #0
 801773c:	b007      	add	sp, #28
 801773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017742:	2200      	movs	r2, #0
 8017744:	4619      	mov	r1, r3
 8017746:	4620      	mov	r0, r4
 8017748:	f003 fb94 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 801774c:	e7de      	b.n	801770c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 801774e:	f1b9 0f00 	cmp.w	r9, #0
 8017752:	d1db      	bne.n	801770c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8017754:	781a      	ldrb	r2, [r3, #0]
 8017756:	2a02      	cmp	r2, #2
 8017758:	e7e4      	b.n	8017724 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x60>
 801775a:	f1b9 0f00 	cmp.w	r9, #0
 801775e:	d1d5      	bne.n	801770c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x48>
 8017760:	781a      	ldrb	r2, [r3, #0]
 8017762:	2a03      	cmp	r2, #3
 8017764:	e7de      	b.n	8017724 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x60>
 8017766:	2302      	movs	r3, #2
 8017768:	9304      	str	r3, [sp, #16]
 801776a:	4a6b      	ldr	r2, [pc, #428]	; (8017918 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x254>)
 801776c:	4b69      	ldr	r3, [pc, #420]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 801776e:	9305      	str	r3, [sp, #20]
 8017770:	f8cd 9000 	str.w	r9, [sp]
 8017774:	4633      	mov	r3, r6
 8017776:	a906      	add	r1, sp, #24
 8017778:	e911 0003 	ldmdb	r1, {r0, r1}
 801777c:	f7f8 ff5a 	bl	8010634 <LOGGER_PrintLine>
 8017780:	e7db      	b.n	801773a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x76>
 8017782:	f1b8 0f02 	cmp.w	r8, #2
 8017786:	d105      	bne.n	8017794 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xd0>
 8017788:	2001      	movs	r0, #1
 801778a:	f7f4 ff4d 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801778e:	2200      	movs	r2, #0
 8017790:	4601      	mov	r1, r0
 8017792:	e008      	b.n	80177a6 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe2>
 8017794:	f1b8 0f01 	cmp.w	r8, #1
 8017798:	d108      	bne.n	80177ac <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 801779a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b01      	cmp	r3, #1
 80177a0:	d1c1      	bne.n	8017726 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x62>
 80177a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80177a4:	2200      	movs	r2, #0
 80177a6:	4620      	mov	r0, r4
 80177a8:	f003 fb64 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80177ac:	b38f      	cbz	r7, 8017812 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x14e>
 80177ae:	1e7b      	subs	r3, r7, #1
 80177b0:	2b02      	cmp	r3, #2
 80177b2:	d936      	bls.n	8017822 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x15e>
 80177b4:	2302      	movs	r3, #2
 80177b6:	9304      	str	r3, [sp, #16]
 80177b8:	4b56      	ldr	r3, [pc, #344]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 80177ba:	4a58      	ldr	r2, [pc, #352]	; (801791c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x258>)
 80177bc:	9305      	str	r3, [sp, #20]
 80177be:	e7b7      	b.n	8017730 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 80177c0:	f1b8 0f02 	cmp.w	r8, #2
 80177c4:	d101      	bne.n	80177ca <2058bb475204def8ad39a4c1db4c087e75b9f860+0x106>
 80177c6:	4640      	mov	r0, r8
 80177c8:	e7df      	b.n	801778a <2058bb475204def8ad39a4c1db4c087e75b9f860+0xc6>
 80177ca:	f1b8 0f01 	cmp.w	r8, #1
 80177ce:	d1ed      	bne.n	80177ac <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 80177d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	2b02      	cmp	r3, #2
 80177d6:	e7e3      	b.n	80177a0 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xdc>
 80177d8:	f1b8 0f02 	cmp.w	r8, #2
 80177dc:	d109      	bne.n	80177f2 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x12e>
 80177de:	4640      	mov	r0, r8
 80177e0:	f7f4 ff22 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80177e4:	2200      	movs	r2, #0
 80177e6:	4601      	mov	r1, r0
 80177e8:	4620      	mov	r0, r4
 80177ea:	f003 fb43 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 80177ee:	2005      	movs	r0, #5
 80177f0:	e7cb      	b.n	801778a <2058bb475204def8ad39a4c1db4c087e75b9f860+0xc6>
 80177f2:	f1b8 0f01 	cmp.w	r8, #1
 80177f6:	d1d9      	bne.n	80177ac <2058bb475204def8ad39a4c1db4c087e75b9f860+0xe8>
 80177f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	2b03      	cmp	r3, #3
 80177fe:	e7cf      	b.n	80177a0 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xdc>
 8017800:	2302      	movs	r3, #2
 8017802:	9304      	str	r3, [sp, #16]
 8017804:	4b43      	ldr	r3, [pc, #268]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 8017806:	9305      	str	r3, [sp, #20]
 8017808:	4a45      	ldr	r2, [pc, #276]	; (8017920 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x25c>)
 801780a:	f8cd 9000 	str.w	r9, [sp]
 801780e:	4633      	mov	r3, r6
 8017810:	e7b1      	b.n	8017776 <2058bb475204def8ad39a4c1db4c087e75b9f860+0xb2>
 8017812:	2101      	movs	r1, #1
 8017814:	4620      	mov	r0, r4
 8017816:	f003 fb0d 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801781a:	6863      	ldr	r3, [r4, #4]
 801781c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8017820:	701a      	strb	r2, [r3, #0]
 8017822:	f1ba 0f00 	cmp.w	sl, #0
 8017826:	d008      	beq.n	801783a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x176>
 8017828:	f1ba 0f01 	cmp.w	sl, #1
 801782c:	d00d      	beq.n	801784a <2058bb475204def8ad39a4c1db4c087e75b9f860+0x186>
 801782e:	2302      	movs	r3, #2
 8017830:	9304      	str	r3, [sp, #16]
 8017832:	4b38      	ldr	r3, [pc, #224]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 8017834:	4a3b      	ldr	r2, [pc, #236]	; (8017924 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x260>)
 8017836:	9305      	str	r3, [sp, #20]
 8017838:	e77a      	b.n	8017730 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 801783a:	2101      	movs	r1, #1
 801783c:	4620      	mov	r0, r4
 801783e:	f003 faf9 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017842:	6863      	ldr	r3, [r4, #4]
 8017844:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8017848:	701a      	strb	r2, [r3, #0]
 801784a:	f1bb 0f03 	cmp.w	fp, #3
 801784e:	d859      	bhi.n	8017904 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x240>
 8017850:	e8df f00b 	tbb	[pc, fp]
 8017854:	1650023c 	.word	0x1650023c
 8017858:	2101      	movs	r1, #1
 801785a:	4620      	mov	r0, r4
 801785c:	f003 faea 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8017860:	6863      	ldr	r3, [r4, #4]
 8017862:	2101      	movs	r1, #1
 8017864:	701d      	strb	r5, [r3, #0]
 8017866:	4620      	mov	r0, r4
 8017868:	f003 fae4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801786c:	6863      	ldr	r3, [r4, #4]
 801786e:	0a2a      	lsrs	r2, r5, #8
 8017870:	701a      	strb	r2, [r3, #0]
 8017872:	2101      	movs	r1, #1
 8017874:	4620      	mov	r0, r4
 8017876:	f003 fadd 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801787a:	6863      	ldr	r3, [r4, #4]
 801787c:	0c2d      	lsrs	r5, r5, #16
 801787e:	701d      	strb	r5, [r3, #0]
 8017880:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8017884:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8017888:	009b      	lsls	r3, r3, #2
 801788a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801788e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8017892:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8017896:	9a03      	ldr	r2, [sp, #12]
 8017898:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801789c:	431e      	orrs	r6, r3
 801789e:	2101      	movs	r1, #1
 80178a0:	4620      	mov	r0, r4
 80178a2:	f003 fac7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178a6:	ea46 06c9 	orr.w	r6, r6, r9, lsl #3
 80178aa:	6863      	ldr	r3, [r4, #4]
 80178ac:	b2f6      	uxtb	r6, r6
 80178ae:	701e      	strb	r6, [r3, #0]
 80178b0:	2101      	movs	r1, #1
 80178b2:	4620      	mov	r0, r4
 80178b4:	ea47 07cb 	orr.w	r7, r7, fp, lsl #3
 80178b8:	f003 fabc 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178bc:	ea47 078a 	orr.w	r7, r7, sl, lsl #2
 80178c0:	6863      	ldr	r3, [r4, #4]
 80178c2:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 80178c6:	701f      	strb	r7, [r3, #0]
 80178c8:	2001      	movs	r0, #1
 80178ca:	e737      	b.n	801773c <2058bb475204def8ad39a4c1db4c087e75b9f860+0x78>
 80178cc:	2101      	movs	r1, #1
 80178ce:	4620      	mov	r0, r4
 80178d0:	f003 fab0 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178d4:	6863      	ldr	r3, [r4, #4]
 80178d6:	2101      	movs	r1, #1
 80178d8:	701d      	strb	r5, [r3, #0]
 80178da:	4620      	mov	r0, r4
 80178dc:	f003 faaa 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178e0:	6863      	ldr	r3, [r4, #4]
 80178e2:	0a2a      	lsrs	r2, r5, #8
 80178e4:	701a      	strb	r2, [r3, #0]
 80178e6:	2101      	movs	r1, #1
 80178e8:	4620      	mov	r0, r4
 80178ea:	f003 faa3 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178ee:	6863      	ldr	r3, [r4, #4]
 80178f0:	0c2d      	lsrs	r5, r5, #16
 80178f2:	701d      	strb	r5, [r3, #0]
 80178f4:	2101      	movs	r1, #1
 80178f6:	4620      	mov	r0, r4
 80178f8:	f003 fa9c 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80178fc:	6863      	ldr	r3, [r4, #4]
 80178fe:	2200      	movs	r2, #0
 8017900:	701a      	strb	r2, [r3, #0]
 8017902:	e7bd      	b.n	8017880 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x1bc>
 8017904:	2302      	movs	r3, #2
 8017906:	9304      	str	r3, [sp, #16]
 8017908:	4b02      	ldr	r3, [pc, #8]	; (8017914 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x250>)
 801790a:	4a07      	ldr	r2, [pc, #28]	; (8017928 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x264>)
 801790c:	9305      	str	r3, [sp, #20]
 801790e:	e70f      	b.n	8017730 <2058bb475204def8ad39a4c1db4c087e75b9f860+0x6c>
 8017910:	0801f32a 	.word	0x0801f32a
 8017914:	0802177b 	.word	0x0802177b
 8017918:	080217bf 	.word	0x080217bf
 801791c:	080217f2 	.word	0x080217f2
 8017920:	080217d9 	.word	0x080217d9
 8017924:	08021802 	.word	0x08021802
 8017928:	08021810 	.word	0x08021810

0801792c <6fdc701aa2cd71dee737cd6193e5dab778619cb9>:
 801792c:	b513      	push	{r0, r1, r4, lr}
 801792e:	6843      	ldr	r3, [r0, #4]
 8017930:	781a      	ldrb	r2, [r3, #0]
 8017932:	785b      	ldrb	r3, [r3, #1]
 8017934:	f002 04e0 	and.w	r4, r2, #224	; 0xe0
 8017938:	2c80      	cmp	r4, #128	; 0x80
 801793a:	d124      	bne.n	8017986 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x5a>
 801793c:	2b05      	cmp	r3, #5
 801793e:	d122      	bne.n	8017986 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x5a>
 8017940:	f002 031f 	and.w	r3, r2, #31
 8017944:	704b      	strb	r3, [r1, #1]
 8017946:	0793      	lsls	r3, r2, #30
 8017948:	bf56      	itet	pl
 801794a:	6843      	ldrpl	r3, [r0, #4]
 801794c:	2400      	movmi	r4, #0
 801794e:	789c      	ldrbpl	r4, [r3, #2]
 8017950:	708c      	strb	r4, [r1, #2]
 8017952:	bf54      	ite	pl
 8017954:	2303      	movpl	r3, #3
 8017956:	2302      	movmi	r3, #2
 8017958:	f012 0f01 	tst.w	r2, #1
 801795c:	6842      	ldr	r2, [r0, #4]
 801795e:	d10c      	bne.n	801797a <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4e>
 8017960:	5cd4      	ldrb	r4, [r2, r3]
 8017962:	f8a1 4003 	strh.w	r4, [r1, #3]
 8017966:	6842      	ldr	r2, [r0, #4]
 8017968:	441a      	add	r2, r3
 801796a:	1c98      	adds	r0, r3, #2
 801796c:	7852      	ldrb	r2, [r2, #1]
 801796e:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8017972:	f8a1 2003 	strh.w	r2, [r1, #3]
 8017976:	b002      	add	sp, #8
 8017978:	bd10      	pop	{r4, pc}
 801797a:	5cd2      	ldrb	r2, [r2, r3]
 801797c:	0212      	lsls	r2, r2, #8
 801797e:	f8a1 2003 	strh.w	r2, [r1, #3]
 8017982:	1c58      	adds	r0, r3, #1
 8017984:	e7f7      	b.n	8017976 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4a>
 8017986:	2303      	movs	r3, #3
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	4b05      	ldr	r3, [pc, #20]	; (80179a0 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x74>)
 801798c:	9301      	str	r3, [sp, #4]
 801798e:	ab02      	add	r3, sp, #8
 8017990:	e913 0003 	ldmdb	r3, {r0, r1}
 8017994:	4a03      	ldr	r2, [pc, #12]	; (80179a4 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x78>)
 8017996:	f7f8 fe4d 	bl	8010634 <LOGGER_PrintLine>
 801799a:	2000      	movs	r0, #0
 801799c:	e7eb      	b.n	8017976 <6fdc701aa2cd71dee737cd6193e5dab778619cb9+0x4a>
 801799e:	bf00      	nop
 80179a0:	0802177b 	.word	0x0802177b
 80179a4:	0802181e 	.word	0x0802181e

080179a8 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69>:
 80179a8:	b510      	push	{r4, lr}
 80179aa:	2361      	movs	r3, #97	; 0x61
 80179ac:	b0aa      	sub	sp, #168	; 0xa8
 80179ae:	7043      	strb	r3, [r0, #1]
 80179b0:	4604      	mov	r4, r0
 80179b2:	224c      	movs	r2, #76	; 0x4c
 80179b4:	2100      	movs	r1, #0
 80179b6:	a804      	add	r0, sp, #16
 80179b8:	f004 faf6 	bl	801bfa8 <memset>
 80179bc:	224c      	movs	r2, #76	; 0x4c
 80179be:	2100      	movs	r1, #0
 80179c0:	a817      	add	r0, sp, #92	; 0x5c
 80179c2:	f004 faf1 	bl	801bfa8 <memset>
 80179c6:	2300      	movs	r3, #0
 80179c8:	9302      	str	r3, [sp, #8]
 80179ca:	f88d 300c 	strb.w	r3, [sp, #12]
 80179ce:	aa17      	add	r2, sp, #92	; 0x5c
 80179d0:	f10d 0307 	add.w	r3, sp, #7
 80179d4:	a904      	add	r1, sp, #16
 80179d6:	4620      	mov	r0, r4
 80179d8:	f7ff f872 	bl	8016ac0 <retrieveIPv6Header.constprop.0>
 80179dc:	f7f4 fe16 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80179e0:	b138      	cbz	r0, 80179f2 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x4a>
 80179e2:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 80179e6:	f7f5 fd5d 	bl	800d4a4 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 80179ea:	b910      	cbnz	r0, 80179f2 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x4a>
 80179ec:	4620      	mov	r0, r4
 80179ee:	f7f6 ff39 	bl	800e864 <db78e4d9b28d7c42d16d219c1384c29b20a49150>
 80179f2:	f7f4 fe0b 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80179f6:	b978      	cbnz	r0, 8017a18 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x70>
 80179f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80179fc:	4620      	mov	r0, r4
 80179fe:	f003 fa59 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8017a02:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017a06:	b1d3      	cbz	r3, 8017a3e <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x96>
 8017a08:	ab02      	add	r3, sp, #8
 8017a0a:	aa17      	add	r2, sp, #92	; 0x5c
 8017a0c:	a904      	add	r1, sp, #16
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f000 fa1a 	bl	8017e48 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb>
 8017a14:	b02a      	add	sp, #168	; 0xa8
 8017a16:	bd10      	pop	{r4, pc}
 8017a18:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8017a1c:	f7f5 fcda 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017a20:	2800      	cmp	r0, #0
 8017a22:	d1e9      	bne.n	80179f8 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x50>
 8017a24:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8017a28:	f7f4 fe66 	bl	800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8017a2c:	b118      	cbz	r0, 8017a36 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x8e>
 8017a2e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d1e0      	bne.n	80179f8 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x50>
 8017a36:	4620      	mov	r0, r4
 8017a38:	f7f6 f9dc 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017a3c:	e7ea      	b.n	8017a14 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x6c>
 8017a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d0e1      	beq.n	8017a08 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x60>
 8017a44:	a902      	add	r1, sp, #8
 8017a46:	4620      	mov	r0, r4
 8017a48:	f7ff ff70 	bl	801792c <6fdc701aa2cd71dee737cd6193e5dab778619cb9>
 8017a4c:	4601      	mov	r1, r0
 8017a4e:	4620      	mov	r0, r4
 8017a50:	f003 fa30 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8017a54:	e7d8      	b.n	8017a08 <b7c086b3aad6c9d4ffcf59c72879e5ab5daa7b69+0x60>

08017a56 <ff79dcb9f0638f1ac99659a38f02861c009c540c>:
 8017a56:	b538      	push	{r3, r4, r5, lr}
 8017a58:	2363      	movs	r3, #99	; 0x63
 8017a5a:	7003      	strb	r3, [r0, #0]
 8017a5c:	4605      	mov	r5, r0
 8017a5e:	460c      	mov	r4, r1
 8017a60:	f001 fac8 	bl	8018ff4 <bc7077241f0f6c26eafbf9350b96f546688ad609>
 8017a64:	70a8      	strb	r0, [r5, #2]
 8017a66:	f001 fb63 	bl	8019130 <eada7656be7f8681f934187ead57a12001632399>
 8017a6a:	78ab      	ldrb	r3, [r5, #2]
 8017a6c:	f8a5 0003 	strh.w	r0, [r5, #3]
 8017a70:	fab3 f383 	clz	r3, r3
 8017a74:	095b      	lsrs	r3, r3, #5
 8017a76:	f024 0403 	bic.w	r4, r4, #3
 8017a7a:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8017a7e:	b2c0      	uxtb	r0, r0
 8017a80:	2800      	cmp	r0, #0
 8017a82:	bf08      	it	eq
 8017a84:	f044 0401 	orreq.w	r4, r4, #1
 8017a88:	706c      	strb	r4, [r5, #1]
 8017a8a:	bd38      	pop	{r3, r4, r5, pc}

08017a8c <1b70dd809fc4873e9266aad98968a88e80b5bf06>:
 8017a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a90:	f100 091d 	add.w	r9, r0, #29
 8017a94:	4604      	mov	r4, r0
 8017a96:	b086      	sub	sp, #24
 8017a98:	4648      	mov	r0, r9
 8017a9a:	460e      	mov	r6, r1
 8017a9c:	4617      	mov	r7, r2
 8017a9e:	4698      	mov	r8, r3
 8017aa0:	f7f5 fc98 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017aa8:	b1d8      	cbz	r0, 8017ae2 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x56>
 8017aaa:	2302      	movs	r3, #2
 8017aac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8017ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab4:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 8017ab8:	606b      	str	r3, [r5, #4]
 8017aba:	4648      	mov	r0, r9
 8017abc:	f7f5 fd4e 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8017ac0:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8017ac4:	bb5d      	cbnz	r5, 8017b1e <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x92>
 8017ac6:	2303      	movs	r3, #3
 8017ac8:	9304      	str	r3, [sp, #16]
 8017aca:	4b22      	ldr	r3, [pc, #136]	; (8017b54 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xc8>)
 8017acc:	9305      	str	r3, [sp, #20]
 8017ace:	ab06      	add	r3, sp, #24
 8017ad0:	e913 0003 	ldmdb	r3, {r0, r1}
 8017ad4:	4a20      	ldr	r2, [pc, #128]	; (8017b58 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xcc>)
 8017ad6:	f7f8 fdad 	bl	8010634 <LOGGER_PrintLine>
 8017ada:	4628      	mov	r0, r5
 8017adc:	b006      	add	sp, #24
 8017ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ae2:	f104 0a26 	add.w	sl, r4, #38	; 0x26
 8017ae6:	a904      	add	r1, sp, #16
 8017ae8:	4650      	mov	r0, sl
 8017aea:	f7f5 fbc1 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 8017aee:	b170      	cbz	r0, 8017b0e <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x82>
 8017af0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8017af4:	f7f5 fbdc 	bl	800d2b0 <5cf48605db24e77c7dc4310895ecb68238b276e7>
 8017af8:	b148      	cbz	r0, 8017b0e <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x82>
 8017afa:	2302      	movs	r3, #2
 8017afc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8017b00:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 8017b04:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
 8017b08:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
 8017b0c:	e7d4      	b.n	8017ab8 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x2c>
 8017b0e:	2302      	movs	r3, #2
 8017b10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8017b14:	4629      	mov	r1, r5
 8017b16:	2000      	movs	r0, #0
 8017b18:	f7f5 f9a0 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017b1c:	e7cd      	b.n	8017aba <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x2e>
 8017b1e:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 8017b22:	b143      	cbz	r3, 8017b36 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xaa>
 8017b24:	4648      	mov	r0, r9
 8017b26:	f7f5 fc55 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017b2a:	b920      	cbnz	r0, 8017b36 <1b70dd809fc4873e9266aad98968a88e80b5bf06+0xaa>
 8017b2c:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
 8017b30:	4620      	mov	r0, r4
 8017b32:	f003 f9bf 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8017b36:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8017b3a:	9303      	str	r3, [sp, #12]
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b44:	9300      	str	r3, [sp, #0]
 8017b46:	463a      	mov	r2, r7
 8017b48:	4643      	mov	r3, r8
 8017b4a:	4631      	mov	r1, r6
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	f7ff fc81 	bl	8017454 <13ccdc5f94324d1909629c7f21aeb736294bb0ba>
 8017b52:	e7c3      	b.n	8017adc <1b70dd809fc4873e9266aad98968a88e80b5bf06+0x50>
 8017b54:	08021841 	.word	0x08021841
 8017b58:	0802184c 	.word	0x0802184c

08017b5c <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>:
 8017b5c:	3901      	subs	r1, #1
 8017b5e:	f100 0308 	add.w	r3, r0, #8
 8017b62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017b66:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8017b6a:	4283      	cmp	r3, r0
 8017b6c:	d1f9      	bne.n	8017b62 <694aafd4e3a59381b64b1b0a4a13ec3fb951f131+0x6>
 8017b6e:	4770      	bx	lr

08017b70 <294ac47dbf0553b0bc1a0d13a73dce6f2c303667>:
 8017b70:	4770      	bx	lr

08017b72 <7642e1952f3dfa50bc246e452b3db5bce6f65fea>:
 8017b72:	4770      	bx	lr

08017b74 <329b6edcbe2eed1a451d1df4c9584a68c1390127>:
 8017b74:	4770      	bx	lr

08017b76 <00af7f89235fe04a2b2b59d942644988487fcbf4>:
 8017b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b7a:	b0d0      	sub	sp, #320	; 0x140
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b80:	2374      	movs	r3, #116	; 0x74
 8017b82:	4604      	mov	r4, r0
 8017b84:	7043      	strb	r3, [r0, #1]
 8017b86:	2002      	movs	r0, #2
 8017b88:	f7f4 fd4e 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017b8c:	f104 051d 	add.w	r5, r4, #29
 8017b90:	2303      	movs	r3, #3
 8017b92:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8017b96:	4680      	mov	r8, r0
 8017b98:	4629      	mov	r1, r5
 8017b9a:	a80c      	add	r0, sp, #48	; 0x30
 8017b9c:	f7f5 fd62 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8017ba0:	ab1b      	add	r3, sp, #108	; 0x6c
 8017ba2:	aa0c      	add	r2, sp, #48	; 0x30
 8017ba4:	ae10      	add	r6, sp, #64	; 0x40
 8017ba6:	469a      	mov	sl, r3
 8017ba8:	6810      	ldr	r0, [r2, #0]
 8017baa:	6851      	ldr	r1, [r2, #4]
 8017bac:	461f      	mov	r7, r3
 8017bae:	c703      	stmia	r7!, {r0, r1}
 8017bb0:	3208      	adds	r2, #8
 8017bb2:	42b2      	cmp	r2, r6
 8017bb4:	463b      	mov	r3, r7
 8017bb6:	d1f7      	bne.n	8017ba8 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x32>
 8017bb8:	7832      	ldrb	r2, [r6, #0]
 8017bba:	703a      	strb	r2, [r7, #0]
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	a80c      	add	r0, sp, #48	; 0x30
 8017bc0:	f7f5 fda0 	bl	800d704 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 8017bc4:	aa16      	add	r2, sp, #88	; 0x58
 8017bc6:	ab0c      	add	r3, sp, #48	; 0x30
 8017bc8:	4691      	mov	r9, r2
 8017bca:	6818      	ldr	r0, [r3, #0]
 8017bcc:	6859      	ldr	r1, [r3, #4]
 8017bce:	4617      	mov	r7, r2
 8017bd0:	c703      	stmia	r7!, {r0, r1}
 8017bd2:	3308      	adds	r3, #8
 8017bd4:	42b3      	cmp	r3, r6
 8017bd6:	463a      	mov	r2, r7
 8017bd8:	d1f7      	bne.n	8017bca <00af7f89235fe04a2b2b59d942644988487fcbf4+0x54>
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	703b      	strb	r3, [r7, #0]
 8017bde:	4628      	mov	r0, r5
 8017be0:	f7f5 fcbc 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d066      	beq.n	8017cb6 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x140>
 8017be8:	220e      	movs	r2, #14
 8017bea:	2100      	movs	r1, #0
 8017bec:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8017bf0:	f004 f9da 	bl	801bfa8 <memset>
 8017bf4:	f64f 6305 	movw	r3, #65029	; 0xfe05
 8017bf8:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
 8017bfc:	2380      	movs	r3, #128	; 0x80
 8017bfe:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
 8017c02:	eb0d 0603 	add.w	r6, sp, r3
 8017c06:	2700      	movs	r7, #0
 8017c08:	f8d6 3001 	ldr.w	r3, [r6, #1]
 8017c0c:	f8c4 302f 	str.w	r3, [r4, #47]	; 0x2f
 8017c10:	f8d6 3005 	ldr.w	r3, [r6, #5]
 8017c14:	f8c4 3033 	str.w	r3, [r4, #51]	; 0x33
 8017c18:	f8d8 3001 	ldr.w	r3, [r8, #1]
 8017c1c:	f8c4 3037 	str.w	r3, [r4, #55]	; 0x37
 8017c20:	f8d8 3005 	ldr.w	r3, [r8, #5]
 8017c24:	f8c4 303b 	str.w	r3, [r4, #59]	; 0x3b
 8017c28:	224c      	movs	r2, #76	; 0x4c
 8017c2a:	2100      	movs	r1, #0
 8017c2c:	a82a      	add	r0, sp, #168	; 0xa8
 8017c2e:	f004 f9bb 	bl	801bfa8 <memset>
 8017c32:	224c      	movs	r2, #76	; 0x4c
 8017c34:	2100      	movs	r1, #0
 8017c36:	a83d      	add	r0, sp, #244	; 0xf4
 8017c38:	f004 f9b6 	bl	801bfa8 <memset>
 8017c3c:	2341      	movs	r3, #65	; 0x41
 8017c3e:	2100      	movs	r1, #0
 8017c40:	a814      	add	r0, sp, #80	; 0x50
 8017c42:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8017c46:	f7ff ff06 	bl	8017a56 <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	4648      	mov	r0, r9
 8017c4e:	f7f5 fc97 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d051      	beq.n	8017cfa <00af7f89235fe04a2b2b59d942644988487fcbf4+0x184>
 8017c56:	4628      	mov	r0, r5
 8017c58:	f7f5 fc80 	bl	800d55c <4568fced62f20053a59091f5ee26eed63ee62b0d>
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	4290      	cmp	r0, r2
 8017c60:	bf14      	ite	ne
 8017c62:	2303      	movne	r3, #3
 8017c64:	2301      	moveq	r3, #1
 8017c66:	a925      	add	r1, sp, #148	; 0x94
 8017c68:	4655      	mov	r5, sl
 8017c6a:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8017c6e:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8017c72:	2300      	movs	r3, #0
 8017c74:	9303      	str	r3, [sp, #12]
 8017c76:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8017c7a:	2602      	movs	r6, #2
 8017c7c:	e9cd 160a 	strd	r1, r6, [sp, #40]	; 0x28
 8017c80:	e9cd 2706 	strd	r2, r7, [sp, #24]
 8017c84:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8017c88:	7c23      	ldrb	r3, [r4, #16]
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	7c63      	ldrb	r3, [r4, #17]
 8017c8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c90:	2103      	movs	r1, #3
 8017c92:	4620      	mov	r0, r4
 8017c94:	f7ff fd16 	bl	80176c4 <2058bb475204def8ad39a4c1db4c087e75b9f860>
 8017c98:	2301      	movs	r3, #1
 8017c9a:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8017c9e:	ab13      	add	r3, sp, #76	; 0x4c
 8017ca0:	9300      	str	r3, [sp, #0]
 8017ca2:	9601      	str	r6, [sp, #4]
 8017ca4:	ab14      	add	r3, sp, #80	; 0x50
 8017ca6:	aa3d      	add	r2, sp, #244	; 0xf4
 8017ca8:	a92a      	add	r1, sp, #168	; 0xa8
 8017caa:	4620      	mov	r0, r4
 8017cac:	f7ff feee 	bl	8017a8c <1b70dd809fc4873e9266aad98968a88e80b5bf06>
 8017cb0:	b050      	add	sp, #320	; 0x140
 8017cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cb6:	4628      	mov	r0, r5
 8017cb8:	f7f5 fbf4 	bl	800d4a4 <271b2dbe31e411eac579adb987eb6de74d66e6b2>
 8017cbc:	2800      	cmp	r0, #0
 8017cbe:	d193      	bne.n	8017be8 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x72>
 8017cc0:	4628      	mov	r0, r5
 8017cc2:	f7f5 fc1d 	bl	800d500 <2ab4f7466be7c52a3baa6ff62574d1f49ba464e7>
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	d18e      	bne.n	8017be8 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x72>
 8017cca:	2005      	movs	r0, #5
 8017ccc:	f7f4 fcac 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017cd0:	4601      	mov	r1, r0
 8017cd2:	4648      	mov	r0, r9
 8017cd4:	f7f5 fc54 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8017cd8:	b948      	cbnz	r0, 8017cee <00af7f89235fe04a2b2b59d942644988487fcbf4+0x178>
 8017cda:	4628      	mov	r0, r5
 8017cdc:	f7f5 fb7a 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017ce0:	4607      	mov	r7, r0
 8017ce2:	b920      	cbnz	r0, 8017cee <00af7f89235fe04a2b2b59d942644988487fcbf4+0x178>
 8017ce4:	2005      	movs	r0, #5
 8017ce6:	f7f4 fc9f 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017cea:	4606      	mov	r6, r0
 8017cec:	e78c      	b.n	8017c08 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x92>
 8017cee:	2005      	movs	r0, #5
 8017cf0:	f7f4 fc9a 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8017cf4:	2701      	movs	r7, #1
 8017cf6:	4606      	mov	r6, r0
 8017cf8:	e786      	b.n	8017c08 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x92>
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	f7f5 fb6a 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017d00:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8017d04:	b990      	cbnz	r0, 8017d2c <00af7f89235fe04a2b2b59d942644988487fcbf4+0x1b6>
 8017d06:	460b      	mov	r3, r1
 8017d08:	f10d 02ce 	add.w	r2, sp, #206	; 0xce
 8017d0c:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8017d10:	f853 6b04 	ldr.w	r6, [r3], #4
 8017d14:	f842 6b04 	str.w	r6, [r2], #4
 8017d18:	4283      	cmp	r3, r0
 8017d1a:	d1f9      	bne.n	8017d10 <00af7f89235fe04a2b2b59d942644988487fcbf4+0x19a>
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	7013      	strb	r3, [r2, #0]
 8017d20:	2341      	movs	r3, #65	; 0x41
 8017d22:	2200      	movs	r2, #0
 8017d24:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 8017d28:	4613      	mov	r3, r2
 8017d2a:	e79e      	b.n	8017c6a <00af7f89235fe04a2b2b59d942644988487fcbf4+0xf4>
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	2303      	movs	r3, #3
 8017d30:	e79b      	b.n	8017c6a <00af7f89235fe04a2b2b59d942644988487fcbf4+0xf4>
	...

08017d34 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2>:
 8017d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d36:	2274      	movs	r2, #116	; 0x74
 8017d38:	7042      	strb	r2, [r0, #1]
 8017d3a:	7802      	ldrb	r2, [r0, #0]
 8017d3c:	2a74      	cmp	r2, #116	; 0x74
 8017d3e:	b089      	sub	sp, #36	; 0x24
 8017d40:	4604      	mov	r4, r0
 8017d42:	d15a      	bne.n	8017dfa <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xc6>
 8017d44:	2900      	cmp	r1, #0
 8017d46:	d14b      	bne.n	8017de0 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xac>
 8017d48:	f7f8 fc4e 	bl	80105e8 <LOGGER_StartSection>
 8017d4c:	4e36      	ldr	r6, [pc, #216]	; (8017e28 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf4>)
 8017d4e:	af03      	add	r7, sp, #12
 8017d50:	466d      	mov	r5, sp
 8017d52:	b340      	cbz	r0, 8017da6 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x72>
 8017d54:	2303      	movs	r3, #3
 8017d56:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8017d5a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017d5e:	f7f8 fc4b 	bl	80105f8 <LOGGER_PrintHeader>
 8017d62:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8017d66:	4628      	mov	r0, r5
 8017d68:	f7ff fef8 	bl	8017b5c <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8017d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d70:	482e      	ldr	r0, [pc, #184]	; (8017e2c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf8>)
 8017d72:	f7f8 fc27 	bl	80105c4 <LOGGER_Print>
 8017d76:	f104 0137 	add.w	r1, r4, #55	; 0x37
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f7ff feee 	bl	8017b5c <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8017d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d84:	482a      	ldr	r0, [pc, #168]	; (8017e30 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xfc>)
 8017d86:	f7f8 fc1d 	bl	80105c4 <LOGGER_Print>
 8017d8a:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8017d8e:	4628      	mov	r0, r5
 8017d90:	f7ff fee4 	bl	8017b5c <694aafd4e3a59381b64b1b0a4a13ec3fb951f131>
 8017d94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d98:	4826      	ldr	r0, [pc, #152]	; (8017e34 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x100>)
 8017d9a:	f7f8 fc13 	bl	80105c4 <LOGGER_Print>
 8017d9e:	f7f8 fc09 	bl	80105b4 <LOGGER_PrintNL>
 8017da2:	f7f8 fc27 	bl	80105f4 <LOGGER_EndSection>
 8017da6:	2100      	movs	r1, #0
 8017da8:	2210      	movs	r2, #16
 8017daa:	f10d 000d 	add.w	r0, sp, #13
 8017dae:	f004 f8fb 	bl	801bfa8 <memset>
 8017db2:	2302      	movs	r3, #2
 8017db4:	f10d 010d 	add.w	r1, sp, #13
 8017db8:	2000      	movs	r0, #0
 8017dba:	f88d 300c 	strb.w	r3, [sp, #12]
 8017dbe:	f7f5 f84d 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8017dc2:	b1a8      	cbz	r0, 8017df0 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xbc>
 8017dc4:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8017dc8:	4638      	mov	r0, r7
 8017dca:	f7f5 fbd9 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8017dce:	2303      	movs	r3, #3
 8017dd0:	e9cd 3600 	strd	r3, r6, [sp]
 8017dd4:	b150      	cbz	r0, 8017dec <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xb8>
 8017dd6:	4a18      	ldr	r2, [pc, #96]	; (8017e38 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x104>)
 8017dd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ddc:	f7f8 fc2a 	bl	8010634 <LOGGER_PrintLine>
 8017de0:	4620      	mov	r0, r4
 8017de2:	b009      	add	sp, #36	; 0x24
 8017de4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017de8:	f7f6 b804 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017dec:	4a13      	ldr	r2, [pc, #76]	; (8017e3c <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x108>)
 8017dee:	e7f3      	b.n	8017dd8 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa4>
 8017df0:	2303      	movs	r3, #3
 8017df2:	e9cd 3600 	strd	r3, r6, [sp]
 8017df6:	4a12      	ldr	r2, [pc, #72]	; (8017e40 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x10c>)
 8017df8:	e7ee      	b.n	8017dd8 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa4>
 8017dfa:	7c03      	ldrb	r3, [r0, #16]
 8017dfc:	2b11      	cmp	r3, #17
 8017dfe:	d009      	beq.n	8017e14 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xe0>
 8017e00:	2b3a      	cmp	r3, #58	; 0x3a
 8017e02:	d00c      	beq.n	8017e1e <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xea>
 8017e04:	2303      	movs	r3, #3
 8017e06:	9303      	str	r3, [sp, #12]
 8017e08:	4b07      	ldr	r3, [pc, #28]	; (8017e28 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xf4>)
 8017e0a:	4a0e      	ldr	r2, [pc, #56]	; (8017e44 <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0x110>)
 8017e0c:	9304      	str	r3, [sp, #16]
 8017e0e:	4619      	mov	r1, r3
 8017e10:	2003      	movs	r0, #3
 8017e12:	e7e3      	b.n	8017ddc <25552cd4f6e470d41f2f57e7e131e0cd5542d6e2+0xa8>
 8017e14:	b009      	add	sp, #36	; 0x24
 8017e16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e1a:	f002 bba1 	b.w	801a560 <32c59f113e62a8491f5b52f96af26c008a4f227e>
 8017e1e:	b009      	add	sp, #36	; 0x24
 8017e20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e24:	f000 bc52 	b.w	80186cc <a4e54615be274afd6b4d40b38f5ecc85b5402247>
 8017e28:	08021841 	.word	0x08021841
 8017e2c:	08021858 	.word	0x08021858
 8017e30:	08021869 	.word	0x08021869
 8017e34:	08021874 	.word	0x08021874
 8017e38:	08021887 	.word	0x08021887
 8017e3c:	080218a3 	.word	0x080218a3
 8017e40:	080218be 	.word	0x080218be
 8017e44:	080218e3 	.word	0x080218e3

08017e48 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb>:
 8017e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4c:	461e      	mov	r6, r3
 8017e4e:	2374      	movs	r3, #116	; 0x74
 8017e50:	7043      	strb	r3, [r0, #1]
 8017e52:	7a53      	ldrb	r3, [r2, #9]
 8017e54:	7403      	strb	r3, [r0, #16]
 8017e56:	7a13      	ldrb	r3, [r2, #8]
 8017e58:	7443      	strb	r3, [r0, #17]
 8017e5a:	4691      	mov	r9, r2
 8017e5c:	f102 0a37 	add.w	sl, r2, #55	; 0x37
 8017e60:	f100 041d 	add.w	r4, r0, #29
 8017e64:	4688      	mov	r8, r1
 8017e66:	b0c7      	sub	sp, #284	; 0x11c
 8017e68:	4607      	mov	r7, r0
 8017e6a:	4653      	mov	r3, sl
 8017e6c:	4622      	mov	r2, r4
 8017e6e:	f109 0147 	add.w	r1, r9, #71	; 0x47
 8017e72:	f853 0b04 	ldr.w	r0, [r3], #4
 8017e76:	f842 0b04 	str.w	r0, [r2], #4
 8017e7a:	428b      	cmp	r3, r1
 8017e7c:	d1f9      	bne.n	8017e72 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2a>
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	7013      	strb	r3, [r2, #0]
 8017e82:	f109 0526 	add.w	r5, r9, #38	; 0x26
 8017e86:	462b      	mov	r3, r5
 8017e88:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8017e8c:	f109 0136 	add.w	r1, r9, #54	; 0x36
 8017e90:	f853 0b04 	ldr.w	r0, [r3], #4
 8017e94:	f842 0b04 	str.w	r0, [r2], #4
 8017e98:	428b      	cmp	r3, r1
 8017e9a:	d1f9      	bne.n	8017e90 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x48>
 8017e9c:	781b      	ldrb	r3, [r3, #0]
 8017e9e:	7013      	strb	r3, [r2, #0]
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8017ea8:	f7f5 fa94 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8017eac:	9005      	str	r0, [sp, #20]
 8017eae:	2800      	cmp	r0, #0
 8017eb0:	d165      	bne.n	8017f7e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x136>
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f7f4 fc20 	bl	800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8017eb8:	b118      	cbz	r0, 8017ec2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a>
 8017eba:	f898 3009 	ldrb.w	r3, [r8, #9]
 8017ebe:	2b2b      	cmp	r3, #43	; 0x2b
 8017ec0:	d177      	bne.n	8017fb2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	9306      	str	r3, [sp, #24]
 8017ec6:	f7f5 ffd7 	bl	800de78 <4b9793db96fa05ad63a954fae76e17c90da5d34d>
 8017eca:	4604      	mov	r4, r0
 8017ecc:	2800      	cmp	r0, #0
 8017ece:	f000 83d5 	beq.w	801867c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x834>
 8017ed2:	4639      	mov	r1, r7
 8017ed4:	f003 f844 	bl	801af60 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>
 8017ed8:	2374      	movs	r3, #116	; 0x74
 8017eda:	7023      	strb	r3, [r4, #0]
 8017edc:	f898 3009 	ldrb.w	r3, [r8, #9]
 8017ee0:	2b2b      	cmp	r3, #43	; 0x2b
 8017ee2:	f000 80a3 	beq.w	801802c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1e4>
 8017ee6:	9b05      	ldr	r3, [sp, #20]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	f040 808f 	bne.w	801800c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1c4>
 8017eee:	7873      	ldrb	r3, [r6, #1]
 8017ef0:	06da      	lsls	r2, r3, #27
 8017ef2:	d508      	bpl.n	8017f06 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0xbe>
 8017ef4:	2304      	movs	r3, #4
 8017ef6:	9326      	str	r3, [sp, #152]	; 0x98
 8017ef8:	4bb3      	ldr	r3, [pc, #716]	; (80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8017efa:	4ab4      	ldr	r2, [pc, #720]	; (80181cc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x384>)
 8017efc:	9327      	str	r3, [sp, #156]	; 0x9c
 8017efe:	4619      	mov	r1, r3
 8017f00:	2004      	movs	r0, #4
 8017f02:	f7f8 fb97 	bl	8010634 <LOGGER_PrintLine>
 8017f06:	f8b6 5003 	ldrh.w	r5, [r6, #3]
 8017f0a:	f001 f911 	bl	8019130 <eada7656be7f8681f934187ead57a12001632399>
 8017f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f12:	4298      	cmp	r0, r3
 8017f14:	d01d      	beq.n	8017f52 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x10a>
 8017f16:	4285      	cmp	r5, r0
 8017f18:	d21b      	bcs.n	8017f52 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x10a>
 8017f1a:	7873      	ldrb	r3, [r6, #1]
 8017f1c:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>
 8017f20:	f043 0308 	orr.w	r3, r3, #8
 8017f24:	7073      	strb	r3, [r6, #1]
 8017f26:	a921      	add	r1, sp, #132	; 0x84
 8017f28:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8017f2c:	f7f5 f9a0 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 8017f30:	f10d 0a98 	add.w	sl, sp, #152	; 0x98
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d064      	beq.n	8018002 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1ba>
 8017f38:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
 8017f3c:	4629      	mov	r1, r5
 8017f3e:	f7f4 fcc9 	bl	800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8017f42:	2304      	movs	r3, #4
 8017f44:	e9cd 3b26 	strd	r3, fp, [sp, #152]	; 0x98
 8017f48:	4aa1      	ldr	r2, [pc, #644]	; (80181d0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x388>)
 8017f4a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8017f4e:	f7f8 fb71 	bl	8010634 <LOGGER_PrintLine>
 8017f52:	7871      	ldrb	r1, [r6, #1]
 8017f54:	4630      	mov	r0, r6
 8017f56:	f7ff fd7e 	bl	8017a56 <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	9301      	str	r3, [sp, #4]
 8017f5e:	f108 0304 	add.w	r3, r8, #4
 8017f62:	9300      	str	r3, [sp, #0]
 8017f64:	464a      	mov	r2, r9
 8017f66:	4633      	mov	r3, r6
 8017f68:	4641      	mov	r1, r8
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	f7ff fd8e 	bl	8017a8c <1b70dd809fc4873e9266aad98968a88e80b5bf06>
 8017f70:	b910      	cbnz	r0, 8017f78 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 8017f72:	4620      	mov	r0, r4
 8017f74:	f7f5 ff3e 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017f78:	9b06      	ldr	r3, [sp, #24]
 8017f7a:	b18b      	cbz	r3, 8017fa0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8017f7c:	e019      	b.n	8017fb2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8017f7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017f80:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8017f84:	4620      	mov	r0, r4
 8017f86:	f7f4 fbb7 	bl	800c6f8 <ef42a56931e541b0c8c1f2660a00aa81f857110a>
 8017f8a:	f898 3009 	ldrb.w	r3, [r8, #9]
 8017f8e:	2b2b      	cmp	r3, #43	; 0x2b
 8017f90:	7c3b      	ldrb	r3, [r7, #16]
 8017f92:	d109      	bne.n	8017fa8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x160>
 8017f94:	2b11      	cmp	r3, #17
 8017f96:	d103      	bne.n	8017fa0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8017f98:	f7f5 f9be 	bl	800d318 <963d67651eaddeb307ab0b02134cee28199d533d>
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	d190      	bne.n	8017ec2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a>
 8017fa0:	4638      	mov	r0, r7
 8017fa2:	f7f5 ff27 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8017fa6:	e376      	b.n	8018696 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x84e>
 8017fa8:	2b11      	cmp	r3, #17
 8017faa:	d102      	bne.n	8017fb2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x16a>
 8017fac:	f7f5 f9b4 	bl	800d318 <963d67651eaddeb307ab0b02134cee28199d533d>
 8017fb0:	bb28      	cbnz	r0, 8017ffe <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1b6>
 8017fb2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8017fb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017fbe:	b143      	cbz	r3, 8017fd2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x18a>
 8017fc0:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
 8017fc4:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
 8017fc8:	4419      	add	r1, r3
 8017fca:	b2c9      	uxtb	r1, r1
 8017fcc:	4638      	mov	r0, r7
 8017fce:	f002 ff71 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8017fd2:	f899 1048 	ldrb.w	r1, [r9, #72]	; 0x48
 8017fd6:	4638      	mov	r0, r7
 8017fd8:	f002 ff6c 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8017fdc:	7c3b      	ldrb	r3, [r7, #16]
 8017fde:	2b11      	cmp	r3, #17
 8017fe0:	f000 8354 	beq.w	801868c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x844>
 8017fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8017fe6:	f000 835f 	beq.w	80186a8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x860>
 8017fea:	2204      	movs	r2, #4
 8017fec:	9226      	str	r2, [sp, #152]	; 0x98
 8017fee:	4a76      	ldr	r2, [pc, #472]	; (80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8017ff0:	9227      	str	r2, [sp, #156]	; 0x9c
 8017ff2:	4975      	ldr	r1, [pc, #468]	; (80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8017ff4:	4a77      	ldr	r2, [pc, #476]	; (80181d4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x38c>)
 8017ff6:	2004      	movs	r0, #4
 8017ff8:	f7f8 fb1c 	bl	8010634 <LOGGER_PrintLine>
 8017ffc:	e7d0      	b.n	8017fa0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 8017ffe:	9b05      	ldr	r3, [sp, #20]
 8018000:	e760      	b.n	8017ec4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7c>
 8018002:	2304      	movs	r3, #4
 8018004:	e9cd 3b26 	strd	r3, fp, [sp, #152]	; 0x98
 8018008:	4a73      	ldr	r2, [pc, #460]	; (80181d8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x390>)
 801800a:	e79e      	b.n	8017f4a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x102>
 801800c:	2305      	movs	r3, #5
 801800e:	9326      	str	r3, [sp, #152]	; 0x98
 8018010:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8018014:	4b6c      	ldr	r3, [pc, #432]	; (80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 8018016:	9327      	str	r3, [sp, #156]	; 0x9c
 8018018:	f7f5 fa0a 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801801c:	4a6f      	ldr	r2, [pc, #444]	; (80181dc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x394>)
 801801e:	e9cd 0100 	strd	r0, r1, [sp]
 8018022:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8018026:	f7f8 fb05 	bl	8010634 <LOGGER_PrintLine>
 801802a:	e796      	b.n	8017f5a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x112>
 801802c:	227f      	movs	r2, #127	; 0x7f
 801802e:	2100      	movs	r1, #0
 8018030:	a826      	add	r0, sp, #152	; 0x98
 8018032:	f003 ffb9 	bl	801bfa8 <memset>
 8018036:	f104 031d 	add.w	r3, r4, #29
 801803a:	9307      	str	r3, [sp, #28]
 801803c:	f10a 0210 	add.w	r2, sl, #16
 8018040:	f85a 1b04 	ldr.w	r1, [sl], #4
 8018044:	f843 1b04 	str.w	r1, [r3], #4
 8018048:	4592      	cmp	sl, r2
 801804a:	d1f9      	bne.n	8018040 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x1f8>
 801804c:	f89a 2000 	ldrb.w	r2, [sl]
 8018050:	701a      	strb	r2, [r3, #0]
 8018052:	f105 0110 	add.w	r1, r5, #16
 8018056:	462b      	mov	r3, r5
 8018058:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801805c:	f853 0b04 	ldr.w	r0, [r3], #4
 8018060:	f842 0b04 	str.w	r0, [r2], #4
 8018064:	428b      	cmp	r3, r1
 8018066:	d1f9      	bne.n	801805c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x214>
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	7013      	strb	r3, [r2, #0]
 801806c:	2303      	movs	r3, #3
 801806e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8018072:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 8018076:	b1cb      	cbz	r3, 80180ac <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x264>
 8018078:	78b3      	ldrb	r3, [r6, #2]
 801807a:	b91b      	cbnz	r3, 8018084 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x23c>
 801807c:	f10d 0049 	add.w	r0, sp, #73	; 0x49
 8018080:	f000 ffc0 	bl	8019004 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>
 8018084:	6863      	ldr	r3, [r4, #4]
 8018086:	f893 a000 	ldrb.w	sl, [r3]
 801808a:	785d      	ldrb	r5, [r3, #1]
 801808c:	2300      	movs	r3, #0
 801808e:	9304      	str	r3, [sp, #16]
 8018090:	f00a 03e0 	and.w	r3, sl, #224	; 0xe0
 8018094:	2ba0      	cmp	r3, #160	; 0xa0
 8018096:	d017      	beq.n	80180c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x280>
 8018098:	2d04      	cmp	r5, #4
 801809a:	d82c      	bhi.n	80180f6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2ae>
 801809c:	1e6a      	subs	r2, r5, #1
 801809e:	6863      	ldr	r3, [r4, #4]
 80180a0:	2a03      	cmp	r2, #3
 80180a2:	d873      	bhi.n	801818c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x344>
 80180a4:	e8df f002 	tbb	[pc, r2]
 80180a8:	9e857e78 	.word	0x9e857e78
 80180ac:	ab12      	add	r3, sp, #72	; 0x48
 80180ae:	f109 0c36 	add.w	ip, r9, #54	; 0x36
 80180b2:	6828      	ldr	r0, [r5, #0]
 80180b4:	6869      	ldr	r1, [r5, #4]
 80180b6:	461a      	mov	r2, r3
 80180b8:	c203      	stmia	r2!, {r0, r1}
 80180ba:	3508      	adds	r5, #8
 80180bc:	4565      	cmp	r5, ip
 80180be:	4613      	mov	r3, r2
 80180c0:	d1f7      	bne.n	80180b2 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x26a>
 80180c2:	782a      	ldrb	r2, [r5, #0]
 80180c4:	701a      	strb	r2, [r3, #0]
 80180c6:	e7dd      	b.n	8018084 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x23c>
 80180c8:	9804      	ldr	r0, [sp, #16]
 80180ca:	6861      	ldr	r1, [r4, #4]
 80180cc:	f00a 051f 	and.w	r5, sl, #31
 80180d0:	ab26      	add	r3, sp, #152	; 0x98
 80180d2:	3502      	adds	r5, #2
 80180d4:	462a      	mov	r2, r5
 80180d6:	1818      	adds	r0, r3, r0
 80180d8:	f004 f805 	bl	801c0e6 <memcpy>
 80180dc:	4629      	mov	r1, r5
 80180de:	4620      	mov	r0, r4
 80180e0:	f002 fee8 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 80180e4:	9b04      	ldr	r3, [sp, #16]
 80180e6:	441d      	add	r5, r3
 80180e8:	b2eb      	uxtb	r3, r5
 80180ea:	9304      	str	r3, [sp, #16]
 80180ec:	6863      	ldr	r3, [r4, #4]
 80180ee:	f893 a000 	ldrb.w	sl, [r3]
 80180f2:	785d      	ldrb	r5, [r3, #1]
 80180f4:	e7cc      	b.n	8018090 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x248>
 80180f6:	2dfe      	cmp	r5, #254	; 0xfe
 80180f8:	f000 808b 	beq.w	8018212 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3ca>
 80180fc:	2dff      	cmp	r5, #255	; 0xff
 80180fe:	f000 8093 	beq.w	8018228 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3e0>
 8018102:	2dfd      	cmp	r5, #253	; 0xfd
 8018104:	d07b      	beq.n	80181fe <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3b6>
 8018106:	f04f 0b02 	mov.w	fp, #2
 801810a:	a912      	add	r1, sp, #72	; 0x48
 801810c:	a808      	add	r0, sp, #32
 801810e:	f7f5 faa9 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8018112:	ab08      	add	r3, sp, #32
 8018114:	aa21      	add	r2, sp, #132	; 0x84
 8018116:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801811a:	6818      	ldr	r0, [r3, #0]
 801811c:	6859      	ldr	r1, [r3, #4]
 801811e:	4694      	mov	ip, r2
 8018120:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018124:	3308      	adds	r3, #8
 8018126:	4573      	cmp	r3, lr
 8018128:	4662      	mov	r2, ip
 801812a:	d1f6      	bne.n	801811a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2d2>
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	f88c 3000 	strb.w	r3, [ip]
 8018132:	a912      	add	r1, sp, #72	; 0x48
 8018134:	a808      	add	r0, sp, #32
 8018136:	f7f5 fae5 	bl	800d704 <2af6233fa7118fd11caf81b4f86d81e84f105465>
 801813a:	ab08      	add	r3, sp, #32
 801813c:	aa1c      	add	r2, sp, #112	; 0x70
 801813e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8018142:	6818      	ldr	r0, [r3, #0]
 8018144:	6859      	ldr	r1, [r3, #4]
 8018146:	4694      	mov	ip, r2
 8018148:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801814c:	3308      	adds	r3, #8
 801814e:	4573      	cmp	r3, lr
 8018150:	4662      	mov	r2, ip
 8018152:	d1f6      	bne.n	8018142 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2fa>
 8018154:	781b      	ldrb	r3, [r3, #0]
 8018156:	f88c 3000 	strb.w	r3, [ip]
 801815a:	2005      	movs	r0, #5
 801815c:	f7f4 fa64 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018160:	4601      	mov	r1, r0
 8018162:	a81c      	add	r0, sp, #112	; 0x70
 8018164:	f7f5 fa0c 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8018168:	2800      	cmp	r0, #0
 801816a:	d16b      	bne.n	8018244 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3fc>
 801816c:	9807      	ldr	r0, [sp, #28]
 801816e:	f7f5 f931 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 8018172:	2800      	cmp	r0, #0
 8018174:	f040 809b 	bne.w	80182ae <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x466>
 8018178:	2303      	movs	r3, #3
 801817a:	9317      	str	r3, [sp, #92]	; 0x5c
 801817c:	4b12      	ldr	r3, [pc, #72]	; (80181c8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x380>)
 801817e:	4a18      	ldr	r2, [pc, #96]	; (80181e0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x398>)
 8018180:	9318      	str	r3, [sp, #96]	; 0x60
 8018182:	4619      	mov	r1, r3
 8018184:	2003      	movs	r0, #3
 8018186:	f7f8 fa55 	bl	8010634 <LOGGER_PrintLine>
 801818a:	e0ae      	b.n	80182ea <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x4a2>
 801818c:	789b      	ldrb	r3, [r3, #2]
 801818e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8018192:	f04f 0b03 	mov.w	fp, #3
 8018196:	e7b8      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8018198:	885b      	ldrh	r3, [r3, #2]
 801819a:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 801819e:	f04f 0b04 	mov.w	fp, #4
 80181a2:	e7b2      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80181a4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80181a8:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 80181ac:	f04f 0b06 	mov.w	fp, #6
 80181b0:	e7ab      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80181b2:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80181b6:	f8cd 2051 	str.w	r2, [sp, #81]	; 0x51
 80181ba:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80181be:	f8cd 2055 	str.w	r2, [sp, #85]	; 0x55
 80181c2:	f04f 0b0a 	mov.w	fp, #10
 80181c6:	e7a0      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80181c8:	08021841 	.word	0x08021841
 80181cc:	080218fc 	.word	0x080218fc
 80181d0:	0802190c 	.word	0x0802190c
 80181d4:	080219b1 	.word	0x080219b1
 80181d8:	08021929 	.word	0x08021929
 80181dc:	08021937 	.word	0x08021937
 80181e0:	0802174c 	.word	0x0802174c
 80181e4:	1c9a      	adds	r2, r3, #2
 80181e6:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 80181ea:	3312      	adds	r3, #18
 80181ec:	f852 0b04 	ldr.w	r0, [r2], #4
 80181f0:	f841 0b04 	str.w	r0, [r1], #4
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d1f9      	bne.n	80181ec <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x3a4>
 80181f8:	f04f 0b12 	mov.w	fp, #18
 80181fc:	e785      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 80181fe:	6863      	ldr	r3, [r4, #4]
 8018200:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8018204:	9015      	str	r0, [sp, #84]	; 0x54
 8018206:	799b      	ldrb	r3, [r3, #6]
 8018208:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801820c:	f04f 0b07 	mov.w	fp, #7
 8018210:	e77b      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8018212:	6863      	ldr	r3, [r4, #4]
 8018214:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8018218:	f8cd 2053 	str.w	r2, [sp, #83]	; 0x53
 801821c:	88db      	ldrh	r3, [r3, #6]
 801821e:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 8018222:	f04f 0b08 	mov.w	fp, #8
 8018226:	e770      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8018228:	6863      	ldr	r3, [r4, #4]
 801822a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 801822e:	f8cd 2052 	str.w	r2, [sp, #82]	; 0x52
 8018232:	88da      	ldrh	r2, [r3, #6]
 8018234:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
 8018238:	7a1b      	ldrb	r3, [r3, #8]
 801823a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801823e:	f04f 0b09 	mov.w	fp, #9
 8018242:	e762      	b.n	801810a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x2c2>
 8018244:	2002      	movs	r0, #2
 8018246:	f7f4 f9ef 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801824a:	4601      	mov	r1, r0
 801824c:	a821      	add	r0, sp, #132	; 0x84
 801824e:	f7f5 f997 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8018252:	2800      	cmp	r0, #0
 8018254:	d08a      	beq.n	801816c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x324>
 8018256:	f01a 0a1f 	ands.w	sl, sl, #31
 801825a:	f000 80e7 	beq.w	801842c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5e4>
 801825e:	4659      	mov	r1, fp
 8018260:	4620      	mov	r0, r4
 8018262:	f002 fe27 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018266:	2102      	movs	r1, #2
 8018268:	4620      	mov	r0, r4
 801826a:	f002 fde3 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801826e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018272:	6863      	ldr	r3, [r4, #4]
 8018274:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
 8018278:	f883 a000 	strb.w	sl, [r3]
 801827c:	6863      	ldr	r3, [r4, #4]
 801827e:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8018282:	705d      	strb	r5, [r3, #1]
 8018284:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018288:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 801828c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018290:	2d04      	cmp	r5, #4
 8018292:	f8de 3000 	ldr.w	r3, [lr]
 8018296:	f88c 3000 	strb.w	r3, [ip]
 801829a:	d80d      	bhi.n	80182b8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x470>
 801829c:	3d01      	subs	r5, #1
 801829e:	6863      	ldr	r3, [r4, #4]
 80182a0:	2d03      	cmp	r5, #3
 80182a2:	f200 808b 	bhi.w	80183bc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x574>
 80182a6:	e8df f005 	tbb	[pc, r5]
 80182aa:	918d      	.short	0x918d
 80182ac:	9f96      	.short	0x9f96
 80182ae:	7c23      	ldrb	r3, [r4, #16]
 80182b0:	2b11      	cmp	r3, #17
 80182b2:	f47f af61 	bne.w	8018178 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x330>
 80182b6:	e7ce      	b.n	8018256 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x40e>
 80182b8:	2dfe      	cmp	r5, #254	; 0xfe
 80182ba:	f000 80a6 	beq.w	801840a <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5c2>
 80182be:	2dff      	cmp	r5, #255	; 0xff
 80182c0:	f000 80aa 	beq.w	8018418 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5d0>
 80182c4:	2dfd      	cmp	r5, #253	; 0xfd
 80182c6:	f000 809a 	beq.w	80183fe <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5b6>
 80182ca:	a917      	add	r1, sp, #92	; 0x5c
 80182cc:	a808      	add	r0, sp, #32
 80182ce:	f7f5 f9c9 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 80182d2:	ab08      	add	r3, sp, #32
 80182d4:	f104 0241 	add.w	r2, r4, #65	; 0x41
 80182d8:	a90c      	add	r1, sp, #48	; 0x30
 80182da:	f853 0b04 	ldr.w	r0, [r3], #4
 80182de:	f842 0b04 	str.w	r0, [r2], #4
 80182e2:	428b      	cmp	r3, r1
 80182e4:	d1f9      	bne.n	80182da <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x492>
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	7013      	strb	r3, [r2, #0]
 80182ea:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 80182ee:	ad26      	add	r5, sp, #152	; 0x98
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d046      	beq.n	8018382 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x53a>
 80182f4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d042      	beq.n	8018382 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x53a>
 80182fc:	6861      	ldr	r1, [r4, #4]
 80182fe:	eba3 0a01 	sub.w	sl, r3, r1
 8018302:	9b04      	ldr	r3, [sp, #16]
 8018304:	fa5f fb8a 	uxtb.w	fp, sl
 8018308:	465a      	mov	r2, fp
 801830a:	18e8      	adds	r0, r5, r3
 801830c:	f003 feeb 	bl	801c0e6 <memcpy>
 8018310:	4659      	mov	r1, fp
 8018312:	4620      	mov	r0, r4
 8018314:	f002 fdce 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018318:	9b04      	ldr	r3, [sp, #16]
 801831a:	449a      	add	sl, r3
 801831c:	fa5f f38a 	uxtb.w	r3, sl
 8018320:	4631      	mov	r1, r6
 8018322:	4620      	mov	r0, r4
 8018324:	9304      	str	r3, [sp, #16]
 8018326:	f7ff fb01 	bl	801792c <6fdc701aa2cd71dee737cd6193e5dab778619cb9>
 801832a:	4601      	mov	r1, r0
 801832c:	4620      	mov	r0, r4
 801832e:	f002 fdc1 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018332:	7873      	ldrb	r3, [r6, #1]
 8018334:	f8b6 a003 	ldrh.w	sl, [r6, #3]
 8018338:	06db      	lsls	r3, r3, #27
 801833a:	d408      	bmi.n	801834e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x506>
 801833c:	2303      	movs	r3, #3
 801833e:	9310      	str	r3, [sp, #64]	; 0x40
 8018340:	4bb9      	ldr	r3, [pc, #740]	; (8018628 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 8018342:	4aba      	ldr	r2, [pc, #744]	; (801862c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e4>)
 8018344:	9311      	str	r3, [sp, #68]	; 0x44
 8018346:	4619      	mov	r1, r3
 8018348:	2003      	movs	r0, #3
 801834a:	f7f8 f973 	bl	8010634 <LOGGER_PrintLine>
 801834e:	f000 feef 	bl	8019130 <eada7656be7f8681f934187ead57a12001632399>
 8018352:	4582      	cmp	sl, r0
 8018354:	d90c      	bls.n	8018370 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x528>
 8018356:	7873      	ldrb	r3, [r6, #1]
 8018358:	4ab5      	ldr	r2, [pc, #724]	; (8018630 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e8>)
 801835a:	f043 0308 	orr.w	r3, r3, #8
 801835e:	7073      	strb	r3, [r6, #1]
 8018360:	2303      	movs	r3, #3
 8018362:	9310      	str	r3, [sp, #64]	; 0x40
 8018364:	4bb0      	ldr	r3, [pc, #704]	; (8018628 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 8018366:	9311      	str	r3, [sp, #68]	; 0x44
 8018368:	4619      	mov	r1, r3
 801836a:	2003      	movs	r0, #3
 801836c:	f7f8 f962 	bl	8010634 <LOGGER_PrintLine>
 8018370:	7871      	ldrb	r1, [r6, #1]
 8018372:	4630      	mov	r0, r6
 8018374:	f7ff fb6f 	bl	8017a56 <ff79dcb9f0638f1ac99659a38f02861c009c540c>
 8018378:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
 801837c:	4620      	mov	r0, r4
 801837e:	f002 fd99 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018382:	2301      	movs	r3, #1
 8018384:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8018388:	9303      	str	r3, [sp, #12]
 801838a:	9b04      	ldr	r3, [sp, #16]
 801838c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8018390:	f108 0304 	add.w	r3, r8, #4
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	464a      	mov	r2, r9
 8018398:	4633      	mov	r3, r6
 801839a:	4641      	mov	r1, r8
 801839c:	4620      	mov	r0, r4
 801839e:	f7ff f859 	bl	8017454 <13ccdc5f94324d1909629c7f21aeb736294bb0ba>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	f47f ade8 	bne.w	8017f78 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 80183a8:	2304      	movs	r3, #4
 80183aa:	9326      	str	r3, [sp, #152]	; 0x98
 80183ac:	4b9e      	ldr	r3, [pc, #632]	; (8018628 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7e0>)
 80183ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80183b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80183b4:	4a9f      	ldr	r2, [pc, #636]	; (8018634 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7ec>)
 80183b6:	f7f8 f93d 	bl	8010634 <LOGGER_PrintLine>
 80183ba:	e5dd      	b.n	8017f78 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x130>
 80183bc:	789b      	ldrb	r3, [r3, #2]
 80183be:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80183c2:	e782      	b.n	80182ca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80183c4:	885b      	ldrh	r3, [r3, #2]
 80183c6:	f8ad 306b 	strh.w	r3, [sp, #107]	; 0x6b
 80183ca:	e77e      	b.n	80182ca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80183cc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80183d0:	f8cd 3069 	str.w	r3, [sp, #105]	; 0x69
 80183d4:	e779      	b.n	80182ca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80183d6:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80183da:	f8cd 2065 	str.w	r2, [sp, #101]	; 0x65
 80183de:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80183e2:	f8cd 2069 	str.w	r2, [sp, #105]	; 0x69
 80183e6:	e770      	b.n	80182ca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80183e8:	1c9a      	adds	r2, r3, #2
 80183ea:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
 80183ee:	3312      	adds	r3, #18
 80183f0:	f852 0b04 	ldr.w	r0, [r2], #4
 80183f4:	f841 0b04 	str.w	r0, [r1], #4
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d1f9      	bne.n	80183f0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x5a8>
 80183fc:	e765      	b.n	80182ca <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x482>
 80183fe:	6863      	ldr	r3, [r4, #4]
 8018400:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8018404:	901a      	str	r0, [sp, #104]	; 0x68
 8018406:	799b      	ldrb	r3, [r3, #6]
 8018408:	e7d9      	b.n	80183be <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x576>
 801840a:	6863      	ldr	r3, [r4, #4]
 801840c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8018410:	f8cd 2067 	str.w	r2, [sp, #103]	; 0x67
 8018414:	88db      	ldrh	r3, [r3, #6]
 8018416:	e7d6      	b.n	80183c6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x57e>
 8018418:	6863      	ldr	r3, [r4, #4]
 801841a:	f8d3 2002 	ldr.w	r2, [r3, #2]
 801841e:	f8cd 2066 	str.w	r2, [sp, #102]	; 0x66
 8018422:	88da      	ldrh	r2, [r3, #6]
 8018424:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8018428:	7a1b      	ldrb	r3, [r3, #8]
 801842a:	e7c8      	b.n	80183be <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x576>
 801842c:	6863      	ldr	r3, [r4, #4]
 801842e:	eb03 010b 	add.w	r1, r3, fp
 8018432:	f813 200b 	ldrb.w	r2, [r3, fp]
 8018436:	f891 a001 	ldrb.w	sl, [r1, #1]
 801843a:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
 801843e:	2980      	cmp	r1, #128	; 0x80
 8018440:	f040 8109 	bne.w	8018656 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x80e>
 8018444:	f1ba 0f04 	cmp.w	sl, #4
 8018448:	f200 8105 	bhi.w	8018656 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x80e>
 801844c:	45aa      	cmp	sl, r5
 801844e:	d345      	bcc.n	80184dc <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x694>
 8018450:	4659      	mov	r1, fp
 8018452:	4620      	mov	r0, r4
 8018454:	f002 fd2e 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018458:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 801845c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018460:	ad17      	add	r5, sp, #92	; 0x5c
 8018462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018464:	f8dc 3000 	ldr.w	r3, [ip]
 8018468:	702b      	strb	r3, [r5, #0]
 801846a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801846e:	6863      	ldr	r3, [r4, #4]
 8018470:	f1ba 0f03 	cmp.w	sl, #3
 8018474:	d803      	bhi.n	801847e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x636>
 8018476:	e8df f00a 	tbb	[pc, sl]
 801847a:	1814      	.short	0x1814
 801847c:	261d      	.short	0x261d
 801847e:	789b      	ldrb	r3, [r3, #2]
 8018480:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8018484:	a917      	add	r1, sp, #92	; 0x5c
 8018486:	a808      	add	r0, sp, #32
 8018488:	f7f5 f8ec 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 801848c:	ab08      	add	r3, sp, #32
 801848e:	f104 0241 	add.w	r2, r4, #65	; 0x41
 8018492:	a90c      	add	r1, sp, #48	; 0x30
 8018494:	f853 0b04 	ldr.w	r0, [r3], #4
 8018498:	f842 0b04 	str.w	r0, [r2], #4
 801849c:	428b      	cmp	r3, r1
 801849e:	d1f9      	bne.n	8018494 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x64c>
 80184a0:	e721      	b.n	80182e6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 80184a2:	885b      	ldrh	r3, [r3, #2]
 80184a4:	f8ad 306b 	strh.w	r3, [sp, #107]	; 0x6b
 80184a8:	e7ec      	b.n	8018484 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80184aa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80184ae:	f8cd 3069 	str.w	r3, [sp, #105]	; 0x69
 80184b2:	e7e7      	b.n	8018484 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80184b4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80184b8:	f8cd 2065 	str.w	r2, [sp, #101]	; 0x65
 80184bc:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80184c0:	f8cd 2069 	str.w	r2, [sp, #105]	; 0x69
 80184c4:	e7de      	b.n	8018484 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80184c6:	1c9a      	adds	r2, r3, #2
 80184c8:	f10d 015d 	add.w	r1, sp, #93	; 0x5d
 80184cc:	3312      	adds	r3, #18
 80184ce:	f852 0b04 	ldr.w	r0, [r2], #4
 80184d2:	f841 0b04 	str.w	r0, [r1], #4
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d1f9      	bne.n	80184ce <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x686>
 80184da:	e7d3      	b.n	8018484 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x63c>
 80184dc:	f10b 0102 	add.w	r1, fp, #2
 80184e0:	f1ba 0f03 	cmp.w	sl, #3
 80184e4:	d808      	bhi.n	80184f8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 80184e6:	e8df f00a 	tbb	[pc, sl]
 80184ea:	2602      	.short	0x2602
 80184ec:	322c      	.short	0x322c
 80184ee:	5c5b      	ldrb	r3, [r3, r1]
 80184f0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80184f4:	f10b 0103 	add.w	r1, fp, #3
 80184f8:	f002 0b1f 	and.w	fp, r2, #31
 80184fc:	4620      	mov	r0, r4
 80184fe:	f002 fcd9 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8018502:	f1bb 0f00 	cmp.w	fp, #0
 8018506:	d00d      	beq.n	8018524 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6dc>
 8018508:	2102      	movs	r1, #2
 801850a:	4620      	mov	r0, r4
 801850c:	f002 fc92 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018510:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018514:	6863      	ldr	r3, [r4, #4]
 8018516:	f06b 0b7f 	orn	fp, fp, #127	; 0x7f
 801851a:	f883 b000 	strb.w	fp, [r3]
 801851e:	6863      	ldr	r3, [r4, #4]
 8018520:	f883 a001 	strb.w	sl, [r3, #1]
 8018524:	2d04      	cmp	r5, #4
 8018526:	d81c      	bhi.n	8018562 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x71a>
 8018528:	1eab      	subs	r3, r5, #2
 801852a:	2b02      	cmp	r3, #2
 801852c:	d837      	bhi.n	801859e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x756>
 801852e:	e8df f003 	tbb	[pc, r3]
 8018532:	483f      	.short	0x483f
 8018534:	54          	.byte	0x54
 8018535:	00          	.byte	0x00
 8018536:	5a5b      	ldrh	r3, [r3, r1]
 8018538:	f8ad 3057 	strh.w	r3, [sp, #87]	; 0x57
 801853c:	f10b 0104 	add.w	r1, fp, #4
 8018540:	e7da      	b.n	80184f8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 8018542:	585b      	ldr	r3, [r3, r1]
 8018544:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 8018548:	f10b 0106 	add.w	r1, fp, #6
 801854c:	e7d4      	b.n	80184f8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 801854e:	1858      	adds	r0, r3, r1
 8018550:	585b      	ldr	r3, [r3, r1]
 8018552:	f8cd 3051 	str.w	r3, [sp, #81]	; 0x51
 8018556:	6843      	ldr	r3, [r0, #4]
 8018558:	f8cd 3055 	str.w	r3, [sp, #85]	; 0x55
 801855c:	f10b 010a 	add.w	r1, fp, #10
 8018560:	e7ca      	b.n	80184f8 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x6b0>
 8018562:	2dfe      	cmp	r5, #254	; 0xfe
 8018564:	d054      	beq.n	8018610 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7c8>
 8018566:	2dff      	cmp	r5, #255	; 0xff
 8018568:	d066      	beq.n	8018638 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7f0>
 801856a:	2dfd      	cmp	r5, #253	; 0xfd
 801856c:	d045      	beq.n	80185fa <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7b2>
 801856e:	2102      	movs	r1, #2
 8018570:	4620      	mov	r0, r4
 8018572:	f002 fc5f 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018576:	6863      	ldr	r3, [r4, #4]
 8018578:	2280      	movs	r2, #128	; 0x80
 801857a:	701a      	strb	r2, [r3, #0]
 801857c:	6863      	ldr	r3, [r4, #4]
 801857e:	a912      	add	r1, sp, #72	; 0x48
 8018580:	705d      	strb	r5, [r3, #1]
 8018582:	a808      	add	r0, sp, #32
 8018584:	f7f5 f86e 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8018588:	ab08      	add	r3, sp, #32
 801858a:	f104 0241 	add.w	r2, r4, #65	; 0x41
 801858e:	a90c      	add	r1, sp, #48	; 0x30
 8018590:	f853 0b04 	ldr.w	r0, [r3], #4
 8018594:	f842 0b04 	str.w	r0, [r2], #4
 8018598:	428b      	cmp	r3, r1
 801859a:	d1f9      	bne.n	8018590 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x748>
 801859c:	e6a3      	b.n	80182e6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 801859e:	2102      	movs	r1, #2
 80185a0:	4620      	mov	r0, r4
 80185a2:	f002 fc47 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185a6:	6863      	ldr	r3, [r4, #4]
 80185a8:	f8bd 2057 	ldrh.w	r2, [sp, #87]	; 0x57
 80185ac:	801a      	strh	r2, [r3, #0]
 80185ae:	e7de      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80185b0:	2104      	movs	r1, #4
 80185b2:	4620      	mov	r0, r4
 80185b4:	f002 fc3e 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185b8:	6863      	ldr	r3, [r4, #4]
 80185ba:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
 80185be:	601a      	str	r2, [r3, #0]
 80185c0:	e7d5      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80185c2:	2108      	movs	r1, #8
 80185c4:	4620      	mov	r0, r4
 80185c6:	f002 fc35 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185ca:	6862      	ldr	r2, [r4, #4]
 80185cc:	f8dd 3051 	ldr.w	r3, [sp, #81]	; 0x51
 80185d0:	6013      	str	r3, [r2, #0]
 80185d2:	f8dd 3055 	ldr.w	r3, [sp, #85]	; 0x55
 80185d6:	6053      	str	r3, [r2, #4]
 80185d8:	e7c9      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80185da:	2110      	movs	r1, #16
 80185dc:	4620      	mov	r0, r4
 80185de:	f002 fc29 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80185e2:	6862      	ldr	r2, [r4, #4]
 80185e4:	f10d 0349 	add.w	r3, sp, #73	; 0x49
 80185e8:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80185ec:	f853 0b04 	ldr.w	r0, [r3], #4
 80185f0:	f842 0b04 	str.w	r0, [r2], #4
 80185f4:	428b      	cmp	r3, r1
 80185f6:	d1f9      	bne.n	80185ec <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x7a4>
 80185f8:	e7b9      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 80185fa:	2105      	movs	r1, #5
 80185fc:	4620      	mov	r0, r4
 80185fe:	f002 fc19 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018602:	6863      	ldr	r3, [r4, #4]
 8018604:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018606:	6018      	str	r0, [r3, #0]
 8018608:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 801860c:	711a      	strb	r2, [r3, #4]
 801860e:	e7ae      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 8018610:	2106      	movs	r1, #6
 8018612:	4620      	mov	r0, r4
 8018614:	f002 fc0e 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018618:	6863      	ldr	r3, [r4, #4]
 801861a:	f8dd 2053 	ldr.w	r2, [sp, #83]	; 0x53
 801861e:	601a      	str	r2, [r3, #0]
 8018620:	f8bd 2057 	ldrh.w	r2, [sp, #87]	; 0x57
 8018624:	809a      	strh	r2, [r3, #4]
 8018626:	e7a2      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 8018628:	08021841 	.word	0x08021841
 801862c:	080218fc 	.word	0x080218fc
 8018630:	08021929 	.word	0x08021929
 8018634:	08021966 	.word	0x08021966
 8018638:	2107      	movs	r1, #7
 801863a:	4620      	mov	r0, r4
 801863c:	f002 fbfa 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018640:	6863      	ldr	r3, [r4, #4]
 8018642:	f8dd 2052 	ldr.w	r2, [sp, #82]	; 0x52
 8018646:	601a      	str	r2, [r3, #0]
 8018648:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801864c:	809a      	strh	r2, [r3, #4]
 801864e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8018652:	719a      	strb	r2, [r3, #6]
 8018654:	e78b      	b.n	801856e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x726>
 8018656:	4659      	mov	r1, fp
 8018658:	4620      	mov	r0, r4
 801865a:	f002 fc2b 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801865e:	9907      	ldr	r1, [sp, #28]
 8018660:	a808      	add	r0, sp, #32
 8018662:	f7f4 ffff 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8018666:	ab08      	add	r3, sp, #32
 8018668:	f104 0241 	add.w	r2, r4, #65	; 0x41
 801866c:	a90c      	add	r1, sp, #48	; 0x30
 801866e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018672:	f842 0b04 	str.w	r0, [r2], #4
 8018676:	428b      	cmp	r3, r1
 8018678:	d1f9      	bne.n	801866e <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x826>
 801867a:	e634      	b.n	80182e6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x49e>
 801867c:	2303      	movs	r3, #3
 801867e:	9326      	str	r3, [sp, #152]	; 0x98
 8018680:	4b0b      	ldr	r3, [pc, #44]	; (80186b0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x868>)
 8018682:	4a0c      	ldr	r2, [pc, #48]	; (80186b4 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x86c>)
 8018684:	9327      	str	r3, [sp, #156]	; 0x9c
 8018686:	4619      	mov	r1, r3
 8018688:	2003      	movs	r0, #3
 801868a:	e694      	b.n	80183b6 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x56e>
 801868c:	9b05      	ldr	r3, [sp, #20]
 801868e:	b92b      	cbnz	r3, 801869c <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x854>
 8018690:	4638      	mov	r0, r7
 8018692:	f001 ff7f 	bl	801a594 <078582282b526a1ec1227869e1581c8a1811b440>
 8018696:	b047      	add	sp, #284	; 0x11c
 8018698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801869c:	a80f      	add	r0, sp, #60	; 0x3c
 801869e:	f001 fc87 	bl	8019fb0 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d1f4      	bne.n	8018690 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x848>
 80186a6:	e47b      	b.n	8017fa0 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x158>
 80186a8:	4638      	mov	r0, r7
 80186aa:	f000 f839 	bl	8018720 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2>
 80186ae:	e7f2      	b.n	8018696 <fbb5d9264f687a3d3875788e4c96e7f3a0b73ecb+0x84e>
 80186b0:	08021841 	.word	0x08021841
 80186b4:	0802197e 	.word	0x0802197e

080186b8 <1d524c1b514218a64c10ce09ef25ee3b26d5aac8>:
 80186b8:	4770      	bx	lr

080186ba <443e8a131efc1d3c180cec49dabd3d3f1c58eeac>:
 80186ba:	4770      	bx	lr

080186bc <cb5093c001ef61253a4d1da1a0188ff7663f0307>:
 80186bc:	4770      	bx	lr

080186be <966a9fb75e08bd6bd3b3054de298215c3cbec82e>:
 80186be:	2270      	movs	r2, #112	; 0x70
 80186c0:	7042      	strb	r2, [r0, #1]
 80186c2:	223a      	movs	r2, #58	; 0x3a
 80186c4:	7402      	strb	r2, [r0, #16]
 80186c6:	f7ff ba56 	b.w	8017b76 <00af7f89235fe04a2b2b59d942644988487fcbf4>
	...

080186cc <a4e54615be274afd6b4d40b38f5ecc85b5402247>:
 80186cc:	b513      	push	{r0, r1, r4, lr}
 80186ce:	2370      	movs	r3, #112	; 0x70
 80186d0:	7043      	strb	r3, [r0, #1]
 80186d2:	8a43      	ldrh	r3, [r0, #18]
 80186d4:	2b81      	cmp	r3, #129	; 0x81
 80186d6:	4604      	mov	r4, r0
 80186d8:	d806      	bhi.n	80186e8 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x1c>
 80186da:	2b7f      	cmp	r3, #127	; 0x7f
 80186dc:	d906      	bls.n	80186ec <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x20>
 80186de:	b002      	add	sp, #8
 80186e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186e4:	f000 b85e 	b.w	80187a4 <623bedcd6d024f4b6fd8797e4e7a6121693618c5>
 80186e8:	2b9b      	cmp	r3, #155	; 0x9b
 80186ea:	d00f      	beq.n	801870c <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x40>
 80186ec:	2303      	movs	r3, #3
 80186ee:	9300      	str	r3, [sp, #0]
 80186f0:	4b09      	ldr	r3, [pc, #36]	; (8018718 <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x4c>)
 80186f2:	9301      	str	r3, [sp, #4]
 80186f4:	ab02      	add	r3, sp, #8
 80186f6:	e913 0003 	ldmdb	r3, {r0, r1}
 80186fa:	4a08      	ldr	r2, [pc, #32]	; (801871c <a4e54615be274afd6b4d40b38f5ecc85b5402247+0x50>)
 80186fc:	f7f7 ff9a 	bl	8010634 <LOGGER_PrintLine>
 8018700:	4620      	mov	r0, r4
 8018702:	b002      	add	sp, #8
 8018704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018708:	f7f5 bb74 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801870c:	b002      	add	sp, #8
 801870e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018712:	f000 bc8b 	b.w	801902c <c56d874196d9f33fea409aab4115507f6cab3a7f>
 8018716:	bf00      	nop
 8018718:	080219d0 	.word	0x080219d0
 801871c:	080219d7 	.word	0x080219d7

08018720 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2>:
 8018720:	b513      	push	{r0, r1, r4, lr}
 8018722:	2370      	movs	r3, #112	; 0x70
 8018724:	7043      	strb	r3, [r0, #1]
 8018726:	6843      	ldr	r3, [r0, #4]
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	8243      	strh	r3, [r0, #18]
 801872c:	2b81      	cmp	r3, #129	; 0x81
 801872e:	4604      	mov	r4, r0
 8018730:	d806      	bhi.n	8018740 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x20>
 8018732:	061b      	lsls	r3, r3, #24
 8018734:	d506      	bpl.n	8018744 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x24>
 8018736:	b002      	add	sp, #8
 8018738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801873c:	f000 b854 	b.w	80187e8 <1d79bc66ce5e0a5814d212e24315240b99f665c4>
 8018740:	2b9b      	cmp	r3, #155	; 0x9b
 8018742:	d00f      	beq.n	8018764 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x44>
 8018744:	2303      	movs	r3, #3
 8018746:	9300      	str	r3, [sp, #0]
 8018748:	4b09      	ldr	r3, [pc, #36]	; (8018770 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x50>)
 801874a:	9301      	str	r3, [sp, #4]
 801874c:	ab02      	add	r3, sp, #8
 801874e:	e913 0003 	ldmdb	r3, {r0, r1}
 8018752:	4a08      	ldr	r2, [pc, #32]	; (8018774 <0f2b82323c2b2a010fa19b971d87ff5fc3a714e2+0x54>)
 8018754:	f7f7 ff6e 	bl	8010634 <LOGGER_PrintLine>
 8018758:	4620      	mov	r0, r4
 801875a:	b002      	add	sp, #8
 801875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018760:	f7f5 bb48 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8018764:	b002      	add	sp, #8
 8018766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801876a:	f001 b9f7 	b.w	8019b5c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68>
 801876e:	bf00      	nop
 8018770:	080219d0 	.word	0x080219d0
 8018774:	080219d7 	.word	0x080219d7

08018778 <df2f78a5f231f323fc241372a3a00cee3087c107>:
 8018778:	4b05      	ldr	r3, [pc, #20]	; (8018790 <df2f78a5f231f323fc241372a3a00cee3087c107+0x18>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	2200      	movs	r2, #0
 801877e:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8018782:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
 8018786:	2201      	movs	r2, #1
 8018788:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 801878c:	4770      	bx	lr
 801878e:	bf00      	nop
 8018790:	20000040 	.word	0x20000040

08018794 <80b9218102010b739652963fa2fb0c366b6f860e>:
 8018794:	4b02      	ldr	r3, [pc, #8]	; (80187a0 <80b9218102010b739652963fa2fb0c366b6f860e+0xc>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	2200      	movs	r2, #0
 801879a:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 801879e:	4770      	bx	lr
 80187a0:	20000040 	.word	0x20000040

080187a4 <623bedcd6d024f4b6fd8797e4e7a6121693618c5>:
 80187a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187a6:	4b0d      	ldr	r3, [pc, #52]	; (80187dc <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x38>)
 80187a8:	681d      	ldr	r5, [r3, #0]
 80187aa:	2371      	movs	r3, #113	; 0x71
 80187ac:	7043      	strb	r3, [r0, #1]
 80187ae:	7803      	ldrb	r3, [r0, #0]
 80187b0:	2b71      	cmp	r3, #113	; 0x71
 80187b2:	4604      	mov	r4, r0
 80187b4:	d009      	beq.n	80187ca <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x26>
 80187b6:	2303      	movs	r3, #3
 80187b8:	9300      	str	r3, [sp, #0]
 80187ba:	4b09      	ldr	r3, [pc, #36]	; (80187e0 <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x3c>)
 80187bc:	9301      	str	r3, [sp, #4]
 80187be:	ab02      	add	r3, sp, #8
 80187c0:	e913 0003 	ldmdb	r3, {r0, r1}
 80187c4:	4a07      	ldr	r2, [pc, #28]	; (80187e4 <623bedcd6d024f4b6fd8797e4e7a6121693618c5+0x40>)
 80187c6:	f7f7 ff35 	bl	8010634 <LOGGER_PrintLine>
 80187ca:	4620      	mov	r0, r4
 80187cc:	f7f5 fb12 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80187d0:	2300      	movs	r3, #0
 80187d2:	f885 325a 	strb.w	r3, [r5, #602]	; 0x25a
 80187d6:	b003      	add	sp, #12
 80187d8:	bd30      	pop	{r4, r5, pc}
 80187da:	bf00      	nop
 80187dc:	20000040 	.word	0x20000040
 80187e0:	080219ee 	.word	0x080219ee
 80187e4:	0801f776 	.word	0x0801f776

080187e8 <1d79bc66ce5e0a5814d212e24315240b99f665c4>:
 80187e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80187ec:	4b3a      	ldr	r3, [pc, #232]	; (80188d8 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf0>)
 80187ee:	681f      	ldr	r7, [r3, #0]
 80187f0:	8a43      	ldrh	r3, [r0, #18]
 80187f2:	2571      	movs	r5, #113	; 0x71
 80187f4:	2b80      	cmp	r3, #128	; 0x80
 80187f6:	4604      	mov	r4, r0
 80187f8:	7045      	strb	r5, [r0, #1]
 80187fa:	d00c      	beq.n	8018816 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x2e>
 80187fc:	2b81      	cmp	r3, #129	; 0x81
 80187fe:	d02b      	beq.n	8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 8018800:	2203      	movs	r2, #3
 8018802:	9200      	str	r2, [sp, #0]
 8018804:	4a35      	ldr	r2, [pc, #212]	; (80188dc <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf4>)
 8018806:	9201      	str	r2, [sp, #4]
 8018808:	a902      	add	r1, sp, #8
 801880a:	e911 0003 	ldmdb	r1, {r0, r1}
 801880e:	4a34      	ldr	r2, [pc, #208]	; (80188e0 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf8>)
 8018810:	f7f7 ff10 	bl	8010634 <LOGGER_PrintLine>
 8018814:	e020      	b.n	8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 8018816:	2305      	movs	r3, #5
 8018818:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80188dc <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xf4>
 801881c:	9300      	str	r3, [sp, #0]
 801881e:	f8cd 8004 	str.w	r8, [sp, #4]
 8018822:	466e      	mov	r6, sp
 8018824:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018828:	4a2e      	ldr	r2, [pc, #184]	; (80188e4 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xfc>)
 801882a:	f7f7 ff03 	bl	8010634 <LOGGER_PrintLine>
 801882e:	f897 326e 	ldrb.w	r3, [r7, #622]	; 0x26e
 8018832:	b18b      	cbz	r3, 8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 8018834:	f104 001d 	add.w	r0, r4, #29
 8018838:	f7f4 fdcc 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801883c:	b960      	cbnz	r0, 8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 801883e:	4628      	mov	r0, r5
 8018840:	f7f5 fa1a 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8018844:	4605      	mov	r5, r0
 8018846:	b968      	cbnz	r0, 8018864 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x7c>
 8018848:	2303      	movs	r3, #3
 801884a:	e9cd 3800 	strd	r3, r8, [sp]
 801884e:	4a26      	ldr	r2, [pc, #152]	; (80188e8 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x100>)
 8018850:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018854:	f7f7 feee 	bl	8010634 <LOGGER_PrintLine>
 8018858:	4620      	mov	r0, r4
 801885a:	b002      	add	sp, #8
 801885c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018860:	f7f5 bac8 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8018864:	f247 1371 	movw	r3, #29041	; 0x7171
 8018868:	8003      	strh	r3, [r0, #0]
 801886a:	233a      	movs	r3, #58	; 0x3a
 801886c:	7403      	strb	r3, [r0, #16]
 801886e:	2381      	movs	r3, #129	; 0x81
 8018870:	8243      	strh	r3, [r0, #18]
 8018872:	7a21      	ldrb	r1, [r4, #8]
 8018874:	f002 fade 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018878:	686e      	ldr	r6, [r5, #4]
 801887a:	7a22      	ldrb	r2, [r4, #8]
 801887c:	6861      	ldr	r1, [r4, #4]
 801887e:	4630      	mov	r0, r6
 8018880:	f003 fc31 	bl	801c0e6 <memcpy>
 8018884:	f104 032e 	add.w	r3, r4, #46	; 0x2e
 8018888:	f105 021d 	add.w	r2, r5, #29
 801888c:	f104 013e 	add.w	r1, r4, #62	; 0x3e
 8018890:	f853 0b04 	ldr.w	r0, [r3], #4
 8018894:	f842 0b04 	str.w	r0, [r2], #4
 8018898:	428b      	cmp	r3, r1
 801889a:	d1f9      	bne.n	8018890 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0xa8>
 801889c:	781b      	ldrb	r3, [r3, #0]
 801889e:	7013      	strb	r3, [r2, #0]
 80188a0:	7cab      	ldrb	r3, [r5, #18]
 80188a2:	f806 3b02 	strb.w	r3, [r6], #2
 80188a6:	2005      	movs	r0, #5
 80188a8:	f7f3 febe 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80188ac:	4680      	mov	r8, r0
 80188ae:	2002      	movs	r0, #2
 80188b0:	f7f3 feba 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80188b4:	f108 0201 	add.w	r2, r8, #1
 80188b8:	1c43      	adds	r3, r0, #1
 80188ba:	4631      	mov	r1, r6
 80188bc:	4628      	mov	r0, r5
 80188be:	f002 fb75 	bl	801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 80188c2:	2301      	movs	r3, #1
 80188c4:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
 80188c8:	4628      	mov	r0, r5
 80188ca:	f7ff fef8 	bl	80186be <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d1c2      	bne.n	8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 80188d2:	f887 025a 	strb.w	r0, [r7, #602]	; 0x25a
 80188d6:	e7bf      	b.n	8018858 <1d79bc66ce5e0a5814d212e24315240b99f665c4+0x70>
 80188d8:	20000040 	.word	0x20000040
 80188dc:	080219ee 	.word	0x080219ee
 80188e0:	08021a1f 	.word	0x08021a1f
 80188e4:	08021a07 	.word	0x08021a07
 80188e8:	0801fc42 	.word	0x0801fc42

080188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>:
 80188ec:	3901      	subs	r1, #1
 80188ee:	4402      	add	r2, r0
 80188f0:	4282      	cmp	r2, r0
 80188f2:	d100      	bne.n	80188f6 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0xa>
 80188f4:	4770      	bx	lr
 80188f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80188fa:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80188fe:	e7f7      	b.n	80188f0 <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b+0x4>

08018900 <047450545e88a7e0b1f703be227cb1455be57bcf>:
 8018900:	4b02      	ldr	r3, [pc, #8]	; (801890c <047450545e88a7e0b1f703be227cb1455be57bcf+0xc>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f8a3 030c 	strh.w	r0, [r3, #780]	; 0x30c
 8018908:	f002 b8b0 	b.w	801aa6c <6362cea72da2b827a19bfabd8f796b6337cbd199>
 801890c:	20000040 	.word	0x20000040

08018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>:
 8018910:	4b05      	ldr	r3, [pc, #20]	; (8018928 <5d52bdabf8ecd6c8d7198566d11b639ed660a013+0x18>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	2200      	movs	r2, #0
 8018916:	f893 0305 	ldrb.w	r0, [r3, #773]	; 0x305
 801891a:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 801891e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 8018922:	f7f6 b90d 	b.w	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8018926:	bf00      	nop
 8018928:	20000040 	.word	0x20000040

0801892c <43cc35f40acb52f42fa1199cee254d1023926eea>:
 801892c:	b510      	push	{r4, lr}
 801892e:	4b09      	ldr	r3, [pc, #36]	; (8018954 <43cc35f40acb52f42fa1199cee254d1023926eea+0x28>)
 8018930:	681c      	ldr	r4, [r3, #0]
 8018932:	2300      	movs	r3, #0
 8018934:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
 8018938:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
 801893c:	f884 32f1 	strb.w	r3, [r4, #753]	; 0x2f1
 8018940:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
 8018944:	f894 02fc 	ldrb.w	r0, [r4, #764]	; 0x2fc
 8018948:	f7f6 f8fa 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801894c:	2302      	movs	r3, #2
 801894e:	f8a4 32f2 	strh.w	r3, [r4, #754]	; 0x2f2
 8018952:	bd10      	pop	{r4, pc}
 8018954:	20000040 	.word	0x20000040

08018958 <cef630f5a74a35314667ebee3f885b52bc89b138>:
 8018958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801895a:	4605      	mov	r5, r0
 801895c:	2073      	movs	r0, #115	; 0x73
 801895e:	f7f5 f98b 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8018962:	4604      	mov	r4, r0
 8018964:	b960      	cbnz	r0, 8018980 <cef630f5a74a35314667ebee3f885b52bc89b138+0x28>
 8018966:	2303      	movs	r3, #3
 8018968:	9300      	str	r3, [sp, #0]
 801896a:	4b4b      	ldr	r3, [pc, #300]	; (8018a98 <cef630f5a74a35314667ebee3f885b52bc89b138+0x140>)
 801896c:	9301      	str	r3, [sp, #4]
 801896e:	ab02      	add	r3, sp, #8
 8018970:	e913 0003 	ldmdb	r3, {r0, r1}
 8018974:	4a49      	ldr	r2, [pc, #292]	; (8018a9c <cef630f5a74a35314667ebee3f885b52bc89b138+0x144>)
 8018976:	b003      	add	sp, #12
 8018978:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801897c:	f7f7 be5a 	b.w	8010634 <LOGGER_PrintLine>
 8018980:	f247 3373 	movw	r3, #29555	; 0x7373
 8018984:	8003      	strh	r3, [r0, #0]
 8018986:	4b46      	ldr	r3, [pc, #280]	; (8018aa0 <cef630f5a74a35314667ebee3f885b52bc89b138+0x148>)
 8018988:	6103      	str	r3, [r0, #16]
 801898a:	f105 0348 	add.w	r3, r5, #72	; 0x48
 801898e:	f100 021d 	add.w	r2, r0, #29
 8018992:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8018996:	461f      	mov	r7, r3
 8018998:	f853 0b04 	ldr.w	r0, [r3], #4
 801899c:	f842 0b04 	str.w	r0, [r2], #4
 80189a0:	428b      	cmp	r3, r1
 80189a2:	d1f9      	bne.n	8018998 <cef630f5a74a35314667ebee3f885b52bc89b138+0x40>
 80189a4:	781b      	ldrb	r3, [r3, #0]
 80189a6:	7013      	strb	r3, [r2, #0]
 80189a8:	2110      	movs	r1, #16
 80189aa:	4620      	mov	r0, r4
 80189ac:	f002 fa42 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80189b0:	f105 0338 	add.w	r3, r5, #56	; 0x38
 80189b4:	6862      	ldr	r2, [r4, #4]
 80189b6:	461e      	mov	r6, r3
 80189b8:	f853 1b04 	ldr.w	r1, [r3], #4
 80189bc:	f842 1b04 	str.w	r1, [r2], #4
 80189c0:	42bb      	cmp	r3, r7
 80189c2:	d1f9      	bne.n	80189b8 <cef630f5a74a35314667ebee3f885b52bc89b138+0x60>
 80189c4:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80189c6:	6862      	ldr	r2, [r4, #4]
 80189c8:	ba5b      	rev16	r3, r3
 80189ca:	80d3      	strh	r3, [r2, #6]
 80189cc:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 80189d0:	6862      	ldr	r2, [r4, #4]
 80189d2:	ba5b      	rev16	r3, r3
 80189d4:	8113      	strh	r3, [r2, #8]
 80189d6:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 80189da:	6862      	ldr	r2, [r4, #4]
 80189dc:	ba5b      	rev16	r3, r3
 80189de:	8153      	strh	r3, [r2, #10]
 80189e0:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 80189e4:	6862      	ldr	r2, [r4, #4]
 80189e6:	ba5b      	rev16	r3, r3
 80189e8:	81d3      	strh	r3, [r2, #14]
 80189ea:	2120      	movs	r1, #32
 80189ec:	4620      	mov	r0, r4
 80189ee:	f002 fa21 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80189f2:	2005      	movs	r0, #5
 80189f4:	f7f3 fe18 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 80189f8:	f8d0 3001 	ldr.w	r3, [r0, #1]
 80189fc:	62ab      	str	r3, [r5, #40]	; 0x28
 80189fe:	f8d0 3005 	ldr.w	r3, [r0, #5]
 8018a02:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018a04:	2300      	movs	r3, #0
 8018a06:	626b      	str	r3, [r5, #36]	; 0x24
 8018a08:	6862      	ldr	r2, [r4, #4]
 8018a0a:	f105 0318 	add.w	r3, r5, #24
 8018a0e:	461f      	mov	r7, r3
 8018a10:	f853 1b04 	ldr.w	r1, [r3], #4
 8018a14:	f842 1b04 	str.w	r1, [r2], #4
 8018a18:	42b3      	cmp	r3, r6
 8018a1a:	d1f9      	bne.n	8018a10 <cef630f5a74a35314667ebee3f885b52bc89b138+0xb8>
 8018a1c:	4b21      	ldr	r3, [pc, #132]	; (8018aa4 <cef630f5a74a35314667ebee3f885b52bc89b138+0x14c>)
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8018a24:	806b      	strh	r3, [r5, #2]
 8018a26:	2118      	movs	r1, #24
 8018a28:	4620      	mov	r0, r4
 8018a2a:	f002 fa03 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018a2e:	6862      	ldr	r2, [r4, #4]
 8018a30:	462b      	mov	r3, r5
 8018a32:	f853 1b04 	ldr.w	r1, [r3], #4
 8018a36:	f842 1b04 	str.w	r1, [r2], #4
 8018a3a:	42bb      	cmp	r3, r7
 8018a3c:	d1f9      	bne.n	8018a32 <cef630f5a74a35314667ebee3f885b52bc89b138+0xda>
 8018a3e:	886b      	ldrh	r3, [r5, #2]
 8018a40:	6862      	ldr	r2, [r4, #4]
 8018a42:	0a1b      	lsrs	r3, r3, #8
 8018a44:	7093      	strb	r3, [r2, #2]
 8018a46:	6863      	ldr	r3, [r4, #4]
 8018a48:	886a      	ldrh	r2, [r5, #2]
 8018a4a:	70da      	strb	r2, [r3, #3]
 8018a4c:	2104      	movs	r1, #4
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f002 f9f0 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018a54:	6863      	ldr	r3, [r4, #4]
 8018a56:	8a62      	ldrh	r2, [r4, #18]
 8018a58:	701a      	strb	r2, [r3, #0]
 8018a5a:	6863      	ldr	r3, [r4, #4]
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	705a      	strb	r2, [r3, #1]
 8018a60:	6861      	ldr	r1, [r4, #4]
 8018a62:	2005      	movs	r0, #5
 8018a64:	1c8e      	adds	r6, r1, #2
 8018a66:	f7f3 fddf 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018a6a:	4607      	mov	r7, r0
 8018a6c:	2002      	movs	r0, #2
 8018a6e:	f7f3 fddb 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018a72:	1c7a      	adds	r2, r7, #1
 8018a74:	1c43      	adds	r3, r0, #1
 8018a76:	4631      	mov	r1, r6
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f002 fa97 	bl	801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7ff fe1d 	bl	80186be <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 8018a84:	b110      	cbz	r0, 8018a8c <cef630f5a74a35314667ebee3f885b52bc89b138+0x134>
 8018a86:	65ec      	str	r4, [r5, #92]	; 0x5c
 8018a88:	b003      	add	sp, #12
 8018a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	b003      	add	sp, #12
 8018a90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a94:	f7f5 b9ae 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8018a98:	08021a57 	.word	0x08021a57
 8018a9c:	0801fc42 	.word	0x0801fc42
 8018aa0:	009b003a 	.word	0x009b003a
 8018aa4:	20000040 	.word	0x20000040

08018aa8 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>:
 8018aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018aaa:	4b09      	ldr	r3, [pc, #36]	; (8018ad0 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x28>)
 8018aac:	4909      	ldr	r1, [pc, #36]	; (8018ad4 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x2c>)
 8018aae:	681c      	ldr	r4, [r3, #0]
 8018ab0:	4809      	ldr	r0, [pc, #36]	; (8018ad8 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x30>)
 8018ab2:	f894 52fc 	ldrb.w	r5, [r4, #764]	; 0x2fc
 8018ab6:	f7f6 f8e9 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8018aba:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8018abe:	4602      	mov	r2, r0
 8018ac0:	4b06      	ldr	r3, [pc, #24]	; (8018adc <fe525efb3be16854cf2fbf621c3bc3a516eb40e5+0x34>)
 8018ac2:	9400      	str	r4, [sp, #0]
 8018ac4:	2101      	movs	r1, #1
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	f7f6 f828 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018acc:	b003      	add	sp, #12
 8018ace:	bd30      	pop	{r4, r5, pc}
 8018ad0:	20000040 	.word	0x20000040
 8018ad4:	00e4e1c0 	.word	0x00e4e1c0
 8018ad8:	03938700 	.word	0x03938700
 8018adc:	08018dd5 	.word	0x08018dd5

08018ae0 <ddcc96d14128f39f258a026a92cbd4c2383286b1>:
 8018ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ae2:	4b0a      	ldr	r3, [pc, #40]	; (8018b0c <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x2c>)
 8018ae4:	681c      	ldr	r4, [r3, #0]
 8018ae6:	f7ff ff13 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8018aea:	4909      	ldr	r1, [pc, #36]	; (8018b10 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x30>)
 8018aec:	4809      	ldr	r0, [pc, #36]	; (8018b14 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x34>)
 8018aee:	f894 5305 	ldrb.w	r5, [r4, #773]	; 0x305
 8018af2:	f7f6 f8cb 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8018af6:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8018afa:	4602      	mov	r2, r0
 8018afc:	4b06      	ldr	r3, [pc, #24]	; (8018b18 <ddcc96d14128f39f258a026a92cbd4c2383286b1+0x38>)
 8018afe:	9400      	str	r4, [sp, #0]
 8018b00:	2101      	movs	r1, #1
 8018b02:	4628      	mov	r0, r5
 8018b04:	f7f6 f80a 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018b08:	b003      	add	sp, #12
 8018b0a:	bd30      	pop	{r4, r5, pc}
 8018b0c:	20000040 	.word	0x20000040
 8018b10:	01312d00 	.word	0x01312d00
 8018b14:	00989680 	.word	0x00989680
 8018b18:	080192f9 	.word	0x080192f9

08018b1c <e1f51aec36766790a9d7657a41d61426b11f2b8a>:
 8018b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b1e:	4b0d      	ldr	r3, [pc, #52]	; (8018b54 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x38>)
 8018b20:	490d      	ldr	r1, [pc, #52]	; (8018b58 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x3c>)
 8018b22:	681c      	ldr	r4, [r3, #0]
 8018b24:	480d      	ldr	r0, [pc, #52]	; (8018b5c <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x40>)
 8018b26:	f894 52fc 	ldrb.w	r5, [r4, #764]	; 0x2fc
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	2202      	movs	r2, #2
 8018b2e:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
 8018b32:	f8a4 22f2 	strh.w	r2, [r4, #754]	; 0x2f2
 8018b36:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
 8018b3a:	f7f6 f8a7 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 8018b3e:	f504 741c 	add.w	r4, r4, #624	; 0x270
 8018b42:	4602      	mov	r2, r0
 8018b44:	4b06      	ldr	r3, [pc, #24]	; (8018b60 <e1f51aec36766790a9d7657a41d61426b11f2b8a+0x44>)
 8018b46:	9400      	str	r4, [sp, #0]
 8018b48:	2101      	movs	r1, #1
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	f7f5 ffe6 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018b50:	b003      	add	sp, #12
 8018b52:	bd30      	pop	{r4, r5, pc}
 8018b54:	20000040 	.word	0x20000040
 8018b58:	01312d00 	.word	0x01312d00
 8018b5c:	00989680 	.word	0x00989680
 8018b60:	08018b65 	.word	0x08018b65

08018b64 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>:
 8018b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b68:	b08d      	sub	sp, #52	; 0x34
 8018b6a:	4605      	mov	r5, r0
 8018b6c:	f7fa fbe4 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 8018b70:	b318      	cbz	r0, 8018bba <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8018b72:	f7f3 fd4b 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8018b76:	4604      	mov	r4, r0
 8018b78:	b9f8      	cbnz	r0, 8018bba <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8018b7a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8018db8 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x254>
 8018b7e:	f8d9 3000 	ldr.w	r3, [r9]
 8018b82:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8018b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d015      	beq.n	8018bba <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8018b8e:	4601      	mov	r1, r0
 8018b90:	2210      	movs	r2, #16
 8018b92:	f10d 0009 	add.w	r0, sp, #9
 8018b96:	f003 fa07 	bl	801bfa8 <memset>
 8018b9a:	2302      	movs	r3, #2
 8018b9c:	f10d 0109 	add.w	r1, sp, #9
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f88d 3008 	strb.w	r3, [sp, #8]
 8018ba6:	f7f4 f959 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8018baa:	b948      	cbnz	r0, 8018bc0 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x5c>
 8018bac:	2073      	movs	r0, #115	; 0x73
 8018bae:	f7f4 ffd3 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8018bb2:	f7ff fead 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8018bb6:	f7ff feb9 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 8018bba:	b00d      	add	sp, #52	; 0x34
 8018bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bc0:	a802      	add	r0, sp, #8
 8018bc2:	f7fb fdbb 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8018bc6:	2800      	cmp	r0, #0
 8018bc8:	d0f0      	beq.n	8018bac <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x48>
 8018bca:	2073      	movs	r0, #115	; 0x73
 8018bcc:	f7f5 f854 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	b998      	cbnz	r0, 8018bfc <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x98>
 8018bd4:	2303      	movs	r3, #3
 8018bd6:	9307      	str	r3, [sp, #28]
 8018bd8:	4b78      	ldr	r3, [pc, #480]	; (8018dbc <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x258>)
 8018bda:	4a79      	ldr	r2, [pc, #484]	; (8018dc0 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x25c>)
 8018bdc:	9308      	str	r3, [sp, #32]
 8018bde:	4619      	mov	r1, r3
 8018be0:	2003      	movs	r0, #3
 8018be2:	f7f7 fd27 	bl	8010634 <LOGGER_PrintLine>
 8018be6:	2101      	movs	r1, #1
 8018be8:	f885 1083 	strb.w	r1, [r5, #131]	; 0x83
 8018bec:	9500      	str	r5, [sp, #0]
 8018bee:	4b75      	ldr	r3, [pc, #468]	; (8018dc4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x260>)
 8018bf0:	4a75      	ldr	r2, [pc, #468]	; (8018dc8 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x264>)
 8018bf2:	f895 008c 	ldrb.w	r0, [r5, #140]	; 0x8c
 8018bf6:	f7f5 ff91 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018bfa:	e7de      	b.n	8018bba <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x56>
 8018bfc:	f247 3373 	movw	r3, #29555	; 0x7373
 8018c00:	8003      	strh	r3, [r0, #0]
 8018c02:	233a      	movs	r3, #58	; 0x3a
 8018c04:	7403      	strb	r3, [r0, #16]
 8018c06:	239b      	movs	r3, #155	; 0x9b
 8018c08:	8243      	strh	r3, [r0, #18]
 8018c0a:	2303      	movs	r3, #3
 8018c0c:	7743      	strb	r3, [r0, #29]
 8018c0e:	f100 021e 	add.w	r2, r0, #30
 8018c12:	f105 0308 	add.w	r3, r5, #8
 8018c16:	f105 0118 	add.w	r1, r5, #24
 8018c1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018c1e:	f842 0b04 	str.w	r0, [r2], #4
 8018c22:	428b      	cmp	r3, r1
 8018c24:	d1f9      	bne.n	8018c1a <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0xb6>
 8018c26:	2200      	movs	r2, #0
 8018c28:	a902      	add	r1, sp, #8
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	f002 f922 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018c30:	2005      	movs	r0, #5
 8018c32:	f7f3 fcf9 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018c36:	46a8      	mov	r8, r5
 8018c38:	4601      	mov	r1, r0
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f002 f919 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018c42:	2700      	movs	r7, #0
 8018c44:	2314      	movs	r3, #20
 8018c46:	2106      	movs	r1, #6
 8018c48:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
 8018c4c:	f885 7078 	strb.w	r7, [r5, #120]	; 0x78
 8018c50:	4620      	mov	r0, r4
 8018c52:	f808 1f75 	strb.w	r1, [r8, #117]!
 8018c56:	f002 f8ed 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018c5a:	6863      	ldr	r3, [r4, #4]
 8018c5c:	f8d5 2075 	ldr.w	r2, [r5, #117]	; 0x75
 8018c60:	601a      	str	r2, [r3, #0]
 8018c62:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8018c66:	809a      	strh	r2, [r3, #4]
 8018c68:	f001 fa0c 	bl	801a084 <84780c9f08e19cea1884da40f03f0c5650f281d0>
 8018c6c:	4606      	mov	r6, r0
 8018c6e:	2800      	cmp	r0, #0
 8018c70:	d063      	beq.n	8018d3a <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d6>
 8018c72:	f04f 0905 	mov.w	r9, #5
 8018c76:	a907      	add	r1, sp, #28
 8018c78:	4638      	mov	r0, r7
 8018c7a:	f001 fa13 	bl	801a0a4 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>
 8018c7e:	b1b0      	cbz	r0, 8018cae <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x14a>
 8018c80:	2102      	movs	r1, #2
 8018c82:	4620      	mov	r0, r4
 8018c84:	f002 f8d6 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018c88:	6863      	ldr	r3, [r4, #4]
 8018c8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8018c8e:	801a      	strh	r2, [r3, #0]
 8018c90:	2104      	movs	r1, #4
 8018c92:	2310      	movs	r3, #16
 8018c94:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8018c98:	f885 907b 	strb.w	r9, [r5, #123]	; 0x7b
 8018c9c:	f8a5 107c 	strh.w	r1, [r5, #124]	; 0x7c
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	f002 f8c7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018ca6:	6863      	ldr	r3, [r4, #4]
 8018ca8:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8018cac:	601a      	str	r2, [r3, #0]
 8018cae:	3701      	adds	r7, #1
 8018cb0:	42be      	cmp	r6, r7
 8018cb2:	d1e0      	bne.n	8018c76 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x112>
 8018cb4:	f895 3079 	ldrb.w	r3, [r5, #121]	; 0x79
 8018cb8:	3301      	adds	r3, #1
 8018cba:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
 8018cbe:	2114      	movs	r1, #20
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f002 f8b7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018cc6:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8018cca:	3301      	adds	r3, #1
 8018ccc:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
 8018cd0:	6862      	ldr	r2, [r4, #4]
 8018cd2:	f105 0361 	add.w	r3, r5, #97	; 0x61
 8018cd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8018cda:	f842 1b04 	str.w	r1, [r2], #4
 8018cde:	4543      	cmp	r3, r8
 8018ce0:	d1f9      	bne.n	8018cd6 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x172>
 8018ce2:	2104      	movs	r1, #4
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f002 f8a5 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018cea:	6863      	ldr	r3, [r4, #4]
 8018cec:	8a62      	ldrh	r2, [r4, #18]
 8018cee:	701a      	strb	r2, [r3, #0]
 8018cf0:	6863      	ldr	r3, [r4, #4]
 8018cf2:	f04f 0802 	mov.w	r8, #2
 8018cf6:	f883 8001 	strb.w	r8, [r3, #1]
 8018cfa:	6861      	ldr	r1, [r4, #4]
 8018cfc:	2005      	movs	r0, #5
 8018cfe:	eb01 0608 	add.w	r6, r1, r8
 8018d02:	f7f3 fc91 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018d06:	4607      	mov	r7, r0
 8018d08:	4640      	mov	r0, r8
 8018d0a:	f7f3 fc8d 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018d0e:	1c7a      	adds	r2, r7, #1
 8018d10:	1c43      	adds	r3, r0, #1
 8018d12:	4631      	mov	r1, r6
 8018d14:	4620      	mov	r0, r4
 8018d16:	f002 f949 	bl	801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f7ff fccf 	bl	80186be <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 8018d20:	4a26      	ldr	r2, [pc, #152]	; (8018dbc <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x258>)
 8018d22:	ab07      	add	r3, sp, #28
 8018d24:	2800      	cmp	r0, #0
 8018d26:	d042      	beq.n	8018dae <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x24a>
 8018d28:	2105      	movs	r1, #5
 8018d2a:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8018d2e:	4a27      	ldr	r2, [pc, #156]	; (8018dcc <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x268>)
 8018d30:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
 8018d34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018d38:	e753      	b.n	8018be2 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x7e>
 8018d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8018d3e:	b2f7      	uxtb	r7, r6
 8018d40:	f8b3 130c 	ldrh.w	r1, [r3, #780]	; 0x30c
 8018d44:	4638      	mov	r0, r7
 8018d46:	f7f3 ff1b 	bl	800cb80 <91ad02464a5553c72b508f812e77f83c74a657ed>
 8018d4a:	b918      	cbnz	r0, 8018d54 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1f0>
 8018d4c:	3601      	adds	r6, #1
 8018d4e:	2e1e      	cmp	r6, #30
 8018d50:	d1f3      	bne.n	8018d3a <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d6>
 8018d52:	e7af      	b.n	8018cb4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x150>
 8018d54:	2210      	movs	r2, #16
 8018d56:	2100      	movs	r1, #0
 8018d58:	f10d 001d 	add.w	r0, sp, #29
 8018d5c:	f003 f924 	bl	801bfa8 <memset>
 8018d60:	2302      	movs	r3, #2
 8018d62:	f10d 011d 	add.w	r1, sp, #29
 8018d66:	4638      	mov	r0, r7
 8018d68:	f88d 301c 	strb.w	r3, [sp, #28]
 8018d6c:	f7f4 f816 	bl	800cd9c <b7be15738b198492e50cb8023d171fca112169af>
 8018d70:	2200      	movs	r2, #0
 8018d72:	a907      	add	r1, sp, #28
 8018d74:	4620      	mov	r0, r4
 8018d76:	f002 f87d 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018d7a:	2005      	movs	r0, #5
 8018d7c:	f7f3 fc54 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8018d80:	2200      	movs	r2, #0
 8018d82:	4601      	mov	r1, r0
 8018d84:	4620      	mov	r0, r4
 8018d86:	f002 f875 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 8018d8a:	2305      	movs	r3, #5
 8018d8c:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8018d90:	2312      	movs	r3, #18
 8018d92:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
 8018d96:	2380      	movs	r3, #128	; 0x80
 8018d98:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8018d9c:	2104      	movs	r1, #4
 8018d9e:	4620      	mov	r0, r4
 8018da0:	f002 f848 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8018da4:	6863      	ldr	r3, [r4, #4]
 8018da6:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8018daa:	601a      	str	r2, [r3, #0]
 8018dac:	e782      	b.n	8018cb4 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x150>
 8018dae:	2104      	movs	r1, #4
 8018db0:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8018db4:	4a06      	ldr	r2, [pc, #24]	; (8018dd0 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x26c>)
 8018db6:	e7bd      	b.n	8018d34 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897+0x1d0>
 8018db8:	20000040 	.word	0x20000040
 8018dbc:	08021a57 	.word	0x08021a57
 8018dc0:	08021a62 	.word	0x08021a62
 8018dc4:	08018e19 	.word	0x08018e19
 8018dc8:	01312d00 	.word	0x01312d00
 8018dcc:	08021a8c 	.word	0x08021a8c
 8018dd0:	08021a9d 	.word	0x08021a9d

08018dd4 <0e7260d9ec263799a3774447fe3c1a059b19a3b3>:
 8018dd4:	b510      	push	{r4, lr}
 8018dd6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8018dda:	4604      	mov	r4, r0
 8018ddc:	b133      	cbz	r3, 8018dec <0e7260d9ec263799a3774447fe3c1a059b19a3b3+0x18>
 8018dde:	3b01      	subs	r3, #1
 8018de0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8018de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018de8:	f7ff be5e 	b.w	8018aa8 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>
 8018dec:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8018df0:	2b04      	cmp	r3, #4
 8018df2:	bf9c      	itt	ls
 8018df4:	3301      	addls	r3, #1
 8018df6:	f880 3084 	strbls.w	r3, [r0, #132]	; 0x84
 8018dfa:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8018dfe:	2101      	movs	r1, #1
 8018e00:	3301      	adds	r3, #1
 8018e02:	4099      	lsls	r1, r3
 8018e04:	2000      	movs	r0, #0
 8018e06:	f7f5 ff1f 	bl	800ec48 <7694f58d16cb666949a4f0727c30967f32581954>
 8018e0a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018e0e:	4620      	mov	r0, r4
 8018e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e14:	f7ff bea6 	b.w	8018b64 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>

08018e18 <8495929e13f55eda4e8148e511dfd6898419e338>:
 8018e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e1a:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
 8018e1e:	4a22      	ldr	r2, [pc, #136]	; (8018ea8 <8495929e13f55eda4e8148e511dfd6898419e338+0x90>)
 8018e20:	4604      	mov	r4, r0
 8018e22:	ab02      	add	r3, sp, #8
 8018e24:	b389      	cbz	r1, 8018e8a <8495929e13f55eda4e8148e511dfd6898419e338+0x72>
 8018e26:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
 8018e2a:	b309      	cbz	r1, 8018e70 <8495929e13f55eda4e8148e511dfd6898419e338+0x58>
 8018e2c:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 8018e30:	b1f1      	cbz	r1, 8018e70 <8495929e13f55eda4e8148e511dfd6898419e338+0x58>
 8018e32:	2103      	movs	r1, #3
 8018e34:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018e38:	4a1c      	ldr	r2, [pc, #112]	; (8018eac <8495929e13f55eda4e8148e511dfd6898419e338+0x94>)
 8018e3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e3e:	f7f7 fbf9 	bl	8010634 <LOGGER_PrintLine>
 8018e42:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8018e46:	481a      	ldr	r0, [pc, #104]	; (8018eb0 <8495929e13f55eda4e8148e511dfd6898419e338+0x98>)
 8018e48:	3b01      	subs	r3, #1
 8018e4a:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8018e4e:	2300      	movs	r3, #0
 8018e50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8018e54:	4621      	mov	r1, r4
 8018e56:	2212      	movs	r2, #18
 8018e58:	f7f6 fd5e 	bl	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8018e5c:	9400      	str	r4, [sp, #0]
 8018e5e:	4b15      	ldr	r3, [pc, #84]	; (8018eb4 <8495929e13f55eda4e8148e511dfd6898419e338+0x9c>)
 8018e60:	4a15      	ldr	r2, [pc, #84]	; (8018eb8 <8495929e13f55eda4e8148e511dfd6898419e338+0xa0>)
 8018e62:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8018e66:	2101      	movs	r1, #1
 8018e68:	f7f5 fe58 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018e6c:	b004      	add	sp, #16
 8018e6e:	bd10      	pop	{r4, pc}
 8018e70:	2101      	movs	r1, #1
 8018e72:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018e76:	4a11      	ldr	r2, [pc, #68]	; (8018ebc <8495929e13f55eda4e8148e511dfd6898419e338+0xa4>)
 8018e78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e7c:	f7f7 fbda 	bl	8010634 <LOGGER_PrintLine>
 8018e80:	b004      	add	sp, #16
 8018e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e86:	f7fa ba5f 	b.w	8013348 <2fba4ddec868eb31998278adcb690f685bb9d2cf>
 8018e8a:	2103      	movs	r1, #3
 8018e8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8018e90:	4a0b      	ldr	r2, [pc, #44]	; (8018ec0 <8495929e13f55eda4e8148e511dfd6898419e338+0xa8>)
 8018e92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e96:	f7f7 fbcd 	bl	8010634 <LOGGER_PrintLine>
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	b004      	add	sp, #16
 8018e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ea2:	f7ff be5f 	b.w	8018b64 <4f4dc29a98d88a83f2cd0a43b93264ecdaee8897>
 8018ea6:	bf00      	nop
 8018ea8:	08021a57 	.word	0x08021a57
 8018eac:	08021ab8 	.word	0x08021ab8
 8018eb0:	08018b65 	.word	0x08018b65
 8018eb4:	08018e19 	.word	0x08018e19
 8018eb8:	01312d00 	.word	0x01312d00
 8018ebc:	08021ad6 	.word	0x08021ad6
 8018ec0:	08021af4 	.word	0x08021af4

08018ec4 <cb684a375f86ba40b2b36632ce4bd2a58554e76c>:
 8018ec4:	b538      	push	{r3, r4, r5, lr}
 8018ec6:	4b35      	ldr	r3, [pc, #212]	; (8018f9c <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xd8>)
 8018ec8:	2001      	movs	r0, #1
 8018eca:	681c      	ldr	r4, [r3, #0]
 8018ecc:	f7f5 fd16 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8018ed0:	2500      	movs	r5, #0
 8018ed2:	f884 0310 	strb.w	r0, [r4, #784]	; 0x310
 8018ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018eda:	f8a4 030e 	strh.w	r0, [r4, #782]	; 0x30e
 8018ede:	f884 5311 	strb.w	r5, [r4, #785]	; 0x311
 8018ee2:	f7ff fd0d 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8018ee6:	f7ff fd13 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8018eea:	f7ff fd1f 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 8018eee:	f243 3388 	movw	r3, #13192	; 0x3388
 8018ef2:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8018ef6:	2210      	movs	r2, #16
 8018ef8:	4629      	mov	r1, r5
 8018efa:	f8a4 5270 	strh.w	r5, [r4, #624]	; 0x270
 8018efe:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8018f02:	f003 f851 	bl	801bfa8 <memset>
 8018f06:	4b26      	ldr	r3, [pc, #152]	; (8018fa0 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xdc>)
 8018f08:	f504 722e 	add.w	r2, r4, #696	; 0x2b8
 8018f0c:	f103 0110 	add.w	r1, r3, #16
 8018f10:	f853 0b04 	ldr.w	r0, [r3], #4
 8018f14:	f842 0b04 	str.w	r0, [r2], #4
 8018f18:	428b      	cmp	r3, r1
 8018f1a:	d1f9      	bne.n	8018f10 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0x4c>
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	7013      	strb	r3, [r2, #0]
 8018f20:	2001      	movs	r0, #1
 8018f22:	f7f5 fceb 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8018f26:	4a1f      	ldr	r2, [pc, #124]	; (8018fa4 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe0>)
 8018f28:	f884 02d0 	strb.w	r0, [r4, #720]	; 0x2d0
 8018f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f30:	e9c4 23a2 	strd	r2, r3, [r4, #648]	; 0x288
 8018f34:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
 8018f38:	4b1b      	ldr	r3, [pc, #108]	; (8018fa8 <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe4>)
 8018f3a:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
 8018f3e:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8018f42:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
 8018f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018f4a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8018f4e:	2500      	movs	r5, #0
 8018f50:	e9c4 13ac 	strd	r1, r3, [r4, #688]	; 0x2b0
 8018f54:	23c0      	movs	r3, #192	; 0xc0
 8018f56:	2210      	movs	r2, #16
 8018f58:	4629      	mov	r1, r5
 8018f5a:	f8a4 32d2 	strh.w	r3, [r4, #722]	; 0x2d2
 8018f5e:	f884 52d1 	strb.w	r5, [r4, #721]	; 0x2d1
 8018f62:	f884 52d4 	strb.w	r5, [r4, #724]	; 0x2d4
 8018f66:	f204 20d5 	addw	r0, r4, #725	; 0x2d5
 8018f6a:	f003 f81d 	bl	801bfa8 <memset>
 8018f6e:	2306      	movs	r3, #6
 8018f70:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
 8018f74:	4b0d      	ldr	r3, [pc, #52]	; (8018fac <cb684a375f86ba40b2b36632ce4bd2a58554e76c+0xe8>)
 8018f76:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8018f7a:	f884 52e7 	strb.w	r5, [r4, #743]	; 0x2e7
 8018f7e:	f8a4 52ec 	strh.w	r5, [r4, #748]	; 0x2ec
 8018f82:	f884 52ee 	strb.w	r5, [r4, #750]	; 0x2ee
 8018f86:	2001      	movs	r0, #1
 8018f88:	f7f5 fcb8 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8018f8c:	f884 02fc 	strb.w	r0, [r4, #764]	; 0x2fc
 8018f90:	2001      	movs	r0, #1
 8018f92:	f7f5 fcb3 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8018f96:	f884 0305 	strb.w	r0, [r4, #773]	; 0x305
 8018f9a:	bd38      	pop	{r3, r4, r5, pc}
 8018f9c:	20000040 	.word	0x20000040
 8018fa0:	0801eec9 	.word	0x0801eec9
 8018fa4:	60401e08 	.word	0x60401e08
 8018fa8:	08000e04 	.word	0x08000e04
 8018fac:	05aa0040 	.word	0x05aa0040

08018fb0 <a60e70bd13e8775612e7fe5ae94a36c965317289>:
 8018fb0:	b507      	push	{r0, r1, r2, lr}
 8018fb2:	4b09      	ldr	r3, [pc, #36]	; (8018fd8 <a60e70bd13e8775612e7fe5ae94a36c965317289+0x28>)
 8018fb4:	4a09      	ldr	r2, [pc, #36]	; (8018fdc <a60e70bd13e8775612e7fe5ae94a36c965317289+0x2c>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	6912      	ldr	r2, [r2, #16]
 8018fba:	f893 02d0 	ldrb.w	r0, [r3, #720]	; 0x2d0
 8018fbe:	210d      	movs	r1, #13
 8018fc0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	434a      	muls	r2, r1
 8018fc8:	4b05      	ldr	r3, [pc, #20]	; (8018fe0 <a60e70bd13e8775612e7fe5ae94a36c965317289+0x30>)
 8018fca:	2100      	movs	r1, #0
 8018fcc:	f7f5 fda6 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8018fd0:	b003      	add	sp, #12
 8018fd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fd6:	bf00      	nop
 8018fd8:	20000040 	.word	0x20000040
 8018fdc:	0801f014 	.word	0x0801f014
 8018fe0:	080191f5 	.word	0x080191f5

08018fe4 <14e0e80443fa04d4f8b6b44eccb243ea385eea36>:
 8018fe4:	4b02      	ldr	r3, [pc, #8]	; (8018ff0 <14e0e80443fa04d4f8b6b44eccb243ea385eea36+0xc>)
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	f893 02d0 	ldrb.w	r0, [r3, #720]	; 0x2d0
 8018fec:	f7f5 bda8 	b.w	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8018ff0:	20000040 	.word	0x20000040

08018ff4 <bc7077241f0f6c26eafbf9350b96f546688ad609>:
 8018ff4:	4b02      	ldr	r3, [pc, #8]	; (8019000 <bc7077241f0f6c26eafbf9350b96f546688ad609+0xc>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	f893 02d1 	ldrb.w	r0, [r3, #721]	; 0x2d1
 8018ffc:	4770      	bx	lr
 8018ffe:	bf00      	nop
 8019000:	20000040 	.word	0x20000040

08019004 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0>:
 8019004:	b510      	push	{r4, lr}
 8019006:	4a08      	ldr	r2, [pc, #32]	; (8019028 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x24>)
 8019008:	6812      	ldr	r2, [r2, #0]
 801900a:	4603      	mov	r3, r0
 801900c:	f892 0311 	ldrb.w	r0, [r2, #785]	; 0x311
 8019010:	b148      	cbz	r0, 8019026 <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x22>
 8019012:	f202 21d5 	addw	r1, r2, #725	; 0x2d5
 8019016:	f202 22e5 	addw	r2, r2, #741	; 0x2e5
 801901a:	f851 4b04 	ldr.w	r4, [r1], #4
 801901e:	f843 4b04 	str.w	r4, [r3], #4
 8019022:	4291      	cmp	r1, r2
 8019024:	d1f9      	bne.n	801901a <b748bf3c91f2eb5a7566fa1180a59e6ff18326d0+0x16>
 8019026:	bd10      	pop	{r4, pc}
 8019028:	20000040 	.word	0x20000040

0801902c <c56d874196d9f33fea409aab4115507f6cab3a7f>:
 801902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019030:	4b33      	ldr	r3, [pc, #204]	; (8019100 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd4>)
 8019032:	681f      	ldr	r7, [r3, #0]
 8019034:	2373      	movs	r3, #115	; 0x73
 8019036:	7043      	strb	r3, [r0, #1]
 8019038:	7803      	ldrb	r3, [r0, #0]
 801903a:	2b73      	cmp	r3, #115	; 0x73
 801903c:	b088      	sub	sp, #32
 801903e:	4605      	mov	r5, r0
 8019040:	4688      	mov	r8, r1
 8019042:	d009      	beq.n	8019058 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x2c>
 8019044:	2303      	movs	r3, #3
 8019046:	9306      	str	r3, [sp, #24]
 8019048:	4b2e      	ldr	r3, [pc, #184]	; (8019104 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd8>)
 801904a:	9307      	str	r3, [sp, #28]
 801904c:	ab08      	add	r3, sp, #32
 801904e:	e913 0003 	ldmdb	r3, {r0, r1}
 8019052:	4a2d      	ldr	r2, [pc, #180]	; (8019108 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xdc>)
 8019054:	f7f7 faee 	bl	8010634 <LOGGER_PrintLine>
 8019058:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801905c:	42ab      	cmp	r3, r5
 801905e:	d108      	bne.n	8019072 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x46>
 8019060:	2300      	movs	r3, #0
 8019062:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8019066:	4628      	mov	r0, r5
 8019068:	b008      	add	sp, #32
 801906a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801906e:	f7f4 bec1 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8019072:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8019076:	4e23      	ldr	r6, [pc, #140]	; (8019104 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xd8>)
 8019078:	42ab      	cmp	r3, r5
 801907a:	ac06      	add	r4, sp, #24
 801907c:	d113      	bne.n	80190a6 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x7a>
 801907e:	2300      	movs	r3, #0
 8019080:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8019084:	f1b8 0f00 	cmp.w	r8, #0
 8019088:	d008      	beq.n	801909c <c56d874196d9f33fea409aab4115507f6cab3a7f+0x70>
 801908a:	2305      	movs	r3, #5
 801908c:	e9cd 3606 	strd	r3, r6, [sp, #24]
 8019090:	4a1e      	ldr	r2, [pc, #120]	; (801910c <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe0>)
 8019092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019096:	f7f7 facd 	bl	8010634 <LOGGER_PrintLine>
 801909a:	e7e4      	b.n	8019066 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x3a>
 801909c:	2303      	movs	r3, #3
 801909e:	e9cd 3606 	strd	r3, r6, [sp, #24]
 80190a2:	4a1b      	ldr	r2, [pc, #108]	; (8019110 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe4>)
 80190a4:	e7f5      	b.n	8019092 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x66>
 80190a6:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 80190aa:	42ab      	cmp	r3, r5
 80190ac:	d122      	bne.n	80190f4 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xc8>
 80190ae:	2000      	movs	r0, #0
 80190b0:	a904      	add	r1, sp, #16
 80190b2:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80190b6:	f7f3 fed1 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80190ba:	2208      	movs	r2, #8
 80190bc:	eb0d 0002 	add.w	r0, sp, r2
 80190c0:	a904      	add	r1, sp, #16
 80190c2:	f7ff fc13 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80190c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80190ca:	f1b8 0f00 	cmp.w	r8, #0
 80190ce:	d00a      	beq.n	80190e6 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xba>
 80190d0:	2105      	movs	r1, #5
 80190d2:	e9cd 1606 	strd	r1, r6, [sp, #24]
 80190d6:	e9cd 2300 	strd	r2, r3, [sp]
 80190da:	4a0e      	ldr	r2, [pc, #56]	; (8019114 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xe8>)
 80190dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80190e0:	f7f7 faa8 	bl	8010634 <LOGGER_PrintLine>
 80190e4:	e7bf      	b.n	8019066 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x3a>
 80190e6:	2104      	movs	r1, #4
 80190e8:	e9cd 2300 	strd	r2, r3, [sp]
 80190ec:	e9cd 1606 	strd	r1, r6, [sp, #24]
 80190f0:	4a09      	ldr	r2, [pc, #36]	; (8019118 <c56d874196d9f33fea409aab4115507f6cab3a7f+0xec>)
 80190f2:	e7f3      	b.n	80190dc <c56d874196d9f33fea409aab4115507f6cab3a7f+0xb0>
 80190f4:	2305      	movs	r3, #5
 80190f6:	e9cd 3606 	strd	r3, r6, [sp, #24]
 80190fa:	4a08      	ldr	r2, [pc, #32]	; (801911c <c56d874196d9f33fea409aab4115507f6cab3a7f+0xf0>)
 80190fc:	e7c9      	b.n	8019092 <c56d874196d9f33fea409aab4115507f6cab3a7f+0x66>
 80190fe:	bf00      	nop
 8019100:	20000040 	.word	0x20000040
 8019104:	08021a57 	.word	0x08021a57
 8019108:	0801f776 	.word	0x0801f776
 801910c:	08021b2a 	.word	0x08021b2a
 8019110:	08021b45 	.word	0x08021b45
 8019114:	08021b5d 	.word	0x08021b5d
 8019118:	08021b83 	.word	0x08021b83
 801911c:	08021ba6 	.word	0x08021ba6

08019120 <93f4deb1287f872116dccf0c4dae004ac9b29b84>:
 8019120:	4b02      	ldr	r3, [pc, #8]	; (801912c <93f4deb1287f872116dccf0c4dae004ac9b29b84+0xc>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	f8b3 030c 	ldrh.w	r0, [r3, #780]	; 0x30c
 8019128:	f001 b849 	b.w	801a1be <7a609a09e67535970a8503dff96b9de207d8fd88>
 801912c:	20000040 	.word	0x20000040

08019130 <eada7656be7f8681f934187ead57a12001632399>:
 8019130:	4b02      	ldr	r3, [pc, #8]	; (801913c <eada7656be7f8681f934187ead57a12001632399+0xc>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	f8b3 030c 	ldrh.w	r0, [r3, #780]	; 0x30c
 8019138:	4770      	bx	lr
 801913a:	bf00      	nop
 801913c:	20000040 	.word	0x20000040

08019140 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>:
 8019140:	b510      	push	{r4, lr}
 8019142:	4b23      	ldr	r3, [pc, #140]	; (80191d0 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x90>)
 8019144:	b088      	sub	sp, #32
 8019146:	681c      	ldr	r4, [r3, #0]
 8019148:	f7f3 fa60 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 801914c:	2800      	cmp	r0, #0
 801914e:	d03b      	beq.n	80191c8 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x88>
 8019150:	f001 f832 	bl	801a1b8 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 8019154:	f7ff fbd4 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8019158:	2073      	movs	r0, #115	; 0x73
 801915a:	f7f4 fcfd 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 801915e:	f7ff fbd7 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8019162:	f7ff fbe3 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 8019166:	2210      	movs	r2, #16
 8019168:	2100      	movs	r1, #0
 801916a:	f10d 000d 	add.w	r0, sp, #13
 801916e:	f002 ff1b 	bl	801bfa8 <memset>
 8019172:	2302      	movs	r3, #2
 8019174:	f88d 300c 	strb.w	r3, [sp, #12]
 8019178:	f894 32ef 	ldrb.w	r3, [r4, #751]	; 0x2ef
 801917c:	b123      	cbz	r3, 8019188 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x48>
 801917e:	2300      	movs	r3, #0
 8019180:	f884 32ef 	strb.w	r3, [r4, #751]	; 0x2ef
 8019184:	f001 fb80 	bl	801a888 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc>
 8019188:	f10d 010d 	add.w	r1, sp, #13
 801918c:	f10d 0003 	add.w	r0, sp, #3
 8019190:	f7f3 fe64 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019194:	b198      	cbz	r0, 80191be <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x7e>
 8019196:	2304      	movs	r3, #4
 8019198:	9301      	str	r3, [sp, #4]
 801919a:	4b0e      	ldr	r3, [pc, #56]	; (80191d4 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x94>)
 801919c:	4a0e      	ldr	r2, [pc, #56]	; (80191d8 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x98>)
 801919e:	9302      	str	r3, [sp, #8]
 80191a0:	4619      	mov	r1, r3
 80191a2:	2004      	movs	r0, #4
 80191a4:	f7f7 fa46 	bl	8010634 <LOGGER_PrintLine>
 80191a8:	f7f3 fe32 	bl	800ce10 <a1f453367df5fb7326959ac01438704c8522c5f4>
 80191ac:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80191b0:	f7f4 f82c 	bl	800d20c <fe38e6e5657dc5f9f46adbfbc4370c9f738626b5>
 80191b4:	2100      	movs	r1, #0
 80191b6:	aa03      	add	r2, sp, #12
 80191b8:	4608      	mov	r0, r1
 80191ba:	f7fa ff4f 	bl	801405c <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>
 80191be:	2300      	movs	r3, #0
 80191c0:	f884 3311 	strb.w	r3, [r4, #785]	; 0x311
 80191c4:	b008      	add	sp, #32
 80191c6:	bd10      	pop	{r4, pc}
 80191c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80191cc:	e7c2      	b.n	8019154 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b+0x14>
 80191ce:	bf00      	nop
 80191d0:	20000040 	.word	0x20000040
 80191d4:	08021a57 	.word	0x08021a57
 80191d8:	08021bba 	.word	0x08021bba

080191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>:
 80191dc:	b508      	push	{r3, lr}
 80191de:	f7f3 fa15 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80191e2:	b918      	cbnz	r0, 80191ec <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2+0x10>
 80191e4:	4b02      	ldr	r3, [pc, #8]	; (80191f0 <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2+0x14>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f893 02f1 	ldrb.w	r0, [r3, #753]	; 0x2f1
 80191ec:	bd08      	pop	{r3, pc}
 80191ee:	bf00      	nop
 80191f0:	20000040 	.word	0x20000040

080191f4 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27>:
 80191f4:	b530      	push	{r4, r5, lr}
 80191f6:	b087      	sub	sp, #28
 80191f8:	4605      	mov	r5, r0
 80191fa:	f7f3 fa07 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80191fe:	4604      	mov	r4, r0
 8019200:	2800      	cmp	r0, #0
 8019202:	d134      	bne.n	801926e <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x7a>
 8019204:	4601      	mov	r1, r0
 8019206:	2210      	movs	r2, #16
 8019208:	f10d 0005 	add.w	r0, sp, #5
 801920c:	f002 fecc 	bl	801bfa8 <memset>
 8019210:	2302      	movs	r3, #2
 8019212:	f88d 3004 	strb.w	r3, [sp, #4]
 8019216:	f7fa f88f 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 801921a:	b940      	cbnz	r0, 801922e <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x3a>
 801921c:	2073      	movs	r0, #115	; 0x73
 801921e:	f7f4 fc9b 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8019222:	f7ff fb75 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 8019226:	f7ff fb81 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 801922a:	b007      	add	sp, #28
 801922c:	bd30      	pop	{r4, r5, pc}
 801922e:	4b1c      	ldr	r3, [pc, #112]	; (80192a0 <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0xac>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8019236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801923a:	429a      	cmp	r2, r3
 801923c:	d0ee      	beq.n	801921c <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 801923e:	f10d 0105 	add.w	r1, sp, #5
 8019242:	4620      	mov	r0, r4
 8019244:	f7f3 fe0a 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019248:	2800      	cmp	r0, #0
 801924a:	d0e7      	beq.n	801921c <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 801924c:	a801      	add	r0, sp, #4
 801924e:	f7fb fa75 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8019252:	2800      	cmp	r0, #0
 8019254:	d0e2      	beq.n	801921c <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 8019256:	f10d 0105 	add.w	r1, sp, #5
 801925a:	4620      	mov	r0, r4
 801925c:	f7f3 fdfe 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019260:	2800      	cmp	r0, #0
 8019262:	d0db      	beq.n	801921c <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 8019264:	a801      	add	r0, sp, #4
 8019266:	f7fb fa69 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 801926a:	2800      	cmp	r0, #0
 801926c:	d0d6      	beq.n	801921c <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x28>
 801926e:	f7f5 fcc7 	bl	800ec00 <570d8a765a6a38e2a02d25f1ad3297e0c6b6f6e8>
 8019272:	4604      	mov	r4, r0
 8019274:	f7f3 fabc 	bl	800c7f0 <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 8019278:	2306      	movs	r3, #6
 801927a:	fb00 3303 	mla	r3, r0, r3, r3
 801927e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019282:	fbb2 f3f3 	udiv	r3, r2, r3
 8019286:	429c      	cmp	r4, r3
 8019288:	dacf      	bge.n	801922a <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x36>
 801928a:	f7ff ffa7 	bl	80191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 801928e:	2800      	cmp	r0, #0
 8019290:	d0cb      	beq.n	801922a <47b62e5fa1fbf3d47dc80074ea2b6314e74a7a27+0x36>
 8019292:	4628      	mov	r0, r5
 8019294:	b007      	add	sp, #28
 8019296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801929a:	f7ff bb5d 	b.w	8018958 <cef630f5a74a35314667ebee3f885b52bc89b138>
 801929e:	bf00      	nop
 80192a0:	20000040 	.word	0x20000040

080192a4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>:
 80192a4:	b513      	push	{r0, r1, r4, lr}
 80192a6:	4b10      	ldr	r3, [pc, #64]	; (80192e8 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x44>)
 80192a8:	681c      	ldr	r4, [r3, #0]
 80192aa:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 80192ae:	f7f5 fc7d 	bl	800ebac <56445be374e93738432324b7e0ececbd8047647a>
 80192b2:	4601      	mov	r1, r0
 80192b4:	b998      	cbnz	r0, 80192de <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3a>
 80192b6:	f7f3 fdd1 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 80192ba:	b990      	cbnz	r0, 80192e2 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3e>
 80192bc:	f7ff ff8e 	bl	80191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 80192c0:	b978      	cbnz	r0, 80192e2 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x3e>
 80192c2:	490a      	ldr	r1, [pc, #40]	; (80192ec <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x48>)
 80192c4:	4608      	mov	r0, r1
 80192c6:	f7f5 fce1 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 80192ca:	f504 741c 	add.w	r4, r4, #624	; 0x270
 80192ce:	4602      	mov	r2, r0
 80192d0:	4b07      	ldr	r3, [pc, #28]	; (80192f0 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x4c>)
 80192d2:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 80192d6:	9400      	str	r4, [sp, #0]
 80192d8:	2101      	movs	r1, #1
 80192da:	f7f5 fc1f 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 80192de:	b002      	add	sp, #8
 80192e0:	bd10      	pop	{r4, pc}
 80192e2:	4904      	ldr	r1, [pc, #16]	; (80192f4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x50>)
 80192e4:	e7ee      	b.n	80192c4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437+0x20>
 80192e6:	bf00      	nop
 80192e8:	20000040 	.word	0x20000040
 80192ec:	00a7d8c0 	.word	0x00a7d8c0
 80192f0:	080195b9 	.word	0x080195b9
 80192f4:	00989680 	.word	0x00989680

080192f8 <2286051897e6bbb22857e9c9a8dc75ab84e05da9>:
 80192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192fc:	4980      	ldr	r1, [pc, #512]	; (8019500 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x208>)
 80192fe:	f890 4095 	ldrb.w	r4, [r0, #149]	; 0x95
 8019302:	b08a      	sub	sp, #40	; 0x28
 8019304:	4605      	mov	r5, r0
 8019306:	487f      	ldr	r0, [pc, #508]	; (8019504 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x20c>)
 8019308:	f7f5 fcc0 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 801930c:	4b7e      	ldr	r3, [pc, #504]	; (8019508 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x210>)
 801930e:	9500      	str	r5, [sp, #0]
 8019310:	4602      	mov	r2, r0
 8019312:	2101      	movs	r1, #1
 8019314:	4620      	mov	r0, r4
 8019316:	f7f5 fc01 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 801931a:	f7fa f80d 	bl	8013338 <60f007314f15c808f67a076d33295282887c81e9>
 801931e:	2800      	cmp	r0, #0
 8019320:	f000 80e0 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8019324:	f7f3 f972 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8019328:	4606      	mov	r6, r0
 801932a:	2800      	cmp	r0, #0
 801932c:	f040 80da 	bne.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8019330:	4b76      	ldr	r3, [pc, #472]	; (801950c <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x214>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	f8b3 230c 	ldrh.w	r2, [r3, #780]	; 0x30c
 8019338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801933c:	429a      	cmp	r2, r3
 801933e:	f000 80d1 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8019342:	f7ff ff4b 	bl	80191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 8019346:	2800      	cmp	r0, #0
 8019348:	f000 80cc 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801934c:	f000 fec8 	bl	801a0e0 <bdffef4226ee0110f60b8de23959aef3caa4ba4a>
 8019350:	4607      	mov	r7, r0
 8019352:	2800      	cmp	r0, #0
 8019354:	f000 80c6 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8019358:	4631      	mov	r1, r6
 801935a:	2210      	movs	r2, #16
 801935c:	f10d 0015 	add.w	r0, sp, #21
 8019360:	f002 fe22 	bl	801bfa8 <memset>
 8019364:	2302      	movs	r3, #2
 8019366:	f10d 0115 	add.w	r1, sp, #21
 801936a:	4630      	mov	r0, r6
 801936c:	f88d 3014 	strb.w	r3, [sp, #20]
 8019370:	f7f3 fd74 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019374:	2800      	cmp	r0, #0
 8019376:	f000 80b5 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 801937a:	a805      	add	r0, sp, #20
 801937c:	f7fb f9de 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 8019380:	2800      	cmp	r0, #0
 8019382:	f000 80af 	beq.w	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 8019386:	2073      	movs	r0, #115	; 0x73
 8019388:	f7f4 fc76 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801938c:	4604      	mov	r4, r0
 801938e:	b948      	cbnz	r0, 80193a4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xac>
 8019390:	2303      	movs	r3, #3
 8019392:	9303      	str	r3, [sp, #12]
 8019394:	4b5e      	ldr	r3, [pc, #376]	; (8019510 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x218>)
 8019396:	4a5f      	ldr	r2, [pc, #380]	; (8019514 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x21c>)
 8019398:	9304      	str	r3, [sp, #16]
 801939a:	4619      	mov	r1, r3
 801939c:	2003      	movs	r0, #3
 801939e:	f7f7 f949 	bl	8010634 <LOGGER_PrintLine>
 80193a2:	e09f      	b.n	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 80193a4:	f247 3373 	movw	r3, #29555	; 0x7373
 80193a8:	8003      	strh	r3, [r0, #0]
 80193aa:	233a      	movs	r3, #58	; 0x3a
 80193ac:	7403      	strb	r3, [r0, #16]
 80193ae:	239b      	movs	r3, #155	; 0x9b
 80193b0:	8243      	strh	r3, [r0, #18]
 80193b2:	2303      	movs	r3, #3
 80193b4:	7743      	strb	r3, [r0, #29]
 80193b6:	f7f4 fb81 	bl	800dabc <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 80193ba:	6803      	ldr	r3, [r0, #0]
 80193bc:	f8c4 301e 	str.w	r3, [r4, #30]
 80193c0:	6843      	ldr	r3, [r0, #4]
 80193c2:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
 80193c6:	f8dd 3015 	ldr.w	r3, [sp, #21]
 80193ca:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 80193ce:	f8dd 3019 	ldr.w	r3, [sp, #25]
 80193d2:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 80193d6:	a902      	add	r1, sp, #8
 80193d8:	4630      	mov	r0, r6
 80193da:	f000 fea5 	bl	801a128 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac>
 80193de:	b1e0      	cbz	r0, 801941a <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x122>
 80193e0:	2202      	movs	r2, #2
 80193e2:	a902      	add	r1, sp, #8
 80193e4:	a803      	add	r0, sp, #12
 80193e6:	f7ff fa81 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 80193ea:	2102      	movs	r1, #2
 80193ec:	4620      	mov	r0, r4
 80193ee:	f001 fd21 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 80193f2:	6863      	ldr	r3, [r4, #4]
 80193f4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80193f8:	801a      	strh	r2, [r3, #0]
 80193fa:	2305      	movs	r3, #5
 80193fc:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8019400:	2104      	movs	r1, #4
 8019402:	2310      	movs	r3, #16
 8019404:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
 8019408:	f8a5 107c 	strh.w	r1, [r5, #124]	; 0x7c
 801940c:	4620      	mov	r0, r4
 801940e:	f001 fd11 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8019412:	6863      	ldr	r3, [r4, #4]
 8019414:	f8d5 207b 	ldr.w	r2, [r5, #123]	; 0x7b
 8019418:	601a      	str	r2, [r3, #0]
 801941a:	3601      	adds	r6, #1
 801941c:	42b7      	cmp	r7, r6
 801941e:	d1da      	bne.n	80193d6 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xde>
 8019420:	2101      	movs	r1, #1
 8019422:	4620      	mov	r0, r4
 8019424:	f001 fd06 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8019428:	6863      	ldr	r3, [r4, #4]
 801942a:	2600      	movs	r6, #0
 801942c:	701e      	strb	r6, [r3, #0]
 801942e:	2101      	movs	r1, #1
 8019430:	4620      	mov	r0, r4
 8019432:	f001 fcff 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8019436:	6863      	ldr	r3, [r4, #4]
 8019438:	2101      	movs	r1, #1
 801943a:	701e      	strb	r6, [r3, #0]
 801943c:	4620      	mov	r0, r4
 801943e:	f001 fcf9 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 8019442:	6863      	ldr	r3, [r4, #4]
 8019444:	2101      	movs	r1, #1
 8019446:	701e      	strb	r6, [r3, #0]
 8019448:	4620      	mov	r0, r4
 801944a:	f001 fcf3 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801944e:	6863      	ldr	r3, [r4, #4]
 8019450:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
 8019454:	701a      	strb	r2, [r3, #0]
 8019456:	2104      	movs	r1, #4
 8019458:	4620      	mov	r0, r4
 801945a:	f001 fceb 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801945e:	6863      	ldr	r3, [r4, #4]
 8019460:	8a62      	ldrh	r2, [r4, #18]
 8019462:	701a      	strb	r2, [r3, #0]
 8019464:	6863      	ldr	r3, [r4, #4]
 8019466:	f04f 0802 	mov.w	r8, #2
 801946a:	f883 8001 	strb.w	r8, [r3, #1]
 801946e:	6861      	ldr	r1, [r4, #4]
 8019470:	2005      	movs	r0, #5
 8019472:	eb01 0608 	add.w	r6, r1, r8
 8019476:	f7f3 f8d7 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801947a:	4607      	mov	r7, r0
 801947c:	4640      	mov	r0, r8
 801947e:	f7f3 f8d3 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8019482:	1c7a      	adds	r2, r7, #1
 8019484:	1c43      	adds	r3, r0, #1
 8019486:	4631      	mov	r1, r6
 8019488:	4620      	mov	r0, r4
 801948a:	f001 fd8f 	bl	801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 801948e:	4620      	mov	r0, r4
 8019490:	f7ff f915 	bl	80186be <966a9fb75e08bd6bd3b3054de298215c3cbec82e>
 8019494:	4f1e      	ldr	r7, [pc, #120]	; (8019510 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x218>)
 8019496:	ae03      	add	r6, sp, #12
 8019498:	b338      	cbz	r0, 80194ea <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1f2>
 801949a:	2305      	movs	r3, #5
 801949c:	e9cd 3703 	strd	r3, r7, [sp, #12]
 80194a0:	4a1d      	ldr	r2, [pc, #116]	; (8019518 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x220>)
 80194a2:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
 80194a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80194aa:	f7f7 f8c3 	bl	8010634 <LOGGER_PrintLine>
 80194ae:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 80194b2:	481a      	ldr	r0, [pc, #104]	; (801951c <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x224>)
 80194b4:	f895 4095 	ldrb.w	r4, [r5, #149]	; 0x95
 80194b8:	fa10 f103 	lsls.w	r1, r0, r3
 80194bc:	bf48      	it	mi
 80194be:	3103      	addmi	r1, #3
 80194c0:	1089      	asrs	r1, r1, #2
 80194c2:	4098      	lsls	r0, r3
 80194c4:	f7f5 fbe2 	bl	800ec8c <23673502809f5a9646d21283e7a04e0764f4d11d>
 80194c8:	4b0f      	ldr	r3, [pc, #60]	; (8019508 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x210>)
 80194ca:	9500      	str	r5, [sp, #0]
 80194cc:	4602      	mov	r2, r0
 80194ce:	2101      	movs	r1, #1
 80194d0:	4620      	mov	r0, r4
 80194d2:	f7f5 fb23 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 80194d6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 80194da:	2b05      	cmp	r3, #5
 80194dc:	d802      	bhi.n	80194e4 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x1ec>
 80194de:	3301      	adds	r3, #1
 80194e0:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
 80194e4:	b00a      	add	sp, #40	; 0x28
 80194e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ea:	4620      	mov	r0, r4
 80194ec:	f7f4 fc82 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 80194f0:	2304      	movs	r3, #4
 80194f2:	e9cd 3703 	strd	r3, r7, [sp, #12]
 80194f6:	4a0a      	ldr	r2, [pc, #40]	; (8019520 <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0x228>)
 80194f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80194fc:	e74f      	b.n	801939e <2286051897e6bbb22857e9c9a8dc75ab84e05da9+0xa6>
 80194fe:	bf00      	nop
 8019500:	01312d00 	.word	0x01312d00
 8019504:	00989680 	.word	0x00989680
 8019508:	080192f9 	.word	0x080192f9
 801950c:	20000040 	.word	0x20000040
 8019510:	08021a57 	.word	0x08021a57
 8019514:	0801fc42 	.word	0x0801fc42
 8019518:	08021bd4 	.word	0x08021bd4
 801951c:	01c9c380 	.word	0x01c9c380
 8019520:	08021be7 	.word	0x08021be7

08019524 <85bee7284ee25f7a29b50481cf48923ac2abd69d>:
 8019524:	b508      	push	{r3, lr}
 8019526:	f7ff f9f3 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 801952a:	f7ff f9ff 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 801952e:	f7ff fad7 	bl	8018ae0 <ddcc96d14128f39f258a026a92cbd4c2383286b1>
 8019532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019536:	f7ff baf1 	b.w	8018b1c <e1f51aec36766790a9d7657a41d61426b11f2b8a>

0801953a <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e>:
 801953a:	b508      	push	{r3, lr}
 801953c:	f7ff fe4e 	bl	80191dc <71fc6a01fbd1c77ffbfd7cfdab3a822a00183bc2>
 8019540:	b128      	cbz	r0, 801954e <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e+0x14>
 8019542:	f7ff facd 	bl	8018ae0 <ddcc96d14128f39f258a026a92cbd4c2383286b1>
 8019546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801954a:	f7ff bae7 	b.w	8018b1c <e1f51aec36766790a9d7657a41d61426b11f2b8a>
 801954e:	bd08      	pop	{r3, pc}

08019550 <5150c16bb7c98e5d77d974241410b468172cd080>:
 8019550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019552:	4b18      	ldr	r3, [pc, #96]	; (80195b4 <5150c16bb7c98e5d77d974241410b468172cd080+0x64>)
 8019554:	4606      	mov	r6, r0
 8019556:	681c      	ldr	r4, [r3, #0]
 8019558:	460d      	mov	r5, r1
 801955a:	f7f3 f857 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 801955e:	b1e8      	cbz	r0, 801959c <5150c16bb7c98e5d77d974241410b468172cd080+0x4c>
 8019560:	f000 fe2a 	bl	801a1b8 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 8019564:	f7ff f9cc 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8019568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801956c:	4630      	mov	r0, r6
 801956e:	f7f3 f9b1 	bl	800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8019572:	f7f3 fc4d 	bl	800ce10 <a1f453367df5fb7326959ac01438704c8522c5f4>
 8019576:	f7ff f9cb 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 801957a:	f7ff f9d7 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 801957e:	2073      	movs	r0, #115	; 0x73
 8019580:	f7f4 faea 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 8019584:	4629      	mov	r1, r5
 8019586:	4668      	mov	r0, sp
 8019588:	2208      	movs	r2, #8
 801958a:	f7ff f9af 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 801958e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019592:	b002      	add	sp, #8
 8019594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019598:	f001 ba44 	b.w	801aa24 <92a2aa0d77d83c323d033422c3070d3730d69fc2>
 801959c:	f8b4 430e 	ldrh.w	r4, [r4, #782]	; 0x30e
 80195a0:	f000 fe5e 	bl	801a260 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d>
 80195a4:	4420      	add	r0, r4
 80195a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80195aa:	bf2c      	ite	cs
 80195ac:	f64f 70ff 	movwcs	r0, #65535	; 0xffff
 80195b0:	b280      	uxthcc	r0, r0
 80195b2:	e7d7      	b.n	8019564 <5150c16bb7c98e5d77d974241410b468172cd080+0x14>
 80195b4:	20000040 	.word	0x20000040

080195b8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0>:
 80195b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195bc:	b0af      	sub	sp, #188	; 0xbc
 80195be:	4604      	mov	r4, r0
 80195c0:	f7fa fdf6 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 80195c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80195c6:	f7fb f8a3 	bl	8014710 <a332c320f50553856ddcee95ff765027b8f3e118>
 80195ca:	4605      	mov	r5, r0
 80195cc:	f7f3 f81e 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 80195d0:	4606      	mov	r6, r0
 80195d2:	b178      	cbz	r0, 80195f4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3c>
 80195d4:	2303      	movs	r3, #3
 80195d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80195d8:	4bb4      	ldr	r3, [pc, #720]	; (80198ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 80195da:	4ab5      	ldr	r2, [pc, #724]	; (80198b0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f8>)
 80195dc:	932a      	str	r3, [sp, #168]	; 0xa8
 80195de:	4619      	mov	r1, r3
 80195e0:	2003      	movs	r0, #3
 80195e2:	f7f7 f827 	bl	8010634 <LOGGER_PrintLine>
 80195e6:	f000 fde7 	bl	801a1b8 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 80195ea:	b02f      	add	sp, #188	; 0xbc
 80195ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	f7ff b986 	b.w	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 80195f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195f6:	1b5d      	subs	r5, r3, r5
 80195f8:	429d      	cmp	r5, r3
 80195fa:	bf28      	it	cs
 80195fc:	461d      	movcs	r5, r3
 80195fe:	4601      	mov	r1, r0
 8019600:	231e      	movs	r3, #30
 8019602:	2210      	movs	r2, #16
 8019604:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 8019608:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 801960c:	950c      	str	r5, [sp, #48]	; 0x30
 801960e:	f002 fccb 	bl	801bfa8 <memset>
 8019612:	2302      	movs	r3, #2
 8019614:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8019618:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 801961c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8019620:	f7f3 fc1c 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019624:	9009      	str	r0, [sp, #36]	; 0x24
 8019626:	2800      	cmp	r0, #0
 8019628:	f040 80bb 	bne.w	80197a2 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x1ea>
 801962c:	a814      	add	r0, sp, #80	; 0x50
 801962e:	f7f9 fe21 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8019632:	2301      	movs	r3, #1
 8019634:	930e      	str	r3, [sp, #56]	; 0x38
 8019636:	2300      	movs	r3, #0
 8019638:	930d      	str	r3, [sp, #52]	; 0x34
 801963a:	f04f 0801 	mov.w	r8, #1
 801963e:	930a      	str	r3, [sp, #40]	; 0x28
 8019640:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8019644:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8019648:	4638      	mov	r0, r7
 801964a:	f7f3 fbc9 	bl	800cde0 <f978182667c580e22e6ae7bda9ab6a3b6ebffcb1>
 801964e:	2800      	cmp	r0, #0
 8019650:	d075      	beq.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8019652:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8019656:	42bb      	cmp	r3, r7
 8019658:	d071      	beq.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801965a:	a914      	add	r1, sp, #80	; 0x50
 801965c:	4638      	mov	r0, r7
 801965e:	f7f3 fa0f 	bl	800ca80 <4f011439265b330ba2d9f164eb1f6389866b01df>
 8019662:	2800      	cmp	r0, #0
 8019664:	d16b      	bne.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8019666:	4638      	mov	r0, r7
 8019668:	f7f3 fe22 	bl	800d2b0 <5cf48605db24e77c7dc4310895ecb68238b276e7>
 801966c:	4601      	mov	r1, r0
 801966e:	2800      	cmp	r0, #0
 8019670:	d165      	bne.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8019672:	2210      	movs	r2, #16
 8019674:	f10d 00a5 	add.w	r0, sp, #165	; 0xa5
 8019678:	f002 fc96 	bl	801bfa8 <memset>
 801967c:	2302      	movs	r3, #2
 801967e:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 8019682:	4638      	mov	r0, r7
 8019684:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 8019688:	f7f3 fb88 	bl	800cd9c <b7be15738b198492e50cb8023d171fca112169af>
 801968c:	a829      	add	r0, sp, #164	; 0xa4
 801968e:	f7f3 fecf 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 8019692:	f000 fe0f 	bl	801a2b4 <TOPOLOGY_IsAcceptable>
 8019696:	900f      	str	r0, [sp, #60]	; 0x3c
 8019698:	2800      	cmp	r0, #0
 801969a:	d050      	beq.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801969c:	4638      	mov	r0, r7
 801969e:	f7f3 f8ff 	bl	800c8a0 <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 80196a2:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80196a6:	4558      	cmp	r0, fp
 80196a8:	4682      	mov	sl, r0
 80196aa:	d048      	beq.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 80196ac:	4639      	mov	r1, r7
 80196ae:	a818      	add	r0, sp, #96	; 0x60
 80196b0:	f7f3 f92a 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 80196b4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80196b8:	9311      	str	r3, [sp, #68]	; 0x44
 80196ba:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 80196be:	f99d 5064 	ldrsb.w	r5, [sp, #100]	; 0x64
 80196c2:	9310      	str	r3, [sp, #64]	; 0x40
 80196c4:	f7ec feba 	bl	800643c <EMBENET_RADIO_GetCapabilities>
 80196c8:	f990 301c 	ldrsb.w	r3, [r0, #28]
 80196cc:	42ab      	cmp	r3, r5
 80196ce:	dc36      	bgt.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 80196d0:	f7f9 fe02 	bl	80132d8 <430fd23aeea8952b7b416b6590815371f1106b85>
 80196d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196d6:	9001      	str	r0, [sp, #4]
 80196d8:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 80196dc:	9300      	str	r3, [sp, #0]
 80196de:	4628      	mov	r0, r5
 80196e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196e2:	f000 fd6f 	bl	801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80196e6:	eb00 050a 	add.w	r5, r0, sl
 80196ea:	455d      	cmp	r5, fp
 80196ec:	a922      	add	r1, sp, #136	; 0x88
 80196ee:	4638      	mov	r0, r7
 80196f0:	bf28      	it	cs
 80196f2:	465d      	movcs	r5, fp
 80196f4:	f7f3 fb52 	bl	800cd9c <b7be15738b198492e50cb8023d171fca112169af>
 80196f8:	a822      	add	r0, sp, #136	; 0x88
 80196fa:	f7fa fcd7 	bl	80140ac <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>
 80196fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019700:	4682      	mov	sl, r0
 8019702:	2800      	cmp	r0, #0
 8019704:	f000 80b4 	beq.w	8019870 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2b8>
 8019708:	b153      	cbz	r3, 8019720 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x168>
 801970a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801970c:	b1bb      	cbz	r3, 801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801970e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8019712:	b92b      	cbnz	r3, 8019720 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x168>
 8019714:	4b67      	ldr	r3, [pc, #412]	; (80198b4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 801971c:	429d      	cmp	r5, r3
 801971e:	d20e      	bcs.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8019720:	f1b8 0f00 	cmp.w	r8, #0
 8019724:	f000 80bc 	beq.w	80198a0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2e8>
 8019728:	b2ad      	uxth	r5, r5
 801972a:	454d      	cmp	r5, r9
 801972c:	46c2      	mov	sl, r8
 801972e:	d302      	bcc.n	8019736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 8019730:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019732:	464d      	mov	r5, r9
 8019734:	46b0      	mov	r8, r6
 8019736:	4646      	mov	r6, r8
 8019738:	970a      	str	r7, [sp, #40]	; 0x28
 801973a:	46a9      	mov	r9, r5
 801973c:	46d0      	mov	r8, sl
 801973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019740:	3301      	adds	r3, #1
 8019742:	2b1e      	cmp	r3, #30
 8019744:	930d      	str	r3, [sp, #52]	; 0x34
 8019746:	f47f af7d 	bne.w	8019644 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x8c>
 801974a:	2210      	movs	r2, #16
 801974c:	2100      	movs	r1, #0
 801974e:	f10d 00a5 	add.w	r0, sp, #165	; 0xa5
 8019752:	f002 fc29 	bl	801bfa8 <memset>
 8019756:	2302      	movs	r3, #2
 8019758:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
 801975c:	2e00      	cmp	r6, #0
 801975e:	f040 80b5 	bne.w	80198cc <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x314>
 8019762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019764:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8019768:	2a00      	cmp	r2, #0
 801976a:	f040 815f 	bne.w	8019a2c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x474>
 801976e:	2b00      	cmp	r3, #0
 8019770:	f000 80f9 	beq.w	8019966 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 8019774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019776:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 801977a:	2303      	movs	r3, #3
 801977c:	9322      	str	r3, [sp, #136]	; 0x88
 801977e:	4b4b      	ldr	r3, [pc, #300]	; (80198ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 8019780:	4a4d      	ldr	r2, [pc, #308]	; (80198b8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x300>)
 8019782:	9323      	str	r3, [sp, #140]	; 0x8c
 8019784:	4619      	mov	r1, r3
 8019786:	2003      	movs	r0, #3
 8019788:	f7f6 ff54 	bl	8010634 <LOGGER_PrintLine>
 801978c:	484b      	ldr	r0, [pc, #300]	; (80198bc <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x304>)
 801978e:	2204      	movs	r2, #4
 8019790:	4621      	mov	r1, r4
 8019792:	f7f6 f8c1 	bl	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8019796:	f7ff fcd3 	bl	8019140 <6aa680b4ccb16282c0a541f7e0888d19c84c3a6b>
 801979a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801979c:	aa24      	add	r2, sp, #144	; 0x90
 801979e:	4608      	mov	r0, r1
 80197a0:	e0df      	b.n	8019962 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3aa>
 80197a2:	f10d 0091 	add.w	r0, sp, #145	; 0x91
 80197a6:	f7fa fc81 	bl	80140ac <43b9c1e675e1227dd4f7f3a802ed56f913e7161a>
 80197aa:	900e      	str	r0, [sp, #56]	; 0x38
 80197ac:	a814      	add	r0, sp, #80	; 0x50
 80197ae:	f7f9 fd61 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 80197b2:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80197b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80197b8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80197bc:	a816      	add	r0, sp, #88	; 0x58
 80197be:	f7f3 f8fd 	bl	800c9bc <7df3ba357f7f62320ead08135508bf101de27d80>
 80197c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197c4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80197c8:	1aff      	subs	r7, r7, r3
 80197ca:	eb65 0502 	sbc.w	r5, r5, r2
 80197ce:	4a3c      	ldr	r2, [pc, #240]	; (80198c0 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x308>)
 80197d0:	4b3c      	ldr	r3, [pc, #240]	; (80198c4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x30c>)
 80197d2:	6912      	ldr	r2, [r2, #16]
 80197d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80197d8:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80197dc:	42bb      	cmp	r3, r7
 80197de:	eb76 0505 	sbcs.w	r5, r6, r5
 80197e2:	d213      	bcs.n	801980c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x254>
 80197e4:	2303      	movs	r3, #3
 80197e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80197e8:	4b30      	ldr	r3, [pc, #192]	; (80198ac <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2f4>)
 80197ea:	4a37      	ldr	r2, [pc, #220]	; (80198c8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x310>)
 80197ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80197ee:	4619      	mov	r1, r3
 80197f0:	2003      	movs	r0, #3
 80197f2:	f7f6 ff1f 	bl	8010634 <LOGGER_PrintLine>
 80197f6:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 80197fa:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 80197fe:	f7ff fea7 	bl	8019550 <5150c16bb7c98e5d77d974241410b468172cd080>
 8019802:	2301      	movs	r3, #1
 8019804:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8019808:	9609      	str	r6, [sp, #36]	; 0x24
 801980a:	e714      	b.n	8019636 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 801980c:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8019810:	a818      	add	r0, sp, #96	; 0x60
 8019812:	f7f3 f879 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 8019816:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 801981a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801981e:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
 8019822:	f99d 7064 	ldrsb.w	r7, [sp, #100]	; 0x64
 8019826:	f7f3 f83b 	bl	800c8a0 <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 801982a:	4605      	mov	r5, r0
 801982c:	f7f9 fd54 	bl	80132d8 <430fd23aeea8952b7b416b6590815371f1106b85>
 8019830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019832:	9001      	str	r0, [sp, #4]
 8019834:	9300      	str	r3, [sp, #0]
 8019836:	4642      	mov	r2, r8
 8019838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801983a:	4649      	mov	r1, r9
 801983c:	4638      	mov	r0, r7
 801983e:	f000 fcc1 	bl	801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 8019842:	4428      	add	r0, r5
 8019844:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8019848:	d304      	bcc.n	8019854 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x29c>
 801984a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801984e:	f7ff f857 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8019852:	e6f0      	b.n	8019636 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 8019854:	b280      	uxth	r0, r0
 8019856:	f7ff f853 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 801985a:	4b16      	ldr	r3, [pc, #88]	; (80198b4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>)
 801985c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8019866:	429a      	cmp	r2, r3
 8019868:	bf88      	it	hi
 801986a:	f8a4 309e 	strhhi.w	r3, [r4, #158]	; 0x9e
 801986e:	e6e2      	b.n	8019636 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x7e>
 8019870:	b17b      	cbz	r3, 8019892 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 8019872:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8019876:	b963      	cbnz	r3, 8019892 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 8019878:	f8df b038 	ldr.w	fp, [pc, #56]	; 80198b4 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2fc>
 801987c:	f8db 3000 	ldr.w	r3, [fp]
 8019880:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8019884:	429d      	cmp	r5, r3
 8019886:	f4bf af5a 	bcs.w	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 801988a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801988c:	2b00      	cmp	r3, #0
 801988e:	f000 80dd 	beq.w	8019a4c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x494>
 8019892:	b2ad      	uxth	r5, r5
 8019894:	454d      	cmp	r5, r9
 8019896:	d306      	bcc.n	80198a6 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2ee>
 8019898:	f1b8 0f00 	cmp.w	r8, #0
 801989c:	f47f af4b 	bne.w	8019736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 80198a0:	f04f 0a00 	mov.w	sl, #0
 80198a4:	e744      	b.n	8019730 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x178>
 80198a6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80198aa:	e744      	b.n	8019736 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x17e>
 80198ac:	08021a57 	.word	0x08021a57
 80198b0:	08021c04 	.word	0x08021c04
 80198b4:	20000040 	.word	0x20000040
 80198b8:	08021cf6 	.word	0x08021cf6
 80198bc:	08018959 	.word	0x08018959
 80198c0:	0801f014 	.word	0x0801f014
 80198c4:	02aea540 	.word	0x02aea540
 80198c8:	08021c0e 	.word	0x08021c0e
 80198cc:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 80198d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198d2:	f7f3 fa63 	bl	800cd9c <b7be15738b198492e50cb8023d171fca112169af>
 80198d6:	4648      	mov	r0, r9
 80198d8:	f7ff f812 	bl	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 80198dc:	f7ff f818 	bl	8018910 <5d52bdabf8ecd6c8d7198566d11b639ed660a013>
 80198e0:	f7ff f824 	bl	801892c <43cc35f40acb52f42fa1199cee254d1023926eea>
 80198e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198e6:	f8a4 909e 	strh.w	r9, [r4, #158]	; 0x9e
 80198ea:	f7f3 fa99 	bl	800ce20 <bc730516ff4e3e92f0649500c5c053783837fa16>
 80198ee:	2073      	movs	r0, #115	; 0x73
 80198f0:	f7f4 f932 	bl	800db58 <f9d7d5c68ea55258d57b5d3bc3540348dc13b74e>
 80198f4:	a929      	add	r1, sp, #164	; 0xa4
 80198f6:	a824      	add	r0, sp, #144	; 0x90
 80198f8:	f7f4 fc36 	bl	800e168 <4c857b78cdc7cd5cc9a39e6ca4ea27a1fc7cf725>
 80198fc:	2208      	movs	r2, #8
 80198fe:	f10d 01a5 	add.w	r1, sp, #165	; 0xa5
 8019902:	a81e      	add	r0, sp, #120	; 0x78
 8019904:	f7fe fff2 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8019908:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 801990c:	4630      	mov	r0, r6
 801990e:	4639      	mov	r1, r7
 8019910:	f001 f87c 	bl	801aa0c <174d137b644ccd4ef57a02826061d132a3dec310>
 8019914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8019918:	980a      	ldr	r0, [sp, #40]	; 0x28
 801991a:	f7f3 f86d 	bl	800c9f8 <5004528a8ffa5581bbd161cf1057e8d5d3867843>
 801991e:	f7f6 fe63 	bl	80105e8 <LOGGER_StartSection>
 8019922:	2800      	cmp	r0, #0
 8019924:	d07d      	beq.n	8019a22 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x46a>
 8019926:	2305      	movs	r3, #5
 8019928:	9322      	str	r3, [sp, #136]	; 0x88
 801992a:	4b53      	ldr	r3, [pc, #332]	; (8019a78 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c0>)
 801992c:	9323      	str	r3, [sp, #140]	; 0x8c
 801992e:	4619      	mov	r1, r3
 8019930:	2005      	movs	r0, #5
 8019932:	f7f6 fe61 	bl	80105f8 <LOGGER_PrintHeader>
 8019936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019938:	b9d3      	cbnz	r3, 8019970 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3b8>
 801993a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 801993e:	b9bb      	cbnz	r3, 8019970 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3b8>
 8019940:	484e      	ldr	r0, [pc, #312]	; (8019a7c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c4>)
 8019942:	4632      	mov	r2, r6
 8019944:	463b      	mov	r3, r7
 8019946:	f7f6 fe3d 	bl	80105c4 <LOGGER_Print>
 801994a:	f7f6 fe33 	bl	80105b4 <LOGGER_PrintNL>
 801994e:	f7f6 fe51 	bl	80105f4 <LOGGER_EndSection>
 8019952:	2001      	movs	r0, #1
 8019954:	2300      	movs	r3, #0
 8019956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019958:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 801995c:	aa24      	add	r2, sp, #144	; 0x90
 801995e:	f000 0001 	and.w	r0, r0, #1
 8019962:	f7fa fb7b 	bl	801405c <4d4d07b4e30904d5f2361bdbdd317c9b751af65f>
 8019966:	f7ff fc9d 	bl	80192a4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>
 801996a:	b02f      	add	sp, #188	; 0xbc
 801996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019970:	f10d 0191 	add.w	r1, sp, #145	; 0x91
 8019974:	2208      	movs	r2, #8
 8019976:	a820      	add	r0, sp, #128	; 0x80
 8019978:	f7fe ffb8 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 801997c:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8019980:	e9cd 6700 	strd	r6, r7, [sp]
 8019984:	483e      	ldr	r0, [pc, #248]	; (8019a80 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c8>)
 8019986:	f7f6 fe1d 	bl	80105c4 <LOGGER_Print>
 801998a:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801998e:	a81a      	add	r0, sp, #104	; 0x68
 8019990:	f7f2 ffba 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 8019994:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8019998:	f8bd 806a 	ldrh.w	r8, [sp, #106]	; 0x6a
 801999c:	f99d 606c 	ldrsb.w	r6, [sp, #108]	; 0x6c
 80199a0:	f7f9 fc9a 	bl	80132d8 <430fd23aeea8952b7b416b6590815371f1106b85>
 80199a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199a6:	9001      	str	r0, [sp, #4]
 80199a8:	4642      	mov	r2, r8
 80199aa:	9300      	str	r3, [sp, #0]
 80199ac:	4639      	mov	r1, r7
 80199ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199b0:	4630      	mov	r0, r6
 80199b2:	f000 fc07 	bl	801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80199b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80199b8:	900d      	str	r0, [sp, #52]	; 0x34
 80199ba:	a81c      	add	r0, sp, #112	; 0x70
 80199bc:	f7f2 ffa4 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 80199c0:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 80199c4:	f8bd b072 	ldrh.w	fp, [sp, #114]	; 0x72
 80199c8:	f99d 9074 	ldrsb.w	r9, [sp, #116]	; 0x74
 80199cc:	f7f9 fc84 	bl	80132d8 <430fd23aeea8952b7b416b6590815371f1106b85>
 80199d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199d2:	9001      	str	r0, [sp, #4]
 80199d4:	9300      	str	r3, [sp, #0]
 80199d6:	465a      	mov	r2, fp
 80199d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199da:	4651      	mov	r1, sl
 80199dc:	4648      	mov	r0, r9
 80199de:	f000 fbf1 	bl	801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 80199e2:	4a28      	ldr	r2, [pc, #160]	; (8019a84 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4cc>)
 80199e4:	6812      	ldr	r2, [r2, #0]
 80199e6:	4605      	mov	r5, r0
 80199e8:	f8b2 130c 	ldrh.w	r1, [r2, #780]	; 0x30c
 80199ec:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 80199f0:	910c      	str	r1, [sp, #48]	; 0x30
 80199f2:	f7f2 ff55 	bl	800c8a0 <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 80199f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80199f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80199fa:	f7f2 ff51 	bl	800c8a0 <8cfb94024ca5b6140fb568011b57a078749e2ff0>
 80199fe:	e9dd 210b 	ldrd	r2, r1, [sp, #44]	; 0x2c
 8019a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a04:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8019a08:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8019a0c:	481e      	ldr	r0, [pc, #120]	; (8019a88 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4d0>)
 8019a0e:	e9cd 5904 	strd	r5, r9, [sp, #16]
 8019a12:	e9cd 6700 	strd	r6, r7, [sp]
 8019a16:	f7f6 fdd5 	bl	80105c4 <LOGGER_Print>
 8019a1a:	f7f6 fdcb 	bl	80105b4 <LOGGER_PrintNL>
 8019a1e:	f7f6 fde9 	bl	80105f4 <LOGGER_EndSection>
 8019a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a24:	f083 0001 	eor.w	r0, r3, #1
 8019a28:	b2c0      	uxtb	r0, r0
 8019a2a:	e793      	b.n	8019954 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x39c>
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d09a      	beq.n	8019966 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 8019a30:	2301      	movs	r3, #1
 8019a32:	9322      	str	r3, [sp, #136]	; 0x88
 8019a34:	4b10      	ldr	r3, [pc, #64]	; (8019a78 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4c0>)
 8019a36:	4a15      	ldr	r2, [pc, #84]	; (8019a8c <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x4d4>)
 8019a38:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
 8019a3c:	4619      	mov	r1, r3
 8019a3e:	2001      	movs	r0, #1
 8019a40:	9323      	str	r3, [sp, #140]	; 0x8c
 8019a42:	f7f6 fdf7 	bl	8010634 <LOGGER_PrintLine>
 8019a46:	f7f9 fc7f 	bl	8013348 <2fba4ddec868eb31998278adcb690f685bb9d2cf>
 8019a4a:	e78c      	b.n	8019966 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x3ae>
 8019a4c:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8019a50:	a818      	add	r0, sp, #96	; 0x60
 8019a52:	f7f2 ff59 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 8019a56:	f8db 3000 	ldr.w	r3, [fp]
 8019a5a:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8019a5e:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8019a62:	f8b3 b30c 	ldrh.w	fp, [r3, #780]	; 0x30c
 8019a66:	f000 fc0d 	bl	801a284 <dc0ee848a3d94ab51a590cd57f74390ab215fb95>
 8019a6a:	ebab 0b05 	sub.w	fp, fp, r5
 8019a6e:	4583      	cmp	fp, r0
 8019a70:	f4bf af0f 	bcs.w	8019892 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x2da>
 8019a74:	e663      	b.n	801973e <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0+0x186>
 8019a76:	bf00      	nop
 8019a78:	08021a57 	.word	0x08021a57
 8019a7c:	08021c27 	.word	0x08021c27
 8019a80:	08021c41 	.word	0x08021c41
 8019a84:	20000040 	.word	0x20000040
 8019a88:	08021c65 	.word	0x08021c65
 8019a8c:	08021d11 	.word	0x08021d11

08019a90 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>:
 8019a90:	b530      	push	{r4, r5, lr}
 8019a92:	4b0f      	ldr	r3, [pc, #60]	; (8019ad0 <15dfb4a8f71a3c92937ea9475d964fb266f362bf+0x40>)
 8019a94:	b085      	sub	sp, #20
 8019a96:	681c      	ldr	r4, [r3, #0]
 8019a98:	2100      	movs	r1, #0
 8019a9a:	f10d 0007 	add.w	r0, sp, #7
 8019a9e:	f504 751c 	add.w	r5, r4, #624	; 0x270
 8019aa2:	f7f3 f9db 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019aa6:	b138      	cbz	r0, 8019ab8 <15dfb4a8f71a3c92937ea9475d964fb266f362bf+0x28>
 8019aa8:	a802      	add	r0, sp, #8
 8019aaa:	f7f9 fbe3 	bl	8013274 <21f13ea89246a8f3ee5116c9b445be3be24e58a5>
 8019aae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8019ab2:	a902      	add	r1, sp, #8
 8019ab4:	f7f3 f818 	bl	800cae8 <027deecf67887395ef5db16208d3312ee727e45e>
 8019ab8:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 8019abc:	f7f5 f840 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8019ac0:	2301      	movs	r3, #1
 8019ac2:	f884 32f0 	strb.w	r3, [r4, #752]	; 0x2f0
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f7ff fd76 	bl	80195b8 <6773c6fdd8d1f676d1a2ac33c560f77f2ded24f0>
 8019acc:	b005      	add	sp, #20
 8019ace:	bd30      	pop	{r4, r5, pc}
 8019ad0:	20000040 	.word	0x20000040

08019ad4 <515d4494213ab78813ec2d283c3e06e54664cad2>:
 8019ad4:	b530      	push	{r4, r5, lr}
 8019ad6:	4b0c      	ldr	r3, [pc, #48]	; (8019b08 <515d4494213ab78813ec2d283c3e06e54664cad2+0x34>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	4602      	mov	r2, r0
 8019adc:	f503 741e 	add.w	r4, r3, #632	; 0x278
 8019ae0:	f100 0110 	add.w	r1, r0, #16
 8019ae4:	f852 5b04 	ldr.w	r5, [r2], #4
 8019ae8:	f844 5b04 	str.w	r5, [r4], #4
 8019aec:	428a      	cmp	r2, r1
 8019aee:	d1f9      	bne.n	8019ae4 <515d4494213ab78813ec2d283c3e06e54664cad2+0x10>
 8019af0:	f203 22d5 	addw	r2, r3, #725	; 0x2d5
 8019af4:	f850 4b04 	ldr.w	r4, [r0], #4
 8019af8:	f842 4b04 	str.w	r4, [r2], #4
 8019afc:	4288      	cmp	r0, r1
 8019afe:	d1f9      	bne.n	8019af4 <515d4494213ab78813ec2d283c3e06e54664cad2+0x20>
 8019b00:	2201      	movs	r2, #1
 8019b02:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8019b06:	bd30      	pop	{r4, r5, pc}
 8019b08:	20000040 	.word	0x20000040

08019b0c <f5d01873bc96944b472aa031c0b65a87221c5869>:
 8019b0c:	b510      	push	{r4, lr}
 8019b0e:	4b12      	ldr	r3, [pc, #72]	; (8019b58 <f5d01873bc96944b472aa031c0b65a87221c5869+0x4c>)
 8019b10:	681c      	ldr	r4, [r3, #0]
 8019b12:	f7ff ffdf 	bl	8019ad4 <515d4494213ab78813ec2d283c3e06e54664cad2>
 8019b16:	2005      	movs	r0, #5
 8019b18:	f7f2 fd86 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8019b1c:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8019b20:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8019b24:	f8d0 3005 	ldr.w	r3, [r0, #5]
 8019b28:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
 8019b2c:	2002      	movs	r0, #2
 8019b2e:	f7f2 fd7b 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 8019b32:	f8d0 3001 	ldr.w	r3, [r0, #1]
 8019b36:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
 8019b3a:	f8d0 3005 	ldr.w	r3, [r0, #5]
 8019b3e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8019b42:	f894 0310 	ldrb.w	r0, [r4, #784]	; 0x310
 8019b46:	f7f4 fffb 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8019b4a:	f000 fb35 	bl	801a1b8 <0a971023c987bf5f21422714f0ff94b4a7c15529>
 8019b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b52:	f7fe bed5 	b.w	8018900 <047450545e88a7e0b1f703be227cb1455be57bcf>
 8019b56:	bf00      	nop
 8019b58:	20000040 	.word	0x20000040

08019b5c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68>:
 8019b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b60:	4fae      	ldr	r7, [pc, #696]	; (8019e1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c0>)
 8019b62:	6843      	ldr	r3, [r0, #4]
 8019b64:	f8d7 8000 	ldr.w	r8, [r7]
 8019b68:	2573      	movs	r5, #115	; 0x73
 8019b6a:	7045      	strb	r5, [r0, #1]
 8019b6c:	785e      	ldrb	r6, [r3, #1]
 8019b6e:	b093      	sub	sp, #76	; 0x4c
 8019b70:	2104      	movs	r1, #4
 8019b72:	4604      	mov	r4, r0
 8019b74:	f001 f99e 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8019b78:	2e03      	cmp	r6, #3
 8019b7a:	f200 81c9 	bhi.w	8019f10 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3b4>
 8019b7e:	e8df f016 	tbh	[pc, r6, lsl #1]
 8019b82:	0004      	.short	0x0004
 8019b84:	00d9000e 	.word	0x00d9000e
 8019b88:	015b      	.short	0x015b
 8019b8a:	f508 701c 	add.w	r0, r8, #624	; 0x270
 8019b8e:	f7fe fee3 	bl	8018958 <cef630f5a74a35314667ebee3f885b52bc89b138>
 8019b92:	4620      	mov	r0, r4
 8019b94:	b013      	add	sp, #76	; 0x4c
 8019b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9a:	f7f4 b92b 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 8019b9e:	f7f2 fd35 	bl	800c60c <cb03b4776ba370511f18aa83227a6716bbc89321>
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	d1f5      	bne.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019ba6:	f8d7 9000 	ldr.w	r9, [r7]
 8019baa:	2351      	movs	r3, #81	; 0x51
 8019bac:	7063      	strb	r3, [r4, #1]
 8019bae:	6863      	ldr	r3, [r4, #4]
 8019bb0:	f509 7a1c 	add.w	sl, r9, #624	; 0x270
 8019bb4:	4652      	mov	r2, sl
 8019bb6:	f103 0118 	add.w	r1, r3, #24
 8019bba:	f853 0b04 	ldr.w	r0, [r3], #4
 8019bbe:	f842 0b04 	str.w	r0, [r2], #4
 8019bc2:	428b      	cmp	r3, r1
 8019bc4:	d1f9      	bne.n	8019bba <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x5e>
 8019bc6:	6860      	ldr	r0, [r4, #4]
 8019bc8:	3008      	adds	r0, #8
 8019bca:	f7ff ff83 	bl	8019ad4 <515d4494213ab78813ec2d283c3e06e54664cad2>
 8019bce:	7a26      	ldrb	r6, [r4, #8]
 8019bd0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019bd4:	3e18      	subs	r6, #24
 8019bd6:	f108 0518 	add.w	r5, r8, #24
 8019bda:	b2f6      	uxtb	r6, r6
 8019bdc:	2200      	movs	r2, #0
 8019bde:	f509 7b2a 	add.w	fp, r9, #680	; 0x2a8
 8019be2:	f509 7322 	add.w	r3, r9, #648	; 0x288
 8019be6:	2e00      	cmp	r6, #0
 8019be8:	d14a      	bne.n	8019c80 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x124>
 8019bea:	6863      	ldr	r3, [r4, #4]
 8019bec:	9203      	str	r2, [sp, #12]
 8019bee:	885b      	ldrh	r3, [r3, #2]
 8019bf0:	ba5b      	rev16	r3, r3
 8019bf2:	f8a8 3002 	strh.w	r3, [r8, #2]
 8019bf6:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8019bfa:	f8a9 3272 	strh.w	r3, [r9, #626]	; 0x272
 8019bfe:	a808      	add	r0, sp, #32
 8019c00:	f7f3 fd30 	bl	800d664 <c830e52416e40936b7f282734abfc3137eeaf4dc>
 8019c04:	9a03      	ldr	r2, [sp, #12]
 8019c06:	2a00      	cmp	r2, #0
 8019c08:	f000 808c 	beq.w	8019d24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8019c0c:	f10d 0117 	add.w	r1, sp, #23
 8019c10:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8019c14:	f7f3 fb2c 	bl	800d270 <52a2c697077f87280125159eda12d46a7578d4b9>
 8019c18:	2800      	cmp	r0, #0
 8019c1a:	f000 8083 	beq.w	8019d24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8019c1e:	2210      	movs	r2, #16
 8019c20:	4631      	mov	r1, r6
 8019c22:	f10d 0035 	add.w	r0, sp, #53	; 0x35
 8019c26:	f002 f9bf 	bl	801bfa8 <memset>
 8019c2a:	2302      	movs	r3, #2
 8019c2c:	f10d 0135 	add.w	r1, sp, #53	; 0x35
 8019c30:	4630      	mov	r0, r6
 8019c32:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8019c36:	f7f3 f911 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019c3a:	a90d      	add	r1, sp, #52	; 0x34
 8019c3c:	a808      	add	r0, sp, #32
 8019c3e:	f7f3 fc9f 	bl	800d580 <32ee1897f5dd097f851de45186212ed2e150a0c5>
 8019c42:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019c46:	2800      	cmp	r0, #0
 8019c48:	d06f      	beq.n	8019d2a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1ce>
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	f8b3 330c 	ldrh.w	r3, [r3, #780]	; 0x30c
 8019c50:	428b      	cmp	r3, r1
 8019c52:	d26a      	bcs.n	8019d2a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1ce>
 8019c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c58:	4299      	cmp	r1, r3
 8019c5a:	d15a      	bne.n	8019d12 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1b6>
 8019c5c:	2304      	movs	r3, #4
 8019c5e:	9306      	str	r3, [sp, #24]
 8019c60:	4b6f      	ldr	r3, [pc, #444]	; (8019e20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8019c62:	4a70      	ldr	r2, [pc, #448]	; (8019e24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c8>)
 8019c64:	9307      	str	r3, [sp, #28]
 8019c66:	4619      	mov	r1, r3
 8019c68:	2004      	movs	r0, #4
 8019c6a:	f7f6 fce3 	bl	8010634 <LOGGER_PrintLine>
 8019c6e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019c72:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8019c76:	f7f2 fe2d 	bl	800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8019c7a:	f7ff ff09 	bl	8019a90 <15dfb4a8f71a3c92937ea9475d964fb266f362bf>
 8019c7e:	e788      	b.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019c80:	7829      	ldrb	r1, [r5, #0]
 8019c82:	3e02      	subs	r6, #2
 8019c84:	2904      	cmp	r1, #4
 8019c86:	b2f6      	uxtb	r6, r6
 8019c88:	d007      	beq.n	8019c9a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x13e>
 8019c8a:	2908      	cmp	r1, #8
 8019c8c:	d01c      	beq.n	8019cc8 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x16c>
 8019c8e:	7869      	ldrb	r1, [r5, #1]
 8019c90:	1a76      	subs	r6, r6, r1
 8019c92:	3102      	adds	r1, #2
 8019c94:	b2f6      	uxtb	r6, r6
 8019c96:	440d      	add	r5, r1
 8019c98:	e7a5      	b.n	8019be6 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x8a>
 8019c9a:	88e9      	ldrh	r1, [r5, #6]
 8019c9c:	ba49      	rev16	r1, r1
 8019c9e:	80e9      	strh	r1, [r5, #6]
 8019ca0:	8929      	ldrh	r1, [r5, #8]
 8019ca2:	ba49      	rev16	r1, r1
 8019ca4:	8129      	strh	r1, [r5, #8]
 8019ca6:	8969      	ldrh	r1, [r5, #10]
 8019ca8:	ba49      	rev16	r1, r1
 8019caa:	8169      	strh	r1, [r5, #10]
 8019cac:	89e9      	ldrh	r1, [r5, #14]
 8019cae:	ba49      	rev16	r1, r1
 8019cb0:	81e9      	strh	r1, [r5, #14]
 8019cb2:	4658      	mov	r0, fp
 8019cb4:	4629      	mov	r1, r5
 8019cb6:	f105 0c10 	add.w	ip, r5, #16
 8019cba:	f851 eb04 	ldr.w	lr, [r1], #4
 8019cbe:	f840 eb04 	str.w	lr, [r0], #4
 8019cc2:	4561      	cmp	r1, ip
 8019cc4:	d1f9      	bne.n	8019cba <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x15e>
 8019cc6:	e7e2      	b.n	8019c8e <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x132>
 8019cc8:	462a      	mov	r2, r5
 8019cca:	4619      	mov	r1, r3
 8019ccc:	f105 0020 	add.w	r0, r5, #32
 8019cd0:	f852 cb04 	ldr.w	ip, [r2], #4
 8019cd4:	f841 cb04 	str.w	ip, [r1], #4
 8019cd8:	4282      	cmp	r2, r0
 8019cda:	d1f9      	bne.n	8019cd0 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x174>
 8019cdc:	2100      	movs	r1, #0
 8019cde:	2210      	movs	r2, #16
 8019ce0:	f10d 0035 	add.w	r0, sp, #53	; 0x35
 8019ce4:	9303      	str	r3, [sp, #12]
 8019ce6:	f002 f95f 	bl	801bfa8 <memset>
 8019cea:	2205      	movs	r2, #5
 8019cec:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019cf0:	692a      	ldr	r2, [r5, #16]
 8019cf2:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8019cf6:	696a      	ldr	r2, [r5, #20]
 8019cf8:	f8cd 2039 	str.w	r2, [sp, #57]	; 0x39
 8019cfc:	a80d      	add	r0, sp, #52	; 0x34
 8019cfe:	f7f2 fcb5 	bl	800c66c <00481873317fdef387db1bb310377b408b8e47be>
 8019d02:	786a      	ldrb	r2, [r5, #1]
 8019d04:	9b03      	ldr	r3, [sp, #12]
 8019d06:	1ab6      	subs	r6, r6, r2
 8019d08:	1c91      	adds	r1, r2, #2
 8019d0a:	b2f6      	uxtb	r6, r6
 8019d0c:	462a      	mov	r2, r5
 8019d0e:	440d      	add	r5, r1
 8019d10:	e769      	b.n	8019be6 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x8a>
 8019d12:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8019d16:	f7f2 fddd 	bl	800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8019d1a:	4843      	ldr	r0, [pc, #268]	; (8019e28 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2cc>)
 8019d1c:	2204      	movs	r2, #4
 8019d1e:	4651      	mov	r1, sl
 8019d20:	f7f5 fdfa 	bl	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8019d24:	f7ff fabe 	bl	80192a4 <b9ad13487f540c7a6a8fb22e7ad3e32092d0d437>
 8019d28:	e733      	b.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019d2a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8019d2e:	f7f2 fdd1 	bl	800c8d4 <231ee13350ba09f13191bc6eb894c2ea8bf59b41>
 8019d32:	e7f7      	b.n	8019d24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1c8>
 8019d34:	683a      	ldr	r2, [r7, #0]
 8019d36:	6863      	ldr	r3, [r4, #4]
 8019d38:	7065      	strb	r5, [r4, #1]
 8019d3a:	7819      	ldrb	r1, [r3, #0]
 8019d3c:	f892 22d1 	ldrb.w	r2, [r2, #721]	; 0x2d1
 8019d40:	4291      	cmp	r1, r2
 8019d42:	d009      	beq.n	8019d58 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1fc>
 8019d44:	2305      	movs	r3, #5
 8019d46:	930d      	str	r3, [sp, #52]	; 0x34
 8019d48:	4b35      	ldr	r3, [pc, #212]	; (8019e20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8019d4a:	4a38      	ldr	r2, [pc, #224]	; (8019e2c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d0>)
 8019d4c:	930e      	str	r3, [sp, #56]	; 0x38
 8019d4e:	4619      	mov	r1, r3
 8019d50:	2005      	movs	r0, #5
 8019d52:	f7f6 fc6f 	bl	8010634 <LOGGER_PrintLine>
 8019d56:	e71c      	b.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019d58:	1c5a      	adds	r2, r3, #1
 8019d5a:	6062      	str	r2, [r4, #4]
 8019d5c:	7a22      	ldrb	r2, [r4, #8]
 8019d5e:	1e51      	subs	r1, r2, #1
 8019d60:	7221      	strb	r1, [r4, #8]
 8019d62:	1c98      	adds	r0, r3, #2
 8019d64:	7859      	ldrb	r1, [r3, #1]
 8019d66:	6060      	str	r0, [r4, #4]
 8019d68:	1e90      	subs	r0, r2, #2
 8019d6a:	7220      	strb	r0, [r4, #8]
 8019d6c:	7898      	ldrb	r0, [r3, #2]
 8019d6e:	1cdd      	adds	r5, r3, #3
 8019d70:	6065      	str	r5, [r4, #4]
 8019d72:	1ed5      	subs	r5, r2, #3
 8019d74:	7225      	strb	r5, [r4, #8]
 8019d76:	2800      	cmp	r0, #0
 8019d78:	f47f af0b 	bne.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019d7c:	78d8      	ldrb	r0, [r3, #3]
 8019d7e:	1d1d      	adds	r5, r3, #4
 8019d80:	6065      	str	r5, [r4, #4]
 8019d82:	1f15      	subs	r5, r2, #4
 8019d84:	7225      	strb	r5, [r4, #8]
 8019d86:	2800      	cmp	r0, #0
 8019d88:	f47f af03 	bne.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019d8c:	0649      	lsls	r1, r1, #25
 8019d8e:	bf41      	itttt	mi
 8019d90:	3314      	addmi	r3, #20
 8019d92:	3a14      	submi	r2, #20
 8019d94:	6063      	strmi	r3, [r4, #4]
 8019d96:	7222      	strbmi	r2, [r4, #8]
 8019d98:	2600      	movs	r6, #0
 8019d9a:	7a23      	ldrb	r3, [r4, #8]
 8019d9c:	b973      	cbnz	r3, 8019dbc <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x260>
 8019d9e:	2e00      	cmp	r6, #0
 8019da0:	f43f aef7 	beq.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019da4:	2305      	movs	r3, #5
 8019da6:	930d      	str	r3, [sp, #52]	; 0x34
 8019da8:	4b1d      	ldr	r3, [pc, #116]	; (8019e20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8019daa:	4a21      	ldr	r2, [pc, #132]	; (8019e30 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d4>)
 8019dac:	930e      	str	r3, [sp, #56]	; 0x38
 8019dae:	4619      	mov	r1, r3
 8019db0:	2005      	movs	r0, #5
 8019db2:	f7f6 fc3f 	bl	8010634 <LOGGER_PrintLine>
 8019db6:	f7ff fbc0 	bl	801953a <d02fb859d9a803dd5217bd4aa72d833a1cfd2c1e>
 8019dba:	e6ea      	b.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019dbc:	6863      	ldr	r3, [r4, #4]
 8019dbe:	681d      	ldr	r5, [r3, #0]
 8019dc0:	2104      	movs	r1, #4
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	f001 f876 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 8019dc8:	b2eb      	uxtb	r3, r5
 8019dca:	2b05      	cmp	r3, #5
 8019dcc:	f47f aee1 	bne.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019dd0:	0eed      	lsrs	r5, r5, #27
 8019dd2:	2d02      	cmp	r5, #2
 8019dd4:	d11a      	bne.n	8019e0c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2b0>
 8019dd6:	6863      	ldr	r3, [r4, #4]
 8019dd8:	a808      	add	r0, sp, #32
 8019dda:	881b      	ldrh	r3, [r3, #0]
 8019ddc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019de0:	f000 f934 	bl	801a04c <4f3d233165bf16327caadd61d6e4b71a1c6a20e2>
 8019de4:	b928      	cbnz	r0, 8019df2 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x296>
 8019de6:	a808      	add	r0, sp, #32
 8019de8:	f000 f8e2 	bl	8019fb0 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 8019dec:	2800      	cmp	r0, #0
 8019dee:	bf08      	it	eq
 8019df0:	2601      	moveq	r6, #1
 8019df2:	a808      	add	r0, sp, #32
 8019df4:	f000 f8fa 	bl	8019fec <725c72049a2e0b342530ba14f6642cfd9100dd16>
 8019df8:	b940      	cbnz	r0, 8019e0c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2b0>
 8019dfa:	2303      	movs	r3, #3
 8019dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8019dfe:	4b08      	ldr	r3, [pc, #32]	; (8019e20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2c4>)
 8019e00:	4a0c      	ldr	r2, [pc, #48]	; (8019e34 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x2d8>)
 8019e02:	930e      	str	r3, [sp, #56]	; 0x38
 8019e04:	4619      	mov	r1, r3
 8019e06:	2003      	movs	r0, #3
 8019e08:	f7f6 fc14 	bl	8010634 <LOGGER_PrintLine>
 8019e0c:	6863      	ldr	r3, [r4, #4]
 8019e0e:	442b      	add	r3, r5
 8019e10:	6063      	str	r3, [r4, #4]
 8019e12:	7a23      	ldrb	r3, [r4, #8]
 8019e14:	1b5b      	subs	r3, r3, r5
 8019e16:	7223      	strb	r3, [r4, #8]
 8019e18:	e7bf      	b.n	8019d9a <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x23e>
 8019e1a:	bf00      	nop
 8019e1c:	20000040 	.word	0x20000040
 8019e20:	08021a57 	.word	0x08021a57
 8019e24:	08021d40 	.word	0x08021d40
 8019e28:	08018959 	.word	0x08018959
 8019e2c:	08021d5e 	.word	0x08021d5e
 8019e30:	08021d90 	.word	0x08021d90
 8019e34:	08021d74 	.word	0x08021d74
 8019e38:	a908      	add	r1, sp, #32
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	683d      	ldr	r5, [r7, #0]
 8019e3e:	f7f3 f80d 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 8019e42:	2800      	cmp	r0, #0
 8019e44:	f43f aea5 	beq.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019e48:	2208      	movs	r2, #8
 8019e4a:	a908      	add	r1, sp, #32
 8019e4c:	a806      	add	r0, sp, #24
 8019e4e:	f7fe fd4d 	bl	80188ec <4d7cfa5396c1a70e5b044281b148d10ac7c5b95b>
 8019e52:	2373      	movs	r3, #115	; 0x73
 8019e54:	7063      	strb	r3, [r4, #1]
 8019e56:	6863      	ldr	r3, [r4, #4]
 8019e58:	f895 22d1 	ldrb.w	r2, [r5, #721]	; 0x2d1
 8019e5c:	7819      	ldrb	r1, [r3, #0]
 8019e5e:	4291      	cmp	r1, r2
 8019e60:	f47f af70 	bne.w	8019d44 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1e8>
 8019e64:	7a22      	ldrb	r2, [r4, #8]
 8019e66:	1c99      	adds	r1, r3, #2
 8019e68:	6061      	str	r1, [r4, #4]
 8019e6a:	1e91      	subs	r1, r2, #2
 8019e6c:	7221      	strb	r1, [r4, #8]
 8019e6e:	1cd9      	adds	r1, r3, #3
 8019e70:	7898      	ldrb	r0, [r3, #2]
 8019e72:	6061      	str	r1, [r4, #4]
 8019e74:	1ed1      	subs	r1, r2, #3
 8019e76:	7221      	strb	r1, [r4, #8]
 8019e78:	f895 12d4 	ldrb.w	r1, [r5, #724]	; 0x2d4
 8019e7c:	1a09      	subs	r1, r1, r0
 8019e7e:	b2c9      	uxtb	r1, r1
 8019e80:	2902      	cmp	r1, #2
 8019e82:	d907      	bls.n	8019e94 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x338>
 8019e84:	2303      	movs	r3, #3
 8019e86:	930d      	str	r3, [sp, #52]	; 0x34
 8019e88:	4a24      	ldr	r2, [pc, #144]	; (8019f1c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c0>)
 8019e8a:	4b25      	ldr	r3, [pc, #148]	; (8019f20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8019e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8019e8e:	4619      	mov	r1, r3
 8019e90:	2003      	movs	r0, #3
 8019e92:	e75e      	b.n	8019d52 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x1f6>
 8019e94:	78d9      	ldrb	r1, [r3, #3]
 8019e96:	3a04      	subs	r2, #4
 8019e98:	3304      	adds	r3, #4
 8019e9a:	6063      	str	r3, [r4, #4]
 8019e9c:	7222      	strb	r2, [r4, #8]
 8019e9e:	b129      	cbz	r1, 8019eac <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x350>
 8019ea0:	2303      	movs	r3, #3
 8019ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ea4:	4b1e      	ldr	r3, [pc, #120]	; (8019f20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8019ea6:	4a1f      	ldr	r2, [pc, #124]	; (8019f24 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c8>)
 8019ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8019eaa:	e7f0      	b.n	8019e8e <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x332>
 8019eac:	f895 32f3 	ldrb.w	r3, [r5, #755]	; 0x2f3
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	f43f ae6e 	beq.w	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019eb6:	f895 32ef 	ldrb.w	r3, [r5, #751]	; 0x2ef
 8019eba:	f885 12f3 	strb.w	r1, [r5, #755]	; 0x2f3
 8019ebe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8019ec2:	b943      	cbnz	r3, 8019ed6 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x37a>
 8019ec4:	2301      	movs	r3, #1
 8019ec6:	f885 32ef 	strb.w	r3, [r5, #751]	; 0x2ef
 8019eca:	f000 fccb 	bl	801a864 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>
 8019ece:	4630      	mov	r0, r6
 8019ed0:	4639      	mov	r1, r7
 8019ed2:	f000 fd8f 	bl	801a9f4 <b374fd28973c520694c78fab59b4df07772e0870>
 8019ed6:	2302      	movs	r3, #2
 8019ed8:	f885 32f2 	strb.w	r3, [r5, #754]	; 0x2f2
 8019edc:	f895 32f1 	ldrb.w	r3, [r5, #753]	; 0x2f1
 8019ee0:	b943      	cbnz	r3, 8019ef4 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x398>
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	4810      	ldr	r0, [pc, #64]	; (8019f28 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3cc>)
 8019ee6:	f885 32f1 	strb.w	r3, [r5, #753]	; 0x2f1
 8019eea:	2204      	movs	r2, #4
 8019eec:	f505 711c 	add.w	r1, r5, #624	; 0x270
 8019ef0:	f7f5 fd12 	bl	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 8019ef4:	f7fe fdd8 	bl	8018aa8 <fe525efb3be16854cf2fbf621c3bc3a516eb40e5>
 8019ef8:	2305      	movs	r3, #5
 8019efa:	930d      	str	r3, [sp, #52]	; 0x34
 8019efc:	4b08      	ldr	r3, [pc, #32]	; (8019f20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8019efe:	4a0b      	ldr	r2, [pc, #44]	; (8019f2c <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3d0>)
 8019f00:	930e      	str	r3, [sp, #56]	; 0x38
 8019f02:	e9cd 6700 	strd	r6, r7, [sp]
 8019f06:	4619      	mov	r1, r3
 8019f08:	2005      	movs	r0, #5
 8019f0a:	f7f6 fb93 	bl	8010634 <LOGGER_PrintLine>
 8019f0e:	e640      	b.n	8019b92 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x36>
 8019f10:	2303      	movs	r3, #3
 8019f12:	930d      	str	r3, [sp, #52]	; 0x34
 8019f14:	4b02      	ldr	r3, [pc, #8]	; (8019f20 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3c4>)
 8019f16:	4a06      	ldr	r2, [pc, #24]	; (8019f30 <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x3d4>)
 8019f18:	930e      	str	r3, [sp, #56]	; 0x38
 8019f1a:	e7b8      	b.n	8019e8e <21f9d235812fd7009c72aa387ad7cecd1ecb2e68+0x332>
 8019f1c:	08021dc3 	.word	0x08021dc3
 8019f20:	08021a57 	.word	0x08021a57
 8019f24:	08021ddd 	.word	0x08021ddd
 8019f28:	08018959 	.word	0x08018959
 8019f2c:	08021df6 	.word	0x08021df6
 8019f30:	08021e27 	.word	0x08021e27

08019f34 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d>:
 8019f34:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8019f38:	89c3      	ldrh	r3, [r0, #14]
 8019f3a:	b113      	cbz	r3, 8019f42 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xe>
 8019f3c:	7c03      	ldrb	r3, [r0, #16]
 8019f3e:	b923      	cbnz	r3, 8019f4a <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x16>
 8019f40:	81c3      	strh	r3, [r0, #14]
 8019f42:	3004      	adds	r0, #4
 8019f44:	4290      	cmp	r0, r2
 8019f46:	d1f7      	bne.n	8019f38 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0x4>
 8019f48:	4770      	bx	lr
 8019f4a:	3b01      	subs	r3, #1
 8019f4c:	7403      	strb	r3, [r0, #16]
 8019f4e:	e7f8      	b.n	8019f42 <451af4d13f3981311b6c1d9d343aec3dcaf22e3d+0xe>

08019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 8019f50:	780b      	ldrb	r3, [r1, #0]
 8019f52:	7043      	strb	r3, [r0, #1]
 8019f54:	784b      	ldrb	r3, [r1, #1]
 8019f56:	7003      	strb	r3, [r0, #0]
 8019f58:	4770      	bx	lr
	...

08019f5c <082eefb804d1e0ed7226bf17620f026c0888c274>:
 8019f5c:	b510      	push	{r4, lr}
 8019f5e:	4b04      	ldr	r3, [pc, #16]	; (8019f70 <082eefb804d1e0ed7226bf17620f026c0888c274+0x14>)
 8019f60:	2001      	movs	r0, #1
 8019f62:	681c      	ldr	r4, [r3, #0]
 8019f64:	f7f4 fcca 	bl	800e8fc <a8a69b6dc0b44dcd4c796ffc71424a9aa5615acc>
 8019f68:	f884 0ad2 	strb.w	r0, [r4, #2770]	; 0xad2
 8019f6c:	bd10      	pop	{r4, pc}
 8019f6e:	bf00      	nop
 8019f70:	20000040 	.word	0x20000040

08019f74 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c>:
 8019f74:	b507      	push	{r0, r1, r2, lr}
 8019f76:	4b07      	ldr	r3, [pc, #28]	; (8019f94 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x20>)
 8019f78:	4a07      	ldr	r2, [pc, #28]	; (8019f98 <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x24>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	f893 0ad2 	ldrb.w	r0, [r3, #2770]	; 0xad2
 8019f80:	f603 23d2 	addw	r3, r3, #2770	; 0xad2
 8019f84:	9300      	str	r3, [sp, #0]
 8019f86:	2100      	movs	r1, #0
 8019f88:	4b04      	ldr	r3, [pc, #16]	; (8019f9c <c38d52ce980d1bffca8abbe7f4a5a8384c48b95c+0x28>)
 8019f8a:	f7f4 fdc7 	bl	800eb1c <a146aa5c27211710221f7063067066079d66a071>
 8019f8e:	b003      	add	sp, #12
 8019f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f94:	20000040 	.word	0x20000040
 8019f98:	d693a400 	.word	0xd693a400
 8019f9c:	08019f35 	.word	0x08019f35

08019fa0 <7c27c3f80cc08068333c14ac1b724ab469f4969f>:
 8019fa0:	4b02      	ldr	r3, [pc, #8]	; (8019fac <7c27c3f80cc08068333c14ac1b724ab469f4969f+0xc>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	f893 0ad2 	ldrb.w	r0, [r3, #2770]	; 0xad2
 8019fa8:	f7f4 bdca 	b.w	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 8019fac:	20000040 	.word	0x20000040

08019fb0 <29fa8ed2960e61836c5411711158d1cb9cd67052>:
 8019fb0:	b507      	push	{r0, r1, r2, lr}
 8019fb2:	4b0d      	ldr	r3, [pc, #52]	; (8019fe8 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x38>)
 8019fb4:	4601      	mov	r1, r0
 8019fb6:	f10d 0006 	add.w	r0, sp, #6
 8019fba:	681a      	ldr	r2, [r3, #0]
 8019fbc:	f7ff ffc8 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8019fc0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019fc4:	b150      	cbz	r0, 8019fdc <29fa8ed2960e61836c5411711158d1cb9cd67052+0x2c>
 8019fc6:	f602 23d2 	addw	r3, r2, #2770	; 0xad2
 8019fca:	f602 22de 	addw	r2, r2, #2782	; 0xade
 8019fce:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8019fd2:	4281      	cmp	r1, r0
 8019fd4:	d005      	beq.n	8019fe2 <29fa8ed2960e61836c5411711158d1cb9cd67052+0x32>
 8019fd6:	4293      	cmp	r3, r2
 8019fd8:	d1f9      	bne.n	8019fce <29fa8ed2960e61836c5411711158d1cb9cd67052+0x1e>
 8019fda:	2000      	movs	r0, #0
 8019fdc:	b003      	add	sp, #12
 8019fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fe2:	2001      	movs	r0, #1
 8019fe4:	e7fa      	b.n	8019fdc <29fa8ed2960e61836c5411711158d1cb9cd67052+0x2c>
 8019fe6:	bf00      	nop
 8019fe8:	20000040 	.word	0x20000040

08019fec <725c72049a2e0b342530ba14f6642cfd9100dd16>:
 8019fec:	b513      	push	{r0, r1, r4, lr}
 8019fee:	4b16      	ldr	r3, [pc, #88]	; (801a048 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x5c>)
 8019ff0:	4601      	mov	r1, r0
 8019ff2:	f10d 0006 	add.w	r0, sp, #6
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	f7ff ffaa 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 8019ffc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a000:	b160      	cbz	r0, 801a01c <725c72049a2e0b342530ba14f6642cfd9100dd16+0x30>
 801a002:	2300      	movs	r3, #0
 801a004:	f502 612e 	add.w	r1, r2, #2784	; 0xae0
 801a008:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 801a00c:	4284      	cmp	r4, r0
 801a00e:	d107      	bne.n	801a020 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x34>
 801a010:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a014:	2305      	movs	r3, #5
 801a016:	f882 3ae2 	strb.w	r3, [r2, #2786]	; 0xae2
 801a01a:	2001      	movs	r0, #1
 801a01c:	b002      	add	sp, #8
 801a01e:	bd10      	pop	{r4, pc}
 801a020:	3301      	adds	r3, #1
 801a022:	2b0a      	cmp	r3, #10
 801a024:	d1f0      	bne.n	801a008 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x1c>
 801a026:	2300      	movs	r3, #0
 801a028:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 801a02c:	b93c      	cbnz	r4, 801a03e <725c72049a2e0b342530ba14f6642cfd9100dd16+0x52>
 801a02e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a032:	2305      	movs	r3, #5
 801a034:	f882 3ae2 	strb.w	r3, [r2, #2786]	; 0xae2
 801a038:	f8a2 0ae0 	strh.w	r0, [r2, #2784]	; 0xae0
 801a03c:	e7ed      	b.n	801a01a <725c72049a2e0b342530ba14f6642cfd9100dd16+0x2e>
 801a03e:	3301      	adds	r3, #1
 801a040:	2b0a      	cmp	r3, #10
 801a042:	d1f1      	bne.n	801a028 <725c72049a2e0b342530ba14f6642cfd9100dd16+0x3c>
 801a044:	2000      	movs	r0, #0
 801a046:	e7e9      	b.n	801a01c <725c72049a2e0b342530ba14f6642cfd9100dd16+0x30>
 801a048:	20000040 	.word	0x20000040

0801a04c <4f3d233165bf16327caadd61d6e4b71a1c6a20e2>:
 801a04c:	b507      	push	{r0, r1, r2, lr}
 801a04e:	4b0c      	ldr	r3, [pc, #48]	; (801a080 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x34>)
 801a050:	4601      	mov	r1, r0
 801a052:	f10d 0006 	add.w	r0, sp, #6
 801a056:	681a      	ldr	r2, [r3, #0]
 801a058:	f7ff ff7a 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a05c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a060:	b148      	cbz	r0, 801a076 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x2a>
 801a062:	4613      	mov	r3, r2
 801a064:	3228      	adds	r2, #40	; 0x28
 801a066:	f8b3 1ae0 	ldrh.w	r1, [r3, #2784]	; 0xae0
 801a06a:	4281      	cmp	r1, r0
 801a06c:	d006      	beq.n	801a07c <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x30>
 801a06e:	3304      	adds	r3, #4
 801a070:	4293      	cmp	r3, r2
 801a072:	d1f8      	bne.n	801a066 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x1a>
 801a074:	2000      	movs	r0, #0
 801a076:	b003      	add	sp, #12
 801a078:	f85d fb04 	ldr.w	pc, [sp], #4
 801a07c:	2001      	movs	r0, #1
 801a07e:	e7fa      	b.n	801a076 <4f3d233165bf16327caadd61d6e4b71a1c6a20e2+0x2a>
 801a080:	20000040 	.word	0x20000040

0801a084 <84780c9f08e19cea1884da40f03f0c5650f281d0>:
 801a084:	4b06      	ldr	r3, [pc, #24]	; (801a0a0 <84780c9f08e19cea1884da40f03f0c5650f281d0+0x1c>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	2000      	movs	r0, #0
 801a08a:	f603 22d2 	addw	r2, r3, #2770	; 0xad2
 801a08e:	f603 23de 	addw	r3, r3, #2782	; 0xade
 801a092:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 801a096:	b101      	cbz	r1, 801a09a <84780c9f08e19cea1884da40f03f0c5650f281d0+0x16>
 801a098:	3001      	adds	r0, #1
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d1f9      	bne.n	801a092 <84780c9f08e19cea1884da40f03f0c5650f281d0+0xe>
 801a09e:	4770      	bx	lr
 801a0a0:	20000040 	.word	0x20000040

0801a0a4 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e>:
 801a0a4:	b570      	push	{r4, r5, r6, lr}
 801a0a6:	4b0d      	ldr	r3, [pc, #52]	; (801a0dc <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x38>)
 801a0a8:	681a      	ldr	r2, [r3, #0]
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	f602 22d2 	addw	r2, r2, #2770	; 0xad2
 801a0b0:	4605      	mov	r5, r0
 801a0b2:	461c      	mov	r4, r3
 801a0b4:	4608      	mov	r0, r1
 801a0b6:	4611      	mov	r1, r2
 801a0b8:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 801a0bc:	3301      	adds	r3, #1
 801a0be:	b146      	cbz	r6, 801a0d2 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2e>
 801a0c0:	42a5      	cmp	r5, r4
 801a0c2:	d105      	bne.n	801a0d0 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2c>
 801a0c4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a0c8:	f7ff ff42 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a0cc:	2001      	movs	r0, #1
 801a0ce:	bd70      	pop	{r4, r5, r6, pc}
 801a0d0:	3401      	adds	r4, #1
 801a0d2:	2b06      	cmp	r3, #6
 801a0d4:	d1f0      	bne.n	801a0b8 <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x14>
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	e7f9      	b.n	801a0ce <edbad025e0ac3bf74f1c6dfb533f2fa5652feb1e+0x2a>
 801a0da:	bf00      	nop
 801a0dc:	20000040 	.word	0x20000040

0801a0e0 <bdffef4226ee0110f60b8de23959aef3caa4ba4a>:
 801a0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a0e2:	4b10      	ldr	r3, [pc, #64]	; (801a124 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x44>)
 801a0e4:	681e      	ldr	r6, [r3, #0]
 801a0e6:	2400      	movs	r4, #0
 801a0e8:	f606 23d2 	addw	r3, r6, #2770	; 0xad2
 801a0ec:	f606 22de 	addw	r2, r6, #2782	; 0xade
 801a0f0:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 801a0f4:	b101      	cbz	r1, 801a0f8 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x18>
 801a0f6:	3401      	adds	r4, #1
 801a0f8:	4293      	cmp	r3, r2
 801a0fa:	d1f9      	bne.n	801a0f0 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x10>
 801a0fc:	f44f 652e 	mov.w	r5, #2784	; 0xae0
 801a100:	f640 3708 	movw	r7, #2824	; 0xb08
 801a104:	5b73      	ldrh	r3, [r6, r5]
 801a106:	b13b      	cbz	r3, 801a118 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x38>
 801a108:	1971      	adds	r1, r6, r5
 801a10a:	a801      	add	r0, sp, #4
 801a10c:	f7ff ff20 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a110:	f7ff ff4e 	bl	8019fb0 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 801a114:	b900      	cbnz	r0, 801a118 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x38>
 801a116:	3401      	adds	r4, #1
 801a118:	3504      	adds	r5, #4
 801a11a:	42bd      	cmp	r5, r7
 801a11c:	d1f2      	bne.n	801a104 <bdffef4226ee0110f60b8de23959aef3caa4ba4a+0x24>
 801a11e:	4620      	mov	r0, r4
 801a120:	b003      	add	sp, #12
 801a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a124:	20000040 	.word	0x20000040

0801a128 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac>:
 801a128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a12c:	4b1a      	ldr	r3, [pc, #104]	; (801a198 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x70>)
 801a12e:	f8d3 8000 	ldr.w	r8, [r3]
 801a132:	460f      	mov	r7, r1
 801a134:	2300      	movs	r3, #0
 801a136:	f608 21d2 	addw	r1, r8, #2770	; 0xad2
 801a13a:	4606      	mov	r6, r0
 801a13c:	460a      	mov	r2, r1
 801a13e:	461c      	mov	r4, r3
 801a140:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801a144:	3301      	adds	r3, #1
 801a146:	b158      	cbz	r0, 801a160 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x38>
 801a148:	42a6      	cmp	r6, r4
 801a14a:	d108      	bne.n	801a15e <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x36>
 801a14c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801a150:	4638      	mov	r0, r7
 801a152:	f7ff fefd 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a156:	2001      	movs	r0, #1
 801a158:	b002      	add	sp, #8
 801a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a15e:	3401      	adds	r4, #1
 801a160:	2b06      	cmp	r3, #6
 801a162:	d1ed      	bne.n	801a140 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x18>
 801a164:	f44f 652e 	mov.w	r5, #2784	; 0xae0
 801a168:	f640 3a08 	movw	sl, #2824	; 0xb08
 801a16c:	f838 3005 	ldrh.w	r3, [r8, r5]
 801a170:	b16b      	cbz	r3, 801a18e <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x66>
 801a172:	eb08 0905 	add.w	r9, r8, r5
 801a176:	4649      	mov	r1, r9
 801a178:	a801      	add	r0, sp, #4
 801a17a:	f7ff fee9 	bl	8019f50 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a17e:	f7ff ff17 	bl	8019fb0 <29fa8ed2960e61836c5411711158d1cb9cd67052>
 801a182:	b920      	cbnz	r0, 801a18e <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x66>
 801a184:	42a6      	cmp	r6, r4
 801a186:	d101      	bne.n	801a18c <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x64>
 801a188:	4649      	mov	r1, r9
 801a18a:	e7e1      	b.n	801a150 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x28>
 801a18c:	3401      	adds	r4, #1
 801a18e:	3504      	adds	r5, #4
 801a190:	4555      	cmp	r5, sl
 801a192:	d1eb      	bne.n	801a16c <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x44>
 801a194:	2000      	movs	r0, #0
 801a196:	e7df      	b.n	801a158 <82d5e8b1ced6280c54c7c9d9bc6bfacaaea9bbac+0x30>
 801a198:	20000040 	.word	0x20000040

0801a19c <73cd113f0512e09e8865b1dc11046143bbfb5214>:
 801a19c:	b508      	push	{r3, lr}
 801a19e:	f7ec f94d 	bl	800643c <EMBENET_RADIO_GetCapabilities>
 801a1a2:	4b03      	ldr	r3, [pc, #12]	; (801a1b0 <73cd113f0512e09e8865b1dc11046143bbfb5214+0x14>)
 801a1a4:	f990 201c 	ldrsb.w	r2, [r0, #28]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 801a1ae:	bd08      	pop	{r3, pc}
 801a1b0:	20000040 	.word	0x20000040

0801a1b4 <6607d1a8e0084dff834e59246aa78b5f6da467d9>:
 801a1b4:	4770      	bx	lr

0801a1b6 <ac88c013d0ed7f5b742e43c5288111c1f79c1a36>:
 801a1b6:	4770      	bx	lr

0801a1b8 <0a971023c987bf5f21422714f0ff94b4a7c15529>:
 801a1b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a1bc:	4770      	bx	lr

0801a1be <7a609a09e67535970a8503dff96b9de207d8fd88>:
 801a1be:	0a00      	lsrs	r0, r0, #8
 801a1c0:	4770      	bx	lr
	...

0801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>:
 801a1c4:	b570      	push	{r4, r5, r6, lr}
 801a1c6:	4d25      	ldr	r5, [pc, #148]	; (801a25c <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x98>)
 801a1c8:	9c04      	ldr	r4, [sp, #16]
 801a1ca:	682d      	ldr	r5, [r5, #0]
 801a1cc:	2918      	cmp	r1, #24
 801a1ce:	d936      	bls.n	801a23e <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x7a>
 801a1d0:	4291      	cmp	r1, r2
 801a1d2:	d332      	bcc.n	801a23a <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x76>
 801a1d4:	b3aa      	cbz	r2, 801a242 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x7e>
 801a1d6:	f44f 7640 	mov.w	r6, #768	; 0x300
 801a1da:	4371      	muls	r1, r6
 801a1dc:	fbb1 f1f2 	udiv	r1, r1, r2
 801a1e0:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 801a1e4:	f3c1 0195 	ubfx	r1, r1, #2, #22
 801a1e8:	293f      	cmp	r1, #63	; 0x3f
 801a1ea:	d92d      	bls.n	801a248 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x84>
 801a1ec:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
 801a1f0:	bf28      	it	cs
 801a1f2:	f44f 71c0 	movcs.w	r1, #384	; 0x180
 801a1f6:	f995 2348 	ldrsb.w	r2, [r5, #840]	; 0x348
 801a1fa:	4282      	cmp	r2, r0
 801a1fc:	dc26      	bgt.n	801a24c <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x88>
 801a1fe:	f102 050e 	add.w	r5, r2, #14
 801a202:	4285      	cmp	r5, r0
 801a204:	db25      	blt.n	801a252 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x8e>
 801a206:	1a82      	subs	r2, r0, r2
 801a208:	f1c2 020f 	rsb	r2, r2, #15
 801a20c:	0392      	lsls	r2, r2, #14
 801a20e:	f240 105d 	movw	r0, #349	; 0x15d
 801a212:	fb92 f2f0 	sdiv	r2, r2, r0
 801a216:	3240      	adds	r2, #64	; 0x40
 801a218:	b1ec      	cbz	r4, 801a256 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x92>
 801a21a:	42a3      	cmp	r3, r4
 801a21c:	bf28      	it	cs
 801a21e:	4623      	movcs	r3, r4
 801a220:	f44f 30a0 	mov.w	r0, #81920	; 0x14000
 801a224:	4343      	muls	r3, r0
 801a226:	fbb3 f3f4 	udiv	r3, r3, r4
 801a22a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801a22e:	0a1b      	lsrs	r3, r3, #8
 801a230:	3140      	adds	r1, #64	; 0x40
 801a232:	1888      	adds	r0, r1, r2
 801a234:	4418      	add	r0, r3
 801a236:	b280      	uxth	r0, r0
 801a238:	bd70      	pop	{r4, r5, r6, pc}
 801a23a:	4611      	mov	r1, r2
 801a23c:	e7cb      	b.n	801a1d6 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x12>
 801a23e:	2180      	movs	r1, #128	; 0x80
 801a240:	e7d4      	b.n	801a1ec <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x28>
 801a242:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a246:	e7d1      	b.n	801a1ec <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x28>
 801a248:	2140      	movs	r1, #64	; 0x40
 801a24a:	e7d4      	b.n	801a1f6 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x32>
 801a24c:	f44f 7240 	mov.w	r2, #768	; 0x300
 801a250:	e7e2      	b.n	801a218 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x54>
 801a252:	2240      	movs	r2, #64	; 0x40
 801a254:	e7e0      	b.n	801a218 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x54>
 801a256:	2380      	movs	r3, #128	; 0x80
 801a258:	e7ea      	b.n	801a230 <cf0f8df5c05700b487fbecc2e58d189165f075ac+0x6c>
 801a25a:	bf00      	nop
 801a25c:	20000040 	.word	0x20000040

0801a260 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d>:
 801a260:	b507      	push	{r0, r1, r2, lr}
 801a262:	4b07      	ldr	r3, [pc, #28]	; (801a280 <cbd7b6f62340cadc4c9d6b85c02582c6f55ce23d+0x20>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2264      	movs	r2, #100	; 0x64
 801a268:	f993 0348 	ldrsb.w	r0, [r3, #840]	; 0x348
 801a26c:	2301      	movs	r3, #1
 801a26e:	e9cd 3200 	strd	r3, r2, [sp]
 801a272:	2200      	movs	r2, #0
 801a274:	4611      	mov	r1, r2
 801a276:	f7ff ffa5 	bl	801a1c4 <cf0f8df5c05700b487fbecc2e58d189165f075ac>
 801a27a:	b003      	add	sp, #12
 801a27c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a280:	20000040 	.word	0x20000040

0801a284 <dc0ee848a3d94ab51a590cd57f74390ab215fb95>:
 801a284:	2825      	cmp	r0, #37	; 0x25
 801a286:	d90e      	bls.n	801a2a6 <dc0ee848a3d94ab51a590cd57f74390ab215fb95+0x22>
 801a288:	2364      	movs	r3, #100	; 0x64
 801a28a:	4359      	muls	r1, r3
 801a28c:	fbb1 f0f0 	udiv	r0, r1, r0
 801a290:	284a      	cmp	r0, #74	; 0x4a
 801a292:	d90b      	bls.n	801a2ac <dc0ee848a3d94ab51a590cd57f74390ab215fb95+0x28>
 801a294:	384b      	subs	r0, #75	; 0x4b
 801a296:	2319      	movs	r3, #25
 801a298:	0280      	lsls	r0, r0, #10
 801a29a:	fbb0 f0f3 	udiv	r0, r0, r3
 801a29e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 801a2a2:	b280      	uxth	r0, r0
 801a2a4:	4770      	bx	lr
 801a2a6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a2aa:	4770      	bx	lr
 801a2ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a2b0:	4770      	bx	lr
	...

0801a2b4 <TOPOLOGY_IsAcceptable>:
 801a2b4:	4b13      	ldr	r3, [pc, #76]	; (801a304 <TOPOLOGY_IsAcceptable+0x50>)
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2bc:	4680      	mov	r8, r0
 801a2be:	460d      	mov	r5, r1
 801a2c0:	b1eb      	cbz	r3, 801a2fe <TOPOLOGY_IsAcceptable+0x4a>
 801a2c2:	4b11      	ldr	r3, [pc, #68]	; (801a308 <TOPOLOGY_IsAcceptable+0x54>)
 801a2c4:	681e      	ldr	r6, [r3, #0]
 801a2c6:	b1d6      	cbz	r6, 801a2fe <TOPOLOGY_IsAcceptable+0x4a>
 801a2c8:	2002      	movs	r0, #2
 801a2ca:	f7f2 f9ad 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801a2ce:	f7f3 f8af 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801a2d2:	4b0e      	ldr	r3, [pc, #56]	; (801a30c <TOPOLOGY_IsAcceptable+0x58>)
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	e9d3 4700 	ldrd	r4, r7, [r3]
 801a2da:	428f      	cmp	r7, r1
 801a2dc:	bf08      	it	eq
 801a2de:	4284      	cmpeq	r4, r0
 801a2e0:	d105      	bne.n	801a2ee <TOPOLOGY_IsAcceptable+0x3a>
 801a2e2:	e9d3 4702 	ldrd	r4, r7, [r3, #8]
 801a2e6:	42af      	cmp	r7, r5
 801a2e8:	bf08      	it	eq
 801a2ea:	4544      	cmpeq	r4, r8
 801a2ec:	d007      	beq.n	801a2fe <TOPOLOGY_IsAcceptable+0x4a>
 801a2ee:	3201      	adds	r2, #1
 801a2f0:	4296      	cmp	r6, r2
 801a2f2:	f103 0310 	add.w	r3, r3, #16
 801a2f6:	d1ee      	bne.n	801a2d6 <TOPOLOGY_IsAcceptable+0x22>
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2fe:	2001      	movs	r0, #1
 801a300:	e7fb      	b.n	801a2fa <TOPOLOGY_IsAcceptable+0x46>
 801a302:	bf00      	nop
 801a304:	0801f090 	.word	0x0801f090
 801a308:	0801f0a8 	.word	0x0801f0a8
 801a30c:	0801f098 	.word	0x0801f098

0801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>:
 801a310:	780b      	ldrb	r3, [r1, #0]
 801a312:	7043      	strb	r3, [r0, #1]
 801a314:	784b      	ldrb	r3, [r1, #1]
 801a316:	7003      	strb	r3, [r0, #0]
 801a318:	4770      	bx	lr
	...

0801a31c <9aa1c7f7136549b4c61c7ca6983f673760c5352f>:
 801a31c:	4b02      	ldr	r3, [pc, #8]	; (801a328 <9aa1c7f7136549b4c61c7ca6983f673760c5352f+0xc>)
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	2200      	movs	r2, #0
 801a322:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
 801a326:	4770      	bx	lr
 801a328:	20000040 	.word	0x20000040

0801a32c <76cd6211f2085e3d946bd747f2187c2e80301a64>:
 801a32c:	4603      	mov	r3, r0
 801a32e:	7880      	ldrb	r0, [r0, #2]
 801a330:	2802      	cmp	r0, #2
 801a332:	d814      	bhi.n	801a35e <76cd6211f2085e3d946bd747f2187c2e80301a64+0x32>
 801a334:	2801      	cmp	r0, #1
 801a336:	d101      	bne.n	801a33c <76cd6211f2085e3d946bd747f2187c2e80301a64+0x10>
 801a338:	889a      	ldrh	r2, [r3, #4]
 801a33a:	b18a      	cbz	r2, 801a360 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x34>
 801a33c:	4a09      	ldr	r2, [pc, #36]	; (801a364 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x38>)
 801a33e:	6811      	ldr	r1, [r2, #0]
 801a340:	f8d1 25b0 	ldr.w	r2, [r1, #1456]	; 0x5b0
 801a344:	2000      	movs	r0, #0
 801a346:	6118      	str	r0, [r3, #16]
 801a348:	b132      	cbz	r2, 801a358 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x2c>
 801a34a:	4611      	mov	r1, r2
 801a34c:	6912      	ldr	r2, [r2, #16]
 801a34e:	2a00      	cmp	r2, #0
 801a350:	d1fb      	bne.n	801a34a <76cd6211f2085e3d946bd747f2187c2e80301a64+0x1e>
 801a352:	610b      	str	r3, [r1, #16]
 801a354:	2000      	movs	r0, #0
 801a356:	4770      	bx	lr
 801a358:	f8c1 35b0 	str.w	r3, [r1, #1456]	; 0x5b0
 801a35c:	e7fa      	b.n	801a354 <76cd6211f2085e3d946bd747f2187c2e80301a64+0x28>
 801a35e:	2001      	movs	r0, #1
 801a360:	4770      	bx	lr
 801a362:	bf00      	nop
 801a364:	20000040 	.word	0x20000040

0801a368 <008a3a43d97272e7b0f59f361a8c8969876e60dd>:
 801a368:	4b07      	ldr	r3, [pc, #28]	; (801a388 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x20>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801a370:	b90b      	cbnz	r3, 801a376 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0xe>
 801a372:	2003      	movs	r0, #3
 801a374:	4770      	bx	lr
 801a376:	691a      	ldr	r2, [r3, #16]
 801a378:	4282      	cmp	r2, r0
 801a37a:	d103      	bne.n	801a384 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x1c>
 801a37c:	6902      	ldr	r2, [r0, #16]
 801a37e:	611a      	str	r2, [r3, #16]
 801a380:	2000      	movs	r0, #0
 801a382:	4770      	bx	lr
 801a384:	4613      	mov	r3, r2
 801a386:	e7f3      	b.n	801a370 <008a3a43d97272e7b0f59f361a8c8969876e60dd+0x8>
 801a388:	20000040 	.word	0x20000040

0801a38c <09c9c31144d89e446fc56189171072a9b46992fd>:
 801a38c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a390:	4699      	mov	r9, r3
 801a392:	4b6f      	ldr	r3, [pc, #444]	; (801a550 <09c9c31144d89e446fc56189171072a9b46992fd+0x1c4>)
 801a394:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	f8d3 55b0 	ldr.w	r5, [r3, #1456]	; 0x5b0
 801a39e:	4606      	mov	r6, r0
 801a3a0:	4690      	mov	r8, r2
 801a3a2:	b95d      	cbnz	r5, 801a3bc <09c9c31144d89e446fc56189171072a9b46992fd+0x30>
 801a3a4:	2304      	movs	r3, #4
 801a3a6:	9300      	str	r3, [sp, #0]
 801a3a8:	4b6a      	ldr	r3, [pc, #424]	; (801a554 <09c9c31144d89e446fc56189171072a9b46992fd+0x1c8>)
 801a3aa:	9301      	str	r3, [sp, #4]
 801a3ac:	ab02      	add	r3, sp, #8
 801a3ae:	e913 0003 	ldmdb	r3, {r0, r1}
 801a3b2:	4a69      	ldr	r2, [pc, #420]	; (801a558 <09c9c31144d89e446fc56189171072a9b46992fd+0x1cc>)
 801a3b4:	f7f6 f93e 	bl	8010634 <LOGGER_PrintLine>
 801a3b8:	2003      	movs	r0, #3
 801a3ba:	e0c6      	b.n	801a54a <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 801a3bc:	428d      	cmp	r5, r1
 801a3be:	f000 80b6 	beq.w	801a52e <09c9c31144d89e446fc56189171072a9b46992fd+0x1a2>
 801a3c2:	692d      	ldr	r5, [r5, #16]
 801a3c4:	e7ed      	b.n	801a3a2 <09c9c31144d89e446fc56189171072a9b46992fd+0x16>
 801a3c6:	20a0      	movs	r0, #160	; 0xa0
 801a3c8:	f7f3 fc56 	bl	800dc78 <331ec243926b1d9fd1d86c735e311ea19678e45f>
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	f000 80ab 	beq.w	801a52a <09c9c31144d89e446fc56189171072a9b46992fd+0x19e>
 801a3d4:	2380      	movs	r3, #128	; 0x80
 801a3d6:	7043      	strb	r3, [r0, #1]
 801a3d8:	2311      	movs	r3, #17
 801a3da:	7403      	strb	r3, [r0, #16]
 801a3dc:	882b      	ldrh	r3, [r5, #0]
 801a3de:	8283      	strh	r3, [r0, #20]
 801a3e0:	2303      	movs	r3, #3
 801a3e2:	7743      	strb	r3, [r0, #29]
 801a3e4:	f8a0 8012 	strh.w	r8, [r0, #18]
 801a3e8:	f104 031e 	add.w	r3, r4, #30
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	f106 0210 	add.w	r2, r6, #16
 801a3f2:	f850 1b04 	ldr.w	r1, [r0], #4
 801a3f6:	f843 1b04 	str.w	r1, [r3], #4
 801a3fa:	4290      	cmp	r0, r2
 801a3fc:	d1f9      	bne.n	801a3f2 <09c9c31144d89e446fc56189171072a9b46992fd+0x66>
 801a3fe:	4639      	mov	r1, r7
 801a400:	4620      	mov	r0, r4
 801a402:	f000 fd17 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a406:	463a      	mov	r2, r7
 801a408:	6860      	ldr	r0, [r4, #4]
 801a40a:	4649      	mov	r1, r9
 801a40c:	f001 fe6b 	bl	801c0e6 <memcpy>
 801a410:	2300      	movs	r3, #0
 801a412:	7463      	strb	r3, [r4, #17]
 801a414:	8aa3      	ldrh	r3, [r4, #20]
 801a416:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801a41a:	b292      	uxth	r2, r2
 801a41c:	2aff      	cmp	r2, #255	; 0xff
 801a41e:	d83e      	bhi.n	801a49e <09c9c31144d89e446fc56189171072a9b46992fd+0x112>
 801a420:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 801a424:	b29b      	uxth	r3, r3
 801a426:	2501      	movs	r5, #1
 801a428:	2b0f      	cmp	r3, #15
 801a42a:	7465      	strb	r5, [r4, #17]
 801a42c:	d805      	bhi.n	801a43a <09c9c31144d89e446fc56189171072a9b46992fd+0xae>
 801a42e:	8a63      	ldrh	r3, [r4, #18]
 801a430:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 801a434:	b29b      	uxth	r3, r3
 801a436:	2b0f      	cmp	r3, #15
 801a438:	d91e      	bls.n	801a478 <09c9c31144d89e446fc56189171072a9b46992fd+0xec>
 801a43a:	2101      	movs	r1, #1
 801a43c:	4620      	mov	r0, r4
 801a43e:	f000 fcf9 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a442:	6863      	ldr	r3, [r4, #4]
 801a444:	8aa2      	ldrh	r2, [r4, #20]
 801a446:	701a      	strb	r2, [r3, #0]
 801a448:	2102      	movs	r1, #2
 801a44a:	4620      	mov	r0, r4
 801a44c:	f000 fcf2 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a450:	6860      	ldr	r0, [r4, #4]
 801a452:	f104 0112 	add.w	r1, r4, #18
 801a456:	f7ff ff5b 	bl	801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a45a:	2101      	movs	r1, #1
 801a45c:	4620      	mov	r0, r4
 801a45e:	f000 fce9 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a462:	6863      	ldr	r3, [r4, #4]
 801a464:	22f5      	movs	r2, #245	; 0xf5
 801a466:	701a      	strb	r2, [r3, #0]
 801a468:	4620      	mov	r0, r4
 801a46a:	f7fd fb84 	bl	8017b76 <00af7f89235fe04a2b2b59d942644988487fcbf4>
 801a46e:	2800      	cmp	r0, #0
 801a470:	bf0c      	ite	eq
 801a472:	2005      	moveq	r0, #5
 801a474:	2000      	movne	r0, #0
 801a476:	e068      	b.n	801a54a <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 801a478:	4629      	mov	r1, r5
 801a47a:	4620      	mov	r0, r4
 801a47c:	f000 fcda 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a480:	8aa3      	ldrh	r3, [r4, #20]
 801a482:	8a61      	ldrh	r1, [r4, #18]
 801a484:	6862      	ldr	r2, [r4, #4]
 801a486:	f003 030f 	and.w	r3, r3, #15
 801a48a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801a48e:	7013      	strb	r3, [r2, #0]
 801a490:	4629      	mov	r1, r5
 801a492:	4620      	mov	r0, r4
 801a494:	f000 fcce 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a498:	6863      	ldr	r3, [r4, #4]
 801a49a:	22f7      	movs	r2, #247	; 0xf7
 801a49c:	e7e3      	b.n	801a466 <09c9c31144d89e446fc56189171072a9b46992fd+0xda>
 801a49e:	8a63      	ldrh	r3, [r4, #18]
 801a4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	2bff      	cmp	r3, #255	; 0xff
 801a4a8:	f104 0614 	add.w	r6, r4, #20
 801a4ac:	d817      	bhi.n	801a4de <09c9c31144d89e446fc56189171072a9b46992fd+0x152>
 801a4ae:	2501      	movs	r5, #1
 801a4b0:	2102      	movs	r1, #2
 801a4b2:	7465      	strb	r5, [r4, #17]
 801a4b4:	4620      	mov	r0, r4
 801a4b6:	f000 fcbd 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a4ba:	6860      	ldr	r0, [r4, #4]
 801a4bc:	4631      	mov	r1, r6
 801a4be:	f7ff ff27 	bl	801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a4c2:	4629      	mov	r1, r5
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	f000 fcb5 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a4ca:	6863      	ldr	r3, [r4, #4]
 801a4cc:	8a62      	ldrh	r2, [r4, #18]
 801a4ce:	701a      	strb	r2, [r3, #0]
 801a4d0:	4629      	mov	r1, r5
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f000 fcae 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a4d8:	6863      	ldr	r3, [r4, #4]
 801a4da:	22f6      	movs	r2, #246	; 0xf6
 801a4dc:	e7c3      	b.n	801a466 <09c9c31144d89e446fc56189171072a9b46992fd+0xda>
 801a4de:	2108      	movs	r1, #8
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	f000 fca7 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801a4e6:	6860      	ldr	r0, [r4, #4]
 801a4e8:	f104 0112 	add.w	r1, r4, #18
 801a4ec:	f7ff ff10 	bl	801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a4f0:	6860      	ldr	r0, [r4, #4]
 801a4f2:	4631      	mov	r1, r6
 801a4f4:	3002      	adds	r0, #2
 801a4f6:	f7ff ff0b 	bl	801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a4fa:	6860      	ldr	r0, [r4, #4]
 801a4fc:	7a23      	ldrb	r3, [r4, #8]
 801a4fe:	f8ad 3000 	strh.w	r3, [sp]
 801a502:	4669      	mov	r1, sp
 801a504:	3004      	adds	r0, #4
 801a506:	f7ff ff03 	bl	801a310 <a0e683530d0c083abc75a62811790ac1bd2e23b8>
 801a50a:	6861      	ldr	r1, [r4, #4]
 801a50c:	2005      	movs	r0, #5
 801a50e:	1d8d      	adds	r5, r1, #6
 801a510:	f7f2 f88a 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801a514:	4606      	mov	r6, r0
 801a516:	2002      	movs	r0, #2
 801a518:	f7f2 f886 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801a51c:	1c72      	adds	r2, r6, #1
 801a51e:	1c43      	adds	r3, r0, #1
 801a520:	4629      	mov	r1, r5
 801a522:	4620      	mov	r0, r4
 801a524:	f000 fd42 	bl	801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>
 801a528:	e79e      	b.n	801a468 <09c9c31144d89e446fc56189171072a9b46992fd+0xdc>
 801a52a:	2004      	movs	r0, #4
 801a52c:	e00d      	b.n	801a54a <09c9c31144d89e446fc56189171072a9b46992fd+0x1be>
 801a52e:	2f7c      	cmp	r7, #124	; 0x7c
 801a530:	f67f af49 	bls.w	801a3c6 <09c9c31144d89e446fc56189171072a9b46992fd+0x3a>
 801a534:	2304      	movs	r3, #4
 801a536:	9300      	str	r3, [sp, #0]
 801a538:	4b06      	ldr	r3, [pc, #24]	; (801a554 <09c9c31144d89e446fc56189171072a9b46992fd+0x1c8>)
 801a53a:	9301      	str	r3, [sp, #4]
 801a53c:	ab02      	add	r3, sp, #8
 801a53e:	e913 0003 	ldmdb	r3, {r0, r1}
 801a542:	4a06      	ldr	r2, [pc, #24]	; (801a55c <09c9c31144d89e446fc56189171072a9b46992fd+0x1d0>)
 801a544:	f7f6 f876 	bl	8010634 <LOGGER_PrintLine>
 801a548:	2002      	movs	r0, #2
 801a54a:	b003      	add	sp, #12
 801a54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a550:	20000040 	.word	0x20000040
 801a554:	08021e3c 	.word	0x08021e3c
 801a558:	08021e5b 	.word	0x08021e5b
 801a55c:	08021e40 	.word	0x08021e40

0801a560 <32c59f113e62a8491f5b52f96af26c008a4f227e>:
 801a560:	2380      	movs	r3, #128	; 0x80
 801a562:	b513      	push	{r0, r1, r4, lr}
 801a564:	4604      	mov	r4, r0
 801a566:	7043      	strb	r3, [r0, #1]
 801a568:	b949      	cbnz	r1, 801a57e <32c59f113e62a8491f5b52f96af26c008a4f227e+0x1e>
 801a56a:	2304      	movs	r3, #4
 801a56c:	9300      	str	r3, [sp, #0]
 801a56e:	4b07      	ldr	r3, [pc, #28]	; (801a58c <32c59f113e62a8491f5b52f96af26c008a4f227e+0x2c>)
 801a570:	9301      	str	r3, [sp, #4]
 801a572:	ab02      	add	r3, sp, #8
 801a574:	e913 0003 	ldmdb	r3, {r0, r1}
 801a578:	4a05      	ldr	r2, [pc, #20]	; (801a590 <32c59f113e62a8491f5b52f96af26c008a4f227e+0x30>)
 801a57a:	f7f6 f85b 	bl	8010634 <LOGGER_PrintLine>
 801a57e:	4620      	mov	r0, r4
 801a580:	b002      	add	sp, #8
 801a582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a586:	f7f3 bc35 	b.w	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801a58a:	bf00      	nop
 801a58c:	08021e3c 	.word	0x08021e3c
 801a590:	08021e88 	.word	0x08021e88

0801a594 <078582282b526a1ec1227869e1581c8a1811b440>:
 801a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a598:	2380      	movs	r3, #128	; 0x80
 801a59a:	7043      	strb	r3, [r0, #1]
 801a59c:	7c42      	ldrb	r2, [r0, #17]
 801a59e:	6843      	ldr	r3, [r0, #4]
 801a5a0:	b088      	sub	sp, #32
 801a5a2:	781d      	ldrb	r5, [r3, #0]
 801a5a4:	4604      	mov	r4, r0
 801a5a6:	2700      	movs	r7, #0
 801a5a8:	2a00      	cmp	r2, #0
 801a5aa:	d06c      	beq.n	801a686 <078582282b526a1ec1227869e1581c8a1811b440+0xf2>
 801a5ac:	2101      	movs	r1, #1
 801a5ae:	f000 fc81 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801a5b2:	f005 0203 	and.w	r2, r5, #3
 801a5b6:	2a02      	cmp	r2, #2
 801a5b8:	6863      	ldr	r3, [r4, #4]
 801a5ba:	d04e      	beq.n	801a65a <078582282b526a1ec1227869e1581c8a1811b440+0xc6>
 801a5bc:	2a03      	cmp	r2, #3
 801a5be:	d055      	beq.n	801a66c <078582282b526a1ec1227869e1581c8a1811b440+0xd8>
 801a5c0:	7819      	ldrb	r1, [r3, #0]
 801a5c2:	2a01      	cmp	r2, #1
 801a5c4:	785a      	ldrb	r2, [r3, #1]
 801a5c6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 801a5ca:	8262      	strh	r2, [r4, #18]
 801a5cc:	d03f      	beq.n	801a64e <078582282b526a1ec1227869e1581c8a1811b440+0xba>
 801a5ce:	789a      	ldrb	r2, [r3, #2]
 801a5d0:	78db      	ldrb	r3, [r3, #3]
 801a5d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a5d6:	82a3      	strh	r3, [r4, #20]
 801a5d8:	2104      	movs	r1, #4
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f104 051d 	add.w	r5, r4, #29
 801a5e0:	f000 fc68 	bl	801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>
 801a5e4:	4628      	mov	r0, r5
 801a5e6:	f7f2 fef5 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801a5ea:	4606      	mov	r6, r0
 801a5ec:	b118      	cbz	r0, 801a5f6 <078582282b526a1ec1227869e1581c8a1811b440+0x62>
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	f7f3 fa38 	bl	800da64 <f26cfbfa45ddc428fa93a21aa284ea921322a858>
 801a5f4:	4607      	mov	r7, r0
 801a5f6:	aa04      	add	r2, sp, #16
 801a5f8:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 801a5fc:	f104 0c3f 	add.w	ip, r4, #63	; 0x3f
 801a600:	4690      	mov	r8, r2
 801a602:	6818      	ldr	r0, [r3, #0]
 801a604:	6859      	ldr	r1, [r3, #4]
 801a606:	4615      	mov	r5, r2
 801a608:	c503      	stmia	r5!, {r0, r1}
 801a60a:	3308      	adds	r3, #8
 801a60c:	4563      	cmp	r3, ip
 801a60e:	462a      	mov	r2, r5
 801a610:	d1f7      	bne.n	801a602 <078582282b526a1ec1227869e1581c8a1811b440+0x6e>
 801a612:	4b39      	ldr	r3, [pc, #228]	; (801a6f8 <078582282b526a1ec1227869e1581c8a1811b440+0x164>)
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	f8d3 55b0 	ldr.w	r5, [r3, #1456]	; 0x5b0
 801a61a:	f04f 0900 	mov.w	r9, #0
 801a61e:	2d00      	cmp	r5, #0
 801a620:	d13c      	bne.n	801a69c <078582282b526a1ec1227869e1581c8a1811b440+0x108>
 801a622:	f1b9 0f00 	cmp.w	r9, #0
 801a626:	d10c      	bne.n	801a642 <078582282b526a1ec1227869e1581c8a1811b440+0xae>
 801a628:	2305      	movs	r3, #5
 801a62a:	9302      	str	r3, [sp, #8]
 801a62c:	4b33      	ldr	r3, [pc, #204]	; (801a6fc <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 801a62e:	9303      	str	r3, [sp, #12]
 801a630:	2005      	movs	r0, #5
 801a632:	8aa3      	ldrh	r3, [r4, #20]
 801a634:	4a32      	ldr	r2, [pc, #200]	; (801a700 <078582282b526a1ec1227869e1581c8a1811b440+0x16c>)
 801a636:	4931      	ldr	r1, [pc, #196]	; (801a6fc <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 801a638:	f7f5 fffc 	bl	8010634 <LOGGER_PrintLine>
 801a63c:	8aa0      	ldrh	r0, [r4, #20]
 801a63e:	f000 f963 	bl	801a908 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e>
 801a642:	4620      	mov	r0, r4
 801a644:	f7f3 fbd6 	bl	800ddf4 <218a9716e8ca33d3905e4d5d678efcb718f6f31f>
 801a648:	b008      	add	sp, #32
 801a64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a64e:	789b      	ldrb	r3, [r3, #2]
 801a650:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801a654:	82a3      	strh	r3, [r4, #20]
 801a656:	2103      	movs	r1, #3
 801a658:	e7bf      	b.n	801a5da <078582282b526a1ec1227869e1581c8a1811b440+0x46>
 801a65a:	781a      	ldrb	r2, [r3, #0]
 801a65c:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 801a660:	8262      	strh	r2, [r4, #18]
 801a662:	785a      	ldrb	r2, [r3, #1]
 801a664:	789b      	ldrb	r3, [r3, #2]
 801a666:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a66a:	e7f3      	b.n	801a654 <078582282b526a1ec1227869e1581c8a1811b440+0xc0>
 801a66c:	781a      	ldrb	r2, [r3, #0]
 801a66e:	0912      	lsrs	r2, r2, #4
 801a670:	f5a2 6275 	sub.w	r2, r2, #3920	; 0xf50
 801a674:	8262      	strh	r2, [r4, #18]
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	f003 030f 	and.w	r3, r3, #15
 801a67c:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 801a680:	82a3      	strh	r3, [r4, #20]
 801a682:	2101      	movs	r1, #1
 801a684:	e7a9      	b.n	801a5da <078582282b526a1ec1227869e1581c8a1811b440+0x46>
 801a686:	785a      	ldrb	r2, [r3, #1]
 801a688:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 801a68c:	8242      	strh	r2, [r0, #18]
 801a68e:	789a      	ldrb	r2, [r3, #2]
 801a690:	78db      	ldrb	r3, [r3, #3]
 801a692:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a696:	8283      	strh	r3, [r0, #20]
 801a698:	2108      	movs	r1, #8
 801a69a:	e79f      	b.n	801a5dc <078582282b526a1ec1227869e1581c8a1811b440+0x48>
 801a69c:	882a      	ldrh	r2, [r5, #0]
 801a69e:	8aa3      	ldrh	r3, [r4, #20]
 801a6a0:	429a      	cmp	r2, r3
 801a6a2:	d11d      	bne.n	801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6a4:	78ab      	ldrb	r3, [r5, #2]
 801a6a6:	2b01      	cmp	r3, #1
 801a6a8:	d012      	beq.n	801a6d0 <078582282b526a1ec1227869e1581c8a1811b440+0x13c>
 801a6aa:	2b02      	cmp	r3, #2
 801a6ac:	d001      	beq.n	801a6b2 <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 801a6ae:	b9cb      	cbnz	r3, 801a6e4 <078582282b526a1ec1227869e1581c8a1811b440+0x150>
 801a6b0:	b9b6      	cbnz	r6, 801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6b2:	f8d5 a008 	ldr.w	sl, [r5, #8]
 801a6b6:	f1ba 0f00 	cmp.w	sl, #0
 801a6ba:	d011      	beq.n	801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6bc:	7a23      	ldrb	r3, [r4, #8]
 801a6be:	9300      	str	r3, [sp, #0]
 801a6c0:	6863      	ldr	r3, [r4, #4]
 801a6c2:	8a62      	ldrh	r2, [r4, #18]
 801a6c4:	4641      	mov	r1, r8
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	47d0      	blx	sl
 801a6ca:	f04f 0901 	mov.w	r9, #1
 801a6ce:	e007      	b.n	801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6d0:	b136      	cbz	r6, 801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6d2:	88ab      	ldrh	r3, [r5, #4]
 801a6d4:	42bb      	cmp	r3, r7
 801a6d6:	d0ec      	beq.n	801a6b2 <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 801a6d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6dc:	4293      	cmp	r3, r2
 801a6de:	d0e8      	beq.n	801a6b2 <078582282b526a1ec1227869e1581c8a1811b440+0x11e>
 801a6e0:	692d      	ldr	r5, [r5, #16]
 801a6e2:	e79c      	b.n	801a61e <078582282b526a1ec1227869e1581c8a1811b440+0x8a>
 801a6e4:	2303      	movs	r3, #3
 801a6e6:	9302      	str	r3, [sp, #8]
 801a6e8:	4b04      	ldr	r3, [pc, #16]	; (801a6fc <078582282b526a1ec1227869e1581c8a1811b440+0x168>)
 801a6ea:	4a06      	ldr	r2, [pc, #24]	; (801a704 <078582282b526a1ec1227869e1581c8a1811b440+0x170>)
 801a6ec:	9303      	str	r3, [sp, #12]
 801a6ee:	4619      	mov	r1, r3
 801a6f0:	2003      	movs	r0, #3
 801a6f2:	f7f5 ff9f 	bl	8010634 <LOGGER_PrintLine>
 801a6f6:	e7f3      	b.n	801a6e0 <078582282b526a1ec1227869e1581c8a1811b440+0x14c>
 801a6f8:	20000040 	.word	0x20000040
 801a6fc:	08021e3c 	.word	0x08021e3c
 801a700:	08021eb1 	.word	0x08021eb1
 801a704:	08021e9e 	.word	0x08021e9e

0801a708 <dfc328393dc363adf936780696ec1bbccb146c7c>:
 801a708:	b410      	push	{r4}
 801a70a:	4b08      	ldr	r3, [pc, #32]	; (801a72c <dfc328393dc363adf936780696ec1bbccb146c7c+0x24>)
 801a70c:	6819      	ldr	r1, [r3, #0]
 801a70e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
 801a712:	f501 5147 	add.w	r1, r1, #12736	; 0x31c0
 801a716:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
 801a71a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801a71e:	f8b3 01f8 	ldrh.w	r0, [r3, #504]	; 0x1f8
 801a722:	313c      	adds	r1, #60	; 0x3c
 801a724:	4623      	mov	r3, r4
 801a726:	bc10      	pop	{r4}
 801a728:	4718      	bx	r3
 801a72a:	bf00      	nop
 801a72c:	20000040 	.word	0x20000040

0801a730 <b827d3e4788916e9a702935e78a76211b838ecbc>:
 801a730:	4b04      	ldr	r3, [pc, #16]	; (801a744 <b827d3e4788916e9a702935e78a76211b838ecbc+0x14>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a738:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801a73c:	b103      	cbz	r3, 801a740 <b827d3e4788916e9a702935e78a76211b838ecbc+0x10>
 801a73e:	4718      	bx	r3
 801a740:	4770      	bx	lr
 801a742:	bf00      	nop
 801a744:	20000040 	.word	0x20000040

0801a748 <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2>:
 801a748:	4b05      	ldr	r3, [pc, #20]	; (801a760 <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2+0x18>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a750:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801a754:	b112      	cbz	r2, 801a75c <3f88cf0e7f5c43193f315c7b75ee70b96c6a02c2+0x14>
 801a756:	f8b3 0224 	ldrh.w	r0, [r3, #548]	; 0x224
 801a75a:	4710      	bx	r2
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop
 801a760:	20000040 	.word	0x20000040

0801a764 <1fa7e28f7c375400df62198096d309590e03a8ff>:
 801a764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a766:	4b1b      	ldr	r3, [pc, #108]	; (801a7d4 <1fa7e28f7c375400df62198096d309590e03a8ff+0x70>)
 801a768:	681c      	ldr	r4, [r3, #0]
 801a76a:	b08f      	sub	sp, #60	; 0x3c
 801a76c:	2300      	movs	r3, #0
 801a76e:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 801a772:	aa01      	add	r2, sp, #4
 801a774:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a778:	f504 77f3 	add.w	r7, r4, #486	; 0x1e6
 801a77c:	f504 73e3 	add.w	r3, r4, #454	; 0x1c6
 801a780:	4616      	mov	r6, r2
 801a782:	6818      	ldr	r0, [r3, #0]
 801a784:	6859      	ldr	r1, [r3, #4]
 801a786:	4615      	mov	r5, r2
 801a788:	c503      	stmia	r5!, {r0, r1}
 801a78a:	3308      	adds	r3, #8
 801a78c:	42bb      	cmp	r3, r7
 801a78e:	462a      	mov	r2, r5
 801a790:	d1f7      	bne.n	801a782 <1fa7e28f7c375400df62198096d309590e03a8ff+0x1e>
 801a792:	f504 73f3 	add.w	r3, r4, #486	; 0x1e6
 801a796:	aa09      	add	r2, sp, #36	; 0x24
 801a798:	f504 77fb 	add.w	r7, r4, #502	; 0x1f6
 801a79c:	6818      	ldr	r0, [r3, #0]
 801a79e:	6859      	ldr	r1, [r3, #4]
 801a7a0:	4615      	mov	r5, r2
 801a7a2:	c503      	stmia	r5!, {r0, r1}
 801a7a4:	3308      	adds	r3, #8
 801a7a6:	42bb      	cmp	r3, r7
 801a7a8:	462a      	mov	r2, r5
 801a7aa:	d1f7      	bne.n	801a79c <1fa7e28f7c375400df62198096d309590e03a8ff+0x38>
 801a7ac:	881b      	ldrh	r3, [r3, #0]
 801a7ae:	802b      	strh	r3, [r5, #0]
 801a7b0:	f7f6 fcd2 	bl	8011158 <02aa084aaa87b61bfa00c296d0ea733e41c0e799>
 801a7b4:	2132      	movs	r1, #50	; 0x32
 801a7b6:	4602      	mov	r2, r0
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	f7f6 fcdd 	bl	8011178 <f4e96df7a22571dfa32822f4af8ba70dac43b850>
 801a7be:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 801a7c2:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
 801a7c6:	4631      	mov	r1, r6
 801a7c8:	f8b4 01f8 	ldrh.w	r0, [r4, #504]	; 0x1f8
 801a7cc:	4798      	blx	r3
 801a7ce:	b00f      	add	sp, #60	; 0x3c
 801a7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	20000040 	.word	0x20000040

0801a7d8 <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc>:
 801a7d8:	b570      	push	{r4, r5, r6, lr}
 801a7da:	4b0c      	ldr	r3, [pc, #48]	; (801a80c <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x34>)
 801a7dc:	681d      	ldr	r5, [r3, #0]
 801a7de:	f505 5449 	add.w	r4, r5, #12864	; 0x3240
 801a7e2:	f505 564e 	add.w	r6, r5, #13184	; 0x3380
 801a7e6:	3404      	adds	r4, #4
 801a7e8:	3624      	adds	r6, #36	; 0x24
 801a7ea:	7a23      	ldrb	r3, [r4, #8]
 801a7ec:	2b01      	cmp	r3, #1
 801a7ee:	d102      	bne.n	801a7f6 <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x1e>
 801a7f0:	7820      	ldrb	r0, [r4, #0]
 801a7f2:	f7f4 f9a5 	bl	800eb40 <2f27d002e6f5798bf50ec4e1714df836a8561b81>
 801a7f6:	3420      	adds	r4, #32
 801a7f8:	42b4      	cmp	r4, r6
 801a7fa:	d1f6      	bne.n	801a7ea <929ff3b2c53d5a7079feb2d801a18a5da5dbaacc+0x12>
 801a7fc:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 801a800:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 801a804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a808:	4718      	bx	r3
 801a80a:	bf00      	nop
 801a80c:	20000040 	.word	0x20000040

0801a810 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4>:
 801a810:	b410      	push	{r4}
 801a812:	4b0e      	ldr	r3, [pc, #56]	; (801a84c <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x3c>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 801a81a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 801a81e:	f8a2 01f8 	strh.w	r0, [r2, #504]	; 0x1f8
 801a822:	333c      	adds	r3, #60	; 0x3c
 801a824:	f101 0014 	add.w	r0, r1, #20
 801a828:	f851 4b04 	ldr.w	r4, [r1], #4
 801a82c:	f843 4b04 	str.w	r4, [r3], #4
 801a830:	4281      	cmp	r1, r0
 801a832:	d1f9      	bne.n	801a828 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x18>
 801a834:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 801a838:	b12b      	cbz	r3, 801a846 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x36>
 801a83a:	4805      	ldr	r0, [pc, #20]	; (801a850 <dbdc37d2cc973221dbf43eabd97e4b7b09a554e4+0x40>)
 801a83c:	bc10      	pop	{r4}
 801a83e:	220d      	movs	r2, #13
 801a840:	2100      	movs	r1, #0
 801a842:	f7f5 b869 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801a846:	bc10      	pop	{r4}
 801a848:	4770      	bx	lr
 801a84a:	bf00      	nop
 801a84c:	20000040 	.word	0x20000040
 801a850:	0801a709 	.word	0x0801a709

0801a854 <a59be9f028c32d03d0e01d3447553913a8330c11>:
 801a854:	4b02      	ldr	r3, [pc, #8]	; (801a860 <a59be9f028c32d03d0e01d3447553913a8330c11+0xc>)
 801a856:	6818      	ldr	r0, [r3, #0]
 801a858:	f500 5047 	add.w	r0, r0, #12736	; 0x31c0
 801a85c:	303c      	adds	r0, #60	; 0x3c
 801a85e:	4770      	bx	lr
 801a860:	20000040 	.word	0x20000040

0801a864 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653>:
 801a864:	4b06      	ldr	r3, [pc, #24]	; (801a880 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x1c>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a86c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801a870:	b123      	cbz	r3, 801a87c <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x18>
 801a872:	4804      	ldr	r0, [pc, #16]	; (801a884 <6d5ddf5b3d17bd4ac3ddacb004996141be4f4653+0x20>)
 801a874:	220e      	movs	r2, #14
 801a876:	2100      	movs	r1, #0
 801a878:	f7f5 b84e 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	20000040 	.word	0x20000040
 801a884:	0801a765 	.word	0x0801a765

0801a888 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc>:
 801a888:	b510      	push	{r4, lr}
 801a88a:	4b08      	ldr	r3, [pc, #32]	; (801a8ac <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x24>)
 801a88c:	681c      	ldr	r4, [r3, #0]
 801a88e:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 801a892:	f7f8 fe27 	bl	80134e4 <f13b11cc0bbf49b03ea71d42a05b941abea0a520>
 801a896:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 801a89a:	b133      	cbz	r3, 801a8aa <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x22>
 801a89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8a0:	4803      	ldr	r0, [pc, #12]	; (801a8b0 <1bd2056f29f59fc1ff168b80d42a49dbb9ec73dc+0x28>)
 801a8a2:	2210      	movs	r2, #16
 801a8a4:	2100      	movs	r1, #0
 801a8a6:	f7f5 b837 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801a8aa:	bd10      	pop	{r4, pc}
 801a8ac:	20000040 	.word	0x20000040
 801a8b0:	0801a7d9 	.word	0x0801a7d9

0801a8b4 <6a7c8072467648b34afad307e6f084585ae97774>:
 801a8b4:	4b0a      	ldr	r3, [pc, #40]	; (801a8e0 <6a7c8072467648b34afad307e6f084585ae97774+0x2c>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 801a8bc:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 801a8c0:	b162      	cbz	r2, 801a8dc <6a7c8072467648b34afad307e6f084585ae97774+0x28>
 801a8c2:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 801a8c6:	3326      	adds	r3, #38	; 0x26
 801a8c8:	f100 0210 	add.w	r2, r0, #16
 801a8cc:	f850 1b04 	ldr.w	r1, [r0], #4
 801a8d0:	f843 1b04 	str.w	r1, [r3], #4
 801a8d4:	4290      	cmp	r0, r2
 801a8d6:	d1f9      	bne.n	801a8cc <6a7c8072467648b34afad307e6f084585ae97774+0x18>
 801a8d8:	8802      	ldrh	r2, [r0, #0]
 801a8da:	801a      	strh	r2, [r3, #0]
 801a8dc:	4770      	bx	lr
 801a8de:	bf00      	nop
 801a8e0:	20000040 	.word	0x20000040

0801a8e4 <d6f04be9d8ad12cb38262f1bba36a144854d1588>:
 801a8e4:	4b06      	ldr	r3, [pc, #24]	; (801a900 <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x1c>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a8ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801a8f0:	b123      	cbz	r3, 801a8fc <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x18>
 801a8f2:	4804      	ldr	r0, [pc, #16]	; (801a904 <d6f04be9d8ad12cb38262f1bba36a144854d1588+0x20>)
 801a8f4:	220c      	movs	r2, #12
 801a8f6:	2100      	movs	r1, #0
 801a8f8:	f7f5 b80e 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801a8fc:	4770      	bx	lr
 801a8fe:	bf00      	nop
 801a900:	20000040 	.word	0x20000040
 801a904:	0801a731 	.word	0x0801a731

0801a908 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e>:
 801a908:	4b07      	ldr	r3, [pc, #28]	; (801a928 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x20>)
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a910:	f8a3 0224 	strh.w	r0, [r3, #548]	; 0x224
 801a914:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801a918:	b123      	cbz	r3, 801a924 <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x1c>
 801a91a:	4804      	ldr	r0, [pc, #16]	; (801a92c <45da0ae9d365d5954ac37be66d2ee52f526e6e5e+0x24>)
 801a91c:	2212      	movs	r2, #18
 801a91e:	2100      	movs	r1, #0
 801a920:	f7f4 bffa 	b.w	800f918 <1ccc4abfd47b530140fa698535d3d315df3ed28c>
 801a924:	4770      	bx	lr
 801a926:	bf00      	nop
 801a928:	20000040 	.word	0x20000040
 801a92c:	0801a749 	.word	0x0801a749

0801a930 <658f5a28751601d813ae36c10ddb69a9ae00a793>:
 801a930:	4b04      	ldr	r3, [pc, #16]	; (801a944 <658f5a28751601d813ae36c10ddb69a9ae00a793+0x14>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a938:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801a93c:	b103      	cbz	r3, 801a940 <658f5a28751601d813ae36c10ddb69a9ae00a793+0x10>
 801a93e:	4718      	bx	r3
 801a940:	4770      	bx	lr
 801a942:	bf00      	nop
 801a944:	20000040 	.word	0x20000040

0801a948 <e9a40864df7737216396ae2e57c8bf2439468a7c>:
 801a948:	4b04      	ldr	r3, [pc, #16]	; (801a95c <e9a40864df7737216396ae2e57c8bf2439468a7c+0x14>)
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a950:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 801a954:	b103      	cbz	r3, 801a958 <e9a40864df7737216396ae2e57c8bf2439468a7c+0x10>
 801a956:	4718      	bx	r3
 801a958:	4770      	bx	lr
 801a95a:	bf00      	nop
 801a95c:	20000040 	.word	0x20000040

0801a960 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d>:
 801a960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a964:	4b0d      	ldr	r3, [pc, #52]	; (801a99c <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d+0x3c>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a96c:	460f      	mov	r7, r1
 801a96e:	f8d3 83bc 	ldr.w	r8, [r3, #956]	; 0x3bc
 801a972:	4616      	mov	r6, r2
 801a974:	f1b8 0f00 	cmp.w	r8, #0
 801a978:	d00c      	beq.n	801a994 <b30d7ce97a9a073e92ec5e2adfc7cb092fcb104d+0x34>
 801a97a:	f7f2 fd59 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801a97e:	4605      	mov	r5, r0
 801a980:	4638      	mov	r0, r7
 801a982:	460c      	mov	r4, r1
 801a984:	f7f2 fd54 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801a988:	9600      	str	r6, [sp, #0]
 801a98a:	4602      	mov	r2, r0
 801a98c:	460b      	mov	r3, r1
 801a98e:	4628      	mov	r0, r5
 801a990:	4621      	mov	r1, r4
 801a992:	47c0      	blx	r8
 801a994:	b002      	add	sp, #8
 801a996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a99a:	bf00      	nop
 801a99c:	20000040 	.word	0x20000040

0801a9a0 <e097653d016fa9f6f38b73037603a15c791aa10d>:
 801a9a0:	4b04      	ldr	r3, [pc, #16]	; (801a9b4 <e097653d016fa9f6f38b73037603a15c791aa10d+0x14>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a9a8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801a9ac:	b103      	cbz	r3, 801a9b0 <e097653d016fa9f6f38b73037603a15c791aa10d+0x10>
 801a9ae:	4718      	bx	r3
 801a9b0:	4770      	bx	lr
 801a9b2:	bf00      	nop
 801a9b4:	20000040 	.word	0x20000040

0801a9b8 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc>:
 801a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9bc:	4b0c      	ldr	r3, [pc, #48]	; (801a9f0 <99726ecaa54bb51ed3276e5afbd8833277b6b1cc+0x38>)
 801a9be:	460f      	mov	r7, r1
 801a9c0:	681e      	ldr	r6, [r3, #0]
 801a9c2:	f7f2 fd35 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801a9c6:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 801a9ca:	4605      	mov	r5, r0
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	460c      	mov	r4, r1
 801a9d0:	f7f2 fd2e 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801a9d4:	f8d6 63c4 	ldr.w	r6, [r6, #964]	; 0x3c4
 801a9d8:	4602      	mov	r2, r0
 801a9da:	460b      	mov	r3, r1
 801a9dc:	b12e      	cbz	r6, 801a9ea <99726ecaa54bb51ed3276e5afbd8833277b6b1cc+0x32>
 801a9de:	4628      	mov	r0, r5
 801a9e0:	4621      	mov	r1, r4
 801a9e2:	46b4      	mov	ip, r6
 801a9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e8:	4760      	bx	ip
 801a9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9ee:	bf00      	nop
 801a9f0:	20000040 	.word	0x20000040

0801a9f4 <b374fd28973c520694c78fab59b4df07772e0870>:
 801a9f4:	4b04      	ldr	r3, [pc, #16]	; (801aa08 <b374fd28973c520694c78fab59b4df07772e0870+0x14>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a9fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801aa00:	b103      	cbz	r3, 801aa04 <b374fd28973c520694c78fab59b4df07772e0870+0x10>
 801aa02:	4718      	bx	r3
 801aa04:	4770      	bx	lr
 801aa06:	bf00      	nop
 801aa08:	20000040 	.word	0x20000040

0801aa0c <174d137b644ccd4ef57a02826061d132a3dec310>:
 801aa0c:	4b04      	ldr	r3, [pc, #16]	; (801aa20 <174d137b644ccd4ef57a02826061d132a3dec310+0x14>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801aa18:	b103      	cbz	r3, 801aa1c <174d137b644ccd4ef57a02826061d132a3dec310+0x10>
 801aa1a:	4718      	bx	r3
 801aa1c:	4770      	bx	lr
 801aa1e:	bf00      	nop
 801aa20:	20000040 	.word	0x20000040

0801aa24 <92a2aa0d77d83c323d033422c3070d3730d69fc2>:
 801aa24:	4b04      	ldr	r3, [pc, #16]	; (801aa38 <92a2aa0d77d83c323d033422c3070d3730d69fc2+0x14>)
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801aa30:	b103      	cbz	r3, 801aa34 <92a2aa0d77d83c323d033422c3070d3730d69fc2+0x10>
 801aa32:	4718      	bx	r3
 801aa34:	4770      	bx	lr
 801aa36:	bf00      	nop
 801aa38:	20000040 	.word	0x20000040

0801aa3c <ed1ec3dc0708953023c494b9efb045669b41a337>:
 801aa3c:	4b04      	ldr	r3, [pc, #16]	; (801aa50 <ed1ec3dc0708953023c494b9efb045669b41a337+0x14>)
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa44:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 801aa48:	b103      	cbz	r3, 801aa4c <ed1ec3dc0708953023c494b9efb045669b41a337+0x10>
 801aa4a:	4718      	bx	r3
 801aa4c:	4770      	bx	lr
 801aa4e:	bf00      	nop
 801aa50:	20000040 	.word	0x20000040

0801aa54 <24da9999ddd48c4f3f286257592f6695f75e30ed>:
 801aa54:	4b04      	ldr	r3, [pc, #16]	; (801aa68 <24da9999ddd48c4f3f286257592f6695f75e30ed+0x14>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa5c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 801aa60:	b103      	cbz	r3, 801aa64 <24da9999ddd48c4f3f286257592f6695f75e30ed+0x10>
 801aa62:	4718      	bx	r3
 801aa64:	4770      	bx	lr
 801aa66:	bf00      	nop
 801aa68:	20000040 	.word	0x20000040

0801aa6c <6362cea72da2b827a19bfabd8f796b6337cbd199>:
 801aa6c:	4b04      	ldr	r3, [pc, #16]	; (801aa80 <6362cea72da2b827a19bfabd8f796b6337cbd199+0x14>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801aa78:	b103      	cbz	r3, 801aa7c <6362cea72da2b827a19bfabd8f796b6337cbd199+0x10>
 801aa7a:	4718      	bx	r3
 801aa7c:	4770      	bx	lr
 801aa7e:	bf00      	nop
 801aa80:	20000040 	.word	0x20000040

0801aa84 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a>:
 801aa84:	4b04      	ldr	r3, [pc, #16]	; (801aa98 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a+0x14>)
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aa8c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 801aa90:	b103      	cbz	r3, 801aa94 <b6b6c147c3a69ab145ae9ef0a9039b548a4c0c2a+0x10>
 801aa92:	4718      	bx	r3
 801aa94:	4770      	bx	lr
 801aa96:	bf00      	nop
 801aa98:	20000040 	.word	0x20000040

0801aa9c <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6>:
 801aa9c:	4b04      	ldr	r3, [pc, #16]	; (801aab0 <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6+0x14>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801aaa4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 801aaa8:	b103      	cbz	r3, 801aaac <aefcd9c92df085a8eaba8a8f7a9a9648ff7bcca6+0x10>
 801aaaa:	4718      	bx	r3
 801aaac:	4770      	bx	lr
 801aaae:	bf00      	nop
 801aab0:	20000040 	.word	0x20000040

0801aab4 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f>:
 801aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aab8:	4698      	mov	r8, r3
 801aaba:	4b2b      	ldr	r3, [pc, #172]	; (801ab68 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xb4>)
 801aabc:	681d      	ldr	r5, [r3, #0]
 801aabe:	f505 5340 	add.w	r3, r5, #12288	; 0x3000
 801aac2:	b08e      	sub	sp, #56	; 0x38
 801aac4:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 801aac8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801aacc:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801aad0:	4607      	mov	r7, r0
 801aad2:	460e      	mov	r6, r1
 801aad4:	4691      	mov	r9, r2
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d03b      	beq.n	801ab52 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 801aada:	2238      	movs	r2, #56	; 0x38
 801aadc:	2100      	movs	r1, #0
 801aade:	4668      	mov	r0, sp
 801aae0:	f001 fa62 	bl	801bfa8 <memset>
 801aae4:	f99d 3060 	ldrsb.w	r3, [sp, #96]	; 0x60
 801aae8:	f88d 300c 	strb.w	r3, [sp, #12]
 801aaec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aaee:	9304      	str	r3, [sp, #16]
 801aaf0:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 801aaf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aaf8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801aafc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ab00:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801ab04:	3b01      	subs	r3, #1
 801ab06:	e9cd 9801 	strd	r9, r8, [sp, #4]
 801ab0a:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ab0e:	2b04      	cmp	r3, #4
 801ab10:	d81f      	bhi.n	801ab52 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 801ab12:	e8df f003 	tbb	[pc, r3]
 801ab16:	0306      	.short	0x0306
 801ab18:	1e21      	.short	0x1e21
 801ab1a:	23          	.byte	0x23
 801ab1b:	00          	.byte	0x00
 801ab1c:	2302      	movs	r3, #2
 801ab1e:	f88d 3001 	strb.w	r3, [sp, #1]
 801ab22:	2c01      	cmp	r4, #1
 801ab24:	d01c      	beq.n	801ab60 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xac>
 801ab26:	2c02      	cmp	r4, #2
 801ab28:	d01a      	beq.n	801ab60 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0xac>
 801ab2a:	b994      	cbnz	r4, 801ab52 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x9e>
 801ab2c:	f1ba 0f00 	cmp.w	sl, #0
 801ab30:	d102      	bne.n	801ab38 <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x84>
 801ab32:	2301      	movs	r3, #1
 801ab34:	f88d 3000 	strb.w	r3, [sp]
 801ab38:	2002      	movs	r0, #2
 801ab3a:	f7f1 fd75 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801ab3e:	f7f2 fc77 	bl	800d430 <bd0efe2f4ea1bc3c059d1e48499cdcc14a5db53b>
 801ab42:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 801ab46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ab4a:	f8d5 33e8 	ldr.w	r3, [r5, #1000]	; 0x3e8
 801ab4e:	4668      	mov	r0, sp
 801ab50:	4798      	blx	r3
 801ab52:	b00e      	add	sp, #56	; 0x38
 801ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab58:	2301      	movs	r3, #1
 801ab5a:	e7e0      	b.n	801ab1e <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x6a>
 801ab5c:	2304      	movs	r3, #4
 801ab5e:	e7de      	b.n	801ab1e <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x6a>
 801ab60:	f88d 4002 	strb.w	r4, [sp, #2]
 801ab64:	e7e2      	b.n	801ab2c <4dc2fd1680c6bb57db15b34206b104bbaffb1e7f+0x78>
 801ab66:	bf00      	nop
 801ab68:	20000040 	.word	0x20000040

0801ab6c <EMBENET_INTERNAL_TRACE_OnFreeSlots>:
 801ab6c:	b410      	push	{r4}
 801ab6e:	4c06      	ldr	r4, [pc, #24]	; (801ab88 <EMBENET_INTERNAL_TRACE_OnFreeSlots+0x1c>)
 801ab70:	6824      	ldr	r4, [r4, #0]
 801ab72:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 801ab76:	f8d4 43ec 	ldr.w	r4, [r4, #1004]	; 0x3ec
 801ab7a:	b114      	cbz	r4, 801ab82 <EMBENET_INTERNAL_TRACE_OnFreeSlots+0x16>
 801ab7c:	46a4      	mov	ip, r4
 801ab7e:	bc10      	pop	{r4}
 801ab80:	4760      	bx	ip
 801ab82:	bc10      	pop	{r4}
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	20000040 	.word	0x20000040

0801ab8c <46cd3075e82ff8b9ea43a88054ba0b7b067be91a>:
 801ab8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ab8e:	2200      	movs	r2, #0
 801ab90:	2300      	movs	r3, #0
 801ab92:	a904      	add	r1, sp, #16
 801ab94:	f10d 0007 	add.w	r0, sp, #7
 801ab98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ab9c:	f7f2 f95e 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801aba0:	b138      	cbz	r0, 801abb2 <46cd3075e82ff8b9ea43a88054ba0b7b067be91a+0x26>
 801aba2:	ab04      	add	r3, sp, #16
 801aba4:	2207      	movs	r2, #7
 801aba6:	a902      	add	r1, sp, #8
 801aba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 801abac:	5450      	strb	r0, [r2, r1]
 801abae:	3a01      	subs	r2, #1
 801abb0:	d2fa      	bcs.n	801aba8 <46cd3075e82ff8b9ea43a88054ba0b7b067be91a+0x1c>
 801abb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801abb6:	b007      	add	sp, #28
 801abb8:	f85d fb04 	ldr.w	pc, [sp], #4

0801abbc <b91c6940dbb3047c4c296403649f7867d9870dca>:
 801abbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801abbe:	2100      	movs	r1, #0
 801abc0:	f10d 0007 	add.w	r0, sp, #7
 801abc4:	f7f2 f94a 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801abc8:	b148      	cbz	r0, 801abde <b91c6940dbb3047c4c296403649f7867d9870dca+0x22>
 801abca:	a802      	add	r0, sp, #8
 801abcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801abd0:	f7f1 fe9a 	bl	800c908 <734215ec60b076a73ccd748a6d2a9ef259a5be9c>
 801abd4:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 801abd8:	b005      	add	sp, #20
 801abda:	f85d fb04 	ldr.w	pc, [sp], #4
 801abde:	207f      	movs	r0, #127	; 0x7f
 801abe0:	e7fa      	b.n	801abd8 <b91c6940dbb3047c4c296403649f7867d9870dca+0x1c>

0801abe2 <EMBENET_NODE_DIAG_GetParentPDR>:
 801abe2:	b507      	push	{r0, r1, r2, lr}
 801abe4:	2100      	movs	r1, #0
 801abe6:	f10d 0007 	add.w	r0, sp, #7
 801abea:	f7f2 f937 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801abee:	b118      	cbz	r0, 801abf8 <EMBENET_NODE_DIAG_GetParentPDR+0x16>
 801abf0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801abf4:	f7f1 fea8 	bl	800c948 <5b63cb34daec6664391bfc943c457a7558e21261>
 801abf8:	b003      	add	sp, #12
 801abfa:	f85d fb04 	ldr.w	pc, [sp], #4

0801abfe <e4a3f9918fe69f73b1cc4210ec318e3c426e72f5>:
 801abfe:	f7fe ba97 	b.w	8019130 <eada7656be7f8681f934187ead57a12001632399>

0801ac02 <4f511565cdbba62bf97753c767d47da43943d7f0>:
 801ac02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ac04:	2100      	movs	r1, #0
 801ac06:	2210      	movs	r2, #16
 801ac08:	f10d 0005 	add.w	r0, sp, #5
 801ac0c:	f001 f9cc 	bl	801bfa8 <memset>
 801ac10:	2302      	movs	r3, #2
 801ac12:	f10d 0105 	add.w	r1, sp, #5
 801ac16:	2000      	movs	r0, #0
 801ac18:	f88d 3004 	strb.w	r3, [sp, #4]
 801ac1c:	f7f2 f91e 	bl	800ce5c <aa4ba635fab2a57cfac739bffc367cf6103ea92f>
 801ac20:	b110      	cbz	r0, 801ac28 <4f511565cdbba62bf97753c767d47da43943d7f0+0x26>
 801ac22:	a801      	add	r0, sp, #4
 801ac24:	f7f9 fd8a 	bl	801473c <45512773dac7d59ca8bf45f1f7d9d11b7c610605>
 801ac28:	b007      	add	sp, #28
 801ac2a:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac2e <88f59cfa8d275ffe37bfcd0f1db7f0dfbfb0545b>:
 801ac2e:	b507      	push	{r0, r1, r2, lr}
 801ac30:	2100      	movs	r1, #0
 801ac32:	f10d 0006 	add.w	r0, sp, #6
 801ac36:	f7f9 f98f 	bl	8013f58 <a8d9689c957cda0372b2d720a687974af26c85d2>
 801ac3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ac3e:	b003      	add	sp, #12
 801ac40:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac44 <13e346e7537b84bcd52c3cf47fef4ef9086039ba>:
 801ac44:	b508      	push	{r3, lr}
 801ac46:	2000      	movs	r0, #0
 801ac48:	f7f9 fd9a 	bl	8014780 <ee504f8deafedb03386eec1c989207132bd15110>
 801ac4c:	b2c0      	uxtb	r0, r0
 801ac4e:	bd08      	pop	{r3, pc}

0801ac50 <bba0525c833a77ea6266641935ef62cce330e9a7>:
 801ac50:	b507      	push	{r0, r1, r2, lr}
 801ac52:	2000      	movs	r0, #0
 801ac54:	f10d 0106 	add.w	r1, sp, #6
 801ac58:	f7f9 f97e 	bl	8013f58 <a8d9689c957cda0372b2d720a687974af26c85d2>
 801ac5c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ac60:	b003      	add	sp, #12
 801ac62:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac66 <6bb34e807caa6654eefd3984c9aa6bde2b5f1294>:
 801ac66:	f7f8 bb1f 	b.w	80132a8 <57d2957de5f8b1f87a34ecc897e93650c3f2e297>

0801ac6a <ef56437d1bfbf379203966c0ca60ce860a9e4040>:
 801ac6a:	f7f8 bb35 	b.w	80132d8 <430fd23aeea8952b7b416b6590815371f1106b85>

0801ac6e <33cb78c5ebdf85a72531cdf9a2db5897a43e9d27>:
 801ac6e:	f7f8 bb4b 	b.w	8013308 <2a6c61bbc29fcf617904472e829df358a186c125>

0801ac72 <EMBENET_NODE_DIAG_GetQueueThresholdAndOverflowCounters>:
 801ac72:	b513      	push	{r0, r1, r4, lr}
 801ac74:	4604      	mov	r4, r0
 801ac76:	4668      	mov	r0, sp
 801ac78:	f7f3 fd9a 	bl	800e7b0 <QUEUE_GetDiagnosticsCounters>
 801ac7c:	9b00      	ldr	r3, [sp, #0]
 801ac7e:	6023      	str	r3, [r4, #0]
 801ac80:	9b01      	ldr	r3, [sp, #4]
 801ac82:	6063      	str	r3, [r4, #4]
 801ac84:	4620      	mov	r0, r4
 801ac86:	b002      	add	sp, #8
 801ac88:	bd10      	pop	{r4, pc}

0801ac8a <d0d4f6737d0eed46e2bc20295cf5671c83cb8538>:
 801ac8a:	b508      	push	{r3, lr}
 801ac8c:	f7f1 fdb0 	bl	800c7f0 <5dd6fb766eeca12f408d546c8d4a40a272e3f785>
 801ac90:	bd08      	pop	{r3, pc}

0801ac92 <EMBENET_NODE_DIAG_GetNeighborInfo>:
 801ac92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac94:	4604      	mov	r4, r0
 801ac96:	4668      	mov	r0, sp
 801ac98:	f7f1 fdba 	bl	800c810 <NEIGHBORS_GetNeighborInfo>
 801ac9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aca0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801aca4:	8123      	strh	r3, [r4, #8]
 801aca6:	e9c4 0100 	strd	r0, r1, [r4]
 801acaa:	4620      	mov	r0, r4
 801acac:	b004      	add	sp, #16
 801acae:	bd10      	pop	{r4, pc}

0801acb0 <EMBENET_NODE_DIAG_GetCellsCount>:
 801acb0:	f7fa b884 	b.w	8014dbc <SCHEDULE_GetCellsCount>

0801acb4 <EMBENET_NODE_DIAG_GetCellInfo>:
 801acb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801acb8:	b08d      	sub	sp, #52	; 0x34
 801acba:	4689      	mov	r9, r1
 801acbc:	4604      	mov	r4, r0
 801acbe:	f7f9 fa77 	bl	80141b0 <8342496502f723d085ab3cae139cfe28db3db880>
 801acc2:	466d      	mov	r5, sp
 801acc4:	4607      	mov	r7, r0
 801acc6:	2210      	movs	r2, #16
 801acc8:	2100      	movs	r1, #0
 801acca:	4628      	mov	r0, r5
 801accc:	f001 f96c 	bl	801bfa8 <memset>
 801acd0:	2600      	movs	r6, #0
 801acd2:	46b0      	mov	r8, r6
 801acd4:	b2b1      	uxth	r1, r6
 801acd6:	428f      	cmp	r7, r1
 801acd8:	d933      	bls.n	801ad42 <EMBENET_NODE_DIAG_GetCellInfo+0x8e>
 801acda:	a804      	add	r0, sp, #16
 801acdc:	f7f9 fc80 	bl	80145e0 <SCHEDULE_GetCellInfo>
 801ace0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d036      	beq.n	801ad56 <EMBENET_NODE_DIAG_GetCellInfo+0xa2>
 801ace8:	45c8      	cmp	r8, r9
 801acea:	d132      	bne.n	801ad52 <EMBENET_NODE_DIAG_GetCellInfo+0x9e>
 801acec:	a904      	add	r1, sp, #16
 801acee:	4608      	mov	r0, r1
 801acf0:	2208      	movs	r2, #8
 801acf2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801acf6:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801acfa:	3a01      	subs	r2, #1
 801acfc:	d1f9      	bne.n	801acf2 <EMBENET_NODE_DIAG_GetCellInfo+0x3e>
 801acfe:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801ad02:	f88d 2005 	strb.w	r2, [sp, #5]
 801ad06:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ad0a:	f88d 2004 	strb.w	r2, [sp, #4]
 801ad0e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801ad12:	f8ad 2002 	strh.w	r2, [sp, #2]
 801ad16:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 801ad1a:	1e51      	subs	r1, r2, #1
 801ad1c:	2905      	cmp	r1, #5
 801ad1e:	d804      	bhi.n	801ad2a <EMBENET_NODE_DIAG_GetCellInfo+0x76>
 801ad20:	e8df f001 	tbb	[pc, r1]
 801ad24:	04040404 	.word	0x04040404
 801ad28:	0404      	.short	0x0404
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	2b02      	cmp	r3, #2
 801ad2e:	f88d 2000 	strb.w	r2, [sp]
 801ad32:	d004      	beq.n	801ad3e <EMBENET_NODE_DIAG_GetCellInfo+0x8a>
 801ad34:	2b03      	cmp	r3, #3
 801ad36:	d002      	beq.n	801ad3e <EMBENET_NODE_DIAG_GetCellInfo+0x8a>
 801ad38:	1e5a      	subs	r2, r3, #1
 801ad3a:	4253      	negs	r3, r2
 801ad3c:	4153      	adcs	r3, r2
 801ad3e:	f88d 3001 	strb.w	r3, [sp, #1]
 801ad42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ad46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	b00d      	add	sp, #52	; 0x34
 801ad4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad52:	f108 0801 	add.w	r8, r8, #1
 801ad56:	3601      	adds	r6, #1
 801ad58:	e7bc      	b.n	801acd4 <EMBENET_NODE_DIAG_GetCellInfo+0x20>

0801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>:
 801ad5a:	8803      	ldrh	r3, [r0, #0]
 801ad5c:	ba5b      	rev16	r3, r3
 801ad5e:	b570      	push	{r4, r5, r6, lr}
 801ad60:	b29b      	uxth	r3, r3
 801ad62:	4614      	mov	r4, r2
 801ad64:	188e      	adds	r6, r1, r2
 801ad66:	2c01      	cmp	r4, #1
 801ad68:	eba6 0504 	sub.w	r5, r6, r4
 801ad6c:	d80c      	bhi.n	801ad88 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x2e>
 801ad6e:	07d4      	lsls	r4, r2, #31
 801ad70:	d504      	bpl.n	801ad7c <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x22>
 801ad72:	0852      	lsrs	r2, r2, #1
 801ad74:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 801ad78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ad7c:	0c1a      	lsrs	r2, r3, #16
 801ad7e:	d109      	bne.n	801ad94 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x3a>
 801ad80:	0a1a      	lsrs	r2, r3, #8
 801ad82:	7002      	strb	r2, [r0, #0]
 801ad84:	7043      	strb	r3, [r0, #1]
 801ad86:	bd70      	pop	{r4, r5, r6, pc}
 801ad88:	882d      	ldrh	r5, [r5, #0]
 801ad8a:	ba6d      	rev16	r5, r5
 801ad8c:	fa13 f385 	uxtah	r3, r3, r5
 801ad90:	3c02      	subs	r4, #2
 801ad92:	e7e8      	b.n	801ad66 <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0xc>
 801ad94:	fa12 f383 	uxtah	r3, r2, r3
 801ad98:	e7f0      	b.n	801ad7c <ce0285fec3b54ee5ef5bed56217c18d06982ab6c+0x22>

0801ad9a <ADDR_GetLength.isra.0>:
 801ad9a:	2807      	cmp	r0, #7
 801ad9c:	d80f      	bhi.n	801adbe <ADDR_GetLength.isra.0+0x24>
 801ad9e:	2301      	movs	r3, #1
 801ada0:	fa03 f000 	lsl.w	r0, r3, r0
 801ada4:	f010 0f92 	tst.w	r0, #146	; 0x92
 801ada8:	d10b      	bne.n	801adc2 <ADDR_GetLength.isra.0+0x28>
 801adaa:	f010 0f48 	tst.w	r0, #72	; 0x48
 801adae:	d10a      	bne.n	801adc6 <ADDR_GetLength.isra.0+0x2c>
 801adb0:	f010 0f24 	tst.w	r0, #36	; 0x24
 801adb4:	bf14      	ite	ne
 801adb6:	4618      	movne	r0, r3
 801adb8:	2000      	moveq	r0, #0
 801adba:	00c0      	lsls	r0, r0, #3
 801adbc:	4770      	bx	lr
 801adbe:	2000      	movs	r0, #0
 801adc0:	4770      	bx	lr
 801adc2:	2002      	movs	r0, #2
 801adc4:	4770      	bx	lr
 801adc6:	2010      	movs	r0, #16
 801adc8:	4770      	bx	lr

0801adca <b35bcee5624976b5f696cb546804f9909547b46c>:
 801adca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adcc:	b087      	sub	sp, #28
 801adce:	460c      	mov	r4, r1
 801add0:	4616      	mov	r6, r2
 801add2:	2100      	movs	r1, #0
 801add4:	2210      	movs	r2, #16
 801add6:	4605      	mov	r5, r0
 801add8:	f10d 0005 	add.w	r0, sp, #5
 801addc:	461f      	mov	r7, r3
 801adde:	f001 f8e3 	bl	801bfa8 <memset>
 801ade2:	4630      	mov	r0, r6
 801ade4:	f7ff ffd9 	bl	801ad9a <ADDR_GetLength.isra.0>
 801ade8:	ab01      	add	r3, sp, #4
 801adea:	4621      	mov	r1, r4
 801adec:	eb04 0c00 	add.w	ip, r4, r0
 801adf0:	461a      	mov	r2, r3
 801adf2:	4561      	cmp	r1, ip
 801adf4:	d111      	bne.n	801ae1a <b35bcee5624976b5f696cb546804f9909547b46c+0x50>
 801adf6:	f88d 6004 	strb.w	r6, [sp, #4]
 801adfa:	462a      	mov	r2, r5
 801adfc:	ae05      	add	r6, sp, #20
 801adfe:	461c      	mov	r4, r3
 801ae00:	cc03      	ldmia	r4!, {r0, r1}
 801ae02:	42b4      	cmp	r4, r6
 801ae04:	6010      	str	r0, [r2, #0]
 801ae06:	6051      	str	r1, [r2, #4]
 801ae08:	4623      	mov	r3, r4
 801ae0a:	f102 0208 	add.w	r2, r2, #8
 801ae0e:	d1f6      	bne.n	801adfe <b35bcee5624976b5f696cb546804f9909547b46c+0x34>
 801ae10:	7823      	ldrb	r3, [r4, #0]
 801ae12:	7013      	strb	r3, [r2, #0]
 801ae14:	4628      	mov	r0, r5
 801ae16:	b007      	add	sp, #28
 801ae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae1a:	2f01      	cmp	r7, #1
 801ae1c:	bf08      	it	eq
 801ae1e:	eba0 0e02 	subeq.w	lr, r0, r2
 801ae22:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae26:	bf14      	ite	ne
 801ae28:	7054      	strbne	r4, [r2, #1]
 801ae2a:	f80e 4013 	strbeq.w	r4, [lr, r3, lsl #1]
 801ae2e:	3201      	adds	r2, #1
 801ae30:	e7df      	b.n	801adf2 <b35bcee5624976b5f696cb546804f9909547b46c+0x28>
	...

0801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>:
 801ae34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae36:	7a02      	ldrb	r2, [r0, #8]
 801ae38:	460b      	mov	r3, r1
 801ae3a:	1851      	adds	r1, r2, r1
 801ae3c:	29c0      	cmp	r1, #192	; 0xc0
 801ae3e:	d90e      	bls.n	801ae5e <2c8c667690c01bde438685a4c74ee211f27a3939+0x2a>
 801ae40:	2103      	movs	r1, #3
 801ae42:	9102      	str	r1, [sp, #8]
 801ae44:	4909      	ldr	r1, [pc, #36]	; (801ae6c <2c8c667690c01bde438685a4c74ee211f27a3939+0x38>)
 801ae46:	9103      	str	r1, [sp, #12]
 801ae48:	9200      	str	r2, [sp, #0]
 801ae4a:	a904      	add	r1, sp, #16
 801ae4c:	e911 0003 	ldmdb	r1, {r0, r1}
 801ae50:	4a07      	ldr	r2, [pc, #28]	; (801ae70 <2c8c667690c01bde438685a4c74ee211f27a3939+0x3c>)
 801ae52:	f7f5 fbef 	bl	8010634 <LOGGER_PrintLine>
 801ae56:	2000      	movs	r0, #0
 801ae58:	b005      	add	sp, #20
 801ae5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae5e:	6842      	ldr	r2, [r0, #4]
 801ae60:	7201      	strb	r1, [r0, #8]
 801ae62:	1ad2      	subs	r2, r2, r3
 801ae64:	6042      	str	r2, [r0, #4]
 801ae66:	2001      	movs	r0, #1
 801ae68:	e7f6      	b.n	801ae58 <2c8c667690c01bde438685a4c74ee211f27a3939+0x24>
 801ae6a:	bf00      	nop
 801ae6c:	08021ed4 	.word	0x08021ed4
 801ae70:	08021ee4 	.word	0x08021ee4

0801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>:
 801ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae76:	4606      	mov	r6, r0
 801ae78:	7808      	ldrb	r0, [r1, #0]
 801ae7a:	f7ff ff8e 	bl	801ad9a <ADDR_GetLength.isra.0>
 801ae7e:	460c      	mov	r4, r1
 801ae80:	4617      	mov	r7, r2
 801ae82:	4605      	mov	r5, r0
 801ae84:	b2c1      	uxtb	r1, r0
 801ae86:	4630      	mov	r0, r6
 801ae88:	f7ff ffd4 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801ae8c:	b127      	cbz	r7, 801ae98 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x24>
 801ae8e:	442c      	add	r4, r5
 801ae90:	2300      	movs	r3, #0
 801ae92:	42ab      	cmp	r3, r5
 801ae94:	d107      	bne.n	801aea6 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x32>
 801ae96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae98:	6870      	ldr	r0, [r6, #4]
 801ae9a:	462a      	mov	r2, r5
 801ae9c:	1c61      	adds	r1, r4, #1
 801ae9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aea2:	f001 b920 	b.w	801c0e6 <memcpy>
 801aea6:	6872      	ldr	r2, [r6, #4]
 801aea8:	f814 1901 	ldrb.w	r1, [r4], #-1
 801aeac:	54d1      	strb	r1, [r2, r3]
 801aeae:	3301      	adds	r3, #1
 801aeb0:	e7ef      	b.n	801ae92 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3+0x1e>
	...

0801aeb4 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f>:
 801aeb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aeb6:	7a02      	ldrb	r2, [r0, #8]
 801aeb8:	428a      	cmp	r2, r1
 801aeba:	4604      	mov	r4, r0
 801aebc:	460b      	mov	r3, r1
 801aebe:	d20b      	bcs.n	801aed8 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x24>
 801aec0:	2104      	movs	r1, #4
 801aec2:	9102      	str	r1, [sp, #8]
 801aec4:	4908      	ldr	r1, [pc, #32]	; (801aee8 <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x34>)
 801aec6:	9103      	str	r1, [sp, #12]
 801aec8:	9200      	str	r2, [sp, #0]
 801aeca:	a904      	add	r1, sp, #16
 801aecc:	e911 0003 	ldmdb	r1, {r0, r1}
 801aed0:	4a06      	ldr	r2, [pc, #24]	; (801aeec <ff892c7eaabf8efd6c6e5ae8237236c0bbd2a52f+0x38>)
 801aed2:	f7f5 fbaf 	bl	8010634 <LOGGER_PrintLine>
 801aed6:	7a23      	ldrb	r3, [r4, #8]
 801aed8:	6862      	ldr	r2, [r4, #4]
 801aeda:	441a      	add	r2, r3
 801aedc:	6062      	str	r2, [r4, #4]
 801aede:	7a22      	ldrb	r2, [r4, #8]
 801aee0:	1ad2      	subs	r2, r2, r3
 801aee2:	7222      	strb	r2, [r4, #8]
 801aee4:	b004      	add	sp, #16
 801aee6:	bd10      	pop	{r4, pc}
 801aee8:	08021ed4 	.word	0x08021ed4
 801aeec:	08021f2e 	.word	0x08021f2e

0801aef0 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d>:
 801aef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aef2:	460b      	mov	r3, r1
 801aef4:	7a01      	ldrb	r1, [r0, #8]
 801aef6:	18ca      	adds	r2, r1, r3
 801aef8:	2ac0      	cmp	r2, #192	; 0xc0
 801aefa:	d90e      	bls.n	801af1a <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x2a>
 801aefc:	2203      	movs	r2, #3
 801aefe:	9202      	str	r2, [sp, #8]
 801af00:	4a07      	ldr	r2, [pc, #28]	; (801af20 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x30>)
 801af02:	9203      	str	r2, [sp, #12]
 801af04:	9100      	str	r1, [sp, #0]
 801af06:	a904      	add	r1, sp, #16
 801af08:	e911 0003 	ldmdb	r1, {r0, r1}
 801af0c:	4a05      	ldr	r2, [pc, #20]	; (801af24 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x34>)
 801af0e:	f7f5 fb91 	bl	8010634 <LOGGER_PrintLine>
 801af12:	2000      	movs	r0, #0
 801af14:	b005      	add	sp, #20
 801af16:	f85d fb04 	ldr.w	pc, [sp], #4
 801af1a:	7202      	strb	r2, [r0, #8]
 801af1c:	2001      	movs	r0, #1
 801af1e:	e7f9      	b.n	801af14 <8e6752ac2d9b20609d8f3fbb2926e67e2817e11d+0x24>
 801af20:	08021ed4 	.word	0x08021ed4
 801af24:	08021f5e 	.word	0x08021f5e

0801af28 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d>:
 801af28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af2a:	7a02      	ldrb	r2, [r0, #8]
 801af2c:	428a      	cmp	r2, r1
 801af2e:	4604      	mov	r4, r0
 801af30:	460b      	mov	r3, r1
 801af32:	d20b      	bcs.n	801af4c <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x24>
 801af34:	2104      	movs	r1, #4
 801af36:	9102      	str	r1, [sp, #8]
 801af38:	4907      	ldr	r1, [pc, #28]	; (801af58 <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x30>)
 801af3a:	9103      	str	r1, [sp, #12]
 801af3c:	9200      	str	r2, [sp, #0]
 801af3e:	a904      	add	r1, sp, #16
 801af40:	e911 0003 	ldmdb	r1, {r0, r1}
 801af44:	4a05      	ldr	r2, [pc, #20]	; (801af5c <d03cdfa9a9d75424e5e85d984afc48a1c5ef4b9d+0x34>)
 801af46:	f7f5 fb75 	bl	8010634 <LOGGER_PrintLine>
 801af4a:	7a23      	ldrb	r3, [r4, #8]
 801af4c:	7a22      	ldrb	r2, [r4, #8]
 801af4e:	1ad2      	subs	r2, r2, r3
 801af50:	7222      	strb	r2, [r4, #8]
 801af52:	b004      	add	sp, #16
 801af54:	bd10      	pop	{r4, pc}
 801af56:	bf00      	nop
 801af58:	08021ed4 	.word	0x08021ed4
 801af5c:	08021fa8 	.word	0x08021fa8

0801af60 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5>:
 801af60:	b538      	push	{r3, r4, r5, lr}
 801af62:	460c      	mov	r4, r1
 801af64:	f44f 72be 	mov.w	r2, #380	; 0x17c
 801af68:	4605      	mov	r5, r0
 801af6a:	f001 f8bc 	bl	801c0e6 <memcpy>
 801af6e:	6863      	ldr	r3, [r4, #4]
 801af70:	1b1b      	subs	r3, r3, r4
 801af72:	442b      	add	r3, r5
 801af74:	606b      	str	r3, [r5, #4]
 801af76:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801af7a:	b122      	cbz	r2, 801af86 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x26>
 801af7c:	6861      	ldr	r1, [r4, #4]
 801af7e:	1a52      	subs	r2, r2, r1
 801af80:	441a      	add	r2, r3
 801af82:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
 801af86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801af88:	b11a      	cbz	r2, 801af92 <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x32>
 801af8a:	6861      	ldr	r1, [r4, #4]
 801af8c:	1a52      	subs	r2, r2, r1
 801af8e:	441a      	add	r2, r3
 801af90:	65ea      	str	r2, [r5, #92]	; 0x5c
 801af92:	69a2      	ldr	r2, [r4, #24]
 801af94:	b11a      	cbz	r2, 801af9e <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x3e>
 801af96:	6861      	ldr	r1, [r4, #4]
 801af98:	1a52      	subs	r2, r2, r1
 801af9a:	441a      	add	r2, r3
 801af9c:	61aa      	str	r2, [r5, #24]
 801af9e:	68e2      	ldr	r2, [r4, #12]
 801afa0:	b11a      	cbz	r2, 801afaa <a535af25ff723431653a1b4a4f5b09e3a0cbb8b5+0x4a>
 801afa2:	6861      	ldr	r1, [r4, #4]
 801afa4:	1a52      	subs	r2, r2, r1
 801afa6:	4413      	add	r3, r2
 801afa8:	60eb      	str	r3, [r5, #12]
 801afaa:	bd38      	pop	{r3, r4, r5, pc}

0801afac <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e>:
 801afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afb0:	b088      	sub	sp, #32
 801afb2:	4604      	mov	r4, r0
 801afb4:	461e      	mov	r6, r3
 801afb6:	301d      	adds	r0, #29
 801afb8:	2300      	movs	r3, #0
 801afba:	460d      	mov	r5, r1
 801afbc:	4617      	mov	r7, r2
 801afbe:	f8ad 3004 	strh.w	r3, [sp, #4]
 801afc2:	f7f2 fa07 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801afc6:	f104 081e 	add.w	r8, r4, #30
 801afca:	2800      	cmp	r0, #0
 801afcc:	d040      	beq.n	801b050 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e+0xa4>
 801afce:	f7f2 fd75 	bl	800dabc <3c5e9d665a63e4e817bae7c8fa4bc5f3c0cfa1bb>
 801afd2:	2208      	movs	r2, #8
 801afd4:	4601      	mov	r1, r0
 801afd6:	a801      	add	r0, sp, #4
 801afd8:	f7ff febf 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801afdc:	2302      	movs	r3, #2
 801afde:	f88d 300c 	strb.w	r3, [sp, #12]
 801afe2:	6833      	ldr	r3, [r6, #0]
 801afe4:	f8cd 300d 	str.w	r3, [sp, #13]
 801afe8:	6873      	ldr	r3, [r6, #4]
 801afea:	f8cd 3011 	str.w	r3, [sp, #17]
 801afee:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801aff2:	f083 0302 	eor.w	r3, r3, #2
 801aff6:	f88d 300d 	strb.w	r3, [sp, #13]
 801affa:	2208      	movs	r2, #8
 801affc:	f10d 010d 	add.w	r1, sp, #13
 801b000:	f7ff feab 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b004:	4641      	mov	r1, r8
 801b006:	2210      	movs	r2, #16
 801b008:	f7ff fea7 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b00c:	2600      	movs	r6, #0
 801b00e:	7a23      	ldrb	r3, [r4, #8]
 801b010:	f88d 3009 	strb.w	r3, [sp, #9]
 801b014:	a902      	add	r1, sp, #8
 801b016:	a801      	add	r0, sp, #4
 801b018:	2202      	movs	r2, #2
 801b01a:	f88d 6008 	strb.w	r6, [sp, #8]
 801b01e:	f7ff fe9c 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b022:	7c23      	ldrb	r3, [r4, #16]
 801b024:	f88d 3009 	strb.w	r3, [sp, #9]
 801b028:	2202      	movs	r2, #2
 801b02a:	f7ff fe96 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b02e:	702e      	strb	r6, [r5, #0]
 801b030:	706e      	strb	r6, [r5, #1]
 801b032:	7a22      	ldrb	r2, [r4, #8]
 801b034:	6861      	ldr	r1, [r4, #4]
 801b036:	f7ff fe90 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b03a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801b03e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801b042:	43db      	mvns	r3, r3
 801b044:	43d2      	mvns	r2, r2
 801b046:	702a      	strb	r2, [r5, #0]
 801b048:	706b      	strb	r3, [r5, #1]
 801b04a:	b008      	add	sp, #32
 801b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b050:	2208      	movs	r2, #8
 801b052:	4639      	mov	r1, r7
 801b054:	a801      	add	r0, sp, #4
 801b056:	f7ff fe80 	bl	801ad5a <ce0285fec3b54ee5ef5bed56217c18d06982ab6c>
 801b05a:	2208      	movs	r2, #8
 801b05c:	4631      	mov	r1, r6
 801b05e:	e7cf      	b.n	801b000 <fa45c3573d0c4a9817d5284f1f562d8d9099ba9e+0x54>

0801b060 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9>:
 801b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b062:	461e      	mov	r6, r3
 801b064:	070b      	lsls	r3, r1, #28
 801b066:	4604      	mov	r4, r0
 801b068:	460d      	mov	r5, r1
 801b06a:	4610      	mov	r0, r2
 801b06c:	d11c      	bne.n	801b0a8 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x48>
 801b06e:	f7ea fe67 	bl	8005d40 <EMBENET_AES128_SetKey>
 801b072:	f025 050f 	bic.w	r5, r5, #15
 801b076:	4425      	add	r5, r4
 801b078:	42ac      	cmp	r4, r5
 801b07a:	d101      	bne.n	801b080 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x20>
 801b07c:	2001      	movs	r0, #1
 801b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b080:	4627      	mov	r7, r4
 801b082:	1e63      	subs	r3, r4, #1
 801b084:	3e01      	subs	r6, #1
 801b086:	f104 010f 	add.w	r1, r4, #15
 801b08a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b08e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 801b092:	428b      	cmp	r3, r1
 801b094:	ea82 0200 	eor.w	r2, r2, r0
 801b098:	701a      	strb	r2, [r3, #0]
 801b09a:	d1f6      	bne.n	801b08a <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x2a>
 801b09c:	4620      	mov	r0, r4
 801b09e:	f7ea fea9 	bl	8005df4 <EMBENET_AES128_Encrypt>
 801b0a2:	3410      	adds	r4, #16
 801b0a4:	463e      	mov	r6, r7
 801b0a6:	e7e7      	b.n	801b078 <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x18>
 801b0a8:	2000      	movs	r0, #0
 801b0aa:	e7e8      	b.n	801b07e <123d6be73b84de377d469f98e9eeaeb7bfaa3bd9+0x1e>

0801b0ac <7bd9c690a28739e5b569f505b868904b38eb748d>:
 801b0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b0b0:	461d      	mov	r5, r3
 801b0b2:	070b      	lsls	r3, r1, #28
 801b0b4:	4604      	mov	r4, r0
 801b0b6:	b089      	sub	sp, #36	; 0x24
 801b0b8:	460e      	mov	r6, r1
 801b0ba:	4610      	mov	r0, r2
 801b0bc:	d139      	bne.n	801b132 <7bd9c690a28739e5b569f505b868904b38eb748d+0x86>
 801b0be:	f7ea fe3f 	bl	8005d40 <EMBENET_AES128_SetKey>
 801b0c2:	aa04      	add	r2, sp, #16
 801b0c4:	462b      	mov	r3, r5
 801b0c6:	f105 0c10 	add.w	ip, r5, #16
 801b0ca:	4615      	mov	r5, r2
 801b0cc:	6818      	ldr	r0, [r3, #0]
 801b0ce:	6859      	ldr	r1, [r3, #4]
 801b0d0:	4617      	mov	r7, r2
 801b0d2:	c703      	stmia	r7!, {r0, r1}
 801b0d4:	3308      	adds	r3, #8
 801b0d6:	4563      	cmp	r3, ip
 801b0d8:	463a      	mov	r2, r7
 801b0da:	d1f7      	bne.n	801b0cc <7bd9c690a28739e5b569f505b868904b38eb748d+0x20>
 801b0dc:	f026 060f 	bic.w	r6, r6, #15
 801b0e0:	4426      	add	r6, r4
 801b0e2:	42b4      	cmp	r4, r6
 801b0e4:	d103      	bne.n	801b0ee <7bd9c690a28739e5b569f505b868904b38eb748d+0x42>
 801b0e6:	2001      	movs	r0, #1
 801b0e8:	b009      	add	sp, #36	; 0x24
 801b0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0ee:	466a      	mov	r2, sp
 801b0f0:	4623      	mov	r3, r4
 801b0f2:	f104 0810 	add.w	r8, r4, #16
 801b0f6:	4691      	mov	r9, r2
 801b0f8:	6818      	ldr	r0, [r3, #0]
 801b0fa:	6859      	ldr	r1, [r3, #4]
 801b0fc:	4617      	mov	r7, r2
 801b0fe:	c703      	stmia	r7!, {r0, r1}
 801b100:	3308      	adds	r3, #8
 801b102:	4543      	cmp	r3, r8
 801b104:	463a      	mov	r2, r7
 801b106:	d1f7      	bne.n	801b0f8 <7bd9c690a28739e5b569f505b868904b38eb748d+0x4c>
 801b108:	4620      	mov	r0, r4
 801b10a:	f7ea fe97 	bl	8005e3c <EMBENET_AES128_Decrypt>
 801b10e:	1e63      	subs	r3, r4, #1
 801b110:	4629      	mov	r1, r5
 801b112:	340f      	adds	r4, #15
 801b114:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801b118:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b11c:	42a3      	cmp	r3, r4
 801b11e:	ea82 0200 	eor.w	r2, r2, r0
 801b122:	701a      	strb	r2, [r3, #0]
 801b124:	d1f6      	bne.n	801b114 <7bd9c690a28739e5b569f505b868904b38eb748d+0x68>
 801b126:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 801b12a:	4644      	mov	r4, r8
 801b12c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b130:	e7d7      	b.n	801b0e2 <7bd9c690a28739e5b569f505b868904b38eb748d+0x36>
 801b132:	2000      	movs	r0, #0
 801b134:	e7d8      	b.n	801b0e8 <7bd9c690a28739e5b569f505b868904b38eb748d+0x3c>

0801b136 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4>:
 801b136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b138:	4604      	mov	r4, r0
 801b13a:	4610      	mov	r0, r2
 801b13c:	460d      	mov	r5, r1
 801b13e:	461e      	mov	r6, r3
 801b140:	f7ea fdfe 	bl	8005d40 <EMBENET_AES128_SetKey>
 801b144:	092d      	lsrs	r5, r5, #4
 801b146:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801b14a:	42ac      	cmp	r4, r5
 801b14c:	d100      	bne.n	801b150 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x1a>
 801b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b150:	4627      	mov	r7, r4
 801b152:	1e63      	subs	r3, r4, #1
 801b154:	3e01      	subs	r6, #1
 801b156:	f104 010f 	add.w	r1, r4, #15
 801b15a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b15e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 801b162:	428b      	cmp	r3, r1
 801b164:	ea82 0200 	eor.w	r2, r2, r0
 801b168:	701a      	strb	r2, [r3, #0]
 801b16a:	d1f6      	bne.n	801b15a <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x24>
 801b16c:	4620      	mov	r0, r4
 801b16e:	f7ea fe41 	bl	8005df4 <EMBENET_AES128_Encrypt>
 801b172:	3410      	adds	r4, #16
 801b174:	463e      	mov	r6, r7
 801b176:	e7e8      	b.n	801b14a <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4+0x14>

0801b178 <afb1b47dde9ef14d9001b2fa6458685ea404320d>:
 801b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17c:	b0bf      	sub	sp, #252	; 0xfc
 801b17e:	4682      	mov	sl, r0
 801b180:	f89d 712c 	ldrb.w	r7, [sp, #300]	; 0x12c
 801b184:	9201      	str	r2, [sp, #4]
 801b186:	2f10      	cmp	r7, #16
 801b188:	4689      	mov	r9, r1
 801b18a:	461d      	mov	r5, r3
 801b18c:	f200 808f 	bhi.w	801b2ae <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 801b190:	4e48      	ldr	r6, [pc, #288]	; (801b2b4 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x13c>)
 801b192:	40fe      	lsrs	r6, r7
 801b194:	f016 0601 	ands.w	r6, r6, #1
 801b198:	f000 8081 	beq.w	801b29e <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x126>
 801b19c:	29bf      	cmp	r1, #191	; 0xbf
 801b19e:	f200 8086 	bhi.w	801b2ae <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 801b1a2:	2bbf      	cmp	r3, #191	; 0xbf
 801b1a4:	f200 8083 	bhi.w	801b2ae <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 801b1a8:	440b      	add	r3, r1
 801b1aa:	2bbf      	cmp	r3, #191	; 0xbf
 801b1ac:	dc7f      	bgt.n	801b2ae <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x136>
 801b1ae:	2210      	movs	r2, #16
 801b1b0:	2100      	movs	r1, #0
 801b1b2:	a802      	add	r0, sp, #8
 801b1b4:	f000 fef8 	bl	801bfa8 <memset>
 801b1b8:	2f00      	cmp	r7, #0
 801b1ba:	d074      	beq.n	801b2a6 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x12e>
 801b1bc:	1ebb      	subs	r3, r7, #2
 801b1be:	009b      	lsls	r3, r3, #2
 801b1c0:	f003 031c 	and.w	r3, r3, #28
 801b1c4:	f1b9 0200 	subs.w	r2, r9, #0
 801b1c8:	bf18      	it	ne
 801b1ca:	2201      	movne	r2, #1
 801b1cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801b1d0:	f043 0301 	orr.w	r3, r3, #1
 801b1d4:	f88d 3018 	strb.w	r3, [sp, #24]
 801b1d8:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801b1da:	f10d 0219 	add.w	r2, sp, #25
 801b1de:	f103 010c 	add.w	r1, r3, #12
 801b1e2:	f853 0b04 	ldr.w	r0, [r3], #4
 801b1e6:	f842 0b04 	str.w	r0, [r2], #4
 801b1ea:	428b      	cmp	r3, r1
 801b1ec:	d1f9      	bne.n	801b1e2 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x6a>
 801b1ee:	781b      	ldrb	r3, [r3, #0]
 801b1f0:	7013      	strb	r3, [r2, #0]
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 801b1f8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 801b1fc:	f1b9 0f00 	cmp.w	r9, #0
 801b200:	d053      	beq.n	801b2aa <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x132>
 801b202:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801b206:	f88d 9029 	strb.w	r9, [sp, #41]	; 0x29
 801b20a:	2012      	movs	r0, #18
 801b20c:	eb00 0809 	add.w	r8, r0, r9
 801b210:	f1a8 0410 	sub.w	r4, r8, #16
 801b214:	fa5f fb88 	uxtb.w	fp, r8
 801b218:	f024 040f 	bic.w	r4, r4, #15
 801b21c:	eba4 040b 	sub.w	r4, r4, fp
 801b220:	3420      	adds	r4, #32
 801b222:	b2e4      	uxtb	r4, r4
 801b224:	ab06      	add	r3, sp, #24
 801b226:	2c10      	cmp	r4, #16
 801b228:	464a      	mov	r2, r9
 801b22a:	4651      	mov	r1, sl
 801b22c:	4418      	add	r0, r3
 801b22e:	bf08      	it	eq
 801b230:	2400      	moveq	r4, #0
 801b232:	f000 ff58 	bl	801c0e6 <memcpy>
 801b236:	ab06      	add	r3, sp, #24
 801b238:	4622      	mov	r2, r4
 801b23a:	2100      	movs	r1, #0
 801b23c:	eb03 0008 	add.w	r0, r3, r8
 801b240:	f000 feb2 	bl	801bfa8 <memset>
 801b244:	eb0b 0004 	add.w	r0, fp, r4
 801b248:	f005 04f0 	and.w	r4, r5, #240	; 0xf0
 801b24c:	3410      	adds	r4, #16
 801b24e:	1b64      	subs	r4, r4, r5
 801b250:	b2e4      	uxtb	r4, r4
 801b252:	ab06      	add	r3, sp, #24
 801b254:	2c10      	cmp	r4, #16
 801b256:	462a      	mov	r2, r5
 801b258:	9901      	ldr	r1, [sp, #4]
 801b25a:	fa5f f980 	uxtb.w	r9, r0
 801b25e:	fa53 f080 	uxtab	r0, r3, r0
 801b262:	bf08      	it	eq
 801b264:	2400      	moveq	r4, #0
 801b266:	f000 ff3e 	bl	801c0e6 <memcpy>
 801b26a:	eb05 0009 	add.w	r0, r5, r9
 801b26e:	b2c5      	uxtb	r5, r0
 801b270:	4622      	mov	r2, r4
 801b272:	ab06      	add	r3, sp, #24
 801b274:	442c      	add	r4, r5
 801b276:	2100      	movs	r1, #0
 801b278:	fa53 f080 	uxtab	r0, r3, r0
 801b27c:	b2e4      	uxtb	r4, r4
 801b27e:	f000 fe93 	bl	801bfa8 <memset>
 801b282:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801b284:	ab02      	add	r3, sp, #8
 801b286:	4621      	mov	r1, r4
 801b288:	a806      	add	r0, sp, #24
 801b28a:	f7ff ff54 	bl	801b136 <e0830aeaf26176a306c60c62f5a29f0f35eb5dd4>
 801b28e:	f1a4 0110 	sub.w	r1, r4, #16
 801b292:	ab06      	add	r3, sp, #24
 801b294:	984a      	ldr	r0, [sp, #296]	; 0x128
 801b296:	463a      	mov	r2, r7
 801b298:	4419      	add	r1, r3
 801b29a:	f000 ff24 	bl	801c0e6 <memcpy>
 801b29e:	4630      	mov	r0, r6
 801b2a0:	b03f      	add	sp, #252	; 0xfc
 801b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a6:	463b      	mov	r3, r7
 801b2a8:	e78c      	b.n	801b1c4 <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x4c>
 801b2aa:	2010      	movs	r0, #16
 801b2ac:	e7ae      	b.n	801b20c <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x94>
 801b2ae:	2600      	movs	r6, #0
 801b2b0:	e7f5      	b.n	801b29e <afb1b47dde9ef14d9001b2fa6458685ea404320d+0x126>
 801b2b2:	bf00      	nop
 801b2b4:	00010111 	.word	0x00010111

0801b2b8 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe>:
 801b2b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b2bc:	4604      	mov	r4, r0
 801b2be:	4610      	mov	r0, r2
 801b2c0:	460d      	mov	r5, r1
 801b2c2:	461e      	mov	r6, r3
 801b2c4:	f7ea fd3c 	bl	8005d40 <EMBENET_AES128_SetKey>
 801b2c8:	092d      	lsrs	r5, r5, #4
 801b2ca:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801b2ce:	f106 0810 	add.w	r8, r6, #16
 801b2d2:	42ac      	cmp	r4, r5
 801b2d4:	d102      	bne.n	801b2dc <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x24>
 801b2d6:	b004      	add	sp, #16
 801b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2dc:	466a      	mov	r2, sp
 801b2de:	4633      	mov	r3, r6
 801b2e0:	4617      	mov	r7, r2
 801b2e2:	6818      	ldr	r0, [r3, #0]
 801b2e4:	6859      	ldr	r1, [r3, #4]
 801b2e6:	4694      	mov	ip, r2
 801b2e8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b2ec:	3308      	adds	r3, #8
 801b2ee:	4543      	cmp	r3, r8
 801b2f0:	4662      	mov	r2, ip
 801b2f2:	d1f6      	bne.n	801b2e2 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x2a>
 801b2f4:	4638      	mov	r0, r7
 801b2f6:	f7ea fd7d 	bl	8005df4 <EMBENET_AES128_Encrypt>
 801b2fa:	4623      	mov	r3, r4
 801b2fc:	3410      	adds	r4, #16
 801b2fe:	781a      	ldrb	r2, [r3, #0]
 801b300:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b304:	404a      	eors	r2, r1
 801b306:	f803 2b01 	strb.w	r2, [r3], #1
 801b30a:	42a3      	cmp	r3, r4
 801b30c:	d1f7      	bne.n	801b2fe <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x46>
 801b30e:	4643      	mov	r3, r8
 801b310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b314:	3201      	adds	r2, #1
 801b316:	b2d2      	uxtb	r2, r2
 801b318:	701a      	strb	r2, [r3, #0]
 801b31a:	2a00      	cmp	r2, #0
 801b31c:	d1d9      	bne.n	801b2d2 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x1a>
 801b31e:	429e      	cmp	r6, r3
 801b320:	d1f6      	bne.n	801b310 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x58>
 801b322:	e7d6      	b.n	801b2d2 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe+0x1a>

0801b324 <144f524432c105f7c5419591e43846e21bcf1b67>:
 801b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b328:	b0b9      	sub	sp, #228	; 0xe4
 801b32a:	4680      	mov	r8, r0
 801b32c:	f89d 710c 	ldrb.w	r7, [sp, #268]	; 0x10c
 801b330:	2f10      	cmp	r7, #16
 801b332:	460e      	mov	r6, r1
 801b334:	4699      	mov	r9, r3
 801b336:	d852      	bhi.n	801b3de <144f524432c105f7c5419591e43846e21bcf1b67+0xba>
 801b338:	4d2a      	ldr	r5, [pc, #168]	; (801b3e4 <144f524432c105f7c5419591e43846e21bcf1b67+0xc0>)
 801b33a:	40fd      	lsrs	r5, r7
 801b33c:	f015 0501 	ands.w	r5, r5, #1
 801b340:	d049      	beq.n	801b3d6 <144f524432c105f7c5419591e43846e21bcf1b67+0xb2>
 801b342:	29bf      	cmp	r1, #191	; 0xbf
 801b344:	d84b      	bhi.n	801b3de <144f524432c105f7c5419591e43846e21bcf1b67+0xba>
 801b346:	2301      	movs	r3, #1
 801b348:	f88d 3000 	strb.w	r3, [sp]
 801b34c:	f102 010c 	add.w	r1, r2, #12
 801b350:	446b      	add	r3, sp
 801b352:	f852 0b04 	ldr.w	r0, [r2], #4
 801b356:	f843 0b04 	str.w	r0, [r3], #4
 801b35a:	428a      	cmp	r2, r1
 801b35c:	d1f9      	bne.n	801b352 <144f524432c105f7c5419591e43846e21bcf1b67+0x2e>
 801b35e:	7812      	ldrb	r2, [r2, #0]
 801b360:	701a      	strb	r2, [r3, #0]
 801b362:	f006 04f0 	and.w	r4, r6, #240	; 0xf0
 801b366:	f04f 0b00 	mov.w	fp, #0
 801b36a:	9942      	ldr	r1, [sp, #264]	; 0x108
 801b36c:	f8ad b00e 	strh.w	fp, [sp, #14]
 801b370:	463a      	mov	r2, r7
 801b372:	a804      	add	r0, sp, #16
 801b374:	3410      	adds	r4, #16
 801b376:	f000 feb6 	bl	801c0e6 <memcpy>
 801b37a:	1ba4      	subs	r4, r4, r6
 801b37c:	ab04      	add	r3, sp, #16
 801b37e:	b2e4      	uxtb	r4, r4
 801b380:	19d8      	adds	r0, r3, r7
 801b382:	f1c7 0210 	rsb	r2, r7, #16
 801b386:	4659      	mov	r1, fp
 801b388:	f000 fe0e 	bl	801bfa8 <memset>
 801b38c:	2c10      	cmp	r4, #16
 801b38e:	4632      	mov	r2, r6
 801b390:	4641      	mov	r1, r8
 801b392:	a808      	add	r0, sp, #32
 801b394:	bf08      	it	eq
 801b396:	465c      	moveq	r4, fp
 801b398:	f000 fea5 	bl	801c0e6 <memcpy>
 801b39c:	ab04      	add	r3, sp, #16
 801b39e:	f106 0010 	add.w	r0, r6, #16
 801b3a2:	fa5f fa80 	uxtb.w	sl, r0
 801b3a6:	4622      	mov	r2, r4
 801b3a8:	4659      	mov	r1, fp
 801b3aa:	fa53 f080 	uxtab	r0, r3, r0
 801b3ae:	f000 fdfb 	bl	801bfa8 <memset>
 801b3b2:	eb0a 0104 	add.w	r1, sl, r4
 801b3b6:	466b      	mov	r3, sp
 801b3b8:	464a      	mov	r2, r9
 801b3ba:	b2c9      	uxtb	r1, r1
 801b3bc:	a804      	add	r0, sp, #16
 801b3be:	f7ff ff7b 	bl	801b2b8 <8fb52f7932f2fccbd263980037c0f2c0966c0ebe>
 801b3c2:	4632      	mov	r2, r6
 801b3c4:	a908      	add	r1, sp, #32
 801b3c6:	4640      	mov	r0, r8
 801b3c8:	f000 fe8d 	bl	801c0e6 <memcpy>
 801b3cc:	9842      	ldr	r0, [sp, #264]	; 0x108
 801b3ce:	463a      	mov	r2, r7
 801b3d0:	a904      	add	r1, sp, #16
 801b3d2:	f000 fe88 	bl	801c0e6 <memcpy>
 801b3d6:	4628      	mov	r0, r5
 801b3d8:	b039      	add	sp, #228	; 0xe4
 801b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3de:	2500      	movs	r5, #0
 801b3e0:	e7f9      	b.n	801b3d6 <144f524432c105f7c5419591e43846e21bcf1b67+0xb2>
 801b3e2:	bf00      	nop
 801b3e4:	00010111 	.word	0x00010111

0801b3e8 <71097e204b694049f5c66ccd9b138d3a4c93df13>:
 801b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ec:	b08d      	sub	sp, #52	; 0x34
 801b3ee:	4681      	mov	r9, r0
 801b3f0:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801b3f4:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801b3f8:	2d10      	cmp	r5, #16
 801b3fa:	468a      	mov	sl, r1
 801b3fc:	4616      	mov	r6, r2
 801b3fe:	461f      	mov	r7, r3
 801b400:	d903      	bls.n	801b40a <71097e204b694049f5c66ccd9b138d3a4c93df13+0x22>
 801b402:	2000      	movs	r0, #0
 801b404:	b00d      	add	sp, #52	; 0x34
 801b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b40a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 801b40e:	2b02      	cmp	r3, #2
 801b410:	d1f7      	bne.n	801b402 <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 801b412:	783c      	ldrb	r4, [r7, #0]
 801b414:	1b64      	subs	r4, r4, r5
 801b416:	b2e4      	uxtb	r4, r4
 801b418:	f10d 0810 	add.w	r8, sp, #16
 801b41c:	462a      	mov	r2, r5
 801b41e:	1931      	adds	r1, r6, r4
 801b420:	703c      	strb	r4, [r7, #0]
 801b422:	4640      	mov	r0, r8
 801b424:	f000 fe5f 	bl	801c0e6 <memcpy>
 801b428:	e9cd 8500 	strd	r8, r5, [sp]
 801b42c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b42e:	465b      	mov	r3, fp
 801b430:	4621      	mov	r1, r4
 801b432:	4630      	mov	r0, r6
 801b434:	f7ff ff76 	bl	801b324 <144f524432c105f7c5419591e43846e21bcf1b67>
 801b438:	2800      	cmp	r0, #0
 801b43a:	d0e2      	beq.n	801b402 <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 801b43c:	ac08      	add	r4, sp, #32
 801b43e:	e9cd b401 	strd	fp, r4, [sp, #4]
 801b442:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b444:	9503      	str	r5, [sp, #12]
 801b446:	9300      	str	r3, [sp, #0]
 801b448:	783b      	ldrb	r3, [r7, #0]
 801b44a:	4632      	mov	r2, r6
 801b44c:	4651      	mov	r1, sl
 801b44e:	4648      	mov	r0, r9
 801b450:	f7ff fe92 	bl	801b178 <afb1b47dde9ef14d9001b2fa6458685ea404320d>
 801b454:	2800      	cmp	r0, #0
 801b456:	d0d4      	beq.n	801b402 <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1a>
 801b458:	462a      	mov	r2, r5
 801b45a:	4621      	mov	r1, r4
 801b45c:	4640      	mov	r0, r8
 801b45e:	f000 fd79 	bl	801bf54 <memcmp>
 801b462:	fab0 f080 	clz	r0, r0
 801b466:	0940      	lsrs	r0, r0, #5
 801b468:	e7cc      	b.n	801b404 <71097e204b694049f5c66ccd9b138d3a4c93df13+0x1c>

0801b46a <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d>:
 801b46a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b46e:	b089      	sub	sp, #36	; 0x24
 801b470:	4690      	mov	r8, r2
 801b472:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801b476:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b478:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 801b47c:	2d10      	cmp	r5, #16
 801b47e:	461c      	mov	r4, r3
 801b480:	d904      	bls.n	801b48c <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x22>
 801b482:	2600      	movs	r6, #0
 801b484:	4630      	mov	r0, r6
 801b486:	b009      	add	sp, #36	; 0x24
 801b488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b48c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801b490:	2b02      	cmp	r3, #2
 801b492:	d1f6      	bne.n	801b482 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 801b494:	af04      	add	r7, sp, #16
 801b496:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801b49a:	9503      	str	r5, [sp, #12]
 801b49c:	9600      	str	r6, [sp, #0]
 801b49e:	7823      	ldrb	r3, [r4, #0]
 801b4a0:	f7ff fe6a 	bl	801b178 <afb1b47dde9ef14d9001b2fa6458685ea404320d>
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	d0ec      	beq.n	801b482 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 801b4a8:	e9cd 7500 	strd	r7, r5, [sp]
 801b4ac:	4632      	mov	r2, r6
 801b4ae:	7821      	ldrb	r1, [r4, #0]
 801b4b0:	464b      	mov	r3, r9
 801b4b2:	4640      	mov	r0, r8
 801b4b4:	f7ff ff36 	bl	801b324 <144f524432c105f7c5419591e43846e21bcf1b67>
 801b4b8:	4606      	mov	r6, r0
 801b4ba:	2800      	cmp	r0, #0
 801b4bc:	d0e1      	beq.n	801b482 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x18>
 801b4be:	7820      	ldrb	r0, [r4, #0]
 801b4c0:	462a      	mov	r2, r5
 801b4c2:	4639      	mov	r1, r7
 801b4c4:	4440      	add	r0, r8
 801b4c6:	f000 fe0e 	bl	801c0e6 <memcpy>
 801b4ca:	7823      	ldrb	r3, [r4, #0]
 801b4cc:	441d      	add	r5, r3
 801b4ce:	7025      	strb	r5, [r4, #0]
 801b4d0:	e7d8      	b.n	801b484 <14b64b43d7bd244f9a4a7d3bf7e4599cd60c3d0d+0x1a>
	...

0801b4d4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4>:
 801b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d8:	b085      	sub	sp, #20
 801b4da:	2902      	cmp	r1, #2
 801b4dc:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801b4e0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801b4e4:	9301      	str	r3, [sp, #4]
 801b4e6:	4604      	mov	r4, r0
 801b4e8:	460e      	mov	r6, r1
 801b4ea:	4692      	mov	sl, r2
 801b4ec:	d065      	beq.n	801b5ba <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xe6>
 801b4ee:	f1b8 0900 	subs.w	r9, r8, #0
 801b4f2:	bf18      	it	ne
 801b4f4:	f04f 0901 	movne.w	r9, #1
 801b4f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b4fa:	f7f1 ff6b 	bl	800d3d4 <2de8c5d05f60c15cf061eba17324436038284da6>
 801b4fe:	6863      	ldr	r3, [r4, #4]
 801b500:	f894 50a1 	ldrb.w	r5, [r4, #161]	; 0xa1
 801b504:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b506:	4607      	mov	r7, r0
 801b508:	f1ba 0f00 	cmp.w	sl, #0
 801b50c:	d058      	beq.n	801b5c0 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xec>
 801b50e:	2102      	movs	r1, #2
 801b510:	4620      	mov	r0, r4
 801b512:	f7ff fc8f 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b516:	2800      	cmp	r0, #0
 801b518:	d04b      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b51a:	6863      	ldr	r3, [r4, #4]
 801b51c:	2200      	movs	r2, #0
 801b51e:	701a      	strb	r2, [r3, #0]
 801b520:	6863      	ldr	r3, [r4, #4]
 801b522:	223f      	movs	r2, #63	; 0x3f
 801b524:	705a      	strb	r2, [r3, #1]
 801b526:	2e02      	cmp	r6, #2
 801b528:	d11a      	bne.n	801b560 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x8c>
 801b52a:	4631      	mov	r1, r6
 801b52c:	4620      	mov	r0, r4
 801b52e:	f7ff fc81 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b532:	2800      	cmp	r0, #0
 801b534:	d03d      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b536:	f3cb 030b 	ubfx	r3, fp, #0, #12
 801b53a:	f1bb 0f00 	cmp.w	fp, #0
 801b53e:	bfb8      	it	lt
 801b540:	ea6f 4343 	mvnlt.w	r3, r3, lsl #17
 801b544:	6862      	ldr	r2, [r4, #4]
 801b546:	bfb8      	it	lt
 801b548:	ea6f 4353 	mvnlt.w	r3, r3, lsr #17
 801b54c:	8013      	strh	r3, [r2, #0]
 801b54e:	2102      	movs	r1, #2
 801b550:	4620      	mov	r0, r4
 801b552:	f7ff fc6f 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b556:	b360      	cbz	r0, 801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b558:	6863      	ldr	r3, [r4, #4]
 801b55a:	f640 7202 	movw	r2, #3842	; 0xf02
 801b55e:	801a      	strh	r2, [r3, #0]
 801b560:	f1b8 0f00 	cmp.w	r8, #0
 801b564:	d016      	beq.n	801b594 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xc0>
 801b566:	f898 1010 	ldrb.w	r1, [r8, #16]
 801b56a:	4620      	mov	r0, r4
 801b56c:	f7ff fc62 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b570:	b1f8      	cbz	r0, 801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b572:	4641      	mov	r1, r8
 801b574:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b578:	6860      	ldr	r0, [r4, #4]
 801b57a:	f000 fdb4 	bl	801c0e6 <memcpy>
 801b57e:	2102      	movs	r1, #2
 801b580:	4620      	mov	r0, r4
 801b582:	f7ff fc57 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b586:	b1a0      	cbz	r0, 801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b588:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b58c:	6862      	ldr	r2, [r4, #4]
 801b58e:	f443 6378 	orr.w	r3, r3, #3968	; 0xf80
 801b592:	8013      	strh	r3, [r2, #0]
 801b594:	b31d      	cbz	r5, 801b5de <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x10a>
 801b596:	4620      	mov	r0, r4
 801b598:	f7f5 fe54 	bl	8011244 <53e82eb6b4a62b6f9ee0ef3537712fb314d6424c>
 801b59c:	b9f8      	cbnz	r0, 801b5de <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x10a>
 801b59e:	2301      	movs	r3, #1
 801b5a0:	9302      	str	r3, [sp, #8]
 801b5a2:	4b50      	ldr	r3, [pc, #320]	; (801b6e4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x210>)
 801b5a4:	9303      	str	r3, [sp, #12]
 801b5a6:	ab04      	add	r3, sp, #16
 801b5a8:	e913 0003 	ldmdb	r3, {r0, r1}
 801b5ac:	4a4e      	ldr	r2, [pc, #312]	; (801b6e8 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x214>)
 801b5ae:	f7f5 f841 	bl	8010634 <LOGGER_PrintLine>
 801b5b2:	2000      	movs	r0, #0
 801b5b4:	b005      	add	sp, #20
 801b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ba:	f04f 0901 	mov.w	r9, #1
 801b5be:	e79b      	b.n	801b4f8 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x24>
 801b5c0:	7a23      	ldrb	r3, [r4, #8]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d0af      	beq.n	801b526 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x52>
 801b5c6:	f1b9 0f00 	cmp.w	r9, #0
 801b5ca:	d0ac      	beq.n	801b526 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x52>
 801b5cc:	2102      	movs	r1, #2
 801b5ce:	4620      	mov	r0, r4
 801b5d0:	f7ff fc30 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b5d4:	2800      	cmp	r0, #0
 801b5d6:	d0ec      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b5d8:	6863      	ldr	r3, [r4, #4]
 801b5da:	2280      	movs	r2, #128	; 0x80
 801b5dc:	e79f      	b.n	801b51e <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x4a>
 801b5de:	2002      	movs	r0, #2
 801b5e0:	f7f1 f822 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801b5e4:	2201      	movs	r2, #1
 801b5e6:	4601      	mov	r1, r0
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f7ff fc43 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 801b5ee:	2f00      	cmp	r7, #0
 801b5f0:	d033      	beq.n	801b65a <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x186>
 801b5f2:	2101      	movs	r1, #1
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f7ff fc1d 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b5fa:	2800      	cmp	r0, #0
 801b5fc:	d0d9      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b5fe:	6863      	ldr	r3, [r4, #4]
 801b600:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801b604:	f883 8000 	strb.w	r8, [r3]
 801b608:	2101      	movs	r1, #1
 801b60a:	4620      	mov	r0, r4
 801b60c:	f7ff fc12 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b610:	2800      	cmp	r0, #0
 801b612:	d0ce      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b614:	6863      	ldr	r3, [r4, #4]
 801b616:	f883 8000 	strb.w	r8, [r3]
 801b61a:	2004      	movs	r0, #4
 801b61c:	f7f1 f804 	bl	800c628 <976f1995b2c83947a84b9c8a6775d2e1dcb20b1a>
 801b620:	2201      	movs	r2, #1
 801b622:	4601      	mov	r1, r0
 801b624:	4620      	mov	r0, r4
 801b626:	f7ff fc25 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 801b62a:	2101      	movs	r1, #1
 801b62c:	4620      	mov	r0, r4
 801b62e:	f7ff fc01 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b632:	2800      	cmp	r0, #0
 801b634:	d0bd      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b636:	6863      	ldr	r3, [r4, #4]
 801b638:	9a01      	ldr	r2, [sp, #4]
 801b63a:	701a      	strb	r2, [r3, #0]
 801b63c:	2101      	movs	r1, #1
 801b63e:	4620      	mov	r0, r4
 801b640:	f7ff fbf8 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b644:	2800      	cmp	r0, #0
 801b646:	d0b4      	beq.n	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b648:	bb07      	cbnz	r7, 801b68c <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b8>
 801b64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b64c:	781b      	ldrb	r3, [r3, #0]
 801b64e:	2b01      	cmp	r3, #1
 801b650:	d01c      	beq.n	801b68c <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b8>
 801b652:	2b02      	cmp	r3, #2
 801b654:	d041      	beq.n	801b6da <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x206>
 801b656:	22a1      	movs	r2, #161	; 0xa1
 801b658:	e014      	b.n	801b684 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1b0>
 801b65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b65c:	781b      	ldrb	r3, [r3, #0]
 801b65e:	1e5a      	subs	r2, r3, #1
 801b660:	2a01      	cmp	r2, #1
 801b662:	d805      	bhi.n	801b670 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x19c>
 801b664:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b666:	2201      	movs	r2, #1
 801b668:	4620      	mov	r0, r4
 801b66a:	f7ff fc03 	bl	801ae74 <32e95e23f85b24d0518a874b34392b7cb5b4c6f3>
 801b66e:	e7d4      	b.n	801b61a <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x146>
 801b670:	4a1c      	ldr	r2, [pc, #112]	; (801b6e4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x210>)
 801b672:	9203      	str	r2, [sp, #12]
 801b674:	9702      	str	r7, [sp, #8]
 801b676:	a904      	add	r1, sp, #16
 801b678:	4a1c      	ldr	r2, [pc, #112]	; (801b6ec <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x218>)
 801b67a:	e911 0003 	ldmdb	r1, {r0, r1}
 801b67e:	f7f4 ffd9 	bl	8010634 <LOGGER_PrintLine>
 801b682:	2282      	movs	r2, #130	; 0x82
 801b684:	491a      	ldr	r1, [pc, #104]	; (801b6f0 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x21c>)
 801b686:	481b      	ldr	r0, [pc, #108]	; (801b6f4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x220>)
 801b688:	f7e6 f926 	bl	80018d8 <EXPECT_OnAbortHandler>
 801b68c:	f04f 0802 	mov.w	r8, #2
 801b690:	2308      	movs	r3, #8
 801b692:	f1ba 0f00 	cmp.w	sl, #0
 801b696:	bf18      	it	ne
 801b698:	f04f 0901 	movne.w	r9, #1
 801b69c:	6862      	ldr	r2, [r4, #4]
 801b69e:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
 801b6a2:	f063 031f 	orn	r3, r3, #31
 801b6a6:	7013      	strb	r3, [r2, #0]
 801b6a8:	2101      	movs	r1, #1
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	f7ff fbc2 	bl	801ae34 <2c8c667690c01bde438685a4c74ee211f27a3939>
 801b6b0:	2800      	cmp	r0, #0
 801b6b2:	f43f af7e 	beq.w	801b5b2 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xde>
 801b6b6:	3d00      	subs	r5, #0
 801b6b8:	bf18      	it	ne
 801b6ba:	2501      	movne	r5, #1
 801b6bc:	2e02      	cmp	r6, #2
 801b6be:	ea46 05c5 	orr.w	r5, r6, r5, lsl #3
 801b6c2:	d002      	beq.n	801b6ca <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1f6>
 801b6c4:	b90f      	cbnz	r7, 801b6ca <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1f6>
 801b6c6:	f045 0520 	orr.w	r5, r5, #32
 801b6ca:	6863      	ldr	r3, [r4, #4]
 801b6cc:	f1b8 0f02 	cmp.w	r8, #2
 801b6d0:	bf08      	it	eq
 801b6d2:	f045 0540 	orreq.w	r5, r5, #64	; 0x40
 801b6d6:	701d      	strb	r5, [r3, #0]
 801b6d8:	e76c      	b.n	801b5b4 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0xe0>
 801b6da:	f04f 0803 	mov.w	r8, #3
 801b6de:	230c      	movs	r3, #12
 801b6e0:	e7d7      	b.n	801b692 <984b363f625cd8cdfbde20196ca1e6fa15d151b4+0x1be>
 801b6e2:	bf00      	nop
 801b6e4:	08021fd8 	.word	0x08021fd8
 801b6e8:	08021fe3 	.word	0x08021fe3
 801b6ec:	08022004 	.word	0x08022004
 801b6f0:	0802201b 	.word	0x0802201b
 801b6f4:	0801f32a 	.word	0x0801f32a

0801b6f8 <93646682ea820ae310ba1b54d0fccca9d773749e>:
 801b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	800b      	strh	r3, [r1, #0]
 801b6fe:	650b      	str	r3, [r1, #80]	; 0x50
 801b700:	6843      	ldr	r3, [r0, #4]
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	f003 0207 	and.w	r2, r3, #7
 801b708:	708a      	strb	r2, [r1, #2]
 801b70a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801b70e:	70ca      	strb	r2, [r1, #3]
 801b710:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801b714:	710a      	strb	r2, [r1, #4]
 801b716:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801b71a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b71e:	718b      	strb	r3, [r1, #6]
 801b720:	2301      	movs	r3, #1
 801b722:	714a      	strb	r2, [r1, #5]
 801b724:	704b      	strb	r3, [r1, #1]
 801b726:	7a03      	ldrb	r3, [r0, #8]
 801b728:	b087      	sub	sp, #28
 801b72a:	4605      	mov	r5, r0
 801b72c:	460c      	mov	r4, r1
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f000 808b 	beq.w	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b734:	6843      	ldr	r3, [r0, #4]
 801b736:	785b      	ldrb	r3, [r3, #1]
 801b738:	f3c3 0040 	ubfx	r0, r3, #1, #1
 801b73c:	f3c3 1201 	ubfx	r2, r3, #4, #2
 801b740:	71c8      	strb	r0, [r1, #7]
 801b742:	720a      	strb	r2, [r1, #8]
 801b744:	f003 0101 	and.w	r1, r3, #1
 801b748:	72a1      	strb	r1, [r4, #10]
 801b74a:	b108      	cbz	r0, 801b750 <93646682ea820ae310ba1b54d0fccca9d773749e+0x58>
 801b74c:	2a02      	cmp	r2, #2
 801b74e:	d17c      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b750:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801b754:	2a02      	cmp	r2, #2
 801b756:	d056      	beq.n	801b806 <93646682ea820ae310ba1b54d0fccca9d773749e+0x10e>
 801b758:	2a03      	cmp	r2, #3
 801b75a:	d056      	beq.n	801b80a <93646682ea820ae310ba1b54d0fccca9d773749e+0x112>
 801b75c:	2a00      	cmp	r2, #0
 801b75e:	d174      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b760:	099b      	lsrs	r3, r3, #6
 801b762:	2b02      	cmp	r3, #2
 801b764:	7722      	strb	r2, [r4, #28]
 801b766:	d052      	beq.n	801b80e <93646682ea820ae310ba1b54d0fccca9d773749e+0x116>
 801b768:	2b03      	cmp	r3, #3
 801b76a:	d052      	beq.n	801b812 <93646682ea820ae310ba1b54d0fccca9d773749e+0x11a>
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d16c      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b770:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b774:	2302      	movs	r3, #2
 801b776:	7063      	strb	r3, [r4, #1]
 801b778:	b939      	cbnz	r1, 801b78a <93646682ea820ae310ba1b54d0fccca9d773749e+0x92>
 801b77a:	7a2b      	ldrb	r3, [r5, #8]
 801b77c:	2b01      	cmp	r3, #1
 801b77e:	d964      	bls.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b780:	686b      	ldr	r3, [r5, #4]
 801b782:	789b      	ldrb	r3, [r3, #2]
 801b784:	7263      	strb	r3, [r4, #9]
 801b786:	2303      	movs	r3, #3
 801b788:	7063      	strb	r3, [r4, #1]
 801b78a:	7861      	ldrb	r1, [r4, #1]
 801b78c:	7a2b      	ldrb	r3, [r5, #8]
 801b78e:	428b      	cmp	r3, r1
 801b790:	d35b      	bcc.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b792:	6868      	ldr	r0, [r5, #4]
 801b794:	2301      	movs	r3, #1
 801b796:	2204      	movs	r2, #4
 801b798:	4401      	add	r1, r0
 801b79a:	4668      	mov	r0, sp
 801b79c:	f7ff fb15 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801b7a0:	ae04      	add	r6, sp, #16
 801b7a2:	466a      	mov	r2, sp
 801b7a4:	f104 030b 	add.w	r3, r4, #11
 801b7a8:	f852 1b04 	ldr.w	r1, [r2], #4
 801b7ac:	f843 1b04 	str.w	r1, [r3], #4
 801b7b0:	42b2      	cmp	r2, r6
 801b7b2:	d1f9      	bne.n	801b7a8 <93646682ea820ae310ba1b54d0fccca9d773749e+0xb0>
 801b7b4:	7832      	ldrb	r2, [r6, #0]
 801b7b6:	701a      	strb	r2, [r3, #0]
 801b7b8:	7861      	ldrb	r1, [r4, #1]
 801b7ba:	3102      	adds	r1, #2
 801b7bc:	b2c9      	uxtb	r1, r1
 801b7be:	7061      	strb	r1, [r4, #1]
 801b7c0:	7a2b      	ldrb	r3, [r5, #8]
 801b7c2:	428b      	cmp	r3, r1
 801b7c4:	d341      	bcc.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b7c6:	7f22      	ldrb	r2, [r4, #28]
 801b7c8:	2a01      	cmp	r2, #1
 801b7ca:	d024      	beq.n	801b816 <93646682ea820ae310ba1b54d0fccca9d773749e+0x11e>
 801b7cc:	2a02      	cmp	r2, #2
 801b7ce:	d03e      	beq.n	801b84e <93646682ea820ae310ba1b54d0fccca9d773749e+0x156>
 801b7d0:	2a00      	cmp	r2, #0
 801b7d2:	d13a      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b7d4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801b7d8:	2a01      	cmp	r2, #1
 801b7da:	d04e      	beq.n	801b87a <93646682ea820ae310ba1b54d0fccca9d773749e+0x182>
 801b7dc:	2a02      	cmp	r2, #2
 801b7de:	d066      	beq.n	801b8ae <93646682ea820ae310ba1b54d0fccca9d773749e+0x1b6>
 801b7e0:	2a00      	cmp	r2, #0
 801b7e2:	d132      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b7e4:	79e3      	ldrb	r3, [r4, #7]
 801b7e6:	b113      	cbz	r3, 801b7ee <93646682ea820ae310ba1b54d0fccca9d773749e+0xf6>
 801b7e8:	7a23      	ldrb	r3, [r4, #8]
 801b7ea:	2b02      	cmp	r3, #2
 801b7ec:	d12d      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b7ee:	78e3      	ldrb	r3, [r4, #3]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d171      	bne.n	801b8d8 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1e0>
 801b7f4:	79e3      	ldrb	r3, [r4, #7]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f040 80b2 	bne.w	801b960 <93646682ea820ae310ba1b54d0fccca9d773749e+0x268>
 801b7fc:	7862      	ldrb	r2, [r4, #1]
 801b7fe:	686b      	ldr	r3, [r5, #4]
 801b800:	4413      	add	r3, r2
 801b802:	65eb      	str	r3, [r5, #92]	; 0x5c
 801b804:	e0a7      	b.n	801b956 <93646682ea820ae310ba1b54d0fccca9d773749e+0x25e>
 801b806:	2201      	movs	r2, #1
 801b808:	e7aa      	b.n	801b760 <93646682ea820ae310ba1b54d0fccca9d773749e+0x68>
 801b80a:	2202      	movs	r2, #2
 801b80c:	e7a8      	b.n	801b760 <93646682ea820ae310ba1b54d0fccca9d773749e+0x68>
 801b80e:	2301      	movs	r3, #1
 801b810:	e7ae      	b.n	801b770 <93646682ea820ae310ba1b54d0fccca9d773749e+0x78>
 801b812:	2302      	movs	r3, #2
 801b814:	e7ac      	b.n	801b770 <93646682ea820ae310ba1b54d0fccca9d773749e+0x78>
 801b816:	6868      	ldr	r0, [r5, #4]
 801b818:	4613      	mov	r3, r2
 801b81a:	4401      	add	r1, r0
 801b81c:	4668      	mov	r0, sp
 801b81e:	f7ff fad4 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801b822:	466b      	mov	r3, sp
 801b824:	f104 021c 	add.w	r2, r4, #28
 801b828:	6818      	ldr	r0, [r3, #0]
 801b82a:	6859      	ldr	r1, [r3, #4]
 801b82c:	4617      	mov	r7, r2
 801b82e:	c703      	stmia	r7!, {r0, r1}
 801b830:	3308      	adds	r3, #8
 801b832:	42b3      	cmp	r3, r6
 801b834:	463a      	mov	r2, r7
 801b836:	d1f7      	bne.n	801b828 <93646682ea820ae310ba1b54d0fccca9d773749e+0x130>
 801b838:	7833      	ldrb	r3, [r6, #0]
 801b83a:	703b      	strb	r3, [r7, #0]
 801b83c:	7863      	ldrb	r3, [r4, #1]
 801b83e:	3302      	adds	r3, #2
 801b840:	b2db      	uxtb	r3, r3
 801b842:	7063      	strb	r3, [r4, #1]
 801b844:	7a2a      	ldrb	r2, [r5, #8]
 801b846:	429a      	cmp	r2, r3
 801b848:	d2c4      	bcs.n	801b7d4 <93646682ea820ae310ba1b54d0fccca9d773749e+0xdc>
 801b84a:	b007      	add	sp, #28
 801b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b84e:	6868      	ldr	r0, [r5, #4]
 801b850:	2301      	movs	r3, #1
 801b852:	4401      	add	r1, r0
 801b854:	4668      	mov	r0, sp
 801b856:	f7ff fab8 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801b85a:	466b      	mov	r3, sp
 801b85c:	f104 021c 	add.w	r2, r4, #28
 801b860:	6818      	ldr	r0, [r3, #0]
 801b862:	6859      	ldr	r1, [r3, #4]
 801b864:	4617      	mov	r7, r2
 801b866:	c703      	stmia	r7!, {r0, r1}
 801b868:	3308      	adds	r3, #8
 801b86a:	42b3      	cmp	r3, r6
 801b86c:	463a      	mov	r2, r7
 801b86e:	d1f7      	bne.n	801b860 <93646682ea820ae310ba1b54d0fccca9d773749e+0x168>
 801b870:	7833      	ldrb	r3, [r6, #0]
 801b872:	703b      	strb	r3, [r7, #0]
 801b874:	7863      	ldrb	r3, [r4, #1]
 801b876:	3308      	adds	r3, #8
 801b878:	e7e2      	b.n	801b840 <93646682ea820ae310ba1b54d0fccca9d773749e+0x148>
 801b87a:	6868      	ldr	r0, [r5, #4]
 801b87c:	7861      	ldrb	r1, [r4, #1]
 801b87e:	4613      	mov	r3, r2
 801b880:	4401      	add	r1, r0
 801b882:	4668      	mov	r0, sp
 801b884:	f7ff faa1 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801b888:	466b      	mov	r3, sp
 801b88a:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 801b88e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b892:	f842 1b04 	str.w	r1, [r2], #4
 801b896:	42b3      	cmp	r3, r6
 801b898:	d1f9      	bne.n	801b88e <93646682ea820ae310ba1b54d0fccca9d773749e+0x196>
 801b89a:	781b      	ldrb	r3, [r3, #0]
 801b89c:	7013      	strb	r3, [r2, #0]
 801b89e:	7863      	ldrb	r3, [r4, #1]
 801b8a0:	3302      	adds	r3, #2
 801b8a2:	b2db      	uxtb	r3, r3
 801b8a4:	7063      	strb	r3, [r4, #1]
 801b8a6:	7a2a      	ldrb	r2, [r5, #8]
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d29b      	bcs.n	801b7e4 <93646682ea820ae310ba1b54d0fccca9d773749e+0xec>
 801b8ac:	e7cd      	b.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b8ae:	6868      	ldr	r0, [r5, #4]
 801b8b0:	7861      	ldrb	r1, [r4, #1]
 801b8b2:	2301      	movs	r3, #1
 801b8b4:	4401      	add	r1, r0
 801b8b6:	4668      	mov	r0, sp
 801b8b8:	f7ff fa87 	bl	801adca <b35bcee5624976b5f696cb546804f9909547b46c>
 801b8bc:	466b      	mov	r3, sp
 801b8be:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 801b8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 801b8c6:	f842 1b04 	str.w	r1, [r2], #4
 801b8ca:	42b3      	cmp	r3, r6
 801b8cc:	d1f9      	bne.n	801b8c2 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1ca>
 801b8ce:	781b      	ldrb	r3, [r3, #0]
 801b8d0:	7013      	strb	r3, [r2, #0]
 801b8d2:	7863      	ldrb	r3, [r4, #1]
 801b8d4:	3308      	adds	r3, #8
 801b8d6:	e7e4      	b.n	801b8a2 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1aa>
 801b8d8:	4621      	mov	r1, r4
 801b8da:	4628      	mov	r0, r5
 801b8dc:	f7f5 fd6a 	bl	80113b4 <245bc706add2545900df78a3f141ff0f80e5adf9>
 801b8e0:	2800      	cmp	r0, #0
 801b8e2:	d187      	bne.n	801b7f4 <93646682ea820ae310ba1b54d0fccca9d773749e+0xfc>
 801b8e4:	e7b1      	b.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b8e6:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
 801b8ea:	d101      	bne.n	801b8f0 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1f8>
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	e049      	b.n	801b984 <93646682ea820ae310ba1b54d0fccca9d773749e+0x28c>
 801b8f0:	2a00      	cmp	r2, #0
 801b8f2:	dbaa      	blt.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b8f4:	f002 077f 	and.w	r7, r2, #127	; 0x7f
 801b8f8:	11d2      	asrs	r2, r2, #7
 801b8fa:	2a1e      	cmp	r2, #30
 801b8fc:	d011      	beq.n	801b922 <93646682ea820ae310ba1b54d0fccca9d773749e+0x22a>
 801b8fe:	2a1f      	cmp	r2, #31
 801b900:	d1a3      	bne.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b902:	2f10      	cmp	r7, #16
 801b904:	dca1      	bgt.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b906:	6869      	ldr	r1, [r5, #4]
 801b908:	4431      	add	r1, r6
 801b90a:	443e      	add	r6, r7
 801b90c:	b2f6      	uxtb	r6, r6
 801b90e:	463a      	mov	r2, r7
 801b910:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801b914:	f000 fbe7 	bl	801c0e6 <memcpy>
 801b918:	6527      	str	r7, [r4, #80]	; 0x50
 801b91a:	7066      	strb	r6, [r4, #1]
 801b91c:	686b      	ldr	r3, [r5, #4]
 801b91e:	4433      	add	r3, r6
 801b920:	e011      	b.n	801b946 <93646682ea820ae310ba1b54d0fccca9d773749e+0x24e>
 801b922:	686b      	ldr	r3, [r5, #4]
 801b924:	5b9b      	ldrh	r3, [r3, r6]
 801b926:	051a      	lsls	r2, r3, #20
 801b928:	bf44      	itt	mi
 801b92a:	ea6f 5303 	mvnmi.w	r3, r3, lsl #20
 801b92e:	ea6f 5313 	mvnmi.w	r3, r3, lsr #20
 801b932:	4437      	add	r7, r6
 801b934:	bf4c      	ite	mi
 801b936:	b21b      	sxthmi	r3, r3
 801b938:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 801b93c:	b2ff      	uxtb	r7, r7
 801b93e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801b940:	7067      	strb	r7, [r4, #1]
 801b942:	686b      	ldr	r3, [r5, #4]
 801b944:	443b      	add	r3, r7
 801b946:	65eb      	str	r3, [r5, #92]	; 0x5c
 801b948:	f895 10b5 	ldrb.w	r1, [r5, #181]	; 0xb5
 801b94c:	7a2b      	ldrb	r3, [r5, #8]
 801b94e:	7862      	ldrb	r2, [r4, #1]
 801b950:	1a5b      	subs	r3, r3, r1
 801b952:	429a      	cmp	r2, r3
 801b954:	d102      	bne.n	801b95c <93646682ea820ae310ba1b54d0fccca9d773749e+0x264>
 801b956:	2301      	movs	r3, #1
 801b958:	7023      	strb	r3, [r4, #0]
 801b95a:	e776      	b.n	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b95c:	f73f af75 	bgt.w	801b84a <93646682ea820ae310ba1b54d0fccca9d773749e+0x152>
 801b960:	7866      	ldrb	r6, [r4, #1]
 801b962:	686b      	ldr	r3, [r5, #4]
 801b964:	1c72      	adds	r2, r6, #1
 801b966:	b2d2      	uxtb	r2, r2
 801b968:	5d9b      	ldrb	r3, [r3, r6]
 801b96a:	7062      	strb	r2, [r4, #1]
 801b96c:	6869      	ldr	r1, [r5, #4]
 801b96e:	5c8a      	ldrb	r2, [r1, r2]
 801b970:	3602      	adds	r6, #2
 801b972:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b976:	b2f6      	uxtb	r6, r6
 801b978:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 801b97c:	b21a      	sxth	r2, r3
 801b97e:	7066      	strb	r6, [r4, #1]
 801b980:	d1b1      	bne.n	801b8e6 <93646682ea820ae310ba1b54d0fccca9d773749e+0x1ee>
 801b982:	2301      	movs	r3, #1
 801b984:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
 801b988:	e738      	b.n	801b7fc <93646682ea820ae310ba1b54d0fccca9d773749e+0x104>
	...

0801b98c <malloc>:
 801b98c:	4b02      	ldr	r3, [pc, #8]	; (801b998 <malloc+0xc>)
 801b98e:	4601      	mov	r1, r0
 801b990:	6818      	ldr	r0, [r3, #0]
 801b992:	f000 b82b 	b.w	801b9ec <_malloc_r>
 801b996:	bf00      	nop
 801b998:	2000009c 	.word	0x2000009c

0801b99c <free>:
 801b99c:	4b02      	ldr	r3, [pc, #8]	; (801b9a8 <free+0xc>)
 801b99e:	4601      	mov	r1, r0
 801b9a0:	6818      	ldr	r0, [r3, #0]
 801b9a2:	f000 bbaf 	b.w	801c104 <_free_r>
 801b9a6:	bf00      	nop
 801b9a8:	2000009c 	.word	0x2000009c

0801b9ac <sbrk_aligned>:
 801b9ac:	b570      	push	{r4, r5, r6, lr}
 801b9ae:	4e0e      	ldr	r6, [pc, #56]	; (801b9e8 <sbrk_aligned+0x3c>)
 801b9b0:	460c      	mov	r4, r1
 801b9b2:	6831      	ldr	r1, [r6, #0]
 801b9b4:	4605      	mov	r5, r0
 801b9b6:	b911      	cbnz	r1, 801b9be <sbrk_aligned+0x12>
 801b9b8:	f000 fb44 	bl	801c044 <_sbrk_r>
 801b9bc:	6030      	str	r0, [r6, #0]
 801b9be:	4621      	mov	r1, r4
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	f000 fb3f 	bl	801c044 <_sbrk_r>
 801b9c6:	1c43      	adds	r3, r0, #1
 801b9c8:	d00a      	beq.n	801b9e0 <sbrk_aligned+0x34>
 801b9ca:	1cc4      	adds	r4, r0, #3
 801b9cc:	f024 0403 	bic.w	r4, r4, #3
 801b9d0:	42a0      	cmp	r0, r4
 801b9d2:	d007      	beq.n	801b9e4 <sbrk_aligned+0x38>
 801b9d4:	1a21      	subs	r1, r4, r0
 801b9d6:	4628      	mov	r0, r5
 801b9d8:	f000 fb34 	bl	801c044 <_sbrk_r>
 801b9dc:	3001      	adds	r0, #1
 801b9de:	d101      	bne.n	801b9e4 <sbrk_aligned+0x38>
 801b9e0:	f04f 34ff 	mov.w	r4, #4294967295
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	bd70      	pop	{r4, r5, r6, pc}
 801b9e8:	20003e5c 	.word	0x20003e5c

0801b9ec <_malloc_r>:
 801b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9f0:	1ccd      	adds	r5, r1, #3
 801b9f2:	f025 0503 	bic.w	r5, r5, #3
 801b9f6:	3508      	adds	r5, #8
 801b9f8:	2d0c      	cmp	r5, #12
 801b9fa:	bf38      	it	cc
 801b9fc:	250c      	movcc	r5, #12
 801b9fe:	2d00      	cmp	r5, #0
 801ba00:	4607      	mov	r7, r0
 801ba02:	db01      	blt.n	801ba08 <_malloc_r+0x1c>
 801ba04:	42a9      	cmp	r1, r5
 801ba06:	d905      	bls.n	801ba14 <_malloc_r+0x28>
 801ba08:	230c      	movs	r3, #12
 801ba0a:	603b      	str	r3, [r7, #0]
 801ba0c:	2600      	movs	r6, #0
 801ba0e:	4630      	mov	r0, r6
 801ba10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bae8 <_malloc_r+0xfc>
 801ba18:	f000 f868 	bl	801baec <__malloc_lock>
 801ba1c:	f8d8 3000 	ldr.w	r3, [r8]
 801ba20:	461c      	mov	r4, r3
 801ba22:	bb5c      	cbnz	r4, 801ba7c <_malloc_r+0x90>
 801ba24:	4629      	mov	r1, r5
 801ba26:	4638      	mov	r0, r7
 801ba28:	f7ff ffc0 	bl	801b9ac <sbrk_aligned>
 801ba2c:	1c43      	adds	r3, r0, #1
 801ba2e:	4604      	mov	r4, r0
 801ba30:	d155      	bne.n	801bade <_malloc_r+0xf2>
 801ba32:	f8d8 4000 	ldr.w	r4, [r8]
 801ba36:	4626      	mov	r6, r4
 801ba38:	2e00      	cmp	r6, #0
 801ba3a:	d145      	bne.n	801bac8 <_malloc_r+0xdc>
 801ba3c:	2c00      	cmp	r4, #0
 801ba3e:	d048      	beq.n	801bad2 <_malloc_r+0xe6>
 801ba40:	6823      	ldr	r3, [r4, #0]
 801ba42:	4631      	mov	r1, r6
 801ba44:	4638      	mov	r0, r7
 801ba46:	eb04 0903 	add.w	r9, r4, r3
 801ba4a:	f000 fafb 	bl	801c044 <_sbrk_r>
 801ba4e:	4581      	cmp	r9, r0
 801ba50:	d13f      	bne.n	801bad2 <_malloc_r+0xe6>
 801ba52:	6821      	ldr	r1, [r4, #0]
 801ba54:	1a6d      	subs	r5, r5, r1
 801ba56:	4629      	mov	r1, r5
 801ba58:	4638      	mov	r0, r7
 801ba5a:	f7ff ffa7 	bl	801b9ac <sbrk_aligned>
 801ba5e:	3001      	adds	r0, #1
 801ba60:	d037      	beq.n	801bad2 <_malloc_r+0xe6>
 801ba62:	6823      	ldr	r3, [r4, #0]
 801ba64:	442b      	add	r3, r5
 801ba66:	6023      	str	r3, [r4, #0]
 801ba68:	f8d8 3000 	ldr.w	r3, [r8]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d038      	beq.n	801bae2 <_malloc_r+0xf6>
 801ba70:	685a      	ldr	r2, [r3, #4]
 801ba72:	42a2      	cmp	r2, r4
 801ba74:	d12b      	bne.n	801bace <_malloc_r+0xe2>
 801ba76:	2200      	movs	r2, #0
 801ba78:	605a      	str	r2, [r3, #4]
 801ba7a:	e00f      	b.n	801ba9c <_malloc_r+0xb0>
 801ba7c:	6822      	ldr	r2, [r4, #0]
 801ba7e:	1b52      	subs	r2, r2, r5
 801ba80:	d41f      	bmi.n	801bac2 <_malloc_r+0xd6>
 801ba82:	2a0b      	cmp	r2, #11
 801ba84:	d917      	bls.n	801bab6 <_malloc_r+0xca>
 801ba86:	1961      	adds	r1, r4, r5
 801ba88:	42a3      	cmp	r3, r4
 801ba8a:	6025      	str	r5, [r4, #0]
 801ba8c:	bf18      	it	ne
 801ba8e:	6059      	strne	r1, [r3, #4]
 801ba90:	6863      	ldr	r3, [r4, #4]
 801ba92:	bf08      	it	eq
 801ba94:	f8c8 1000 	streq.w	r1, [r8]
 801ba98:	5162      	str	r2, [r4, r5]
 801ba9a:	604b      	str	r3, [r1, #4]
 801ba9c:	4638      	mov	r0, r7
 801ba9e:	f104 060b 	add.w	r6, r4, #11
 801baa2:	f000 f829 	bl	801baf8 <__malloc_unlock>
 801baa6:	f026 0607 	bic.w	r6, r6, #7
 801baaa:	1d23      	adds	r3, r4, #4
 801baac:	1af2      	subs	r2, r6, r3
 801baae:	d0ae      	beq.n	801ba0e <_malloc_r+0x22>
 801bab0:	1b9b      	subs	r3, r3, r6
 801bab2:	50a3      	str	r3, [r4, r2]
 801bab4:	e7ab      	b.n	801ba0e <_malloc_r+0x22>
 801bab6:	42a3      	cmp	r3, r4
 801bab8:	6862      	ldr	r2, [r4, #4]
 801baba:	d1dd      	bne.n	801ba78 <_malloc_r+0x8c>
 801babc:	f8c8 2000 	str.w	r2, [r8]
 801bac0:	e7ec      	b.n	801ba9c <_malloc_r+0xb0>
 801bac2:	4623      	mov	r3, r4
 801bac4:	6864      	ldr	r4, [r4, #4]
 801bac6:	e7ac      	b.n	801ba22 <_malloc_r+0x36>
 801bac8:	4634      	mov	r4, r6
 801baca:	6876      	ldr	r6, [r6, #4]
 801bacc:	e7b4      	b.n	801ba38 <_malloc_r+0x4c>
 801bace:	4613      	mov	r3, r2
 801bad0:	e7cc      	b.n	801ba6c <_malloc_r+0x80>
 801bad2:	230c      	movs	r3, #12
 801bad4:	603b      	str	r3, [r7, #0]
 801bad6:	4638      	mov	r0, r7
 801bad8:	f000 f80e 	bl	801baf8 <__malloc_unlock>
 801badc:	e797      	b.n	801ba0e <_malloc_r+0x22>
 801bade:	6025      	str	r5, [r4, #0]
 801bae0:	e7dc      	b.n	801ba9c <_malloc_r+0xb0>
 801bae2:	605b      	str	r3, [r3, #4]
 801bae4:	deff      	udf	#255	; 0xff
 801bae6:	bf00      	nop
 801bae8:	20003e58 	.word	0x20003e58

0801baec <__malloc_lock>:
 801baec:	4801      	ldr	r0, [pc, #4]	; (801baf4 <__malloc_lock+0x8>)
 801baee:	f000 baf0 	b.w	801c0d2 <__retarget_lock_acquire_recursive>
 801baf2:	bf00      	nop
 801baf4:	20003fa0 	.word	0x20003fa0

0801baf8 <__malloc_unlock>:
 801baf8:	4801      	ldr	r0, [pc, #4]	; (801bb00 <__malloc_unlock+0x8>)
 801bafa:	f000 baeb 	b.w	801c0d4 <__retarget_lock_release_recursive>
 801bafe:	bf00      	nop
 801bb00:	20003fa0 	.word	0x20003fa0

0801bb04 <std>:
 801bb04:	2300      	movs	r3, #0
 801bb06:	b510      	push	{r4, lr}
 801bb08:	4604      	mov	r4, r0
 801bb0a:	e9c0 3300 	strd	r3, r3, [r0]
 801bb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb12:	6083      	str	r3, [r0, #8]
 801bb14:	8181      	strh	r1, [r0, #12]
 801bb16:	6643      	str	r3, [r0, #100]	; 0x64
 801bb18:	81c2      	strh	r2, [r0, #14]
 801bb1a:	6183      	str	r3, [r0, #24]
 801bb1c:	4619      	mov	r1, r3
 801bb1e:	2208      	movs	r2, #8
 801bb20:	305c      	adds	r0, #92	; 0x5c
 801bb22:	f000 fa41 	bl	801bfa8 <memset>
 801bb26:	4b0d      	ldr	r3, [pc, #52]	; (801bb5c <std+0x58>)
 801bb28:	6263      	str	r3, [r4, #36]	; 0x24
 801bb2a:	4b0d      	ldr	r3, [pc, #52]	; (801bb60 <std+0x5c>)
 801bb2c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bb2e:	4b0d      	ldr	r3, [pc, #52]	; (801bb64 <std+0x60>)
 801bb30:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bb32:	4b0d      	ldr	r3, [pc, #52]	; (801bb68 <std+0x64>)
 801bb34:	6323      	str	r3, [r4, #48]	; 0x30
 801bb36:	4b0d      	ldr	r3, [pc, #52]	; (801bb6c <std+0x68>)
 801bb38:	6224      	str	r4, [r4, #32]
 801bb3a:	429c      	cmp	r4, r3
 801bb3c:	d006      	beq.n	801bb4c <std+0x48>
 801bb3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bb42:	4294      	cmp	r4, r2
 801bb44:	d002      	beq.n	801bb4c <std+0x48>
 801bb46:	33d0      	adds	r3, #208	; 0xd0
 801bb48:	429c      	cmp	r4, r3
 801bb4a:	d105      	bne.n	801bb58 <std+0x54>
 801bb4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb54:	f000 babc 	b.w	801c0d0 <__retarget_lock_init_recursive>
 801bb58:	bd10      	pop	{r4, pc}
 801bb5a:	bf00      	nop
 801bb5c:	0801bda5 	.word	0x0801bda5
 801bb60:	0801bdc7 	.word	0x0801bdc7
 801bb64:	0801bdff 	.word	0x0801bdff
 801bb68:	0801be23 	.word	0x0801be23
 801bb6c:	20003e60 	.word	0x20003e60

0801bb70 <stdio_exit_handler>:
 801bb70:	4a02      	ldr	r2, [pc, #8]	; (801bb7c <stdio_exit_handler+0xc>)
 801bb72:	4903      	ldr	r1, [pc, #12]	; (801bb80 <stdio_exit_handler+0x10>)
 801bb74:	4803      	ldr	r0, [pc, #12]	; (801bb84 <stdio_exit_handler+0x14>)
 801bb76:	f000 b869 	b.w	801bc4c <_fwalk_sglue>
 801bb7a:	bf00      	nop
 801bb7c:	20000044 	.word	0x20000044
 801bb80:	0801caf1 	.word	0x0801caf1
 801bb84:	20000050 	.word	0x20000050

0801bb88 <cleanup_stdio>:
 801bb88:	6841      	ldr	r1, [r0, #4]
 801bb8a:	4b0c      	ldr	r3, [pc, #48]	; (801bbbc <cleanup_stdio+0x34>)
 801bb8c:	4299      	cmp	r1, r3
 801bb8e:	b510      	push	{r4, lr}
 801bb90:	4604      	mov	r4, r0
 801bb92:	d001      	beq.n	801bb98 <cleanup_stdio+0x10>
 801bb94:	f000 ffac 	bl	801caf0 <_fflush_r>
 801bb98:	68a1      	ldr	r1, [r4, #8]
 801bb9a:	4b09      	ldr	r3, [pc, #36]	; (801bbc0 <cleanup_stdio+0x38>)
 801bb9c:	4299      	cmp	r1, r3
 801bb9e:	d002      	beq.n	801bba6 <cleanup_stdio+0x1e>
 801bba0:	4620      	mov	r0, r4
 801bba2:	f000 ffa5 	bl	801caf0 <_fflush_r>
 801bba6:	68e1      	ldr	r1, [r4, #12]
 801bba8:	4b06      	ldr	r3, [pc, #24]	; (801bbc4 <cleanup_stdio+0x3c>)
 801bbaa:	4299      	cmp	r1, r3
 801bbac:	d004      	beq.n	801bbb8 <cleanup_stdio+0x30>
 801bbae:	4620      	mov	r0, r4
 801bbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbb4:	f000 bf9c 	b.w	801caf0 <_fflush_r>
 801bbb8:	bd10      	pop	{r4, pc}
 801bbba:	bf00      	nop
 801bbbc:	20003e60 	.word	0x20003e60
 801bbc0:	20003ec8 	.word	0x20003ec8
 801bbc4:	20003f30 	.word	0x20003f30

0801bbc8 <global_stdio_init.part.0>:
 801bbc8:	b510      	push	{r4, lr}
 801bbca:	4b0b      	ldr	r3, [pc, #44]	; (801bbf8 <global_stdio_init.part.0+0x30>)
 801bbcc:	4c0b      	ldr	r4, [pc, #44]	; (801bbfc <global_stdio_init.part.0+0x34>)
 801bbce:	4a0c      	ldr	r2, [pc, #48]	; (801bc00 <global_stdio_init.part.0+0x38>)
 801bbd0:	601a      	str	r2, [r3, #0]
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	2104      	movs	r1, #4
 801bbd8:	f7ff ff94 	bl	801bb04 <std>
 801bbdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bbe0:	2201      	movs	r2, #1
 801bbe2:	2109      	movs	r1, #9
 801bbe4:	f7ff ff8e 	bl	801bb04 <std>
 801bbe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bbec:	2202      	movs	r2, #2
 801bbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbf2:	2112      	movs	r1, #18
 801bbf4:	f7ff bf86 	b.w	801bb04 <std>
 801bbf8:	20003f98 	.word	0x20003f98
 801bbfc:	20003e60 	.word	0x20003e60
 801bc00:	0801bb71 	.word	0x0801bb71

0801bc04 <__sfp_lock_acquire>:
 801bc04:	4801      	ldr	r0, [pc, #4]	; (801bc0c <__sfp_lock_acquire+0x8>)
 801bc06:	f000 ba64 	b.w	801c0d2 <__retarget_lock_acquire_recursive>
 801bc0a:	bf00      	nop
 801bc0c:	20003fa1 	.word	0x20003fa1

0801bc10 <__sfp_lock_release>:
 801bc10:	4801      	ldr	r0, [pc, #4]	; (801bc18 <__sfp_lock_release+0x8>)
 801bc12:	f000 ba5f 	b.w	801c0d4 <__retarget_lock_release_recursive>
 801bc16:	bf00      	nop
 801bc18:	20003fa1 	.word	0x20003fa1

0801bc1c <__sinit>:
 801bc1c:	b510      	push	{r4, lr}
 801bc1e:	4604      	mov	r4, r0
 801bc20:	f7ff fff0 	bl	801bc04 <__sfp_lock_acquire>
 801bc24:	6a23      	ldr	r3, [r4, #32]
 801bc26:	b11b      	cbz	r3, 801bc30 <__sinit+0x14>
 801bc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc2c:	f7ff bff0 	b.w	801bc10 <__sfp_lock_release>
 801bc30:	4b04      	ldr	r3, [pc, #16]	; (801bc44 <__sinit+0x28>)
 801bc32:	6223      	str	r3, [r4, #32]
 801bc34:	4b04      	ldr	r3, [pc, #16]	; (801bc48 <__sinit+0x2c>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d1f5      	bne.n	801bc28 <__sinit+0xc>
 801bc3c:	f7ff ffc4 	bl	801bbc8 <global_stdio_init.part.0>
 801bc40:	e7f2      	b.n	801bc28 <__sinit+0xc>
 801bc42:	bf00      	nop
 801bc44:	0801bb89 	.word	0x0801bb89
 801bc48:	20003f98 	.word	0x20003f98

0801bc4c <_fwalk_sglue>:
 801bc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc50:	4607      	mov	r7, r0
 801bc52:	4688      	mov	r8, r1
 801bc54:	4614      	mov	r4, r2
 801bc56:	2600      	movs	r6, #0
 801bc58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc5c:	f1b9 0901 	subs.w	r9, r9, #1
 801bc60:	d505      	bpl.n	801bc6e <_fwalk_sglue+0x22>
 801bc62:	6824      	ldr	r4, [r4, #0]
 801bc64:	2c00      	cmp	r4, #0
 801bc66:	d1f7      	bne.n	801bc58 <_fwalk_sglue+0xc>
 801bc68:	4630      	mov	r0, r6
 801bc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc6e:	89ab      	ldrh	r3, [r5, #12]
 801bc70:	2b01      	cmp	r3, #1
 801bc72:	d907      	bls.n	801bc84 <_fwalk_sglue+0x38>
 801bc74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc78:	3301      	adds	r3, #1
 801bc7a:	d003      	beq.n	801bc84 <_fwalk_sglue+0x38>
 801bc7c:	4629      	mov	r1, r5
 801bc7e:	4638      	mov	r0, r7
 801bc80:	47c0      	blx	r8
 801bc82:	4306      	orrs	r6, r0
 801bc84:	3568      	adds	r5, #104	; 0x68
 801bc86:	e7e9      	b.n	801bc5c <_fwalk_sglue+0x10>

0801bc88 <iprintf>:
 801bc88:	b40f      	push	{r0, r1, r2, r3}
 801bc8a:	b507      	push	{r0, r1, r2, lr}
 801bc8c:	4906      	ldr	r1, [pc, #24]	; (801bca8 <iprintf+0x20>)
 801bc8e:	ab04      	add	r3, sp, #16
 801bc90:	6808      	ldr	r0, [r1, #0]
 801bc92:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc96:	6881      	ldr	r1, [r0, #8]
 801bc98:	9301      	str	r3, [sp, #4]
 801bc9a:	f000 fbfd 	bl	801c498 <_vfiprintf_r>
 801bc9e:	b003      	add	sp, #12
 801bca0:	f85d eb04 	ldr.w	lr, [sp], #4
 801bca4:	b004      	add	sp, #16
 801bca6:	4770      	bx	lr
 801bca8:	2000009c 	.word	0x2000009c

0801bcac <_puts_r>:
 801bcac:	6a03      	ldr	r3, [r0, #32]
 801bcae:	b570      	push	{r4, r5, r6, lr}
 801bcb0:	6884      	ldr	r4, [r0, #8]
 801bcb2:	4605      	mov	r5, r0
 801bcb4:	460e      	mov	r6, r1
 801bcb6:	b90b      	cbnz	r3, 801bcbc <_puts_r+0x10>
 801bcb8:	f7ff ffb0 	bl	801bc1c <__sinit>
 801bcbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcbe:	07db      	lsls	r3, r3, #31
 801bcc0:	d405      	bmi.n	801bcce <_puts_r+0x22>
 801bcc2:	89a3      	ldrh	r3, [r4, #12]
 801bcc4:	0598      	lsls	r0, r3, #22
 801bcc6:	d402      	bmi.n	801bcce <_puts_r+0x22>
 801bcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcca:	f000 fa02 	bl	801c0d2 <__retarget_lock_acquire_recursive>
 801bcce:	89a3      	ldrh	r3, [r4, #12]
 801bcd0:	0719      	lsls	r1, r3, #28
 801bcd2:	d513      	bpl.n	801bcfc <_puts_r+0x50>
 801bcd4:	6923      	ldr	r3, [r4, #16]
 801bcd6:	b18b      	cbz	r3, 801bcfc <_puts_r+0x50>
 801bcd8:	3e01      	subs	r6, #1
 801bcda:	68a3      	ldr	r3, [r4, #8]
 801bcdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bce0:	3b01      	subs	r3, #1
 801bce2:	60a3      	str	r3, [r4, #8]
 801bce4:	b9e9      	cbnz	r1, 801bd22 <_puts_r+0x76>
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	da2e      	bge.n	801bd48 <_puts_r+0x9c>
 801bcea:	4622      	mov	r2, r4
 801bcec:	210a      	movs	r1, #10
 801bcee:	4628      	mov	r0, r5
 801bcf0:	f000 f89b 	bl	801be2a <__swbuf_r>
 801bcf4:	3001      	adds	r0, #1
 801bcf6:	d007      	beq.n	801bd08 <_puts_r+0x5c>
 801bcf8:	250a      	movs	r5, #10
 801bcfa:	e007      	b.n	801bd0c <_puts_r+0x60>
 801bcfc:	4621      	mov	r1, r4
 801bcfe:	4628      	mov	r0, r5
 801bd00:	f000 f8d0 	bl	801bea4 <__swsetup_r>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	d0e7      	beq.n	801bcd8 <_puts_r+0x2c>
 801bd08:	f04f 35ff 	mov.w	r5, #4294967295
 801bd0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd0e:	07da      	lsls	r2, r3, #31
 801bd10:	d405      	bmi.n	801bd1e <_puts_r+0x72>
 801bd12:	89a3      	ldrh	r3, [r4, #12]
 801bd14:	059b      	lsls	r3, r3, #22
 801bd16:	d402      	bmi.n	801bd1e <_puts_r+0x72>
 801bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd1a:	f000 f9db 	bl	801c0d4 <__retarget_lock_release_recursive>
 801bd1e:	4628      	mov	r0, r5
 801bd20:	bd70      	pop	{r4, r5, r6, pc}
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	da04      	bge.n	801bd30 <_puts_r+0x84>
 801bd26:	69a2      	ldr	r2, [r4, #24]
 801bd28:	429a      	cmp	r2, r3
 801bd2a:	dc06      	bgt.n	801bd3a <_puts_r+0x8e>
 801bd2c:	290a      	cmp	r1, #10
 801bd2e:	d004      	beq.n	801bd3a <_puts_r+0x8e>
 801bd30:	6823      	ldr	r3, [r4, #0]
 801bd32:	1c5a      	adds	r2, r3, #1
 801bd34:	6022      	str	r2, [r4, #0]
 801bd36:	7019      	strb	r1, [r3, #0]
 801bd38:	e7cf      	b.n	801bcda <_puts_r+0x2e>
 801bd3a:	4622      	mov	r2, r4
 801bd3c:	4628      	mov	r0, r5
 801bd3e:	f000 f874 	bl	801be2a <__swbuf_r>
 801bd42:	3001      	adds	r0, #1
 801bd44:	d1c9      	bne.n	801bcda <_puts_r+0x2e>
 801bd46:	e7df      	b.n	801bd08 <_puts_r+0x5c>
 801bd48:	6823      	ldr	r3, [r4, #0]
 801bd4a:	250a      	movs	r5, #10
 801bd4c:	1c5a      	adds	r2, r3, #1
 801bd4e:	6022      	str	r2, [r4, #0]
 801bd50:	701d      	strb	r5, [r3, #0]
 801bd52:	e7db      	b.n	801bd0c <_puts_r+0x60>

0801bd54 <puts>:
 801bd54:	4b02      	ldr	r3, [pc, #8]	; (801bd60 <puts+0xc>)
 801bd56:	4601      	mov	r1, r0
 801bd58:	6818      	ldr	r0, [r3, #0]
 801bd5a:	f7ff bfa7 	b.w	801bcac <_puts_r>
 801bd5e:	bf00      	nop
 801bd60:	2000009c 	.word	0x2000009c

0801bd64 <siprintf>:
 801bd64:	b40e      	push	{r1, r2, r3}
 801bd66:	b500      	push	{lr}
 801bd68:	b09c      	sub	sp, #112	; 0x70
 801bd6a:	ab1d      	add	r3, sp, #116	; 0x74
 801bd6c:	9002      	str	r0, [sp, #8]
 801bd6e:	9006      	str	r0, [sp, #24]
 801bd70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bd74:	4809      	ldr	r0, [pc, #36]	; (801bd9c <siprintf+0x38>)
 801bd76:	9107      	str	r1, [sp, #28]
 801bd78:	9104      	str	r1, [sp, #16]
 801bd7a:	4909      	ldr	r1, [pc, #36]	; (801bda0 <siprintf+0x3c>)
 801bd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd80:	9105      	str	r1, [sp, #20]
 801bd82:	6800      	ldr	r0, [r0, #0]
 801bd84:	9301      	str	r3, [sp, #4]
 801bd86:	a902      	add	r1, sp, #8
 801bd88:	f000 fa60 	bl	801c24c <_svfiprintf_r>
 801bd8c:	9b02      	ldr	r3, [sp, #8]
 801bd8e:	2200      	movs	r2, #0
 801bd90:	701a      	strb	r2, [r3, #0]
 801bd92:	b01c      	add	sp, #112	; 0x70
 801bd94:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd98:	b003      	add	sp, #12
 801bd9a:	4770      	bx	lr
 801bd9c:	2000009c 	.word	0x2000009c
 801bda0:	ffff0208 	.word	0xffff0208

0801bda4 <__sread>:
 801bda4:	b510      	push	{r4, lr}
 801bda6:	460c      	mov	r4, r1
 801bda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bdac:	f000 f938 	bl	801c020 <_read_r>
 801bdb0:	2800      	cmp	r0, #0
 801bdb2:	bfab      	itete	ge
 801bdb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bdb6:	89a3      	ldrhlt	r3, [r4, #12]
 801bdb8:	181b      	addge	r3, r3, r0
 801bdba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bdbe:	bfac      	ite	ge
 801bdc0:	6563      	strge	r3, [r4, #84]	; 0x54
 801bdc2:	81a3      	strhlt	r3, [r4, #12]
 801bdc4:	bd10      	pop	{r4, pc}

0801bdc6 <__swrite>:
 801bdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdca:	461f      	mov	r7, r3
 801bdcc:	898b      	ldrh	r3, [r1, #12]
 801bdce:	05db      	lsls	r3, r3, #23
 801bdd0:	4605      	mov	r5, r0
 801bdd2:	460c      	mov	r4, r1
 801bdd4:	4616      	mov	r6, r2
 801bdd6:	d505      	bpl.n	801bde4 <__swrite+0x1e>
 801bdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bddc:	2302      	movs	r3, #2
 801bdde:	2200      	movs	r2, #0
 801bde0:	f000 f90c 	bl	801bffc <_lseek_r>
 801bde4:	89a3      	ldrh	r3, [r4, #12]
 801bde6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bdea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bdee:	81a3      	strh	r3, [r4, #12]
 801bdf0:	4632      	mov	r2, r6
 801bdf2:	463b      	mov	r3, r7
 801bdf4:	4628      	mov	r0, r5
 801bdf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdfa:	f000 b933 	b.w	801c064 <_write_r>

0801bdfe <__sseek>:
 801bdfe:	b510      	push	{r4, lr}
 801be00:	460c      	mov	r4, r1
 801be02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be06:	f000 f8f9 	bl	801bffc <_lseek_r>
 801be0a:	1c43      	adds	r3, r0, #1
 801be0c:	89a3      	ldrh	r3, [r4, #12]
 801be0e:	bf15      	itete	ne
 801be10:	6560      	strne	r0, [r4, #84]	; 0x54
 801be12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801be16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801be1a:	81a3      	strheq	r3, [r4, #12]
 801be1c:	bf18      	it	ne
 801be1e:	81a3      	strhne	r3, [r4, #12]
 801be20:	bd10      	pop	{r4, pc}

0801be22 <__sclose>:
 801be22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be26:	f000 b8d9 	b.w	801bfdc <_close_r>

0801be2a <__swbuf_r>:
 801be2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be2c:	460e      	mov	r6, r1
 801be2e:	4614      	mov	r4, r2
 801be30:	4605      	mov	r5, r0
 801be32:	b118      	cbz	r0, 801be3c <__swbuf_r+0x12>
 801be34:	6a03      	ldr	r3, [r0, #32]
 801be36:	b90b      	cbnz	r3, 801be3c <__swbuf_r+0x12>
 801be38:	f7ff fef0 	bl	801bc1c <__sinit>
 801be3c:	69a3      	ldr	r3, [r4, #24]
 801be3e:	60a3      	str	r3, [r4, #8]
 801be40:	89a3      	ldrh	r3, [r4, #12]
 801be42:	071a      	lsls	r2, r3, #28
 801be44:	d525      	bpl.n	801be92 <__swbuf_r+0x68>
 801be46:	6923      	ldr	r3, [r4, #16]
 801be48:	b31b      	cbz	r3, 801be92 <__swbuf_r+0x68>
 801be4a:	6823      	ldr	r3, [r4, #0]
 801be4c:	6922      	ldr	r2, [r4, #16]
 801be4e:	1a98      	subs	r0, r3, r2
 801be50:	6963      	ldr	r3, [r4, #20]
 801be52:	b2f6      	uxtb	r6, r6
 801be54:	4283      	cmp	r3, r0
 801be56:	4637      	mov	r7, r6
 801be58:	dc04      	bgt.n	801be64 <__swbuf_r+0x3a>
 801be5a:	4621      	mov	r1, r4
 801be5c:	4628      	mov	r0, r5
 801be5e:	f000 fe47 	bl	801caf0 <_fflush_r>
 801be62:	b9e0      	cbnz	r0, 801be9e <__swbuf_r+0x74>
 801be64:	68a3      	ldr	r3, [r4, #8]
 801be66:	3b01      	subs	r3, #1
 801be68:	60a3      	str	r3, [r4, #8]
 801be6a:	6823      	ldr	r3, [r4, #0]
 801be6c:	1c5a      	adds	r2, r3, #1
 801be6e:	6022      	str	r2, [r4, #0]
 801be70:	701e      	strb	r6, [r3, #0]
 801be72:	6962      	ldr	r2, [r4, #20]
 801be74:	1c43      	adds	r3, r0, #1
 801be76:	429a      	cmp	r2, r3
 801be78:	d004      	beq.n	801be84 <__swbuf_r+0x5a>
 801be7a:	89a3      	ldrh	r3, [r4, #12]
 801be7c:	07db      	lsls	r3, r3, #31
 801be7e:	d506      	bpl.n	801be8e <__swbuf_r+0x64>
 801be80:	2e0a      	cmp	r6, #10
 801be82:	d104      	bne.n	801be8e <__swbuf_r+0x64>
 801be84:	4621      	mov	r1, r4
 801be86:	4628      	mov	r0, r5
 801be88:	f000 fe32 	bl	801caf0 <_fflush_r>
 801be8c:	b938      	cbnz	r0, 801be9e <__swbuf_r+0x74>
 801be8e:	4638      	mov	r0, r7
 801be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be92:	4621      	mov	r1, r4
 801be94:	4628      	mov	r0, r5
 801be96:	f000 f805 	bl	801bea4 <__swsetup_r>
 801be9a:	2800      	cmp	r0, #0
 801be9c:	d0d5      	beq.n	801be4a <__swbuf_r+0x20>
 801be9e:	f04f 37ff 	mov.w	r7, #4294967295
 801bea2:	e7f4      	b.n	801be8e <__swbuf_r+0x64>

0801bea4 <__swsetup_r>:
 801bea4:	b538      	push	{r3, r4, r5, lr}
 801bea6:	4b2a      	ldr	r3, [pc, #168]	; (801bf50 <__swsetup_r+0xac>)
 801bea8:	4605      	mov	r5, r0
 801beaa:	6818      	ldr	r0, [r3, #0]
 801beac:	460c      	mov	r4, r1
 801beae:	b118      	cbz	r0, 801beb8 <__swsetup_r+0x14>
 801beb0:	6a03      	ldr	r3, [r0, #32]
 801beb2:	b90b      	cbnz	r3, 801beb8 <__swsetup_r+0x14>
 801beb4:	f7ff feb2 	bl	801bc1c <__sinit>
 801beb8:	89a3      	ldrh	r3, [r4, #12]
 801beba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bebe:	0718      	lsls	r0, r3, #28
 801bec0:	d422      	bmi.n	801bf08 <__swsetup_r+0x64>
 801bec2:	06d9      	lsls	r1, r3, #27
 801bec4:	d407      	bmi.n	801bed6 <__swsetup_r+0x32>
 801bec6:	2309      	movs	r3, #9
 801bec8:	602b      	str	r3, [r5, #0]
 801beca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bece:	81a3      	strh	r3, [r4, #12]
 801bed0:	f04f 30ff 	mov.w	r0, #4294967295
 801bed4:	e034      	b.n	801bf40 <__swsetup_r+0x9c>
 801bed6:	0758      	lsls	r0, r3, #29
 801bed8:	d512      	bpl.n	801bf00 <__swsetup_r+0x5c>
 801beda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bedc:	b141      	cbz	r1, 801bef0 <__swsetup_r+0x4c>
 801bede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bee2:	4299      	cmp	r1, r3
 801bee4:	d002      	beq.n	801beec <__swsetup_r+0x48>
 801bee6:	4628      	mov	r0, r5
 801bee8:	f000 f90c 	bl	801c104 <_free_r>
 801beec:	2300      	movs	r3, #0
 801beee:	6363      	str	r3, [r4, #52]	; 0x34
 801bef0:	89a3      	ldrh	r3, [r4, #12]
 801bef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bef6:	81a3      	strh	r3, [r4, #12]
 801bef8:	2300      	movs	r3, #0
 801befa:	6063      	str	r3, [r4, #4]
 801befc:	6923      	ldr	r3, [r4, #16]
 801befe:	6023      	str	r3, [r4, #0]
 801bf00:	89a3      	ldrh	r3, [r4, #12]
 801bf02:	f043 0308 	orr.w	r3, r3, #8
 801bf06:	81a3      	strh	r3, [r4, #12]
 801bf08:	6923      	ldr	r3, [r4, #16]
 801bf0a:	b94b      	cbnz	r3, 801bf20 <__swsetup_r+0x7c>
 801bf0c:	89a3      	ldrh	r3, [r4, #12]
 801bf0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bf12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf16:	d003      	beq.n	801bf20 <__swsetup_r+0x7c>
 801bf18:	4621      	mov	r1, r4
 801bf1a:	4628      	mov	r0, r5
 801bf1c:	f000 fe36 	bl	801cb8c <__smakebuf_r>
 801bf20:	89a0      	ldrh	r0, [r4, #12]
 801bf22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf26:	f010 0301 	ands.w	r3, r0, #1
 801bf2a:	d00a      	beq.n	801bf42 <__swsetup_r+0x9e>
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	60a3      	str	r3, [r4, #8]
 801bf30:	6963      	ldr	r3, [r4, #20]
 801bf32:	425b      	negs	r3, r3
 801bf34:	61a3      	str	r3, [r4, #24]
 801bf36:	6923      	ldr	r3, [r4, #16]
 801bf38:	b943      	cbnz	r3, 801bf4c <__swsetup_r+0xa8>
 801bf3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bf3e:	d1c4      	bne.n	801beca <__swsetup_r+0x26>
 801bf40:	bd38      	pop	{r3, r4, r5, pc}
 801bf42:	0781      	lsls	r1, r0, #30
 801bf44:	bf58      	it	pl
 801bf46:	6963      	ldrpl	r3, [r4, #20]
 801bf48:	60a3      	str	r3, [r4, #8]
 801bf4a:	e7f4      	b.n	801bf36 <__swsetup_r+0x92>
 801bf4c:	2000      	movs	r0, #0
 801bf4e:	e7f7      	b.n	801bf40 <__swsetup_r+0x9c>
 801bf50:	2000009c 	.word	0x2000009c

0801bf54 <memcmp>:
 801bf54:	b510      	push	{r4, lr}
 801bf56:	3901      	subs	r1, #1
 801bf58:	4402      	add	r2, r0
 801bf5a:	4290      	cmp	r0, r2
 801bf5c:	d101      	bne.n	801bf62 <memcmp+0xe>
 801bf5e:	2000      	movs	r0, #0
 801bf60:	e005      	b.n	801bf6e <memcmp+0x1a>
 801bf62:	7803      	ldrb	r3, [r0, #0]
 801bf64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bf68:	42a3      	cmp	r3, r4
 801bf6a:	d001      	beq.n	801bf70 <memcmp+0x1c>
 801bf6c:	1b18      	subs	r0, r3, r4
 801bf6e:	bd10      	pop	{r4, pc}
 801bf70:	3001      	adds	r0, #1
 801bf72:	e7f2      	b.n	801bf5a <memcmp+0x6>

0801bf74 <memmove>:
 801bf74:	4288      	cmp	r0, r1
 801bf76:	b510      	push	{r4, lr}
 801bf78:	eb01 0402 	add.w	r4, r1, r2
 801bf7c:	d902      	bls.n	801bf84 <memmove+0x10>
 801bf7e:	4284      	cmp	r4, r0
 801bf80:	4623      	mov	r3, r4
 801bf82:	d807      	bhi.n	801bf94 <memmove+0x20>
 801bf84:	1e43      	subs	r3, r0, #1
 801bf86:	42a1      	cmp	r1, r4
 801bf88:	d008      	beq.n	801bf9c <memmove+0x28>
 801bf8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bf92:	e7f8      	b.n	801bf86 <memmove+0x12>
 801bf94:	4402      	add	r2, r0
 801bf96:	4601      	mov	r1, r0
 801bf98:	428a      	cmp	r2, r1
 801bf9a:	d100      	bne.n	801bf9e <memmove+0x2a>
 801bf9c:	bd10      	pop	{r4, pc}
 801bf9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bfa6:	e7f7      	b.n	801bf98 <memmove+0x24>

0801bfa8 <memset>:
 801bfa8:	4402      	add	r2, r0
 801bfaa:	4603      	mov	r3, r0
 801bfac:	4293      	cmp	r3, r2
 801bfae:	d100      	bne.n	801bfb2 <memset+0xa>
 801bfb0:	4770      	bx	lr
 801bfb2:	f803 1b01 	strb.w	r1, [r3], #1
 801bfb6:	e7f9      	b.n	801bfac <memset+0x4>

0801bfb8 <strncmp>:
 801bfb8:	b510      	push	{r4, lr}
 801bfba:	b16a      	cbz	r2, 801bfd8 <strncmp+0x20>
 801bfbc:	3901      	subs	r1, #1
 801bfbe:	1884      	adds	r4, r0, r2
 801bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	d103      	bne.n	801bfd4 <strncmp+0x1c>
 801bfcc:	42a0      	cmp	r0, r4
 801bfce:	d001      	beq.n	801bfd4 <strncmp+0x1c>
 801bfd0:	2a00      	cmp	r2, #0
 801bfd2:	d1f5      	bne.n	801bfc0 <strncmp+0x8>
 801bfd4:	1ad0      	subs	r0, r2, r3
 801bfd6:	bd10      	pop	{r4, pc}
 801bfd8:	4610      	mov	r0, r2
 801bfda:	e7fc      	b.n	801bfd6 <strncmp+0x1e>

0801bfdc <_close_r>:
 801bfdc:	b538      	push	{r3, r4, r5, lr}
 801bfde:	4d06      	ldr	r5, [pc, #24]	; (801bff8 <_close_r+0x1c>)
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	4608      	mov	r0, r1
 801bfe6:	602b      	str	r3, [r5, #0]
 801bfe8:	f000 fe66 	bl	801ccb8 <_close>
 801bfec:	1c43      	adds	r3, r0, #1
 801bfee:	d102      	bne.n	801bff6 <_close_r+0x1a>
 801bff0:	682b      	ldr	r3, [r5, #0]
 801bff2:	b103      	cbz	r3, 801bff6 <_close_r+0x1a>
 801bff4:	6023      	str	r3, [r4, #0]
 801bff6:	bd38      	pop	{r3, r4, r5, pc}
 801bff8:	20003f9c 	.word	0x20003f9c

0801bffc <_lseek_r>:
 801bffc:	b538      	push	{r3, r4, r5, lr}
 801bffe:	4d07      	ldr	r5, [pc, #28]	; (801c01c <_lseek_r+0x20>)
 801c000:	4604      	mov	r4, r0
 801c002:	4608      	mov	r0, r1
 801c004:	4611      	mov	r1, r2
 801c006:	2200      	movs	r2, #0
 801c008:	602a      	str	r2, [r5, #0]
 801c00a:	461a      	mov	r2, r3
 801c00c:	f000 fe6c 	bl	801cce8 <_lseek>
 801c010:	1c43      	adds	r3, r0, #1
 801c012:	d102      	bne.n	801c01a <_lseek_r+0x1e>
 801c014:	682b      	ldr	r3, [r5, #0]
 801c016:	b103      	cbz	r3, 801c01a <_lseek_r+0x1e>
 801c018:	6023      	str	r3, [r4, #0]
 801c01a:	bd38      	pop	{r3, r4, r5, pc}
 801c01c:	20003f9c 	.word	0x20003f9c

0801c020 <_read_r>:
 801c020:	b538      	push	{r3, r4, r5, lr}
 801c022:	4d07      	ldr	r5, [pc, #28]	; (801c040 <_read_r+0x20>)
 801c024:	4604      	mov	r4, r0
 801c026:	4608      	mov	r0, r1
 801c028:	4611      	mov	r1, r2
 801c02a:	2200      	movs	r2, #0
 801c02c:	602a      	str	r2, [r5, #0]
 801c02e:	461a      	mov	r2, r3
 801c030:	f000 fe62 	bl	801ccf8 <_read>
 801c034:	1c43      	adds	r3, r0, #1
 801c036:	d102      	bne.n	801c03e <_read_r+0x1e>
 801c038:	682b      	ldr	r3, [r5, #0]
 801c03a:	b103      	cbz	r3, 801c03e <_read_r+0x1e>
 801c03c:	6023      	str	r3, [r4, #0]
 801c03e:	bd38      	pop	{r3, r4, r5, pc}
 801c040:	20003f9c 	.word	0x20003f9c

0801c044 <_sbrk_r>:
 801c044:	b538      	push	{r3, r4, r5, lr}
 801c046:	4d06      	ldr	r5, [pc, #24]	; (801c060 <_sbrk_r+0x1c>)
 801c048:	2300      	movs	r3, #0
 801c04a:	4604      	mov	r4, r0
 801c04c:	4608      	mov	r0, r1
 801c04e:	602b      	str	r3, [r5, #0]
 801c050:	f000 fe5a 	bl	801cd08 <_sbrk>
 801c054:	1c43      	adds	r3, r0, #1
 801c056:	d102      	bne.n	801c05e <_sbrk_r+0x1a>
 801c058:	682b      	ldr	r3, [r5, #0]
 801c05a:	b103      	cbz	r3, 801c05e <_sbrk_r+0x1a>
 801c05c:	6023      	str	r3, [r4, #0]
 801c05e:	bd38      	pop	{r3, r4, r5, pc}
 801c060:	20003f9c 	.word	0x20003f9c

0801c064 <_write_r>:
 801c064:	b538      	push	{r3, r4, r5, lr}
 801c066:	4d07      	ldr	r5, [pc, #28]	; (801c084 <_write_r+0x20>)
 801c068:	4604      	mov	r4, r0
 801c06a:	4608      	mov	r0, r1
 801c06c:	4611      	mov	r1, r2
 801c06e:	2200      	movs	r2, #0
 801c070:	602a      	str	r2, [r5, #0]
 801c072:	461a      	mov	r2, r3
 801c074:	f7e5 fc40 	bl	80018f8 <_write>
 801c078:	1c43      	adds	r3, r0, #1
 801c07a:	d102      	bne.n	801c082 <_write_r+0x1e>
 801c07c:	682b      	ldr	r3, [r5, #0]
 801c07e:	b103      	cbz	r3, 801c082 <_write_r+0x1e>
 801c080:	6023      	str	r3, [r4, #0]
 801c082:	bd38      	pop	{r3, r4, r5, pc}
 801c084:	20003f9c 	.word	0x20003f9c

0801c088 <__libc_init_array>:
 801c088:	b570      	push	{r4, r5, r6, lr}
 801c08a:	4d0d      	ldr	r5, [pc, #52]	; (801c0c0 <__libc_init_array+0x38>)
 801c08c:	4c0d      	ldr	r4, [pc, #52]	; (801c0c4 <__libc_init_array+0x3c>)
 801c08e:	1b64      	subs	r4, r4, r5
 801c090:	10a4      	asrs	r4, r4, #2
 801c092:	2600      	movs	r6, #0
 801c094:	42a6      	cmp	r6, r4
 801c096:	d109      	bne.n	801c0ac <__libc_init_array+0x24>
 801c098:	4d0b      	ldr	r5, [pc, #44]	; (801c0c8 <__libc_init_array+0x40>)
 801c09a:	4c0c      	ldr	r4, [pc, #48]	; (801c0cc <__libc_init_array+0x44>)
 801c09c:	f000 fe42 	bl	801cd24 <_init>
 801c0a0:	1b64      	subs	r4, r4, r5
 801c0a2:	10a4      	asrs	r4, r4, #2
 801c0a4:	2600      	movs	r6, #0
 801c0a6:	42a6      	cmp	r6, r4
 801c0a8:	d105      	bne.n	801c0b6 <__libc_init_array+0x2e>
 801c0aa:	bd70      	pop	{r4, r5, r6, pc}
 801c0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 801c0b0:	4798      	blx	r3
 801c0b2:	3601      	adds	r6, #1
 801c0b4:	e7ee      	b.n	801c094 <__libc_init_array+0xc>
 801c0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c0ba:	4798      	blx	r3
 801c0bc:	3601      	adds	r6, #1
 801c0be:	e7f2      	b.n	801c0a6 <__libc_init_array+0x1e>
 801c0c0:	080220b8 	.word	0x080220b8
 801c0c4:	080220b8 	.word	0x080220b8
 801c0c8:	080220b8 	.word	0x080220b8
 801c0cc:	080220bc 	.word	0x080220bc

0801c0d0 <__retarget_lock_init_recursive>:
 801c0d0:	4770      	bx	lr

0801c0d2 <__retarget_lock_acquire_recursive>:
 801c0d2:	4770      	bx	lr

0801c0d4 <__retarget_lock_release_recursive>:
 801c0d4:	4770      	bx	lr

0801c0d6 <strcpy>:
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c0dc:	f803 2b01 	strb.w	r2, [r3], #1
 801c0e0:	2a00      	cmp	r2, #0
 801c0e2:	d1f9      	bne.n	801c0d8 <strcpy+0x2>
 801c0e4:	4770      	bx	lr

0801c0e6 <memcpy>:
 801c0e6:	440a      	add	r2, r1
 801c0e8:	4291      	cmp	r1, r2
 801c0ea:	f100 33ff 	add.w	r3, r0, #4294967295
 801c0ee:	d100      	bne.n	801c0f2 <memcpy+0xc>
 801c0f0:	4770      	bx	lr
 801c0f2:	b510      	push	{r4, lr}
 801c0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c0fc:	4291      	cmp	r1, r2
 801c0fe:	d1f9      	bne.n	801c0f4 <memcpy+0xe>
 801c100:	bd10      	pop	{r4, pc}
	...

0801c104 <_free_r>:
 801c104:	b538      	push	{r3, r4, r5, lr}
 801c106:	4605      	mov	r5, r0
 801c108:	2900      	cmp	r1, #0
 801c10a:	d041      	beq.n	801c190 <_free_r+0x8c>
 801c10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c110:	1f0c      	subs	r4, r1, #4
 801c112:	2b00      	cmp	r3, #0
 801c114:	bfb8      	it	lt
 801c116:	18e4      	addlt	r4, r4, r3
 801c118:	f7ff fce8 	bl	801baec <__malloc_lock>
 801c11c:	4a1d      	ldr	r2, [pc, #116]	; (801c194 <_free_r+0x90>)
 801c11e:	6813      	ldr	r3, [r2, #0]
 801c120:	b933      	cbnz	r3, 801c130 <_free_r+0x2c>
 801c122:	6063      	str	r3, [r4, #4]
 801c124:	6014      	str	r4, [r2, #0]
 801c126:	4628      	mov	r0, r5
 801c128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c12c:	f7ff bce4 	b.w	801baf8 <__malloc_unlock>
 801c130:	42a3      	cmp	r3, r4
 801c132:	d908      	bls.n	801c146 <_free_r+0x42>
 801c134:	6820      	ldr	r0, [r4, #0]
 801c136:	1821      	adds	r1, r4, r0
 801c138:	428b      	cmp	r3, r1
 801c13a:	bf01      	itttt	eq
 801c13c:	6819      	ldreq	r1, [r3, #0]
 801c13e:	685b      	ldreq	r3, [r3, #4]
 801c140:	1809      	addeq	r1, r1, r0
 801c142:	6021      	streq	r1, [r4, #0]
 801c144:	e7ed      	b.n	801c122 <_free_r+0x1e>
 801c146:	461a      	mov	r2, r3
 801c148:	685b      	ldr	r3, [r3, #4]
 801c14a:	b10b      	cbz	r3, 801c150 <_free_r+0x4c>
 801c14c:	42a3      	cmp	r3, r4
 801c14e:	d9fa      	bls.n	801c146 <_free_r+0x42>
 801c150:	6811      	ldr	r1, [r2, #0]
 801c152:	1850      	adds	r0, r2, r1
 801c154:	42a0      	cmp	r0, r4
 801c156:	d10b      	bne.n	801c170 <_free_r+0x6c>
 801c158:	6820      	ldr	r0, [r4, #0]
 801c15a:	4401      	add	r1, r0
 801c15c:	1850      	adds	r0, r2, r1
 801c15e:	4283      	cmp	r3, r0
 801c160:	6011      	str	r1, [r2, #0]
 801c162:	d1e0      	bne.n	801c126 <_free_r+0x22>
 801c164:	6818      	ldr	r0, [r3, #0]
 801c166:	685b      	ldr	r3, [r3, #4]
 801c168:	6053      	str	r3, [r2, #4]
 801c16a:	4408      	add	r0, r1
 801c16c:	6010      	str	r0, [r2, #0]
 801c16e:	e7da      	b.n	801c126 <_free_r+0x22>
 801c170:	d902      	bls.n	801c178 <_free_r+0x74>
 801c172:	230c      	movs	r3, #12
 801c174:	602b      	str	r3, [r5, #0]
 801c176:	e7d6      	b.n	801c126 <_free_r+0x22>
 801c178:	6820      	ldr	r0, [r4, #0]
 801c17a:	1821      	adds	r1, r4, r0
 801c17c:	428b      	cmp	r3, r1
 801c17e:	bf04      	itt	eq
 801c180:	6819      	ldreq	r1, [r3, #0]
 801c182:	685b      	ldreq	r3, [r3, #4]
 801c184:	6063      	str	r3, [r4, #4]
 801c186:	bf04      	itt	eq
 801c188:	1809      	addeq	r1, r1, r0
 801c18a:	6021      	streq	r1, [r4, #0]
 801c18c:	6054      	str	r4, [r2, #4]
 801c18e:	e7ca      	b.n	801c126 <_free_r+0x22>
 801c190:	bd38      	pop	{r3, r4, r5, pc}
 801c192:	bf00      	nop
 801c194:	20003e58 	.word	0x20003e58

0801c198 <__ssputs_r>:
 801c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c19c:	688e      	ldr	r6, [r1, #8]
 801c19e:	461f      	mov	r7, r3
 801c1a0:	42be      	cmp	r6, r7
 801c1a2:	680b      	ldr	r3, [r1, #0]
 801c1a4:	4682      	mov	sl, r0
 801c1a6:	460c      	mov	r4, r1
 801c1a8:	4690      	mov	r8, r2
 801c1aa:	d82c      	bhi.n	801c206 <__ssputs_r+0x6e>
 801c1ac:	898a      	ldrh	r2, [r1, #12]
 801c1ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c1b2:	d026      	beq.n	801c202 <__ssputs_r+0x6a>
 801c1b4:	6965      	ldr	r5, [r4, #20]
 801c1b6:	6909      	ldr	r1, [r1, #16]
 801c1b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1bc:	eba3 0901 	sub.w	r9, r3, r1
 801c1c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c1c4:	1c7b      	adds	r3, r7, #1
 801c1c6:	444b      	add	r3, r9
 801c1c8:	106d      	asrs	r5, r5, #1
 801c1ca:	429d      	cmp	r5, r3
 801c1cc:	bf38      	it	cc
 801c1ce:	461d      	movcc	r5, r3
 801c1d0:	0553      	lsls	r3, r2, #21
 801c1d2:	d527      	bpl.n	801c224 <__ssputs_r+0x8c>
 801c1d4:	4629      	mov	r1, r5
 801c1d6:	f7ff fc09 	bl	801b9ec <_malloc_r>
 801c1da:	4606      	mov	r6, r0
 801c1dc:	b360      	cbz	r0, 801c238 <__ssputs_r+0xa0>
 801c1de:	6921      	ldr	r1, [r4, #16]
 801c1e0:	464a      	mov	r2, r9
 801c1e2:	f7ff ff80 	bl	801c0e6 <memcpy>
 801c1e6:	89a3      	ldrh	r3, [r4, #12]
 801c1e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1f0:	81a3      	strh	r3, [r4, #12]
 801c1f2:	6126      	str	r6, [r4, #16]
 801c1f4:	6165      	str	r5, [r4, #20]
 801c1f6:	444e      	add	r6, r9
 801c1f8:	eba5 0509 	sub.w	r5, r5, r9
 801c1fc:	6026      	str	r6, [r4, #0]
 801c1fe:	60a5      	str	r5, [r4, #8]
 801c200:	463e      	mov	r6, r7
 801c202:	42be      	cmp	r6, r7
 801c204:	d900      	bls.n	801c208 <__ssputs_r+0x70>
 801c206:	463e      	mov	r6, r7
 801c208:	6820      	ldr	r0, [r4, #0]
 801c20a:	4632      	mov	r2, r6
 801c20c:	4641      	mov	r1, r8
 801c20e:	f7ff feb1 	bl	801bf74 <memmove>
 801c212:	68a3      	ldr	r3, [r4, #8]
 801c214:	1b9b      	subs	r3, r3, r6
 801c216:	60a3      	str	r3, [r4, #8]
 801c218:	6823      	ldr	r3, [r4, #0]
 801c21a:	4433      	add	r3, r6
 801c21c:	6023      	str	r3, [r4, #0]
 801c21e:	2000      	movs	r0, #0
 801c220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c224:	462a      	mov	r2, r5
 801c226:	f000 fd0f 	bl	801cc48 <_realloc_r>
 801c22a:	4606      	mov	r6, r0
 801c22c:	2800      	cmp	r0, #0
 801c22e:	d1e0      	bne.n	801c1f2 <__ssputs_r+0x5a>
 801c230:	6921      	ldr	r1, [r4, #16]
 801c232:	4650      	mov	r0, sl
 801c234:	f7ff ff66 	bl	801c104 <_free_r>
 801c238:	230c      	movs	r3, #12
 801c23a:	f8ca 3000 	str.w	r3, [sl]
 801c23e:	89a3      	ldrh	r3, [r4, #12]
 801c240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c244:	81a3      	strh	r3, [r4, #12]
 801c246:	f04f 30ff 	mov.w	r0, #4294967295
 801c24a:	e7e9      	b.n	801c220 <__ssputs_r+0x88>

0801c24c <_svfiprintf_r>:
 801c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c250:	4698      	mov	r8, r3
 801c252:	898b      	ldrh	r3, [r1, #12]
 801c254:	061b      	lsls	r3, r3, #24
 801c256:	b09d      	sub	sp, #116	; 0x74
 801c258:	4607      	mov	r7, r0
 801c25a:	460d      	mov	r5, r1
 801c25c:	4614      	mov	r4, r2
 801c25e:	d50e      	bpl.n	801c27e <_svfiprintf_r+0x32>
 801c260:	690b      	ldr	r3, [r1, #16]
 801c262:	b963      	cbnz	r3, 801c27e <_svfiprintf_r+0x32>
 801c264:	2140      	movs	r1, #64	; 0x40
 801c266:	f7ff fbc1 	bl	801b9ec <_malloc_r>
 801c26a:	6028      	str	r0, [r5, #0]
 801c26c:	6128      	str	r0, [r5, #16]
 801c26e:	b920      	cbnz	r0, 801c27a <_svfiprintf_r+0x2e>
 801c270:	230c      	movs	r3, #12
 801c272:	603b      	str	r3, [r7, #0]
 801c274:	f04f 30ff 	mov.w	r0, #4294967295
 801c278:	e0d0      	b.n	801c41c <_svfiprintf_r+0x1d0>
 801c27a:	2340      	movs	r3, #64	; 0x40
 801c27c:	616b      	str	r3, [r5, #20]
 801c27e:	2300      	movs	r3, #0
 801c280:	9309      	str	r3, [sp, #36]	; 0x24
 801c282:	2320      	movs	r3, #32
 801c284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c288:	f8cd 800c 	str.w	r8, [sp, #12]
 801c28c:	2330      	movs	r3, #48	; 0x30
 801c28e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801c434 <_svfiprintf_r+0x1e8>
 801c292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c296:	f04f 0901 	mov.w	r9, #1
 801c29a:	4623      	mov	r3, r4
 801c29c:	469a      	mov	sl, r3
 801c29e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2a2:	b10a      	cbz	r2, 801c2a8 <_svfiprintf_r+0x5c>
 801c2a4:	2a25      	cmp	r2, #37	; 0x25
 801c2a6:	d1f9      	bne.n	801c29c <_svfiprintf_r+0x50>
 801c2a8:	ebba 0b04 	subs.w	fp, sl, r4
 801c2ac:	d00b      	beq.n	801c2c6 <_svfiprintf_r+0x7a>
 801c2ae:	465b      	mov	r3, fp
 801c2b0:	4622      	mov	r2, r4
 801c2b2:	4629      	mov	r1, r5
 801c2b4:	4638      	mov	r0, r7
 801c2b6:	f7ff ff6f 	bl	801c198 <__ssputs_r>
 801c2ba:	3001      	adds	r0, #1
 801c2bc:	f000 80a9 	beq.w	801c412 <_svfiprintf_r+0x1c6>
 801c2c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2c2:	445a      	add	r2, fp
 801c2c4:	9209      	str	r2, [sp, #36]	; 0x24
 801c2c6:	f89a 3000 	ldrb.w	r3, [sl]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	f000 80a1 	beq.w	801c412 <_svfiprintf_r+0x1c6>
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2da:	f10a 0a01 	add.w	sl, sl, #1
 801c2de:	9304      	str	r3, [sp, #16]
 801c2e0:	9307      	str	r3, [sp, #28]
 801c2e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c2e6:	931a      	str	r3, [sp, #104]	; 0x68
 801c2e8:	4654      	mov	r4, sl
 801c2ea:	2205      	movs	r2, #5
 801c2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2f0:	4850      	ldr	r0, [pc, #320]	; (801c434 <_svfiprintf_r+0x1e8>)
 801c2f2:	f7e3 ff45 	bl	8000180 <memchr>
 801c2f6:	9a04      	ldr	r2, [sp, #16]
 801c2f8:	b9d8      	cbnz	r0, 801c332 <_svfiprintf_r+0xe6>
 801c2fa:	06d0      	lsls	r0, r2, #27
 801c2fc:	bf44      	itt	mi
 801c2fe:	2320      	movmi	r3, #32
 801c300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c304:	0711      	lsls	r1, r2, #28
 801c306:	bf44      	itt	mi
 801c308:	232b      	movmi	r3, #43	; 0x2b
 801c30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c30e:	f89a 3000 	ldrb.w	r3, [sl]
 801c312:	2b2a      	cmp	r3, #42	; 0x2a
 801c314:	d015      	beq.n	801c342 <_svfiprintf_r+0xf6>
 801c316:	9a07      	ldr	r2, [sp, #28]
 801c318:	4654      	mov	r4, sl
 801c31a:	2000      	movs	r0, #0
 801c31c:	f04f 0c0a 	mov.w	ip, #10
 801c320:	4621      	mov	r1, r4
 801c322:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c326:	3b30      	subs	r3, #48	; 0x30
 801c328:	2b09      	cmp	r3, #9
 801c32a:	d94d      	bls.n	801c3c8 <_svfiprintf_r+0x17c>
 801c32c:	b1b0      	cbz	r0, 801c35c <_svfiprintf_r+0x110>
 801c32e:	9207      	str	r2, [sp, #28]
 801c330:	e014      	b.n	801c35c <_svfiprintf_r+0x110>
 801c332:	eba0 0308 	sub.w	r3, r0, r8
 801c336:	fa09 f303 	lsl.w	r3, r9, r3
 801c33a:	4313      	orrs	r3, r2
 801c33c:	9304      	str	r3, [sp, #16]
 801c33e:	46a2      	mov	sl, r4
 801c340:	e7d2      	b.n	801c2e8 <_svfiprintf_r+0x9c>
 801c342:	9b03      	ldr	r3, [sp, #12]
 801c344:	1d19      	adds	r1, r3, #4
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	9103      	str	r1, [sp, #12]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	bfbb      	ittet	lt
 801c34e:	425b      	neglt	r3, r3
 801c350:	f042 0202 	orrlt.w	r2, r2, #2
 801c354:	9307      	strge	r3, [sp, #28]
 801c356:	9307      	strlt	r3, [sp, #28]
 801c358:	bfb8      	it	lt
 801c35a:	9204      	strlt	r2, [sp, #16]
 801c35c:	7823      	ldrb	r3, [r4, #0]
 801c35e:	2b2e      	cmp	r3, #46	; 0x2e
 801c360:	d10c      	bne.n	801c37c <_svfiprintf_r+0x130>
 801c362:	7863      	ldrb	r3, [r4, #1]
 801c364:	2b2a      	cmp	r3, #42	; 0x2a
 801c366:	d134      	bne.n	801c3d2 <_svfiprintf_r+0x186>
 801c368:	9b03      	ldr	r3, [sp, #12]
 801c36a:	1d1a      	adds	r2, r3, #4
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	9203      	str	r2, [sp, #12]
 801c370:	2b00      	cmp	r3, #0
 801c372:	bfb8      	it	lt
 801c374:	f04f 33ff 	movlt.w	r3, #4294967295
 801c378:	3402      	adds	r4, #2
 801c37a:	9305      	str	r3, [sp, #20]
 801c37c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801c438 <_svfiprintf_r+0x1ec>
 801c380:	7821      	ldrb	r1, [r4, #0]
 801c382:	2203      	movs	r2, #3
 801c384:	4650      	mov	r0, sl
 801c386:	f7e3 fefb 	bl	8000180 <memchr>
 801c38a:	b138      	cbz	r0, 801c39c <_svfiprintf_r+0x150>
 801c38c:	9b04      	ldr	r3, [sp, #16]
 801c38e:	eba0 000a 	sub.w	r0, r0, sl
 801c392:	2240      	movs	r2, #64	; 0x40
 801c394:	4082      	lsls	r2, r0
 801c396:	4313      	orrs	r3, r2
 801c398:	3401      	adds	r4, #1
 801c39a:	9304      	str	r3, [sp, #16]
 801c39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3a0:	4826      	ldr	r0, [pc, #152]	; (801c43c <_svfiprintf_r+0x1f0>)
 801c3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c3a6:	2206      	movs	r2, #6
 801c3a8:	f7e3 feea 	bl	8000180 <memchr>
 801c3ac:	2800      	cmp	r0, #0
 801c3ae:	d038      	beq.n	801c422 <_svfiprintf_r+0x1d6>
 801c3b0:	4b23      	ldr	r3, [pc, #140]	; (801c440 <_svfiprintf_r+0x1f4>)
 801c3b2:	bb1b      	cbnz	r3, 801c3fc <_svfiprintf_r+0x1b0>
 801c3b4:	9b03      	ldr	r3, [sp, #12]
 801c3b6:	3307      	adds	r3, #7
 801c3b8:	f023 0307 	bic.w	r3, r3, #7
 801c3bc:	3308      	adds	r3, #8
 801c3be:	9303      	str	r3, [sp, #12]
 801c3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3c2:	4433      	add	r3, r6
 801c3c4:	9309      	str	r3, [sp, #36]	; 0x24
 801c3c6:	e768      	b.n	801c29a <_svfiprintf_r+0x4e>
 801c3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3cc:	460c      	mov	r4, r1
 801c3ce:	2001      	movs	r0, #1
 801c3d0:	e7a6      	b.n	801c320 <_svfiprintf_r+0xd4>
 801c3d2:	2300      	movs	r3, #0
 801c3d4:	3401      	adds	r4, #1
 801c3d6:	9305      	str	r3, [sp, #20]
 801c3d8:	4619      	mov	r1, r3
 801c3da:	f04f 0c0a 	mov.w	ip, #10
 801c3de:	4620      	mov	r0, r4
 801c3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3e4:	3a30      	subs	r2, #48	; 0x30
 801c3e6:	2a09      	cmp	r2, #9
 801c3e8:	d903      	bls.n	801c3f2 <_svfiprintf_r+0x1a6>
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d0c6      	beq.n	801c37c <_svfiprintf_r+0x130>
 801c3ee:	9105      	str	r1, [sp, #20]
 801c3f0:	e7c4      	b.n	801c37c <_svfiprintf_r+0x130>
 801c3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3f6:	4604      	mov	r4, r0
 801c3f8:	2301      	movs	r3, #1
 801c3fa:	e7f0      	b.n	801c3de <_svfiprintf_r+0x192>
 801c3fc:	ab03      	add	r3, sp, #12
 801c3fe:	9300      	str	r3, [sp, #0]
 801c400:	462a      	mov	r2, r5
 801c402:	4b10      	ldr	r3, [pc, #64]	; (801c444 <_svfiprintf_r+0x1f8>)
 801c404:	a904      	add	r1, sp, #16
 801c406:	4638      	mov	r0, r7
 801c408:	f3af 8000 	nop.w
 801c40c:	1c42      	adds	r2, r0, #1
 801c40e:	4606      	mov	r6, r0
 801c410:	d1d6      	bne.n	801c3c0 <_svfiprintf_r+0x174>
 801c412:	89ab      	ldrh	r3, [r5, #12]
 801c414:	065b      	lsls	r3, r3, #25
 801c416:	f53f af2d 	bmi.w	801c274 <_svfiprintf_r+0x28>
 801c41a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c41c:	b01d      	add	sp, #116	; 0x74
 801c41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c422:	ab03      	add	r3, sp, #12
 801c424:	9300      	str	r3, [sp, #0]
 801c426:	462a      	mov	r2, r5
 801c428:	4b06      	ldr	r3, [pc, #24]	; (801c444 <_svfiprintf_r+0x1f8>)
 801c42a:	a904      	add	r1, sp, #16
 801c42c:	4638      	mov	r0, r7
 801c42e:	f000 f9bb 	bl	801c7a8 <_printf_i>
 801c432:	e7eb      	b.n	801c40c <_svfiprintf_r+0x1c0>
 801c434:	0802207c 	.word	0x0802207c
 801c438:	08022082 	.word	0x08022082
 801c43c:	08022086 	.word	0x08022086
 801c440:	00000000 	.word	0x00000000
 801c444:	0801c199 	.word	0x0801c199

0801c448 <__sfputc_r>:
 801c448:	6893      	ldr	r3, [r2, #8]
 801c44a:	3b01      	subs	r3, #1
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	b410      	push	{r4}
 801c450:	6093      	str	r3, [r2, #8]
 801c452:	da07      	bge.n	801c464 <__sfputc_r+0x1c>
 801c454:	6994      	ldr	r4, [r2, #24]
 801c456:	42a3      	cmp	r3, r4
 801c458:	db01      	blt.n	801c45e <__sfputc_r+0x16>
 801c45a:	290a      	cmp	r1, #10
 801c45c:	d102      	bne.n	801c464 <__sfputc_r+0x1c>
 801c45e:	bc10      	pop	{r4}
 801c460:	f7ff bce3 	b.w	801be2a <__swbuf_r>
 801c464:	6813      	ldr	r3, [r2, #0]
 801c466:	1c58      	adds	r0, r3, #1
 801c468:	6010      	str	r0, [r2, #0]
 801c46a:	7019      	strb	r1, [r3, #0]
 801c46c:	4608      	mov	r0, r1
 801c46e:	bc10      	pop	{r4}
 801c470:	4770      	bx	lr

0801c472 <__sfputs_r>:
 801c472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c474:	4606      	mov	r6, r0
 801c476:	460f      	mov	r7, r1
 801c478:	4614      	mov	r4, r2
 801c47a:	18d5      	adds	r5, r2, r3
 801c47c:	42ac      	cmp	r4, r5
 801c47e:	d101      	bne.n	801c484 <__sfputs_r+0x12>
 801c480:	2000      	movs	r0, #0
 801c482:	e007      	b.n	801c494 <__sfputs_r+0x22>
 801c484:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c488:	463a      	mov	r2, r7
 801c48a:	4630      	mov	r0, r6
 801c48c:	f7ff ffdc 	bl	801c448 <__sfputc_r>
 801c490:	1c43      	adds	r3, r0, #1
 801c492:	d1f3      	bne.n	801c47c <__sfputs_r+0xa>
 801c494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c498 <_vfiprintf_r>:
 801c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c49c:	460d      	mov	r5, r1
 801c49e:	b09d      	sub	sp, #116	; 0x74
 801c4a0:	4614      	mov	r4, r2
 801c4a2:	4698      	mov	r8, r3
 801c4a4:	4606      	mov	r6, r0
 801c4a6:	b118      	cbz	r0, 801c4b0 <_vfiprintf_r+0x18>
 801c4a8:	6a03      	ldr	r3, [r0, #32]
 801c4aa:	b90b      	cbnz	r3, 801c4b0 <_vfiprintf_r+0x18>
 801c4ac:	f7ff fbb6 	bl	801bc1c <__sinit>
 801c4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4b2:	07d9      	lsls	r1, r3, #31
 801c4b4:	d405      	bmi.n	801c4c2 <_vfiprintf_r+0x2a>
 801c4b6:	89ab      	ldrh	r3, [r5, #12]
 801c4b8:	059a      	lsls	r2, r3, #22
 801c4ba:	d402      	bmi.n	801c4c2 <_vfiprintf_r+0x2a>
 801c4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4be:	f7ff fe08 	bl	801c0d2 <__retarget_lock_acquire_recursive>
 801c4c2:	89ab      	ldrh	r3, [r5, #12]
 801c4c4:	071b      	lsls	r3, r3, #28
 801c4c6:	d501      	bpl.n	801c4cc <_vfiprintf_r+0x34>
 801c4c8:	692b      	ldr	r3, [r5, #16]
 801c4ca:	b99b      	cbnz	r3, 801c4f4 <_vfiprintf_r+0x5c>
 801c4cc:	4629      	mov	r1, r5
 801c4ce:	4630      	mov	r0, r6
 801c4d0:	f7ff fce8 	bl	801bea4 <__swsetup_r>
 801c4d4:	b170      	cbz	r0, 801c4f4 <_vfiprintf_r+0x5c>
 801c4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4d8:	07dc      	lsls	r4, r3, #31
 801c4da:	d504      	bpl.n	801c4e6 <_vfiprintf_r+0x4e>
 801c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c4e0:	b01d      	add	sp, #116	; 0x74
 801c4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4e6:	89ab      	ldrh	r3, [r5, #12]
 801c4e8:	0598      	lsls	r0, r3, #22
 801c4ea:	d4f7      	bmi.n	801c4dc <_vfiprintf_r+0x44>
 801c4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4ee:	f7ff fdf1 	bl	801c0d4 <__retarget_lock_release_recursive>
 801c4f2:	e7f3      	b.n	801c4dc <_vfiprintf_r+0x44>
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	9309      	str	r3, [sp, #36]	; 0x24
 801c4f8:	2320      	movs	r3, #32
 801c4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c4fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801c502:	2330      	movs	r3, #48	; 0x30
 801c504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c6b8 <_vfiprintf_r+0x220>
 801c508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c50c:	f04f 0901 	mov.w	r9, #1
 801c510:	4623      	mov	r3, r4
 801c512:	469a      	mov	sl, r3
 801c514:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c518:	b10a      	cbz	r2, 801c51e <_vfiprintf_r+0x86>
 801c51a:	2a25      	cmp	r2, #37	; 0x25
 801c51c:	d1f9      	bne.n	801c512 <_vfiprintf_r+0x7a>
 801c51e:	ebba 0b04 	subs.w	fp, sl, r4
 801c522:	d00b      	beq.n	801c53c <_vfiprintf_r+0xa4>
 801c524:	465b      	mov	r3, fp
 801c526:	4622      	mov	r2, r4
 801c528:	4629      	mov	r1, r5
 801c52a:	4630      	mov	r0, r6
 801c52c:	f7ff ffa1 	bl	801c472 <__sfputs_r>
 801c530:	3001      	adds	r0, #1
 801c532:	f000 80a9 	beq.w	801c688 <_vfiprintf_r+0x1f0>
 801c536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c538:	445a      	add	r2, fp
 801c53a:	9209      	str	r2, [sp, #36]	; 0x24
 801c53c:	f89a 3000 	ldrb.w	r3, [sl]
 801c540:	2b00      	cmp	r3, #0
 801c542:	f000 80a1 	beq.w	801c688 <_vfiprintf_r+0x1f0>
 801c546:	2300      	movs	r3, #0
 801c548:	f04f 32ff 	mov.w	r2, #4294967295
 801c54c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c550:	f10a 0a01 	add.w	sl, sl, #1
 801c554:	9304      	str	r3, [sp, #16]
 801c556:	9307      	str	r3, [sp, #28]
 801c558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c55c:	931a      	str	r3, [sp, #104]	; 0x68
 801c55e:	4654      	mov	r4, sl
 801c560:	2205      	movs	r2, #5
 801c562:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c566:	4854      	ldr	r0, [pc, #336]	; (801c6b8 <_vfiprintf_r+0x220>)
 801c568:	f7e3 fe0a 	bl	8000180 <memchr>
 801c56c:	9a04      	ldr	r2, [sp, #16]
 801c56e:	b9d8      	cbnz	r0, 801c5a8 <_vfiprintf_r+0x110>
 801c570:	06d1      	lsls	r1, r2, #27
 801c572:	bf44      	itt	mi
 801c574:	2320      	movmi	r3, #32
 801c576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c57a:	0713      	lsls	r3, r2, #28
 801c57c:	bf44      	itt	mi
 801c57e:	232b      	movmi	r3, #43	; 0x2b
 801c580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c584:	f89a 3000 	ldrb.w	r3, [sl]
 801c588:	2b2a      	cmp	r3, #42	; 0x2a
 801c58a:	d015      	beq.n	801c5b8 <_vfiprintf_r+0x120>
 801c58c:	9a07      	ldr	r2, [sp, #28]
 801c58e:	4654      	mov	r4, sl
 801c590:	2000      	movs	r0, #0
 801c592:	f04f 0c0a 	mov.w	ip, #10
 801c596:	4621      	mov	r1, r4
 801c598:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c59c:	3b30      	subs	r3, #48	; 0x30
 801c59e:	2b09      	cmp	r3, #9
 801c5a0:	d94d      	bls.n	801c63e <_vfiprintf_r+0x1a6>
 801c5a2:	b1b0      	cbz	r0, 801c5d2 <_vfiprintf_r+0x13a>
 801c5a4:	9207      	str	r2, [sp, #28]
 801c5a6:	e014      	b.n	801c5d2 <_vfiprintf_r+0x13a>
 801c5a8:	eba0 0308 	sub.w	r3, r0, r8
 801c5ac:	fa09 f303 	lsl.w	r3, r9, r3
 801c5b0:	4313      	orrs	r3, r2
 801c5b2:	9304      	str	r3, [sp, #16]
 801c5b4:	46a2      	mov	sl, r4
 801c5b6:	e7d2      	b.n	801c55e <_vfiprintf_r+0xc6>
 801c5b8:	9b03      	ldr	r3, [sp, #12]
 801c5ba:	1d19      	adds	r1, r3, #4
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	9103      	str	r1, [sp, #12]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	bfbb      	ittet	lt
 801c5c4:	425b      	neglt	r3, r3
 801c5c6:	f042 0202 	orrlt.w	r2, r2, #2
 801c5ca:	9307      	strge	r3, [sp, #28]
 801c5cc:	9307      	strlt	r3, [sp, #28]
 801c5ce:	bfb8      	it	lt
 801c5d0:	9204      	strlt	r2, [sp, #16]
 801c5d2:	7823      	ldrb	r3, [r4, #0]
 801c5d4:	2b2e      	cmp	r3, #46	; 0x2e
 801c5d6:	d10c      	bne.n	801c5f2 <_vfiprintf_r+0x15a>
 801c5d8:	7863      	ldrb	r3, [r4, #1]
 801c5da:	2b2a      	cmp	r3, #42	; 0x2a
 801c5dc:	d134      	bne.n	801c648 <_vfiprintf_r+0x1b0>
 801c5de:	9b03      	ldr	r3, [sp, #12]
 801c5e0:	1d1a      	adds	r2, r3, #4
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	9203      	str	r2, [sp, #12]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	bfb8      	it	lt
 801c5ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801c5ee:	3402      	adds	r4, #2
 801c5f0:	9305      	str	r3, [sp, #20]
 801c5f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c6bc <_vfiprintf_r+0x224>
 801c5f6:	7821      	ldrb	r1, [r4, #0]
 801c5f8:	2203      	movs	r2, #3
 801c5fa:	4650      	mov	r0, sl
 801c5fc:	f7e3 fdc0 	bl	8000180 <memchr>
 801c600:	b138      	cbz	r0, 801c612 <_vfiprintf_r+0x17a>
 801c602:	9b04      	ldr	r3, [sp, #16]
 801c604:	eba0 000a 	sub.w	r0, r0, sl
 801c608:	2240      	movs	r2, #64	; 0x40
 801c60a:	4082      	lsls	r2, r0
 801c60c:	4313      	orrs	r3, r2
 801c60e:	3401      	adds	r4, #1
 801c610:	9304      	str	r3, [sp, #16]
 801c612:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c616:	482a      	ldr	r0, [pc, #168]	; (801c6c0 <_vfiprintf_r+0x228>)
 801c618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c61c:	2206      	movs	r2, #6
 801c61e:	f7e3 fdaf 	bl	8000180 <memchr>
 801c622:	2800      	cmp	r0, #0
 801c624:	d03f      	beq.n	801c6a6 <_vfiprintf_r+0x20e>
 801c626:	4b27      	ldr	r3, [pc, #156]	; (801c6c4 <_vfiprintf_r+0x22c>)
 801c628:	bb1b      	cbnz	r3, 801c672 <_vfiprintf_r+0x1da>
 801c62a:	9b03      	ldr	r3, [sp, #12]
 801c62c:	3307      	adds	r3, #7
 801c62e:	f023 0307 	bic.w	r3, r3, #7
 801c632:	3308      	adds	r3, #8
 801c634:	9303      	str	r3, [sp, #12]
 801c636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c638:	443b      	add	r3, r7
 801c63a:	9309      	str	r3, [sp, #36]	; 0x24
 801c63c:	e768      	b.n	801c510 <_vfiprintf_r+0x78>
 801c63e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c642:	460c      	mov	r4, r1
 801c644:	2001      	movs	r0, #1
 801c646:	e7a6      	b.n	801c596 <_vfiprintf_r+0xfe>
 801c648:	2300      	movs	r3, #0
 801c64a:	3401      	adds	r4, #1
 801c64c:	9305      	str	r3, [sp, #20]
 801c64e:	4619      	mov	r1, r3
 801c650:	f04f 0c0a 	mov.w	ip, #10
 801c654:	4620      	mov	r0, r4
 801c656:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c65a:	3a30      	subs	r2, #48	; 0x30
 801c65c:	2a09      	cmp	r2, #9
 801c65e:	d903      	bls.n	801c668 <_vfiprintf_r+0x1d0>
 801c660:	2b00      	cmp	r3, #0
 801c662:	d0c6      	beq.n	801c5f2 <_vfiprintf_r+0x15a>
 801c664:	9105      	str	r1, [sp, #20]
 801c666:	e7c4      	b.n	801c5f2 <_vfiprintf_r+0x15a>
 801c668:	fb0c 2101 	mla	r1, ip, r1, r2
 801c66c:	4604      	mov	r4, r0
 801c66e:	2301      	movs	r3, #1
 801c670:	e7f0      	b.n	801c654 <_vfiprintf_r+0x1bc>
 801c672:	ab03      	add	r3, sp, #12
 801c674:	9300      	str	r3, [sp, #0]
 801c676:	462a      	mov	r2, r5
 801c678:	4b13      	ldr	r3, [pc, #76]	; (801c6c8 <_vfiprintf_r+0x230>)
 801c67a:	a904      	add	r1, sp, #16
 801c67c:	4630      	mov	r0, r6
 801c67e:	f3af 8000 	nop.w
 801c682:	4607      	mov	r7, r0
 801c684:	1c78      	adds	r0, r7, #1
 801c686:	d1d6      	bne.n	801c636 <_vfiprintf_r+0x19e>
 801c688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c68a:	07d9      	lsls	r1, r3, #31
 801c68c:	d405      	bmi.n	801c69a <_vfiprintf_r+0x202>
 801c68e:	89ab      	ldrh	r3, [r5, #12]
 801c690:	059a      	lsls	r2, r3, #22
 801c692:	d402      	bmi.n	801c69a <_vfiprintf_r+0x202>
 801c694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c696:	f7ff fd1d 	bl	801c0d4 <__retarget_lock_release_recursive>
 801c69a:	89ab      	ldrh	r3, [r5, #12]
 801c69c:	065b      	lsls	r3, r3, #25
 801c69e:	f53f af1d 	bmi.w	801c4dc <_vfiprintf_r+0x44>
 801c6a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c6a4:	e71c      	b.n	801c4e0 <_vfiprintf_r+0x48>
 801c6a6:	ab03      	add	r3, sp, #12
 801c6a8:	9300      	str	r3, [sp, #0]
 801c6aa:	462a      	mov	r2, r5
 801c6ac:	4b06      	ldr	r3, [pc, #24]	; (801c6c8 <_vfiprintf_r+0x230>)
 801c6ae:	a904      	add	r1, sp, #16
 801c6b0:	4630      	mov	r0, r6
 801c6b2:	f000 f879 	bl	801c7a8 <_printf_i>
 801c6b6:	e7e4      	b.n	801c682 <_vfiprintf_r+0x1ea>
 801c6b8:	0802207c 	.word	0x0802207c
 801c6bc:	08022082 	.word	0x08022082
 801c6c0:	08022086 	.word	0x08022086
 801c6c4:	00000000 	.word	0x00000000
 801c6c8:	0801c473 	.word	0x0801c473

0801c6cc <_printf_common>:
 801c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6d0:	4616      	mov	r6, r2
 801c6d2:	4699      	mov	r9, r3
 801c6d4:	688a      	ldr	r2, [r1, #8]
 801c6d6:	690b      	ldr	r3, [r1, #16]
 801c6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c6dc:	4293      	cmp	r3, r2
 801c6de:	bfb8      	it	lt
 801c6e0:	4613      	movlt	r3, r2
 801c6e2:	6033      	str	r3, [r6, #0]
 801c6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c6e8:	4607      	mov	r7, r0
 801c6ea:	460c      	mov	r4, r1
 801c6ec:	b10a      	cbz	r2, 801c6f2 <_printf_common+0x26>
 801c6ee:	3301      	adds	r3, #1
 801c6f0:	6033      	str	r3, [r6, #0]
 801c6f2:	6823      	ldr	r3, [r4, #0]
 801c6f4:	0699      	lsls	r1, r3, #26
 801c6f6:	bf42      	ittt	mi
 801c6f8:	6833      	ldrmi	r3, [r6, #0]
 801c6fa:	3302      	addmi	r3, #2
 801c6fc:	6033      	strmi	r3, [r6, #0]
 801c6fe:	6825      	ldr	r5, [r4, #0]
 801c700:	f015 0506 	ands.w	r5, r5, #6
 801c704:	d106      	bne.n	801c714 <_printf_common+0x48>
 801c706:	f104 0a19 	add.w	sl, r4, #25
 801c70a:	68e3      	ldr	r3, [r4, #12]
 801c70c:	6832      	ldr	r2, [r6, #0]
 801c70e:	1a9b      	subs	r3, r3, r2
 801c710:	42ab      	cmp	r3, r5
 801c712:	dc26      	bgt.n	801c762 <_printf_common+0x96>
 801c714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c718:	1e13      	subs	r3, r2, #0
 801c71a:	6822      	ldr	r2, [r4, #0]
 801c71c:	bf18      	it	ne
 801c71e:	2301      	movne	r3, #1
 801c720:	0692      	lsls	r2, r2, #26
 801c722:	d42b      	bmi.n	801c77c <_printf_common+0xb0>
 801c724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c728:	4649      	mov	r1, r9
 801c72a:	4638      	mov	r0, r7
 801c72c:	47c0      	blx	r8
 801c72e:	3001      	adds	r0, #1
 801c730:	d01e      	beq.n	801c770 <_printf_common+0xa4>
 801c732:	6823      	ldr	r3, [r4, #0]
 801c734:	6922      	ldr	r2, [r4, #16]
 801c736:	f003 0306 	and.w	r3, r3, #6
 801c73a:	2b04      	cmp	r3, #4
 801c73c:	bf02      	ittt	eq
 801c73e:	68e5      	ldreq	r5, [r4, #12]
 801c740:	6833      	ldreq	r3, [r6, #0]
 801c742:	1aed      	subeq	r5, r5, r3
 801c744:	68a3      	ldr	r3, [r4, #8]
 801c746:	bf0c      	ite	eq
 801c748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c74c:	2500      	movne	r5, #0
 801c74e:	4293      	cmp	r3, r2
 801c750:	bfc4      	itt	gt
 801c752:	1a9b      	subgt	r3, r3, r2
 801c754:	18ed      	addgt	r5, r5, r3
 801c756:	2600      	movs	r6, #0
 801c758:	341a      	adds	r4, #26
 801c75a:	42b5      	cmp	r5, r6
 801c75c:	d11a      	bne.n	801c794 <_printf_common+0xc8>
 801c75e:	2000      	movs	r0, #0
 801c760:	e008      	b.n	801c774 <_printf_common+0xa8>
 801c762:	2301      	movs	r3, #1
 801c764:	4652      	mov	r2, sl
 801c766:	4649      	mov	r1, r9
 801c768:	4638      	mov	r0, r7
 801c76a:	47c0      	blx	r8
 801c76c:	3001      	adds	r0, #1
 801c76e:	d103      	bne.n	801c778 <_printf_common+0xac>
 801c770:	f04f 30ff 	mov.w	r0, #4294967295
 801c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c778:	3501      	adds	r5, #1
 801c77a:	e7c6      	b.n	801c70a <_printf_common+0x3e>
 801c77c:	18e1      	adds	r1, r4, r3
 801c77e:	1c5a      	adds	r2, r3, #1
 801c780:	2030      	movs	r0, #48	; 0x30
 801c782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c786:	4422      	add	r2, r4
 801c788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c78c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c790:	3302      	adds	r3, #2
 801c792:	e7c7      	b.n	801c724 <_printf_common+0x58>
 801c794:	2301      	movs	r3, #1
 801c796:	4622      	mov	r2, r4
 801c798:	4649      	mov	r1, r9
 801c79a:	4638      	mov	r0, r7
 801c79c:	47c0      	blx	r8
 801c79e:	3001      	adds	r0, #1
 801c7a0:	d0e6      	beq.n	801c770 <_printf_common+0xa4>
 801c7a2:	3601      	adds	r6, #1
 801c7a4:	e7d9      	b.n	801c75a <_printf_common+0x8e>
	...

0801c7a8 <_printf_i>:
 801c7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c7ac:	7e0f      	ldrb	r7, [r1, #24]
 801c7ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c7b0:	2f78      	cmp	r7, #120	; 0x78
 801c7b2:	4691      	mov	r9, r2
 801c7b4:	4680      	mov	r8, r0
 801c7b6:	460c      	mov	r4, r1
 801c7b8:	469a      	mov	sl, r3
 801c7ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c7be:	d807      	bhi.n	801c7d0 <_printf_i+0x28>
 801c7c0:	2f62      	cmp	r7, #98	; 0x62
 801c7c2:	d80a      	bhi.n	801c7da <_printf_i+0x32>
 801c7c4:	2f00      	cmp	r7, #0
 801c7c6:	f000 80d4 	beq.w	801c972 <_printf_i+0x1ca>
 801c7ca:	2f58      	cmp	r7, #88	; 0x58
 801c7cc:	f000 80c0 	beq.w	801c950 <_printf_i+0x1a8>
 801c7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c7d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c7d8:	e03a      	b.n	801c850 <_printf_i+0xa8>
 801c7da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c7de:	2b15      	cmp	r3, #21
 801c7e0:	d8f6      	bhi.n	801c7d0 <_printf_i+0x28>
 801c7e2:	a101      	add	r1, pc, #4	; (adr r1, 801c7e8 <_printf_i+0x40>)
 801c7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c7e8:	0801c841 	.word	0x0801c841
 801c7ec:	0801c855 	.word	0x0801c855
 801c7f0:	0801c7d1 	.word	0x0801c7d1
 801c7f4:	0801c7d1 	.word	0x0801c7d1
 801c7f8:	0801c7d1 	.word	0x0801c7d1
 801c7fc:	0801c7d1 	.word	0x0801c7d1
 801c800:	0801c855 	.word	0x0801c855
 801c804:	0801c7d1 	.word	0x0801c7d1
 801c808:	0801c7d1 	.word	0x0801c7d1
 801c80c:	0801c7d1 	.word	0x0801c7d1
 801c810:	0801c7d1 	.word	0x0801c7d1
 801c814:	0801c959 	.word	0x0801c959
 801c818:	0801c881 	.word	0x0801c881
 801c81c:	0801c913 	.word	0x0801c913
 801c820:	0801c7d1 	.word	0x0801c7d1
 801c824:	0801c7d1 	.word	0x0801c7d1
 801c828:	0801c97b 	.word	0x0801c97b
 801c82c:	0801c7d1 	.word	0x0801c7d1
 801c830:	0801c881 	.word	0x0801c881
 801c834:	0801c7d1 	.word	0x0801c7d1
 801c838:	0801c7d1 	.word	0x0801c7d1
 801c83c:	0801c91b 	.word	0x0801c91b
 801c840:	682b      	ldr	r3, [r5, #0]
 801c842:	1d1a      	adds	r2, r3, #4
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	602a      	str	r2, [r5, #0]
 801c848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c84c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c850:	2301      	movs	r3, #1
 801c852:	e09f      	b.n	801c994 <_printf_i+0x1ec>
 801c854:	6820      	ldr	r0, [r4, #0]
 801c856:	682b      	ldr	r3, [r5, #0]
 801c858:	0607      	lsls	r7, r0, #24
 801c85a:	f103 0104 	add.w	r1, r3, #4
 801c85e:	6029      	str	r1, [r5, #0]
 801c860:	d501      	bpl.n	801c866 <_printf_i+0xbe>
 801c862:	681e      	ldr	r6, [r3, #0]
 801c864:	e003      	b.n	801c86e <_printf_i+0xc6>
 801c866:	0646      	lsls	r6, r0, #25
 801c868:	d5fb      	bpl.n	801c862 <_printf_i+0xba>
 801c86a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c86e:	2e00      	cmp	r6, #0
 801c870:	da03      	bge.n	801c87a <_printf_i+0xd2>
 801c872:	232d      	movs	r3, #45	; 0x2d
 801c874:	4276      	negs	r6, r6
 801c876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c87a:	485a      	ldr	r0, [pc, #360]	; (801c9e4 <_printf_i+0x23c>)
 801c87c:	230a      	movs	r3, #10
 801c87e:	e012      	b.n	801c8a6 <_printf_i+0xfe>
 801c880:	682b      	ldr	r3, [r5, #0]
 801c882:	6820      	ldr	r0, [r4, #0]
 801c884:	1d19      	adds	r1, r3, #4
 801c886:	6029      	str	r1, [r5, #0]
 801c888:	0605      	lsls	r5, r0, #24
 801c88a:	d501      	bpl.n	801c890 <_printf_i+0xe8>
 801c88c:	681e      	ldr	r6, [r3, #0]
 801c88e:	e002      	b.n	801c896 <_printf_i+0xee>
 801c890:	0641      	lsls	r1, r0, #25
 801c892:	d5fb      	bpl.n	801c88c <_printf_i+0xe4>
 801c894:	881e      	ldrh	r6, [r3, #0]
 801c896:	4853      	ldr	r0, [pc, #332]	; (801c9e4 <_printf_i+0x23c>)
 801c898:	2f6f      	cmp	r7, #111	; 0x6f
 801c89a:	bf0c      	ite	eq
 801c89c:	2308      	moveq	r3, #8
 801c89e:	230a      	movne	r3, #10
 801c8a0:	2100      	movs	r1, #0
 801c8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c8a6:	6865      	ldr	r5, [r4, #4]
 801c8a8:	60a5      	str	r5, [r4, #8]
 801c8aa:	2d00      	cmp	r5, #0
 801c8ac:	bfa2      	ittt	ge
 801c8ae:	6821      	ldrge	r1, [r4, #0]
 801c8b0:	f021 0104 	bicge.w	r1, r1, #4
 801c8b4:	6021      	strge	r1, [r4, #0]
 801c8b6:	b90e      	cbnz	r6, 801c8bc <_printf_i+0x114>
 801c8b8:	2d00      	cmp	r5, #0
 801c8ba:	d04b      	beq.n	801c954 <_printf_i+0x1ac>
 801c8bc:	4615      	mov	r5, r2
 801c8be:	fbb6 f1f3 	udiv	r1, r6, r3
 801c8c2:	fb03 6711 	mls	r7, r3, r1, r6
 801c8c6:	5dc7      	ldrb	r7, [r0, r7]
 801c8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c8cc:	4637      	mov	r7, r6
 801c8ce:	42bb      	cmp	r3, r7
 801c8d0:	460e      	mov	r6, r1
 801c8d2:	d9f4      	bls.n	801c8be <_printf_i+0x116>
 801c8d4:	2b08      	cmp	r3, #8
 801c8d6:	d10b      	bne.n	801c8f0 <_printf_i+0x148>
 801c8d8:	6823      	ldr	r3, [r4, #0]
 801c8da:	07de      	lsls	r6, r3, #31
 801c8dc:	d508      	bpl.n	801c8f0 <_printf_i+0x148>
 801c8de:	6923      	ldr	r3, [r4, #16]
 801c8e0:	6861      	ldr	r1, [r4, #4]
 801c8e2:	4299      	cmp	r1, r3
 801c8e4:	bfde      	ittt	le
 801c8e6:	2330      	movle	r3, #48	; 0x30
 801c8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c8f0:	1b52      	subs	r2, r2, r5
 801c8f2:	6122      	str	r2, [r4, #16]
 801c8f4:	f8cd a000 	str.w	sl, [sp]
 801c8f8:	464b      	mov	r3, r9
 801c8fa:	aa03      	add	r2, sp, #12
 801c8fc:	4621      	mov	r1, r4
 801c8fe:	4640      	mov	r0, r8
 801c900:	f7ff fee4 	bl	801c6cc <_printf_common>
 801c904:	3001      	adds	r0, #1
 801c906:	d14a      	bne.n	801c99e <_printf_i+0x1f6>
 801c908:	f04f 30ff 	mov.w	r0, #4294967295
 801c90c:	b004      	add	sp, #16
 801c90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c912:	6823      	ldr	r3, [r4, #0]
 801c914:	f043 0320 	orr.w	r3, r3, #32
 801c918:	6023      	str	r3, [r4, #0]
 801c91a:	4833      	ldr	r0, [pc, #204]	; (801c9e8 <_printf_i+0x240>)
 801c91c:	2778      	movs	r7, #120	; 0x78
 801c91e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c922:	6823      	ldr	r3, [r4, #0]
 801c924:	6829      	ldr	r1, [r5, #0]
 801c926:	061f      	lsls	r7, r3, #24
 801c928:	f851 6b04 	ldr.w	r6, [r1], #4
 801c92c:	d402      	bmi.n	801c934 <_printf_i+0x18c>
 801c92e:	065f      	lsls	r7, r3, #25
 801c930:	bf48      	it	mi
 801c932:	b2b6      	uxthmi	r6, r6
 801c934:	07df      	lsls	r7, r3, #31
 801c936:	bf48      	it	mi
 801c938:	f043 0320 	orrmi.w	r3, r3, #32
 801c93c:	6029      	str	r1, [r5, #0]
 801c93e:	bf48      	it	mi
 801c940:	6023      	strmi	r3, [r4, #0]
 801c942:	b91e      	cbnz	r6, 801c94c <_printf_i+0x1a4>
 801c944:	6823      	ldr	r3, [r4, #0]
 801c946:	f023 0320 	bic.w	r3, r3, #32
 801c94a:	6023      	str	r3, [r4, #0]
 801c94c:	2310      	movs	r3, #16
 801c94e:	e7a7      	b.n	801c8a0 <_printf_i+0xf8>
 801c950:	4824      	ldr	r0, [pc, #144]	; (801c9e4 <_printf_i+0x23c>)
 801c952:	e7e4      	b.n	801c91e <_printf_i+0x176>
 801c954:	4615      	mov	r5, r2
 801c956:	e7bd      	b.n	801c8d4 <_printf_i+0x12c>
 801c958:	682b      	ldr	r3, [r5, #0]
 801c95a:	6826      	ldr	r6, [r4, #0]
 801c95c:	6961      	ldr	r1, [r4, #20]
 801c95e:	1d18      	adds	r0, r3, #4
 801c960:	6028      	str	r0, [r5, #0]
 801c962:	0635      	lsls	r5, r6, #24
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	d501      	bpl.n	801c96c <_printf_i+0x1c4>
 801c968:	6019      	str	r1, [r3, #0]
 801c96a:	e002      	b.n	801c972 <_printf_i+0x1ca>
 801c96c:	0670      	lsls	r0, r6, #25
 801c96e:	d5fb      	bpl.n	801c968 <_printf_i+0x1c0>
 801c970:	8019      	strh	r1, [r3, #0]
 801c972:	2300      	movs	r3, #0
 801c974:	6123      	str	r3, [r4, #16]
 801c976:	4615      	mov	r5, r2
 801c978:	e7bc      	b.n	801c8f4 <_printf_i+0x14c>
 801c97a:	682b      	ldr	r3, [r5, #0]
 801c97c:	1d1a      	adds	r2, r3, #4
 801c97e:	602a      	str	r2, [r5, #0]
 801c980:	681d      	ldr	r5, [r3, #0]
 801c982:	6862      	ldr	r2, [r4, #4]
 801c984:	2100      	movs	r1, #0
 801c986:	4628      	mov	r0, r5
 801c988:	f7e3 fbfa 	bl	8000180 <memchr>
 801c98c:	b108      	cbz	r0, 801c992 <_printf_i+0x1ea>
 801c98e:	1b40      	subs	r0, r0, r5
 801c990:	6060      	str	r0, [r4, #4]
 801c992:	6863      	ldr	r3, [r4, #4]
 801c994:	6123      	str	r3, [r4, #16]
 801c996:	2300      	movs	r3, #0
 801c998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c99c:	e7aa      	b.n	801c8f4 <_printf_i+0x14c>
 801c99e:	6923      	ldr	r3, [r4, #16]
 801c9a0:	462a      	mov	r2, r5
 801c9a2:	4649      	mov	r1, r9
 801c9a4:	4640      	mov	r0, r8
 801c9a6:	47d0      	blx	sl
 801c9a8:	3001      	adds	r0, #1
 801c9aa:	d0ad      	beq.n	801c908 <_printf_i+0x160>
 801c9ac:	6823      	ldr	r3, [r4, #0]
 801c9ae:	079b      	lsls	r3, r3, #30
 801c9b0:	d413      	bmi.n	801c9da <_printf_i+0x232>
 801c9b2:	68e0      	ldr	r0, [r4, #12]
 801c9b4:	9b03      	ldr	r3, [sp, #12]
 801c9b6:	4298      	cmp	r0, r3
 801c9b8:	bfb8      	it	lt
 801c9ba:	4618      	movlt	r0, r3
 801c9bc:	e7a6      	b.n	801c90c <_printf_i+0x164>
 801c9be:	2301      	movs	r3, #1
 801c9c0:	4632      	mov	r2, r6
 801c9c2:	4649      	mov	r1, r9
 801c9c4:	4640      	mov	r0, r8
 801c9c6:	47d0      	blx	sl
 801c9c8:	3001      	adds	r0, #1
 801c9ca:	d09d      	beq.n	801c908 <_printf_i+0x160>
 801c9cc:	3501      	adds	r5, #1
 801c9ce:	68e3      	ldr	r3, [r4, #12]
 801c9d0:	9903      	ldr	r1, [sp, #12]
 801c9d2:	1a5b      	subs	r3, r3, r1
 801c9d4:	42ab      	cmp	r3, r5
 801c9d6:	dcf2      	bgt.n	801c9be <_printf_i+0x216>
 801c9d8:	e7eb      	b.n	801c9b2 <_printf_i+0x20a>
 801c9da:	2500      	movs	r5, #0
 801c9dc:	f104 0619 	add.w	r6, r4, #25
 801c9e0:	e7f5      	b.n	801c9ce <_printf_i+0x226>
 801c9e2:	bf00      	nop
 801c9e4:	0802208d 	.word	0x0802208d
 801c9e8:	0802209e 	.word	0x0802209e

0801c9ec <__sflush_r>:
 801c9ec:	898a      	ldrh	r2, [r1, #12]
 801c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9f0:	4605      	mov	r5, r0
 801c9f2:	0710      	lsls	r0, r2, #28
 801c9f4:	460c      	mov	r4, r1
 801c9f6:	d457      	bmi.n	801caa8 <__sflush_r+0xbc>
 801c9f8:	684b      	ldr	r3, [r1, #4]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	dc04      	bgt.n	801ca08 <__sflush_r+0x1c>
 801c9fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	dc01      	bgt.n	801ca08 <__sflush_r+0x1c>
 801ca04:	2000      	movs	r0, #0
 801ca06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca0a:	2e00      	cmp	r6, #0
 801ca0c:	d0fa      	beq.n	801ca04 <__sflush_r+0x18>
 801ca0e:	2300      	movs	r3, #0
 801ca10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ca14:	682f      	ldr	r7, [r5, #0]
 801ca16:	6a21      	ldr	r1, [r4, #32]
 801ca18:	602b      	str	r3, [r5, #0]
 801ca1a:	d032      	beq.n	801ca82 <__sflush_r+0x96>
 801ca1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ca1e:	89a3      	ldrh	r3, [r4, #12]
 801ca20:	075a      	lsls	r2, r3, #29
 801ca22:	d505      	bpl.n	801ca30 <__sflush_r+0x44>
 801ca24:	6863      	ldr	r3, [r4, #4]
 801ca26:	1ac0      	subs	r0, r0, r3
 801ca28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ca2a:	b10b      	cbz	r3, 801ca30 <__sflush_r+0x44>
 801ca2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ca2e:	1ac0      	subs	r0, r0, r3
 801ca30:	2300      	movs	r3, #0
 801ca32:	4602      	mov	r2, r0
 801ca34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca36:	6a21      	ldr	r1, [r4, #32]
 801ca38:	4628      	mov	r0, r5
 801ca3a:	47b0      	blx	r6
 801ca3c:	1c43      	adds	r3, r0, #1
 801ca3e:	89a3      	ldrh	r3, [r4, #12]
 801ca40:	d106      	bne.n	801ca50 <__sflush_r+0x64>
 801ca42:	6829      	ldr	r1, [r5, #0]
 801ca44:	291d      	cmp	r1, #29
 801ca46:	d82b      	bhi.n	801caa0 <__sflush_r+0xb4>
 801ca48:	4a28      	ldr	r2, [pc, #160]	; (801caec <__sflush_r+0x100>)
 801ca4a:	410a      	asrs	r2, r1
 801ca4c:	07d6      	lsls	r6, r2, #31
 801ca4e:	d427      	bmi.n	801caa0 <__sflush_r+0xb4>
 801ca50:	2200      	movs	r2, #0
 801ca52:	6062      	str	r2, [r4, #4]
 801ca54:	04d9      	lsls	r1, r3, #19
 801ca56:	6922      	ldr	r2, [r4, #16]
 801ca58:	6022      	str	r2, [r4, #0]
 801ca5a:	d504      	bpl.n	801ca66 <__sflush_r+0x7a>
 801ca5c:	1c42      	adds	r2, r0, #1
 801ca5e:	d101      	bne.n	801ca64 <__sflush_r+0x78>
 801ca60:	682b      	ldr	r3, [r5, #0]
 801ca62:	b903      	cbnz	r3, 801ca66 <__sflush_r+0x7a>
 801ca64:	6560      	str	r0, [r4, #84]	; 0x54
 801ca66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ca68:	602f      	str	r7, [r5, #0]
 801ca6a:	2900      	cmp	r1, #0
 801ca6c:	d0ca      	beq.n	801ca04 <__sflush_r+0x18>
 801ca6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca72:	4299      	cmp	r1, r3
 801ca74:	d002      	beq.n	801ca7c <__sflush_r+0x90>
 801ca76:	4628      	mov	r0, r5
 801ca78:	f7ff fb44 	bl	801c104 <_free_r>
 801ca7c:	2000      	movs	r0, #0
 801ca7e:	6360      	str	r0, [r4, #52]	; 0x34
 801ca80:	e7c1      	b.n	801ca06 <__sflush_r+0x1a>
 801ca82:	2301      	movs	r3, #1
 801ca84:	4628      	mov	r0, r5
 801ca86:	47b0      	blx	r6
 801ca88:	1c41      	adds	r1, r0, #1
 801ca8a:	d1c8      	bne.n	801ca1e <__sflush_r+0x32>
 801ca8c:	682b      	ldr	r3, [r5, #0]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d0c5      	beq.n	801ca1e <__sflush_r+0x32>
 801ca92:	2b1d      	cmp	r3, #29
 801ca94:	d001      	beq.n	801ca9a <__sflush_r+0xae>
 801ca96:	2b16      	cmp	r3, #22
 801ca98:	d101      	bne.n	801ca9e <__sflush_r+0xb2>
 801ca9a:	602f      	str	r7, [r5, #0]
 801ca9c:	e7b2      	b.n	801ca04 <__sflush_r+0x18>
 801ca9e:	89a3      	ldrh	r3, [r4, #12]
 801caa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801caa4:	81a3      	strh	r3, [r4, #12]
 801caa6:	e7ae      	b.n	801ca06 <__sflush_r+0x1a>
 801caa8:	690f      	ldr	r7, [r1, #16]
 801caaa:	2f00      	cmp	r7, #0
 801caac:	d0aa      	beq.n	801ca04 <__sflush_r+0x18>
 801caae:	0793      	lsls	r3, r2, #30
 801cab0:	680e      	ldr	r6, [r1, #0]
 801cab2:	bf08      	it	eq
 801cab4:	694b      	ldreq	r3, [r1, #20]
 801cab6:	600f      	str	r7, [r1, #0]
 801cab8:	bf18      	it	ne
 801caba:	2300      	movne	r3, #0
 801cabc:	1bf6      	subs	r6, r6, r7
 801cabe:	608b      	str	r3, [r1, #8]
 801cac0:	2e00      	cmp	r6, #0
 801cac2:	dd9f      	ble.n	801ca04 <__sflush_r+0x18>
 801cac4:	6a21      	ldr	r1, [r4, #32]
 801cac6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801caca:	4633      	mov	r3, r6
 801cacc:	463a      	mov	r2, r7
 801cace:	4628      	mov	r0, r5
 801cad0:	47e0      	blx	ip
 801cad2:	2800      	cmp	r0, #0
 801cad4:	dc06      	bgt.n	801cae4 <__sflush_r+0xf8>
 801cad6:	89a3      	ldrh	r3, [r4, #12]
 801cad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cadc:	81a3      	strh	r3, [r4, #12]
 801cade:	f04f 30ff 	mov.w	r0, #4294967295
 801cae2:	e790      	b.n	801ca06 <__sflush_r+0x1a>
 801cae4:	4407      	add	r7, r0
 801cae6:	1a36      	subs	r6, r6, r0
 801cae8:	e7ea      	b.n	801cac0 <__sflush_r+0xd4>
 801caea:	bf00      	nop
 801caec:	dfbffffe 	.word	0xdfbffffe

0801caf0 <_fflush_r>:
 801caf0:	b538      	push	{r3, r4, r5, lr}
 801caf2:	690b      	ldr	r3, [r1, #16]
 801caf4:	4605      	mov	r5, r0
 801caf6:	460c      	mov	r4, r1
 801caf8:	b913      	cbnz	r3, 801cb00 <_fflush_r+0x10>
 801cafa:	2500      	movs	r5, #0
 801cafc:	4628      	mov	r0, r5
 801cafe:	bd38      	pop	{r3, r4, r5, pc}
 801cb00:	b118      	cbz	r0, 801cb0a <_fflush_r+0x1a>
 801cb02:	6a03      	ldr	r3, [r0, #32]
 801cb04:	b90b      	cbnz	r3, 801cb0a <_fflush_r+0x1a>
 801cb06:	f7ff f889 	bl	801bc1c <__sinit>
 801cb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d0f3      	beq.n	801cafa <_fflush_r+0xa>
 801cb12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cb14:	07d0      	lsls	r0, r2, #31
 801cb16:	d404      	bmi.n	801cb22 <_fflush_r+0x32>
 801cb18:	0599      	lsls	r1, r3, #22
 801cb1a:	d402      	bmi.n	801cb22 <_fflush_r+0x32>
 801cb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb1e:	f7ff fad8 	bl	801c0d2 <__retarget_lock_acquire_recursive>
 801cb22:	4628      	mov	r0, r5
 801cb24:	4621      	mov	r1, r4
 801cb26:	f7ff ff61 	bl	801c9ec <__sflush_r>
 801cb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb2c:	07da      	lsls	r2, r3, #31
 801cb2e:	4605      	mov	r5, r0
 801cb30:	d4e4      	bmi.n	801cafc <_fflush_r+0xc>
 801cb32:	89a3      	ldrh	r3, [r4, #12]
 801cb34:	059b      	lsls	r3, r3, #22
 801cb36:	d4e1      	bmi.n	801cafc <_fflush_r+0xc>
 801cb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb3a:	f7ff facb 	bl	801c0d4 <__retarget_lock_release_recursive>
 801cb3e:	e7dd      	b.n	801cafc <_fflush_r+0xc>

0801cb40 <__swhatbuf_r>:
 801cb40:	b570      	push	{r4, r5, r6, lr}
 801cb42:	460c      	mov	r4, r1
 801cb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb48:	2900      	cmp	r1, #0
 801cb4a:	b096      	sub	sp, #88	; 0x58
 801cb4c:	4615      	mov	r5, r2
 801cb4e:	461e      	mov	r6, r3
 801cb50:	da0d      	bge.n	801cb6e <__swhatbuf_r+0x2e>
 801cb52:	89a3      	ldrh	r3, [r4, #12]
 801cb54:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cb58:	f04f 0100 	mov.w	r1, #0
 801cb5c:	bf0c      	ite	eq
 801cb5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cb62:	2340      	movne	r3, #64	; 0x40
 801cb64:	2000      	movs	r0, #0
 801cb66:	6031      	str	r1, [r6, #0]
 801cb68:	602b      	str	r3, [r5, #0]
 801cb6a:	b016      	add	sp, #88	; 0x58
 801cb6c:	bd70      	pop	{r4, r5, r6, pc}
 801cb6e:	466a      	mov	r2, sp
 801cb70:	f000 f848 	bl	801cc04 <_fstat_r>
 801cb74:	2800      	cmp	r0, #0
 801cb76:	dbec      	blt.n	801cb52 <__swhatbuf_r+0x12>
 801cb78:	9901      	ldr	r1, [sp, #4]
 801cb7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cb7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cb82:	4259      	negs	r1, r3
 801cb84:	4159      	adcs	r1, r3
 801cb86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cb8a:	e7eb      	b.n	801cb64 <__swhatbuf_r+0x24>

0801cb8c <__smakebuf_r>:
 801cb8c:	898b      	ldrh	r3, [r1, #12]
 801cb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cb90:	079d      	lsls	r5, r3, #30
 801cb92:	4606      	mov	r6, r0
 801cb94:	460c      	mov	r4, r1
 801cb96:	d507      	bpl.n	801cba8 <__smakebuf_r+0x1c>
 801cb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cb9c:	6023      	str	r3, [r4, #0]
 801cb9e:	6123      	str	r3, [r4, #16]
 801cba0:	2301      	movs	r3, #1
 801cba2:	6163      	str	r3, [r4, #20]
 801cba4:	b002      	add	sp, #8
 801cba6:	bd70      	pop	{r4, r5, r6, pc}
 801cba8:	ab01      	add	r3, sp, #4
 801cbaa:	466a      	mov	r2, sp
 801cbac:	f7ff ffc8 	bl	801cb40 <__swhatbuf_r>
 801cbb0:	9900      	ldr	r1, [sp, #0]
 801cbb2:	4605      	mov	r5, r0
 801cbb4:	4630      	mov	r0, r6
 801cbb6:	f7fe ff19 	bl	801b9ec <_malloc_r>
 801cbba:	b948      	cbnz	r0, 801cbd0 <__smakebuf_r+0x44>
 801cbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbc0:	059a      	lsls	r2, r3, #22
 801cbc2:	d4ef      	bmi.n	801cba4 <__smakebuf_r+0x18>
 801cbc4:	f023 0303 	bic.w	r3, r3, #3
 801cbc8:	f043 0302 	orr.w	r3, r3, #2
 801cbcc:	81a3      	strh	r3, [r4, #12]
 801cbce:	e7e3      	b.n	801cb98 <__smakebuf_r+0xc>
 801cbd0:	89a3      	ldrh	r3, [r4, #12]
 801cbd2:	6020      	str	r0, [r4, #0]
 801cbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbd8:	81a3      	strh	r3, [r4, #12]
 801cbda:	9b00      	ldr	r3, [sp, #0]
 801cbdc:	6163      	str	r3, [r4, #20]
 801cbde:	9b01      	ldr	r3, [sp, #4]
 801cbe0:	6120      	str	r0, [r4, #16]
 801cbe2:	b15b      	cbz	r3, 801cbfc <__smakebuf_r+0x70>
 801cbe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cbe8:	4630      	mov	r0, r6
 801cbea:	f000 f81d 	bl	801cc28 <_isatty_r>
 801cbee:	b128      	cbz	r0, 801cbfc <__smakebuf_r+0x70>
 801cbf0:	89a3      	ldrh	r3, [r4, #12]
 801cbf2:	f023 0303 	bic.w	r3, r3, #3
 801cbf6:	f043 0301 	orr.w	r3, r3, #1
 801cbfa:	81a3      	strh	r3, [r4, #12]
 801cbfc:	89a3      	ldrh	r3, [r4, #12]
 801cbfe:	431d      	orrs	r5, r3
 801cc00:	81a5      	strh	r5, [r4, #12]
 801cc02:	e7cf      	b.n	801cba4 <__smakebuf_r+0x18>

0801cc04 <_fstat_r>:
 801cc04:	b538      	push	{r3, r4, r5, lr}
 801cc06:	4d07      	ldr	r5, [pc, #28]	; (801cc24 <_fstat_r+0x20>)
 801cc08:	2300      	movs	r3, #0
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	4608      	mov	r0, r1
 801cc0e:	4611      	mov	r1, r2
 801cc10:	602b      	str	r3, [r5, #0]
 801cc12:	f000 f859 	bl	801ccc8 <_fstat>
 801cc16:	1c43      	adds	r3, r0, #1
 801cc18:	d102      	bne.n	801cc20 <_fstat_r+0x1c>
 801cc1a:	682b      	ldr	r3, [r5, #0]
 801cc1c:	b103      	cbz	r3, 801cc20 <_fstat_r+0x1c>
 801cc1e:	6023      	str	r3, [r4, #0]
 801cc20:	bd38      	pop	{r3, r4, r5, pc}
 801cc22:	bf00      	nop
 801cc24:	20003f9c 	.word	0x20003f9c

0801cc28 <_isatty_r>:
 801cc28:	b538      	push	{r3, r4, r5, lr}
 801cc2a:	4d06      	ldr	r5, [pc, #24]	; (801cc44 <_isatty_r+0x1c>)
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	4604      	mov	r4, r0
 801cc30:	4608      	mov	r0, r1
 801cc32:	602b      	str	r3, [r5, #0]
 801cc34:	f000 f850 	bl	801ccd8 <_isatty>
 801cc38:	1c43      	adds	r3, r0, #1
 801cc3a:	d102      	bne.n	801cc42 <_isatty_r+0x1a>
 801cc3c:	682b      	ldr	r3, [r5, #0]
 801cc3e:	b103      	cbz	r3, 801cc42 <_isatty_r+0x1a>
 801cc40:	6023      	str	r3, [r4, #0]
 801cc42:	bd38      	pop	{r3, r4, r5, pc}
 801cc44:	20003f9c 	.word	0x20003f9c

0801cc48 <_realloc_r>:
 801cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc4c:	4680      	mov	r8, r0
 801cc4e:	4614      	mov	r4, r2
 801cc50:	460e      	mov	r6, r1
 801cc52:	b921      	cbnz	r1, 801cc5e <_realloc_r+0x16>
 801cc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc58:	4611      	mov	r1, r2
 801cc5a:	f7fe bec7 	b.w	801b9ec <_malloc_r>
 801cc5e:	b92a      	cbnz	r2, 801cc6c <_realloc_r+0x24>
 801cc60:	f7ff fa50 	bl	801c104 <_free_r>
 801cc64:	4625      	mov	r5, r4
 801cc66:	4628      	mov	r0, r5
 801cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc6c:	f000 f81b 	bl	801cca6 <_malloc_usable_size_r>
 801cc70:	4284      	cmp	r4, r0
 801cc72:	4607      	mov	r7, r0
 801cc74:	d802      	bhi.n	801cc7c <_realloc_r+0x34>
 801cc76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cc7a:	d812      	bhi.n	801cca2 <_realloc_r+0x5a>
 801cc7c:	4621      	mov	r1, r4
 801cc7e:	4640      	mov	r0, r8
 801cc80:	f7fe feb4 	bl	801b9ec <_malloc_r>
 801cc84:	4605      	mov	r5, r0
 801cc86:	2800      	cmp	r0, #0
 801cc88:	d0ed      	beq.n	801cc66 <_realloc_r+0x1e>
 801cc8a:	42bc      	cmp	r4, r7
 801cc8c:	4622      	mov	r2, r4
 801cc8e:	4631      	mov	r1, r6
 801cc90:	bf28      	it	cs
 801cc92:	463a      	movcs	r2, r7
 801cc94:	f7ff fa27 	bl	801c0e6 <memcpy>
 801cc98:	4631      	mov	r1, r6
 801cc9a:	4640      	mov	r0, r8
 801cc9c:	f7ff fa32 	bl	801c104 <_free_r>
 801cca0:	e7e1      	b.n	801cc66 <_realloc_r+0x1e>
 801cca2:	4635      	mov	r5, r6
 801cca4:	e7df      	b.n	801cc66 <_realloc_r+0x1e>

0801cca6 <_malloc_usable_size_r>:
 801cca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccaa:	1f18      	subs	r0, r3, #4
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	bfbc      	itt	lt
 801ccb0:	580b      	ldrlt	r3, [r1, r0]
 801ccb2:	18c0      	addlt	r0, r0, r3
 801ccb4:	4770      	bx	lr
	...

0801ccb8 <_close>:
 801ccb8:	4b02      	ldr	r3, [pc, #8]	; (801ccc4 <_close+0xc>)
 801ccba:	2258      	movs	r2, #88	; 0x58
 801ccbc:	601a      	str	r2, [r3, #0]
 801ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 801ccc2:	4770      	bx	lr
 801ccc4:	20003f9c 	.word	0x20003f9c

0801ccc8 <_fstat>:
 801ccc8:	4b02      	ldr	r3, [pc, #8]	; (801ccd4 <_fstat+0xc>)
 801ccca:	2258      	movs	r2, #88	; 0x58
 801cccc:	601a      	str	r2, [r3, #0]
 801ccce:	f04f 30ff 	mov.w	r0, #4294967295
 801ccd2:	4770      	bx	lr
 801ccd4:	20003f9c 	.word	0x20003f9c

0801ccd8 <_isatty>:
 801ccd8:	4b02      	ldr	r3, [pc, #8]	; (801cce4 <_isatty+0xc>)
 801ccda:	2258      	movs	r2, #88	; 0x58
 801ccdc:	601a      	str	r2, [r3, #0]
 801ccde:	2000      	movs	r0, #0
 801cce0:	4770      	bx	lr
 801cce2:	bf00      	nop
 801cce4:	20003f9c 	.word	0x20003f9c

0801cce8 <_lseek>:
 801cce8:	4b02      	ldr	r3, [pc, #8]	; (801ccf4 <_lseek+0xc>)
 801ccea:	2258      	movs	r2, #88	; 0x58
 801ccec:	601a      	str	r2, [r3, #0]
 801ccee:	f04f 30ff 	mov.w	r0, #4294967295
 801ccf2:	4770      	bx	lr
 801ccf4:	20003f9c 	.word	0x20003f9c

0801ccf8 <_read>:
 801ccf8:	4b02      	ldr	r3, [pc, #8]	; (801cd04 <_read+0xc>)
 801ccfa:	2258      	movs	r2, #88	; 0x58
 801ccfc:	601a      	str	r2, [r3, #0]
 801ccfe:	f04f 30ff 	mov.w	r0, #4294967295
 801cd02:	4770      	bx	lr
 801cd04:	20003f9c 	.word	0x20003f9c

0801cd08 <_sbrk>:
 801cd08:	4a04      	ldr	r2, [pc, #16]	; (801cd1c <_sbrk+0x14>)
 801cd0a:	6811      	ldr	r1, [r2, #0]
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	b909      	cbnz	r1, 801cd14 <_sbrk+0xc>
 801cd10:	4903      	ldr	r1, [pc, #12]	; (801cd20 <_sbrk+0x18>)
 801cd12:	6011      	str	r1, [r2, #0]
 801cd14:	6810      	ldr	r0, [r2, #0]
 801cd16:	4403      	add	r3, r0
 801cd18:	6013      	str	r3, [r2, #0]
 801cd1a:	4770      	bx	lr
 801cd1c:	20003fa4 	.word	0x20003fa4
 801cd20:	20003fa8 	.word	0x20003fa8

0801cd24 <_init>:
 801cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd26:	bf00      	nop
 801cd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd2a:	bc08      	pop	{r3}
 801cd2c:	469e      	mov	lr, r3
 801cd2e:	4770      	bx	lr

0801cd30 <_fini>:
 801cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd32:	bf00      	nop
 801cd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd36:	bc08      	pop	{r3}
 801cd38:	469e      	mov	lr, r3
 801cd3a:	4770      	bx	lr
